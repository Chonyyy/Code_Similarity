{
    "total_nodes": 67008,
    "max_depth": 1121,
    "number_of_variables": 112,
    "number_of_constants": 0,
    "out_variables": 0,
    "ref_params": 0,
    "number_of_methods": 100,
    "number_of_classes": 91,
    "number_of_interfaces": 0,
    "number_of_abstract_classes": 0,
    "number_of_sealed_classes": 0,
    "import_statements": 0,
    "number_of_try_blocks": 0,
    "number_of_lists": 5,
    "number_of_dictionaries": 2,
    "number_of_enums": 4,
    "number_of_delegates": 0,
    "function_calls": 125,
    "enums_names": [
        "TokenType",
        "TokenName",
        "ExpressionType",
        "ErrorCode"
    ],
    "control_structures_if": 173,
    "control_structures_switch": 0,
    "control_structures_for": 5,
    "control_structures_while": 0,
    "control_structures_dowhile": 0,
    "access_modifiers_public": 364,
    "access_modifiers_private": 1,
    "access_modifiers_protected": 0,
    "access_modifiers_internal": 0,
    "access_modifiers_static": 11,
    "access_modifiers_protected_internal": 0,
    "access_modifiers_private_protected": 0,
    "modifier_readonly": 0,
    "modifier_volatile": 0,
    "modifier_virtual": 0,
    "modifier_override": 131,
    "modifier_new": 39,
    "modifier_partial": 0,
    "modifier_extern": 0,
    "modifier_unsafe": 0,
    "modifier_async": 0,
    "linq_querie_select": 0,
    "linq_queries_where": 0,
    "linq_queries_orderBy": 0,
    "linq_queries_groupBy": 0,
    "linq_queries_join": 0,
    "linq_queries_sum": 8,
    "linq_queries_count": 0,
    "library_call_console": 5,
    "library_call_math": 5,
    "number_of_lambdas": 9,
    "number_of_getters": 57,
    "number_of_setters": 55,
    "number_of_tuples": 0,
    "number_of_namespaces": 18,
    "method_parameters": [
        [
            "AddToken",
            [
                [
                    "TokenName",
                    "tipo"
                ]
            ]
        ],
        [
            "Imprimir",
            [
                [
                    "List<Token>",
                    "list"
                ]
            ]
        ],
        [
            "ParserCode",
            [
                [
                    "List<Errors>",
                    "error"
                ],
                [
                    "int",
                    "position"
                ],
                [
                    "Expression",
                    "epsilon"
                ]
            ]
        ],
        [
            "ParserB",
            [
                [
                    "List<Errors>",
                    "error"
                ],
                [
                    "Expression",
                    "epsilon"
                ],
                [
                    "int",
                    "position"
                ]
            ]
        ],
        [
            "ParserID",
            [
                [
                    "List<Errors>",
                    "error"
                ],
                [
                    "List<Token>",
                    "ID"
                ],
                [
                    "int",
                    "position"
                ]
            ]
        ],
        [
            "ParserH",
            [
                [
                    "List<Errors>",
                    "error"
                ],
                [
                    "List<Expression>",
                    "exp"
                ],
                [
                    "int",
                    "position"
                ]
            ]
        ],
        [
            "ParserD",
            [
                [
                    "List<Errors>",
                    "error"
                ],
                [
                    "int",
                    "position"
                ],
                [
                    "Expression",
                    "epsilon"
                ]
            ]
        ],
        [
            "ParserAnd_Or",
            [
                [
                    "List<Errors>",
                    "error"
                ],
                [
                    "Expression",
                    "epsilon"
                ],
                [
                    "int",
                    "position"
                ]
            ]
        ],
        [
            "ParserI",
            [
                [
                    "List<Errors>",
                    "error"
                ],
                [
                    "Expression",
                    "epsilon"
                ],
                [
                    "int",
                    "position"
                ]
            ]
        ],
        [
            "ParserComparer",
            [
                [
                    "List<Errors>",
                    "error"
                ],
                [
                    "Expression",
                    "epsilon"
                ],
                [
                    "int",
                    "position"
                ]
            ]
        ],
        [
            "ParserExpression",
            [
                [
                    "List<Errors>",
                    "error"
                ],
                [
                    "Expression",
                    "epsilon"
                ],
                [
                    "int",
                    "position"
                ]
            ]
        ],
        [
            "ParserX",
            [
                [
                    "List<Errors>",
                    "error"
                ],
                [
                    "Expression",
                    "epsilon"
                ],
                [
                    "int",
                    "position"
                ]
            ]
        ],
        [
            "ParserTerm",
            [
                [
                    "List<Errors>",
                    "error"
                ],
                [
                    "Expression",
                    "epsilon"
                ],
                [
                    "int",
                    "position"
                ]
            ]
        ],
        [
            "ParserY",
            [
                [
                    "List<Errors>",
                    "error"
                ],
                [
                    "Expression",
                    "epsilon"
                ],
                [
                    "int",
                    "position"
                ]
            ]
        ],
        [
            "ParserFactor",
            [
                [
                    "List<Errors>",
                    "error"
                ],
                [
                    "Expression",
                    "epsilon"
                ],
                [
                    "int",
                    "position"
                ]
            ]
        ],
        [
            "Scope",
            [
                [
                    "Scope",
                    "scope"
                ]
            ]
        ],
        [
            "CheckSemantic",
            [
                [
                    "List<Errors>",
                    "errors"
                ],
                [
                    "Scope",
                    "scope"
                ]
            ]
        ],
        [
            "Scope",
            [
                [
                    "Scope",
                    "scope"
                ]
            ]
        ],
        [
            "CheckSemantic",
            [
                [
                    "List<Errors>",
                    "errors"
                ],
                [
                    "Scope",
                    "scope"
                ]
            ]
        ],
        [
            "Scope",
            [
                [
                    "Scope",
                    "scope"
                ]
            ]
        ],
        [
            "CheckSemantic",
            [
                [
                    "List<Errors>",
                    "errors"
                ],
                [
                    "Scope",
                    "scope"
                ]
            ]
        ],
        [
            "Scope",
            [
                [
                    "Scope",
                    "scope"
                ]
            ]
        ],
        [
            "CheckSemantic",
            [
                [
                    "List<Errors>",
                    "errors"
                ],
                [
                    "Scope",
                    "scope"
                ]
            ]
        ],
        [
            "Scope",
            [
                [
                    "Scope",
                    "scope"
                ]
            ]
        ],
        [
            "CheckSemantic",
            [
                [
                    "List<Errors>",
                    "errors"
                ],
                [
                    "Scope",
                    "scope"
                ]
            ]
        ],
        [
            "Scope",
            [
                [
                    "Scope",
                    "scope"
                ]
            ]
        ],
        [
            "CheckSemantic",
            [
                [
                    "List<Errors>",
                    "errors"
                ],
                [
                    "Scope",
                    "scope"
                ]
            ]
        ],
        [
            "CheckSemantic",
            [
                [
                    "List<Errors>",
                    "errors"
                ],
                [
                    "Scope",
                    "scope"
                ]
            ]
        ],
        [
            "Scope",
            [
                [
                    "Scope",
                    "scope"
                ]
            ]
        ],
        [
            "Scope",
            [
                [
                    "Scope",
                    "scope"
                ]
            ]
        ],
        [
            "CheckSemantic",
            [
                [
                    "List<Errors>",
                    "errors"
                ],
                [
                    "Scope",
                    "scope"
                ]
            ]
        ],
        [
            "Scope",
            [
                [
                    "Scope",
                    "scope"
                ]
            ]
        ],
        [
            "CheckSemantic",
            [
                [
                    "List<Errors>",
                    "errors"
                ],
                [
                    "Scope",
                    "scope"
                ]
            ]
        ],
        [
            "Scope",
            [
                [
                    "Scope",
                    "scope"
                ]
            ]
        ],
        [
            "CheckSemantic",
            [
                [
                    "List<Errors>",
                    "errors"
                ],
                [
                    "Scope",
                    "scope"
                ]
            ]
        ],
        [
            "Scope",
            [
                [
                    "Scope",
                    "scope"
                ]
            ]
        ],
        [
            "CheckSemantic",
            [
                [
                    "List<Errors>",
                    "errors"
                ],
                [
                    "Scope",
                    "scope"
                ]
            ]
        ],
        [
            "Scope",
            [
                [
                    "Scope",
                    "scope"
                ]
            ]
        ],
        [
            "CheckSemantic",
            [
                [
                    "List<Errors>",
                    "errors"
                ],
                [
                    "Scope",
                    "scope"
                ]
            ]
        ],
        [
            "Scope",
            [
                [
                    "Scope",
                    "scope"
                ]
            ]
        ],
        [
            "CheckSemantic",
            [
                [
                    "List<Errors>",
                    "errors"
                ],
                [
                    "Scope",
                    "scope"
                ]
            ]
        ],
        [
            "Scope",
            [
                [
                    "Scope",
                    "scope"
                ]
            ]
        ],
        [
            "CheckSemantic",
            [
                [
                    "List<Errors>",
                    "errors"
                ],
                [
                    "Scope",
                    "scope"
                ]
            ]
        ],
        [
            "Scope",
            [
                [
                    "Scope",
                    "scope"
                ]
            ]
        ],
        [
            "CheckSemantic",
            [
                [
                    "List<Errors>",
                    "errors"
                ],
                [
                    "Scope",
                    "scope"
                ]
            ]
        ],
        [
            "Scope",
            [
                [
                    "Scope",
                    "scope"
                ]
            ]
        ],
        [
            "CheckSemantic",
            [
                [
                    "List<Errors>",
                    "errors"
                ],
                [
                    "Scope",
                    "scope"
                ]
            ]
        ],
        [
            "Scope",
            [
                [
                    "Scope",
                    "scope"
                ]
            ]
        ],
        [
            "CheckSemantic",
            [
                [
                    "List<Errors>",
                    "errors"
                ],
                [
                    "Scope",
                    "scope"
                ]
            ]
        ],
        [
            "Scope",
            [
                [
                    "Scope",
                    "scope"
                ]
            ]
        ],
        [
            "CheckSemantic",
            [
                [
                    "List<Errors>",
                    "errors"
                ],
                [
                    "Scope",
                    "scope"
                ]
            ]
        ],
        [
            "Scope",
            [
                [
                    "Scope",
                    "scope"
                ]
            ]
        ],
        [
            "CheckSemantic",
            [
                [
                    "List<Errors>",
                    "errors"
                ],
                [
                    "Scope",
                    "scope"
                ]
            ]
        ],
        [
            "CheckSemantic",
            [
                [
                    "List<Errors>",
                    "errors"
                ],
                [
                    "Scope",
                    "scope"
                ]
            ]
        ],
        [
            "Scope",
            [
                [
                    "Scope",
                    "scope"
                ]
            ]
        ],
        [
            "Scope",
            [
                [
                    "Scope",
                    "scope"
                ]
            ]
        ],
        [
            "CheckSemantic",
            [
                [
                    "List<Errors>",
                    "errors"
                ],
                [
                    "Scope",
                    "scope"
                ]
            ]
        ],
        [
            "Scope",
            [
                [
                    "Scope",
                    "scope"
                ]
            ]
        ],
        [
            "CheckSemantic",
            [
                [
                    "List<Errors>",
                    "errors"
                ],
                [
                    "Scope",
                    "scope"
                ]
            ]
        ],
        [
            "Scope",
            [
                [
                    "Scope",
                    "scope"
                ]
            ]
        ],
        [
            "CheckSemantic",
            [
                [
                    "List<Errors>",
                    "errors"
                ],
                [
                    "Scope",
                    "scope"
                ]
            ]
        ],
        [
            "Scope",
            [
                [
                    "Scope",
                    "scope"
                ]
            ]
        ],
        [
            "CheckSemantic",
            [
                [
                    "List<Errors>",
                    "errors"
                ],
                [
                    "Scope",
                    "scope"
                ]
            ]
        ],
        [
            "Scope",
            [
                [
                    "Scope",
                    "scope"
                ]
            ]
        ],
        [
            "CheckSemantic",
            [
                [
                    "List<Errors>",
                    "errors"
                ],
                [
                    "Scope",
                    "scope"
                ]
            ]
        ],
        [
            "Scope",
            [
                [
                    "Scope",
                    "scope"
                ]
            ]
        ],
        [
            "CheckSemantic",
            [
                [
                    "List<Errors>",
                    "errors"
                ],
                [
                    "Scope",
                    "scope"
                ]
            ]
        ]
    ],
    "variable_names": [
        [
            "string",
            "text"
        ],
        [
            "Expression",
            "program"
        ],
        [
            "Tokenizar",
            "tokenizar"
        ],
        [
            "List",
            "errores"
        ],
        [
            "Parser",
            "parser"
        ],
        [
            "Scope",
            "scope"
        ],
        [
            "List",
            "tokens"
        ],
        [
            "char",
            "Leyendo"
        ],
        [
            "int",
            "i"
        ],
        [
            "Expression",
            "exp"
        ],
        [
            "Expression",
            "Them"
        ],
        [
            "Expression",
            "result"
        ],
        [
            "Expression",
            "Div"
        ],
        [
            "Expression",
            "instrutcions"
        ],
        [
            "Expression",
            "Sub"
        ],
        [
            "Expression",
            "MenorEqual"
        ],
        [
            "Expression",
            "T"
        ],
        [
            "Expression",
            "asig"
        ],
        [
            "Expression",
            "Pow"
        ],
        [
            "Expression",
            "func"
        ],
        [
            "Expression",
            "F"
        ],
        [
            "Expression",
            "Not"
        ],
        [
            "var",
            "expression"
        ],
        [
            "Token",
            "func_name"
        ],
        [
            "Expression",
            "EqualEqual"
        ],
        [
            "Token",
            "f"
        ],
        [
            "Expression",
            "If"
        ],
        [
            "List",
            "param"
        ],
        [
            "Expression",
            "C"
        ],
        [
            "Expression",
            "print"
        ],
        [
            "Expression",
            "Add"
        ],
        [
            "Expression",
            "Let_in"
        ],
        [
            "Expression",
            "ITE"
        ],
        [
            "Token",
            "id"
        ],
        [
            "Expression",
            "menor"
        ],
        [
            "List",
            "result"
        ],
        [
            "Expression",
            "Mod"
        ],
        [
            "Function",
            "func"
        ],
        [
            "Expression",
            "X"
        ],
        [
            "int",
            "i"
        ],
        [
            "Expression",
            "mayor"
        ],
        [
            "Expression",
            "Concat"
        ],
        [
            "Expression",
            "distint"
        ],
        [
            "Expression",
            "Mult"
        ],
        [
            "Expression",
            "Y"
        ],
        [
            "Expression",
            "E"
        ],
        [
            "Expression",
            "MayorEqual"
        ],
        [
            "Expression",
            "Else"
        ],
        [
            "bool",
            "arg"
        ],
        [
            "Dictionary",
            "dicc"
        ],
        [
            "Dictionary",
            "Arguments"
        ],
        [
            "string",
            "result"
        ],
        [
            "int",
            "index"
        ],
        [
            "string",
            "result"
        ],
        [
            "Scope",
            "L"
        ],
        [
            "Scope",
            "i"
        ],
        [
            "bool",
            "Left"
        ],
        [
            "bool",
            "Right"
        ],
        [
            "var",
            "Right"
        ],
        [
            "bool",
            "Left"
        ],
        [
            "bool",
            "Right"
        ],
        [
            "var",
            "Left"
        ]
    ],
    "method_names": [
        "Main",
        "Imprimir",
        "Analizar",
        "AddToken",
        "GetValue",
        "ParserD",
        "ParserComparer",
        "ParserAnd_Or",
        "ParserB",
        "ParserY",
        "ParserH",
        "ParserFactor",
        "ParserI",
        "ParserExpression",
        "ParserTerm",
        "ParserCode",
        "ParserID",
        "ParserX",
        "Scope",
        "CheckSemantic",
        "Evaluate",
        "Scope",
        "CheckSemantic",
        "Evaluate",
        "Scope",
        "CheckSemantic",
        "Evaluate",
        "Scope",
        "CheckSemantic",
        "Evaluate",
        "Evaluate",
        "Evaluate",
        "Scope",
        "CheckSemantic",
        "Evaluate",
        "Scope",
        "CheckSemantic",
        "Evaluate",
        "Main"
    ],
    "method_return_types": [
        [
            "Main",
            "void"
        ],
        [
            "Imprimir",
            "void"
        ],
        [
            "AddToken",
            "void"
        ],
        [
            "Analizar",
            "List"
        ],
        [
            "GetValue",
            "string"
        ],
        [
            "ParserD",
            "Expression"
        ],
        [
            "ParserB",
            "Expression"
        ],
        [
            "ParserAnd_Or",
            "Expression"
        ],
        [
            "ParserI",
            "Expression"
        ],
        [
            "ParserFactor",
            "Expression"
        ],
        [
            "ParserY",
            "Expression"
        ],
        [
            "ParserH",
            "List"
        ],
        [
            "ParserCode",
            "Expression"
        ],
        [
            "ParserID",
            "List"
        ],
        [
            "ParserComparer",
            "Expression"
        ],
        [
            "ParserX",
            "Expression"
        ],
        [
            "ParserExpression",
            "Expression"
        ],
        [
            "ParserTerm",
            "Expression"
        ],
        [
            "Scope",
            "void"
        ],
        [
            "Evaluate",
            "string"
        ],
        [
            "CheckSemantic",
            "bool"
        ],
        [
            "Scope",
            "void"
        ],
        [
            "Evaluate",
            "string"
        ],
        [
            "CheckSemantic",
            "bool"
        ],
        [
            "Scope",
            "void"
        ],
        [
            "Evaluate",
            "string"
        ],
        [
            "CheckSemantic",
            "bool"
        ],
        [
            "Scope",
            "void"
        ],
        [
            "Evaluate",
            "string"
        ],
        [
            "CheckSemantic",
            "bool"
        ],
        [
            "Evaluate",
            "void"
        ],
        [
            "Evaluate",
            "string"
        ],
        [
            "Scope",
            "void"
        ],
        [
            "Evaluate",
            "string"
        ],
        [
            "CheckSemantic",
            "bool"
        ],
        [
            "Scope",
            "void"
        ],
        [
            "Evaluate",
            "string"
        ],
        [
            "CheckSemantic",
            "bool"
        ],
        [
            "Main",
            "void"
        ]
    ],
    "class_names": [
        "Scope",
        "Context1",
        "Program",
        "Tokenizar",
        "EOFToken",
        "OpenLToken",
        "SenToken",
        "TanToken",
        "InToken",
        "OpenPToken",
        "ModToken",
        "SquartToken",
        "CloseLToken",
        "StarToken",
        "TrueToken",
        "FalseToken",
        "IdToken",
        "OrToken",
        "MayorToken",
        "EndToken",
        "PointEqualToken",
        "AddToken",
        "LetToken",
        "ThemToken",
        "ComillaToken",
        "MenorEqualToken",
        "VarToken",
        "PowToken",
        "ClosePToken",
        "MayorEqualToken",
        "AndToken",
        "ImplicToken",
        "EqualToken",
        "PiToken",
        "ExcToken",
        "ConcatToken",
        "IfToken",
        "ComaToken",
        "MenorToken",
        "NotToken",
        "SubToken",
        "EqualEqualToken",
        "NumberToken",
        "FunctionToken",
        "DistintToken",
        "Token",
        "LogToken",
        "PrintToken",
        "DivToken",
        "ElseToken",
        "CosToken",
        "TextToken",
        "Context",
        "Parser",
        "BinaryExpression",
        "Tan",
        "Squart",
        "Sen",
        "Log",
        "Cos",
        "UnaryExpression",
        "Function",
        "FuncCall",
        "Print",
        "Expression",
        "AssingExpression",
        "LetInExpression",
        "AtomExpression",
        "Number",
        "Text",
        "If_them_else",
        "MayorExpression",
        "MenorExpression",
        "MenorEqualExpression",
        "NotExpresion",
        "DistintExpression",
        "OrExpression",
        "MayorEqualExpression",
        "EqualExpression",
        "AndExpression",
        "ConditionalExpression",
        "Mod",
        "Div",
        "Pow",
        "Sub",
        "Concat",
        "Start",
        "NoConditionalExpression",
        "Add",
        "Program",
        "Errors"
    ],
    "interface_names": [],
    "delegate_names": [],
    "node_count": {
        "Compilation_unitContext": 18,
        "Namespace_member_declarationsContext": 19,
        "Namespace_member_declarationContext": 125,
        "Namespace_declarationContext": 18,
        "TerminalNodeImpl": 12416,
        "Qualified_identifierContext": 18,
        "IdentifierContext": 3963,
        "Namespace_bodyContext": 18,
        "Type_declarationContext": 107,
        "All_member_modifiersContext": 376,
        "All_member_modifierContext": 528,
        "Class_definitionContext": 91,
        "Class_bodyContext": 91,
        "Class_member_declarationsContext": 90,
        "Class_member_declarationContext": 276,
        "Common_member_declarationContext": 276,
        "Typed_member_declarationContext": 159,
        "Type_Context": 740,
        "Base_typeContext": 740,
        "Class_typeContext": 695,
        "Namespace_or_type_nameContext": 665,
        "Field_declarationContext": 31,
        "Variable_declaratorsContext": 31,
        "Variable_declaratorContext": 31,
        "Type_argument_listContext": 70,
        "Constructor_declarationContext": 85,
        "Formal_parameter_listContext": 126,
        "Fixed_parametersContext": 126,
        "Fixed_parameterContext": 227,
        "Arg_declarationContext": 227,
        "BodyContext": 82,
        "BlockContext": 371,
        "Statement_listContext": 298,
        "StatementContext": 790,
        "Embedded_statementContext": 685,
        "ExpressionStatementContext": 393,
        "ExpressionContext": 1895,
        "AssignmentContext": 140,
        "Unary_expressionContext": 2188,
        "Primary_expressionContext": 2152,
        "SimpleNameExpressionContext": 1710,
        "Assignment_operatorContext": 140,
        "Non_assignment_expressionContext": 1720,
        "Conditional_expressionContext": 1711,
        "Null_coalescing_expressionContext": 1711,
        "Conditional_or_expressionContext": 1711,
        "Conditional_and_expressionContext": 1727,
        "Inclusive_or_expressionContext": 1747,
        "Exclusive_or_expressionContext": 1747,
        "And_expressionContext": 1748,
        "Equality_expressionContext": 1748,
        "Relational_expressionContext": 1933,
        "Shift_expressionContext": 1945,
        "Additive_expressionContext": 1945,
        "Multiplicative_expressionContext": 2009,
        "Switch_expressionContext": 2012,
        "Range_expressionContext": 2012,
        "ThisReferenceExpressionContext": 25,
        "Member_accessContext": 843,
        "Variable_initializerContext": 5,
        "ObjectCreationExpressionContext": 125,
        "Object_creation_expressionContext": 125,
        "ErrorNodeImpl": 243,
        "Tuple_typeContext": 6,
        "Tuple_elementContext": 9,
        "Method_declarationContext": 100,
        "Method_member_nameContext": 100,
        "Method_bodyContext": 100,
        "Method_invocationContext": 408,
        "Argument_listContext": 498,
        "ArgumentContext": 820,
        "LiteralExpressionContext": 283,
        "LiteralContext": 283,
        "String_literalContext": 86,
        "DeclarationStatementContext": 110,
        "Local_variable_declarationContext": 112,
        "Local_variable_typeContext": 122,
        "Local_variable_declaratorContext": 112,
        "Local_variable_initializerContext": 107,
        "ForeachStatementContext": 10,
        "IfStatementContext": 173,
        "If_bodyContext": 263,
        "Simple_typeContext": 114,
        "Numeric_typeContext": 56,
        "Integral_typeContext": 30,
        "ForStatementContext": 5,
        "For_initializerContext": 5,
        "For_iteratorContext": 4,
        "ContinueStatementContext": 1,
        "BreakStatementContext": 48,
        "Bracket_expressionContext": 80,
        "Indexer_argumentContext": 80,
        "Local_function_declarationContext": 3,
        "Local_function_headerContext": 3,
        "Return_typeContext": 3,
        "Local_function_bodyContext": 3,
        "ParenthesisExpressionsContext": 3,
        "ReturnStatementContext": 126,
        "Enum_definitionContext": 4,
        "Enum_bodyContext": 4,
        "Enum_member_declarationContext": 63,
        "Class_baseContext": 81,
        "Constructor_initializerContext": 70,
        "Property_declarationContext": 57,
        "Member_nameContext": 57,
        "Accessor_declarationsContext": 57,
        "Accessor_bodyContext": 112,
        "Boolean_literalContext": 30,
        "Lambda_expressionContext": 9,
        "Anonymous_function_signatureContext": 9,
        "Right_arrowContext": 9,
        "Anonymous_function_bodyContext": 9,
        "Throwable_expressionContext": 25,
        "MemberAccessExpressionContext": 6,
        "Predefined_typeContext": 6,
        "Set_accessor_declarationContext": 55,
        "Parameter_arrayContext": 1,
        "ThrowStatementContext": 3,
        "Cast_expressionContext": 28,
        "Floating_point_typeContext": 26,
        "Accessor_modifierContext": 2
    },
    "project_name": "Livi005_Hulk_Compiler",
    "label": "original",
    "project_type": "hulk"
}
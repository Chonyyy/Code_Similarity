{
    "total_nodes": 44094,
    "max_depth": 1172,
    "number_of_variables": 108,
    "number_of_constants": 0,
    "out_variables": 0,
    "ref_params": 0,
    "number_of_methods": 83,
    "number_of_classes": 30,
    "number_of_interfaces": 0,
    "number_of_abstract_classes": 0,
    "number_of_sealed_classes": 0,
    "import_statements": 6,
    "number_of_try_blocks": 1,
    "number_of_lists": 0,
    "number_of_dictionaries": 0,
    "number_of_enums": 3,
    "number_of_delegates": 0,
    "function_calls": 87,
    "enums_names": [
        "ExpressionType",
        "ErrorCode",
        "TiposDToken"
    ],
    "control_structures_if": 167,
    "control_structures_switch": 0,
    "control_structures_for": 2,
    "control_structures_while": 5,
    "control_structures_dowhile": 0,
    "access_modifiers_public": 186,
    "access_modifiers_private": 38,
    "access_modifiers_protected": 0,
    "access_modifiers_internal": 1,
    "access_modifiers_static": 40,
    "access_modifiers_protected_internal": 0,
    "access_modifiers_private_protected": 0,
    "modifier_readonly": 0,
    "modifier_volatile": 0,
    "modifier_virtual": 0,
    "modifier_override": 38,
    "modifier_new": 35,
    "modifier_partial": 0,
    "modifier_extern": 0,
    "modifier_unsafe": 0,
    "modifier_async": 0,
    "linq_querie_select": 0,
    "linq_queries_where": 0,
    "linq_queries_orderBy": 0,
    "linq_queries_groupBy": 0,
    "linq_queries_join": 0,
    "linq_queries_sum": 3,
    "linq_queries_count": 0,
    "library_call_console": 6,
    "library_call_math": 0,
    "number_of_lambdas": 0,
    "number_of_getters": 44,
    "number_of_setters": 39,
    "number_of_tuples": 0,
    "number_of_namespaces": 5,
    "method_parameters": [
        [
            "Main",
            [
                [
                    "string[]",
                    "args"
                ]
            ]
        ],
        [
            "CheckSemantic",
            [
                [
                    "Context",
                    "context"
                ],
                [
                    "Scope",
                    "scope"
                ],
                [
                    "List<CompilingError>",
                    "errors"
                ]
            ]
        ],
        [
            "CheckTypes",
            [
                [
                    "string",
                    "operation"
                ],
                [
                    "ExpressionType",
                    "left"
                ],
                [
                    "ExpressionType",
                    "right"
                ]
            ]
        ],
        [
            "CheckSemantic",
            [
                [
                    "Context",
                    "context"
                ],
                [
                    "Scope",
                    "scope"
                ],
                [
                    "List<CompilingError>",
                    "errors"
                ]
            ]
        ],
        [
            "CheckSemantic",
            [
                [
                    "Context",
                    "context"
                ],
                [
                    "Scope",
                    "scope"
                ],
                [
                    "List<CompilingError>",
                    "errors"
                ]
            ]
        ],
        [
            "CheckSemantic",
            [
                [
                    "Context",
                    "context"
                ],
                [
                    "Scope",
                    "scope"
                ],
                [
                    "List<CompilingError>",
                    "errors"
                ]
            ]
        ],
        [
            "AddParameter",
            [
                [
                    "string",
                    "parameter"
                ]
            ]
        ],
        [
            "CheckSemantic",
            [
                [
                    "Context",
                    "context"
                ],
                [
                    "Scope",
                    "scope"
                ],
                [
                    "List<CompilingError>",
                    "errors"
                ]
            ]
        ],
        [
            "Invoke",
            [
                [
                    "List<Expression>",
                    "arguments"
                ]
            ]
        ],
        [
            "CheckSemantic",
            [
                [
                    "Context",
                    "context"
                ],
                [
                    "Scope",
                    "table"
                ],
                [
                    "List<CompilingError>",
                    "errors"
                ]
            ]
        ],
        [
            "CheckSemantic",
            [
                [
                    "Context",
                    "context"
                ],
                [
                    "Scope",
                    "scope"
                ],
                [
                    "List<CompilingError>",
                    "errors"
                ]
            ]
        ],
        [
            "CheckSemantic",
            [
                [
                    "Context",
                    "context"
                ],
                [
                    "Scope",
                    "scope"
                ],
                [
                    "List<CompilingError>",
                    "errors"
                ]
            ]
        ],
        [
            "InvalidToken",
            [
                [
                    "string",
                    "input"
                ]
            ]
        ],
        [
            "IsToken",
            [
                [
                    "TiposDToken",
                    "type"
                ]
            ]
        ],
        [
            "NextToken",
            [
                [
                    "int",
                    "k"
                ]
            ]
        ],
        [
            "FindToken",
            [
                [
                    "TiposDToken",
                    "type"
                ]
            ]
        ],
        [
            "MoveBack",
            [
                [
                    "int",
                    "k"
                ]
            ]
        ],
        [
            "ParseExpBooleanLv1_",
            [
                [
                    "Expression?",
                    "left"
                ]
            ]
        ],
        [
            "ParseExpBooleanLv2_",
            [
                [
                    "Expression?",
                    "left"
                ]
            ]
        ],
        [
            "ParseBooleanOP",
            [
                [
                    "Expression?",
                    "left"
                ]
            ]
        ],
        [
            "ParseOR",
            [
                [
                    "Expression?",
                    "left"
                ]
            ]
        ],
        [
            "ParseAnd",
            [
                [
                    "Expression?",
                    "left"
                ]
            ]
        ],
        [
            "ParseExpressionLv1_",
            [
                [
                    "Expression?",
                    "left"
                ]
            ]
        ],
        [
            "ParseExpressionLv2_",
            [
                [
                    "Expression?",
                    "left"
                ]
            ]
        ],
        [
            "ParseExpressionLv3_",
            [
                [
                    "Expression?",
                    "left"
                ]
            ]
        ],
        [
            "ConvertObjToExp",
            [
                [
                    "object?",
                    "obj"
                ]
            ]
        ],
        [
            "ParseAdd",
            [
                [
                    "Expression?",
                    "left"
                ]
            ]
        ],
        [
            "ParseSub",
            [
                [
                    "Expression?",
                    "left"
                ]
            ]
        ],
        [
            "ParseMul",
            [
                [
                    "Expression?",
                    "left"
                ]
            ]
        ],
        [
            "ParseDiv",
            [
                [
                    "Expression?",
                    "left"
                ]
            ]
        ],
        [
            "ParsePotencia",
            [
                [
                    "Expression?",
                    "left"
                ]
            ]
        ],
        [
            "AddVariable",
            [
                [
                    "string",
                    "identifier"
                ],
                [
                    "object",
                    "value"
                ]
            ]
        ],
        [
            "AddVariable",
            [
                [
                    "string",
                    "identifier"
                ],
                [
                    "object",
                    "value"
                ]
            ]
        ],
        [
            "ContainsVariable",
            [
                [
                    "string",
                    "identifier"
                ]
            ]
        ]
    ],
    "variable_names": [
        [
            "var",
            "Statement"
        ],
        [
            "var",
            "lexer"
        ],
        [
            "var",
            "x"
        ],
        [
            "int",
            "i"
        ],
        [
            "var",
            "Stream"
        ],
        [
            "var",
            "TokenizedCode"
        ],
        [
            "string",
            "code"
        ],
        [
            "var",
            "Parser"
        ],
        [
            "string",
            "message"
        ],
        [
            "var",
            "errors"
        ],
        [
            "double",
            "x"
        ],
        [
            "double",
            "y"
        ],
        [
            "double",
            "x"
        ],
        [
            "double",
            "y"
        ],
        [
            "bool",
            "left"
        ],
        [
            "bool",
            "right"
        ],
        [
            "double",
            "x"
        ],
        [
            "double",
            "y"
        ],
        [
            "var",
            "x"
        ],
        [
            "var",
            "conditionValue"
        ],
        [
            "var",
            "function"
        ],
        [
            "double",
            "x"
        ],
        [
            "double",
            "y"
        ],
        [
            "bool",
            "left"
        ],
        [
            "bool",
            "right"
        ],
        [
            "Regex",
            "whitespace"
        ],
        [
            "int",
            "start"
        ],
        [
            "string",
            "x"
        ],
        [
            "MatchCollection",
            "matches"
        ],
        [
            "double",
            "x"
        ],
        [
            "int",
            "i"
        ],
        [
            "int",
            "k"
        ],
        [
            "int",
            "index"
        ],
        [
            "int",
            "CantidadPComas"
        ],
        [
            "string",
            "x"
        ],
        [
            "int",
            "PositionPcoma"
        ],
        [
            "int",
            "count"
        ],
        [
            "var",
            "exp"
        ],
        [
            "Mul",
            "mul"
        ],
        [
            "var",
            "function"
        ],
        [
            "Potencia",
            "pot"
        ],
        [
            "StatementNode",
            "Statement"
        ],
        [
            "Expression",
            "right"
        ],
        [
            "var",
            "Statement"
        ],
        [
            "var",
            "funct"
        ],
        [
            "string",
            "variable"
        ],
        [
            "Div",
            "div"
        ],
        [
            "Expression",
            "newLeft"
        ],
        [
            "double",
            "y"
        ],
        [
            "var",
            "left"
        ],
        [
            "Expression",
            "exp"
        ],
        [
            "Add",
            "sum"
        ],
        [
            "var",
            "Or"
        ],
        [
            "int",
            "location"
        ],
        [
            "double",
            "x"
        ],
        [
            "Sub",
            "sub"
        ],
        [
            "var",
            "identificador"
        ],
        [
            "var",
            "statement"
        ],
        [
            "int",
            "CloseP"
        ],
        [
            "int",
            "temp"
        ],
        [
            "var",
            "NewVarScope"
        ],
        [
            "var",
            "arguments"
        ],
        [
            "var",
            "DeclVar"
        ],
        [
            "var",
            "And"
        ],
        [
            "int",
            "count"
        ],
        [
            "bool",
            "BaseValida"
        ],
        [
            "Expression",
            "left"
        ],
        [
            "var",
            "right"
        ],
        [
            "var",
            "Arguments"
        ]
    ],
    "method_names": [
        "Main",
        "ToString",
        "Evaluate",
        "Evaluate",
        "ToString",
        "Evaluate",
        "CheckSemantic",
        "CheckTypes",
        "ToString",
        "Evaluate",
        "AddParameter",
        "Execute",
        "CheckSemantic",
        "Invoke",
        "ToString",
        "Evaluate",
        "CheckSemantic",
        "Not",
        "ToString",
        "Evaluate",
        "CheckSemantic",
        "CheckSemantic",
        "InvalidToken",
        "Evaluate",
        "NegateParentesis",
        "CurrentToken",
        "NextToken",
        "IsToken",
        "WhereCloseParentesis",
        "RevisarPComa",
        "MoveBack",
        "FindToken",
        "ParseExpBooleanLv2",
        "ParseExpressionLv2_",
        "ParseFunctionReference",
        "ParseCoseno",
        "ParseExpBooleanLv2_",
        "ParseExpStatement",
        "ParseVariableReference",
        "ParseExpBooleanLv1",
        "ParseExpression",
        "ParseExpressionLv1_",
        "ParseAnd",
        "ParseExpressionLv3",
        "ParsePotencia",
        "ParseBoolean",
        "ParseNumber",
        "ParseLog",
        "ParseExpressionLv2",
        "ParsePrint",
        "ParseSub",
        "ParseOR",
        "ParseFunctionRecRef",
        "ParseExpBooleanLv3",
        "ParseExpressionLv1",
        "ParseBooleanOP",
        "ParseSeno",
        "ParseParentesis",
        "ParseExpressionBoolean",
        "ParseExpBooleanLv1_",
        "ContainsVariable",
        "ParseAdd",
        "ParseExpressionLv4",
        "ParseIfElseStatement",
        "ParseStament",
        "ParseArgumentsFunc",
        "ParseFunctionDeclaration",
        "AddVariable",
        "ParseExpressionLv3_",
        "ConvertObjToExp",
        "ParseParseVariableDeclaration",
        "ParseDiv",
        "ParsePI",
        "ParseMul",
        "ParseString"
    ],
    "method_return_types": [
        [
            "Main",
            "void"
        ],
        [
            "ToString",
            "string"
        ],
        [
            "Evaluate",
            "void"
        ],
        [
            "Evaluate",
            "void"
        ],
        [
            "ToString",
            "string"
        ],
        [
            "Evaluate",
            "void"
        ],
        [
            "CheckTypes",
            "void"
        ],
        [
            "CheckSemantic",
            "bool"
        ],
        [
            "ToString",
            "string"
        ],
        [
            "Evaluate",
            "void"
        ],
        [
            "Execute",
            "object"
        ],
        [
            "Invoke",
            "object"
        ],
        [
            "AddParameter",
            "void"
        ],
        [
            "CheckSemantic",
            "bool"
        ],
        [
            "ToString",
            "string"
        ],
        [
            "Evaluate",
            "void"
        ],
        [
            "CheckSemantic",
            "bool"
        ],
        [
            "Not",
            "Boolean"
        ],
        [
            "ToString",
            "string"
        ],
        [
            "Evaluate",
            "void"
        ],
        [
            "CheckSemantic",
            "bool"
        ],
        [
            "CheckSemantic",
            "bool"
        ],
        [
            "InvalidToken",
            "void"
        ],
        [
            "Evaluate",
            "void"
        ],
        [
            "NegateParentesis",
            "Expression"
        ],
        [
            "RevisarPComa",
            "void"
        ],
        [
            "FindToken",
            "bool"
        ],
        [
            "IsToken",
            "bool"
        ],
        [
            "MoveBack",
            "void"
        ],
        [
            "WhereCloseParentesis",
            "int"
        ],
        [
            "NextToken",
            "void"
        ],
        [
            "CurrentToken",
            "Token"
        ],
        [
            "ParseVariableReference",
            "Expression"
        ],
        [
            "ParseExpBooleanLv1",
            "Expression"
        ],
        [
            "ParseExpStatement",
            "StatementNode"
        ],
        [
            "ParseArgumentsFunc",
            "List"
        ],
        [
            "ParseString",
            "Expression"
        ],
        [
            "ConvertObjToExp",
            "Expression"
        ],
        [
            "ParseExpressionLv1_",
            "Expression"
        ],
        [
            "ParsePotencia",
            "Expression"
        ],
        [
            "AddVariable",
            "void"
        ],
        [
            "ParseExpressionBoolean",
            "Expression"
        ],
        [
            "ParseFunctionReference",
            "Expression"
        ],
        [
            "ParseBooleanOP",
            "Expression"
        ],
        [
            "ParseExpBooleanLv2_",
            "Expression"
        ],
        [
            "ParseAdd",
            "Expression"
        ],
        [
            "ParseParseVariableDeclaration",
            "void"
        ],
        [
            "ParseExpBooleanLv2",
            "Expression"
        ],
        [
            "ParsePI",
            "Expression"
        ],
        [
            "ParseBoolean",
            "Expression"
        ],
        [
            "ParsePrint",
            "StatementNode"
        ],
        [
            "ParseCoseno",
            "Expression"
        ],
        [
            "ParseIfElseStatement",
            "StatementNode"
        ],
        [
            "ParseFunctionDeclaration",
            "StatementNode"
        ],
        [
            "ParseExpBooleanLv1_",
            "Expression"
        ],
        [
            "ParseSub",
            "Expression"
        ],
        [
            "ParseFunctionRecRef",
            "Expression"
        ],
        [
            "ParseExpressionLv2_",
            "Expression"
        ],
        [
            "ParseDiv",
            "Expression"
        ],
        [
            "ParseAnd",
            "Expression"
        ],
        [
            "ParseStament",
            "StatementNode"
        ],
        [
            "ParseExpressionLv1",
            "Expression"
        ],
        [
            "ParseOR",
            "Expression"
        ],
        [
            "ParseExpressionLv2",
            "Expression"
        ],
        [
            "ParseExpressionLv3_",
            "Expression"
        ],
        [
            "ParseNumber",
            "Expression"
        ],
        [
            "ParseParentesis",
            "Expression"
        ],
        [
            "ParseMul",
            "Expression"
        ],
        [
            "ParseExpressionLv3",
            "Expression"
        ],
        [
            "ContainsVariable",
            "bool"
        ],
        [
            "ParseExpression",
            "Expression"
        ],
        [
            "ParseSeno",
            "Expression"
        ],
        [
            "ParseExpBooleanLv3",
            "Expression"
        ],
        [
            "ParseExpressionLv4",
            "Expression"
        ],
        [
            "ParseLog",
            "Expression"
        ]
    ],
    "class_names": [
        "Program",
        "Mul",
        "Expression",
        "Div",
        "BinaryExpression",
        "Sub",
        "Number",
        "FunctionDeclarationNode",
        "IfStatementNode",
        "VariableDeclarationNode",
        "StatementNode",
        "FunctionDefinition",
        "PrintStatementNode",
        "Boolean",
        "AtomExpression",
        "StringLiteral",
        "Add",
        "CompilingError",
        "Scope",
        "ExpresionesAritmeticas",
        "ASTNode",
        "Lexer",
        "Token",
        "ExpresionesRegulares",
        "Parentesis",
        "TokenStream",
        "Context",
        "VariableScope",
        "FunctionVariableScope",
        "Parser"
    ],
    "interface_names": [],
    "delegate_names": [],
    "node_count": {
        "Compilation_unitContext": 19,
        "Using_directivesContext": 6,
        "UsingNamespaceDirectiveContext": 20,
        "TerminalNodeImpl": 8265,
        "Namespace_or_type_nameContext": 379,
        "IdentifierContext": 2466,
        "Namespace_member_declarationsContext": 24,
        "Namespace_member_declarationContext": 52,
        "Namespace_declarationContext": 5,
        "Qualified_identifierContext": 5,
        "Namespace_bodyContext": 5,
        "Type_declarationContext": 47,
        "All_member_modifiersContext": 232,
        "All_member_modifierContext": 319,
        "Class_definitionContext": 30,
        "Class_bodyContext": 30,
        "Class_member_declarationsContext": 28,
        "Class_member_declarationContext": 197,
        "Common_member_declarationContext": 197,
        "Method_declarationContext": 83,
        "Method_member_nameContext": 83,
        "Formal_parameter_listContext": 56,
        "Fixed_parametersContext": 56,
        "Fixed_parameterContext": 86,
        "Arg_declarationContext": 86,
        "Type_Context": 438,
        "Base_typeContext": 441,
        "Class_typeContext": 365,
        "Rank_specifierContext": 4,
        "Method_bodyContext": 77,
        "BlockContext": 189,
        "Statement_listContext": 170,
        "StatementContext": 613,
        "Embedded_statementContext": 475,
        "WhileStatementContext": 5,
        "ExpressionContext": 1232,
        "Non_assignment_expressionContext": 1070,
        "Conditional_expressionContext": 1070,
        "Null_coalescing_expressionContext": 1070,
        "Conditional_or_expressionContext": 1070,
        "Conditional_and_expressionContext": 1082,
        "Inclusive_or_expressionContext": 1093,
        "Exclusive_or_expressionContext": 1093,
        "And_expressionContext": 1093,
        "Equality_expressionContext": 1093,
        "Relational_expressionContext": 1177,
        "Shift_expressionContext": 1188,
        "Additive_expressionContext": 1188,
        "Multiplicative_expressionContext": 1268,
        "Switch_expressionContext": 1273,
        "Range_expressionContext": 1273,
        "Unary_expressionContext": 1471,
        "Primary_expressionContext": 1415,
        "LiteralExpressionContext": 265,
        "LiteralContext": 265,
        "Boolean_literalContext": 13,
        "ExpressionStatementContext": 247,
        "SimpleNameExpressionContext": 1003,
        "Member_accessContext": 640,
        "Method_invocationContext": 337,
        "Argument_listContext": 262,
        "ArgumentContext": 323,
        "String_literalContext": 88,
        "DeclarationStatementContext": 116,
        "Local_variable_declarationContext": 108,
        "Local_variable_typeContext": 111,
        "Local_variable_declaratorContext": 108,
        "Local_variable_initializerContext": 108,
        "TryStatementContext": 1,
        "IfStatementContext": 167,
        "MemberAccessExpressionContext": 6,
        "Predefined_typeContext": 6,
        "If_bodyContext": 208,
        "ReturnStatementContext": 171,
        "ObjectCreationExpressionContext": 87,
        "Type_argument_listContext": 19,
        "Object_creation_expressionContext": 87,
        "ForeachStatementContext": 3,
        "AssignmentContext": 142,
        "Assignment_operatorContext": 142,
        "Catch_clausesContext": 1,
        "Specific_catch_clauseContext": 1,
        "ForStatementContext": 2,
        "For_initializerContext": 2,
        "Simple_typeContext": 94,
        "Numeric_typeContext": 72,
        "Integral_typeContext": 46,
        "For_iteratorContext": 2,
        "Bracket_expressionContext": 10,
        "Indexer_argumentContext": 10,
        "BreakStatementContext": 4,
        "Class_baseContext": 17,
        "Constructor_declarationContext": 23,
        "Constructor_initializerContext": 17,
        "BodyContext": 23,
        "Typed_member_declarationContext": 155,
        "Property_declarationContext": 44,
        "Member_nameContext": 44,
        "Accessor_declarationsContext": 44,
        "Accessor_bodyContext": 83,
        "Set_accessor_declarationContext": 39,
        "Floating_point_typeContext": 26,
        "Cast_expressionContext": 16,
        "Enum_definitionContext": 3,
        "Enum_bodyContext": 3,
        "Enum_member_declarationContext": 41,
        "ThrowStatementContext": 10,
        "ParenthesisExpressionsContext": 5,
        "ErrorNodeImpl": 1212,
        "ThisReferenceExpressionContext": 49,
        "Right_arrowContext": 6,
        "Throwable_expressionContext": 6,
        "Field_declarationContext": 40,
        "Variable_declaratorsContext": 40,
        "Variable_declaratorContext": 40,
        "Variable_initializerContext": 35,
        "AttributesContext": 5,
        "Attribute_sectionContext": 5,
        "Attribute_listContext": 4,
        "AttributeContext": 4,
        "Accessor_modifierContext": 3,
        "IsTypeContext": 3
    },
    "project_name": "HULK-1-Desarrollo",
    "label": "original"
}
{
    "total_nodes": 50910,
    "max_depth": 929,
    "number_of_variables": 99,
    "number_of_constants": 0,
    "out_variables": 0,
    "ref_params": 0,
    "number_of_methods": 62,
    "number_of_classes": 35,
    "number_of_interfaces": 0,
    "number_of_abstract_classes": 0,
    "number_of_sealed_classes": 0,
    "import_statements": 13,
    "number_of_try_blocks": 9,
    "number_of_lists": 7,
    "number_of_dictionaries": 1,
    "number_of_enums": 0,
    "number_of_delegates": 0,
    "function_calls": 79,
    "enums_names": [],
    "control_structures_if": 136,
    "control_structures_switch": 12,
    "control_structures_for": 17,
    "control_structures_while": 1,
    "control_structures_dowhile": 0,
    "access_modifiers_public": 123,
    "access_modifiers_private": 28,
    "access_modifiers_protected": 3,
    "access_modifiers_internal": 0,
    "access_modifiers_static": 8,
    "access_modifiers_protected_internal": 0,
    "access_modifiers_private_protected": 0,
    "modifier_readonly": 0,
    "modifier_volatile": 0,
    "modifier_virtual": 0,
    "modifier_override": 28,
    "modifier_new": 29,
    "modifier_partial": 0,
    "modifier_extern": 0,
    "modifier_unsafe": 0,
    "modifier_async": 0,
    "linq_querie_select": 0,
    "linq_queries_where": 0,
    "linq_queries_orderBy": 0,
    "linq_queries_groupBy": 0,
    "linq_queries_join": 0,
    "linq_queries_sum": 3,
    "linq_queries_count": 0,
    "library_call_console": 2,
    "library_call_math": 6,
    "number_of_lambdas": 6,
    "number_of_getters": 14,
    "number_of_setters": 11,
    "number_of_tuples": 0,
    "number_of_namespaces": 9,
    "method_parameters": [
        [
            "GetInstructions",
            [
                [
                    "string[]",
                    "inputTokens"
                ]
            ]
        ],
        [
            "GetTokens",
            [
                [
                    "string",
                    "entry"
                ]
            ]
        ],
        [
            "GetCommaSeparatedTokens",
            [
                [
                    "string[]",
                    "tokens"
                ],
                [
                    "int",
                    "start"
                ],
                [
                    "int",
                    "end"
                ]
            ]
        ],
        [
            "GetNameLimit",
            [
                [
                    "string[]",
                    "tokens"
                ],
                [
                    "int",
                    "start"
                ],
                [
                    "int",
                    "end"
                ],
                [
                    "string",
                    "delimiter"
                ]
            ]
        ],
        [
            "GoToNextParenthesis",
            [
                [
                    "int",
                    "index"
                ],
                [
                    "int",
                    "end"
                ],
                [
                    "string[]",
                    "tokens"
                ]
            ]
        ],
        [
            "GoToPreviousParenthesis",
            [
                [
                    "int",
                    "index"
                ],
                [
                    "int",
                    "start"
                ],
                [
                    "string[]",
                    "tokens"
                ]
            ]
        ],
        [
            "GetValue",
            [
                [
                    "bool",
                    "execute"
                ]
            ]
        ],
        [
            "Result",
            [
                [
                    "HulkExpression",
                    "Cond"
                ],
                [
                    "HulkExpression",
                    "IfExp"
                ],
                [
                    "HulkExpression",
                    "ElseExp"
                ],
                [
                    "bool",
                    "execute"
                ]
            ]
        ],
        [
            "GetValue",
            [
                [
                    "bool",
                    "execute"
                ]
            ]
        ],
        [
            "Define",
            [
                [
                    "HulkExpression",
                    "Definition"
                ]
            ]
        ],
        [
            "CheckValue",
            [
                [
                    "HulkExpression",
                    "ValueExp"
                ]
            ]
        ],
        [
            "GetValue",
            [
                [
                    "bool",
                    "execute"
                ]
            ]
        ],
        [
            "Evaluate",
            [
                [
                    "object",
                    "arg"
                ]
            ]
        ],
        [
            "Evaluate",
            [
                [
                    "object",
                    "arg"
                ]
            ]
        ],
        [
            "Evaluate",
            [
                [
                    "object",
                    "arg"
                ]
            ]
        ],
        [
            "Evaluate",
            [
                [
                    "object",
                    "arg"
                ]
            ]
        ],
        [
            "Evaluate",
            [
                [
                    "object",
                    "arg"
                ]
            ]
        ],
        [
            "Evaluate",
            [
                [
                    "object",
                    "arg"
                ]
            ]
        ],
        [
            "Evaluate",
            [
                [
                    "object",
                    "arg"
                ]
            ]
        ],
        [
            "Evaluate",
            [
                [
                    "object",
                    "arg"
                ]
            ]
        ],
        [
            "GetValue",
            [
                [
                    "bool",
                    "execute"
                ]
            ]
        ],
        [
            "GetValue",
            [
                [
                    "bool",
                    "execute"
                ]
            ]
        ],
        [
            "ArgsOk",
            [
                [
                    "object",
                    "left"
                ],
                [
                    "object",
                    "right"
                ],
                [
                    "List<Type>",
                    "AdmitedTypesName"
                ]
            ]
        ],
        [
            "Evaluate",
            [
                [
                    "object",
                    "left"
                ],
                [
                    "object",
                    "right"
                ]
            ]
        ],
        [
            "Evaluate",
            [
                [
                    "object",
                    "left"
                ],
                [
                    "object",
                    "right"
                ]
            ]
        ],
        [
            "Evaluate",
            [
                [
                    "object",
                    "left"
                ],
                [
                    "object",
                    "right"
                ]
            ]
        ],
        [
            "Evaluate",
            [
                [
                    "object",
                    "left"
                ],
                [
                    "object",
                    "right"
                ]
            ]
        ],
        [
            "Evaluate",
            [
                [
                    "object",
                    "left"
                ],
                [
                    "object",
                    "right"
                ]
            ]
        ],
        [
            "Evaluate",
            [
                [
                    "object",
                    "left"
                ],
                [
                    "object",
                    "right"
                ]
            ]
        ],
        [
            "Evaluate",
            [
                [
                    "object",
                    "left"
                ],
                [
                    "object",
                    "right"
                ]
            ]
        ],
        [
            "Evaluate",
            [
                [
                    "object",
                    "left"
                ],
                [
                    "object",
                    "right"
                ]
            ]
        ],
        [
            "Evaluate",
            [
                [
                    "object",
                    "left"
                ],
                [
                    "object",
                    "right"
                ]
            ]
        ],
        [
            "Evaluate",
            [
                [
                    "object",
                    "left"
                ],
                [
                    "object",
                    "right"
                ]
            ]
        ],
        [
            "Evaluate",
            [
                [
                    "object",
                    "left"
                ],
                [
                    "object",
                    "right"
                ]
            ]
        ],
        [
            "Evaluate",
            [
                [
                    "object",
                    "left"
                ],
                [
                    "object",
                    "right"
                ]
            ]
        ],
        [
            "Evaluate",
            [
                [
                    "object",
                    "left"
                ],
                [
                    "object",
                    "right"
                ]
            ]
        ],
        [
            "Evaluate",
            [
                [
                    "object",
                    "left"
                ],
                [
                    "object",
                    "right"
                ]
            ]
        ],
        [
            "Evaluate",
            [
                [
                    "object",
                    "left"
                ],
                [
                    "object",
                    "right"
                ]
            ]
        ],
        [
            "Evaluate",
            [
                [
                    "object",
                    "left"
                ],
                [
                    "object",
                    "right"
                ]
            ]
        ],
        [
            "AddNewFunction",
            [
                [
                    "string",
                    "key"
                ],
                [
                    "FunctionDeclaration",
                    "Val"
                ]
            ]
        ],
        [
            "Parse",
            [
                [
                    "string[]",
                    "tokens"
                ]
            ]
        ],
        [
            "ParseInternal",
            [
                [
                    "string[]",
                    "tokens"
                ],
                [
                    "int",
                    "start"
                ],
                [
                    "int",
                    "end"
                ]
            ]
        ],
        [
            "ParseInner",
            [
                [
                    "string[]",
                    "tokens"
                ],
                [
                    "int",
                    "start"
                ],
                [
                    "int",
                    "end"
                ]
            ]
        ],
        [
            "TryConditionalOr",
            [
                [
                    "string[]",
                    "tokens"
                ],
                [
                    "int",
                    "start"
                ],
                [
                    "int",
                    "end"
                ]
            ]
        ],
        [
            "TryConditionalAnd",
            [
                [
                    "string[]",
                    "tokens"
                ],
                [
                    "int",
                    "start"
                ],
                [
                    "int",
                    "end"
                ]
            ]
        ],
        [
            "TryEquality",
            [
                [
                    "string[]",
                    "tokens"
                ],
                [
                    "int",
                    "start"
                ],
                [
                    "int",
                    "end"
                ]
            ]
        ],
        [
            "TryRelational",
            [
                [
                    "string[]",
                    "tokens"
                ],
                [
                    "int",
                    "start"
                ],
                [
                    "int",
                    "end"
                ]
            ]
        ],
        [
            "TryAdditive",
            [
                [
                    "string[]",
                    "tokens"
                ],
                [
                    "int",
                    "start"
                ],
                [
                    "int",
                    "end"
                ]
            ]
        ],
        [
            "TryMultiplicative",
            [
                [
                    "string[]",
                    "tokens"
                ],
                [
                    "int",
                    "start"
                ],
                [
                    "int",
                    "end"
                ]
            ]
        ],
        [
            "TryPower",
            [
                [
                    "string[]",
                    "tokens"
                ],
                [
                    "int",
                    "start"
                ],
                [
                    "int",
                    "end"
                ]
            ]
        ],
        [
            "TryUnary",
            [
                [
                    "string[]",
                    "tokens"
                ],
                [
                    "int",
                    "start"
                ],
                [
                    "int",
                    "end"
                ]
            ]
        ],
        [
            "TryPrincipal",
            [
                [
                    "string[]",
                    "tokens"
                ],
                [
                    "int",
                    "start"
                ],
                [
                    "int",
                    "end"
                ]
            ]
        ],
        [
            "ParseVarDeclaration",
            [
                [
                    "string[]",
                    "tokens"
                ],
                [
                    "int",
                    "start"
                ],
                [
                    "int",
                    "end"
                ]
            ]
        ],
        [
            "ParseLetInArgs",
            [
                [
                    "string[]",
                    "tokens"
                ],
                [
                    "int",
                    "start"
                ],
                [
                    "int",
                    "end"
                ]
            ]
        ],
        [
            "ParseFunctionDeclaration",
            [
                [
                    "string[]",
                    "tokens"
                ],
                [
                    "int",
                    "start"
                ],
                [
                    "int",
                    "end"
                ]
            ]
        ],
        [
            "ParseLetInExpression",
            [
                [
                    "string[]",
                    "tokens"
                ],
                [
                    "int",
                    "start"
                ],
                [
                    "int",
                    "end"
                ]
            ]
        ],
        [
            "ParseIfElseStatement",
            [
                [
                    "string[]",
                    "tokens"
                ],
                [
                    "int",
                    "start"
                ],
                [
                    "int",
                    "end"
                ]
            ]
        ],
        [
            "TryFunctionCall",
            [
                [
                    "string[]",
                    "tokens"
                ],
                [
                    "int",
                    "start"
                ],
                [
                    "int",
                    "end"
                ]
            ]
        ],
        [
            "Compile",
            [
                [
                    "string",
                    "input"
                ]
            ]
        ]
    ],
    "variable_names": [
        [
            "Regex",
            "pattern"
        ],
        [
            "List",
            "result"
        ],
        [
            "int",
            "j"
        ],
        [
            "int",
            "result"
        ],
        [
            "int",
            "start"
        ],
        [
            "MatchCollection",
            "collection"
        ],
        [
            "int",
            "parenthesisCount"
        ],
        [
            "int",
            "i"
        ],
        [
            "string",
            "tokens"
        ],
        [
            "string",
            "instruction"
        ],
        [
            "var",
            "ifValue"
        ],
        [
            "var",
            "elseValue"
        ],
        [
            "object",
            "val"
        ],
        [
            "var",
            "Exp"
        ],
        [
            "string",
            "expectedType"
        ],
        [
            "var",
            "condition"
        ],
        [
            "bool",
            "isOK"
        ],
        [
            "var",
            "val"
        ],
        [
            "Types",
            "type"
        ],
        [
            "Random",
            "random"
        ],
        [
            "string",
            "expected"
        ],
        [
            "string",
            "message"
        ],
        [
            "var",
            "conflictiveType"
        ],
        [
            "List",
            "VariableName"
        ],
        [
            "string",
            "type"
        ],
        [
            "HulkExpression",
            "IfDo"
        ],
        [
            "VariableDeclaration",
            "result"
        ],
        [
            "int",
            "declarationEnd"
        ],
        [
            "Variable",
            "LetVariable"
        ],
        [
            "List",
            "names"
        ],
        [
            "HulkExpression",
            "ElseDo"
        ],
        [
            "int",
            "ifDoEnd"
        ],
        [
            "FunctionDeclaration",
            "BaseExp"
        ],
        [
            "List",
            "Args"
        ],
        [
            "Dictionary",
            "LayerVariables"
        ],
        [
            "int",
            "conditionEnd"
        ],
        [
            "string",
            "invalid"
        ],
        [
            "List",
            "ArgNames"
        ],
        [
            "FunctionDeclaration",
            "Definition"
        ],
        [
            "string",
            "funcName"
        ],
        [
            "HulkExpression",
            "result"
        ],
        [
            "LetInStatement",
            "result"
        ],
        [
            "string",
            "name"
        ],
        [
            "var",
            "result"
        ],
        [
            "HulkExpression",
            "ValueExp"
        ],
        [
            "FunctionDeclaration",
            "result"
        ],
        [
            "HulkExpression",
            "DefExpression"
        ],
        [
            "HulkExpression",
            "expr"
        ],
        [
            "string",
            "arg"
        ],
        [
            "var",
            "ExpressionList"
        ],
        [
            "bool",
            "correct"
        ],
        [
            "var",
            "Vars"
        ],
        [
            "HulkExpression",
            "condition"
        ],
        [
            "int",
            "i"
        ],
        [
            "List",
            "CompInstructions"
        ],
        [
            "HulkExpression",
            "exp"
        ],
        [
            "string",
            "s"
        ],
        [
            "int",
            "i"
        ],
        [
            "string",
            "instruction"
        ],
        [
            "Compiler",
            "compiler"
        ]
    ],
    "method_names": [
        "GetTokens",
        "GetInstructions",
        "GoToNextParenthesis",
        "GoToPreviousParenthesis",
        "GetCommaSeparatedTokens",
        "GetNameLimit",
        "Result",
        "CheckValue",
        "Define",
        "GetValue",
        "CheckValues",
        "CheckValue",
        "ArgsOk",
        "GetValue",
        "Evaluate",
        "AddNewFunction",
        "ParseInner",
        "ParseLetInExpression",
        "TryFunctionCall",
        "TryAdditive",
        "TryConditionalAnd",
        "ParseVarDeclaration",
        "TryConditionalOr",
        "TryPrincipal",
        "TryEquality",
        "TryMultiplicative",
        "TryPower",
        "TryUnary",
        "ParseIfElseStatement",
        "ParseInternal",
        "Parse",
        "ParseFunctionDeclaration",
        "TryRelational",
        "ParseLetInArgs",
        "Compile",
        "Main"
    ],
    "method_return_types": [
        [
            "GoToNextParenthesis",
            "int"
        ],
        [
            "GetCommaSeparatedTokens",
            "List"
        ],
        [
            "GoToPreviousParenthesis",
            "int"
        ],
        [
            "GetTokens",
            "string"
        ],
        [
            "GetNameLimit",
            "int"
        ],
        [
            "GetInstructions",
            "List"
        ],
        [
            "Define",
            "void"
        ],
        [
            "GetValue",
            "object"
        ],
        [
            "CheckValue",
            "object"
        ],
        [
            "CheckValues",
            "void"
        ],
        [
            "Result",
            "object"
        ],
        [
            "CheckValue",
            "void"
        ],
        [
            "Evaluate",
            "object"
        ],
        [
            "ArgsOk",
            "bool"
        ],
        [
            "GetValue",
            "object"
        ],
        [
            "AddNewFunction",
            "void"
        ],
        [
            "ParseLetInExpression",
            "HulkExpression"
        ],
        [
            "ParseFunctionDeclaration",
            "HulkExpression"
        ],
        [
            "TryRelational",
            "HulkExpression"
        ],
        [
            "ParseIfElseStatement",
            "HulkExpression"
        ],
        [
            "TryAdditive",
            "HulkExpression"
        ],
        [
            "ParseInternal",
            "HulkExpression"
        ],
        [
            "Parse",
            "HulkExpression"
        ],
        [
            "TryConditionalOr",
            "HulkExpression"
        ],
        [
            "TryMultiplicative",
            "HulkExpression"
        ],
        [
            "TryEquality",
            "HulkExpression"
        ],
        [
            "TryConditionalAnd",
            "HulkExpression"
        ],
        [
            "TryPrincipal",
            "HulkExpression"
        ],
        [
            "ParseVarDeclaration",
            "HulkExpression"
        ],
        [
            "TryUnary",
            "HulkExpression"
        ],
        [
            "ParseInner",
            "HulkExpression"
        ],
        [
            "ParseLetInArgs",
            "HulkExpression"
        ],
        [
            "TryFunctionCall",
            "HulkExpression"
        ],
        [
            "TryPower",
            "HulkExpression"
        ],
        [
            "Compile",
            "void"
        ],
        [
            "Main",
            "void"
        ]
    ],
    "class_names": [
        "HulkException",
        "RegularError",
        "MakeToken",
        "IfElseStatement",
        "LetInStatement",
        "Asignment",
        "Disjunction",
        "Subtraction",
        "Negation",
        "BinaryFunction",
        "GreaterEqualThan",
        "UnEqual",
        "Cosine",
        "Negative",
        "Equal",
        "Logarithm",
        "Conjunction",
        "Rand",
        "LowerEqualThan",
        "ERaised",
        "Multiplication",
        "UnaryFunction",
        "SquaredRoot",
        "Addition",
        "Module",
        "Positive",
        "Power",
        "Sine",
        "Division",
        "LowerThan",
        "GreaterThan",
        "HulkHistory",
        "HulkParser",
        "Compiler",
        "Program"
    ],
    "interface_names": [],
    "delegate_names": [],
    "node_count": {
        "Compilation_unitContext": 17,
        "Using_directivesContext": 13,
        "UsingNamespaceDirectiveContext": 19,
        "TerminalNodeImpl": 7945,
        "Namespace_or_type_nameContext": 381,
        "IdentifierContext": 2271,
        "Namespace_member_declarationsContext": 18,
        "Namespace_member_declarationContext": 91,
        "Namespace_declarationContext": 9,
        "Qualified_identifierContext": 9,
        "Namespace_bodyContext": 9,
        "Type_declarationContext": 82,
        "All_member_modifiersContext": 175,
        "All_member_modifierContext": 215,
        "Class_definitionContext": 35,
        "Class_baseContext": 30,
        "Class_typeContext": 448,
        "Class_bodyContext": 35,
        "Class_member_declarationsContext": 35,
        "Class_member_declarationContext": 122,
        "Common_member_declarationContext": 122,
        "Typed_member_declarationContext": 76,
        "Type_Context": 486,
        "Base_typeContext": 552,
        "Property_declarationContext": 14,
        "Member_nameContext": 14,
        "Accessor_declarationsContext": 14,
        "Accessor_bodyContext": 25,
        "ErrorNodeImpl": 2657,
        "Tuple_typeContext": 1,
        "Tuple_elementContext": 1,
        "Constructor_declarationContext": 34,
        "Formal_parameter_listContext": 90,
        "Fixed_parametersContext": 90,
        "Fixed_parameterContext": 176,
        "Arg_declarationContext": 176,
        "BodyContext": 33,
        "BlockContext": 173,
        "Statement_listContext": 190,
        "StatementContext": 566,
        "Embedded_statementContext": 481,
        "ExpressionStatementContext": 206,
        "ExpressionContext": 1512,
        "AssignmentContext": 126,
        "Unary_expressionContext": 1757,
        "Primary_expressionContext": 1711,
        "SimpleNameExpressionContext": 1157,
        "Assignment_operatorContext": 94,
        "Non_assignment_expressionContext": 1346,
        "Conditional_expressionContext": 1340,
        "Null_coalescing_expressionContext": 1340,
        "Conditional_or_expressionContext": 1340,
        "Conditional_and_expressionContext": 1354,
        "Inclusive_or_expressionContext": 1391,
        "Exclusive_or_expressionContext": 1391,
        "And_expressionContext": 1391,
        "Equality_expressionContext": 1391,
        "Relational_expressionContext": 1502,
        "Shift_expressionContext": 1530,
        "Additive_expressionContext": 1530,
        "Multiplicative_expressionContext": 1581,
        "Switch_expressionContext": 1585,
        "Range_expressionContext": 1585,
        "LiteralExpressionContext": 414,
        "LiteralContext": 414,
        "String_literalContext": 236,
        "Member_accessContext": 178,
        "Method_invocationContext": 182,
        "Argument_listContext": 230,
        "ArgumentContext": 543,
        "ObjectCreationExpressionContext": 79,
        "Object_creation_expressionContext": 77,
        "Type_argument_listContext": 19,
        "Rank_specifierContext": 31,
        "Method_declarationContext": 62,
        "Method_member_nameContext": 62,
        "Method_bodyContext": 62,
        "DeclarationStatementContext": 86,
        "Local_variable_declarationContext": 99,
        "Local_variable_typeContext": 106,
        "Local_variable_declaratorContext": 99,
        "Local_variable_initializerContext": 86,
        "Lambda_expressionContext": 6,
        "Anonymous_function_signatureContext": 6,
        "Right_arrowContext": 6,
        "Anonymous_function_bodyContext": 6,
        "IfStatementContext": 136,
        "Bracket_expressionContext": 70,
        "Indexer_argumentContext": 70,
        "If_bodyContext": 168,
        "ThrowStatementContext": 65,
        "Simple_typeContext": 133,
        "Numeric_typeContext": 108,
        "Integral_typeContext": 73,
        "ForStatementContext": 17,
        "For_initializerContext": 17,
        "For_iteratorContext": 17,
        "Expression_listContext": 2,
        "ReturnStatementContext": 116,
        "ParenthesisExpressionsContext": 14,
        "BreakStatementContext": 15,
        "SwitchStatementContext": 12,
        "Switch_sectionContext": 40,
        "Switch_labelContext": 40,
        "Set_accessor_declarationContext": 11,
        "Accessor_modifierContext": 11,
        "Boolean_literalContext": 26,
        "IsTypeContext": 66,
        "Cast_expressionContext": 35,
        "ForeachStatementContext": 7,
        "Floating_point_typeContext": 35,
        "DefaultValueExpressionContext": 9,
        "Constructor_initializerContext": 22,
        "Throwable_expressionContext": 64,
        "MemberAccessExpressionContext": 14,
        "Predefined_typeContext": 14,
        "TryStatementContext": 9,
        "Catch_clausesContext": 8,
        "Specific_catch_clauseContext": 6,
        "Field_declarationContext": 4,
        "Variable_declaratorsContext": 4,
        "Variable_declaratorContext": 4,
        "TypeofExpressionContext": 23,
        "Unbound_type_nameContext": 23,
        "Throw_expressionContext": 2,
        "General_catch_clauseContext": 2,
        "TheEmptyStatementContext": 1,
        "AttributesContext": 25,
        "Attribute_sectionContext": 28,
        "Attribute_listContext": 43,
        "AttributeContext": 43,
        "TupleExpressionContext": 1,
        "ContinueStatementContext": 1,
        "Global_attribute_sectionContext": 23,
        "Global_attribute_targetContext": 23,
        "Attribute_argumentContext": 25,
        "Qualified_alias_memberContext": 5,
        "WhileStatementContext": 1
    },
    "project_name": "Ramonconda_HulkProjec",
    "label": "original"
}
{
    "total_nodes": 40264,
    "max_depth": 1642,
    "number_of_variables": 83,
    "number_of_constants": 0,
    "out_variables": 0,
    "ref_params": 0,
    "number_of_methods": 112,
    "number_of_classes": 24,
    "number_of_interfaces": 1,
    "number_of_abstract_classes": 0,
    "number_of_sealed_classes": 0,
    "import_statements": 12,
    "number_of_try_blocks": 1,
    "number_of_lists": 6,
    "number_of_dictionaries": 1,
    "number_of_enums": 2,
    "number_of_delegates": 0,
    "function_calls": 40,
    "enums_names": [
        "ErrorType",
        "TokenType"
    ],
    "control_structures_if": 92,
    "control_structures_switch": 5,
    "control_structures_for": 1,
    "control_structures_while": 17,
    "control_structures_dowhile": 0,
    "access_modifiers_public": 133,
    "access_modifiers_private": 50,
    "access_modifiers_protected": 0,
    "access_modifiers_internal": 0,
    "access_modifiers_static": 3,
    "access_modifiers_protected_internal": 0,
    "access_modifiers_private_protected": 0,
    "modifier_readonly": 1,
    "modifier_volatile": 0,
    "modifier_virtual": 0,
    "modifier_override": 16,
    "modifier_new": 8,
    "modifier_partial": 0,
    "modifier_extern": 0,
    "modifier_unsafe": 0,
    "modifier_async": 0,
    "linq_querie_select": 0,
    "linq_queries_where": 0,
    "linq_queries_orderBy": 0,
    "linq_queries_groupBy": 0,
    "linq_queries_join": 0,
    "linq_queries_sum": 15,
    "linq_queries_count": 0,
    "library_call_console": 3,
    "library_call_math": 6,
    "number_of_lambdas": 2,
    "number_of_getters": 32,
    "number_of_setters": 32,
    "number_of_tuples": 0,
    "number_of_namespaces": 25,
    "method_parameters": [
        [
            "Error_",
            [
                [
                    "ErrorType",
                    "type"
                ],
                [
                    "string",
                    "error"
                ]
            ]
        ],
        [
            "FindVariable",
            [
                [
                    "string",
                    "name"
                ]
            ]
        ],
        [
            "evaluate",
            [
                [
                    "ASTnode",
                    "expr"
                ]
            ]
        ],
        [
            "Visit",
            [
                [
                    "Num",
                    "num"
                ]
            ]
        ],
        [
            "Visit",
            [
                [
                    "String_",
                    "string_"
                ]
            ]
        ],
        [
            "Visit",
            [
                [
                    "Logical",
                    "expr"
                ]
            ]
        ],
        [
            "Visit",
            [
                [
                    "Grouping",
                    "expr"
                ]
            ]
        ],
        [
            "Visit",
            [
                [
                    "ExpressionStmt",
                    "stmt"
                ]
            ]
        ],
        [
            "Visit",
            [
                [
                    "UnaryExpr",
                    "expr"
                ]
            ]
        ],
        [
            "Visit",
            [
                [
                    "BinOp",
                    "expr"
                ]
            ]
        ],
        [
            "Visit",
            [
                [
                    "Print",
                    "stmt"
                ]
            ]
        ],
        [
            "Visit",
            [
                [
                    "Assignment",
                    "expr"
                ]
            ]
        ],
        [
            "Visit",
            [
                [
                    "IfStmt",
                    "stmt"
                ]
            ]
        ],
        [
            "Visit",
            [
                [
                    "Boolean",
                    "_boolean"
                ]
            ]
        ],
        [
            "Visit",
            [
                [
                    "CallFunction",
                    "expr"
                ]
            ]
        ],
        [
            "Visit",
            [
                [
                    "LetStmt",
                    "_let"
                ]
            ]
        ],
        [
            "Visit",
            [
                [
                    "VariableReference",
                    "_reference"
                ]
            ]
        ],
        [
            "Visit",
            [
                [
                    "FunctionStmt",
                    "_stmt"
                ]
            ]
        ],
        [
            "Visit",
            [
                [
                    "MathExpr",
                    "_value"
                ]
            ]
        ],
        [
            "IsTruthy",
            [
                [
                    "object",
                    "ob"
                ]
            ]
        ],
        [
            "CheckNumberOperand",
            [
                [
                    "object",
                    "operand"
                ]
            ]
        ],
        [
            "CheckNumberOperands",
            [
                [
                    "object",
                    "left"
                ],
                [
                    "object",
                    "right"
                ]
            ]
        ],
        [
            "IsEqual",
            [
                [
                    "object",
                    "a"
                ],
                [
                    "object",
                    "b"
                ]
            ]
        ],
        [
            "ScanIdentifier",
            [
                [
                    "char",
                    "c"
                ]
            ]
        ],
        [
            "ScanAssignment",
            [
                [
                    "char",
                    "c"
                ]
            ]
        ],
        [
            "ScanComparative",
            [
                [
                    "char",
                    "c"
                ]
            ]
        ],
        [
            "ScanNegation",
            [
                [
                    "char",
                    "c"
                ]
            ]
        ],
        [
            "AddToken",
            [
                [
                    "TokenType",
                    "type"
                ],
                [
                    "string",
                    "value"
                ]
            ]
        ],
        [
            "IsAlphaC",
            [
                [
                    "char",
                    "c"
                ]
            ]
        ],
        [
            "IsDigit",
            [
                [
                    "char",
                    "c"
                ]
            ]
        ],
        [
            "Visit",
            [
                [
                    "Assignment",
                    "_assign"
                ]
            ]
        ],
        [
            "Visit",
            [
                [
                    "String_",
                    "_string"
                ]
            ]
        ],
        [
            "Visit",
            [
                [
                    "BinOp",
                    "_binary"
                ]
            ]
        ],
        [
            "Visit",
            [
                [
                    "Boolean",
                    "_boolean"
                ]
            ]
        ],
        [
            "Visit",
            [
                [
                    "UnaryExpr",
                    "_unary"
                ]
            ]
        ],
        [
            "Visit",
            [
                [
                    "Num",
                    "_num"
                ]
            ]
        ],
        [
            "Visit",
            [
                [
                    "Grouping",
                    "_group"
                ]
            ]
        ],
        [
            "Visit",
            [
                [
                    "CallFunction",
                    "_call"
                ]
            ]
        ],
        [
            "Visit",
            [
                [
                    "Logical",
                    "_logical"
                ]
            ]
        ],
        [
            "Visit",
            [
                [
                    "MathExpr",
                    "_value"
                ]
            ]
        ],
        [
            "Visit",
            [
                [
                    "FunctionStmt",
                    "_stmt"
                ]
            ]
        ],
        [
            "Visit",
            [
                [
                    "IfStmt",
                    "_stmt"
                ]
            ]
        ],
        [
            "Visit",
            [
                [
                    "Print",
                    "_print"
                ]
            ]
        ],
        [
            "Visit",
            [
                [
                    "ExpressionStmt",
                    "_stmt"
                ]
            ]
        ],
        [
            "Visit",
            [
                [
                    "LetStmt",
                    "_let"
                ]
            ]
        ],
        [
            "Visit",
            [
                [
                    "VariableReference",
                    "_reference"
                ]
            ]
        ],
        [
            "Print_",
            [
                [
                    "ASTnode",
                    "stmt"
                ]
            ]
        ],
        [
            "Print",
            [
                [
                    "ASTnode",
                    "node"
                ]
            ]
        ],
        [
            "Visit",
            [
                [
                    "IfStmt",
                    "_stmt"
                ]
            ]
        ],
        [
            "Visit",
            [
                [
                    "Print",
                    "_print"
                ]
            ]
        ],
        [
            "Visit",
            [
                [
                    "ExpressionStmt",
                    "_stmt"
                ]
            ]
        ],
        [
            "Visit",
            [
                [
                    "LetStmt",
                    "_let"
                ]
            ]
        ],
        [
            "Visit",
            [
                [
                    "Assignment",
                    "_assign"
                ]
            ]
        ],
        [
            "Visit",
            [
                [
                    "String_",
                    "_string"
                ]
            ]
        ],
        [
            "Visit",
            [
                [
                    "BinOp",
                    "_binary"
                ]
            ]
        ],
        [
            "Eat",
            [
                [
                    "TokenType",
                    "type"
                ]
            ]
        ],
        [
            "Consume",
            [
                [
                    "TokenType",
                    "type"
                ],
                [
                    "String",
                    "message"
                ]
            ]
        ],
        [
            "Check",
            [
                [
                    "TokenType",
                    "type"
                ]
            ]
        ]
    ],
    "variable_names": [
        [
            "string",
            "type_"
        ],
        [
            "string",
            "input"
        ],
        [
            "List",
            "stmts"
        ],
        [
            "Interprete",
            "interprete"
        ],
        [
            "Parser",
            "parser"
        ],
        [
            "Lexer",
            "lexer"
        ],
        [
            "var",
            "x"
        ],
        [
            "var",
            "argument"
        ],
        [
            "object",
            "left"
        ],
        [
            "object",
            "result"
        ],
        [
            "string",
            "concated"
        ],
        [
            "object",
            "right"
        ],
        [
            "object",
            "value"
        ],
        [
            "FunctionStmt",
            "fun"
        ],
        [
            "var",
            "argument1"
        ],
        [
            "int",
            "i"
        ],
        [
            "var",
            "argument2"
        ],
        [
            "bool",
            "found"
        ],
        [
            "char",
            "c"
        ],
        [
            "string",
            "result"
        ],
        [
            "Dictionary",
            "Identifiers"
        ],
        [
            "ASTnode",
            "node"
        ],
        [
            "Token",
            "paren"
        ],
        [
            "List",
            "statements"
        ],
        [
            "ASTnode",
            "body"
        ],
        [
            "Token",
            "callee"
        ],
        [
            "ASTnode",
            "in_body"
        ],
        [
            "string",
            "function_name"
        ],
        [
            "ASTnode",
            "expr"
        ],
        [
            "List",
            "parameters"
        ],
        [
            "ASTnode",
            "value"
        ],
        [
            "ASTnode",
            "condition"
        ],
        [
            "int",
            "count"
        ],
        [
            "List",
            "arguments"
        ],
        [
            "ASTnode",
            "right"
        ],
        [
            "ASTnode",
            "then_body"
        ],
        [
            "ASTnode",
            "else_body"
        ],
        [
            "Token",
            "op"
        ],
        [
            "List",
            "let_declarations"
        ],
        [
            "string",
            "name"
        ]
    ],
    "method_names": [
        "Error_",
        "Main",
        "CheckNumberOperand",
        "FindVariable",
        "IsEqual",
        "evaluate",
        "CheckNumberOperands",
        "ExitScope",
        "Visit",
        "IsTruthy",
        "EnterScope",
        "ScanAssignment",
        "Peek",
        "IsAtEnd",
        "ScanNumber",
        "ScanToken",
        "Current",
        "Advance",
        "IsAlphaC",
        "ScanNegation",
        "IsDigit",
        "PeekNext",
        "AddToken",
        "ScanString",
        "ScanComparative",
        "ScanIdentifier",
        "ScanTokens",
        "Accept",
        "Accept",
        "Accept",
        "Accept",
        "Accept",
        "Accept",
        "Accept",
        "Visit",
        "Accept",
        "Accept",
        "Accept",
        "Accept",
        "Accept",
        "Accept",
        "Accept",
        "Visit",
        "Print",
        "Print_",
        "Accept",
        "Accept",
        "Accept",
        "IsAtEnd",
        "Current",
        "Statement",
        "ExpressionStatement",
        "Consume",
        "CallFunction",
        "Check",
        "Unary",
        "Advance",
        "LevelFour",
        "Concat",
        "Comparison",
        "Semicolon",
        "Or",
        "Equality",
        "Eat",
        "Function",
        "PrintStatement",
        "IfStatement",
        "Primary",
        "Fun",
        "Assignment",
        "Parse",
        "Previous",
        "LevelThree",
        "And",
        "LetStatement",
        "LevelTwo"
    ],
    "method_return_types": [
        [
            "Error_",
            "Exception"
        ],
        [
            "Main",
            "void"
        ],
        [
            "Visit",
            "object"
        ],
        [
            "CheckNumberOperands",
            "void"
        ],
        [
            "ExitScope",
            "void"
        ],
        [
            "EnterScope",
            "void"
        ],
        [
            "CheckNumberOperand",
            "void"
        ],
        [
            "FindVariable",
            "object"
        ],
        [
            "IsTruthy",
            "bool"
        ],
        [
            "evaluate",
            "object"
        ],
        [
            "IsEqual",
            "bool"
        ],
        [
            "ScanNegation",
            "void"
        ],
        [
            "Peek",
            "char"
        ],
        [
            "ScanNumber",
            "void"
        ],
        [
            "ScanToken",
            "void"
        ],
        [
            "IsDigit",
            "bool"
        ],
        [
            "Current",
            "char"
        ],
        [
            "ScanIdentifier",
            "void"
        ],
        [
            "ScanTokens",
            "List"
        ],
        [
            "ScanAssignment",
            "void"
        ],
        [
            "ScanComparative",
            "void"
        ],
        [
            "PeekNext",
            "char"
        ],
        [
            "IsAtEnd",
            "bool"
        ],
        [
            "ScanString",
            "void"
        ],
        [
            "AddToken",
            "void"
        ],
        [
            "Advance",
            "char"
        ],
        [
            "IsAlphaC",
            "bool"
        ],
        [
            "Accept",
            "T"
        ],
        [
            "Accept",
            "T"
        ],
        [
            "Accept",
            "T"
        ],
        [
            "Accept",
            "T"
        ],
        [
            "Accept",
            "T"
        ],
        [
            "Accept",
            "T"
        ],
        [
            "Accept",
            "T"
        ],
        [
            "Accept",
            "T"
        ],
        [
            "Visit",
            "T"
        ],
        [
            "Accept",
            "T"
        ],
        [
            "Accept",
            "T"
        ],
        [
            "Accept",
            "T"
        ],
        [
            "Accept",
            "T"
        ],
        [
            "Accept",
            "T"
        ],
        [
            "Accept",
            "T"
        ],
        [
            "Print_",
            "void"
        ],
        [
            "Visit",
            "string"
        ],
        [
            "Print",
            "string"
        ],
        [
            "Accept",
            "T"
        ],
        [
            "Accept",
            "T"
        ],
        [
            "Accept",
            "T"
        ],
        [
            "Assignment",
            "List"
        ],
        [
            "Fun",
            "ASTnode"
        ],
        [
            "CallFunction",
            "ASTnode"
        ],
        [
            "Eat",
            "bool"
        ],
        [
            "IsAtEnd",
            "bool"
        ],
        [
            "Current",
            "Token"
        ],
        [
            "Equality",
            "ASTnode"
        ],
        [
            "Comparison",
            "ASTnode"
        ],
        [
            "Concat",
            "ASTnode"
        ],
        [
            "Previous",
            "Token"
        ],
        [
            "Advance",
            "Token"
        ],
        [
            "ExpressionStatement",
            "ASTnode"
        ],
        [
            "Consume",
            "Token"
        ],
        [
            "Parse",
            "List"
        ],
        [
            "LetStatement",
            "ASTnode"
        ],
        [
            "IfStatement",
            "ASTnode"
        ],
        [
            "Unary",
            "ASTnode"
        ],
        [
            "And",
            "ASTnode"
        ],
        [
            "Check",
            "bool"
        ],
        [
            "LevelFour",
            "ASTnode"
        ],
        [
            "Or",
            "ASTnode"
        ],
        [
            "Primary",
            "ASTnode"
        ],
        [
            "PrintStatement",
            "ASTnode"
        ],
        [
            "LevelThree",
            "ASTnode"
        ],
        [
            "Semicolon",
            "void"
        ],
        [
            "LevelTwo",
            "ASTnode"
        ],
        [
            "Function",
            "ASTnode"
        ],
        [
            "Statement",
            "ASTnode"
        ]
    ],
    "class_names": [
        "Error",
        "Program",
        "Interprete",
        "Token",
        "Lexer",
        "IfStmt",
        "ExpressionStmt",
        "Boolean",
        "Print",
        "Num",
        "String_",
        "FunctionStmt",
        "ASTnode",
        "Assignment",
        "UnaryExpr",
        "MathExpr",
        "VariableReference",
        "BinOp",
        "LetStmt",
        "AstPrinter",
        "CallFunction",
        "Logical",
        "Grouping",
        "Parser"
    ],
    "interface_names": [
        "IVisitor"
    ],
    "delegate_names": [],
    "node_count": {
        "Compilation_unitContext": 28,
        "Using_directivesContext": 12,
        "UsingNamespaceDirectiveContext": 15,
        "TerminalNodeImpl": 7420,
        "Namespace_or_type_nameContext": 384,
        "IdentifierContext": 2278,
        "Namespace_member_declarationsContext": 50,
        "Namespace_member_declarationContext": 51,
        "Namespace_declarationContext": 25,
        "Qualified_identifierContext": 25,
        "Namespace_bodyContext": 25,
        "Type_declarationContext": 26,
        "All_member_modifiersContext": 183,
        "All_member_modifierContext": 205,
        "Class_definitionContext": 24,
        "Class_baseContext": 19,
        "Class_typeContext": 413,
        "Class_bodyContext": 25,
        "Class_member_declarationsContext": 25,
        "Class_member_declarationContext": 177,
        "Common_member_declarationContext": 177,
        "Typed_member_declarationContext": 137,
        "Type_Context": 448,
        "Base_typeContext": 469,
        "Method_declarationContext": 112,
        "Method_member_nameContext": 112,
        "Formal_parameter_listContext": 94,
        "Fixed_parametersContext": 94,
        "Fixed_parameterContext": 113,
        "Arg_declarationContext": 113,
        "Method_bodyContext": 112,
        "BlockContext": 226,
        "Statement_listContext": 275,
        "StatementContext": 547,
        "DeclarationStatementContext": 82,
        "Local_variable_declarationContext": 83,
        "Local_variable_typeContext": 87,
        "Local_variable_declaratorContext": 83,
        "Local_variable_initializerContext": 83,
        "ExpressionContext": 1127,
        "Non_assignment_expressionContext": 1040,
        "Conditional_expressionContext": 1038,
        "Null_coalescing_expressionContext": 1038,
        "Conditional_or_expressionContext": 1038,
        "Conditional_and_expressionContext": 1047,
        "Inclusive_or_expressionContext": 1060,
        "Exclusive_or_expressionContext": 1060,
        "And_expressionContext": 1060,
        "Equality_expressionContext": 1060,
        "Relational_expressionContext": 1098,
        "Shift_expressionContext": 1116,
        "Additive_expressionContext": 1116,
        "Multiplicative_expressionContext": 1159,
        "Switch_expressionContext": 1162,
        "Range_expressionContext": 1162,
        "Unary_expressionContext": 1282,
        "Primary_expressionContext": 1238,
        "LiteralExpressionContext": 202,
        "LiteralContext": 202,
        "String_literalContext": 111,
        "Embedded_statementContext": 487,
        "IfStatementContext": 92,
        "SimpleNameExpressionContext": 972,
        "Member_accessContext": 417,
        "If_bodyContext": 134,
        "ExpressionStatementContext": 211,
        "AssignmentContext": 76,
        "Assignment_operatorContext": 76,
        "ThrowStatementContext": 29,
        "ErrorNodeImpl": 336,
        "Enum_definitionContext": 2,
        "Enum_bodyContext": 2,
        "Enum_member_declarationContext": 40,
        "Method_invocationContext": 362,
        "ObjectCreationExpressionContext": 40,
        "Object_creation_expressionContext": 39,
        "WhileStatementContext": 17,
        "Boolean_literalContext": 17,
        "Argument_listContext": 246,
        "ArgumentContext": 365,
        "BreakStatementContext": 24,
        "TryStatementContext": 1,
        "Type_argument_listContext": 46,
        "ForeachStatementContext": 4,
        "Catch_clausesContext": 1,
        "Specific_catch_clauseContext": 1,
        "Global_attribute_sectionContext": 8,
        "Global_attribute_targetContext": 8,
        "Attribute_listContext": 8,
        "AttributeContext": 8,
        "Qualified_alias_memberContext": 2,
        "Attribute_argumentContext": 9,
        "Field_declarationContext": 8,
        "Variable_declaratorsContext": 8,
        "Variable_declaratorContext": 8,
        "Constructor_declarationContext": 20,
        "BodyContext": 20,
        "Lambda_expressionContext": 2,
        "Anonymous_function_signatureContext": 2,
        "Right_arrowContext": 2,
        "Anonymous_function_bodyContext": 2,
        "Bracket_expressionContext": 17,
        "Indexer_argumentContext": 17,
        "ReturnStatementContext": 126,
        "ThisReferenceExpressionContext": 20,
        "SwitchStatementContext": 5,
        "Switch_sectionContext": 49,
        "Switch_labelContext": 66,
        "Cast_expressionContext": 30,
        "Simple_typeContext": 75,
        "Numeric_typeContext": 60,
        "Floating_point_typeContext": 43,
        "IsTypeContext": 21,
        "ForStatementContext": 1,
        "For_initializerContext": 1,
        "Integral_typeContext": 17,
        "For_iteratorContext": 1,
        "Property_declarationContext": 32,
        "Member_nameContext": 32,
        "Accessor_declarationsContext": 32,
        "Accessor_bodyContext": 64,
        "Set_accessor_declarationContext": 32,
        "Variable_initializerContext": 4,
        "Object_or_collection_initializerContext": 1,
        "Collection_initializerContext": 1,
        "Element_initializerContext": 10,
        "Expression_listContext": 10,
        "ParenthesisExpressionsContext": 3,
        "Accessor_modifierContext": 28,
        "Type_parameter_listContext": 17,
        "Type_parameterContext": 17,
        "MemberAccessExpressionContext": 1,
        "Predefined_typeContext": 1,
        "Interface_definitionContext": 1,
        "Variant_type_parameter_listContext": 1,
        "Variant_type_parameterContext": 1,
        "DoStatementContext": 2
    },
    "project_name": "MaureenSales_Hulk-rdp",
    "label": "original",
    "project_type": "hulk"
}
{
    "total_nodes": 38989,
    "max_depth": 549,
    "number_of_variables": 106,
    "number_of_constants": 0,
    "out_variables": 0,
    "ref_params": 0,
    "number_of_methods": 36,
    "number_of_classes": 7,
    "number_of_interfaces": 0,
    "number_of_abstract_classes": 0,
    "number_of_sealed_classes": 0,
    "import_statements": 6,
    "number_of_try_blocks": 1,
    "number_of_lists": 2,
    "number_of_dictionaries": 4,
    "number_of_enums": 1,
    "number_of_delegates": 0,
    "function_calls": 105,
    "enums_names": [
        "TokenType"
    ],
    "control_structures_if": 85,
    "control_structures_switch": 5,
    "control_structures_for": 2,
    "control_structures_while": 13,
    "control_structures_dowhile": 0,
    "access_modifiers_public": 51,
    "access_modifiers_private": 11,
    "access_modifiers_protected": 0,
    "access_modifiers_internal": 0,
    "access_modifiers_static": 2,
    "access_modifiers_protected_internal": 0,
    "access_modifiers_private_protected": 0,
    "modifier_readonly": 0,
    "modifier_volatile": 0,
    "modifier_virtual": 0,
    "modifier_override": 0,
    "modifier_new": 20,
    "modifier_partial": 0,
    "modifier_extern": 0,
    "modifier_unsafe": 0,
    "modifier_async": 0,
    "linq_querie_select": 0,
    "linq_queries_where": 0,
    "linq_queries_orderBy": 0,
    "linq_queries_groupBy": 0,
    "linq_queries_join": 0,
    "linq_queries_sum": 30,
    "linq_queries_count": 0,
    "library_call_console": 5,
    "library_call_math": 6,
    "number_of_lambdas": 0,
    "number_of_getters": 6,
    "number_of_setters": 3,
    "number_of_tuples": 0,
    "number_of_namespaces": 7,
    "method_parameters": [
        [
            "Read_Parser",
            [
                [
                    "Node",
                    "n"
                ]
            ]
        ],
        [
            "Choice",
            [
                [
                    "Node",
                    "node"
                ]
            ]
        ],
        [
            "Evaluate",
            [
                [
                    "Node",
                    "node"
                ]
            ]
        ],
        [
            "Get_Var_Param",
            [
                [
                    "Node",
                    "parameters"
                ]
            ]
        ],
        [
            "Save_Var",
            [
                [
                    "Node",
                    "Children_assigment_list"
                ]
            ]
        ],
        [
            "Call_Function",
            [
                [
                    "List<Function_B>",
                    "f"
                ],
                [
                    "string",
                    "name"
                ],
                [
                    "Node",
                    "param"
                ]
            ]
        ],
        [
            "Function_Exist",
            [
                [
                    "string?",
                    "name"
                ]
            ]
        ],
        [
            "Input_Error",
            [
                [
                    "string",
                    "error"
                ]
            ]
        ],
        [
            "Type_Expected",
            [
                [
                    "object",
                    "value1"
                ],
                [
                    "object",
                    "value2"
                ],
                [
                    "string",
                    "type"
                ],
                [
                    "string",
                    "op"
                ]
            ]
        ],
        [
            "Expected",
            [
                [
                    "object",
                    "value1"
                ],
                [
                    "string",
                    "type"
                ],
                [
                    "string",
                    "express"
                ]
            ]
        ],
        [
            "Identify",
            [
                [
                    "object",
                    "value"
                ]
            ]
        ],
        [
            "Own_Words",
            [
                [
                    "string",
                    "word"
                ]
            ]
        ],
        [
            "Input_Error",
            [
                [
                    "string",
                    "error"
                ]
            ]
        ],
        [
            "Read",
            [
                [
                    "int",
                    "position"
                ],
                [
                    "string",
                    "text"
                ]
            ]
        ],
        [
            "Get_Sequency",
            [
                [
                    "string",
                    "text"
                ],
                [
                    "int",
                    "position"
                ]
            ]
        ],
        [
            "Input_Error",
            [
                [
                    "string",
                    "error"
                ]
            ]
        ],
        [
            "Exceptions_Missing",
            [
                [
                    "Node",
                    "node"
                ],
                [
                    "string",
                    "op"
                ]
            ]
        ]
    ],
    "variable_names": [
        [
            "object",
            "right_b"
        ],
        [
            "string",
            "name"
        ],
        [
            "dynamic",
            "value"
        ],
        [
            "object",
            "right_and"
        ],
        [
            "Dictionary",
            "Var"
        ],
        [
            "object",
            "left_and"
        ],
        [
            "object",
            "condition"
        ],
        [
            "object",
            "left_b"
        ],
        [
            "dynamic",
            "right_or"
        ],
        [
            "Node",
            "param_f"
        ],
        [
            "object",
            "value_agrument"
        ],
        [
            "object",
            "value_base"
        ],
        [
            "int",
            "f_position"
        ],
        [
            "Dictionary",
            "Param"
        ],
        [
            "string",
            "type_right"
        ],
        [
            "Function_B",
            "function"
        ],
        [
            "Dictionary",
            "Scope_actual"
        ],
        [
            "object",
            "left_st"
        ],
        [
            "int",
            "i"
        ],
        [
            "string",
            "type_left"
        ],
        [
            "object",
            "right_st"
        ],
        [
            "string",
            "v1_type"
        ],
        [
            "object",
            "right_a"
        ],
        [
            "dynamic",
            "left_or"
        ],
        [
            "int",
            "count"
        ],
        [
            "object",
            "value"
        ],
        [
            "object",
            "not"
        ],
        [
            "object",
            "value_cos"
        ],
        [
            "object",
            "left_a"
        ],
        [
            "object",
            "value_sin"
        ],
        [
            "dynamic",
            "result"
        ],
        [
            "bool",
            "is_found"
        ],
        [
            "object",
            "value_print"
        ],
        [
            "Dictionary",
            "Var_let_in"
        ],
        [
            "List",
            "TS"
        ],
        [
            "string",
            "value"
        ],
        [
            "Token",
            "currentToken"
        ],
        [
            "int",
            "dot_counter"
        ],
        [
            "string",
            "word"
        ],
        [
            "(",
            "s"
        ],
        [
            "string",
            "s"
        ],
        [
            "string",
            "number"
        ],
        [
            "Node",
            "operations_else"
        ],
        [
            "Node",
            "assigments"
        ],
        [
            "Node",
            "expression"
        ],
        [
            "Node",
            "function_name"
        ],
        [
            "string",
            "op"
        ],
        [
            "dynamic",
            "value"
        ],
        [
            "string",
            "a"
        ],
        [
            "Node",
            "param"
        ],
        [
            "Node",
            "var"
        ],
        [
            "Node",
            "operations"
        ],
        [
            "Node",
            "parammeters"
        ],
        [
            "Node",
            "operations_if"
        ],
        [
            "Token",
            "current_token"
        ],
        [
            "Node",
            "node"
        ],
        [
            "Node",
            "value"
        ],
        [
            "Node",
            "function"
        ],
        [
            "Node",
            "valor2"
        ],
        [
            "Node",
            "Tree"
        ],
        [
            "Node",
            "operation"
        ],
        [
            "dynamic",
            "f_name"
        ],
        [
            "Node",
            "n"
        ],
        [
            "Node",
            "valor"
        ],
        [
            "Node",
            "condition"
        ],
        [
            "Node",
            "parammeter_name"
        ],
        [
            "bool",
            "comma"
        ],
        [
            "Node",
            "name"
        ],
        [
            "Node",
            "conditional_if_else"
        ],
        [
            "string",
            "msg"
        ],
        [
            "Node",
            "right"
        ],
        [
            "Node",
            "variable"
        ],
        [
            "List",
            "TS"
        ],
        [
            "Lexer",
            "T"
        ],
        [
            "Semantic_Analyzer",
            "sa"
        ],
        [
            "string",
            "s"
        ],
        [
            "Node",
            "N"
        ],
        [
            "Parser",
            "P"
        ]
    ],
    "method_names": [
        "Get_Var_Param",
        "Choice",
        "Function_Exist",
        "Input_Error",
        "Expected",
        "Read_Parser",
        "Evaluate",
        "Identify",
        "Save_Var",
        "Call_Function",
        "Type_Expected",
        "Read",
        "Input_Error",
        "Skip_Space",
        "Move_on",
        "Get_Sequency",
        "Own_Words",
        "String_Analyzer",
        "Int_Analyzer",
        "Get_token",
        "Layer_1",
        "Factor",
        "Showing",
        "Input_Error",
        "Layer_4",
        "Exceptions_Missing",
        "Assigment",
        "Layer_5",
        "Parse",
        "Global_Layer",
        "Conditional",
        "Layer_6",
        "Function",
        "Layer_2",
        "Layer_3",
        "Main"
    ],
    "method_return_types": [
        [
            "Expected",
            "void"
        ],
        [
            "Input_Error",
            "void"
        ],
        [
            "Save_Var",
            "void"
        ],
        [
            "Get_Var_Param",
            "Dictionary"
        ],
        [
            "Call_Function",
            "int"
        ],
        [
            "Read_Parser",
            "void"
        ],
        [
            "Identify",
            "string"
        ],
        [
            "Function_Exist",
            "bool"
        ],
        [
            "Choice",
            "void"
        ],
        [
            "Type_Expected",
            "void"
        ],
        [
            "Evaluate",
            "object"
        ],
        [
            "Move_on",
            "void"
        ],
        [
            "Skip_Space",
            "void"
        ],
        [
            "Get_token",
            "Token"
        ],
        [
            "Own_Words",
            "Token"
        ],
        [
            "String_Analyzer",
            "string"
        ],
        [
            "Input_Error",
            "void"
        ],
        [
            "Read",
            "("
        ],
        [
            "Get_Sequency",
            "List"
        ],
        [
            "Int_Analyzer",
            "double"
        ],
        [
            "Layer_2",
            "Node"
        ],
        [
            "Factor",
            "Node"
        ],
        [
            "Showing",
            "Node"
        ],
        [
            "Layer_6",
            "Node"
        ],
        [
            "Layer_3",
            "Node"
        ],
        [
            "Parse",
            "Node"
        ],
        [
            "Input_Error",
            "void"
        ],
        [
            "Layer_1",
            "Node"
        ],
        [
            "Conditional",
            "Node"
        ],
        [
            "Function",
            "Node"
        ],
        [
            "Exceptions_Missing",
            "void"
        ],
        [
            "Global_Layer",
            "Node"
        ],
        [
            "Layer_5",
            "Node"
        ],
        [
            "Layer_4",
            "Node"
        ],
        [
            "Assigment",
            "Node"
        ],
        [
            "Main",
            "void"
        ]
    ],
    "class_names": [
        "Function_B",
        "Node",
        "Token",
        "Semantic_Analyzer",
        "Lexer",
        "Parser",
        "Program"
    ],
    "interface_names": [],
    "delegate_names": [],
    "node_count": {
        "Compilation_unitContext": 7,
        "Using_directivesContext": 6,
        "UsingNamespaceDirectiveContext": 35,
        "TerminalNodeImpl": 6500,
        "Namespace_or_type_nameContext": 291,
        "IdentifierContext": 1871,
        "Namespace_member_declarationsContext": 14,
        "Namespace_member_declarationContext": 18,
        "Namespace_declarationContext": 7,
        "Qualified_identifierContext": 7,
        "Namespace_bodyContext": 7,
        "Type_declarationContext": 11,
        "All_member_modifiersContext": 63,
        "All_member_modifierContext": 64,
        "Class_definitionContext": 7,
        "Class_bodyContext": 7,
        "Class_member_declarationsContext": 7,
        "Class_member_declarationContext": 61,
        "Common_member_declarationContext": 61,
        "Typed_member_declarationContext": 43,
        "Type_Context": 407,
        "Base_typeContext": 428,
        "Class_typeContext": 354,
        "Type_argument_listContext": 46,
        "Field_declarationContext": 13,
        "Variable_declaratorsContext": 13,
        "Variable_declaratorContext": 13,
        "Constructor_declarationContext": 6,
        "Formal_parameter_listContext": 21,
        "Fixed_parametersContext": 21,
        "Fixed_parameterContext": 34,
        "Arg_declarationContext": 34,
        "BodyContext": 6,
        "BlockContext": 158,
        "Statement_listContext": 212,
        "StatementContext": 509,
        "Embedded_statementContext": 421,
        "ExpressionStatementContext": 164,
        "ExpressionContext": 1117,
        "AssignmentContext": 38,
        "Unary_expressionContext": 1418,
        "Primary_expressionContext": 1368,
        "ThisReferenceExpressionContext": 3,
        "Member_accessContext": 344,
        "Assignment_operatorContext": 38,
        "Non_assignment_expressionContext": 1105,
        "Conditional_expressionContext": 1105,
        "Null_coalescing_expressionContext": 1105,
        "Conditional_or_expressionContext": 1105,
        "Conditional_and_expressionContext": 1119,
        "Inclusive_or_expressionContext": 1149,
        "Exclusive_or_expressionContext": 1149,
        "And_expressionContext": 1149,
        "Equality_expressionContext": 1149,
        "Relational_expressionContext": 1241,
        "Shift_expressionContext": 1265,
        "Additive_expressionContext": 1265,
        "Multiplicative_expressionContext": 1323,
        "Switch_expressionContext": 1330,
        "Range_expressionContext": 1330,
        "SimpleNameExpressionContext": 892,
        "Property_declarationContext": 6,
        "Member_nameContext": 6,
        "Accessor_declarationsContext": 6,
        "Accessor_bodyContext": 9,
        "Set_accessor_declarationContext": 3,
        "ObjectCreationExpressionContext": 105,
        "Object_creation_expressionContext": 56,
        "Enum_definitionContext": 1,
        "Enum_bodyContext": 1,
        "Enum_member_declarationContext": 24,
        "Variable_initializerContext": 1,
        "Object_or_collection_initializerContext": 49,
        "Collection_initializerContext": 18,
        "Element_initializerContext": 35,
        "Expression_listContext": 4,
        "LiteralExpressionContext": 351,
        "LiteralContext": 351,
        "String_literalContext": 222,
        "Method_invocationContext": 234,
        "Argument_listContext": 207,
        "ArgumentContext": 311,
        "Boolean_literalContext": 13,
        "Method_declarationContext": 36,
        "Method_member_nameContext": 36,
        "Method_bodyContext": 36,
        "SwitchStatementContext": 5,
        "Switch_sectionContext": 54,
        "Switch_labelContext": 64,
        "Bracket_expressionContext": 121,
        "Indexer_argumentContext": 121,
        "BreakStatementContext": 10,
        "ReturnStatementContext": 128,
        "DeclarationStatementContext": 106,
        "Local_variable_declarationContext": 106,
        "Local_variable_typeContext": 111,
        "Local_variable_declaratorContext": 106,
        "Local_variable_initializerContext": 106,
        "Cast_expressionContext": 46,
        "Simple_typeContext": 73,
        "Numeric_typeContext": 51,
        "Floating_point_typeContext": 38,
        "TheEmptyStatementContext": 1,
        "IfStatementContext": 85,
        "IsTypeContext": 21,
        "If_bodyContext": 116,
        "Interpolated_regular_stringContext": 2,
        "Interpolated_regular_string_partContext": 2,
        "ParenthesisExpressionsContext": 8,
        "ThrowStatementContext": 6,
        "Integral_typeContext": 13,
        "ForStatementContext": 2,
        "For_initializerContext": 2,
        "For_iteratorContext": 2,
        "ForeachStatementContext": 5,
        "WhileStatementContext": 13,
        "MemberAccessExpressionContext": 7,
        "Predefined_typeContext": 7,
        "ContinueStatementContext": 1,
        "Tuple_typeContext": 2,
        "Tuple_elementContext": 6,
        "TupleExpressionContext": 2,
        "Object_initializerContext": 31,
        "Member_initializer_listContext": 30,
        "Member_initializerContext": 57,
        "Initializer_valueContext": 57,
        "DoStatementContext": 2,
        "ErrorNodeImpl": 76,
        "AttributesContext": 2,
        "Attribute_sectionContext": 3,
        "Attribute_listContext": 2,
        "AttributeContext": 2,
        "TryStatementContext": 1,
        "Catch_clausesContext": 1,
        "Specific_catch_clauseContext": 1
    },
    "project_name": "INTERPRETE-C--to-HULK",
    "label": "original"
}
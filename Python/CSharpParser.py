# Generated from CSharpParser.g4 by ANTLR 4.13.2
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO

if "." in __name__:
    from .CSharpParserBase import CSharpParserBase
else:
    from CSharpParserBase import CSharpParserBase

def serializedATN():
    return [
        4,1,198,2886,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,
        7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,
        13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
        20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,
        26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,
        33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,
        39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,
        46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,
        52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,2,
        59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,65,7,
        65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,2,71,7,71,2,
        72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,78,7,
        78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,2,
        85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,
        91,2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,
        98,7,98,2,99,7,99,2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,
        2,104,7,104,2,105,7,105,2,106,7,106,2,107,7,107,2,108,7,108,2,109,
        7,109,2,110,7,110,2,111,7,111,2,112,7,112,2,113,7,113,2,114,7,114,
        2,115,7,115,2,116,7,116,2,117,7,117,2,118,7,118,2,119,7,119,2,120,
        7,120,2,121,7,121,2,122,7,122,2,123,7,123,2,124,7,124,2,125,7,125,
        2,126,7,126,2,127,7,127,2,128,7,128,2,129,7,129,2,130,7,130,2,131,
        7,131,2,132,7,132,2,133,7,133,2,134,7,134,2,135,7,135,2,136,7,136,
        2,137,7,137,2,138,7,138,2,139,7,139,2,140,7,140,2,141,7,141,2,142,
        7,142,2,143,7,143,2,144,7,144,2,145,7,145,2,146,7,146,2,147,7,147,
        2,148,7,148,2,149,7,149,2,150,7,150,2,151,7,151,2,152,7,152,2,153,
        7,153,2,154,7,154,2,155,7,155,2,156,7,156,2,157,7,157,2,158,7,158,
        2,159,7,159,2,160,7,160,2,161,7,161,2,162,7,162,2,163,7,163,2,164,
        7,164,2,165,7,165,2,166,7,166,2,167,7,167,2,168,7,168,2,169,7,169,
        2,170,7,170,2,171,7,171,2,172,7,172,2,173,7,173,2,174,7,174,2,175,
        7,175,2,176,7,176,2,177,7,177,2,178,7,178,2,179,7,179,2,180,7,180,
        2,181,7,181,2,182,7,182,2,183,7,183,2,184,7,184,2,185,7,185,2,186,
        7,186,2,187,7,187,2,188,7,188,2,189,7,189,2,190,7,190,2,191,7,191,
        2,192,7,192,2,193,7,193,2,194,7,194,2,195,7,195,2,196,7,196,2,197,
        7,197,2,198,7,198,2,199,7,199,2,200,7,200,2,201,7,201,2,202,7,202,
        2,203,7,203,2,204,7,204,2,205,7,205,2,206,7,206,2,207,7,207,2,208,
        7,208,2,209,7,209,2,210,7,210,2,211,7,211,2,212,7,212,2,213,7,213,
        2,214,7,214,2,215,7,215,2,216,7,216,2,217,7,217,2,218,7,218,2,219,
        7,219,2,220,7,220,2,221,7,221,2,222,7,222,2,223,7,223,2,224,7,224,
        2,225,7,225,2,226,7,226,2,227,7,227,2,228,7,228,2,229,7,229,2,230,
        7,230,2,231,7,231,2,232,7,232,2,233,7,233,2,234,7,234,2,235,7,235,
        2,236,7,236,2,237,7,237,2,238,7,238,2,239,7,239,2,240,7,240,2,241,
        7,241,2,242,7,242,2,243,7,243,2,244,7,244,2,245,7,245,2,246,7,246,
        2,247,7,247,2,248,7,248,2,249,7,249,2,250,7,250,2,251,7,251,1,0,
        3,0,506,8,0,1,0,3,0,509,8,0,1,0,3,0,512,8,0,1,0,3,0,515,8,0,1,0,
        3,0,518,8,0,1,0,3,0,521,8,0,1,0,1,0,1,1,4,1,526,8,1,11,1,12,1,527,
        1,2,1,2,3,2,532,8,2,1,2,3,2,535,8,2,1,2,1,2,1,2,3,2,540,8,2,5,2,
        542,8,2,10,2,12,2,545,9,2,1,3,1,3,1,3,1,3,5,3,551,8,3,10,3,12,3,
        554,9,3,1,4,1,4,1,4,1,4,1,4,3,4,561,8,4,1,5,1,5,1,5,1,5,4,5,567,
        8,5,11,5,12,5,568,1,5,1,5,1,5,3,5,574,8,5,1,6,3,6,577,8,6,1,6,1,
        6,1,7,1,7,1,7,1,7,4,7,585,8,7,11,7,12,7,586,1,7,1,7,1,8,1,8,3,8,
        593,8,8,3,8,595,8,8,1,9,1,9,3,9,599,8,9,1,10,1,10,3,10,603,8,10,
        1,11,1,11,1,11,3,11,608,8,11,1,12,1,12,1,13,1,13,1,14,1,14,3,14,
        616,8,14,1,15,1,15,1,15,1,15,1,15,1,16,1,16,1,17,1,17,1,18,1,18,
        1,18,1,18,3,18,631,8,18,1,19,1,19,1,19,1,19,5,19,637,8,19,10,19,
        12,19,640,9,19,1,19,1,19,1,20,1,20,1,20,5,20,647,8,20,10,20,12,20,
        650,9,20,1,21,3,21,653,8,21,1,21,3,21,656,8,21,1,21,1,21,1,21,3,
        21,661,8,21,1,21,3,21,664,8,21,1,22,1,22,1,22,1,23,1,23,1,23,1,23,
        3,23,673,8,23,1,24,1,24,1,24,3,24,678,8,24,1,25,1,25,1,25,1,25,1,
        25,1,25,1,25,1,25,3,25,688,8,25,1,26,1,26,1,26,1,26,1,26,1,26,1,
        26,1,26,1,26,1,26,1,26,3,26,701,8,26,1,27,1,27,1,27,1,27,1,27,1,
        27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,3,27,718,8,27,1,
        28,1,28,1,28,1,28,3,28,724,8,28,3,28,726,8,28,1,29,1,29,1,29,5,29,
        731,8,29,10,29,12,29,734,9,29,1,30,1,30,1,30,5,30,739,8,30,10,30,
        12,30,742,9,30,1,31,1,31,1,31,5,31,747,8,31,10,31,12,31,750,9,31,
        1,32,1,32,1,32,5,32,755,8,32,10,32,12,32,758,9,32,1,33,1,33,1,33,
        5,33,763,8,33,10,33,12,33,766,9,33,1,34,1,34,1,34,5,34,771,8,34,
        10,34,12,34,774,9,34,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,
        5,35,785,8,35,10,35,12,35,788,9,35,1,36,1,36,1,36,3,36,793,8,36,
        1,36,5,36,796,8,36,10,36,12,36,799,9,36,1,37,1,37,1,37,5,37,804,
        8,37,10,37,12,37,807,9,37,1,38,1,38,1,38,5,38,812,8,38,10,38,12,
        38,815,9,38,1,39,1,39,1,39,1,39,1,39,3,39,822,8,39,3,39,824,8,39,
        1,39,3,39,827,8,39,1,40,1,40,1,40,5,40,832,8,40,10,40,12,40,835,
        9,40,1,41,1,41,3,41,839,8,41,1,41,1,41,1,41,1,42,1,42,3,42,846,8,
        42,1,42,1,42,3,42,850,8,42,3,42,852,8,42,1,43,1,43,1,43,1,43,1,43,
        1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,
        1,43,1,43,1,43,1,43,3,43,876,8,43,1,44,1,44,1,44,1,44,1,44,1,45,
        1,45,3,45,885,8,45,1,45,5,45,888,8,45,10,45,12,45,891,9,45,1,45,
        3,45,894,8,45,1,45,1,45,1,45,1,45,1,45,1,45,3,45,902,8,45,1,45,3,
        45,905,8,45,1,45,5,45,908,8,45,10,45,12,45,911,9,45,1,45,3,45,914,
        8,45,5,45,916,8,45,10,45,12,45,919,9,45,1,45,1,45,1,45,3,45,924,
        8,45,1,46,1,46,1,46,3,46,929,8,46,1,46,1,46,1,46,1,46,1,46,1,46,
        1,46,1,46,1,46,1,46,1,46,1,46,3,46,943,8,46,1,46,1,46,1,46,1,46,
        3,46,949,8,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,5,46,959,8,
        46,10,46,12,46,962,9,46,1,46,3,46,965,8,46,1,46,4,46,968,8,46,11,
        46,12,46,969,1,46,1,46,3,46,974,8,46,1,46,1,46,1,46,1,46,3,46,980,
        8,46,1,46,1,46,1,46,1,46,4,46,986,8,46,11,46,12,46,987,1,46,1,46,
        1,46,1,46,1,46,1,46,1,46,3,46,997,8,46,1,46,1,46,1,46,1,46,1,46,
        1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,3,46,1015,
        8,46,1,46,3,46,1018,8,46,1,46,1,46,1,46,3,46,1023,8,46,1,46,3,46,
        1026,8,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,
        5,46,1039,8,46,10,46,12,46,1042,9,46,1,46,1,46,1,46,3,46,1047,8,
        46,1,47,1,47,3,47,1051,8,47,1,48,1,48,1,48,1,49,3,49,1057,8,49,1,
        49,1,49,1,49,3,49,1062,8,49,1,50,3,50,1065,8,50,1,50,1,50,1,50,1,
        50,5,50,1071,8,50,10,50,12,50,1074,9,50,1,50,1,50,1,51,1,51,1,51,
        3,51,1081,8,51,1,51,1,51,1,52,1,52,1,53,1,53,1,53,5,53,1090,8,53,
        10,53,12,53,1093,9,53,1,54,1,54,3,54,1097,8,54,1,55,1,55,1,55,3,
        55,1102,8,55,3,55,1104,8,55,1,55,1,55,1,56,1,56,1,56,5,56,1111,8,
        56,10,56,12,56,1114,9,56,1,57,1,57,1,57,1,57,1,57,3,57,1121,8,57,
        1,57,1,57,1,57,1,58,1,58,1,58,3,58,1129,8,58,1,59,1,59,1,59,1,59,
        5,59,1135,8,59,10,59,12,59,1138,9,59,1,59,3,59,1141,8,59,1,59,1,
        59,1,60,1,60,1,60,1,60,1,60,3,60,1150,8,60,1,61,1,61,1,61,3,61,1155,
        8,61,3,61,1157,8,61,1,61,1,61,1,62,1,62,1,62,5,62,1164,8,62,10,62,
        12,62,1167,9,62,1,63,1,63,1,63,1,63,1,63,3,63,1174,8,63,1,64,1,64,
        3,64,1178,8,64,1,64,1,64,1,64,3,64,1183,8,64,3,64,1185,8,64,1,64,
        1,64,1,64,3,64,1190,8,64,5,64,1192,8,64,10,64,12,64,1195,9,64,1,
        65,1,65,5,65,1199,8,65,10,65,12,65,1202,9,65,1,65,1,65,1,66,1,66,
        1,66,5,66,1209,8,66,10,66,12,66,1212,9,66,1,66,3,66,1215,8,66,1,
        66,3,66,1218,8,66,1,66,3,66,1221,8,66,1,67,1,67,1,67,1,67,5,67,1227,
        8,67,10,67,12,67,1230,9,67,1,67,1,67,1,68,1,68,1,68,1,68,1,69,3,
        69,1239,8,69,1,69,1,69,1,69,1,69,1,70,1,70,1,70,1,70,1,70,1,70,1,
        70,1,70,1,70,1,70,1,70,3,70,1256,8,70,1,71,1,71,1,71,5,71,1261,8,
        71,10,71,12,71,1264,9,71,1,72,3,72,1267,8,72,1,72,1,72,1,72,1,73,
        1,73,1,73,5,73,1275,8,73,10,73,12,73,1278,9,73,1,74,1,74,3,74,1282,
        8,74,1,75,1,75,1,75,1,76,1,76,3,76,1289,8,76,1,76,1,76,1,76,1,76,
        1,77,5,77,1296,8,77,10,77,12,77,1299,9,77,1,77,1,77,3,77,1303,8,
        77,1,78,1,78,1,78,1,78,1,78,3,78,1310,8,78,1,79,1,79,1,79,1,79,1,
        79,1,80,1,80,1,80,1,81,1,81,3,81,1322,8,81,1,81,1,81,1,81,1,81,1,
        81,1,81,1,81,1,81,1,81,3,81,1333,8,81,1,82,1,82,1,82,1,82,5,82,1339,
        8,82,10,82,12,82,1342,9,82,1,83,1,83,3,83,1346,8,83,1,84,1,84,1,
        84,1,84,1,84,1,84,1,84,3,84,1355,8,84,1,85,1,85,1,85,1,85,1,86,1,
        86,1,86,3,86,1364,8,86,1,87,1,87,1,87,1,87,1,87,1,87,1,87,3,87,1373,
        8,87,1,88,1,88,1,88,1,89,3,89,1379,8,89,1,89,1,89,1,89,3,89,1384,
        8,89,1,89,1,89,3,89,1388,8,89,1,89,1,89,3,89,1392,8,89,1,90,1,90,
        3,90,1396,8,90,1,90,1,90,1,90,1,90,3,90,1402,8,90,1,91,1,91,1,91,
        1,91,1,91,3,91,1409,8,91,1,92,1,92,1,92,1,92,1,93,1,93,1,93,1,93,
        1,93,1,93,1,93,1,93,1,93,1,93,1,93,1,93,5,93,1427,8,93,10,93,12,
        93,1430,9,93,1,93,1,93,1,93,1,93,1,93,1,93,1,93,1,93,1,93,1,93,1,
        93,1,93,1,93,1,93,1,93,1,93,1,93,1,93,1,93,3,93,1451,8,93,1,93,1,
        93,3,93,1455,8,93,1,93,1,93,3,93,1459,8,93,1,93,1,93,1,93,3,93,1464,
        8,93,1,93,1,93,1,93,1,93,1,93,3,93,1471,8,93,1,93,1,93,1,93,1,93,
        1,93,1,93,1,93,1,93,1,93,1,93,1,93,1,93,1,93,1,93,3,93,1487,8,93,
        1,93,1,93,1,93,3,93,1492,8,93,1,93,1,93,1,93,3,93,1497,8,93,1,93,
        1,93,1,93,1,93,1,93,1,93,1,93,1,93,1,93,3,93,1508,8,93,1,94,1,94,
        1,95,1,95,1,95,1,95,1,95,1,95,1,95,1,95,1,95,1,95,1,95,1,95,1,95,
        1,95,3,95,1526,8,95,1,96,1,96,1,96,1,97,1,97,1,97,1,98,1,98,1,98,
        1,98,1,98,1,98,1,99,1,99,3,99,1542,8,99,1,100,1,100,1,100,1,100,
        1,100,1,100,1,100,1,100,3,100,1552,8,100,1,100,1,100,3,100,1556,
        8,100,1,100,1,100,3,100,1560,8,100,1,101,1,101,1,101,1,101,1,102,
        1,102,1,102,5,102,1569,8,102,10,102,12,102,1572,9,102,1,102,3,102,
        1575,8,102,1,103,1,103,1,104,1,104,1,104,1,104,1,104,1,104,1,105,
        1,105,1,105,1,105,1,105,1,105,1,105,1,105,3,105,1593,8,105,1,106,
        1,106,1,106,1,106,1,106,1,106,1,106,1,107,1,107,1,107,1,108,1,108,
        1,108,1,108,1,108,1,108,1,108,3,108,1612,8,108,1,108,1,108,3,108,
        1616,8,108,1,109,1,109,3,109,1620,8,109,1,109,1,109,1,110,1,110,
        1,110,1,110,3,110,1628,8,110,1,110,1,110,1,110,1,110,5,110,1634,
        8,110,10,110,12,110,1637,9,110,1,110,1,110,1,110,1,110,1,110,1,110,
        1,110,1,110,1,110,3,110,1648,8,110,1,111,1,111,3,111,1652,8,111,
        1,112,1,112,1,112,3,112,1657,8,112,1,112,3,112,1660,8,112,1,113,
        1,113,1,113,1,113,3,113,1666,8,113,1,114,1,114,1,114,1,114,1,115,
        4,115,1673,8,115,11,115,12,115,1674,1,115,1,115,1,116,1,116,1,116,
        3,116,1682,8,116,1,116,1,116,1,116,1,116,1,116,3,116,1689,8,116,
        1,116,1,116,1,116,1,116,3,116,1695,8,116,1,117,1,117,1,117,1,118,
        4,118,1701,8,118,11,118,12,118,1702,1,119,1,119,1,119,1,119,5,119,
        1709,8,119,10,119,12,119,1712,9,119,3,119,1714,8,119,1,120,1,120,
        1,120,5,120,1719,8,120,10,120,12,120,1722,9,120,1,121,1,121,5,121,
        1726,8,121,10,121,12,121,1729,9,121,1,121,3,121,1732,8,121,1,121,
        3,121,1735,8,121,1,122,1,122,1,122,1,122,3,122,1741,8,122,1,122,
        1,122,3,122,1745,8,122,1,122,1,122,1,123,1,123,3,123,1751,8,123,
        1,123,1,123,1,124,1,124,1,124,1,124,1,124,1,125,1,125,1,125,1,126,
        1,126,3,126,1765,8,126,1,127,1,127,1,127,1,127,3,127,1771,8,127,
        1,128,1,128,1,128,5,128,1776,8,128,10,128,12,128,1779,9,128,1,129,
        1,129,3,129,1783,8,129,1,129,3,129,1786,8,129,1,129,3,129,1789,8,
        129,1,129,1,129,1,130,4,130,1794,8,130,11,130,12,130,1795,1,131,
        1,131,1,131,1,131,1,131,1,132,4,132,1804,8,132,11,132,12,132,1805,
        1,133,1,133,1,133,1,133,1,133,1,133,1,133,1,133,1,133,1,133,1,133,
        1,133,1,133,1,133,1,133,3,133,1823,8,133,1,134,4,134,1826,8,134,
        11,134,12,134,1827,1,135,1,135,3,135,1832,8,135,1,136,3,136,1835,
        8,136,1,136,3,136,1838,8,136,1,136,1,136,1,136,1,136,1,136,3,136,
        1845,8,136,1,137,1,137,1,137,1,137,3,137,1851,8,137,1,138,1,138,
        1,138,1,138,5,138,1857,8,138,10,138,12,138,1860,9,138,1,138,1,138,
        1,139,3,139,1865,8,139,1,139,1,139,1,140,1,140,1,140,1,140,5,140,
        1873,8,140,10,140,12,140,1876,9,140,1,141,1,141,1,141,5,141,1881,
        8,141,10,141,12,141,1884,9,141,1,142,4,142,1887,8,142,11,142,12,
        142,1888,1,143,1,143,1,143,1,143,1,143,1,144,1,144,1,144,1,144,3,
        144,1900,8,144,1,144,1,144,3,144,1904,8,144,3,144,1906,8,144,1,145,
        1,145,1,145,3,145,1911,8,145,1,145,1,145,3,145,1915,8,145,1,146,
        1,146,1,146,3,146,1920,8,146,1,147,1,147,1,147,1,148,1,148,1,149,
        1,149,1,150,1,150,1,151,1,151,1,151,1,152,1,152,1,153,1,153,1,153,
        5,153,1939,8,153,10,153,12,153,1942,9,153,1,154,1,154,1,154,1,154,
        1,155,1,155,3,155,1950,8,155,1,155,1,155,1,156,4,156,1955,8,156,
        11,156,12,156,1956,1,157,3,157,1960,8,157,1,157,3,157,1963,8,157,
        1,157,1,157,3,157,1967,8,157,1,158,4,158,1970,8,158,11,158,12,158,
        1971,1,159,1,159,1,160,1,160,1,160,1,160,1,160,1,160,1,160,1,160,
        1,160,3,160,1985,8,160,1,160,1,160,1,160,1,160,1,160,1,160,1,160,
        1,160,3,160,1995,8,160,1,161,1,161,1,161,1,161,1,161,3,161,2002,
        8,161,1,161,1,161,1,161,1,161,1,161,1,161,1,161,1,161,1,161,1,161,
        3,161,2014,8,161,1,162,1,162,1,162,5,162,2019,8,162,10,162,12,162,
        2022,9,162,1,163,1,163,1,163,1,163,1,164,1,164,1,164,5,164,2031,
        8,164,10,164,12,164,2034,9,164,1,165,1,165,1,165,3,165,2039,8,165,
        1,166,1,166,3,166,2043,8,166,1,167,1,167,3,167,2047,8,167,1,168,
        1,168,1,169,1,169,1,169,1,169,1,169,1,169,3,169,2057,8,169,1,170,
        1,170,1,170,1,170,3,170,2063,8,170,3,170,2065,8,170,1,171,1,171,
        1,171,5,171,2070,8,171,10,171,12,171,2073,9,171,1,172,3,172,2076,
        8,172,1,172,3,172,2079,8,172,1,172,1,172,3,172,2083,8,172,1,173,
        1,173,1,173,1,173,1,173,1,173,1,173,1,173,3,173,2093,8,173,1,174,
        3,174,2096,8,174,1,174,1,174,1,174,1,174,1,175,3,175,2103,8,175,
        1,175,3,175,2106,8,175,1,175,1,175,1,175,3,175,2111,8,175,1,175,
        1,175,1,175,3,175,2116,8,175,3,175,2118,8,175,1,176,3,176,2121,8,
        176,1,176,3,176,2124,8,176,1,176,1,176,1,176,1,177,3,177,2130,8,
        177,1,177,3,177,2133,8,177,1,177,1,177,1,177,1,178,1,178,1,178,1,
        178,1,178,1,178,1,178,1,178,1,178,1,178,1,178,3,178,2149,8,178,1,
        179,1,179,1,179,1,179,1,179,1,179,3,179,2157,8,179,1,180,3,180,2160,
        8,180,1,180,1,180,1,180,1,180,1,180,1,180,1,180,1,180,3,180,2170,
        8,180,1,181,3,181,2173,8,181,1,181,1,181,1,181,1,182,3,182,2179,
        8,182,1,182,1,182,1,182,1,183,1,183,1,183,1,183,1,183,1,183,1,183,
        1,183,1,183,1,183,1,183,1,183,1,183,1,183,1,183,1,183,1,183,1,183,
        1,183,1,183,1,183,1,183,3,183,2206,8,183,1,184,1,184,1,184,1,184,
        1,184,1,184,1,184,1,185,1,185,1,185,1,185,3,185,2219,8,185,1,185,
        1,185,1,186,1,186,1,186,1,186,1,186,1,186,3,186,2229,8,186,1,187,
        1,187,1,187,1,188,1,188,5,188,2236,8,188,10,188,12,188,2239,9,188,
        1,188,1,188,1,189,3,189,2244,8,189,1,189,3,189,2247,8,189,1,189,
        1,189,1,189,1,189,4,189,2253,8,189,11,189,12,189,2254,1,189,1,189,
        3,189,2259,8,189,1,190,1,190,5,190,2263,8,190,10,190,12,190,2266,
        9,190,1,190,4,190,2269,8,190,11,190,12,190,2270,1,191,1,191,5,191,
        2275,8,191,10,191,12,191,2278,9,191,1,191,1,191,1,192,1,192,1,192,
        1,192,5,192,2286,8,192,10,192,12,192,2289,9,192,1,192,3,192,2292,
        8,192,3,192,2294,8,192,1,192,1,192,1,193,1,193,1,193,1,193,5,193,
        2302,8,193,10,193,12,193,2305,9,193,1,193,1,193,1,194,3,194,2310,
        8,194,1,194,3,194,2313,8,194,1,194,1,194,1,195,1,195,1,196,1,196,
        1,196,1,197,1,197,5,197,2324,8,197,10,197,12,197,2327,9,197,1,197,
        1,197,1,198,3,198,2332,8,198,1,198,3,198,2335,8,198,1,198,3,198,
        2338,8,198,1,198,1,198,1,198,1,198,1,198,3,198,2345,8,198,1,198,
        1,198,1,198,3,198,2350,8,198,1,198,1,198,3,198,2354,8,198,1,198,
        1,198,3,198,2358,8,198,1,198,1,198,1,198,1,198,1,198,1,198,1,198,
        1,198,1,198,1,198,1,198,1,198,1,198,1,198,1,198,3,198,2375,8,198,
        1,198,3,198,2378,8,198,1,198,1,198,1,198,3,198,2383,8,198,1,198,
        1,198,3,198,2387,8,198,1,198,1,198,3,198,2391,8,198,1,198,1,198,
        1,198,1,198,1,198,1,198,1,198,3,198,2400,8,198,1,199,3,199,2403,
        8,199,1,199,1,199,1,199,3,199,2408,8,199,1,199,1,199,3,199,2412,
        8,199,1,199,1,199,1,199,3,199,2417,8,199,1,199,1,199,3,199,2421,
        8,199,3,199,2423,8,199,1,200,1,200,1,200,1,201,1,201,1,201,1,201,
        5,201,2432,8,201,10,201,12,201,2435,9,201,1,201,3,201,2438,8,201,
        3,201,2440,8,201,1,201,1,201,1,202,3,202,2445,8,202,1,202,1,202,
        1,202,3,202,2450,8,202,1,203,1,203,1,203,1,203,1,203,3,203,2457,
        8,203,1,203,1,203,1,204,1,204,3,204,2463,8,204,1,205,4,205,2466,
        8,205,11,205,12,205,2467,1,206,1,206,1,206,1,206,3,206,2474,8,206,
        1,206,1,206,3,206,2478,8,206,1,206,1,206,1,207,1,207,3,207,2484,
        8,207,1,208,1,208,1,208,5,208,2489,8,208,10,208,12,208,2492,9,208,
        1,209,1,209,1,209,1,209,1,209,5,209,2499,8,209,10,209,12,209,2502,
        9,209,3,209,2504,8,209,1,209,3,209,2507,8,209,1,210,1,210,1,210,
        3,210,2512,8,210,1,210,1,210,1,211,1,211,3,211,2518,8,211,1,211,
        1,211,5,211,2522,8,211,10,211,12,211,2525,9,211,1,211,1,211,1,211,
        1,211,3,211,2531,8,211,1,212,1,212,1,212,5,212,2536,8,212,10,212,
        12,212,2539,9,212,1,213,1,213,1,213,1,213,1,214,3,214,2546,8,214,
        1,214,1,214,3,214,2550,8,214,1,215,1,215,1,215,1,215,1,215,1,216,
        1,216,1,216,1,216,1,217,1,217,1,217,1,217,1,218,1,218,1,218,1,218,
        1,219,1,219,1,219,1,219,1,219,1,219,1,219,1,219,3,219,2577,8,219,
        1,220,1,220,1,221,1,221,1,221,1,221,3,221,2585,8,221,1,222,1,222,
        5,222,2589,8,222,10,222,12,222,2592,9,222,1,222,1,222,1,223,1,223,
        5,223,2598,8,223,10,223,12,223,2601,9,223,1,223,1,223,1,224,1,224,
        1,224,1,224,1,224,1,224,1,224,1,224,3,224,2613,8,224,1,225,1,225,
        1,225,1,225,3,225,2619,8,225,1,226,1,226,1,226,1,226,3,226,2625,
        8,226,1,226,3,226,2628,8,226,1,226,1,226,1,227,1,227,1,228,1,228,
        4,228,2636,8,228,11,228,12,228,2637,1,229,1,229,1,230,1,230,1,231,
        5,231,2645,8,231,10,231,12,231,2648,9,231,1,231,3,231,2651,8,231,
        1,231,1,231,1,231,3,231,2656,8,231,1,231,3,231,2659,8,231,1,231,
        3,231,2662,8,231,1,231,1,231,3,231,2666,8,231,1,232,1,232,1,233,
        5,233,2671,8,233,10,233,12,233,2674,9,233,1,233,3,233,2677,8,233,
        1,233,3,233,2680,8,233,1,233,1,233,1,233,3,233,2685,8,233,1,233,
        3,233,2688,8,233,1,233,3,233,2691,8,233,1,233,1,233,3,233,2695,8,
        233,1,234,1,234,1,235,1,235,1,235,3,235,2702,8,235,1,235,3,235,2705,
        8,235,1,235,3,235,2708,8,235,1,235,1,235,3,235,2712,8,235,1,236,
        1,236,1,236,3,236,2717,8,236,1,236,1,236,3,236,2721,8,236,1,237,
        1,237,1,237,1,237,3,237,2727,8,237,1,237,1,237,3,237,2731,8,237,
        1,237,1,237,3,237,2735,8,237,1,237,1,237,1,238,1,238,1,238,1,238,
        1,238,1,238,1,238,1,238,1,238,1,238,3,238,2749,8,238,1,239,1,239,
        1,239,1,240,1,240,1,240,1,240,1,240,1,240,1,240,1,240,3,240,2762,
        8,240,1,240,1,240,1,240,1,240,3,240,2768,8,240,1,241,1,241,1,241,
        1,241,1,241,1,242,1,242,1,242,1,242,1,242,1,242,1,242,1,242,1,242,
        1,242,1,242,1,242,3,242,2787,8,242,1,243,1,243,1,243,1,243,1,243,
        1,243,1,244,1,244,1,244,3,244,2798,8,244,1,244,1,244,3,244,2802,
        8,244,1,244,1,244,1,245,1,245,3,245,2808,8,245,1,245,1,245,3,245,
        2812,8,245,1,245,1,245,3,245,2816,8,245,1,245,1,245,1,245,1,245,
        1,245,3,245,2823,8,245,1,246,1,246,1,246,1,246,1,246,3,246,2830,
        8,246,1,246,3,246,2833,8,246,1,246,1,246,5,246,2837,8,246,10,246,
        12,246,2840,9,246,1,247,1,247,1,247,1,247,3,247,2846,8,247,1,247,
        1,247,1,247,3,247,2851,8,247,1,247,3,247,2854,8,247,1,247,1,247,
        1,247,1,247,1,247,1,247,3,247,2862,8,247,1,248,1,248,1,248,1,248,
        3,248,2868,8,248,1,249,1,249,3,249,2872,8,249,1,249,1,249,1,250,
        1,250,3,250,2878,8,250,1,250,1,250,3,250,2882,8,250,1,251,1,251,
        1,251,0,0,252,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,
        38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,
        82,84,86,88,90,92,94,96,98,100,102,104,106,108,110,112,114,116,118,
        120,122,124,126,128,130,132,134,136,138,140,142,144,146,148,150,
        152,154,156,158,160,162,164,166,168,170,172,174,176,178,180,182,
        184,186,188,190,192,194,196,198,200,202,204,206,208,210,212,214,
        216,218,220,222,224,226,228,230,232,234,236,238,240,242,244,246,
        248,250,252,254,256,258,260,262,264,266,268,270,272,274,276,278,
        280,282,284,286,288,290,292,294,296,298,300,302,304,306,308,310,
        312,314,316,318,320,322,324,326,328,330,332,334,336,338,340,342,
        344,346,348,350,352,354,356,358,360,362,364,366,368,370,372,374,
        376,378,380,382,384,386,388,390,392,394,396,398,400,402,404,406,
        408,410,412,414,416,418,420,422,424,426,428,430,432,434,436,438,
        440,442,444,446,448,450,452,454,456,458,460,462,464,466,468,470,
        472,474,476,478,480,482,484,486,488,490,492,494,496,498,500,502,
        0,20,8,0,21,21,24,24,55,55,63,63,83,83,87,87,99,100,104,104,2,0,
        34,34,45,45,3,0,54,54,72,72,80,80,1,0,156,157,2,0,146,147,158,159,
        1,0,135,136,1,0,137,139,14,0,18,18,21,21,24,24,29,29,34,34,45,45,
        55,55,63,63,68,68,83,83,87,87,91,91,99,100,104,104,2,0,14,14,32,
        32,2,0,15,15,103,103,12,0,9,9,15,15,41,41,57,57,66,66,73,73,75,79,
        84,84,90,90,103,103,107,107,109,109,2,0,40,40,53,53,2,0,17,17,94,
        94,2,0,137,137,148,148,2,0,54,54,72,72,2,0,42,42,96,96,19,0,9,9,
        13,13,17,19,21,31,33,34,36,37,39,47,50,50,52,57,59,59,62,63,65,68,
        70,70,72,74,76,80,82,84,87,105,107,109,112,112,7,0,9,9,57,57,66,
        66,76,78,84,84,90,90,103,103,4,0,57,57,66,66,76,79,103,103,20,0,
        10,12,14,16,20,20,32,32,35,35,38,38,48,49,51,51,58,58,60,61,64,64,
        69,69,71,71,75,75,81,81,85,86,102,102,106,106,110,111,113,114,3158,
        0,505,1,0,0,0,2,525,1,0,0,0,4,534,1,0,0,0,6,546,1,0,0,0,8,560,1,
        0,0,0,10,573,1,0,0,0,12,576,1,0,0,0,14,580,1,0,0,0,16,594,1,0,0,
        0,18,596,1,0,0,0,20,602,1,0,0,0,22,607,1,0,0,0,24,609,1,0,0,0,26,
        611,1,0,0,0,28,615,1,0,0,0,30,617,1,0,0,0,32,622,1,0,0,0,34,624,
        1,0,0,0,36,630,1,0,0,0,38,632,1,0,0,0,40,643,1,0,0,0,42,652,1,0,
        0,0,44,665,1,0,0,0,46,672,1,0,0,0,48,677,1,0,0,0,50,687,1,0,0,0,
        52,700,1,0,0,0,54,717,1,0,0,0,56,719,1,0,0,0,58,727,1,0,0,0,60,735,
        1,0,0,0,62,743,1,0,0,0,64,751,1,0,0,0,66,759,1,0,0,0,68,767,1,0,
        0,0,70,775,1,0,0,0,72,789,1,0,0,0,74,800,1,0,0,0,76,808,1,0,0,0,
        78,816,1,0,0,0,80,828,1,0,0,0,82,836,1,0,0,0,84,851,1,0,0,0,86,875,
        1,0,0,0,88,877,1,0,0,0,90,923,1,0,0,0,92,1046,1,0,0,0,94,1050,1,
        0,0,0,96,1052,1,0,0,0,98,1056,1,0,0,0,100,1064,1,0,0,0,102,1080,
        1,0,0,0,104,1084,1,0,0,0,106,1086,1,0,0,0,108,1096,1,0,0,0,110,1098,
        1,0,0,0,112,1107,1,0,0,0,114,1120,1,0,0,0,116,1128,1,0,0,0,118,1130,
        1,0,0,0,120,1149,1,0,0,0,122,1151,1,0,0,0,124,1160,1,0,0,0,126,1173,
        1,0,0,0,128,1175,1,0,0,0,130,1196,1,0,0,0,132,1205,1,0,0,0,134,1222,
        1,0,0,0,136,1233,1,0,0,0,138,1238,1,0,0,0,140,1255,1,0,0,0,142,1257,
        1,0,0,0,144,1266,1,0,0,0,146,1271,1,0,0,0,148,1281,1,0,0,0,150,1283,
        1,0,0,0,152,1286,1,0,0,0,154,1297,1,0,0,0,156,1309,1,0,0,0,158,1311,
        1,0,0,0,160,1316,1,0,0,0,162,1319,1,0,0,0,164,1334,1,0,0,0,166,1343,
        1,0,0,0,168,1354,1,0,0,0,170,1356,1,0,0,0,172,1363,1,0,0,0,174,1372,
        1,0,0,0,176,1374,1,0,0,0,178,1378,1,0,0,0,180,1401,1,0,0,0,182,1408,
        1,0,0,0,184,1410,1,0,0,0,186,1507,1,0,0,0,188,1509,1,0,0,0,190,1525,
        1,0,0,0,192,1527,1,0,0,0,194,1530,1,0,0,0,196,1533,1,0,0,0,198,1541,
        1,0,0,0,200,1559,1,0,0,0,202,1561,1,0,0,0,204,1565,1,0,0,0,206,1576,
        1,0,0,0,208,1578,1,0,0,0,210,1592,1,0,0,0,212,1594,1,0,0,0,214,1601,
        1,0,0,0,216,1615,1,0,0,0,218,1617,1,0,0,0,220,1647,1,0,0,0,222,1651,
        1,0,0,0,224,1653,1,0,0,0,226,1665,1,0,0,0,228,1667,1,0,0,0,230,1672,
        1,0,0,0,232,1694,1,0,0,0,234,1696,1,0,0,0,236,1700,1,0,0,0,238,1713,
        1,0,0,0,240,1715,1,0,0,0,242,1734,1,0,0,0,244,1736,1,0,0,0,246,1748,
        1,0,0,0,248,1754,1,0,0,0,250,1759,1,0,0,0,252,1764,1,0,0,0,254,1766,
        1,0,0,0,256,1772,1,0,0,0,258,1780,1,0,0,0,260,1793,1,0,0,0,262,1797,
        1,0,0,0,264,1803,1,0,0,0,266,1822,1,0,0,0,268,1825,1,0,0,0,270,1831,
        1,0,0,0,272,1834,1,0,0,0,274,1846,1,0,0,0,276,1852,1,0,0,0,278,1864,
        1,0,0,0,280,1868,1,0,0,0,282,1877,1,0,0,0,284,1886,1,0,0,0,286,1890,
        1,0,0,0,288,1905,1,0,0,0,290,1914,1,0,0,0,292,1919,1,0,0,0,294,1921,
        1,0,0,0,296,1924,1,0,0,0,298,1926,1,0,0,0,300,1928,1,0,0,0,302,1930,
        1,0,0,0,304,1933,1,0,0,0,306,1935,1,0,0,0,308,1943,1,0,0,0,310,1947,
        1,0,0,0,312,1954,1,0,0,0,314,1959,1,0,0,0,316,1969,1,0,0,0,318,1973,
        1,0,0,0,320,1994,1,0,0,0,322,2001,1,0,0,0,324,2015,1,0,0,0,326,2023,
        1,0,0,0,328,2027,1,0,0,0,330,2035,1,0,0,0,332,2042,1,0,0,0,334,2046,
        1,0,0,0,336,2048,1,0,0,0,338,2056,1,0,0,0,340,2064,1,0,0,0,342,2066,
        1,0,0,0,344,2082,1,0,0,0,346,2092,1,0,0,0,348,2095,1,0,0,0,350,2102,
        1,0,0,0,352,2120,1,0,0,0,354,2129,1,0,0,0,356,2148,1,0,0,0,358,2156,
        1,0,0,0,360,2159,1,0,0,0,362,2172,1,0,0,0,364,2178,1,0,0,0,366,2205,
        1,0,0,0,368,2207,1,0,0,0,370,2214,1,0,0,0,372,2228,1,0,0,0,374,2230,
        1,0,0,0,376,2233,1,0,0,0,378,2243,1,0,0,0,380,2260,1,0,0,0,382,2272,
        1,0,0,0,384,2281,1,0,0,0,386,2297,1,0,0,0,388,2309,1,0,0,0,390,2316,
        1,0,0,0,392,2318,1,0,0,0,394,2321,1,0,0,0,396,2331,1,0,0,0,398,2402,
        1,0,0,0,400,2424,1,0,0,0,402,2427,1,0,0,0,404,2444,1,0,0,0,406,2451,
        1,0,0,0,408,2462,1,0,0,0,410,2465,1,0,0,0,412,2469,1,0,0,0,414,2483,
        1,0,0,0,416,2485,1,0,0,0,418,2493,1,0,0,0,420,2511,1,0,0,0,422,2530,
        1,0,0,0,424,2532,1,0,0,0,426,2540,1,0,0,0,428,2549,1,0,0,0,430,2551,
        1,0,0,0,432,2556,1,0,0,0,434,2560,1,0,0,0,436,2564,1,0,0,0,438,2576,
        1,0,0,0,440,2578,1,0,0,0,442,2584,1,0,0,0,444,2586,1,0,0,0,446,2595,
        1,0,0,0,448,2612,1,0,0,0,450,2618,1,0,0,0,452,2620,1,0,0,0,454,2631,
        1,0,0,0,456,2633,1,0,0,0,458,2639,1,0,0,0,460,2641,1,0,0,0,462,2646,
        1,0,0,0,464,2667,1,0,0,0,466,2672,1,0,0,0,468,2696,1,0,0,0,470,2698,
        1,0,0,0,472,2713,1,0,0,0,474,2722,1,0,0,0,476,2738,1,0,0,0,478,2750,
        1,0,0,0,480,2753,1,0,0,0,482,2769,1,0,0,0,484,2774,1,0,0,0,486,2788,
        1,0,0,0,488,2794,1,0,0,0,490,2805,1,0,0,0,492,2829,1,0,0,0,494,2841,
        1,0,0,0,496,2863,1,0,0,0,498,2869,1,0,0,0,500,2875,1,0,0,0,502,2883,
        1,0,0,0,504,506,5,1,0,0,505,504,1,0,0,0,505,506,1,0,0,0,506,508,
        1,0,0,0,507,509,3,260,130,0,508,507,1,0,0,0,508,509,1,0,0,0,509,
        511,1,0,0,0,510,512,3,264,132,0,511,510,1,0,0,0,511,512,1,0,0,0,
        512,514,1,0,0,0,513,515,3,406,203,0,514,513,1,0,0,0,514,515,1,0,
        0,0,515,517,1,0,0,0,516,518,3,268,134,0,517,516,1,0,0,0,517,518,
        1,0,0,0,518,520,1,0,0,0,519,521,3,2,1,0,520,519,1,0,0,0,520,521,
        1,0,0,0,521,522,1,0,0,0,522,523,5,0,0,1,523,1,1,0,0,0,524,526,3,
        172,86,0,525,524,1,0,0,0,526,527,1,0,0,0,527,525,1,0,0,0,527,528,
        1,0,0,0,528,3,1,0,0,0,529,531,3,502,251,0,530,532,3,38,19,0,531,
        530,1,0,0,0,531,532,1,0,0,0,532,535,1,0,0,0,533,535,3,274,137,0,
        534,529,1,0,0,0,534,533,1,0,0,0,535,543,1,0,0,0,536,537,5,131,0,
        0,537,539,3,502,251,0,538,540,3,38,19,0,539,538,1,0,0,0,539,540,
        1,0,0,0,540,542,1,0,0,0,541,536,1,0,0,0,542,545,1,0,0,0,543,541,
        1,0,0,0,543,544,1,0,0,0,544,5,1,0,0,0,545,543,1,0,0,0,546,552,3,
        8,4,0,547,551,5,148,0,0,548,551,3,382,191,0,549,551,5,137,0,0,550,
        547,1,0,0,0,550,548,1,0,0,0,550,549,1,0,0,0,551,554,1,0,0,0,552,
        550,1,0,0,0,552,553,1,0,0,0,553,7,1,0,0,0,554,552,1,0,0,0,555,561,
        3,20,10,0,556,561,3,36,18,0,557,558,5,108,0,0,558,561,5,137,0,0,
        559,561,3,10,5,0,560,555,1,0,0,0,560,556,1,0,0,0,560,557,1,0,0,0,
        560,559,1,0,0,0,561,9,1,0,0,0,562,563,5,129,0,0,563,566,3,18,9,0,
        564,565,5,132,0,0,565,567,3,18,9,0,566,564,1,0,0,0,567,568,1,0,0,
        0,568,566,1,0,0,0,568,569,1,0,0,0,569,570,1,0,0,0,570,571,5,130,
        0,0,571,574,1,0,0,0,572,574,3,12,6,0,573,562,1,0,0,0,573,572,1,0,
        0,0,574,11,1,0,0,0,575,577,5,106,0,0,576,575,1,0,0,0,576,577,1,0,
        0,0,577,578,1,0,0,0,578,579,3,14,7,0,579,13,1,0,0,0,580,581,5,129,
        0,0,581,584,3,16,8,0,582,583,5,132,0,0,583,585,3,16,8,0,584,582,
        1,0,0,0,585,586,1,0,0,0,586,584,1,0,0,0,586,587,1,0,0,0,587,588,
        1,0,0,0,588,589,5,130,0,0,589,15,1,0,0,0,590,595,3,14,7,0,591,593,
        3,502,251,0,592,591,1,0,0,0,592,593,1,0,0,0,593,595,1,0,0,0,594,
        590,1,0,0,0,594,592,1,0,0,0,595,17,1,0,0,0,596,598,3,6,3,0,597,599,
        3,502,251,0,598,597,1,0,0,0,598,599,1,0,0,0,599,19,1,0,0,0,600,603,
        3,22,11,0,601,603,5,18,0,0,602,600,1,0,0,0,602,601,1,0,0,0,603,21,
        1,0,0,0,604,608,3,24,12,0,605,608,3,26,13,0,606,608,5,29,0,0,607,
        604,1,0,0,0,607,605,1,0,0,0,607,606,1,0,0,0,608,23,1,0,0,0,609,610,
        7,0,0,0,610,25,1,0,0,0,611,612,7,1,0,0,612,27,1,0,0,0,613,616,3,
        30,15,0,614,616,3,32,16,0,615,613,1,0,0,0,615,614,1,0,0,0,616,29,
        1,0,0,0,617,618,5,30,0,0,618,619,5,129,0,0,619,620,3,6,3,0,620,621,
        5,130,0,0,621,31,1,0,0,0,622,623,5,30,0,0,623,33,1,0,0,0,624,625,
        3,46,23,0,625,35,1,0,0,0,626,631,3,4,2,0,627,631,5,68,0,0,628,631,
        5,35,0,0,629,631,5,91,0,0,630,626,1,0,0,0,630,627,1,0,0,0,630,628,
        1,0,0,0,630,629,1,0,0,0,631,37,1,0,0,0,632,633,5,146,0,0,633,638,
        3,6,3,0,634,635,5,132,0,0,635,637,3,6,3,0,636,634,1,0,0,0,637,640,
        1,0,0,0,638,636,1,0,0,0,638,639,1,0,0,0,639,641,1,0,0,0,640,638,
        1,0,0,0,641,642,5,147,0,0,642,39,1,0,0,0,643,648,3,42,21,0,644,645,
        5,132,0,0,645,647,3,42,21,0,646,644,1,0,0,0,647,650,1,0,0,0,648,
        646,1,0,0,0,648,649,1,0,0,0,649,41,1,0,0,0,650,648,1,0,0,0,651,653,
        3,44,22,0,652,651,1,0,0,0,652,653,1,0,0,0,653,655,1,0,0,0,654,656,
        7,2,0,0,655,654,1,0,0,0,655,656,1,0,0,0,656,663,1,0,0,0,657,664,
        3,46,23,0,658,661,5,106,0,0,659,661,3,6,3,0,660,658,1,0,0,0,660,
        659,1,0,0,0,661,662,1,0,0,0,662,664,3,46,23,0,663,657,1,0,0,0,663,
        660,1,0,0,0,664,43,1,0,0,0,665,666,3,502,251,0,666,667,5,133,0,0,
        667,45,1,0,0,0,668,673,3,50,25,0,669,673,3,48,24,0,670,671,5,80,
        0,0,671,673,3,48,24,0,672,668,1,0,0,0,672,669,1,0,0,0,672,670,1,
        0,0,0,673,47,1,0,0,0,674,678,3,138,69,0,675,678,3,150,75,0,676,678,
        3,54,27,0,677,674,1,0,0,0,677,675,1,0,0,0,677,676,1,0,0,0,678,49,
        1,0,0,0,679,680,3,86,43,0,680,681,3,52,26,0,681,682,3,46,23,0,682,
        688,1,0,0,0,683,684,3,86,43,0,684,685,5,170,0,0,685,686,3,94,47,
        0,686,688,1,0,0,0,687,679,1,0,0,0,687,683,1,0,0,0,688,51,1,0,0,0,
        689,701,5,145,0,0,690,701,5,160,0,0,691,701,5,161,0,0,692,701,5,
        162,0,0,693,701,5,163,0,0,694,701,5,164,0,0,695,701,5,165,0,0,696,
        701,5,166,0,0,697,701,5,167,0,0,698,701,5,169,0,0,699,701,3,436,
        218,0,700,689,1,0,0,0,700,690,1,0,0,0,700,691,1,0,0,0,700,692,1,
        0,0,0,700,693,1,0,0,0,700,694,1,0,0,0,700,695,1,0,0,0,700,696,1,
        0,0,0,700,697,1,0,0,0,700,698,1,0,0,0,700,699,1,0,0,0,701,53,1,0,
        0,0,702,718,3,56,28,0,703,704,3,56,28,0,704,705,5,148,0,0,705,706,
        3,46,23,0,706,707,5,133,0,0,707,708,3,46,23,0,708,718,1,0,0,0,709,
        710,3,56,28,0,710,711,5,148,0,0,711,712,5,80,0,0,712,713,3,34,17,
        0,713,714,5,133,0,0,714,715,5,80,0,0,715,716,3,34,17,0,716,718,1,
        0,0,0,717,702,1,0,0,0,717,703,1,0,0,0,717,709,1,0,0,0,718,55,1,0,
        0,0,719,725,3,58,29,0,720,723,5,150,0,0,721,724,3,56,28,0,722,724,
        3,96,48,0,723,721,1,0,0,0,723,722,1,0,0,0,724,726,1,0,0,0,725,720,
        1,0,0,0,725,726,1,0,0,0,726,57,1,0,0,0,727,732,3,60,30,0,728,729,
        5,154,0,0,729,731,3,60,30,0,730,728,1,0,0,0,731,734,1,0,0,0,732,
        730,1,0,0,0,732,733,1,0,0,0,733,59,1,0,0,0,734,732,1,0,0,0,735,740,
        3,62,31,0,736,737,5,153,0,0,737,739,3,62,31,0,738,736,1,0,0,0,739,
        742,1,0,0,0,740,738,1,0,0,0,740,741,1,0,0,0,741,61,1,0,0,0,742,740,
        1,0,0,0,743,748,3,64,32,0,744,745,5,141,0,0,745,747,3,64,32,0,746,
        744,1,0,0,0,747,750,1,0,0,0,748,746,1,0,0,0,748,749,1,0,0,0,749,
        63,1,0,0,0,750,748,1,0,0,0,751,756,3,66,33,0,752,753,5,142,0,0,753,
        755,3,66,33,0,754,752,1,0,0,0,755,758,1,0,0,0,756,754,1,0,0,0,756,
        757,1,0,0,0,757,65,1,0,0,0,758,756,1,0,0,0,759,764,3,68,34,0,760,
        761,5,140,0,0,761,763,3,68,34,0,762,760,1,0,0,0,763,766,1,0,0,0,
        764,762,1,0,0,0,764,765,1,0,0,0,765,67,1,0,0,0,766,764,1,0,0,0,767,
        772,3,70,35,0,768,769,7,3,0,0,769,771,3,70,35,0,770,768,1,0,0,0,
        771,774,1,0,0,0,772,770,1,0,0,0,772,773,1,0,0,0,773,69,1,0,0,0,774,
        772,1,0,0,0,775,786,3,72,36,0,776,777,7,4,0,0,777,785,3,72,36,0,
        778,779,5,59,0,0,779,785,3,132,66,0,780,781,5,13,0,0,781,785,3,6,
        3,0,782,783,5,59,0,0,783,785,3,292,146,0,784,776,1,0,0,0,784,778,
        1,0,0,0,784,780,1,0,0,0,784,782,1,0,0,0,785,788,1,0,0,0,786,784,
        1,0,0,0,786,787,1,0,0,0,787,71,1,0,0,0,788,786,1,0,0,0,789,797,3,
        74,37,0,790,793,5,168,0,0,791,793,3,434,217,0,792,790,1,0,0,0,792,
        791,1,0,0,0,793,794,1,0,0,0,794,796,3,74,37,0,795,792,1,0,0,0,796,
        799,1,0,0,0,797,795,1,0,0,0,797,798,1,0,0,0,798,73,1,0,0,0,799,797,
        1,0,0,0,800,805,3,76,38,0,801,802,7,5,0,0,802,804,3,76,38,0,803,
        801,1,0,0,0,804,807,1,0,0,0,805,803,1,0,0,0,805,806,1,0,0,0,806,
        75,1,0,0,0,807,805,1,0,0,0,808,813,3,78,39,0,809,810,7,6,0,0,810,
        812,3,78,39,0,811,809,1,0,0,0,812,815,1,0,0,0,813,811,1,0,0,0,813,
        814,1,0,0,0,814,77,1,0,0,0,815,813,1,0,0,0,816,826,3,84,42,0,817,
        818,5,93,0,0,818,823,5,125,0,0,819,821,3,80,40,0,820,822,5,132,0,
        0,821,820,1,0,0,0,821,822,1,0,0,0,822,824,1,0,0,0,823,819,1,0,0,
        0,823,824,1,0,0,0,824,825,1,0,0,0,825,827,5,126,0,0,826,817,1,0,
        0,0,826,827,1,0,0,0,827,79,1,0,0,0,828,833,3,82,41,0,829,830,5,132,
        0,0,830,832,3,82,41,0,831,829,1,0,0,0,832,835,1,0,0,0,833,831,1,
        0,0,0,833,834,1,0,0,0,834,81,1,0,0,0,835,833,1,0,0,0,836,838,3,46,
        23,0,837,839,3,234,117,0,838,837,1,0,0,0,838,839,1,0,0,0,839,840,
        1,0,0,0,840,841,3,432,216,0,841,842,3,94,47,0,842,83,1,0,0,0,843,
        852,3,86,43,0,844,846,3,86,43,0,845,844,1,0,0,0,845,846,1,0,0,0,
        846,847,1,0,0,0,847,849,5,171,0,0,848,850,3,86,43,0,849,848,1,0,
        0,0,849,850,1,0,0,0,850,852,1,0,0,0,851,843,1,0,0,0,851,845,1,0,
        0,0,852,85,1,0,0,0,853,876,3,88,44,0,854,876,3,90,45,0,855,856,5,
        135,0,0,856,876,3,86,43,0,857,858,5,136,0,0,858,876,3,86,43,0,859,
        860,5,143,0,0,860,876,3,86,43,0,861,862,5,144,0,0,862,876,3,86,43,
        0,863,864,5,151,0,0,864,876,3,86,43,0,865,866,5,152,0,0,866,876,
        3,86,43,0,867,868,5,16,0,0,868,876,3,86,43,0,869,870,5,140,0,0,870,
        876,3,86,43,0,871,872,5,137,0,0,872,876,3,86,43,0,873,874,5,142,
        0,0,874,876,3,86,43,0,875,853,1,0,0,0,875,854,1,0,0,0,875,855,1,
        0,0,0,875,857,1,0,0,0,875,859,1,0,0,0,875,861,1,0,0,0,875,863,1,
        0,0,0,875,865,1,0,0,0,875,867,1,0,0,0,875,869,1,0,0,0,875,871,1,
        0,0,0,875,873,1,0,0,0,876,87,1,0,0,0,877,878,5,129,0,0,878,879,3,
        6,3,0,879,880,5,130,0,0,880,881,3,86,43,0,881,89,1,0,0,0,882,884,
        3,92,46,0,883,885,5,143,0,0,884,883,1,0,0,0,884,885,1,0,0,0,885,
        889,1,0,0,0,886,888,3,100,50,0,887,886,1,0,0,0,888,891,1,0,0,0,889,
        887,1,0,0,0,889,890,1,0,0,0,890,893,1,0,0,0,891,889,1,0,0,0,892,
        894,5,143,0,0,893,892,1,0,0,0,893,894,1,0,0,0,894,917,1,0,0,0,895,
        902,3,98,49,0,896,902,3,498,249,0,897,902,5,151,0,0,898,902,5,152,
        0,0,899,900,5,155,0,0,900,902,3,502,251,0,901,895,1,0,0,0,901,896,
        1,0,0,0,901,897,1,0,0,0,901,898,1,0,0,0,901,899,1,0,0,0,902,904,
        1,0,0,0,903,905,5,143,0,0,904,903,1,0,0,0,904,905,1,0,0,0,905,909,
        1,0,0,0,906,908,3,100,50,0,907,906,1,0,0,0,908,911,1,0,0,0,909,907,
        1,0,0,0,909,910,1,0,0,0,910,913,1,0,0,0,911,909,1,0,0,0,912,914,
        5,143,0,0,913,912,1,0,0,0,913,914,1,0,0,0,914,916,1,0,0,0,915,901,
        1,0,0,0,916,919,1,0,0,0,917,915,1,0,0,0,917,918,1,0,0,0,918,924,
        1,0,0,0,919,917,1,0,0,0,920,924,3,10,5,0,921,924,3,28,14,0,922,924,
        3,200,100,0,923,882,1,0,0,0,923,920,1,0,0,0,923,921,1,0,0,0,923,
        922,1,0,0,0,924,91,1,0,0,0,925,1047,3,438,219,0,926,928,3,502,251,
        0,927,929,3,38,19,0,928,927,1,0,0,0,928,929,1,0,0,0,929,1047,1,0,
        0,0,930,931,5,129,0,0,931,932,3,46,23,0,932,933,5,130,0,0,933,1047,
        1,0,0,0,934,1047,3,104,52,0,935,1047,3,274,137,0,936,1047,5,115,
        0,0,937,1047,5,94,0,0,938,948,5,17,0,0,939,940,5,131,0,0,940,942,
        3,502,251,0,941,943,3,38,19,0,942,941,1,0,0,0,942,943,1,0,0,0,943,
        949,1,0,0,0,944,945,5,127,0,0,945,946,3,106,53,0,946,947,5,128,0,
        0,947,949,1,0,0,0,948,939,1,0,0,0,948,944,1,0,0,0,949,1047,1,0,0,
        0,950,979,5,66,0,0,951,973,3,6,3,0,952,974,3,500,250,0,953,974,3,
        108,54,0,954,955,5,127,0,0,955,956,3,106,53,0,956,960,5,128,0,0,
        957,959,3,382,191,0,958,957,1,0,0,0,959,962,1,0,0,0,960,958,1,0,
        0,0,960,961,1,0,0,0,961,964,1,0,0,0,962,960,1,0,0,0,963,965,3,384,
        192,0,964,963,1,0,0,0,964,965,1,0,0,0,965,974,1,0,0,0,966,968,3,
        382,191,0,967,966,1,0,0,0,968,969,1,0,0,0,969,967,1,0,0,0,969,970,
        1,0,0,0,970,971,1,0,0,0,971,972,3,384,192,0,972,974,1,0,0,0,973,
        952,1,0,0,0,973,953,1,0,0,0,973,954,1,0,0,0,973,967,1,0,0,0,974,
        980,1,0,0,0,975,980,3,122,61,0,976,977,3,382,191,0,977,978,3,384,
        192,0,978,980,1,0,0,0,979,951,1,0,0,0,979,975,1,0,0,0,979,976,1,
        0,0,0,979,980,1,0,0,0,980,1047,1,0,0,0,981,982,5,129,0,0,982,985,
        3,42,21,0,983,984,5,132,0,0,984,986,3,42,21,0,985,983,1,0,0,0,986,
        987,1,0,0,0,987,985,1,0,0,0,987,988,1,0,0,0,988,989,1,0,0,0,989,
        990,5,130,0,0,990,1047,1,0,0,0,991,992,5,98,0,0,992,996,5,129,0,
        0,993,997,3,128,64,0,994,997,3,6,3,0,995,997,5,108,0,0,996,993,1,
        0,0,0,996,994,1,0,0,0,996,995,1,0,0,0,997,998,1,0,0,0,998,1047,5,
        130,0,0,999,1000,5,25,0,0,1000,1001,5,129,0,0,1001,1002,3,46,23,
        0,1002,1003,5,130,0,0,1003,1047,1,0,0,0,1004,1005,5,101,0,0,1005,
        1006,5,129,0,0,1006,1007,3,46,23,0,1007,1008,5,130,0,0,1008,1047,
        1,0,0,0,1009,1014,5,30,0,0,1010,1011,5,129,0,0,1011,1012,3,6,3,0,
        1012,1013,5,130,0,0,1013,1015,1,0,0,0,1014,1010,1,0,0,0,1014,1015,
        1,0,0,0,1015,1047,1,0,0,0,1016,1018,5,15,0,0,1017,1016,1,0,0,0,1017,
        1018,1,0,0,0,1018,1019,1,0,0,0,1019,1025,5,31,0,0,1020,1022,5,129,
        0,0,1021,1023,3,142,71,0,1022,1021,1,0,0,0,1022,1023,1,0,0,0,1023,
        1024,1,0,0,0,1024,1026,5,130,0,0,1025,1020,1,0,0,0,1025,1026,1,0,
        0,0,1026,1027,1,0,0,0,1027,1047,3,218,109,0,1028,1029,5,88,0,0,1029,
        1030,5,129,0,0,1030,1031,3,6,3,0,1031,1032,5,130,0,0,1032,1047,1,
        0,0,0,1033,1034,5,64,0,0,1034,1040,5,129,0,0,1035,1036,3,502,251,
        0,1036,1037,5,131,0,0,1037,1039,1,0,0,0,1038,1035,1,0,0,0,1039,1042,
        1,0,0,0,1040,1038,1,0,0,0,1040,1041,1,0,0,0,1041,1043,1,0,0,0,1042,
        1040,1,0,0,0,1043,1044,3,502,251,0,1044,1045,5,130,0,0,1045,1047,
        1,0,0,0,1046,925,1,0,0,0,1046,926,1,0,0,0,1046,930,1,0,0,0,1046,
        934,1,0,0,0,1046,935,1,0,0,0,1046,936,1,0,0,0,1046,937,1,0,0,0,1046,
        938,1,0,0,0,1046,950,1,0,0,0,1046,981,1,0,0,0,1046,991,1,0,0,0,1046,
        999,1,0,0,0,1046,1004,1,0,0,0,1046,1009,1,0,0,0,1046,1017,1,0,0,
        0,1046,1028,1,0,0,0,1046,1033,1,0,0,0,1047,93,1,0,0,0,1048,1051,
        3,46,23,0,1049,1051,3,96,48,0,1050,1048,1,0,0,0,1050,1049,1,0,0,
        0,1051,95,1,0,0,0,1052,1053,5,95,0,0,1053,1054,3,46,23,0,1054,97,
        1,0,0,0,1055,1057,5,148,0,0,1056,1055,1,0,0,0,1056,1057,1,0,0,0,
        1057,1058,1,0,0,0,1058,1059,5,131,0,0,1059,1061,3,502,251,0,1060,
        1062,3,38,19,0,1061,1060,1,0,0,0,1061,1062,1,0,0,0,1062,99,1,0,0,
        0,1063,1065,5,148,0,0,1064,1063,1,0,0,0,1064,1065,1,0,0,0,1065,1066,
        1,0,0,0,1066,1067,5,127,0,0,1067,1072,3,102,51,0,1068,1069,5,132,
        0,0,1069,1071,3,102,51,0,1070,1068,1,0,0,0,1071,1074,1,0,0,0,1072,
        1070,1,0,0,0,1072,1073,1,0,0,0,1073,1075,1,0,0,0,1074,1072,1,0,0,
        0,1075,1076,5,128,0,0,1076,101,1,0,0,0,1077,1078,3,502,251,0,1078,
        1079,5,133,0,0,1079,1081,1,0,0,0,1080,1077,1,0,0,0,1080,1081,1,0,
        0,0,1081,1082,1,0,0,0,1082,1083,3,46,23,0,1083,103,1,0,0,0,1084,
        1085,7,7,0,0,1085,105,1,0,0,0,1086,1091,3,46,23,0,1087,1088,5,132,
        0,0,1088,1090,3,46,23,0,1089,1087,1,0,0,0,1090,1093,1,0,0,0,1091,
        1089,1,0,0,0,1091,1092,1,0,0,0,1092,107,1,0,0,0,1093,1091,1,0,0,
        0,1094,1097,3,110,55,0,1095,1097,3,118,59,0,1096,1094,1,0,0,0,1096,
        1095,1,0,0,0,1097,109,1,0,0,0,1098,1103,5,125,0,0,1099,1101,3,112,
        56,0,1100,1102,5,132,0,0,1101,1100,1,0,0,0,1101,1102,1,0,0,0,1102,
        1104,1,0,0,0,1103,1099,1,0,0,0,1103,1104,1,0,0,0,1104,1105,1,0,0,
        0,1105,1106,5,126,0,0,1106,111,1,0,0,0,1107,1112,3,114,57,0,1108,
        1109,5,132,0,0,1109,1111,3,114,57,0,1110,1108,1,0,0,0,1111,1114,
        1,0,0,0,1112,1110,1,0,0,0,1112,1113,1,0,0,0,1113,113,1,0,0,0,1114,
        1112,1,0,0,0,1115,1121,3,502,251,0,1116,1117,5,127,0,0,1117,1118,
        3,46,23,0,1118,1119,5,128,0,0,1119,1121,1,0,0,0,1120,1115,1,0,0,
        0,1120,1116,1,0,0,0,1121,1122,1,0,0,0,1122,1123,5,145,0,0,1123,1124,
        3,116,58,0,1124,115,1,0,0,0,1125,1129,3,46,23,0,1126,1129,3,108,
        54,0,1127,1129,3,10,5,0,1128,1125,1,0,0,0,1128,1126,1,0,0,0,1128,
        1127,1,0,0,0,1129,117,1,0,0,0,1130,1131,5,125,0,0,1131,1136,3,120,
        60,0,1132,1133,5,132,0,0,1133,1135,3,120,60,0,1134,1132,1,0,0,0,
        1135,1138,1,0,0,0,1136,1134,1,0,0,0,1136,1137,1,0,0,0,1137,1140,
        1,0,0,0,1138,1136,1,0,0,0,1139,1141,5,132,0,0,1140,1139,1,0,0,0,
        1140,1141,1,0,0,0,1141,1142,1,0,0,0,1142,1143,5,126,0,0,1143,119,
        1,0,0,0,1144,1150,3,48,24,0,1145,1146,5,125,0,0,1146,1147,3,106,
        53,0,1147,1148,5,126,0,0,1148,1150,1,0,0,0,1149,1144,1,0,0,0,1149,
        1145,1,0,0,0,1150,121,1,0,0,0,1151,1156,5,125,0,0,1152,1154,3,124,
        62,0,1153,1155,5,132,0,0,1154,1153,1,0,0,0,1154,1155,1,0,0,0,1155,
        1157,1,0,0,0,1156,1152,1,0,0,0,1156,1157,1,0,0,0,1157,1158,1,0,0,
        0,1158,1159,5,126,0,0,1159,123,1,0,0,0,1160,1165,3,126,63,0,1161,
        1162,5,132,0,0,1162,1164,3,126,63,0,1163,1161,1,0,0,0,1164,1167,
        1,0,0,0,1165,1163,1,0,0,0,1165,1166,1,0,0,0,1166,125,1,0,0,0,1167,
        1165,1,0,0,0,1168,1174,3,90,45,0,1169,1170,3,502,251,0,1170,1171,
        5,145,0,0,1171,1172,3,46,23,0,1172,1174,1,0,0,0,1173,1168,1,0,0,
        0,1173,1169,1,0,0,0,1174,127,1,0,0,0,1175,1184,3,502,251,0,1176,
        1178,3,130,65,0,1177,1176,1,0,0,0,1177,1178,1,0,0,0,1178,1185,1,
        0,0,0,1179,1180,5,149,0,0,1180,1182,3,502,251,0,1181,1183,3,130,
        65,0,1182,1181,1,0,0,0,1182,1183,1,0,0,0,1183,1185,1,0,0,0,1184,
        1177,1,0,0,0,1184,1179,1,0,0,0,1185,1193,1,0,0,0,1186,1187,5,131,
        0,0,1187,1189,3,502,251,0,1188,1190,3,130,65,0,1189,1188,1,0,0,0,
        1189,1190,1,0,0,0,1190,1192,1,0,0,0,1191,1186,1,0,0,0,1192,1195,
        1,0,0,0,1193,1191,1,0,0,0,1193,1194,1,0,0,0,1194,129,1,0,0,0,1195,
        1193,1,0,0,0,1196,1200,5,146,0,0,1197,1199,5,132,0,0,1198,1197,1,
        0,0,0,1199,1202,1,0,0,0,1200,1198,1,0,0,0,1200,1201,1,0,0,0,1201,
        1203,1,0,0,0,1202,1200,1,0,0,0,1203,1204,5,147,0,0,1204,131,1,0,
        0,0,1205,1210,3,8,4,0,1206,1209,3,382,191,0,1207,1209,5,137,0,0,
        1208,1206,1,0,0,0,1208,1207,1,0,0,0,1209,1212,1,0,0,0,1210,1208,
        1,0,0,0,1210,1211,1,0,0,0,1211,1214,1,0,0,0,1212,1210,1,0,0,0,1213,
        1215,5,148,0,0,1214,1213,1,0,0,0,1214,1215,1,0,0,0,1215,1217,1,0,
        0,0,1216,1218,3,134,67,0,1217,1216,1,0,0,0,1217,1218,1,0,0,0,1218,
        1220,1,0,0,0,1219,1221,3,502,251,0,1220,1219,1,0,0,0,1220,1221,1,
        0,0,0,1221,133,1,0,0,0,1222,1223,5,125,0,0,1223,1228,3,136,68,0,
        1224,1225,5,132,0,0,1225,1227,3,136,68,0,1226,1224,1,0,0,0,1227,
        1230,1,0,0,0,1228,1226,1,0,0,0,1228,1229,1,0,0,0,1229,1231,1,0,0,
        0,1230,1228,1,0,0,0,1231,1232,5,126,0,0,1232,135,1,0,0,0,1233,1234,
        3,502,251,0,1234,1235,5,133,0,0,1235,1236,3,46,23,0,1236,137,1,0,
        0,0,1237,1239,5,15,0,0,1238,1237,1,0,0,0,1238,1239,1,0,0,0,1239,
        1240,1,0,0,0,1240,1241,3,140,70,0,1241,1242,3,432,216,0,1242,1243,
        3,148,74,0,1243,139,1,0,0,0,1244,1245,5,129,0,0,1245,1256,5,130,
        0,0,1246,1247,5,129,0,0,1247,1248,3,142,71,0,1248,1249,5,130,0,0,
        1249,1256,1,0,0,0,1250,1251,5,129,0,0,1251,1252,3,146,73,0,1252,
        1253,5,130,0,0,1253,1256,1,0,0,0,1254,1256,3,502,251,0,1255,1244,
        1,0,0,0,1255,1246,1,0,0,0,1255,1250,1,0,0,0,1255,1254,1,0,0,0,1256,
        141,1,0,0,0,1257,1262,3,144,72,0,1258,1259,5,132,0,0,1259,1261,3,
        144,72,0,1260,1258,1,0,0,0,1261,1264,1,0,0,0,1262,1260,1,0,0,0,1262,
        1263,1,0,0,0,1263,143,1,0,0,0,1264,1262,1,0,0,0,1265,1267,7,2,0,
        0,1266,1265,1,0,0,0,1266,1267,1,0,0,0,1267,1268,1,0,0,0,1268,1269,
        3,6,3,0,1269,1270,3,502,251,0,1270,145,1,0,0,0,1271,1276,3,502,251,
        0,1272,1273,5,132,0,0,1273,1275,3,502,251,0,1274,1272,1,0,0,0,1275,
        1278,1,0,0,0,1276,1274,1,0,0,0,1276,1277,1,0,0,0,1277,147,1,0,0,
        0,1278,1276,1,0,0,0,1279,1282,3,94,47,0,1280,1282,3,218,109,0,1281,
        1279,1,0,0,0,1281,1280,1,0,0,0,1282,149,1,0,0,0,1283,1284,3,152,
        76,0,1284,1285,3,154,77,0,1285,151,1,0,0,0,1286,1288,5,48,0,0,1287,
        1289,3,6,3,0,1288,1287,1,0,0,0,1288,1289,1,0,0,0,1289,1290,1,0,0,
        0,1290,1291,3,502,251,0,1291,1292,5,54,0,0,1292,1293,3,46,23,0,1293,
        153,1,0,0,0,1294,1296,3,156,78,0,1295,1294,1,0,0,0,1296,1299,1,0,
        0,0,1297,1295,1,0,0,0,1297,1298,1,0,0,0,1298,1300,1,0,0,0,1299,1297,
        1,0,0,0,1300,1302,3,168,84,0,1301,1303,3,170,85,0,1302,1301,1,0,
        0,0,1302,1303,1,0,0,0,1303,155,1,0,0,0,1304,1310,3,152,76,0,1305,
        1310,3,158,79,0,1306,1310,3,160,80,0,1307,1310,3,162,81,0,1308,1310,
        3,164,82,0,1309,1304,1,0,0,0,1309,1305,1,0,0,0,1309,1306,1,0,0,0,
        1309,1307,1,0,0,0,1309,1308,1,0,0,0,1310,157,1,0,0,0,1311,1312,5,
        61,0,0,1312,1313,3,502,251,0,1313,1314,5,145,0,0,1314,1315,3,46,
        23,0,1315,159,1,0,0,0,1316,1317,5,111,0,0,1317,1318,3,46,23,0,1318,
        161,1,0,0,0,1319,1321,5,60,0,0,1320,1322,3,6,3,0,1321,1320,1,0,0,
        0,1321,1322,1,0,0,0,1322,1323,1,0,0,0,1323,1324,3,502,251,0,1324,
        1325,5,54,0,0,1325,1326,3,46,23,0,1326,1327,5,69,0,0,1327,1328,3,
        46,23,0,1328,1329,5,38,0,0,1329,1332,3,46,23,0,1330,1331,5,58,0,
        0,1331,1333,3,502,251,0,1332,1330,1,0,0,0,1332,1333,1,0,0,0,1333,
        163,1,0,0,0,1334,1335,5,71,0,0,1335,1340,3,166,83,0,1336,1337,5,
        132,0,0,1337,1339,3,166,83,0,1338,1336,1,0,0,0,1339,1342,1,0,0,0,
        1340,1338,1,0,0,0,1340,1341,1,0,0,0,1341,165,1,0,0,0,1342,1340,1,
        0,0,0,1343,1345,3,46,23,0,1344,1346,7,8,0,0,1345,1344,1,0,0,0,1345,
        1346,1,0,0,0,1346,167,1,0,0,0,1347,1348,5,85,0,0,1348,1355,3,46,
        23,0,1349,1350,5,51,0,0,1350,1351,3,46,23,0,1351,1352,5,20,0,0,1352,
        1353,3,46,23,0,1353,1355,1,0,0,0,1354,1347,1,0,0,0,1354,1349,1,0,
        0,0,1355,169,1,0,0,0,1356,1357,5,58,0,0,1357,1358,3,502,251,0,1358,
        1359,3,154,77,0,1359,171,1,0,0,0,1360,1364,3,184,92,0,1361,1364,
        3,174,87,0,1362,1364,3,186,93,0,1363,1360,1,0,0,0,1363,1361,1,0,
        0,0,1363,1362,1,0,0,0,1364,173,1,0,0,0,1365,1366,3,220,110,0,1366,
        1367,5,134,0,0,1367,1373,1,0,0,0,1368,1369,3,228,114,0,1369,1370,
        5,134,0,0,1370,1373,1,0,0,0,1371,1373,3,176,88,0,1372,1365,1,0,0,
        0,1372,1368,1,0,0,0,1372,1371,1,0,0,0,1373,175,1,0,0,0,1374,1375,
        3,178,89,0,1375,1376,3,182,91,0,1376,177,1,0,0,0,1377,1379,3,180,
        90,0,1378,1377,1,0,0,0,1378,1379,1,0,0,0,1379,1380,1,0,0,0,1380,
        1381,3,334,167,0,1381,1383,3,502,251,0,1382,1384,3,276,138,0,1383,
        1382,1,0,0,0,1383,1384,1,0,0,0,1384,1385,1,0,0,0,1385,1387,5,129,
        0,0,1386,1388,3,340,170,0,1387,1386,1,0,0,0,1387,1388,1,0,0,0,1388,
        1389,1,0,0,0,1389,1391,5,130,0,0,1390,1392,3,284,142,0,1391,1390,
        1,0,0,0,1391,1392,1,0,0,0,1392,179,1,0,0,0,1393,1395,7,9,0,0,1394,
        1396,5,90,0,0,1395,1394,1,0,0,0,1395,1396,1,0,0,0,1396,1402,1,0,
        0,0,1397,1398,5,90,0,0,1398,1402,7,9,0,0,1399,1400,5,103,0,0,1400,
        1402,5,92,0,0,1401,1393,1,0,0,0,1401,1397,1,0,0,0,1401,1399,1,0,
        0,0,1402,181,1,0,0,0,1403,1409,3,218,109,0,1404,1405,3,432,216,0,
        1405,1406,3,94,47,0,1406,1407,5,134,0,0,1407,1409,1,0,0,0,1408,1403,
        1,0,0,0,1408,1404,1,0,0,0,1409,183,1,0,0,0,1410,1411,3,502,251,0,
        1411,1412,5,133,0,0,1412,1413,3,172,86,0,1413,185,1,0,0,0,1414,1508,
        3,218,109,0,1415,1508,3,188,94,0,1416,1417,3,46,23,0,1417,1418,5,
        134,0,0,1418,1508,1,0,0,0,1419,1508,3,190,95,0,1420,1421,5,93,0,
        0,1421,1422,5,129,0,0,1422,1423,3,46,23,0,1423,1424,5,130,0,0,1424,
        1428,5,125,0,0,1425,1427,3,230,115,0,1426,1425,1,0,0,0,1427,1430,
        1,0,0,0,1428,1426,1,0,0,0,1428,1429,1,0,0,0,1429,1431,1,0,0,0,1430,
        1428,1,0,0,0,1431,1432,5,126,0,0,1432,1508,1,0,0,0,1433,1434,5,112,
        0,0,1434,1435,5,129,0,0,1435,1436,3,46,23,0,1436,1437,5,130,0,0,
        1437,1438,3,186,93,0,1438,1508,1,0,0,0,1439,1440,5,33,0,0,1440,1441,
        3,186,93,0,1441,1442,5,112,0,0,1442,1443,5,129,0,0,1443,1444,3,46,
        23,0,1444,1445,5,130,0,0,1445,1446,5,134,0,0,1446,1508,1,0,0,0,1447,
        1448,5,46,0,0,1448,1450,5,129,0,0,1449,1451,3,238,119,0,1450,1449,
        1,0,0,0,1450,1451,1,0,0,0,1451,1452,1,0,0,0,1452,1454,5,134,0,0,
        1453,1455,3,46,23,0,1454,1453,1,0,0,0,1454,1455,1,0,0,0,1455,1456,
        1,0,0,0,1456,1458,5,134,0,0,1457,1459,3,240,120,0,1458,1457,1,0,
        0,0,1458,1459,1,0,0,0,1459,1460,1,0,0,0,1460,1461,5,130,0,0,1461,
        1508,3,186,93,0,1462,1464,5,16,0,0,1463,1462,1,0,0,0,1463,1464,1,
        0,0,0,1464,1465,1,0,0,0,1465,1466,5,47,0,0,1466,1467,5,129,0,0,1467,
        1470,3,222,111,0,1468,1471,3,502,251,0,1469,1471,3,16,8,0,1470,1468,
        1,0,0,0,1470,1469,1,0,0,0,1471,1472,1,0,0,0,1472,1473,5,54,0,0,1473,
        1474,3,46,23,0,1474,1475,5,130,0,0,1475,1476,3,186,93,0,1476,1508,
        1,0,0,0,1477,1478,5,19,0,0,1478,1508,5,134,0,0,1479,1480,5,28,0,
        0,1480,1508,5,134,0,0,1481,1486,5,50,0,0,1482,1487,3,502,251,0,1483,
        1484,5,22,0,0,1484,1487,3,46,23,0,1485,1487,5,30,0,0,1486,1482,1,
        0,0,0,1486,1483,1,0,0,0,1486,1485,1,0,0,0,1487,1488,1,0,0,0,1488,
        1508,5,134,0,0,1489,1491,5,82,0,0,1490,1492,3,46,23,0,1491,1490,
        1,0,0,0,1491,1492,1,0,0,0,1492,1493,1,0,0,0,1493,1508,5,134,0,0,
        1494,1496,5,95,0,0,1495,1497,3,46,23,0,1496,1495,1,0,0,0,1496,1497,
        1,0,0,0,1497,1498,1,0,0,0,1498,1508,5,134,0,0,1499,1508,3,216,108,
        0,1500,1508,3,192,96,0,1501,1508,3,194,97,0,1502,1508,3,196,98,0,
        1503,1508,3,208,104,0,1504,1508,3,210,105,0,1505,1508,3,214,107,
        0,1506,1508,3,212,106,0,1507,1414,1,0,0,0,1507,1415,1,0,0,0,1507,
        1416,1,0,0,0,1507,1419,1,0,0,0,1507,1420,1,0,0,0,1507,1433,1,0,0,
        0,1507,1439,1,0,0,0,1507,1447,1,0,0,0,1507,1463,1,0,0,0,1507,1477,
        1,0,0,0,1507,1479,1,0,0,0,1507,1481,1,0,0,0,1507,1489,1,0,0,0,1507,
        1494,1,0,0,0,1507,1499,1,0,0,0,1507,1500,1,0,0,0,1507,1501,1,0,0,
        0,1507,1502,1,0,0,0,1507,1503,1,0,0,0,1507,1504,1,0,0,0,1507,1505,
        1,0,0,0,1507,1506,1,0,0,0,1508,187,1,0,0,0,1509,1510,5,134,0,0,1510,
        189,1,0,0,0,1511,1512,5,52,0,0,1512,1513,5,129,0,0,1513,1514,3,46,
        23,0,1514,1515,5,130,0,0,1515,1516,3,186,93,0,1516,1526,1,0,0,0,
        1517,1518,5,52,0,0,1518,1519,5,129,0,0,1519,1520,3,46,23,0,1520,
        1521,5,130,0,0,1521,1522,3,186,93,0,1522,1523,5,36,0,0,1523,1524,
        3,186,93,0,1524,1526,1,0,0,0,1525,1511,1,0,0,0,1525,1517,1,0,0,0,
        1526,191,1,0,0,0,1527,1528,5,25,0,0,1528,1529,3,218,109,0,1529,193,
        1,0,0,0,1530,1531,5,101,0,0,1531,1532,3,218,109,0,1532,195,1,0,0,
        0,1533,1534,5,62,0,0,1534,1535,5,129,0,0,1535,1536,3,46,23,0,1536,
        1537,5,130,0,0,1537,1538,3,186,93,0,1538,197,1,0,0,0,1539,1542,3,
        6,3,0,1540,1542,3,422,211,0,1541,1539,1,0,0,0,1541,1540,1,0,0,0,
        1542,199,1,0,0,0,1543,1544,5,89,0,0,1544,1545,3,6,3,0,1545,1546,
        5,127,0,0,1546,1547,3,46,23,0,1547,1548,5,128,0,0,1548,1560,1,0,
        0,0,1549,1551,5,89,0,0,1550,1552,3,6,3,0,1551,1550,1,0,0,0,1551,
        1552,1,0,0,0,1552,1553,1,0,0,0,1553,1555,5,127,0,0,1554,1556,3,46,
        23,0,1555,1554,1,0,0,0,1555,1556,1,0,0,0,1556,1557,1,0,0,0,1557,
        1558,5,128,0,0,1558,1560,3,202,101,0,1559,1543,1,0,0,0,1559,1549,
        1,0,0,0,1560,201,1,0,0,0,1561,1562,5,125,0,0,1562,1563,3,204,102,
        0,1563,1564,5,126,0,0,1564,203,1,0,0,0,1565,1570,3,206,103,0,1566,
        1567,5,132,0,0,1567,1569,3,206,103,0,1568,1566,1,0,0,0,1569,1572,
        1,0,0,0,1570,1568,1,0,0,0,1570,1571,1,0,0,0,1571,1574,1,0,0,0,1572,
        1570,1,0,0,0,1573,1575,5,132,0,0,1574,1573,1,0,0,0,1574,1575,1,0,
        0,0,1575,205,1,0,0,0,1576,1577,3,46,23,0,1577,207,1,0,0,0,1578,1579,
        5,105,0,0,1579,1580,5,129,0,0,1580,1581,3,252,126,0,1581,1582,5,
        130,0,0,1582,1583,3,186,93,0,1583,209,1,0,0,0,1584,1585,5,113,0,
        0,1585,1586,5,82,0,0,1586,1587,3,46,23,0,1587,1588,5,134,0,0,1588,
        1593,1,0,0,0,1589,1590,5,113,0,0,1590,1591,5,19,0,0,1591,1593,5,
        134,0,0,1592,1584,1,0,0,0,1592,1589,1,0,0,0,1593,211,1,0,0,0,1594,
        1595,5,44,0,0,1595,1596,5,129,0,0,1596,1597,3,422,211,0,1597,1598,
        3,424,212,0,1598,1599,5,130,0,0,1599,1600,3,186,93,0,1600,213,1,
        0,0,0,1601,1602,5,103,0,0,1602,1603,3,218,109,0,1603,215,1,0,0,0,
        1604,1605,5,97,0,0,1605,1606,3,218,109,0,1606,1607,3,242,121,0,1607,
        1616,1,0,0,0,1608,1609,5,97,0,0,1609,1611,3,218,109,0,1610,1612,
        3,242,121,0,1611,1610,1,0,0,0,1611,1612,1,0,0,0,1612,1613,1,0,0,
        0,1613,1614,3,250,125,0,1614,1616,1,0,0,0,1615,1604,1,0,0,0,1615,
        1608,1,0,0,0,1616,217,1,0,0,0,1617,1619,5,125,0,0,1618,1620,3,236,
        118,0,1619,1618,1,0,0,0,1619,1620,1,0,0,0,1620,1621,1,0,0,0,1621,
        1622,5,126,0,0,1622,219,1,0,0,0,1623,1628,5,105,0,0,1624,1628,5,
        80,0,0,1625,1626,5,80,0,0,1626,1628,5,79,0,0,1627,1623,1,0,0,0,1627,
        1624,1,0,0,0,1627,1625,1,0,0,0,1627,1628,1,0,0,0,1628,1629,1,0,0,
        0,1629,1630,3,222,111,0,1630,1635,3,224,112,0,1631,1632,5,132,0,
        0,1632,1634,3,224,112,0,1633,1631,1,0,0,0,1634,1637,1,0,0,0,1635,
        1633,1,0,0,0,1635,1636,1,0,0,0,1636,1648,1,0,0,0,1637,1635,1,0,0,
        0,1638,1639,5,44,0,0,1639,1640,3,422,211,0,1640,1641,3,424,212,0,
        1641,1648,1,0,0,0,1642,1643,5,106,0,0,1643,1644,3,12,6,0,1644,1645,
        5,145,0,0,1645,1646,3,46,23,0,1646,1648,1,0,0,0,1647,1627,1,0,0,
        0,1647,1638,1,0,0,0,1647,1642,1,0,0,0,1648,221,1,0,0,0,1649,1652,
        5,106,0,0,1650,1652,3,6,3,0,1651,1649,1,0,0,0,1651,1650,1,0,0,0,
        1652,223,1,0,0,0,1653,1659,3,502,251,0,1654,1656,5,145,0,0,1655,
        1657,5,80,0,0,1656,1655,1,0,0,0,1656,1657,1,0,0,0,1657,1658,1,0,
        0,0,1658,1660,3,226,113,0,1659,1654,1,0,0,0,1659,1660,1,0,0,0,1660,
        225,1,0,0,0,1661,1666,3,46,23,0,1662,1666,3,384,192,0,1663,1666,
        3,202,101,0,1664,1666,3,16,8,0,1665,1661,1,0,0,0,1665,1662,1,0,0,
        0,1665,1663,1,0,0,0,1665,1664,1,0,0,0,1666,227,1,0,0,0,1667,1668,
        5,27,0,0,1668,1669,3,6,3,0,1669,1670,3,324,162,0,1670,229,1,0,0,
        0,1671,1673,3,232,116,0,1672,1671,1,0,0,0,1673,1674,1,0,0,0,1674,
        1672,1,0,0,0,1674,1675,1,0,0,0,1675,1676,1,0,0,0,1676,1677,3,236,
        118,0,1677,231,1,0,0,0,1678,1679,5,22,0,0,1679,1681,3,46,23,0,1680,
        1682,3,234,117,0,1681,1680,1,0,0,0,1681,1682,1,0,0,0,1682,1683,1,
        0,0,0,1683,1684,5,133,0,0,1684,1695,1,0,0,0,1685,1686,5,22,0,0,1686,
        1688,3,292,146,0,1687,1689,3,234,117,0,1688,1687,1,0,0,0,1688,1689,
        1,0,0,0,1689,1690,1,0,0,0,1690,1691,5,133,0,0,1691,1695,1,0,0,0,
        1692,1693,5,30,0,0,1693,1695,5,133,0,0,1694,1678,1,0,0,0,1694,1685,
        1,0,0,0,1694,1692,1,0,0,0,1695,233,1,0,0,0,1696,1697,5,110,0,0,1697,
        1698,3,46,23,0,1698,235,1,0,0,0,1699,1701,3,172,86,0,1700,1699,1,
        0,0,0,1701,1702,1,0,0,0,1702,1700,1,0,0,0,1702,1703,1,0,0,0,1703,
        237,1,0,0,0,1704,1714,3,220,110,0,1705,1710,3,46,23,0,1706,1707,
        5,132,0,0,1707,1709,3,46,23,0,1708,1706,1,0,0,0,1709,1712,1,0,0,
        0,1710,1708,1,0,0,0,1710,1711,1,0,0,0,1711,1714,1,0,0,0,1712,1710,
        1,0,0,0,1713,1704,1,0,0,0,1713,1705,1,0,0,0,1714,239,1,0,0,0,1715,
        1720,3,46,23,0,1716,1717,5,132,0,0,1717,1719,3,46,23,0,1718,1716,
        1,0,0,0,1719,1722,1,0,0,0,1720,1718,1,0,0,0,1720,1721,1,0,0,0,1721,
        241,1,0,0,0,1722,1720,1,0,0,0,1723,1727,3,244,122,0,1724,1726,3,
        244,122,0,1725,1724,1,0,0,0,1726,1729,1,0,0,0,1727,1725,1,0,0,0,
        1727,1728,1,0,0,0,1728,1731,1,0,0,0,1729,1727,1,0,0,0,1730,1732,
        3,246,123,0,1731,1730,1,0,0,0,1731,1732,1,0,0,0,1732,1735,1,0,0,
        0,1733,1735,3,246,123,0,1734,1723,1,0,0,0,1734,1733,1,0,0,0,1735,
        243,1,0,0,0,1736,1737,5,23,0,0,1737,1738,5,129,0,0,1738,1740,3,36,
        18,0,1739,1741,3,502,251,0,1740,1739,1,0,0,0,1740,1741,1,0,0,0,1741,
        1742,1,0,0,0,1742,1744,5,130,0,0,1743,1745,3,248,124,0,1744,1743,
        1,0,0,0,1744,1745,1,0,0,0,1745,1746,1,0,0,0,1746,1747,3,218,109,
        0,1747,245,1,0,0,0,1748,1750,5,23,0,0,1749,1751,3,248,124,0,1750,
        1749,1,0,0,0,1750,1751,1,0,0,0,1751,1752,1,0,0,0,1752,1753,3,218,
        109,0,1753,247,1,0,0,0,1754,1755,5,110,0,0,1755,1756,5,129,0,0,1756,
        1757,3,46,23,0,1757,1758,5,130,0,0,1758,249,1,0,0,0,1759,1760,5,
        43,0,0,1760,1761,3,218,109,0,1761,251,1,0,0,0,1762,1765,3,220,110,
        0,1763,1765,3,46,23,0,1764,1762,1,0,0,0,1764,1763,1,0,0,0,1765,253,
        1,0,0,0,1766,1767,5,65,0,0,1767,1768,3,256,128,0,1768,1770,3,258,
        129,0,1769,1771,5,134,0,0,1770,1769,1,0,0,0,1770,1771,1,0,0,0,1771,
        255,1,0,0,0,1772,1777,3,502,251,0,1773,1774,5,131,0,0,1774,1776,
        3,502,251,0,1775,1773,1,0,0,0,1776,1779,1,0,0,0,1777,1775,1,0,0,
        0,1777,1778,1,0,0,0,1778,257,1,0,0,0,1779,1777,1,0,0,0,1780,1782,
        5,125,0,0,1781,1783,3,260,130,0,1782,1781,1,0,0,0,1782,1783,1,0,
        0,0,1783,1785,1,0,0,0,1784,1786,3,264,132,0,1785,1784,1,0,0,0,1785,
        1786,1,0,0,0,1786,1788,1,0,0,0,1787,1789,3,268,134,0,1788,1787,1,
        0,0,0,1788,1789,1,0,0,0,1789,1790,1,0,0,0,1790,1791,5,126,0,0,1791,
        259,1,0,0,0,1792,1794,3,262,131,0,1793,1792,1,0,0,0,1794,1795,1,
        0,0,0,1795,1793,1,0,0,0,1795,1796,1,0,0,0,1796,261,1,0,0,0,1797,
        1798,5,41,0,0,1798,1799,5,11,0,0,1799,1800,3,502,251,0,1800,1801,
        5,134,0,0,1801,263,1,0,0,0,1802,1804,3,266,133,0,1803,1802,1,0,0,
        0,1804,1805,1,0,0,0,1805,1803,1,0,0,0,1805,1806,1,0,0,0,1806,265,
        1,0,0,0,1807,1808,5,105,0,0,1808,1809,3,502,251,0,1809,1810,5,145,
        0,0,1810,1811,3,4,2,0,1811,1812,5,134,0,0,1812,1823,1,0,0,0,1813,
        1814,5,105,0,0,1814,1815,3,4,2,0,1815,1816,5,134,0,0,1816,1823,1,
        0,0,0,1817,1818,5,105,0,0,1818,1819,5,90,0,0,1819,1820,3,4,2,0,1820,
        1821,5,134,0,0,1821,1823,1,0,0,0,1822,1807,1,0,0,0,1822,1813,1,0,
        0,0,1822,1817,1,0,0,0,1823,267,1,0,0,0,1824,1826,3,270,135,0,1825,
        1824,1,0,0,0,1826,1827,1,0,0,0,1827,1825,1,0,0,0,1827,1828,1,0,0,
        0,1828,269,1,0,0,0,1829,1832,3,254,127,0,1830,1832,3,272,136,0,1831,
        1829,1,0,0,0,1831,1830,1,0,0,0,1832,271,1,0,0,0,1833,1835,3,410,
        205,0,1834,1833,1,0,0,0,1834,1835,1,0,0,0,1835,1837,1,0,0,0,1836,
        1838,3,316,158,0,1837,1836,1,0,0,0,1837,1838,1,0,0,0,1838,1844,1,
        0,0,0,1839,1845,3,462,231,0,1840,1845,3,466,233,0,1841,1845,3,470,
        235,0,1842,1845,3,472,236,0,1843,1845,3,474,237,0,1844,1839,1,0,
        0,0,1844,1840,1,0,0,0,1844,1841,1,0,0,0,1844,1842,1,0,0,0,1844,1843,
        1,0,0,0,1845,273,1,0,0,0,1846,1847,3,502,251,0,1847,1848,5,149,0,
        0,1848,1850,3,502,251,0,1849,1851,3,38,19,0,1850,1849,1,0,0,0,1850,
        1851,1,0,0,0,1851,275,1,0,0,0,1852,1853,5,146,0,0,1853,1858,3,278,
        139,0,1854,1855,5,132,0,0,1855,1857,3,278,139,0,1856,1854,1,0,0,
        0,1857,1860,1,0,0,0,1858,1856,1,0,0,0,1858,1859,1,0,0,0,1859,1861,
        1,0,0,0,1860,1858,1,0,0,0,1861,1862,5,147,0,0,1862,277,1,0,0,0,1863,
        1865,3,410,205,0,1864,1863,1,0,0,0,1864,1865,1,0,0,0,1865,1866,1,
        0,0,0,1866,1867,3,502,251,0,1867,279,1,0,0,0,1868,1869,5,133,0,0,
        1869,1874,3,36,18,0,1870,1871,5,132,0,0,1871,1873,3,4,2,0,1872,1870,
        1,0,0,0,1873,1876,1,0,0,0,1874,1872,1,0,0,0,1874,1875,1,0,0,0,1875,
        281,1,0,0,0,1876,1874,1,0,0,0,1877,1882,3,4,2,0,1878,1879,5,132,
        0,0,1879,1881,3,4,2,0,1880,1878,1,0,0,0,1881,1884,1,0,0,0,1882,1880,
        1,0,0,0,1882,1883,1,0,0,0,1883,283,1,0,0,0,1884,1882,1,0,0,0,1885,
        1887,3,286,143,0,1886,1885,1,0,0,0,1887,1888,1,0,0,0,1888,1886,1,
        0,0,0,1888,1889,1,0,0,0,1889,285,1,0,0,0,1890,1891,5,111,0,0,1891,
        1892,3,502,251,0,1892,1893,5,133,0,0,1893,1894,3,288,144,0,1894,
        287,1,0,0,0,1895,1906,3,308,154,0,1896,1899,3,290,145,0,1897,1898,
        5,132,0,0,1898,1900,3,306,153,0,1899,1897,1,0,0,0,1899,1900,1,0,
        0,0,1900,1903,1,0,0,0,1901,1902,5,132,0,0,1902,1904,3,308,154,0,
        1903,1901,1,0,0,0,1903,1904,1,0,0,0,1904,1906,1,0,0,0,1905,1895,
        1,0,0,0,1905,1896,1,0,0,0,1906,289,1,0,0,0,1907,1915,3,36,18,0,1908,
        1910,5,26,0,0,1909,1911,5,148,0,0,1910,1909,1,0,0,0,1910,1911,1,
        0,0,0,1911,1915,1,0,0,0,1912,1915,5,92,0,0,1913,1915,5,102,0,0,1914,
        1907,1,0,0,0,1914,1908,1,0,0,0,1914,1912,1,0,0,0,1914,1913,1,0,0,
        0,1915,291,1,0,0,0,1916,1920,3,294,147,0,1917,1920,3,300,150,0,1918,
        1920,3,302,151,0,1919,1916,1,0,0,0,1919,1917,1,0,0,0,1919,1918,1,
        0,0,0,1920,293,1,0,0,0,1921,1922,3,6,3,0,1922,1923,3,296,148,0,1923,
        295,1,0,0,0,1924,1925,3,298,149,0,1925,297,1,0,0,0,1926,1927,3,502,
        251,0,1927,299,1,0,0,0,1928,1929,3,458,229,0,1929,301,1,0,0,0,1930,
        1931,5,106,0,0,1931,1932,3,304,152,0,1932,303,1,0,0,0,1933,1934,
        3,296,148,0,1934,305,1,0,0,0,1935,1940,3,4,2,0,1936,1937,5,132,0,
        0,1937,1939,3,4,2,0,1938,1936,1,0,0,0,1939,1942,1,0,0,0,1940,1938,
        1,0,0,0,1940,1941,1,0,0,0,1941,307,1,0,0,0,1942,1940,1,0,0,0,1943,
        1944,5,66,0,0,1944,1945,5,129,0,0,1945,1946,5,130,0,0,1946,309,1,
        0,0,0,1947,1949,5,125,0,0,1948,1950,3,312,156,0,1949,1948,1,0,0,
        0,1949,1950,1,0,0,0,1950,1951,1,0,0,0,1951,1952,5,126,0,0,1952,311,
        1,0,0,0,1953,1955,3,314,157,0,1954,1953,1,0,0,0,1955,1956,1,0,0,
        0,1956,1954,1,0,0,0,1956,1957,1,0,0,0,1957,313,1,0,0,0,1958,1960,
        3,410,205,0,1959,1958,1,0,0,0,1959,1960,1,0,0,0,1960,1962,1,0,0,
        0,1961,1963,3,316,158,0,1962,1961,1,0,0,0,1962,1963,1,0,0,0,1963,
        1966,1,0,0,0,1964,1967,3,320,160,0,1965,1967,3,486,243,0,1966,1964,
        1,0,0,0,1966,1965,1,0,0,0,1967,315,1,0,0,0,1968,1970,3,318,159,0,
        1969,1968,1,0,0,0,1970,1971,1,0,0,0,1971,1969,1,0,0,0,1971,1972,
        1,0,0,0,1972,317,1,0,0,0,1973,1974,7,10,0,0,1974,319,1,0,0,0,1975,
        1995,3,482,241,0,1976,1995,3,322,161,0,1977,1995,3,476,238,0,1978,
        1984,3,368,184,0,1979,1985,3,372,186,0,1980,1981,3,432,216,0,1981,
        1982,3,94,47,0,1982,1983,5,134,0,0,1983,1985,1,0,0,0,1984,1979,1,
        0,0,0,1984,1980,1,0,0,0,1985,1995,1,0,0,0,1986,1995,3,488,244,0,
        1987,1988,5,108,0,0,1988,1995,3,490,245,0,1989,1995,3,462,231,0,
        1990,1995,3,466,233,0,1991,1995,3,470,235,0,1992,1995,3,472,236,
        0,1993,1995,3,474,237,0,1994,1975,1,0,0,0,1994,1976,1,0,0,0,1994,
        1977,1,0,0,0,1994,1978,1,0,0,0,1994,1986,1,0,0,0,1994,1987,1,0,0,
        0,1994,1989,1,0,0,0,1994,1990,1,0,0,0,1994,1991,1,0,0,0,1994,1992,
        1,0,0,0,1994,1993,1,0,0,0,1995,321,1,0,0,0,1996,2002,5,80,0,0,1997,
        1998,5,79,0,0,1998,2002,5,80,0,0,1999,2000,5,80,0,0,2000,2002,5,
        79,0,0,2001,1996,1,0,0,0,2001,1997,1,0,0,0,2001,1999,1,0,0,0,2001,
        2002,1,0,0,0,2002,2003,1,0,0,0,2003,2013,3,6,3,0,2004,2005,3,4,2,
        0,2005,2006,5,131,0,0,2006,2007,3,484,242,0,2007,2014,1,0,0,0,2008,
        2014,3,490,245,0,2009,2014,3,480,240,0,2010,2014,3,484,242,0,2011,
        2014,3,494,247,0,2012,2014,3,478,239,0,2013,2004,1,0,0,0,2013,2008,
        1,0,0,0,2013,2009,1,0,0,0,2013,2010,1,0,0,0,2013,2011,1,0,0,0,2013,
        2012,1,0,0,0,2014,323,1,0,0,0,2015,2020,3,326,163,0,2016,2017,5,
        132,0,0,2017,2019,3,326,163,0,2018,2016,1,0,0,0,2019,2022,1,0,0,
        0,2020,2018,1,0,0,0,2020,2021,1,0,0,0,2021,325,1,0,0,0,2022,2020,
        1,0,0,0,2023,2024,3,502,251,0,2024,2025,5,145,0,0,2025,2026,3,46,
        23,0,2026,327,1,0,0,0,2027,2032,3,330,165,0,2028,2029,5,132,0,0,
        2029,2031,3,330,165,0,2030,2028,1,0,0,0,2031,2034,1,0,0,0,2032,2030,
        1,0,0,0,2032,2033,1,0,0,0,2033,329,1,0,0,0,2034,2032,1,0,0,0,2035,
        2038,3,502,251,0,2036,2037,5,145,0,0,2037,2039,3,332,166,0,2038,
        2036,1,0,0,0,2038,2039,1,0,0,0,2039,331,1,0,0,0,2040,2043,3,46,23,
        0,2041,2043,3,384,192,0,2042,2040,1,0,0,0,2042,2041,1,0,0,0,2043,
        333,1,0,0,0,2044,2047,3,6,3,0,2045,2047,5,108,0,0,2046,2044,1,0,
        0,0,2046,2045,1,0,0,0,2047,335,1,0,0,0,2048,2049,3,4,2,0,2049,337,
        1,0,0,0,2050,2057,3,218,109,0,2051,2057,5,134,0,0,2052,2053,3,432,
        216,0,2053,2054,3,46,23,0,2054,2055,5,134,0,0,2055,2057,1,0,0,0,
        2056,2050,1,0,0,0,2056,2051,1,0,0,0,2056,2052,1,0,0,0,2057,339,1,
        0,0,0,2058,2065,3,348,174,0,2059,2062,3,342,171,0,2060,2061,5,132,
        0,0,2061,2063,3,348,174,0,2062,2060,1,0,0,0,2062,2063,1,0,0,0,2063,
        2065,1,0,0,0,2064,2058,1,0,0,0,2064,2059,1,0,0,0,2065,341,1,0,0,
        0,2066,2071,3,344,172,0,2067,2068,5,132,0,0,2068,2070,3,344,172,
        0,2069,2067,1,0,0,0,2070,2073,1,0,0,0,2071,2069,1,0,0,0,2071,2072,
        1,0,0,0,2072,343,1,0,0,0,2073,2071,1,0,0,0,2074,2076,3,410,205,0,
        2075,2074,1,0,0,0,2075,2076,1,0,0,0,2076,2078,1,0,0,0,2077,2079,
        3,346,173,0,2078,2077,1,0,0,0,2078,2079,1,0,0,0,2079,2080,1,0,0,
        0,2080,2083,3,496,248,0,2081,2083,5,12,0,0,2082,2075,1,0,0,0,2082,
        2081,1,0,0,0,2083,345,1,0,0,0,2084,2093,5,80,0,0,2085,2093,5,72,
        0,0,2086,2093,5,54,0,0,2087,2088,5,80,0,0,2088,2093,5,94,0,0,2089,
        2090,5,54,0,0,2090,2093,5,94,0,0,2091,2093,5,94,0,0,2092,2084,1,
        0,0,0,2092,2085,1,0,0,0,2092,2086,1,0,0,0,2092,2087,1,0,0,0,2092,
        2089,1,0,0,0,2092,2091,1,0,0,0,2093,347,1,0,0,0,2094,2096,3,410,
        205,0,2095,2094,1,0,0,0,2095,2096,1,0,0,0,2096,2097,1,0,0,0,2097,
        2098,5,74,0,0,2098,2099,3,380,190,0,2099,2100,3,502,251,0,2100,349,
        1,0,0,0,2101,2103,3,410,205,0,2102,2101,1,0,0,0,2102,2103,1,0,0,
        0,2103,2105,1,0,0,0,2104,2106,3,356,178,0,2105,2104,1,0,0,0,2105,
        2106,1,0,0,0,2106,2117,1,0,0,0,2107,2108,5,49,0,0,2108,2110,3,358,
        179,0,2109,2111,3,354,177,0,2110,2109,1,0,0,0,2110,2111,1,0,0,0,
        2111,2118,1,0,0,0,2112,2113,5,86,0,0,2113,2115,3,358,179,0,2114,
        2116,3,352,176,0,2115,2114,1,0,0,0,2115,2116,1,0,0,0,2116,2118,1,
        0,0,0,2117,2107,1,0,0,0,2117,2112,1,0,0,0,2118,351,1,0,0,0,2119,
        2121,3,410,205,0,2120,2119,1,0,0,0,2120,2121,1,0,0,0,2121,2123,1,
        0,0,0,2122,2124,3,356,178,0,2123,2122,1,0,0,0,2123,2124,1,0,0,0,
        2124,2125,1,0,0,0,2125,2126,5,49,0,0,2126,2127,3,358,179,0,2127,
        353,1,0,0,0,2128,2130,3,410,205,0,2129,2128,1,0,0,0,2129,2130,1,
        0,0,0,2130,2132,1,0,0,0,2131,2133,3,356,178,0,2132,2131,1,0,0,0,
        2132,2133,1,0,0,0,2133,2134,1,0,0,0,2134,2135,5,86,0,0,2135,2136,
        3,358,179,0,2136,355,1,0,0,0,2137,2149,5,77,0,0,2138,2149,5,57,0,
        0,2139,2149,5,76,0,0,2140,2141,5,77,0,0,2141,2149,5,57,0,0,2142,
        2143,5,57,0,0,2143,2149,5,77,0,0,2144,2145,5,77,0,0,2145,2149,5,
        76,0,0,2146,2147,5,76,0,0,2147,2149,5,77,0,0,2148,2137,1,0,0,0,2148,
        2138,1,0,0,0,2148,2139,1,0,0,0,2148,2140,1,0,0,0,2148,2142,1,0,0,
        0,2148,2144,1,0,0,0,2148,2146,1,0,0,0,2149,357,1,0,0,0,2150,2157,
        3,218,109,0,2151,2152,3,432,216,0,2152,2153,3,46,23,0,2153,2154,
        5,134,0,0,2154,2157,1,0,0,0,2155,2157,5,134,0,0,2156,2150,1,0,0,
        0,2156,2151,1,0,0,0,2156,2155,1,0,0,0,2157,359,1,0,0,0,2158,2160,
        3,410,205,0,2159,2158,1,0,0,0,2159,2160,1,0,0,0,2160,2169,1,0,0,
        0,2161,2162,5,10,0,0,2162,2163,3,218,109,0,2163,2164,3,364,182,0,
        2164,2170,1,0,0,0,2165,2166,5,81,0,0,2166,2167,3,218,109,0,2167,
        2168,3,362,181,0,2168,2170,1,0,0,0,2169,2161,1,0,0,0,2169,2165,1,
        0,0,0,2170,361,1,0,0,0,2171,2173,3,410,205,0,2172,2171,1,0,0,0,2172,
        2173,1,0,0,0,2173,2174,1,0,0,0,2174,2175,5,10,0,0,2175,2176,3,218,
        109,0,2176,363,1,0,0,0,2177,2179,3,410,205,0,2178,2177,1,0,0,0,2178,
        2179,1,0,0,0,2179,2180,1,0,0,0,2180,2181,5,81,0,0,2181,2182,3,218,
        109,0,2182,365,1,0,0,0,2183,2206,5,135,0,0,2184,2206,5,136,0,0,2185,
        2206,5,143,0,0,2186,2206,5,144,0,0,2187,2206,5,151,0,0,2188,2206,
        5,152,0,0,2189,2206,5,96,0,0,2190,2206,5,42,0,0,2191,2206,5,137,
        0,0,2192,2206,5,138,0,0,2193,2206,5,139,0,0,2194,2206,5,140,0,0,
        2195,2206,5,141,0,0,2196,2206,5,142,0,0,2197,2206,5,168,0,0,2198,
        2206,3,434,217,0,2199,2206,5,156,0,0,2200,2206,5,157,0,0,2201,2206,
        5,147,0,0,2202,2206,5,146,0,0,2203,2206,5,159,0,0,2204,2206,5,158,
        0,0,2205,2183,1,0,0,0,2205,2184,1,0,0,0,2205,2185,1,0,0,0,2205,2186,
        1,0,0,0,2205,2187,1,0,0,0,2205,2188,1,0,0,0,2205,2189,1,0,0,0,2205,
        2190,1,0,0,0,2205,2191,1,0,0,0,2205,2192,1,0,0,0,2205,2193,1,0,0,
        0,2205,2194,1,0,0,0,2205,2195,1,0,0,0,2205,2196,1,0,0,0,2205,2197,
        1,0,0,0,2205,2198,1,0,0,0,2205,2199,1,0,0,0,2205,2200,1,0,0,0,2205,
        2201,1,0,0,0,2205,2202,1,0,0,0,2205,2203,1,0,0,0,2205,2204,1,0,0,
        0,2206,367,1,0,0,0,2207,2208,7,11,0,0,2208,2209,5,70,0,0,2209,2210,
        3,6,3,0,2210,2211,5,129,0,0,2211,2212,3,496,248,0,2212,2213,5,130,
        0,0,2213,369,1,0,0,0,2214,2215,5,133,0,0,2215,2216,7,12,0,0,2216,
        2218,5,129,0,0,2217,2219,3,40,20,0,2218,2217,1,0,0,0,2218,2219,1,
        0,0,0,2219,2220,1,0,0,0,2220,2221,5,130,0,0,2221,371,1,0,0,0,2222,
        2229,3,218,109,0,2223,2229,5,134,0,0,2224,2225,3,432,216,0,2225,
        2226,3,46,23,0,2226,2227,5,134,0,0,2227,2229,1,0,0,0,2228,2222,1,
        0,0,0,2228,2223,1,0,0,0,2228,2224,1,0,0,0,2229,373,1,0,0,0,2230,
        2231,5,133,0,0,2231,2232,3,282,141,0,2232,375,1,0,0,0,2233,2237,
        5,125,0,0,2234,2236,3,378,189,0,2235,2234,1,0,0,0,2236,2239,1,0,
        0,0,2237,2235,1,0,0,0,2237,2238,1,0,0,0,2238,2240,1,0,0,0,2239,2237,
        1,0,0,0,2240,2241,5,126,0,0,2241,377,1,0,0,0,2242,2244,3,410,205,
        0,2243,2242,1,0,0,0,2243,2244,1,0,0,0,2244,2246,1,0,0,0,2245,2247,
        3,316,158,0,2246,2245,1,0,0,0,2246,2247,1,0,0,0,2247,2258,1,0,0,
        0,2248,2259,3,320,160,0,2249,2250,5,44,0,0,2250,2252,3,6,3,0,2251,
        2253,3,430,215,0,2252,2251,1,0,0,0,2253,2254,1,0,0,0,2254,2252,1,
        0,0,0,2254,2255,1,0,0,0,2255,2256,1,0,0,0,2256,2257,5,134,0,0,2257,
        2259,1,0,0,0,2258,2248,1,0,0,0,2258,2249,1,0,0,0,2259,379,1,0,0,
        0,2260,2268,3,8,4,0,2261,2263,7,13,0,0,2262,2261,1,0,0,0,2263,2266,
        1,0,0,0,2264,2262,1,0,0,0,2264,2265,1,0,0,0,2265,2267,1,0,0,0,2266,
        2264,1,0,0,0,2267,2269,3,382,191,0,2268,2264,1,0,0,0,2269,2270,1,
        0,0,0,2270,2268,1,0,0,0,2270,2271,1,0,0,0,2271,381,1,0,0,0,2272,
        2276,5,127,0,0,2273,2275,5,132,0,0,2274,2273,1,0,0,0,2275,2278,1,
        0,0,0,2276,2274,1,0,0,0,2276,2277,1,0,0,0,2277,2279,1,0,0,0,2278,
        2276,1,0,0,0,2279,2280,5,128,0,0,2280,383,1,0,0,0,2281,2293,5,125,
        0,0,2282,2287,3,332,166,0,2283,2284,5,132,0,0,2284,2286,3,332,166,
        0,2285,2283,1,0,0,0,2286,2289,1,0,0,0,2287,2285,1,0,0,0,2287,2288,
        1,0,0,0,2288,2291,1,0,0,0,2289,2287,1,0,0,0,2290,2292,5,132,0,0,
        2291,2290,1,0,0,0,2291,2292,1,0,0,0,2292,2294,1,0,0,0,2293,2282,
        1,0,0,0,2293,2294,1,0,0,0,2294,2295,1,0,0,0,2295,2296,5,126,0,0,
        2296,385,1,0,0,0,2297,2298,5,146,0,0,2298,2303,3,388,194,0,2299,
        2300,5,132,0,0,2300,2302,3,388,194,0,2301,2299,1,0,0,0,2302,2305,
        1,0,0,0,2303,2301,1,0,0,0,2303,2304,1,0,0,0,2304,2306,1,0,0,0,2305,
        2303,1,0,0,0,2306,2307,5,147,0,0,2307,387,1,0,0,0,2308,2310,3,410,
        205,0,2309,2308,1,0,0,0,2309,2310,1,0,0,0,2310,2312,1,0,0,0,2311,
        2313,3,390,195,0,2312,2311,1,0,0,0,2312,2313,1,0,0,0,2313,2314,1,
        0,0,0,2314,2315,3,502,251,0,2315,389,1,0,0,0,2316,2317,7,14,0,0,
        2317,391,1,0,0,0,2318,2319,5,133,0,0,2319,2320,3,282,141,0,2320,
        393,1,0,0,0,2321,2325,5,125,0,0,2322,2324,3,396,198,0,2323,2322,
        1,0,0,0,2324,2327,1,0,0,0,2325,2323,1,0,0,0,2325,2326,1,0,0,0,2326,
        2328,1,0,0,0,2327,2325,1,0,0,0,2328,2329,5,126,0,0,2329,395,1,0,
        0,0,2330,2332,3,410,205,0,2331,2330,1,0,0,0,2331,2332,1,0,0,0,2332,
        2334,1,0,0,0,2333,2335,5,66,0,0,2334,2333,1,0,0,0,2334,2335,1,0,
        0,0,2335,2399,1,0,0,0,2336,2338,5,103,0,0,2337,2336,1,0,0,0,2337,
        2338,1,0,0,0,2338,2344,1,0,0,0,2339,2345,5,80,0,0,2340,2341,5,80,
        0,0,2341,2345,5,79,0,0,2342,2343,5,79,0,0,2343,2345,5,80,0,0,2344,
        2339,1,0,0,0,2344,2340,1,0,0,0,2344,2342,1,0,0,0,2344,2345,1,0,0,
        0,2345,2346,1,0,0,0,2346,2374,3,6,3,0,2347,2349,3,502,251,0,2348,
        2350,3,276,138,0,2349,2348,1,0,0,0,2349,2350,1,0,0,0,2350,2351,1,
        0,0,0,2351,2353,5,129,0,0,2352,2354,3,340,170,0,2353,2352,1,0,0,
        0,2353,2354,1,0,0,0,2354,2355,1,0,0,0,2355,2357,5,130,0,0,2356,2358,
        3,284,142,0,2357,2356,1,0,0,0,2357,2358,1,0,0,0,2358,2359,1,0,0,
        0,2359,2360,5,134,0,0,2360,2375,1,0,0,0,2361,2362,3,502,251,0,2362,
        2363,5,125,0,0,2363,2364,3,398,199,0,2364,2365,5,126,0,0,2365,2375,
        1,0,0,0,2366,2367,5,94,0,0,2367,2368,5,127,0,0,2368,2369,3,340,170,
        0,2369,2370,5,128,0,0,2370,2371,5,125,0,0,2371,2372,3,398,199,0,
        2372,2373,5,126,0,0,2373,2375,1,0,0,0,2374,2347,1,0,0,0,2374,2361,
        1,0,0,0,2374,2366,1,0,0,0,2375,2400,1,0,0,0,2376,2378,5,103,0,0,
        2377,2376,1,0,0,0,2377,2378,1,0,0,0,2378,2379,1,0,0,0,2379,2380,
        5,108,0,0,2380,2382,3,502,251,0,2381,2383,3,276,138,0,2382,2381,
        1,0,0,0,2382,2383,1,0,0,0,2383,2384,1,0,0,0,2384,2386,5,129,0,0,
        2385,2387,3,340,170,0,2386,2385,1,0,0,0,2386,2387,1,0,0,0,2387,2388,
        1,0,0,0,2388,2390,5,130,0,0,2389,2391,3,284,142,0,2390,2389,1,0,
        0,0,2390,2391,1,0,0,0,2391,2392,1,0,0,0,2392,2393,5,134,0,0,2393,
        2400,1,0,0,0,2394,2395,5,39,0,0,2395,2396,3,6,3,0,2396,2397,3,502,
        251,0,2397,2398,5,134,0,0,2398,2400,1,0,0,0,2399,2337,1,0,0,0,2399,
        2377,1,0,0,0,2399,2394,1,0,0,0,2400,397,1,0,0,0,2401,2403,3,410,
        205,0,2402,2401,1,0,0,0,2402,2403,1,0,0,0,2403,2422,1,0,0,0,2404,
        2405,5,49,0,0,2405,2411,5,134,0,0,2406,2408,3,410,205,0,2407,2406,
        1,0,0,0,2407,2408,1,0,0,0,2408,2409,1,0,0,0,2409,2410,5,86,0,0,2410,
        2412,5,134,0,0,2411,2407,1,0,0,0,2411,2412,1,0,0,0,2412,2423,1,0,
        0,0,2413,2414,5,86,0,0,2414,2420,5,134,0,0,2415,2417,3,410,205,0,
        2416,2415,1,0,0,0,2416,2417,1,0,0,0,2417,2418,1,0,0,0,2418,2419,
        5,49,0,0,2419,2421,5,134,0,0,2420,2416,1,0,0,0,2420,2421,1,0,0,0,
        2421,2423,1,0,0,0,2422,2404,1,0,0,0,2422,2413,1,0,0,0,2423,399,1,
        0,0,0,2424,2425,5,133,0,0,2425,2426,3,6,3,0,2426,401,1,0,0,0,2427,
        2439,5,125,0,0,2428,2433,3,404,202,0,2429,2430,5,132,0,0,2430,2432,
        3,404,202,0,2431,2429,1,0,0,0,2432,2435,1,0,0,0,2433,2431,1,0,0,
        0,2433,2434,1,0,0,0,2434,2437,1,0,0,0,2435,2433,1,0,0,0,2436,2438,
        5,132,0,0,2437,2436,1,0,0,0,2437,2438,1,0,0,0,2438,2440,1,0,0,0,
        2439,2428,1,0,0,0,2439,2440,1,0,0,0,2440,2441,1,0,0,0,2441,2442,
        5,126,0,0,2442,403,1,0,0,0,2443,2445,3,410,205,0,2444,2443,1,0,0,
        0,2444,2445,1,0,0,0,2445,2446,1,0,0,0,2446,2449,3,502,251,0,2447,
        2448,5,145,0,0,2448,2450,3,46,23,0,2449,2447,1,0,0,0,2449,2450,1,
        0,0,0,2450,405,1,0,0,0,2451,2452,5,127,0,0,2452,2453,3,408,204,0,
        2453,2454,5,133,0,0,2454,2456,3,416,208,0,2455,2457,5,132,0,0,2456,
        2455,1,0,0,0,2456,2457,1,0,0,0,2457,2458,1,0,0,0,2458,2459,5,128,
        0,0,2459,407,1,0,0,0,2460,2463,3,460,230,0,2461,2463,3,502,251,0,
        2462,2460,1,0,0,0,2462,2461,1,0,0,0,2463,409,1,0,0,0,2464,2466,3,
        412,206,0,2465,2464,1,0,0,0,2466,2467,1,0,0,0,2467,2465,1,0,0,0,
        2467,2468,1,0,0,0,2468,411,1,0,0,0,2469,2473,5,127,0,0,2470,2471,
        3,414,207,0,2471,2472,5,133,0,0,2472,2474,1,0,0,0,2473,2470,1,0,
        0,0,2473,2474,1,0,0,0,2474,2475,1,0,0,0,2475,2477,3,416,208,0,2476,
        2478,5,132,0,0,2477,2476,1,0,0,0,2477,2478,1,0,0,0,2478,2479,1,0,
        0,0,2479,2480,5,128,0,0,2480,413,1,0,0,0,2481,2484,3,460,230,0,2482,
        2484,3,502,251,0,2483,2481,1,0,0,0,2483,2482,1,0,0,0,2484,415,1,
        0,0,0,2485,2490,3,418,209,0,2486,2487,5,132,0,0,2487,2489,3,418,
        209,0,2488,2486,1,0,0,0,2489,2492,1,0,0,0,2490,2488,1,0,0,0,2490,
        2491,1,0,0,0,2491,417,1,0,0,0,2492,2490,1,0,0,0,2493,2506,3,4,2,
        0,2494,2503,5,129,0,0,2495,2500,3,420,210,0,2496,2497,5,132,0,0,
        2497,2499,3,420,210,0,2498,2496,1,0,0,0,2499,2502,1,0,0,0,2500,2498,
        1,0,0,0,2500,2501,1,0,0,0,2501,2504,1,0,0,0,2502,2500,1,0,0,0,2503,
        2495,1,0,0,0,2503,2504,1,0,0,0,2504,2505,1,0,0,0,2505,2507,5,130,
        0,0,2506,2494,1,0,0,0,2506,2507,1,0,0,0,2507,419,1,0,0,0,2508,2509,
        3,502,251,0,2509,2510,5,133,0,0,2510,2512,1,0,0,0,2511,2508,1,0,
        0,0,2511,2512,1,0,0,0,2512,2513,1,0,0,0,2513,2514,3,46,23,0,2514,
        421,1,0,0,0,2515,2518,3,20,10,0,2516,2518,3,36,18,0,2517,2515,1,
        0,0,0,2517,2516,1,0,0,0,2518,2523,1,0,0,0,2519,2522,3,382,191,0,
        2520,2522,5,148,0,0,2521,2519,1,0,0,0,2521,2520,1,0,0,0,2522,2525,
        1,0,0,0,2523,2521,1,0,0,0,2523,2524,1,0,0,0,2524,2526,1,0,0,0,2525,
        2523,1,0,0,0,2526,2527,5,137,0,0,2527,2531,1,0,0,0,2528,2529,5,108,
        0,0,2529,2531,5,137,0,0,2530,2517,1,0,0,0,2530,2528,1,0,0,0,2531,
        423,1,0,0,0,2532,2537,3,426,213,0,2533,2534,5,132,0,0,2534,2536,
        3,426,213,0,2535,2533,1,0,0,0,2536,2539,1,0,0,0,2537,2535,1,0,0,
        0,2537,2538,1,0,0,0,2538,425,1,0,0,0,2539,2537,1,0,0,0,2540,2541,
        3,502,251,0,2541,2542,5,145,0,0,2542,2543,3,428,214,0,2543,427,1,
        0,0,0,2544,2546,5,140,0,0,2545,2544,1,0,0,0,2545,2546,1,0,0,0,2546,
        2547,1,0,0,0,2547,2550,3,46,23,0,2548,2550,3,202,101,0,2549,2545,
        1,0,0,0,2549,2548,1,0,0,0,2550,429,1,0,0,0,2551,2552,3,502,251,0,
        2552,2553,5,127,0,0,2553,2554,3,46,23,0,2554,2555,5,128,0,0,2555,
        431,1,0,0,0,2556,2557,5,145,0,0,2557,2558,5,147,0,0,2558,2559,4,
        216,0,1,2559,433,1,0,0,0,2560,2561,5,147,0,0,2561,2562,5,147,0,0,
        2562,2563,4,217,1,1,2563,435,1,0,0,0,2564,2565,5,147,0,0,2565,2566,
        5,159,0,0,2566,2567,4,218,2,1,2567,437,1,0,0,0,2568,2577,3,440,220,
        0,2569,2577,3,442,221,0,2570,2577,5,116,0,0,2571,2577,5,117,0,0,
        2572,2577,5,118,0,0,2573,2577,5,119,0,0,2574,2577,5,120,0,0,2575,
        2577,5,67,0,0,2576,2568,1,0,0,0,2576,2569,1,0,0,0,2576,2570,1,0,
        0,0,2576,2571,1,0,0,0,2576,2572,1,0,0,0,2576,2573,1,0,0,0,2576,2574,
        1,0,0,0,2576,2575,1,0,0,0,2577,439,1,0,0,0,2578,2579,7,15,0,0,2579,
        441,1,0,0,0,2580,2585,3,444,222,0,2581,2585,3,446,223,0,2582,2585,
        5,121,0,0,2583,2585,5,122,0,0,2584,2580,1,0,0,0,2584,2581,1,0,0,
        0,2584,2582,1,0,0,0,2584,2583,1,0,0,0,2585,443,1,0,0,0,2586,2590,
        5,123,0,0,2587,2589,3,448,224,0,2588,2587,1,0,0,0,2589,2592,1,0,
        0,0,2590,2588,1,0,0,0,2590,2591,1,0,0,0,2591,2593,1,0,0,0,2592,2590,
        1,0,0,0,2593,2594,5,176,0,0,2594,445,1,0,0,0,2595,2599,5,124,0,0,
        2596,2598,3,450,225,0,2597,2596,1,0,0,0,2598,2601,1,0,0,0,2599,2597,
        1,0,0,0,2599,2600,1,0,0,0,2600,2602,1,0,0,0,2601,2599,1,0,0,0,2602,
        2603,5,176,0,0,2603,447,1,0,0,0,2604,2613,3,452,226,0,2605,2613,
        5,172,0,0,2606,2613,5,174,0,0,2607,2613,5,177,0,0,2608,2613,5,173,
        0,0,2609,2613,5,179,0,0,2610,2613,5,176,0,0,2611,2613,5,178,0,0,
        2612,2604,1,0,0,0,2612,2605,1,0,0,0,2612,2606,1,0,0,0,2612,2607,
        1,0,0,0,2612,2608,1,0,0,0,2612,2609,1,0,0,0,2612,2610,1,0,0,0,2612,
        2611,1,0,0,0,2613,449,1,0,0,0,2614,2619,3,452,226,0,2615,2619,5,
        172,0,0,2616,2619,5,175,0,0,2617,2619,5,178,0,0,2618,2614,1,0,0,
        0,2618,2615,1,0,0,0,2618,2616,1,0,0,0,2618,2617,1,0,0,0,2619,451,
        1,0,0,0,2620,2621,5,125,0,0,2621,2624,3,46,23,0,2622,2623,5,132,
        0,0,2623,2625,3,454,227,0,2624,2622,1,0,0,0,2624,2625,1,0,0,0,2625,
        2627,1,0,0,0,2626,2628,3,456,228,0,2627,2626,1,0,0,0,2627,2628,1,
        0,0,0,2628,2629,1,0,0,0,2629,2630,5,126,0,0,2630,453,1,0,0,0,2631,
        2632,3,458,229,0,2632,455,1,0,0,0,2633,2635,5,133,0,0,2634,2636,
        5,180,0,0,2635,2634,1,0,0,0,2636,2637,1,0,0,0,2637,2635,1,0,0,0,
        2637,2638,1,0,0,0,2638,457,1,0,0,0,2639,2640,3,46,23,0,2640,459,
        1,0,0,0,2641,2642,7,16,0,0,2642,461,1,0,0,0,2643,2645,3,464,232,
        0,2644,2643,1,0,0,0,2645,2648,1,0,0,0,2646,2644,1,0,0,0,2646,2647,
        1,0,0,0,2647,2650,1,0,0,0,2648,2646,1,0,0,0,2649,2651,5,75,0,0,2650,
        2649,1,0,0,0,2650,2651,1,0,0,0,2651,2652,1,0,0,0,2652,2653,5,26,
        0,0,2653,2655,3,502,251,0,2654,2656,3,276,138,0,2655,2654,1,0,0,
        0,2655,2656,1,0,0,0,2656,2658,1,0,0,0,2657,2659,3,280,140,0,2658,
        2657,1,0,0,0,2658,2659,1,0,0,0,2659,2661,1,0,0,0,2660,2662,3,284,
        142,0,2661,2660,1,0,0,0,2661,2662,1,0,0,0,2662,2663,1,0,0,0,2663,
        2665,3,310,155,0,2664,2666,5,134,0,0,2665,2664,1,0,0,0,2665,2666,
        1,0,0,0,2666,463,1,0,0,0,2667,2668,7,17,0,0,2668,465,1,0,0,0,2669,
        2671,3,468,234,0,2670,2669,1,0,0,0,2671,2674,1,0,0,0,2672,2670,1,
        0,0,0,2672,2673,1,0,0,0,2673,2676,1,0,0,0,2674,2672,1,0,0,0,2675,
        2677,5,80,0,0,2676,2675,1,0,0,0,2676,2677,1,0,0,0,2677,2679,1,0,
        0,0,2678,2680,5,75,0,0,2679,2678,1,0,0,0,2679,2680,1,0,0,0,2680,
        2681,1,0,0,0,2681,2682,5,92,0,0,2682,2684,3,502,251,0,2683,2685,
        3,276,138,0,2684,2683,1,0,0,0,2684,2685,1,0,0,0,2685,2687,1,0,0,
        0,2686,2688,3,374,187,0,2687,2686,1,0,0,0,2687,2688,1,0,0,0,2688,
        2690,1,0,0,0,2689,2691,3,284,142,0,2690,2689,1,0,0,0,2690,2691,1,
        0,0,0,2691,2692,1,0,0,0,2692,2694,3,376,188,0,2693,2695,5,134,0,
        0,2694,2693,1,0,0,0,2694,2695,1,0,0,0,2695,467,1,0,0,0,2696,2697,
        7,18,0,0,2697,469,1,0,0,0,2698,2699,5,56,0,0,2699,2701,3,502,251,
        0,2700,2702,3,386,193,0,2701,2700,1,0,0,0,2701,2702,1,0,0,0,2702,
        2704,1,0,0,0,2703,2705,3,392,196,0,2704,2703,1,0,0,0,2704,2705,1,
        0,0,0,2705,2707,1,0,0,0,2706,2708,3,284,142,0,2707,2706,1,0,0,0,
        2707,2708,1,0,0,0,2708,2709,1,0,0,0,2709,2711,3,310,155,0,2710,2712,
        5,134,0,0,2711,2710,1,0,0,0,2711,2712,1,0,0,0,2712,471,1,0,0,0,2713,
        2714,5,37,0,0,2714,2716,3,502,251,0,2715,2717,3,400,200,0,2716,2715,
        1,0,0,0,2716,2717,1,0,0,0,2717,2718,1,0,0,0,2718,2720,3,402,201,
        0,2719,2721,5,134,0,0,2720,2719,1,0,0,0,2720,2721,1,0,0,0,2721,473,
        1,0,0,0,2722,2723,5,31,0,0,2723,2724,3,334,167,0,2724,2726,3,502,
        251,0,2725,2727,3,386,193,0,2726,2725,1,0,0,0,2726,2727,1,0,0,0,
        2727,2728,1,0,0,0,2728,2730,5,129,0,0,2729,2731,3,340,170,0,2730,
        2729,1,0,0,0,2730,2731,1,0,0,0,2731,2732,1,0,0,0,2732,2734,5,130,
        0,0,2733,2735,3,284,142,0,2734,2733,1,0,0,0,2734,2735,1,0,0,0,2735,
        2736,1,0,0,0,2736,2737,5,134,0,0,2737,475,1,0,0,0,2738,2739,5,39,
        0,0,2739,2748,3,6,3,0,2740,2741,3,328,164,0,2741,2742,5,134,0,0,
        2742,2749,1,0,0,0,2743,2744,3,336,168,0,2744,2745,5,125,0,0,2745,
        2746,3,360,180,0,2746,2747,5,126,0,0,2747,2749,1,0,0,0,2748,2740,
        1,0,0,0,2748,2743,1,0,0,0,2749,477,1,0,0,0,2750,2751,3,328,164,0,
        2751,2752,5,134,0,0,2752,479,1,0,0,0,2753,2767,3,336,168,0,2754,
        2755,5,125,0,0,2755,2756,3,350,175,0,2756,2761,5,126,0,0,2757,2758,
        5,145,0,0,2758,2759,3,332,166,0,2759,2760,5,134,0,0,2760,2762,1,
        0,0,0,2761,2757,1,0,0,0,2761,2762,1,0,0,0,2762,2768,1,0,0,0,2763,
        2764,3,432,216,0,2764,2765,3,94,47,0,2765,2766,5,134,0,0,2766,2768,
        1,0,0,0,2767,2754,1,0,0,0,2767,2763,1,0,0,0,2768,481,1,0,0,0,2769,
        2770,5,27,0,0,2770,2771,3,6,3,0,2771,2772,3,324,162,0,2772,2773,
        5,134,0,0,2773,483,1,0,0,0,2774,2775,5,94,0,0,2775,2776,5,127,0,
        0,2776,2777,3,340,170,0,2777,2786,5,128,0,0,2778,2779,5,125,0,0,
        2779,2780,3,350,175,0,2780,2781,5,126,0,0,2781,2787,1,0,0,0,2782,
        2783,3,432,216,0,2783,2784,3,94,47,0,2784,2785,5,134,0,0,2785,2787,
        1,0,0,0,2786,2778,1,0,0,0,2786,2782,1,0,0,0,2787,485,1,0,0,0,2788,
        2789,5,144,0,0,2789,2790,3,502,251,0,2790,2791,5,129,0,0,2791,2792,
        5,130,0,0,2792,2793,3,372,186,0,2793,487,1,0,0,0,2794,2795,3,502,
        251,0,2795,2797,5,129,0,0,2796,2798,3,340,170,0,2797,2796,1,0,0,
        0,2797,2798,1,0,0,0,2798,2799,1,0,0,0,2799,2801,5,130,0,0,2800,2802,
        3,370,185,0,2801,2800,1,0,0,0,2801,2802,1,0,0,0,2802,2803,1,0,0,
        0,2803,2804,3,372,186,0,2804,489,1,0,0,0,2805,2807,3,492,246,0,2806,
        2808,3,276,138,0,2807,2806,1,0,0,0,2807,2808,1,0,0,0,2808,2809,1,
        0,0,0,2809,2811,5,129,0,0,2810,2812,3,340,170,0,2811,2810,1,0,0,
        0,2811,2812,1,0,0,0,2812,2813,1,0,0,0,2813,2815,5,130,0,0,2814,2816,
        3,284,142,0,2815,2814,1,0,0,0,2815,2816,1,0,0,0,2816,2822,1,0,0,
        0,2817,2823,3,338,169,0,2818,2819,3,432,216,0,2819,2820,3,94,47,
        0,2820,2821,5,134,0,0,2821,2823,1,0,0,0,2822,2817,1,0,0,0,2822,2818,
        1,0,0,0,2823,491,1,0,0,0,2824,2830,3,502,251,0,2825,2826,3,502,251,
        0,2826,2827,5,149,0,0,2827,2828,3,502,251,0,2828,2830,1,0,0,0,2829,
        2824,1,0,0,0,2829,2825,1,0,0,0,2830,2838,1,0,0,0,2831,2833,3,38,
        19,0,2832,2831,1,0,0,0,2832,2833,1,0,0,0,2833,2834,1,0,0,0,2834,
        2835,5,131,0,0,2835,2837,3,502,251,0,2836,2832,1,0,0,0,2837,2840,
        1,0,0,0,2838,2836,1,0,0,0,2838,2839,1,0,0,0,2839,493,1,0,0,0,2840,
        2838,1,0,0,0,2841,2842,5,70,0,0,2842,2843,3,366,183,0,2843,2845,
        5,129,0,0,2844,2846,5,54,0,0,2845,2844,1,0,0,0,2845,2846,1,0,0,0,
        2846,2847,1,0,0,0,2847,2853,3,496,248,0,2848,2850,5,132,0,0,2849,
        2851,5,54,0,0,2850,2849,1,0,0,0,2850,2851,1,0,0,0,2851,2852,1,0,
        0,0,2852,2854,3,496,248,0,2853,2848,1,0,0,0,2853,2854,1,0,0,0,2854,
        2855,1,0,0,0,2855,2861,5,130,0,0,2856,2862,3,372,186,0,2857,2858,
        3,432,216,0,2858,2859,3,94,47,0,2859,2860,5,134,0,0,2860,2862,1,
        0,0,0,2861,2856,1,0,0,0,2861,2857,1,0,0,0,2862,495,1,0,0,0,2863,
        2864,3,6,3,0,2864,2867,3,502,251,0,2865,2866,5,145,0,0,2866,2868,
        3,46,23,0,2867,2865,1,0,0,0,2867,2868,1,0,0,0,2868,497,1,0,0,0,2869,
        2871,5,129,0,0,2870,2872,3,40,20,0,2871,2870,1,0,0,0,2871,2872,1,
        0,0,0,2872,2873,1,0,0,0,2873,2874,5,130,0,0,2874,499,1,0,0,0,2875,
        2877,5,129,0,0,2876,2878,3,40,20,0,2877,2876,1,0,0,0,2877,2878,1,
        0,0,0,2878,2879,1,0,0,0,2879,2881,5,130,0,0,2880,2882,3,108,54,0,
        2881,2880,1,0,0,0,2881,2882,1,0,0,0,2882,501,1,0,0,0,2883,2884,7,
        19,0,0,2884,503,1,0,0,0,360,505,508,511,514,517,520,527,531,534,
        539,543,550,552,560,568,573,576,586,592,594,598,602,607,615,630,
        638,648,652,655,660,663,672,677,687,700,717,723,725,732,740,748,
        756,764,772,784,786,792,797,805,813,821,823,826,833,838,845,849,
        851,875,884,889,893,901,904,909,913,917,923,928,942,948,960,964,
        969,973,979,987,996,1014,1017,1022,1025,1040,1046,1050,1056,1061,
        1064,1072,1080,1091,1096,1101,1103,1112,1120,1128,1136,1140,1149,
        1154,1156,1165,1173,1177,1182,1184,1189,1193,1200,1208,1210,1214,
        1217,1220,1228,1238,1255,1262,1266,1276,1281,1288,1297,1302,1309,
        1321,1332,1340,1345,1354,1363,1372,1378,1383,1387,1391,1395,1401,
        1408,1428,1450,1454,1458,1463,1470,1486,1491,1496,1507,1525,1541,
        1551,1555,1559,1570,1574,1592,1611,1615,1619,1627,1635,1647,1651,
        1656,1659,1665,1674,1681,1688,1694,1702,1710,1713,1720,1727,1731,
        1734,1740,1744,1750,1764,1770,1777,1782,1785,1788,1795,1805,1822,
        1827,1831,1834,1837,1844,1850,1858,1864,1874,1882,1888,1899,1903,
        1905,1910,1914,1919,1940,1949,1956,1959,1962,1966,1971,1984,1994,
        2001,2013,2020,2032,2038,2042,2046,2056,2062,2064,2071,2075,2078,
        2082,2092,2095,2102,2105,2110,2115,2117,2120,2123,2129,2132,2148,
        2156,2159,2169,2172,2178,2205,2218,2228,2237,2243,2246,2254,2258,
        2264,2270,2276,2287,2291,2293,2303,2309,2312,2325,2331,2334,2337,
        2344,2349,2353,2357,2374,2377,2382,2386,2390,2399,2402,2407,2411,
        2416,2420,2422,2433,2437,2439,2444,2449,2456,2462,2467,2473,2477,
        2483,2490,2500,2503,2506,2511,2517,2521,2523,2530,2537,2545,2549,
        2576,2584,2590,2599,2612,2618,2624,2627,2637,2646,2650,2655,2658,
        2661,2665,2672,2676,2679,2684,2687,2690,2694,2701,2704,2707,2711,
        2716,2720,2726,2730,2734,2748,2761,2767,2786,2797,2801,2807,2811,
        2815,2822,2829,2832,2838,2845,2850,2853,2861,2867,2871,2877,2881
    ]

class CSharpParser ( CSharpParserBase ):

    grammarFileName = "CSharpParser.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "'\\u00EF\\u00BB\\u00BF'", "<INVALID>", 
                     "'/***/'", "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "'#'", "'abstract'", "'add'", "'alias'", "'__arglist'", 
                     "'as'", "'ascending'", "'async'", "'await'", "'base'", 
                     "'bool'", "'break'", "'by'", "'byte'", "'case'", "'catch'", 
                     "'char'", "'checked'", "'class'", "'const'", "'continue'", 
                     "'decimal'", "'default'", "'delegate'", "'descending'", 
                     "'do'", "'double'", "'dynamic'", "'else'", "'enum'", 
                     "'equals'", "'event'", "'explicit'", "'extern'", "'false'", 
                     "'finally'", "'fixed'", "'float'", "'for'", "'foreach'", 
                     "'from'", "'get'", "'goto'", "'group'", "'if'", "'implicit'", 
                     "'in'", "'int'", "'interface'", "'internal'", "'into'", 
                     "'is'", "'join'", "'let'", "'lock'", "'long'", "'nameof'", 
                     "'namespace'", "'new'", "'null'", "'object'", "'on'", 
                     "'operator'", "'orderby'", "'out'", "'override'", "'params'", 
                     "'partial'", "'private'", "'protected'", "'public'", 
                     "'readonly'", "'ref'", "'remove'", "'return'", "'sbyte'", 
                     "'sealed'", "'select'", "'set'", "'short'", "'sizeof'", 
                     "'stackalloc'", "'static'", "'string'", "'struct'", 
                     "'switch'", "'this'", "'throw'", "'true'", "'try'", 
                     "'typeof'", "'uint'", "'ulong'", "'unchecked'", "'unmanaged'", 
                     "'unsafe'", "'ushort'", "'using'", "'var'", "'virtual'", 
                     "'void'", "'volatile'", "'when'", "'where'", "'while'", 
                     "'yield'", "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "'{'", "'}'", 
                     "'['", "']'", "'('", "')'", "'.'", "','", "':'", "';'", 
                     "'+'", "'-'", "'*'", "'/'", "'%'", "'&'", "'|'", "'^'", 
                     "'!'", "'~'", "'='", "'<'", "'>'", "'?'", "'::'", "'??'", 
                     "'++'", "'--'", "'&&'", "'||'", "'->'", "'=='", "'!='", 
                     "'<='", "'>='", "'+='", "'-='", "'*='", "'/='", "'%='", 
                     "'&='", "'|='", "'^='", "'<<'", "'<<='", "'??='", "'..'", 
                     "'{{'", "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "'define'", "'undef'", "'elif'", 
                     "'endif'", "'line'", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "'hidden'", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "'}}'" ]

    symbolicNames = [ "<INVALID>", "BYTE_ORDER_MARK", "SINGLE_LINE_DOC_COMMENT", 
                      "EMPTY_DELIMITED_DOC_COMMENT", "DELIMITED_DOC_COMMENT", 
                      "SINGLE_LINE_COMMENT", "DELIMITED_COMMENT", "WHITESPACES", 
                      "SHARP", "ABSTRACT", "ADD", "ALIAS", "ARGLIST", "AS", 
                      "ASCENDING", "ASYNC", "AWAIT", "BASE", "BOOL", "BREAK", 
                      "BY", "BYTE", "CASE", "CATCH", "CHAR", "CHECKED", 
                      "CLASS", "CONST", "CONTINUE", "DECIMAL", "DEFAULT", 
                      "DELEGATE", "DESCENDING", "DO", "DOUBLE", "DYNAMIC", 
                      "ELSE", "ENUM", "EQUALS", "EVENT", "EXPLICIT", "EXTERN", 
                      "FALSE", "FINALLY", "FIXED", "FLOAT", "FOR", "FOREACH", 
                      "FROM", "GET", "GOTO", "GROUP", "IF", "IMPLICIT", 
                      "IN", "INT", "INTERFACE", "INTERNAL", "INTO", "IS", 
                      "JOIN", "LET", "LOCK", "LONG", "NAMEOF", "NAMESPACE", 
                      "NEW", "NULL_", "OBJECT", "ON", "OPERATOR", "ORDERBY", 
                      "OUT", "OVERRIDE", "PARAMS", "PARTIAL", "PRIVATE", 
                      "PROTECTED", "PUBLIC", "READONLY", "REF", "REMOVE", 
                      "RETURN", "SBYTE", "SEALED", "SELECT", "SET", "SHORT", 
                      "SIZEOF", "STACKALLOC", "STATIC", "STRING", "STRUCT", 
                      "SWITCH", "THIS", "THROW", "TRUE", "TRY", "TYPEOF", 
                      "UINT", "ULONG", "UNCHECKED", "UNMANAGED", "UNSAFE", 
                      "USHORT", "USING", "VAR", "VIRTUAL", "VOID", "VOLATILE", 
                      "WHEN", "WHERE", "WHILE", "YIELD", "IDENTIFIER", "LITERAL_ACCESS", 
                      "INTEGER_LITERAL", "HEX_INTEGER_LITERAL", "BIN_INTEGER_LITERAL", 
                      "REAL_LITERAL", "CHARACTER_LITERAL", "REGULAR_STRING", 
                      "VERBATIUM_STRING", "INTERPOLATED_REGULAR_STRING_START", 
                      "INTERPOLATED_VERBATIUM_STRING_START", "OPEN_BRACE", 
                      "CLOSE_BRACE", "OPEN_BRACKET", "CLOSE_BRACKET", "OPEN_PARENS", 
                      "CLOSE_PARENS", "DOT", "COMMA", "COLON", "SEMICOLON", 
                      "PLUS", "MINUS", "STAR", "DIV", "PERCENT", "AMP", 
                      "BITWISE_OR", "CARET", "BANG", "TILDE", "ASSIGNMENT", 
                      "LT", "GT", "INTERR", "DOUBLE_COLON", "OP_COALESCING", 
                      "OP_INC", "OP_DEC", "OP_AND", "OP_OR", "OP_PTR", "OP_EQ", 
                      "OP_NE", "OP_LE", "OP_GE", "OP_ADD_ASSIGNMENT", "OP_SUB_ASSIGNMENT", 
                      "OP_MULT_ASSIGNMENT", "OP_DIV_ASSIGNMENT", "OP_MOD_ASSIGNMENT", 
                      "OP_AND_ASSIGNMENT", "OP_OR_ASSIGNMENT", "OP_XOR_ASSIGNMENT", 
                      "OP_LEFT_SHIFT", "OP_LEFT_SHIFT_ASSIGNMENT", "OP_COALESCING_ASSIGNMENT", 
                      "OP_RANGE", "DOUBLE_CURLY_INSIDE", "OPEN_BRACE_INSIDE", 
                      "REGULAR_CHAR_INSIDE", "VERBATIUM_DOUBLE_QUOTE_INSIDE", 
                      "DOUBLE_QUOTE_INSIDE", "REGULAR_STRING_INSIDE", "VERBATIUM_INSIDE_STRING", 
                      "CLOSE_BRACE_INSIDE", "FORMAT_STRING", "DIRECTIVE_WHITESPACES", 
                      "DIGITS", "DEFINE", "UNDEF", "ELIF", "ENDIF", "LINE", 
                      "ERROR", "WARNING", "REGION", "ENDREGION", "PRAGMA", 
                      "NULLABLE", "DIRECTIVE_HIDDEN", "CONDITIONAL_SYMBOL", 
                      "DIRECTIVE_NEW_LINE", "TEXT", "DOUBLE_CURLY_CLOSE_INSIDE" ]

    RULE_compilation_unit = 0
    RULE_top_level_statements = 1
    RULE_namespace_or_type_name = 2
    RULE_type_ = 3
    RULE_base_type = 4
    RULE_tuple_type = 5
    RULE_deconstruction_expression = 6
    RULE_deconstruction_tuple = 7
    RULE_deconstruction_element = 8
    RULE_tuple_element = 9
    RULE_simple_type = 10
    RULE_numeric_type = 11
    RULE_integral_type = 12
    RULE_floating_point_type = 13
    RULE_default_value_expression = 14
    RULE_explictly_typed_default = 15
    RULE_default_literal = 16
    RULE_variable_reference = 17
    RULE_class_type = 18
    RULE_type_argument_list = 19
    RULE_argument_list = 20
    RULE_argument = 21
    RULE_argument_name = 22
    RULE_expression = 23
    RULE_non_assignment_expression = 24
    RULE_assignment = 25
    RULE_assignment_operator = 26
    RULE_conditional_expression = 27
    RULE_null_coalescing_expression = 28
    RULE_conditional_or_expression = 29
    RULE_conditional_and_expression = 30
    RULE_inclusive_or_expression = 31
    RULE_exclusive_or_expression = 32
    RULE_and_expression = 33
    RULE_equality_expression = 34
    RULE_relational_expression = 35
    RULE_shift_expression = 36
    RULE_additive_expression = 37
    RULE_multiplicative_expression = 38
    RULE_switch_expression = 39
    RULE_switch_expression_arms = 40
    RULE_switch_expression_arm = 41
    RULE_range_expression = 42
    RULE_unary_expression = 43
    RULE_cast_expression = 44
    RULE_primary_expression = 45
    RULE_primary_expression_start = 46
    RULE_throwable_expression = 47
    RULE_throw_expression = 48
    RULE_member_access = 49
    RULE_bracket_expression = 50
    RULE_indexer_argument = 51
    RULE_predefined_type = 52
    RULE_expression_list = 53
    RULE_object_or_collection_initializer = 54
    RULE_object_initializer = 55
    RULE_member_initializer_list = 56
    RULE_member_initializer = 57
    RULE_initializer_value = 58
    RULE_collection_initializer = 59
    RULE_element_initializer = 60
    RULE_anonymous_object_initializer = 61
    RULE_member_declarator_list = 62
    RULE_member_declarator = 63
    RULE_unbound_type_name = 64
    RULE_generic_dimension_specifier = 65
    RULE_isType = 66
    RULE_isTypePatternArms = 67
    RULE_isTypePatternArm = 68
    RULE_lambda_expression = 69
    RULE_anonymous_function_signature = 70
    RULE_explicit_anonymous_function_parameter_list = 71
    RULE_explicit_anonymous_function_parameter = 72
    RULE_implicit_anonymous_function_parameter_list = 73
    RULE_anonymous_function_body = 74
    RULE_query_expression = 75
    RULE_from_clause = 76
    RULE_query_body = 77
    RULE_query_body_clause = 78
    RULE_let_clause = 79
    RULE_where_clause = 80
    RULE_combined_join_clause = 81
    RULE_orderby_clause = 82
    RULE_ordering = 83
    RULE_select_or_group_clause = 84
    RULE_query_continuation = 85
    RULE_statement = 86
    RULE_declarationStatement = 87
    RULE_local_function_declaration = 88
    RULE_local_function_header = 89
    RULE_local_function_modifiers = 90
    RULE_local_function_body = 91
    RULE_labeled_Statement = 92
    RULE_embedded_statement = 93
    RULE_empty_statement = 94
    RULE_if_statement = 95
    RULE_checked_statement = 96
    RULE_unchecked_statement = 97
    RULE_lock_statement = 98
    RULE_unmanaged_type = 99
    RULE_stackalloc_expression = 100
    RULE_stackalloc_initializer = 101
    RULE_stackalloc_initializer_element_list = 102
    RULE_stackalloc_element_initializer = 103
    RULE_using_statement = 104
    RULE_yield_statement = 105
    RULE_fixed_statement = 106
    RULE_unsafe_statement = 107
    RULE_try_statement = 108
    RULE_block = 109
    RULE_local_variable_declaration = 110
    RULE_local_variable_type = 111
    RULE_local_variable_declarator = 112
    RULE_local_variable_initializer = 113
    RULE_local_constant_declaration = 114
    RULE_switch_section = 115
    RULE_switch_label = 116
    RULE_case_guard = 117
    RULE_statement_list = 118
    RULE_for_initializer = 119
    RULE_for_iterator = 120
    RULE_catch_clauses = 121
    RULE_specific_catch_clause = 122
    RULE_general_catch_clause = 123
    RULE_exception_filter = 124
    RULE_finally_clause = 125
    RULE_resource_acquisition = 126
    RULE_namespace_declaration = 127
    RULE_qualified_identifier = 128
    RULE_namespace_body = 129
    RULE_extern_alias_directives = 130
    RULE_extern_alias_directive = 131
    RULE_using_directives = 132
    RULE_using_directive = 133
    RULE_namespace_member_declarations = 134
    RULE_namespace_member_declaration = 135
    RULE_type_declaration = 136
    RULE_qualified_alias_member = 137
    RULE_type_parameter_list = 138
    RULE_type_parameter = 139
    RULE_class_base = 140
    RULE_interface_type_list = 141
    RULE_type_parameter_constraints_clauses = 142
    RULE_type_parameter_constraints_clause = 143
    RULE_type_parameter_constraints = 144
    RULE_primary_constraint = 145
    RULE_pattern = 146
    RULE_declaration_pattern = 147
    RULE_simple_designation = 148
    RULE_single_variable_designation = 149
    RULE_constant_pattern = 150
    RULE_var_pattern = 151
    RULE_designation = 152
    RULE_secondary_constraints = 153
    RULE_constructor_constraint = 154
    RULE_class_body = 155
    RULE_class_member_declarations = 156
    RULE_class_member_declaration = 157
    RULE_all_member_modifiers = 158
    RULE_all_member_modifier = 159
    RULE_common_member_declaration = 160
    RULE_typed_member_declaration = 161
    RULE_constant_declarators = 162
    RULE_constant_declarator = 163
    RULE_variable_declarators = 164
    RULE_variable_declarator = 165
    RULE_variable_initializer = 166
    RULE_return_type = 167
    RULE_member_name = 168
    RULE_method_body = 169
    RULE_formal_parameter_list = 170
    RULE_fixed_parameters = 171
    RULE_fixed_parameter = 172
    RULE_parameter_modifier = 173
    RULE_parameter_array = 174
    RULE_accessor_declarations = 175
    RULE_get_accessor_declaration = 176
    RULE_set_accessor_declaration = 177
    RULE_accessor_modifier = 178
    RULE_accessor_body = 179
    RULE_event_accessor_declarations = 180
    RULE_add_accessor_declaration = 181
    RULE_remove_accessor_declaration = 182
    RULE_overloadable_operator = 183
    RULE_conversion_operator_declarator = 184
    RULE_constructor_initializer = 185
    RULE_body = 186
    RULE_struct_interfaces = 187
    RULE_struct_body = 188
    RULE_struct_member_declaration = 189
    RULE_array_type = 190
    RULE_rank_specifier = 191
    RULE_array_initializer = 192
    RULE_variant_type_parameter_list = 193
    RULE_variant_type_parameter = 194
    RULE_variance_annotation = 195
    RULE_interface_base = 196
    RULE_interface_body = 197
    RULE_interface_member_declaration = 198
    RULE_interface_accessors = 199
    RULE_enum_base = 200
    RULE_enum_body = 201
    RULE_enum_member_declaration = 202
    RULE_global_attribute_section = 203
    RULE_global_attribute_target = 204
    RULE_attributes = 205
    RULE_attribute_section = 206
    RULE_attribute_target = 207
    RULE_attribute_list = 208
    RULE_attribute = 209
    RULE_attribute_argument = 210
    RULE_pointer_type = 211
    RULE_fixed_pointer_declarators = 212
    RULE_fixed_pointer_declarator = 213
    RULE_fixed_pointer_initializer = 214
    RULE_fixed_size_buffer_declarator = 215
    RULE_right_arrow = 216
    RULE_right_shift = 217
    RULE_right_shift_assignment = 218
    RULE_literal = 219
    RULE_boolean_literal = 220
    RULE_string_literal = 221
    RULE_interpolated_regular_string = 222
    RULE_interpolated_verbatium_string = 223
    RULE_interpolated_regular_string_part = 224
    RULE_interpolated_verbatium_string_part = 225
    RULE_interpolated_string_expression = 226
    RULE_interpolation_minimum_width = 227
    RULE_format_string = 228
    RULE_constant_expression = 229
    RULE_keyword = 230
    RULE_class_definition = 231
    RULE_class_modifier = 232
    RULE_struct_definition = 233
    RULE_struct_modifier = 234
    RULE_interface_definition = 235
    RULE_enum_definition = 236
    RULE_delegate_definition = 237
    RULE_event_declaration = 238
    RULE_field_declaration = 239
    RULE_property_declaration = 240
    RULE_constant_declaration = 241
    RULE_indexer_declaration = 242
    RULE_destructor_definition = 243
    RULE_constructor_declaration = 244
    RULE_method_declaration = 245
    RULE_method_member_name = 246
    RULE_operator_declaration = 247
    RULE_arg_declaration = 248
    RULE_method_invocation = 249
    RULE_object_creation_expression = 250
    RULE_identifier = 251

    ruleNames =  [ "compilation_unit", "top_level_statements", "namespace_or_type_name", 
                   "type_", "base_type", "tuple_type", "deconstruction_expression", 
                   "deconstruction_tuple", "deconstruction_element", "tuple_element", 
                   "simple_type", "numeric_type", "integral_type", "floating_point_type", 
                   "default_value_expression", "explictly_typed_default", 
                   "default_literal", "variable_reference", "class_type", 
                   "type_argument_list", "argument_list", "argument", "argument_name", 
                   "expression", "non_assignment_expression", "assignment", 
                   "assignment_operator", "conditional_expression", "null_coalescing_expression", 
                   "conditional_or_expression", "conditional_and_expression", 
                   "inclusive_or_expression", "exclusive_or_expression", 
                   "and_expression", "equality_expression", "relational_expression", 
                   "shift_expression", "additive_expression", "multiplicative_expression", 
                   "switch_expression", "switch_expression_arms", "switch_expression_arm", 
                   "range_expression", "unary_expression", "cast_expression", 
                   "primary_expression", "primary_expression_start", "throwable_expression", 
                   "throw_expression", "member_access", "bracket_expression", 
                   "indexer_argument", "predefined_type", "expression_list", 
                   "object_or_collection_initializer", "object_initializer", 
                   "member_initializer_list", "member_initializer", "initializer_value", 
                   "collection_initializer", "element_initializer", "anonymous_object_initializer", 
                   "member_declarator_list", "member_declarator", "unbound_type_name", 
                   "generic_dimension_specifier", "isType", "isTypePatternArms", 
                   "isTypePatternArm", "lambda_expression", "anonymous_function_signature", 
                   "explicit_anonymous_function_parameter_list", "explicit_anonymous_function_parameter", 
                   "implicit_anonymous_function_parameter_list", "anonymous_function_body", 
                   "query_expression", "from_clause", "query_body", "query_body_clause", 
                   "let_clause", "where_clause", "combined_join_clause", 
                   "orderby_clause", "ordering", "select_or_group_clause", 
                   "query_continuation", "statement", "declarationStatement", 
                   "local_function_declaration", "local_function_header", 
                   "local_function_modifiers", "local_function_body", "labeled_Statement", 
                   "embedded_statement", "empty_statement", "if_statement", 
                   "checked_statement", "unchecked_statement", "lock_statement", 
                   "unmanaged_type", "stackalloc_expression", "stackalloc_initializer", 
                   "stackalloc_initializer_element_list", "stackalloc_element_initializer", 
                   "using_statement", "yield_statement", "fixed_statement", 
                   "unsafe_statement", "try_statement", "block", "local_variable_declaration", 
                   "local_variable_type", "local_variable_declarator", "local_variable_initializer", 
                   "local_constant_declaration", "switch_section", "switch_label", 
                   "case_guard", "statement_list", "for_initializer", "for_iterator", 
                   "catch_clauses", "specific_catch_clause", "general_catch_clause", 
                   "exception_filter", "finally_clause", "resource_acquisition", 
                   "namespace_declaration", "qualified_identifier", "namespace_body", 
                   "extern_alias_directives", "extern_alias_directive", 
                   "using_directives", "using_directive", "namespace_member_declarations", 
                   "namespace_member_declaration", "type_declaration", "qualified_alias_member", 
                   "type_parameter_list", "type_parameter", "class_base", 
                   "interface_type_list", "type_parameter_constraints_clauses", 
                   "type_parameter_constraints_clause", "type_parameter_constraints", 
                   "primary_constraint", "pattern", "declaration_pattern", 
                   "simple_designation", "single_variable_designation", 
                   "constant_pattern", "var_pattern", "designation", "secondary_constraints", 
                   "constructor_constraint", "class_body", "class_member_declarations", 
                   "class_member_declaration", "all_member_modifiers", "all_member_modifier", 
                   "common_member_declaration", "typed_member_declaration", 
                   "constant_declarators", "constant_declarator", "variable_declarators", 
                   "variable_declarator", "variable_initializer", "return_type", 
                   "member_name", "method_body", "formal_parameter_list", 
                   "fixed_parameters", "fixed_parameter", "parameter_modifier", 
                   "parameter_array", "accessor_declarations", "get_accessor_declaration", 
                   "set_accessor_declaration", "accessor_modifier", "accessor_body", 
                   "event_accessor_declarations", "add_accessor_declaration", 
                   "remove_accessor_declaration", "overloadable_operator", 
                   "conversion_operator_declarator", "constructor_initializer", 
                   "body", "struct_interfaces", "struct_body", "struct_member_declaration", 
                   "array_type", "rank_specifier", "array_initializer", 
                   "variant_type_parameter_list", "variant_type_parameter", 
                   "variance_annotation", "interface_base", "interface_body", 
                   "interface_member_declaration", "interface_accessors", 
                   "enum_base", "enum_body", "enum_member_declaration", 
                   "global_attribute_section", "global_attribute_target", 
                   "attributes", "attribute_section", "attribute_target", 
                   "attribute_list", "attribute", "attribute_argument", 
                   "pointer_type", "fixed_pointer_declarators", "fixed_pointer_declarator", 
                   "fixed_pointer_initializer", "fixed_size_buffer_declarator", 
                   "right_arrow", "right_shift", "right_shift_assignment", 
                   "literal", "boolean_literal", "string_literal", "interpolated_regular_string", 
                   "interpolated_verbatium_string", "interpolated_regular_string_part", 
                   "interpolated_verbatium_string_part", "interpolated_string_expression", 
                   "interpolation_minimum_width", "format_string", "constant_expression", 
                   "keyword", "class_definition", "class_modifier", "struct_definition", 
                   "struct_modifier", "interface_definition", "enum_definition", 
                   "delegate_definition", "event_declaration", "field_declaration", 
                   "property_declaration", "constant_declaration", "indexer_declaration", 
                   "destructor_definition", "constructor_declaration", "method_declaration", 
                   "method_member_name", "operator_declaration", "arg_declaration", 
                   "method_invocation", "object_creation_expression", "identifier" ]

    EOF = Token.EOF
    BYTE_ORDER_MARK=1
    SINGLE_LINE_DOC_COMMENT=2
    EMPTY_DELIMITED_DOC_COMMENT=3
    DELIMITED_DOC_COMMENT=4
    SINGLE_LINE_COMMENT=5
    DELIMITED_COMMENT=6
    WHITESPACES=7
    SHARP=8
    ABSTRACT=9
    ADD=10
    ALIAS=11
    ARGLIST=12
    AS=13
    ASCENDING=14
    ASYNC=15
    AWAIT=16
    BASE=17
    BOOL=18
    BREAK=19
    BY=20
    BYTE=21
    CASE=22
    CATCH=23
    CHAR=24
    CHECKED=25
    CLASS=26
    CONST=27
    CONTINUE=28
    DECIMAL=29
    DEFAULT=30
    DELEGATE=31
    DESCENDING=32
    DO=33
    DOUBLE=34
    DYNAMIC=35
    ELSE=36
    ENUM=37
    EQUALS=38
    EVENT=39
    EXPLICIT=40
    EXTERN=41
    FALSE=42
    FINALLY=43
    FIXED=44
    FLOAT=45
    FOR=46
    FOREACH=47
    FROM=48
    GET=49
    GOTO=50
    GROUP=51
    IF=52
    IMPLICIT=53
    IN=54
    INT=55
    INTERFACE=56
    INTERNAL=57
    INTO=58
    IS=59
    JOIN=60
    LET=61
    LOCK=62
    LONG=63
    NAMEOF=64
    NAMESPACE=65
    NEW=66
    NULL_=67
    OBJECT=68
    ON=69
    OPERATOR=70
    ORDERBY=71
    OUT=72
    OVERRIDE=73
    PARAMS=74
    PARTIAL=75
    PRIVATE=76
    PROTECTED=77
    PUBLIC=78
    READONLY=79
    REF=80
    REMOVE=81
    RETURN=82
    SBYTE=83
    SEALED=84
    SELECT=85
    SET=86
    SHORT=87
    SIZEOF=88
    STACKALLOC=89
    STATIC=90
    STRING=91
    STRUCT=92
    SWITCH=93
    THIS=94
    THROW=95
    TRUE=96
    TRY=97
    TYPEOF=98
    UINT=99
    ULONG=100
    UNCHECKED=101
    UNMANAGED=102
    UNSAFE=103
    USHORT=104
    USING=105
    VAR=106
    VIRTUAL=107
    VOID=108
    VOLATILE=109
    WHEN=110
    WHERE=111
    WHILE=112
    YIELD=113
    IDENTIFIER=114
    LITERAL_ACCESS=115
    INTEGER_LITERAL=116
    HEX_INTEGER_LITERAL=117
    BIN_INTEGER_LITERAL=118
    REAL_LITERAL=119
    CHARACTER_LITERAL=120
    REGULAR_STRING=121
    VERBATIUM_STRING=122
    INTERPOLATED_REGULAR_STRING_START=123
    INTERPOLATED_VERBATIUM_STRING_START=124
    OPEN_BRACE=125
    CLOSE_BRACE=126
    OPEN_BRACKET=127
    CLOSE_BRACKET=128
    OPEN_PARENS=129
    CLOSE_PARENS=130
    DOT=131
    COMMA=132
    COLON=133
    SEMICOLON=134
    PLUS=135
    MINUS=136
    STAR=137
    DIV=138
    PERCENT=139
    AMP=140
    BITWISE_OR=141
    CARET=142
    BANG=143
    TILDE=144
    ASSIGNMENT=145
    LT=146
    GT=147
    INTERR=148
    DOUBLE_COLON=149
    OP_COALESCING=150
    OP_INC=151
    OP_DEC=152
    OP_AND=153
    OP_OR=154
    OP_PTR=155
    OP_EQ=156
    OP_NE=157
    OP_LE=158
    OP_GE=159
    OP_ADD_ASSIGNMENT=160
    OP_SUB_ASSIGNMENT=161
    OP_MULT_ASSIGNMENT=162
    OP_DIV_ASSIGNMENT=163
    OP_MOD_ASSIGNMENT=164
    OP_AND_ASSIGNMENT=165
    OP_OR_ASSIGNMENT=166
    OP_XOR_ASSIGNMENT=167
    OP_LEFT_SHIFT=168
    OP_LEFT_SHIFT_ASSIGNMENT=169
    OP_COALESCING_ASSIGNMENT=170
    OP_RANGE=171
    DOUBLE_CURLY_INSIDE=172
    OPEN_BRACE_INSIDE=173
    REGULAR_CHAR_INSIDE=174
    VERBATIUM_DOUBLE_QUOTE_INSIDE=175
    DOUBLE_QUOTE_INSIDE=176
    REGULAR_STRING_INSIDE=177
    VERBATIUM_INSIDE_STRING=178
    CLOSE_BRACE_INSIDE=179
    FORMAT_STRING=180
    DIRECTIVE_WHITESPACES=181
    DIGITS=182
    DEFINE=183
    UNDEF=184
    ELIF=185
    ENDIF=186
    LINE=187
    ERROR=188
    WARNING=189
    REGION=190
    ENDREGION=191
    PRAGMA=192
    NULLABLE=193
    DIRECTIVE_HIDDEN=194
    CONDITIONAL_SYMBOL=195
    DIRECTIVE_NEW_LINE=196
    TEXT=197
    DOUBLE_CURLY_CLOSE_INSIDE=198

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.2")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class Compilation_unitContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(CSharpParser.EOF, 0)

        def BYTE_ORDER_MARK(self):
            return self.getToken(CSharpParser.BYTE_ORDER_MARK, 0)

        def extern_alias_directives(self):
            return self.getTypedRuleContext(CSharpParser.Extern_alias_directivesContext,0)


        def using_directives(self):
            return self.getTypedRuleContext(CSharpParser.Using_directivesContext,0)


        def global_attribute_section(self):
            return self.getTypedRuleContext(CSharpParser.Global_attribute_sectionContext,0)


        def namespace_member_declarations(self):
            return self.getTypedRuleContext(CSharpParser.Namespace_member_declarationsContext,0)


        def top_level_statements(self):
            return self.getTypedRuleContext(CSharpParser.Top_level_statementsContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_compilation_unit

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCompilation_unit" ):
                listener.enterCompilation_unit(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCompilation_unit" ):
                listener.exitCompilation_unit(self)




    def compilation_unit(self):

        localctx = CSharpParser.Compilation_unitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_compilation_unit)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 505
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==1:
                self.state = 504
                self.match(CSharpParser.BYTE_ORDER_MARK)


            self.state = 508
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1,self._ctx)
            if la_ == 1:
                self.state = 507
                self.extern_alias_directives()


            self.state = 511
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,2,self._ctx)
            if la_ == 1:
                self.state = 510
                self.using_directives()


            self.state = 514
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,3,self._ctx)
            if la_ == 1:
                self.state = 513
                self.global_attribute_section()


            self.state = 517
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,4,self._ctx)
            if la_ == 1:
                self.state = 516
                self.namespace_member_declarations()


            self.state = 520
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & -819667982803280896) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 4611642037692729533) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & 4398059153889) != 0):
                self.state = 519
                self.top_level_statements()


            self.state = 522
            self.match(CSharpParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Top_level_statementsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.StatementContext)
            else:
                return self.getTypedRuleContext(CSharpParser.StatementContext,i)


        def getRuleIndex(self):
            return CSharpParser.RULE_top_level_statements

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTop_level_statements" ):
                listener.enterTop_level_statements(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTop_level_statements" ):
                listener.exitTop_level_statements(self)




    def top_level_statements(self):

        localctx = CSharpParser.Top_level_statementsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_top_level_statements)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 525 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 524
                self.statement()
                self.state = 527 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & -819667982803280896) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 4611642037692729533) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & 4398059153889) != 0)):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Namespace_or_type_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(CSharpParser.IdentifierContext,i)


        def qualified_alias_member(self):
            return self.getTypedRuleContext(CSharpParser.Qualified_alias_memberContext,0)


        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.DOT)
            else:
                return self.getToken(CSharpParser.DOT, i)

        def type_argument_list(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Type_argument_listContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Type_argument_listContext,i)


        def getRuleIndex(self):
            return CSharpParser.RULE_namespace_or_type_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNamespace_or_type_name" ):
                listener.enterNamespace_or_type_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNamespace_or_type_name" ):
                listener.exitNamespace_or_type_name(self)




    def namespace_or_type_name(self):

        localctx = CSharpParser.Namespace_or_type_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_namespace_or_type_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 534
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,8,self._ctx)
            if la_ == 1:
                self.state = 529
                self.identifier()
                self.state = 531
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,7,self._ctx)
                if la_ == 1:
                    self.state = 530
                    self.type_argument_list()


                pass

            elif la_ == 2:
                self.state = 533
                self.qualified_alias_member()
                pass


            self.state = 543
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,10,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 536
                    self.match(CSharpParser.DOT)
                    self.state = 537
                    self.identifier()
                    self.state = 539
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,9,self._ctx)
                    if la_ == 1:
                        self.state = 538
                        self.type_argument_list()

             
                self.state = 545
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,10,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Type_Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def base_type(self):
            return self.getTypedRuleContext(CSharpParser.Base_typeContext,0)


        def INTERR(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.INTERR)
            else:
                return self.getToken(CSharpParser.INTERR, i)

        def rank_specifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Rank_specifierContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Rank_specifierContext,i)


        def STAR(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.STAR)
            else:
                return self.getToken(CSharpParser.STAR, i)

        def getRuleIndex(self):
            return CSharpParser.RULE_type_

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterType_" ):
                listener.enterType_(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitType_" ):
                listener.exitType_(self)




    def type_(self):

        localctx = CSharpParser.Type_Context(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_type_)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 546
            self.base_type()
            self.state = 552
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,12,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 550
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [148]:
                        self.state = 547
                        self.match(CSharpParser.INTERR)
                        pass
                    elif token in [127]:
                        self.state = 548
                        self.rank_specifier()
                        pass
                    elif token in [137]:
                        self.state = 549
                        self.match(CSharpParser.STAR)
                        pass
                    else:
                        raise NoViableAltException(self)
             
                self.state = 554
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,12,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Base_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simple_type(self):
            return self.getTypedRuleContext(CSharpParser.Simple_typeContext,0)


        def class_type(self):
            return self.getTypedRuleContext(CSharpParser.Class_typeContext,0)


        def VOID(self):
            return self.getToken(CSharpParser.VOID, 0)

        def STAR(self):
            return self.getToken(CSharpParser.STAR, 0)

        def tuple_type(self):
            return self.getTypedRuleContext(CSharpParser.Tuple_typeContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_base_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBase_type" ):
                listener.enterBase_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBase_type" ):
                listener.exitBase_type(self)




    def base_type(self):

        localctx = CSharpParser.Base_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_base_type)
        try:
            self.state = 560
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,13,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 555
                self.simple_type()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 556
                self.class_type()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 557
                self.match(CSharpParser.VOID)
                self.state = 558
                self.match(CSharpParser.STAR)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 559
                self.tuple_type()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Tuple_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PARENS(self):
            return self.getToken(CSharpParser.OPEN_PARENS, 0)

        def tuple_element(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Tuple_elementContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Tuple_elementContext,i)


        def CLOSE_PARENS(self):
            return self.getToken(CSharpParser.CLOSE_PARENS, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.COMMA)
            else:
                return self.getToken(CSharpParser.COMMA, i)

        def deconstruction_expression(self):
            return self.getTypedRuleContext(CSharpParser.Deconstruction_expressionContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_tuple_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTuple_type" ):
                listener.enterTuple_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTuple_type" ):
                listener.exitTuple_type(self)




    def tuple_type(self):

        localctx = CSharpParser.Tuple_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_tuple_type)
        self._la = 0 # Token type
        try:
            self.state = 573
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,15,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 562
                self.match(CSharpParser.OPEN_PARENS)
                self.state = 563
                self.tuple_element()
                self.state = 566 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 564
                    self.match(CSharpParser.COMMA)
                    self.state = 565
                    self.tuple_element()
                    self.state = 568 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==132):
                        break

                self.state = 570
                self.match(CSharpParser.CLOSE_PARENS)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 572
                self.deconstruction_expression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Deconstruction_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def deconstruction_tuple(self):
            return self.getTypedRuleContext(CSharpParser.Deconstruction_tupleContext,0)


        def VAR(self):
            return self.getToken(CSharpParser.VAR, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_deconstruction_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeconstruction_expression" ):
                listener.enterDeconstruction_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeconstruction_expression" ):
                listener.exitDeconstruction_expression(self)




    def deconstruction_expression(self):

        localctx = CSharpParser.Deconstruction_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_deconstruction_expression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 576
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==106:
                self.state = 575
                self.match(CSharpParser.VAR)


            self.state = 578
            self.deconstruction_tuple()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Deconstruction_tupleContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PARENS(self):
            return self.getToken(CSharpParser.OPEN_PARENS, 0)

        def deconstruction_element(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Deconstruction_elementContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Deconstruction_elementContext,i)


        def CLOSE_PARENS(self):
            return self.getToken(CSharpParser.CLOSE_PARENS, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.COMMA)
            else:
                return self.getToken(CSharpParser.COMMA, i)

        def getRuleIndex(self):
            return CSharpParser.RULE_deconstruction_tuple

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeconstruction_tuple" ):
                listener.enterDeconstruction_tuple(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeconstruction_tuple" ):
                listener.exitDeconstruction_tuple(self)




    def deconstruction_tuple(self):

        localctx = CSharpParser.Deconstruction_tupleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_deconstruction_tuple)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 580
            self.match(CSharpParser.OPEN_PARENS)
            self.state = 581
            self.deconstruction_element()
            self.state = 584 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 582
                self.match(CSharpParser.COMMA)
                self.state = 583
                self.deconstruction_element()
                self.state = 586 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==132):
                    break

            self.state = 588
            self.match(CSharpParser.CLOSE_PARENS)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Deconstruction_elementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def deconstruction_tuple(self):
            return self.getTypedRuleContext(CSharpParser.Deconstruction_tupleContext,0)


        def identifier(self):
            return self.getTypedRuleContext(CSharpParser.IdentifierContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_deconstruction_element

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeconstruction_element" ):
                listener.enterDeconstruction_element(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeconstruction_element" ):
                listener.exitDeconstruction_element(self)




    def deconstruction_element(self):

        localctx = CSharpParser.Deconstruction_elementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_deconstruction_element)
        self._la = 0 # Token type
        try:
            self.state = 594
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [129]:
                self.enterOuterAlt(localctx, 1)
                self.state = 590
                self.deconstruction_tuple()
                pass
            elif token in [10, 11, 12, 14, 15, 16, 20, 32, 35, 38, 48, 49, 51, 54, 58, 60, 61, 64, 69, 71, 75, 81, 85, 86, 102, 106, 110, 111, 113, 114, 130, 132, 134]:
                self.enterOuterAlt(localctx, 2)
                self.state = 592
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 3750091428249852928) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 1904629023639713) != 0):
                    self.state = 591
                    self.identifier()


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Tuple_elementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def type_(self):
            return self.getTypedRuleContext(CSharpParser.Type_Context,0)


        def identifier(self):
            return self.getTypedRuleContext(CSharpParser.IdentifierContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_tuple_element

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTuple_element" ):
                listener.enterTuple_element(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTuple_element" ):
                listener.exitTuple_element(self)




    def tuple_element(self):

        localctx = CSharpParser.Tuple_elementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_tuple_element)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 596
            self.type_()
            self.state = 598
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 3750091428249852928) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 1904629023639713) != 0):
                self.state = 597
                self.identifier()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Simple_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def numeric_type(self):
            return self.getTypedRuleContext(CSharpParser.Numeric_typeContext,0)


        def BOOL(self):
            return self.getToken(CSharpParser.BOOL, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_simple_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimple_type" ):
                listener.enterSimple_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimple_type" ):
                listener.exitSimple_type(self)




    def simple_type(self):

        localctx = CSharpParser.Simple_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_simple_type)
        try:
            self.state = 602
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [21, 24, 29, 34, 45, 55, 63, 83, 87, 99, 100, 104]:
                self.enterOuterAlt(localctx, 1)
                self.state = 600
                self.numeric_type()
                pass
            elif token in [18]:
                self.enterOuterAlt(localctx, 2)
                self.state = 601
                self.match(CSharpParser.BOOL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Numeric_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def integral_type(self):
            return self.getTypedRuleContext(CSharpParser.Integral_typeContext,0)


        def floating_point_type(self):
            return self.getTypedRuleContext(CSharpParser.Floating_point_typeContext,0)


        def DECIMAL(self):
            return self.getToken(CSharpParser.DECIMAL, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_numeric_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNumeric_type" ):
                listener.enterNumeric_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNumeric_type" ):
                listener.exitNumeric_type(self)




    def numeric_type(self):

        localctx = CSharpParser.Numeric_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_numeric_type)
        try:
            self.state = 607
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [21, 24, 55, 63, 83, 87, 99, 100, 104]:
                self.enterOuterAlt(localctx, 1)
                self.state = 604
                self.integral_type()
                pass
            elif token in [34, 45]:
                self.enterOuterAlt(localctx, 2)
                self.state = 605
                self.floating_point_type()
                pass
            elif token in [29]:
                self.enterOuterAlt(localctx, 3)
                self.state = 606
                self.match(CSharpParser.DECIMAL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Integral_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SBYTE(self):
            return self.getToken(CSharpParser.SBYTE, 0)

        def BYTE(self):
            return self.getToken(CSharpParser.BYTE, 0)

        def SHORT(self):
            return self.getToken(CSharpParser.SHORT, 0)

        def USHORT(self):
            return self.getToken(CSharpParser.USHORT, 0)

        def INT(self):
            return self.getToken(CSharpParser.INT, 0)

        def UINT(self):
            return self.getToken(CSharpParser.UINT, 0)

        def LONG(self):
            return self.getToken(CSharpParser.LONG, 0)

        def ULONG(self):
            return self.getToken(CSharpParser.ULONG, 0)

        def CHAR(self):
            return self.getToken(CSharpParser.CHAR, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_integral_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIntegral_type" ):
                listener.enterIntegral_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIntegral_type" ):
                listener.exitIntegral_type(self)




    def integral_type(self):

        localctx = CSharpParser.Integral_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_integral_type)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 609
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & -9187343239816937472) != 0) or ((((_la - 83)) & ~0x3f) == 0 and ((1 << (_la - 83)) & 2293777) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Floating_point_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FLOAT(self):
            return self.getToken(CSharpParser.FLOAT, 0)

        def DOUBLE(self):
            return self.getToken(CSharpParser.DOUBLE, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_floating_point_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFloating_point_type" ):
                listener.enterFloating_point_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFloating_point_type" ):
                listener.exitFloating_point_type(self)




    def floating_point_type(self):

        localctx = CSharpParser.Floating_point_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_floating_point_type)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 611
            _la = self._input.LA(1)
            if not(_la==34 or _la==45):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Default_value_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def explictly_typed_default(self):
            return self.getTypedRuleContext(CSharpParser.Explictly_typed_defaultContext,0)


        def default_literal(self):
            return self.getTypedRuleContext(CSharpParser.Default_literalContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_default_value_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDefault_value_expression" ):
                listener.enterDefault_value_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDefault_value_expression" ):
                listener.exitDefault_value_expression(self)




    def default_value_expression(self):

        localctx = CSharpParser.Default_value_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_default_value_expression)
        try:
            self.state = 615
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,23,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 613
                self.explictly_typed_default()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 614
                self.default_literal()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Explictly_typed_defaultContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DEFAULT(self):
            return self.getToken(CSharpParser.DEFAULT, 0)

        def OPEN_PARENS(self):
            return self.getToken(CSharpParser.OPEN_PARENS, 0)

        def type_(self):
            return self.getTypedRuleContext(CSharpParser.Type_Context,0)


        def CLOSE_PARENS(self):
            return self.getToken(CSharpParser.CLOSE_PARENS, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_explictly_typed_default

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExplictly_typed_default" ):
                listener.enterExplictly_typed_default(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExplictly_typed_default" ):
                listener.exitExplictly_typed_default(self)




    def explictly_typed_default(self):

        localctx = CSharpParser.Explictly_typed_defaultContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_explictly_typed_default)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 617
            self.match(CSharpParser.DEFAULT)
            self.state = 618
            self.match(CSharpParser.OPEN_PARENS)
            self.state = 619
            self.type_()
            self.state = 620
            self.match(CSharpParser.CLOSE_PARENS)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Default_literalContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DEFAULT(self):
            return self.getToken(CSharpParser.DEFAULT, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_default_literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDefault_literal" ):
                listener.enterDefault_literal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDefault_literal" ):
                listener.exitDefault_literal(self)




    def default_literal(self):

        localctx = CSharpParser.Default_literalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_default_literal)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 622
            self.match(CSharpParser.DEFAULT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Variable_referenceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(CSharpParser.ExpressionContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_variable_reference

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariable_reference" ):
                listener.enterVariable_reference(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariable_reference" ):
                listener.exitVariable_reference(self)




    def variable_reference(self):

        localctx = CSharpParser.Variable_referenceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_variable_reference)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 624
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Class_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def namespace_or_type_name(self):
            return self.getTypedRuleContext(CSharpParser.Namespace_or_type_nameContext,0)


        def OBJECT(self):
            return self.getToken(CSharpParser.OBJECT, 0)

        def DYNAMIC(self):
            return self.getToken(CSharpParser.DYNAMIC, 0)

        def STRING(self):
            return self.getToken(CSharpParser.STRING, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_class_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClass_type" ):
                listener.enterClass_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClass_type" ):
                listener.exitClass_type(self)




    def class_type(self):

        localctx = CSharpParser.Class_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_class_type)
        try:
            self.state = 630
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,24,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 626
                self.namespace_or_type_name()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 627
                self.match(CSharpParser.OBJECT)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 628
                self.match(CSharpParser.DYNAMIC)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 629
                self.match(CSharpParser.STRING)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Type_argument_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LT(self):
            return self.getToken(CSharpParser.LT, 0)

        def type_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Type_Context)
            else:
                return self.getTypedRuleContext(CSharpParser.Type_Context,i)


        def GT(self):
            return self.getToken(CSharpParser.GT, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.COMMA)
            else:
                return self.getToken(CSharpParser.COMMA, i)

        def getRuleIndex(self):
            return CSharpParser.RULE_type_argument_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterType_argument_list" ):
                listener.enterType_argument_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitType_argument_list" ):
                listener.exitType_argument_list(self)




    def type_argument_list(self):

        localctx = CSharpParser.Type_argument_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_type_argument_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 632
            self.match(CSharpParser.LT)
            self.state = 633
            self.type_()
            self.state = 638
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==132:
                self.state = 634
                self.match(CSharpParser.COMMA)
                self.state = 635
                self.type_()
                self.state = 640
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 641
            self.match(CSharpParser.GT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Argument_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def argument(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.ArgumentContext)
            else:
                return self.getTypedRuleContext(CSharpParser.ArgumentContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.COMMA)
            else:
                return self.getToken(CSharpParser.COMMA, i)

        def getRuleIndex(self):
            return CSharpParser.RULE_argument_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArgument_list" ):
                listener.enterArgument_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArgument_list" ):
                listener.exitArgument_list(self)




    def argument_list(self):

        localctx = CSharpParser.Argument_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_argument_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 643
            self.argument()
            self.state = 648
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==132:
                self.state = 644
                self.match(CSharpParser.COMMA)
                self.state = 645
                self.argument()
                self.state = 650
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArgumentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.refout = None # Token

        def expression(self):
            return self.getTypedRuleContext(CSharpParser.ExpressionContext,0)


        def argument_name(self):
            return self.getTypedRuleContext(CSharpParser.Argument_nameContext,0)


        def VAR(self):
            return self.getToken(CSharpParser.VAR, 0)

        def type_(self):
            return self.getTypedRuleContext(CSharpParser.Type_Context,0)


        def REF(self):
            return self.getToken(CSharpParser.REF, 0)

        def OUT(self):
            return self.getToken(CSharpParser.OUT, 0)

        def IN(self):
            return self.getToken(CSharpParser.IN, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_argument

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArgument" ):
                listener.enterArgument(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArgument" ):
                listener.exitArgument(self)




    def argument(self):

        localctx = CSharpParser.ArgumentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_argument)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 652
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,27,self._ctx)
            if la_ == 1:
                self.state = 651
                self.argument_name()


            self.state = 655
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,28,self._ctx)
            if la_ == 1:
                self.state = 654
                localctx.refout = self._input.LT(1)
                _la = self._input.LA(1)
                if not(((((_la - 54)) & ~0x3f) == 0 and ((1 << (_la - 54)) & 67371009) != 0)):
                    localctx.refout = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 663
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,30,self._ctx)
            if la_ == 1:
                self.state = 657
                self.expression()
                pass

            elif la_ == 2:
                self.state = 660
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,29,self._ctx)
                if la_ == 1:
                    self.state = 658
                    self.match(CSharpParser.VAR)
                    pass

                elif la_ == 2:
                    self.state = 659
                    self.type_()
                    pass


                self.state = 662
                self.expression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Argument_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(CSharpParser.IdentifierContext,0)


        def COLON(self):
            return self.getToken(CSharpParser.COLON, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_argument_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArgument_name" ):
                listener.enterArgument_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArgument_name" ):
                listener.exitArgument_name(self)




    def argument_name(self):

        localctx = CSharpParser.Argument_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_argument_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 665
            self.identifier()
            self.state = 666
            self.match(CSharpParser.COLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assignment(self):
            return self.getTypedRuleContext(CSharpParser.AssignmentContext,0)


        def non_assignment_expression(self):
            return self.getTypedRuleContext(CSharpParser.Non_assignment_expressionContext,0)


        def REF(self):
            return self.getToken(CSharpParser.REF, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpression" ):
                listener.enterExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpression" ):
                listener.exitExpression(self)




    def expression(self):

        localctx = CSharpParser.ExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_expression)
        try:
            self.state = 672
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,31,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 668
                self.assignment()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 669
                self.non_assignment_expression()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 670
                self.match(CSharpParser.REF)
                self.state = 671
                self.non_assignment_expression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Non_assignment_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def lambda_expression(self):
            return self.getTypedRuleContext(CSharpParser.Lambda_expressionContext,0)


        def query_expression(self):
            return self.getTypedRuleContext(CSharpParser.Query_expressionContext,0)


        def conditional_expression(self):
            return self.getTypedRuleContext(CSharpParser.Conditional_expressionContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_non_assignment_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNon_assignment_expression" ):
                listener.enterNon_assignment_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNon_assignment_expression" ):
                listener.exitNon_assignment_expression(self)




    def non_assignment_expression(self):

        localctx = CSharpParser.Non_assignment_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_non_assignment_expression)
        try:
            self.state = 677
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,32,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 674
                self.lambda_expression()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 675
                self.query_expression()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 676
                self.conditional_expression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssignmentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def unary_expression(self):
            return self.getTypedRuleContext(CSharpParser.Unary_expressionContext,0)


        def assignment_operator(self):
            return self.getTypedRuleContext(CSharpParser.Assignment_operatorContext,0)


        def expression(self):
            return self.getTypedRuleContext(CSharpParser.ExpressionContext,0)


        def OP_COALESCING_ASSIGNMENT(self):
            return self.getToken(CSharpParser.OP_COALESCING_ASSIGNMENT, 0)

        def throwable_expression(self):
            return self.getTypedRuleContext(CSharpParser.Throwable_expressionContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_assignment

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssignment" ):
                listener.enterAssignment(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssignment" ):
                listener.exitAssignment(self)




    def assignment(self):

        localctx = CSharpParser.AssignmentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_assignment)
        try:
            self.state = 687
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,33,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 679
                self.unary_expression()
                self.state = 680
                self.assignment_operator()
                self.state = 681
                self.expression()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 683
                self.unary_expression()
                self.state = 684
                self.match(CSharpParser.OP_COALESCING_ASSIGNMENT)
                self.state = 685
                self.throwable_expression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Assignment_operatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ASSIGNMENT(self):
            return self.getToken(CSharpParser.ASSIGNMENT, 0)

        def OP_ADD_ASSIGNMENT(self):
            return self.getToken(CSharpParser.OP_ADD_ASSIGNMENT, 0)

        def OP_SUB_ASSIGNMENT(self):
            return self.getToken(CSharpParser.OP_SUB_ASSIGNMENT, 0)

        def OP_MULT_ASSIGNMENT(self):
            return self.getToken(CSharpParser.OP_MULT_ASSIGNMENT, 0)

        def OP_DIV_ASSIGNMENT(self):
            return self.getToken(CSharpParser.OP_DIV_ASSIGNMENT, 0)

        def OP_MOD_ASSIGNMENT(self):
            return self.getToken(CSharpParser.OP_MOD_ASSIGNMENT, 0)

        def OP_AND_ASSIGNMENT(self):
            return self.getToken(CSharpParser.OP_AND_ASSIGNMENT, 0)

        def OP_OR_ASSIGNMENT(self):
            return self.getToken(CSharpParser.OP_OR_ASSIGNMENT, 0)

        def OP_XOR_ASSIGNMENT(self):
            return self.getToken(CSharpParser.OP_XOR_ASSIGNMENT, 0)

        def OP_LEFT_SHIFT_ASSIGNMENT(self):
            return self.getToken(CSharpParser.OP_LEFT_SHIFT_ASSIGNMENT, 0)

        def right_shift_assignment(self):
            return self.getTypedRuleContext(CSharpParser.Right_shift_assignmentContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_assignment_operator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssignment_operator" ):
                listener.enterAssignment_operator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssignment_operator" ):
                listener.exitAssignment_operator(self)




    def assignment_operator(self):

        localctx = CSharpParser.Assignment_operatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_assignment_operator)
        try:
            self.state = 700
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [145]:
                self.enterOuterAlt(localctx, 1)
                self.state = 689
                self.match(CSharpParser.ASSIGNMENT)
                pass
            elif token in [160]:
                self.enterOuterAlt(localctx, 2)
                self.state = 690
                self.match(CSharpParser.OP_ADD_ASSIGNMENT)
                pass
            elif token in [161]:
                self.enterOuterAlt(localctx, 3)
                self.state = 691
                self.match(CSharpParser.OP_SUB_ASSIGNMENT)
                pass
            elif token in [162]:
                self.enterOuterAlt(localctx, 4)
                self.state = 692
                self.match(CSharpParser.OP_MULT_ASSIGNMENT)
                pass
            elif token in [163]:
                self.enterOuterAlt(localctx, 5)
                self.state = 693
                self.match(CSharpParser.OP_DIV_ASSIGNMENT)
                pass
            elif token in [164]:
                self.enterOuterAlt(localctx, 6)
                self.state = 694
                self.match(CSharpParser.OP_MOD_ASSIGNMENT)
                pass
            elif token in [165]:
                self.enterOuterAlt(localctx, 7)
                self.state = 695
                self.match(CSharpParser.OP_AND_ASSIGNMENT)
                pass
            elif token in [166]:
                self.enterOuterAlt(localctx, 8)
                self.state = 696
                self.match(CSharpParser.OP_OR_ASSIGNMENT)
                pass
            elif token in [167]:
                self.enterOuterAlt(localctx, 9)
                self.state = 697
                self.match(CSharpParser.OP_XOR_ASSIGNMENT)
                pass
            elif token in [169]:
                self.enterOuterAlt(localctx, 10)
                self.state = 698
                self.match(CSharpParser.OP_LEFT_SHIFT_ASSIGNMENT)
                pass
            elif token in [147]:
                self.enterOuterAlt(localctx, 11)
                self.state = 699
                self.right_shift_assignment()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Conditional_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def null_coalescing_expression(self):
            return self.getTypedRuleContext(CSharpParser.Null_coalescing_expressionContext,0)


        def INTERR(self):
            return self.getToken(CSharpParser.INTERR, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(CSharpParser.ExpressionContext,i)


        def COLON(self):
            return self.getToken(CSharpParser.COLON, 0)

        def REF(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.REF)
            else:
                return self.getToken(CSharpParser.REF, i)

        def variable_reference(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Variable_referenceContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Variable_referenceContext,i)


        def getRuleIndex(self):
            return CSharpParser.RULE_conditional_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConditional_expression" ):
                listener.enterConditional_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConditional_expression" ):
                listener.exitConditional_expression(self)




    def conditional_expression(self):

        localctx = CSharpParser.Conditional_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_conditional_expression)
        try:
            self.state = 717
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,35,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 702
                self.null_coalescing_expression()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 703
                self.null_coalescing_expression()
                self.state = 704
                self.match(CSharpParser.INTERR)
                self.state = 705
                self.expression()
                self.state = 706
                self.match(CSharpParser.COLON)
                self.state = 707
                self.expression()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 709
                self.null_coalescing_expression()
                self.state = 710
                self.match(CSharpParser.INTERR)
                self.state = 711
                self.match(CSharpParser.REF)
                self.state = 712
                self.variable_reference()
                self.state = 713
                self.match(CSharpParser.COLON)
                self.state = 714
                self.match(CSharpParser.REF)
                self.state = 715
                self.variable_reference()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Null_coalescing_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def conditional_or_expression(self):
            return self.getTypedRuleContext(CSharpParser.Conditional_or_expressionContext,0)


        def OP_COALESCING(self):
            return self.getToken(CSharpParser.OP_COALESCING, 0)

        def null_coalescing_expression(self):
            return self.getTypedRuleContext(CSharpParser.Null_coalescing_expressionContext,0)


        def throw_expression(self):
            return self.getTypedRuleContext(CSharpParser.Throw_expressionContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_null_coalescing_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNull_coalescing_expression" ):
                listener.enterNull_coalescing_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNull_coalescing_expression" ):
                listener.exitNull_coalescing_expression(self)




    def null_coalescing_expression(self):

        localctx = CSharpParser.Null_coalescing_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_null_coalescing_expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 719
            self.conditional_or_expression()
            self.state = 725
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,37,self._ctx)
            if la_ == 1:
                self.state = 720
                self.match(CSharpParser.OP_COALESCING)
                self.state = 723
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [10, 11, 12, 14, 15, 16, 17, 18, 20, 21, 24, 25, 29, 30, 31, 32, 34, 35, 38, 42, 45, 48, 49, 51, 55, 58, 60, 61, 63, 64, 66, 67, 68, 69, 71, 75, 81, 83, 85, 86, 87, 88, 89, 91, 94, 96, 98, 99, 100, 101, 102, 104, 106, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 129, 135, 136, 137, 140, 142, 143, 144, 151, 152, 171]:
                    self.state = 721
                    self.null_coalescing_expression()
                    pass
                elif token in [95]:
                    self.state = 722
                    self.throw_expression()
                    pass
                else:
                    raise NoViableAltException(self)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Conditional_or_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def conditional_and_expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Conditional_and_expressionContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Conditional_and_expressionContext,i)


        def OP_OR(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.OP_OR)
            else:
                return self.getToken(CSharpParser.OP_OR, i)

        def getRuleIndex(self):
            return CSharpParser.RULE_conditional_or_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConditional_or_expression" ):
                listener.enterConditional_or_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConditional_or_expression" ):
                listener.exitConditional_or_expression(self)




    def conditional_or_expression(self):

        localctx = CSharpParser.Conditional_or_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_conditional_or_expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 727
            self.conditional_and_expression()
            self.state = 732
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,38,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 728
                    self.match(CSharpParser.OP_OR)
                    self.state = 729
                    self.conditional_and_expression() 
                self.state = 734
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,38,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Conditional_and_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def inclusive_or_expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Inclusive_or_expressionContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Inclusive_or_expressionContext,i)


        def OP_AND(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.OP_AND)
            else:
                return self.getToken(CSharpParser.OP_AND, i)

        def getRuleIndex(self):
            return CSharpParser.RULE_conditional_and_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConditional_and_expression" ):
                listener.enterConditional_and_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConditional_and_expression" ):
                listener.exitConditional_and_expression(self)




    def conditional_and_expression(self):

        localctx = CSharpParser.Conditional_and_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_conditional_and_expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 735
            self.inclusive_or_expression()
            self.state = 740
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,39,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 736
                    self.match(CSharpParser.OP_AND)
                    self.state = 737
                    self.inclusive_or_expression() 
                self.state = 742
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,39,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Inclusive_or_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def exclusive_or_expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Exclusive_or_expressionContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Exclusive_or_expressionContext,i)


        def BITWISE_OR(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.BITWISE_OR)
            else:
                return self.getToken(CSharpParser.BITWISE_OR, i)

        def getRuleIndex(self):
            return CSharpParser.RULE_inclusive_or_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInclusive_or_expression" ):
                listener.enterInclusive_or_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInclusive_or_expression" ):
                listener.exitInclusive_or_expression(self)




    def inclusive_or_expression(self):

        localctx = CSharpParser.Inclusive_or_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_inclusive_or_expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 743
            self.exclusive_or_expression()
            self.state = 748
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,40,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 744
                    self.match(CSharpParser.BITWISE_OR)
                    self.state = 745
                    self.exclusive_or_expression() 
                self.state = 750
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,40,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Exclusive_or_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def and_expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.And_expressionContext)
            else:
                return self.getTypedRuleContext(CSharpParser.And_expressionContext,i)


        def CARET(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.CARET)
            else:
                return self.getToken(CSharpParser.CARET, i)

        def getRuleIndex(self):
            return CSharpParser.RULE_exclusive_or_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExclusive_or_expression" ):
                listener.enterExclusive_or_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExclusive_or_expression" ):
                listener.exitExclusive_or_expression(self)




    def exclusive_or_expression(self):

        localctx = CSharpParser.Exclusive_or_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_exclusive_or_expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 751
            self.and_expression()
            self.state = 756
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,41,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 752
                    self.match(CSharpParser.CARET)
                    self.state = 753
                    self.and_expression() 
                self.state = 758
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,41,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class And_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def equality_expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Equality_expressionContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Equality_expressionContext,i)


        def AMP(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.AMP)
            else:
                return self.getToken(CSharpParser.AMP, i)

        def getRuleIndex(self):
            return CSharpParser.RULE_and_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnd_expression" ):
                listener.enterAnd_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnd_expression" ):
                listener.exitAnd_expression(self)




    def and_expression(self):

        localctx = CSharpParser.And_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_and_expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 759
            self.equality_expression()
            self.state = 764
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,42,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 760
                    self.match(CSharpParser.AMP)
                    self.state = 761
                    self.equality_expression() 
                self.state = 766
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,42,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Equality_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def relational_expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Relational_expressionContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Relational_expressionContext,i)


        def OP_EQ(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.OP_EQ)
            else:
                return self.getToken(CSharpParser.OP_EQ, i)

        def OP_NE(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.OP_NE)
            else:
                return self.getToken(CSharpParser.OP_NE, i)

        def getRuleIndex(self):
            return CSharpParser.RULE_equality_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEquality_expression" ):
                listener.enterEquality_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEquality_expression" ):
                listener.exitEquality_expression(self)




    def equality_expression(self):

        localctx = CSharpParser.Equality_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_equality_expression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 767
            self.relational_expression()
            self.state = 772
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,43,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 768
                    _la = self._input.LA(1)
                    if not(_la==156 or _la==157):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 769
                    self.relational_expression() 
                self.state = 774
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,43,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Relational_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def shift_expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Shift_expressionContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Shift_expressionContext,i)


        def IS(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.IS)
            else:
                return self.getToken(CSharpParser.IS, i)

        def isType(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.IsTypeContext)
            else:
                return self.getTypedRuleContext(CSharpParser.IsTypeContext,i)


        def AS(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.AS)
            else:
                return self.getToken(CSharpParser.AS, i)

        def type_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Type_Context)
            else:
                return self.getTypedRuleContext(CSharpParser.Type_Context,i)


        def pattern(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.PatternContext)
            else:
                return self.getTypedRuleContext(CSharpParser.PatternContext,i)


        def LT(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.LT)
            else:
                return self.getToken(CSharpParser.LT, i)

        def GT(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.GT)
            else:
                return self.getToken(CSharpParser.GT, i)

        def OP_LE(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.OP_LE)
            else:
                return self.getToken(CSharpParser.OP_LE, i)

        def OP_GE(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.OP_GE)
            else:
                return self.getToken(CSharpParser.OP_GE, i)

        def getRuleIndex(self):
            return CSharpParser.RULE_relational_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRelational_expression" ):
                listener.enterRelational_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRelational_expression" ):
                listener.exitRelational_expression(self)




    def relational_expression(self):

        localctx = CSharpParser.Relational_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_relational_expression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 775
            self.shift_expression()
            self.state = 786
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,45,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 784
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,44,self._ctx)
                    if la_ == 1:
                        self.state = 776
                        _la = self._input.LA(1)
                        if not(((((_la - 146)) & ~0x3f) == 0 and ((1 << (_la - 146)) & 12291) != 0)):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 777
                        self.shift_expression()
                        pass

                    elif la_ == 2:
                        self.state = 778
                        self.match(CSharpParser.IS)
                        self.state = 779
                        self.isType()
                        pass

                    elif la_ == 3:
                        self.state = 780
                        self.match(CSharpParser.AS)
                        self.state = 781
                        self.type_()
                        pass

                    elif la_ == 4:
                        self.state = 782
                        self.match(CSharpParser.IS)
                        self.state = 783
                        self.pattern()
                        pass

             
                self.state = 788
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,45,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Shift_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def additive_expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Additive_expressionContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Additive_expressionContext,i)


        def OP_LEFT_SHIFT(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.OP_LEFT_SHIFT)
            else:
                return self.getToken(CSharpParser.OP_LEFT_SHIFT, i)

        def right_shift(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Right_shiftContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Right_shiftContext,i)


        def getRuleIndex(self):
            return CSharpParser.RULE_shift_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShift_expression" ):
                listener.enterShift_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShift_expression" ):
                listener.exitShift_expression(self)




    def shift_expression(self):

        localctx = CSharpParser.Shift_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_shift_expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 789
            self.additive_expression()
            self.state = 797
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,47,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 792
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [168]:
                        self.state = 790
                        self.match(CSharpParser.OP_LEFT_SHIFT)
                        pass
                    elif token in [147]:
                        self.state = 791
                        self.right_shift()
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 794
                    self.additive_expression() 
                self.state = 799
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,47,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Additive_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def multiplicative_expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Multiplicative_expressionContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Multiplicative_expressionContext,i)


        def PLUS(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.PLUS)
            else:
                return self.getToken(CSharpParser.PLUS, i)

        def MINUS(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.MINUS)
            else:
                return self.getToken(CSharpParser.MINUS, i)

        def getRuleIndex(self):
            return CSharpParser.RULE_additive_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAdditive_expression" ):
                listener.enterAdditive_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAdditive_expression" ):
                listener.exitAdditive_expression(self)




    def additive_expression(self):

        localctx = CSharpParser.Additive_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_additive_expression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 800
            self.multiplicative_expression()
            self.state = 805
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==135 or _la==136:
                self.state = 801
                _la = self._input.LA(1)
                if not(_la==135 or _la==136):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 802
                self.multiplicative_expression()
                self.state = 807
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Multiplicative_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def switch_expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Switch_expressionContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Switch_expressionContext,i)


        def STAR(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.STAR)
            else:
                return self.getToken(CSharpParser.STAR, i)

        def DIV(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.DIV)
            else:
                return self.getToken(CSharpParser.DIV, i)

        def PERCENT(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.PERCENT)
            else:
                return self.getToken(CSharpParser.PERCENT, i)

        def getRuleIndex(self):
            return CSharpParser.RULE_multiplicative_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMultiplicative_expression" ):
                listener.enterMultiplicative_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMultiplicative_expression" ):
                listener.exitMultiplicative_expression(self)




    def multiplicative_expression(self):

        localctx = CSharpParser.Multiplicative_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_multiplicative_expression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 808
            self.switch_expression()
            self.state = 813
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 137)) & ~0x3f) == 0 and ((1 << (_la - 137)) & 7) != 0):
                self.state = 809
                _la = self._input.LA(1)
                if not(((((_la - 137)) & ~0x3f) == 0 and ((1 << (_la - 137)) & 7) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 810
                self.switch_expression()
                self.state = 815
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Switch_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def range_expression(self):
            return self.getTypedRuleContext(CSharpParser.Range_expressionContext,0)


        def SWITCH(self):
            return self.getToken(CSharpParser.SWITCH, 0)

        def OPEN_BRACE(self):
            return self.getToken(CSharpParser.OPEN_BRACE, 0)

        def CLOSE_BRACE(self):
            return self.getToken(CSharpParser.CLOSE_BRACE, 0)

        def switch_expression_arms(self):
            return self.getTypedRuleContext(CSharpParser.Switch_expression_armsContext,0)


        def COMMA(self):
            return self.getToken(CSharpParser.COMMA, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_switch_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSwitch_expression" ):
                listener.enterSwitch_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSwitch_expression" ):
                listener.exitSwitch_expression(self)




    def switch_expression(self):

        localctx = CSharpParser.Switch_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_switch_expression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 816
            self.range_expression()
            self.state = 826
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==93:
                self.state = 817
                self.match(CSharpParser.SWITCH)
                self.state = 818
                self.match(CSharpParser.OPEN_BRACE)
                self.state = 823
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -5437212208176571392) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 2305497201195550909) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & 4398059153857) != 0):
                    self.state = 819
                    self.switch_expression_arms()
                    self.state = 821
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==132:
                        self.state = 820
                        self.match(CSharpParser.COMMA)




                self.state = 825
                self.match(CSharpParser.CLOSE_BRACE)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Switch_expression_armsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def switch_expression_arm(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Switch_expression_armContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Switch_expression_armContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.COMMA)
            else:
                return self.getToken(CSharpParser.COMMA, i)

        def getRuleIndex(self):
            return CSharpParser.RULE_switch_expression_arms

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSwitch_expression_arms" ):
                listener.enterSwitch_expression_arms(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSwitch_expression_arms" ):
                listener.exitSwitch_expression_arms(self)




    def switch_expression_arms(self):

        localctx = CSharpParser.Switch_expression_armsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_switch_expression_arms)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 828
            self.switch_expression_arm()
            self.state = 833
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,53,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 829
                    self.match(CSharpParser.COMMA)
                    self.state = 830
                    self.switch_expression_arm() 
                self.state = 835
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,53,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Switch_expression_armContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(CSharpParser.ExpressionContext,0)


        def right_arrow(self):
            return self.getTypedRuleContext(CSharpParser.Right_arrowContext,0)


        def throwable_expression(self):
            return self.getTypedRuleContext(CSharpParser.Throwable_expressionContext,0)


        def case_guard(self):
            return self.getTypedRuleContext(CSharpParser.Case_guardContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_switch_expression_arm

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSwitch_expression_arm" ):
                listener.enterSwitch_expression_arm(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSwitch_expression_arm" ):
                listener.exitSwitch_expression_arm(self)




    def switch_expression_arm(self):

        localctx = CSharpParser.Switch_expression_armContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_switch_expression_arm)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 836
            self.expression()
            self.state = 838
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==110:
                self.state = 837
                self.case_guard()


            self.state = 840
            self.right_arrow()
            self.state = 841
            self.throwable_expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Range_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def unary_expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Unary_expressionContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Unary_expressionContext,i)


        def OP_RANGE(self):
            return self.getToken(CSharpParser.OP_RANGE, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_range_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRange_expression" ):
                listener.enterRange_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRange_expression" ):
                listener.exitRange_expression(self)




    def range_expression(self):

        localctx = CSharpParser.Range_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_range_expression)
        self._la = 0 # Token type
        try:
            self.state = 851
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,57,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 843
                self.unary_expression()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 845
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -5437212208176571392) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 2305497201195485373) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & 12642753) != 0):
                    self.state = 844
                    self.unary_expression()


                self.state = 847
                self.match(CSharpParser.OP_RANGE)
                self.state = 849
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,56,self._ctx)
                if la_ == 1:
                    self.state = 848
                    self.unary_expression()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Unary_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def cast_expression(self):
            return self.getTypedRuleContext(CSharpParser.Cast_expressionContext,0)


        def primary_expression(self):
            return self.getTypedRuleContext(CSharpParser.Primary_expressionContext,0)


        def PLUS(self):
            return self.getToken(CSharpParser.PLUS, 0)

        def unary_expression(self):
            return self.getTypedRuleContext(CSharpParser.Unary_expressionContext,0)


        def MINUS(self):
            return self.getToken(CSharpParser.MINUS, 0)

        def BANG(self):
            return self.getToken(CSharpParser.BANG, 0)

        def TILDE(self):
            return self.getToken(CSharpParser.TILDE, 0)

        def OP_INC(self):
            return self.getToken(CSharpParser.OP_INC, 0)

        def OP_DEC(self):
            return self.getToken(CSharpParser.OP_DEC, 0)

        def AWAIT(self):
            return self.getToken(CSharpParser.AWAIT, 0)

        def AMP(self):
            return self.getToken(CSharpParser.AMP, 0)

        def STAR(self):
            return self.getToken(CSharpParser.STAR, 0)

        def CARET(self):
            return self.getToken(CSharpParser.CARET, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_unary_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnary_expression" ):
                listener.enterUnary_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnary_expression" ):
                listener.exitUnary_expression(self)




    def unary_expression(self):

        localctx = CSharpParser.Unary_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_unary_expression)
        try:
            self.state = 875
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,58,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 853
                self.cast_expression()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 854
                self.primary_expression()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 855
                self.match(CSharpParser.PLUS)
                self.state = 856
                self.unary_expression()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 857
                self.match(CSharpParser.MINUS)
                self.state = 858
                self.unary_expression()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 859
                self.match(CSharpParser.BANG)
                self.state = 860
                self.unary_expression()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 861
                self.match(CSharpParser.TILDE)
                self.state = 862
                self.unary_expression()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 863
                self.match(CSharpParser.OP_INC)
                self.state = 864
                self.unary_expression()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 865
                self.match(CSharpParser.OP_DEC)
                self.state = 866
                self.unary_expression()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 867
                self.match(CSharpParser.AWAIT)
                self.state = 868
                self.unary_expression()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 869
                self.match(CSharpParser.AMP)
                self.state = 870
                self.unary_expression()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 871
                self.match(CSharpParser.STAR)
                self.state = 872
                self.unary_expression()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 873
                self.match(CSharpParser.CARET)
                self.state = 874
                self.unary_expression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Cast_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PARENS(self):
            return self.getToken(CSharpParser.OPEN_PARENS, 0)

        def type_(self):
            return self.getTypedRuleContext(CSharpParser.Type_Context,0)


        def CLOSE_PARENS(self):
            return self.getToken(CSharpParser.CLOSE_PARENS, 0)

        def unary_expression(self):
            return self.getTypedRuleContext(CSharpParser.Unary_expressionContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_cast_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCast_expression" ):
                listener.enterCast_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCast_expression" ):
                listener.exitCast_expression(self)




    def cast_expression(self):

        localctx = CSharpParser.Cast_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_cast_expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 877
            self.match(CSharpParser.OPEN_PARENS)
            self.state = 878
            self.type_()
            self.state = 879
            self.match(CSharpParser.CLOSE_PARENS)
            self.state = 880
            self.unary_expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Primary_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.pe = None # Primary_expression_startContext

        def primary_expression_start(self):
            return self.getTypedRuleContext(CSharpParser.Primary_expression_startContext,0)


        def BANG(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.BANG)
            else:
                return self.getToken(CSharpParser.BANG, i)

        def bracket_expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Bracket_expressionContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Bracket_expressionContext,i)


        def member_access(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Member_accessContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Member_accessContext,i)


        def method_invocation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Method_invocationContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Method_invocationContext,i)


        def OP_INC(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.OP_INC)
            else:
                return self.getToken(CSharpParser.OP_INC, i)

        def OP_DEC(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.OP_DEC)
            else:
                return self.getToken(CSharpParser.OP_DEC, i)

        def OP_PTR(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.OP_PTR)
            else:
                return self.getToken(CSharpParser.OP_PTR, i)

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(CSharpParser.IdentifierContext,i)


        def tuple_type(self):
            return self.getTypedRuleContext(CSharpParser.Tuple_typeContext,0)


        def default_value_expression(self):
            return self.getTypedRuleContext(CSharpParser.Default_value_expressionContext,0)


        def stackalloc_expression(self):
            return self.getTypedRuleContext(CSharpParser.Stackalloc_expressionContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_primary_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrimary_expression" ):
                listener.enterPrimary_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrimary_expression" ):
                listener.exitPrimary_expression(self)




    def primary_expression(self):

        localctx = CSharpParser.Primary_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_primary_expression)
        self._la = 0 # Token type
        try:
            self.state = 923
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,67,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 882
                localctx.pe = self.primary_expression_start()
                self.state = 884
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,59,self._ctx)
                if la_ == 1:
                    self.state = 883
                    self.match(CSharpParser.BANG)


                self.state = 889
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,60,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 886
                        self.bracket_expression() 
                    self.state = 891
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,60,self._ctx)

                self.state = 893
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==143:
                    self.state = 892
                    self.match(CSharpParser.BANG)


                self.state = 917
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,66,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 901
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [131, 148]:
                            self.state = 895
                            self.member_access()
                            pass
                        elif token in [129]:
                            self.state = 896
                            self.method_invocation()
                            pass
                        elif token in [151]:
                            self.state = 897
                            self.match(CSharpParser.OP_INC)
                            pass
                        elif token in [152]:
                            self.state = 898
                            self.match(CSharpParser.OP_DEC)
                            pass
                        elif token in [155]:
                            self.state = 899
                            self.match(CSharpParser.OP_PTR)
                            self.state = 900
                            self.identifier()
                            pass
                        else:
                            raise NoViableAltException(self)

                        self.state = 904
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,63,self._ctx)
                        if la_ == 1:
                            self.state = 903
                            self.match(CSharpParser.BANG)


                        self.state = 909
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,64,self._ctx)
                        while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                            if _alt==1:
                                self.state = 906
                                self.bracket_expression() 
                            self.state = 911
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input,64,self._ctx)

                        self.state = 913
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==143:
                            self.state = 912
                            self.match(CSharpParser.BANG)

                 
                    self.state = 919
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,66,self._ctx)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 920
                self.tuple_type()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 921
                self.default_value_expression()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 922
                self.stackalloc_expression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Primary_expression_startContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CSharpParser.RULE_primary_expression_start

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class LiteralAccessExpressionContext(Primary_expression_startContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CSharpParser.Primary_expression_startContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LITERAL_ACCESS(self):
            return self.getToken(CSharpParser.LITERAL_ACCESS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLiteralAccessExpression" ):
                listener.enterLiteralAccessExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLiteralAccessExpression" ):
                listener.exitLiteralAccessExpression(self)


    class DefaultValueExpressionContext(Primary_expression_startContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CSharpParser.Primary_expression_startContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DEFAULT(self):
            return self.getToken(CSharpParser.DEFAULT, 0)
        def OPEN_PARENS(self):
            return self.getToken(CSharpParser.OPEN_PARENS, 0)
        def type_(self):
            return self.getTypedRuleContext(CSharpParser.Type_Context,0)

        def CLOSE_PARENS(self):
            return self.getToken(CSharpParser.CLOSE_PARENS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDefaultValueExpression" ):
                listener.enterDefaultValueExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDefaultValueExpression" ):
                listener.exitDefaultValueExpression(self)


    class BaseAccessExpressionContext(Primary_expression_startContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CSharpParser.Primary_expression_startContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def BASE(self):
            return self.getToken(CSharpParser.BASE, 0)
        def DOT(self):
            return self.getToken(CSharpParser.DOT, 0)
        def identifier(self):
            return self.getTypedRuleContext(CSharpParser.IdentifierContext,0)

        def OPEN_BRACKET(self):
            return self.getToken(CSharpParser.OPEN_BRACKET, 0)
        def expression_list(self):
            return self.getTypedRuleContext(CSharpParser.Expression_listContext,0)

        def CLOSE_BRACKET(self):
            return self.getToken(CSharpParser.CLOSE_BRACKET, 0)
        def type_argument_list(self):
            return self.getTypedRuleContext(CSharpParser.Type_argument_listContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBaseAccessExpression" ):
                listener.enterBaseAccessExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBaseAccessExpression" ):
                listener.exitBaseAccessExpression(self)


    class SizeofExpressionContext(Primary_expression_startContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CSharpParser.Primary_expression_startContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SIZEOF(self):
            return self.getToken(CSharpParser.SIZEOF, 0)
        def OPEN_PARENS(self):
            return self.getToken(CSharpParser.OPEN_PARENS, 0)
        def type_(self):
            return self.getTypedRuleContext(CSharpParser.Type_Context,0)

        def CLOSE_PARENS(self):
            return self.getToken(CSharpParser.CLOSE_PARENS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSizeofExpression" ):
                listener.enterSizeofExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSizeofExpression" ):
                listener.exitSizeofExpression(self)


    class ParenthesisExpressionsContext(Primary_expression_startContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CSharpParser.Primary_expression_startContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def OPEN_PARENS(self):
            return self.getToken(CSharpParser.OPEN_PARENS, 0)
        def expression(self):
            return self.getTypedRuleContext(CSharpParser.ExpressionContext,0)

        def CLOSE_PARENS(self):
            return self.getToken(CSharpParser.CLOSE_PARENS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParenthesisExpressions" ):
                listener.enterParenthesisExpressions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParenthesisExpressions" ):
                listener.exitParenthesisExpressions(self)


    class ThisReferenceExpressionContext(Primary_expression_startContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CSharpParser.Primary_expression_startContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def THIS(self):
            return self.getToken(CSharpParser.THIS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterThisReferenceExpression" ):
                listener.enterThisReferenceExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitThisReferenceExpression" ):
                listener.exitThisReferenceExpression(self)


    class ObjectCreationExpressionContext(Primary_expression_startContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CSharpParser.Primary_expression_startContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def NEW(self):
            return self.getToken(CSharpParser.NEW, 0)
        def type_(self):
            return self.getTypedRuleContext(CSharpParser.Type_Context,0)

        def anonymous_object_initializer(self):
            return self.getTypedRuleContext(CSharpParser.Anonymous_object_initializerContext,0)

        def rank_specifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Rank_specifierContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Rank_specifierContext,i)

        def array_initializer(self):
            return self.getTypedRuleContext(CSharpParser.Array_initializerContext,0)

        def object_creation_expression(self):
            return self.getTypedRuleContext(CSharpParser.Object_creation_expressionContext,0)

        def object_or_collection_initializer(self):
            return self.getTypedRuleContext(CSharpParser.Object_or_collection_initializerContext,0)

        def OPEN_BRACKET(self):
            return self.getToken(CSharpParser.OPEN_BRACKET, 0)
        def expression_list(self):
            return self.getTypedRuleContext(CSharpParser.Expression_listContext,0)

        def CLOSE_BRACKET(self):
            return self.getToken(CSharpParser.CLOSE_BRACKET, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterObjectCreationExpression" ):
                listener.enterObjectCreationExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitObjectCreationExpression" ):
                listener.exitObjectCreationExpression(self)


    class AnonymousMethodExpressionContext(Primary_expression_startContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CSharpParser.Primary_expression_startContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DELEGATE(self):
            return self.getToken(CSharpParser.DELEGATE, 0)
        def block(self):
            return self.getTypedRuleContext(CSharpParser.BlockContext,0)

        def ASYNC(self):
            return self.getToken(CSharpParser.ASYNC, 0)
        def OPEN_PARENS(self):
            return self.getToken(CSharpParser.OPEN_PARENS, 0)
        def CLOSE_PARENS(self):
            return self.getToken(CSharpParser.CLOSE_PARENS, 0)
        def explicit_anonymous_function_parameter_list(self):
            return self.getTypedRuleContext(CSharpParser.Explicit_anonymous_function_parameter_listContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnonymousMethodExpression" ):
                listener.enterAnonymousMethodExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnonymousMethodExpression" ):
                listener.exitAnonymousMethodExpression(self)


    class TypeofExpressionContext(Primary_expression_startContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CSharpParser.Primary_expression_startContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def TYPEOF(self):
            return self.getToken(CSharpParser.TYPEOF, 0)
        def OPEN_PARENS(self):
            return self.getToken(CSharpParser.OPEN_PARENS, 0)
        def CLOSE_PARENS(self):
            return self.getToken(CSharpParser.CLOSE_PARENS, 0)
        def unbound_type_name(self):
            return self.getTypedRuleContext(CSharpParser.Unbound_type_nameContext,0)

        def type_(self):
            return self.getTypedRuleContext(CSharpParser.Type_Context,0)

        def VOID(self):
            return self.getToken(CSharpParser.VOID, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeofExpression" ):
                listener.enterTypeofExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeofExpression" ):
                listener.exitTypeofExpression(self)


    class TupleExpressionContext(Primary_expression_startContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CSharpParser.Primary_expression_startContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def OPEN_PARENS(self):
            return self.getToken(CSharpParser.OPEN_PARENS, 0)
        def argument(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.ArgumentContext)
            else:
                return self.getTypedRuleContext(CSharpParser.ArgumentContext,i)

        def CLOSE_PARENS(self):
            return self.getToken(CSharpParser.CLOSE_PARENS, 0)
        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.COMMA)
            else:
                return self.getToken(CSharpParser.COMMA, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTupleExpression" ):
                listener.enterTupleExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTupleExpression" ):
                listener.exitTupleExpression(self)


    class UncheckedExpressionContext(Primary_expression_startContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CSharpParser.Primary_expression_startContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def UNCHECKED(self):
            return self.getToken(CSharpParser.UNCHECKED, 0)
        def OPEN_PARENS(self):
            return self.getToken(CSharpParser.OPEN_PARENS, 0)
        def expression(self):
            return self.getTypedRuleContext(CSharpParser.ExpressionContext,0)

        def CLOSE_PARENS(self):
            return self.getToken(CSharpParser.CLOSE_PARENS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUncheckedExpression" ):
                listener.enterUncheckedExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUncheckedExpression" ):
                listener.exitUncheckedExpression(self)


    class SimpleNameExpressionContext(Primary_expression_startContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CSharpParser.Primary_expression_startContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def identifier(self):
            return self.getTypedRuleContext(CSharpParser.IdentifierContext,0)

        def type_argument_list(self):
            return self.getTypedRuleContext(CSharpParser.Type_argument_listContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleNameExpression" ):
                listener.enterSimpleNameExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleNameExpression" ):
                listener.exitSimpleNameExpression(self)


    class MemberAccessExpressionContext(Primary_expression_startContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CSharpParser.Primary_expression_startContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def predefined_type(self):
            return self.getTypedRuleContext(CSharpParser.Predefined_typeContext,0)

        def qualified_alias_member(self):
            return self.getTypedRuleContext(CSharpParser.Qualified_alias_memberContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMemberAccessExpression" ):
                listener.enterMemberAccessExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMemberAccessExpression" ):
                listener.exitMemberAccessExpression(self)


    class CheckedExpressionContext(Primary_expression_startContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CSharpParser.Primary_expression_startContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CHECKED(self):
            return self.getToken(CSharpParser.CHECKED, 0)
        def OPEN_PARENS(self):
            return self.getToken(CSharpParser.OPEN_PARENS, 0)
        def expression(self):
            return self.getTypedRuleContext(CSharpParser.ExpressionContext,0)

        def CLOSE_PARENS(self):
            return self.getToken(CSharpParser.CLOSE_PARENS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCheckedExpression" ):
                listener.enterCheckedExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCheckedExpression" ):
                listener.exitCheckedExpression(self)


    class LiteralExpressionContext(Primary_expression_startContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CSharpParser.Primary_expression_startContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def literal(self):
            return self.getTypedRuleContext(CSharpParser.LiteralContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLiteralExpression" ):
                listener.enterLiteralExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLiteralExpression" ):
                listener.exitLiteralExpression(self)


    class NameofExpressionContext(Primary_expression_startContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CSharpParser.Primary_expression_startContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def NAMEOF(self):
            return self.getToken(CSharpParser.NAMEOF, 0)
        def OPEN_PARENS(self):
            return self.getToken(CSharpParser.OPEN_PARENS, 0)
        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(CSharpParser.IdentifierContext,i)

        def CLOSE_PARENS(self):
            return self.getToken(CSharpParser.CLOSE_PARENS, 0)
        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.DOT)
            else:
                return self.getToken(CSharpParser.DOT, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNameofExpression" ):
                listener.enterNameofExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNameofExpression" ):
                listener.exitNameofExpression(self)



    def primary_expression_start(self):

        localctx = CSharpParser.Primary_expression_startContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_primary_expression_start)
        self._la = 0 # Token type
        try:
            self.state = 1046
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,83,self._ctx)
            if la_ == 1:
                localctx = CSharpParser.LiteralExpressionContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 925
                self.literal()
                pass

            elif la_ == 2:
                localctx = CSharpParser.SimpleNameExpressionContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 926
                self.identifier()
                self.state = 928
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,68,self._ctx)
                if la_ == 1:
                    self.state = 927
                    self.type_argument_list()


                pass

            elif la_ == 3:
                localctx = CSharpParser.ParenthesisExpressionsContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 930
                self.match(CSharpParser.OPEN_PARENS)
                self.state = 931
                self.expression()
                self.state = 932
                self.match(CSharpParser.CLOSE_PARENS)
                pass

            elif la_ == 4:
                localctx = CSharpParser.MemberAccessExpressionContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 934
                self.predefined_type()
                pass

            elif la_ == 5:
                localctx = CSharpParser.MemberAccessExpressionContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 935
                self.qualified_alias_member()
                pass

            elif la_ == 6:
                localctx = CSharpParser.LiteralAccessExpressionContext(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 936
                self.match(CSharpParser.LITERAL_ACCESS)
                pass

            elif la_ == 7:
                localctx = CSharpParser.ThisReferenceExpressionContext(self, localctx)
                self.enterOuterAlt(localctx, 7)
                self.state = 937
                self.match(CSharpParser.THIS)
                pass

            elif la_ == 8:
                localctx = CSharpParser.BaseAccessExpressionContext(self, localctx)
                self.enterOuterAlt(localctx, 8)
                self.state = 938
                self.match(CSharpParser.BASE)
                self.state = 948
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [131]:
                    self.state = 939
                    self.match(CSharpParser.DOT)
                    self.state = 940
                    self.identifier()
                    self.state = 942
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,69,self._ctx)
                    if la_ == 1:
                        self.state = 941
                        self.type_argument_list()


                    pass
                elif token in [127]:
                    self.state = 944
                    self.match(CSharpParser.OPEN_BRACKET)
                    self.state = 945
                    self.expression_list()
                    self.state = 946
                    self.match(CSharpParser.CLOSE_BRACKET)
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 9:
                localctx = CSharpParser.ObjectCreationExpressionContext(self, localctx)
                self.enterOuterAlt(localctx, 9)
                self.state = 950
                self.match(CSharpParser.NEW)
                self.state = 979
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,75,self._ctx)
                if la_ == 1:
                    self.state = 951
                    self.type_()
                    self.state = 973
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,74,self._ctx)
                    if la_ == 1:
                        self.state = 952
                        self.object_creation_expression()
                        pass

                    elif la_ == 2:
                        self.state = 953
                        self.object_or_collection_initializer()
                        pass

                    elif la_ == 3:
                        self.state = 954
                        self.match(CSharpParser.OPEN_BRACKET)
                        self.state = 955
                        self.expression_list()
                        self.state = 956
                        self.match(CSharpParser.CLOSE_BRACKET)
                        self.state = 960
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,71,self._ctx)
                        while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                            if _alt==1:
                                self.state = 957
                                self.rank_specifier() 
                            self.state = 962
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input,71,self._ctx)

                        self.state = 964
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==125:
                            self.state = 963
                            self.array_initializer()


                        pass

                    elif la_ == 4:
                        self.state = 967 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while True:
                            self.state = 966
                            self.rank_specifier()
                            self.state = 969 
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if not (_la==127):
                                break

                        self.state = 971
                        self.array_initializer()
                        pass



                elif la_ == 2:
                    self.state = 975
                    self.anonymous_object_initializer()

                elif la_ == 3:
                    self.state = 976
                    self.rank_specifier()
                    self.state = 977
                    self.array_initializer()


                pass

            elif la_ == 10:
                localctx = CSharpParser.TupleExpressionContext(self, localctx)
                self.enterOuterAlt(localctx, 10)
                self.state = 981
                self.match(CSharpParser.OPEN_PARENS)
                self.state = 982
                self.argument()
                self.state = 985 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 983
                    self.match(CSharpParser.COMMA)
                    self.state = 984
                    self.argument()
                    self.state = 987 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==132):
                        break

                self.state = 989
                self.match(CSharpParser.CLOSE_PARENS)
                pass

            elif la_ == 11:
                localctx = CSharpParser.TypeofExpressionContext(self, localctx)
                self.enterOuterAlt(localctx, 11)
                self.state = 991
                self.match(CSharpParser.TYPEOF)
                self.state = 992
                self.match(CSharpParser.OPEN_PARENS)
                self.state = 996
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,77,self._ctx)
                if la_ == 1:
                    self.state = 993
                    self.unbound_type_name()
                    pass

                elif la_ == 2:
                    self.state = 994
                    self.type_()
                    pass

                elif la_ == 3:
                    self.state = 995
                    self.match(CSharpParser.VOID)
                    pass


                self.state = 998
                self.match(CSharpParser.CLOSE_PARENS)
                pass

            elif la_ == 12:
                localctx = CSharpParser.CheckedExpressionContext(self, localctx)
                self.enterOuterAlt(localctx, 12)
                self.state = 999
                self.match(CSharpParser.CHECKED)
                self.state = 1000
                self.match(CSharpParser.OPEN_PARENS)
                self.state = 1001
                self.expression()
                self.state = 1002
                self.match(CSharpParser.CLOSE_PARENS)
                pass

            elif la_ == 13:
                localctx = CSharpParser.UncheckedExpressionContext(self, localctx)
                self.enterOuterAlt(localctx, 13)
                self.state = 1004
                self.match(CSharpParser.UNCHECKED)
                self.state = 1005
                self.match(CSharpParser.OPEN_PARENS)
                self.state = 1006
                self.expression()
                self.state = 1007
                self.match(CSharpParser.CLOSE_PARENS)
                pass

            elif la_ == 14:
                localctx = CSharpParser.DefaultValueExpressionContext(self, localctx)
                self.enterOuterAlt(localctx, 14)
                self.state = 1009
                self.match(CSharpParser.DEFAULT)
                self.state = 1014
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,78,self._ctx)
                if la_ == 1:
                    self.state = 1010
                    self.match(CSharpParser.OPEN_PARENS)
                    self.state = 1011
                    self.type_()
                    self.state = 1012
                    self.match(CSharpParser.CLOSE_PARENS)


                pass

            elif la_ == 15:
                localctx = CSharpParser.AnonymousMethodExpressionContext(self, localctx)
                self.enterOuterAlt(localctx, 15)
                self.state = 1017
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==15:
                    self.state = 1016
                    self.match(CSharpParser.ASYNC)


                self.state = 1019
                self.match(CSharpParser.DELEGATE)
                self.state = 1025
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==129:
                    self.state = 1020
                    self.match(CSharpParser.OPEN_PARENS)
                    self.state = 1022
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if ((((_la - 10)) & ~0x3f) == 0 and ((1 << (_la - 10)) & 7812956763456032119) != 0) or ((((_la - 75)) & ~0x3f) == 0 and ((1 << (_la - 75)) & 18015337681329505) != 0):
                        self.state = 1021
                        self.explicit_anonymous_function_parameter_list()


                    self.state = 1024
                    self.match(CSharpParser.CLOSE_PARENS)


                self.state = 1027
                self.block()
                pass

            elif la_ == 16:
                localctx = CSharpParser.SizeofExpressionContext(self, localctx)
                self.enterOuterAlt(localctx, 16)
                self.state = 1028
                self.match(CSharpParser.SIZEOF)
                self.state = 1029
                self.match(CSharpParser.OPEN_PARENS)
                self.state = 1030
                self.type_()
                self.state = 1031
                self.match(CSharpParser.CLOSE_PARENS)
                pass

            elif la_ == 17:
                localctx = CSharpParser.NameofExpressionContext(self, localctx)
                self.enterOuterAlt(localctx, 17)
                self.state = 1033
                self.match(CSharpParser.NAMEOF)
                self.state = 1034
                self.match(CSharpParser.OPEN_PARENS)
                self.state = 1040
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,82,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1035
                        self.identifier()
                        self.state = 1036
                        self.match(CSharpParser.DOT) 
                    self.state = 1042
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,82,self._ctx)

                self.state = 1043
                self.identifier()
                self.state = 1044
                self.match(CSharpParser.CLOSE_PARENS)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Throwable_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(CSharpParser.ExpressionContext,0)


        def throw_expression(self):
            return self.getTypedRuleContext(CSharpParser.Throw_expressionContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_throwable_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterThrowable_expression" ):
                listener.enterThrowable_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitThrowable_expression" ):
                listener.exitThrowable_expression(self)




    def throwable_expression(self):

        localctx = CSharpParser.Throwable_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_throwable_expression)
        try:
            self.state = 1050
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [10, 11, 12, 14, 15, 16, 17, 18, 20, 21, 24, 25, 29, 30, 31, 32, 34, 35, 38, 42, 45, 48, 49, 51, 55, 58, 60, 61, 63, 64, 66, 67, 68, 69, 71, 75, 80, 81, 83, 85, 86, 87, 88, 89, 91, 94, 96, 98, 99, 100, 101, 102, 104, 106, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 129, 135, 136, 137, 140, 142, 143, 144, 151, 152, 171]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1048
                self.expression()
                pass
            elif token in [95]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1049
                self.throw_expression()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Throw_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def THROW(self):
            return self.getToken(CSharpParser.THROW, 0)

        def expression(self):
            return self.getTypedRuleContext(CSharpParser.ExpressionContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_throw_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterThrow_expression" ):
                listener.enterThrow_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitThrow_expression" ):
                listener.exitThrow_expression(self)




    def throw_expression(self):

        localctx = CSharpParser.Throw_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_throw_expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1052
            self.match(CSharpParser.THROW)
            self.state = 1053
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Member_accessContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DOT(self):
            return self.getToken(CSharpParser.DOT, 0)

        def identifier(self):
            return self.getTypedRuleContext(CSharpParser.IdentifierContext,0)


        def INTERR(self):
            return self.getToken(CSharpParser.INTERR, 0)

        def type_argument_list(self):
            return self.getTypedRuleContext(CSharpParser.Type_argument_listContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_member_access

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMember_access" ):
                listener.enterMember_access(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMember_access" ):
                listener.exitMember_access(self)




    def member_access(self):

        localctx = CSharpParser.Member_accessContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_member_access)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1056
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==148:
                self.state = 1055
                self.match(CSharpParser.INTERR)


            self.state = 1058
            self.match(CSharpParser.DOT)
            self.state = 1059
            self.identifier()
            self.state = 1061
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,86,self._ctx)
            if la_ == 1:
                self.state = 1060
                self.type_argument_list()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Bracket_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_BRACKET(self):
            return self.getToken(CSharpParser.OPEN_BRACKET, 0)

        def indexer_argument(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Indexer_argumentContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Indexer_argumentContext,i)


        def CLOSE_BRACKET(self):
            return self.getToken(CSharpParser.CLOSE_BRACKET, 0)

        def INTERR(self):
            return self.getToken(CSharpParser.INTERR, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.COMMA)
            else:
                return self.getToken(CSharpParser.COMMA, i)

        def getRuleIndex(self):
            return CSharpParser.RULE_bracket_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBracket_expression" ):
                listener.enterBracket_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBracket_expression" ):
                listener.exitBracket_expression(self)




    def bracket_expression(self):

        localctx = CSharpParser.Bracket_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_bracket_expression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1064
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==148:
                self.state = 1063
                self.match(CSharpParser.INTERR)


            self.state = 1066
            self.match(CSharpParser.OPEN_BRACKET)
            self.state = 1067
            self.indexer_argument()
            self.state = 1072
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==132:
                self.state = 1068
                self.match(CSharpParser.COMMA)
                self.state = 1069
                self.indexer_argument()
                self.state = 1074
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1075
            self.match(CSharpParser.CLOSE_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Indexer_argumentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(CSharpParser.ExpressionContext,0)


        def identifier(self):
            return self.getTypedRuleContext(CSharpParser.IdentifierContext,0)


        def COLON(self):
            return self.getToken(CSharpParser.COLON, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_indexer_argument

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndexer_argument" ):
                listener.enterIndexer_argument(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndexer_argument" ):
                listener.exitIndexer_argument(self)




    def indexer_argument(self):

        localctx = CSharpParser.Indexer_argumentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_indexer_argument)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1080
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,89,self._ctx)
            if la_ == 1:
                self.state = 1077
                self.identifier()
                self.state = 1078
                self.match(CSharpParser.COLON)


            self.state = 1082
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Predefined_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BOOL(self):
            return self.getToken(CSharpParser.BOOL, 0)

        def BYTE(self):
            return self.getToken(CSharpParser.BYTE, 0)

        def CHAR(self):
            return self.getToken(CSharpParser.CHAR, 0)

        def DECIMAL(self):
            return self.getToken(CSharpParser.DECIMAL, 0)

        def DOUBLE(self):
            return self.getToken(CSharpParser.DOUBLE, 0)

        def FLOAT(self):
            return self.getToken(CSharpParser.FLOAT, 0)

        def INT(self):
            return self.getToken(CSharpParser.INT, 0)

        def LONG(self):
            return self.getToken(CSharpParser.LONG, 0)

        def OBJECT(self):
            return self.getToken(CSharpParser.OBJECT, 0)

        def SBYTE(self):
            return self.getToken(CSharpParser.SBYTE, 0)

        def SHORT(self):
            return self.getToken(CSharpParser.SHORT, 0)

        def STRING(self):
            return self.getToken(CSharpParser.STRING, 0)

        def UINT(self):
            return self.getToken(CSharpParser.UINT, 0)

        def ULONG(self):
            return self.getToken(CSharpParser.ULONG, 0)

        def USHORT(self):
            return self.getToken(CSharpParser.USHORT, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_predefined_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPredefined_type" ):
                listener.enterPredefined_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPredefined_type" ):
                listener.exitPredefined_type(self)




    def predefined_type(self):

        localctx = CSharpParser.Predefined_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_predefined_type)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1084
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & -9187308037727846400) != 0) or ((((_la - 68)) & ~0x3f) == 0 and ((1 << (_la - 68)) & 75170873345) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Expression_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(CSharpParser.ExpressionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.COMMA)
            else:
                return self.getToken(CSharpParser.COMMA, i)

        def getRuleIndex(self):
            return CSharpParser.RULE_expression_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpression_list" ):
                listener.enterExpression_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpression_list" ):
                listener.exitExpression_list(self)




    def expression_list(self):

        localctx = CSharpParser.Expression_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_expression_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1086
            self.expression()
            self.state = 1091
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==132:
                self.state = 1087
                self.match(CSharpParser.COMMA)
                self.state = 1088
                self.expression()
                self.state = 1093
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Object_or_collection_initializerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def object_initializer(self):
            return self.getTypedRuleContext(CSharpParser.Object_initializerContext,0)


        def collection_initializer(self):
            return self.getTypedRuleContext(CSharpParser.Collection_initializerContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_object_or_collection_initializer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterObject_or_collection_initializer" ):
                listener.enterObject_or_collection_initializer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitObject_or_collection_initializer" ):
                listener.exitObject_or_collection_initializer(self)




    def object_or_collection_initializer(self):

        localctx = CSharpParser.Object_or_collection_initializerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_object_or_collection_initializer)
        try:
            self.state = 1096
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,91,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1094
                self.object_initializer()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1095
                self.collection_initializer()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Object_initializerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_BRACE(self):
            return self.getToken(CSharpParser.OPEN_BRACE, 0)

        def CLOSE_BRACE(self):
            return self.getToken(CSharpParser.CLOSE_BRACE, 0)

        def member_initializer_list(self):
            return self.getTypedRuleContext(CSharpParser.Member_initializer_listContext,0)


        def COMMA(self):
            return self.getToken(CSharpParser.COMMA, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_object_initializer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterObject_initializer" ):
                listener.enterObject_initializer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitObject_initializer" ):
                listener.exitObject_initializer(self)




    def object_initializer(self):

        localctx = CSharpParser.Object_initializerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_object_initializer)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1098
            self.match(CSharpParser.OPEN_BRACE)
            self.state = 1103
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 3750091428249852928) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -9221467407831136095) != 0):
                self.state = 1099
                self.member_initializer_list()
                self.state = 1101
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==132:
                    self.state = 1100
                    self.match(CSharpParser.COMMA)




            self.state = 1105
            self.match(CSharpParser.CLOSE_BRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Member_initializer_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def member_initializer(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Member_initializerContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Member_initializerContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.COMMA)
            else:
                return self.getToken(CSharpParser.COMMA, i)

        def getRuleIndex(self):
            return CSharpParser.RULE_member_initializer_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMember_initializer_list" ):
                listener.enterMember_initializer_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMember_initializer_list" ):
                listener.exitMember_initializer_list(self)




    def member_initializer_list(self):

        localctx = CSharpParser.Member_initializer_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_member_initializer_list)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1107
            self.member_initializer()
            self.state = 1112
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,94,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1108
                    self.match(CSharpParser.COMMA)
                    self.state = 1109
                    self.member_initializer() 
                self.state = 1114
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,94,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Member_initializerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ASSIGNMENT(self):
            return self.getToken(CSharpParser.ASSIGNMENT, 0)

        def initializer_value(self):
            return self.getTypedRuleContext(CSharpParser.Initializer_valueContext,0)


        def identifier(self):
            return self.getTypedRuleContext(CSharpParser.IdentifierContext,0)


        def OPEN_BRACKET(self):
            return self.getToken(CSharpParser.OPEN_BRACKET, 0)

        def expression(self):
            return self.getTypedRuleContext(CSharpParser.ExpressionContext,0)


        def CLOSE_BRACKET(self):
            return self.getToken(CSharpParser.CLOSE_BRACKET, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_member_initializer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMember_initializer" ):
                listener.enterMember_initializer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMember_initializer" ):
                listener.exitMember_initializer(self)




    def member_initializer(self):

        localctx = CSharpParser.Member_initializerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_member_initializer)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1120
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [10, 11, 12, 14, 15, 16, 20, 32, 35, 38, 48, 49, 51, 58, 60, 61, 64, 69, 71, 75, 81, 85, 86, 102, 106, 110, 111, 113, 114]:
                self.state = 1115
                self.identifier()
                pass
            elif token in [127]:
                self.state = 1116
                self.match(CSharpParser.OPEN_BRACKET)
                self.state = 1117
                self.expression()
                self.state = 1118
                self.match(CSharpParser.CLOSE_BRACKET)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 1122
            self.match(CSharpParser.ASSIGNMENT)
            self.state = 1123
            self.initializer_value()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Initializer_valueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(CSharpParser.ExpressionContext,0)


        def object_or_collection_initializer(self):
            return self.getTypedRuleContext(CSharpParser.Object_or_collection_initializerContext,0)


        def tuple_type(self):
            return self.getTypedRuleContext(CSharpParser.Tuple_typeContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_initializer_value

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInitializer_value" ):
                listener.enterInitializer_value(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInitializer_value" ):
                listener.exitInitializer_value(self)




    def initializer_value(self):

        localctx = CSharpParser.Initializer_valueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_initializer_value)
        try:
            self.state = 1128
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,96,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1125
                self.expression()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1126
                self.object_or_collection_initializer()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1127
                self.tuple_type()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Collection_initializerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_BRACE(self):
            return self.getToken(CSharpParser.OPEN_BRACE, 0)

        def element_initializer(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Element_initializerContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Element_initializerContext,i)


        def CLOSE_BRACE(self):
            return self.getToken(CSharpParser.CLOSE_BRACE, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.COMMA)
            else:
                return self.getToken(CSharpParser.COMMA, i)

        def getRuleIndex(self):
            return CSharpParser.RULE_collection_initializer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCollection_initializer" ):
                listener.enterCollection_initializer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCollection_initializer" ):
                listener.exitCollection_initializer(self)




    def collection_initializer(self):

        localctx = CSharpParser.Collection_initializerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_collection_initializer)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1130
            self.match(CSharpParser.OPEN_BRACE)
            self.state = 1131
            self.element_initializer()
            self.state = 1136
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,97,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1132
                    self.match(CSharpParser.COMMA)
                    self.state = 1133
                    self.element_initializer() 
                self.state = 1138
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,97,self._ctx)

            self.state = 1140
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==132:
                self.state = 1139
                self.match(CSharpParser.COMMA)


            self.state = 1142
            self.match(CSharpParser.CLOSE_BRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Element_initializerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def non_assignment_expression(self):
            return self.getTypedRuleContext(CSharpParser.Non_assignment_expressionContext,0)


        def OPEN_BRACE(self):
            return self.getToken(CSharpParser.OPEN_BRACE, 0)

        def expression_list(self):
            return self.getTypedRuleContext(CSharpParser.Expression_listContext,0)


        def CLOSE_BRACE(self):
            return self.getToken(CSharpParser.CLOSE_BRACE, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_element_initializer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElement_initializer" ):
                listener.enterElement_initializer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElement_initializer" ):
                listener.exitElement_initializer(self)




    def element_initializer(self):

        localctx = CSharpParser.Element_initializerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_element_initializer)
        try:
            self.state = 1149
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [10, 11, 12, 14, 15, 16, 17, 18, 20, 21, 24, 25, 29, 30, 31, 32, 34, 35, 38, 42, 45, 48, 49, 51, 55, 58, 60, 61, 63, 64, 66, 67, 68, 69, 71, 75, 81, 83, 85, 86, 87, 88, 89, 91, 94, 96, 98, 99, 100, 101, 102, 104, 106, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 129, 135, 136, 137, 140, 142, 143, 144, 151, 152, 171]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1144
                self.non_assignment_expression()
                pass
            elif token in [125]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1145
                self.match(CSharpParser.OPEN_BRACE)
                self.state = 1146
                self.expression_list()
                self.state = 1147
                self.match(CSharpParser.CLOSE_BRACE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Anonymous_object_initializerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_BRACE(self):
            return self.getToken(CSharpParser.OPEN_BRACE, 0)

        def CLOSE_BRACE(self):
            return self.getToken(CSharpParser.CLOSE_BRACE, 0)

        def member_declarator_list(self):
            return self.getTypedRuleContext(CSharpParser.Member_declarator_listContext,0)


        def COMMA(self):
            return self.getToken(CSharpParser.COMMA, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_anonymous_object_initializer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnonymous_object_initializer" ):
                listener.enterAnonymous_object_initializer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnonymous_object_initializer" ):
                listener.exitAnonymous_object_initializer(self)




    def anonymous_object_initializer(self):

        localctx = CSharpParser.Anonymous_object_initializerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_anonymous_object_initializer)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1151
            self.match(CSharpParser.OPEN_BRACE)
            self.state = 1156
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 10)) & ~0x3f) == 0 and ((1 << (_la - 10)) & 3417425939254529527) != 0) or ((((_la - 75)) & ~0x3f) == 0 and ((1 << (_la - 75)) & 19140129564753217) != 0):
                self.state = 1152
                self.member_declarator_list()
                self.state = 1154
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==132:
                    self.state = 1153
                    self.match(CSharpParser.COMMA)




            self.state = 1158
            self.match(CSharpParser.CLOSE_BRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Member_declarator_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def member_declarator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Member_declaratorContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Member_declaratorContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.COMMA)
            else:
                return self.getToken(CSharpParser.COMMA, i)

        def getRuleIndex(self):
            return CSharpParser.RULE_member_declarator_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMember_declarator_list" ):
                listener.enterMember_declarator_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMember_declarator_list" ):
                listener.exitMember_declarator_list(self)




    def member_declarator_list(self):

        localctx = CSharpParser.Member_declarator_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_member_declarator_list)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1160
            self.member_declarator()
            self.state = 1165
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,102,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1161
                    self.match(CSharpParser.COMMA)
                    self.state = 1162
                    self.member_declarator() 
                self.state = 1167
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,102,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Member_declaratorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def primary_expression(self):
            return self.getTypedRuleContext(CSharpParser.Primary_expressionContext,0)


        def identifier(self):
            return self.getTypedRuleContext(CSharpParser.IdentifierContext,0)


        def ASSIGNMENT(self):
            return self.getToken(CSharpParser.ASSIGNMENT, 0)

        def expression(self):
            return self.getTypedRuleContext(CSharpParser.ExpressionContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_member_declarator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMember_declarator" ):
                listener.enterMember_declarator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMember_declarator" ):
                listener.exitMember_declarator(self)




    def member_declarator(self):

        localctx = CSharpParser.Member_declaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_member_declarator)
        try:
            self.state = 1173
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,103,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1168
                self.primary_expression()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1169
                self.identifier()
                self.state = 1170
                self.match(CSharpParser.ASSIGNMENT)
                self.state = 1171
                self.expression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Unbound_type_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(CSharpParser.IdentifierContext,i)


        def DOUBLE_COLON(self):
            return self.getToken(CSharpParser.DOUBLE_COLON, 0)

        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.DOT)
            else:
                return self.getToken(CSharpParser.DOT, i)

        def generic_dimension_specifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Generic_dimension_specifierContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Generic_dimension_specifierContext,i)


        def getRuleIndex(self):
            return CSharpParser.RULE_unbound_type_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnbound_type_name" ):
                listener.enterUnbound_type_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnbound_type_name" ):
                listener.exitUnbound_type_name(self)




    def unbound_type_name(self):

        localctx = CSharpParser.Unbound_type_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_unbound_type_name)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1175
            self.identifier()
            self.state = 1184
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [130, 131, 146]:
                self.state = 1177
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==146:
                    self.state = 1176
                    self.generic_dimension_specifier()


                pass
            elif token in [149]:
                self.state = 1179
                self.match(CSharpParser.DOUBLE_COLON)
                self.state = 1180
                self.identifier()
                self.state = 1182
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==146:
                    self.state = 1181
                    self.generic_dimension_specifier()


                pass
            else:
                raise NoViableAltException(self)

            self.state = 1193
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==131:
                self.state = 1186
                self.match(CSharpParser.DOT)
                self.state = 1187
                self.identifier()
                self.state = 1189
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==146:
                    self.state = 1188
                    self.generic_dimension_specifier()


                self.state = 1195
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Generic_dimension_specifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LT(self):
            return self.getToken(CSharpParser.LT, 0)

        def GT(self):
            return self.getToken(CSharpParser.GT, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.COMMA)
            else:
                return self.getToken(CSharpParser.COMMA, i)

        def getRuleIndex(self):
            return CSharpParser.RULE_generic_dimension_specifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGeneric_dimension_specifier" ):
                listener.enterGeneric_dimension_specifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGeneric_dimension_specifier" ):
                listener.exitGeneric_dimension_specifier(self)




    def generic_dimension_specifier(self):

        localctx = CSharpParser.Generic_dimension_specifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_generic_dimension_specifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1196
            self.match(CSharpParser.LT)
            self.state = 1200
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==132:
                self.state = 1197
                self.match(CSharpParser.COMMA)
                self.state = 1202
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1203
            self.match(CSharpParser.GT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IsTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def base_type(self):
            return self.getTypedRuleContext(CSharpParser.Base_typeContext,0)


        def rank_specifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Rank_specifierContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Rank_specifierContext,i)


        def STAR(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.STAR)
            else:
                return self.getToken(CSharpParser.STAR, i)

        def INTERR(self):
            return self.getToken(CSharpParser.INTERR, 0)

        def isTypePatternArms(self):
            return self.getTypedRuleContext(CSharpParser.IsTypePatternArmsContext,0)


        def identifier(self):
            return self.getTypedRuleContext(CSharpParser.IdentifierContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_isType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIsType" ):
                listener.enterIsType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIsType" ):
                listener.exitIsType(self)




    def isType(self):

        localctx = CSharpParser.IsTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_isType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1205
            self.base_type()
            self.state = 1210
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==127 or _la==137:
                self.state = 1208
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [127]:
                    self.state = 1206
                    self.rank_specifier()
                    pass
                elif token in [137]:
                    self.state = 1207
                    self.match(CSharpParser.STAR)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1212
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1214
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,112,self._ctx)
            if la_ == 1:
                self.state = 1213
                self.match(CSharpParser.INTERR)


            self.state = 1217
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==125:
                self.state = 1216
                self.isTypePatternArms()


            self.state = 1220
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,114,self._ctx)
            if la_ == 1:
                self.state = 1219
                self.identifier()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IsTypePatternArmsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_BRACE(self):
            return self.getToken(CSharpParser.OPEN_BRACE, 0)

        def isTypePatternArm(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.IsTypePatternArmContext)
            else:
                return self.getTypedRuleContext(CSharpParser.IsTypePatternArmContext,i)


        def CLOSE_BRACE(self):
            return self.getToken(CSharpParser.CLOSE_BRACE, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.COMMA)
            else:
                return self.getToken(CSharpParser.COMMA, i)

        def getRuleIndex(self):
            return CSharpParser.RULE_isTypePatternArms

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIsTypePatternArms" ):
                listener.enterIsTypePatternArms(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIsTypePatternArms" ):
                listener.exitIsTypePatternArms(self)




    def isTypePatternArms(self):

        localctx = CSharpParser.IsTypePatternArmsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_isTypePatternArms)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1222
            self.match(CSharpParser.OPEN_BRACE)
            self.state = 1223
            self.isTypePatternArm()
            self.state = 1228
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==132:
                self.state = 1224
                self.match(CSharpParser.COMMA)
                self.state = 1225
                self.isTypePatternArm()
                self.state = 1230
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1231
            self.match(CSharpParser.CLOSE_BRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IsTypePatternArmContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(CSharpParser.IdentifierContext,0)


        def COLON(self):
            return self.getToken(CSharpParser.COLON, 0)

        def expression(self):
            return self.getTypedRuleContext(CSharpParser.ExpressionContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_isTypePatternArm

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIsTypePatternArm" ):
                listener.enterIsTypePatternArm(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIsTypePatternArm" ):
                listener.exitIsTypePatternArm(self)




    def isTypePatternArm(self):

        localctx = CSharpParser.IsTypePatternArmContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_isTypePatternArm)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1233
            self.identifier()
            self.state = 1234
            self.match(CSharpParser.COLON)
            self.state = 1235
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Lambda_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def anonymous_function_signature(self):
            return self.getTypedRuleContext(CSharpParser.Anonymous_function_signatureContext,0)


        def right_arrow(self):
            return self.getTypedRuleContext(CSharpParser.Right_arrowContext,0)


        def anonymous_function_body(self):
            return self.getTypedRuleContext(CSharpParser.Anonymous_function_bodyContext,0)


        def ASYNC(self):
            return self.getToken(CSharpParser.ASYNC, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_lambda_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLambda_expression" ):
                listener.enterLambda_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLambda_expression" ):
                listener.exitLambda_expression(self)




    def lambda_expression(self):

        localctx = CSharpParser.Lambda_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_lambda_expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1238
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,116,self._ctx)
            if la_ == 1:
                self.state = 1237
                self.match(CSharpParser.ASYNC)


            self.state = 1240
            self.anonymous_function_signature()
            self.state = 1241
            self.right_arrow()
            self.state = 1242
            self.anonymous_function_body()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Anonymous_function_signatureContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PARENS(self):
            return self.getToken(CSharpParser.OPEN_PARENS, 0)

        def CLOSE_PARENS(self):
            return self.getToken(CSharpParser.CLOSE_PARENS, 0)

        def explicit_anonymous_function_parameter_list(self):
            return self.getTypedRuleContext(CSharpParser.Explicit_anonymous_function_parameter_listContext,0)


        def implicit_anonymous_function_parameter_list(self):
            return self.getTypedRuleContext(CSharpParser.Implicit_anonymous_function_parameter_listContext,0)


        def identifier(self):
            return self.getTypedRuleContext(CSharpParser.IdentifierContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_anonymous_function_signature

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnonymous_function_signature" ):
                listener.enterAnonymous_function_signature(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnonymous_function_signature" ):
                listener.exitAnonymous_function_signature(self)




    def anonymous_function_signature(self):

        localctx = CSharpParser.Anonymous_function_signatureContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_anonymous_function_signature)
        try:
            self.state = 1255
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,117,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1244
                self.match(CSharpParser.OPEN_PARENS)
                self.state = 1245
                self.match(CSharpParser.CLOSE_PARENS)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1246
                self.match(CSharpParser.OPEN_PARENS)
                self.state = 1247
                self.explicit_anonymous_function_parameter_list()
                self.state = 1248
                self.match(CSharpParser.CLOSE_PARENS)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1250
                self.match(CSharpParser.OPEN_PARENS)
                self.state = 1251
                self.implicit_anonymous_function_parameter_list()
                self.state = 1252
                self.match(CSharpParser.CLOSE_PARENS)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1254
                self.identifier()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Explicit_anonymous_function_parameter_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def explicit_anonymous_function_parameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Explicit_anonymous_function_parameterContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Explicit_anonymous_function_parameterContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.COMMA)
            else:
                return self.getToken(CSharpParser.COMMA, i)

        def getRuleIndex(self):
            return CSharpParser.RULE_explicit_anonymous_function_parameter_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExplicit_anonymous_function_parameter_list" ):
                listener.enterExplicit_anonymous_function_parameter_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExplicit_anonymous_function_parameter_list" ):
                listener.exitExplicit_anonymous_function_parameter_list(self)




    def explicit_anonymous_function_parameter_list(self):

        localctx = CSharpParser.Explicit_anonymous_function_parameter_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_explicit_anonymous_function_parameter_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1257
            self.explicit_anonymous_function_parameter()
            self.state = 1262
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==132:
                self.state = 1258
                self.match(CSharpParser.COMMA)
                self.state = 1259
                self.explicit_anonymous_function_parameter()
                self.state = 1264
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Explicit_anonymous_function_parameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.refout = None # Token

        def type_(self):
            return self.getTypedRuleContext(CSharpParser.Type_Context,0)


        def identifier(self):
            return self.getTypedRuleContext(CSharpParser.IdentifierContext,0)


        def REF(self):
            return self.getToken(CSharpParser.REF, 0)

        def OUT(self):
            return self.getToken(CSharpParser.OUT, 0)

        def IN(self):
            return self.getToken(CSharpParser.IN, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_explicit_anonymous_function_parameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExplicit_anonymous_function_parameter" ):
                listener.enterExplicit_anonymous_function_parameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExplicit_anonymous_function_parameter" ):
                listener.exitExplicit_anonymous_function_parameter(self)




    def explicit_anonymous_function_parameter(self):

        localctx = CSharpParser.Explicit_anonymous_function_parameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_explicit_anonymous_function_parameter)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1266
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 54)) & ~0x3f) == 0 and ((1 << (_la - 54)) & 67371009) != 0):
                self.state = 1265
                localctx.refout = self._input.LT(1)
                _la = self._input.LA(1)
                if not(((((_la - 54)) & ~0x3f) == 0 and ((1 << (_la - 54)) & 67371009) != 0)):
                    localctx.refout = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 1268
            self.type_()
            self.state = 1269
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Implicit_anonymous_function_parameter_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(CSharpParser.IdentifierContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.COMMA)
            else:
                return self.getToken(CSharpParser.COMMA, i)

        def getRuleIndex(self):
            return CSharpParser.RULE_implicit_anonymous_function_parameter_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImplicit_anonymous_function_parameter_list" ):
                listener.enterImplicit_anonymous_function_parameter_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImplicit_anonymous_function_parameter_list" ):
                listener.exitImplicit_anonymous_function_parameter_list(self)




    def implicit_anonymous_function_parameter_list(self):

        localctx = CSharpParser.Implicit_anonymous_function_parameter_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_implicit_anonymous_function_parameter_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1271
            self.identifier()
            self.state = 1276
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==132:
                self.state = 1272
                self.match(CSharpParser.COMMA)
                self.state = 1273
                self.identifier()
                self.state = 1278
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Anonymous_function_bodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def throwable_expression(self):
            return self.getTypedRuleContext(CSharpParser.Throwable_expressionContext,0)


        def block(self):
            return self.getTypedRuleContext(CSharpParser.BlockContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_anonymous_function_body

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnonymous_function_body" ):
                listener.enterAnonymous_function_body(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnonymous_function_body" ):
                listener.exitAnonymous_function_body(self)




    def anonymous_function_body(self):

        localctx = CSharpParser.Anonymous_function_bodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_anonymous_function_body)
        try:
            self.state = 1281
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [10, 11, 12, 14, 15, 16, 17, 18, 20, 21, 24, 25, 29, 30, 31, 32, 34, 35, 38, 42, 45, 48, 49, 51, 55, 58, 60, 61, 63, 64, 66, 67, 68, 69, 71, 75, 80, 81, 83, 85, 86, 87, 88, 89, 91, 94, 95, 96, 98, 99, 100, 101, 102, 104, 106, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 129, 135, 136, 137, 140, 142, 143, 144, 151, 152, 171]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1279
                self.throwable_expression()
                pass
            elif token in [125]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1280
                self.block()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Query_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def from_clause(self):
            return self.getTypedRuleContext(CSharpParser.From_clauseContext,0)


        def query_body(self):
            return self.getTypedRuleContext(CSharpParser.Query_bodyContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_query_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuery_expression" ):
                listener.enterQuery_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuery_expression" ):
                listener.exitQuery_expression(self)




    def query_expression(self):

        localctx = CSharpParser.Query_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_query_expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1283
            self.from_clause()
            self.state = 1284
            self.query_body()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class From_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FROM(self):
            return self.getToken(CSharpParser.FROM, 0)

        def identifier(self):
            return self.getTypedRuleContext(CSharpParser.IdentifierContext,0)


        def IN(self):
            return self.getToken(CSharpParser.IN, 0)

        def expression(self):
            return self.getTypedRuleContext(CSharpParser.ExpressionContext,0)


        def type_(self):
            return self.getTypedRuleContext(CSharpParser.Type_Context,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_from_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFrom_clause" ):
                listener.enterFrom_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFrom_clause" ):
                listener.exitFrom_clause(self)




    def from_clause(self):

        localctx = CSharpParser.From_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_from_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1286
            self.match(CSharpParser.FROM)
            self.state = 1288
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,122,self._ctx)
            if la_ == 1:
                self.state = 1287
                self.type_()


            self.state = 1290
            self.identifier()
            self.state = 1291
            self.match(CSharpParser.IN)
            self.state = 1292
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Query_bodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def select_or_group_clause(self):
            return self.getTypedRuleContext(CSharpParser.Select_or_group_clauseContext,0)


        def query_body_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Query_body_clauseContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Query_body_clauseContext,i)


        def query_continuation(self):
            return self.getTypedRuleContext(CSharpParser.Query_continuationContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_query_body

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuery_body" ):
                listener.enterQuery_body(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuery_body" ):
                listener.exitQuery_body(self)




    def query_body(self):

        localctx = CSharpParser.Query_bodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_query_body)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1297
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 48)) & ~0x3f) == 0 and ((1 << (_la - 48)) & -9223372036846374911) != 0):
                self.state = 1294
                self.query_body_clause()
                self.state = 1299
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1300
            self.select_or_group_clause()
            self.state = 1302
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,124,self._ctx)
            if la_ == 1:
                self.state = 1301
                self.query_continuation()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Query_body_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def from_clause(self):
            return self.getTypedRuleContext(CSharpParser.From_clauseContext,0)


        def let_clause(self):
            return self.getTypedRuleContext(CSharpParser.Let_clauseContext,0)


        def where_clause(self):
            return self.getTypedRuleContext(CSharpParser.Where_clauseContext,0)


        def combined_join_clause(self):
            return self.getTypedRuleContext(CSharpParser.Combined_join_clauseContext,0)


        def orderby_clause(self):
            return self.getTypedRuleContext(CSharpParser.Orderby_clauseContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_query_body_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuery_body_clause" ):
                listener.enterQuery_body_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuery_body_clause" ):
                listener.exitQuery_body_clause(self)




    def query_body_clause(self):

        localctx = CSharpParser.Query_body_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_query_body_clause)
        try:
            self.state = 1309
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [48]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1304
                self.from_clause()
                pass
            elif token in [61]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1305
                self.let_clause()
                pass
            elif token in [111]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1306
                self.where_clause()
                pass
            elif token in [60]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1307
                self.combined_join_clause()
                pass
            elif token in [71]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1308
                self.orderby_clause()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Let_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LET(self):
            return self.getToken(CSharpParser.LET, 0)

        def identifier(self):
            return self.getTypedRuleContext(CSharpParser.IdentifierContext,0)


        def ASSIGNMENT(self):
            return self.getToken(CSharpParser.ASSIGNMENT, 0)

        def expression(self):
            return self.getTypedRuleContext(CSharpParser.ExpressionContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_let_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLet_clause" ):
                listener.enterLet_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLet_clause" ):
                listener.exitLet_clause(self)




    def let_clause(self):

        localctx = CSharpParser.Let_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_let_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1311
            self.match(CSharpParser.LET)
            self.state = 1312
            self.identifier()
            self.state = 1313
            self.match(CSharpParser.ASSIGNMENT)
            self.state = 1314
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Where_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHERE(self):
            return self.getToken(CSharpParser.WHERE, 0)

        def expression(self):
            return self.getTypedRuleContext(CSharpParser.ExpressionContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_where_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhere_clause" ):
                listener.enterWhere_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhere_clause" ):
                listener.exitWhere_clause(self)




    def where_clause(self):

        localctx = CSharpParser.Where_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_where_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1316
            self.match(CSharpParser.WHERE)
            self.state = 1317
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Combined_join_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def JOIN(self):
            return self.getToken(CSharpParser.JOIN, 0)

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(CSharpParser.IdentifierContext,i)


        def IN(self):
            return self.getToken(CSharpParser.IN, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(CSharpParser.ExpressionContext,i)


        def ON(self):
            return self.getToken(CSharpParser.ON, 0)

        def EQUALS(self):
            return self.getToken(CSharpParser.EQUALS, 0)

        def type_(self):
            return self.getTypedRuleContext(CSharpParser.Type_Context,0)


        def INTO(self):
            return self.getToken(CSharpParser.INTO, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_combined_join_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCombined_join_clause" ):
                listener.enterCombined_join_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCombined_join_clause" ):
                listener.exitCombined_join_clause(self)




    def combined_join_clause(self):

        localctx = CSharpParser.Combined_join_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_combined_join_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1319
            self.match(CSharpParser.JOIN)
            self.state = 1321
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,126,self._ctx)
            if la_ == 1:
                self.state = 1320
                self.type_()


            self.state = 1323
            self.identifier()
            self.state = 1324
            self.match(CSharpParser.IN)
            self.state = 1325
            self.expression()
            self.state = 1326
            self.match(CSharpParser.ON)
            self.state = 1327
            self.expression()
            self.state = 1328
            self.match(CSharpParser.EQUALS)
            self.state = 1329
            self.expression()
            self.state = 1332
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==58:
                self.state = 1330
                self.match(CSharpParser.INTO)
                self.state = 1331
                self.identifier()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Orderby_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ORDERBY(self):
            return self.getToken(CSharpParser.ORDERBY, 0)

        def ordering(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.OrderingContext)
            else:
                return self.getTypedRuleContext(CSharpParser.OrderingContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.COMMA)
            else:
                return self.getToken(CSharpParser.COMMA, i)

        def getRuleIndex(self):
            return CSharpParser.RULE_orderby_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOrderby_clause" ):
                listener.enterOrderby_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOrderby_clause" ):
                listener.exitOrderby_clause(self)




    def orderby_clause(self):

        localctx = CSharpParser.Orderby_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_orderby_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1334
            self.match(CSharpParser.ORDERBY)
            self.state = 1335
            self.ordering()
            self.state = 1340
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==132:
                self.state = 1336
                self.match(CSharpParser.COMMA)
                self.state = 1337
                self.ordering()
                self.state = 1342
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OrderingContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.dir_ = None # Token

        def expression(self):
            return self.getTypedRuleContext(CSharpParser.ExpressionContext,0)


        def ASCENDING(self):
            return self.getToken(CSharpParser.ASCENDING, 0)

        def DESCENDING(self):
            return self.getToken(CSharpParser.DESCENDING, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_ordering

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOrdering" ):
                listener.enterOrdering(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOrdering" ):
                listener.exitOrdering(self)




    def ordering(self):

        localctx = CSharpParser.OrderingContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_ordering)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1343
            self.expression()
            self.state = 1345
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==14 or _la==32:
                self.state = 1344
                localctx.dir_ = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==14 or _la==32):
                    localctx.dir_ = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Select_or_group_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SELECT(self):
            return self.getToken(CSharpParser.SELECT, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(CSharpParser.ExpressionContext,i)


        def GROUP(self):
            return self.getToken(CSharpParser.GROUP, 0)

        def BY(self):
            return self.getToken(CSharpParser.BY, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_select_or_group_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelect_or_group_clause" ):
                listener.enterSelect_or_group_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelect_or_group_clause" ):
                listener.exitSelect_or_group_clause(self)




    def select_or_group_clause(self):

        localctx = CSharpParser.Select_or_group_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_select_or_group_clause)
        try:
            self.state = 1354
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [85]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1347
                self.match(CSharpParser.SELECT)
                self.state = 1348
                self.expression()
                pass
            elif token in [51]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1349
                self.match(CSharpParser.GROUP)
                self.state = 1350
                self.expression()
                self.state = 1351
                self.match(CSharpParser.BY)
                self.state = 1352
                self.expression()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Query_continuationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INTO(self):
            return self.getToken(CSharpParser.INTO, 0)

        def identifier(self):
            return self.getTypedRuleContext(CSharpParser.IdentifierContext,0)


        def query_body(self):
            return self.getTypedRuleContext(CSharpParser.Query_bodyContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_query_continuation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuery_continuation" ):
                listener.enterQuery_continuation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuery_continuation" ):
                listener.exitQuery_continuation(self)




    def query_continuation(self):

        localctx = CSharpParser.Query_continuationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_query_continuation)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1356
            self.match(CSharpParser.INTO)
            self.state = 1357
            self.identifier()
            self.state = 1358
            self.query_body()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def labeled_Statement(self):
            return self.getTypedRuleContext(CSharpParser.Labeled_StatementContext,0)


        def declarationStatement(self):
            return self.getTypedRuleContext(CSharpParser.DeclarationStatementContext,0)


        def embedded_statement(self):
            return self.getTypedRuleContext(CSharpParser.Embedded_statementContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatement" ):
                listener.enterStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatement" ):
                listener.exitStatement(self)




    def statement(self):

        localctx = CSharpParser.StatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_statement)
        try:
            self.state = 1363
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,131,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1360
                self.labeled_Statement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1361
                self.declarationStatement()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1362
                self.embedded_statement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeclarationStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def local_variable_declaration(self):
            return self.getTypedRuleContext(CSharpParser.Local_variable_declarationContext,0)


        def SEMICOLON(self):
            return self.getToken(CSharpParser.SEMICOLON, 0)

        def local_constant_declaration(self):
            return self.getTypedRuleContext(CSharpParser.Local_constant_declarationContext,0)


        def local_function_declaration(self):
            return self.getTypedRuleContext(CSharpParser.Local_function_declarationContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_declarationStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclarationStatement" ):
                listener.enterDeclarationStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclarationStatement" ):
                listener.exitDeclarationStatement(self)




    def declarationStatement(self):

        localctx = CSharpParser.DeclarationStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_declarationStatement)
        try:
            self.state = 1372
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,132,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1365
                self.local_variable_declaration()
                self.state = 1366
                self.match(CSharpParser.SEMICOLON)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1368
                self.local_constant_declaration()
                self.state = 1369
                self.match(CSharpParser.SEMICOLON)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1371
                self.local_function_declaration()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Local_function_declarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def local_function_header(self):
            return self.getTypedRuleContext(CSharpParser.Local_function_headerContext,0)


        def local_function_body(self):
            return self.getTypedRuleContext(CSharpParser.Local_function_bodyContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_local_function_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLocal_function_declaration" ):
                listener.enterLocal_function_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLocal_function_declaration" ):
                listener.exitLocal_function_declaration(self)




    def local_function_declaration(self):

        localctx = CSharpParser.Local_function_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_local_function_declaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1374
            self.local_function_header()
            self.state = 1375
            self.local_function_body()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Local_function_headerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def return_type(self):
            return self.getTypedRuleContext(CSharpParser.Return_typeContext,0)


        def identifier(self):
            return self.getTypedRuleContext(CSharpParser.IdentifierContext,0)


        def OPEN_PARENS(self):
            return self.getToken(CSharpParser.OPEN_PARENS, 0)

        def CLOSE_PARENS(self):
            return self.getToken(CSharpParser.CLOSE_PARENS, 0)

        def local_function_modifiers(self):
            return self.getTypedRuleContext(CSharpParser.Local_function_modifiersContext,0)


        def type_parameter_list(self):
            return self.getTypedRuleContext(CSharpParser.Type_parameter_listContext,0)


        def formal_parameter_list(self):
            return self.getTypedRuleContext(CSharpParser.Formal_parameter_listContext,0)


        def type_parameter_constraints_clauses(self):
            return self.getTypedRuleContext(CSharpParser.Type_parameter_constraints_clausesContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_local_function_header

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLocal_function_header" ):
                listener.enterLocal_function_header(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLocal_function_header" ):
                listener.exitLocal_function_header(self)




    def local_function_header(self):

        localctx = CSharpParser.Local_function_headerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_local_function_header)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1378
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,133,self._ctx)
            if la_ == 1:
                self.state = 1377
                self.local_function_modifiers()


            self.state = 1380
            self.return_type()
            self.state = 1381
            self.identifier()
            self.state = 1383
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==146:
                self.state = 1382
                self.type_parameter_list()


            self.state = 1385
            self.match(CSharpParser.OPEN_PARENS)
            self.state = 1387
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 10)) & ~0x3f) == 0 and ((1 << (_la - 10)) & 7812956763456032119) != 0) or ((((_la - 74)) & ~0x3f) == 0 and ((1 << (_la - 74)) & 45037874618448579) != 0):
                self.state = 1386
                self.formal_parameter_list()


            self.state = 1389
            self.match(CSharpParser.CLOSE_PARENS)
            self.state = 1391
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==111:
                self.state = 1390
                self.type_parameter_constraints_clauses()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Local_function_modifiersContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ASYNC(self):
            return self.getToken(CSharpParser.ASYNC, 0)

        def UNSAFE(self):
            return self.getToken(CSharpParser.UNSAFE, 0)

        def STATIC(self):
            return self.getToken(CSharpParser.STATIC, 0)

        def STRUCT(self):
            return self.getToken(CSharpParser.STRUCT, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_local_function_modifiers

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLocal_function_modifiers" ):
                listener.enterLocal_function_modifiers(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLocal_function_modifiers" ):
                listener.exitLocal_function_modifiers(self)




    def local_function_modifiers(self):

        localctx = CSharpParser.Local_function_modifiersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_local_function_modifiers)
        self._la = 0 # Token type
        try:
            self.state = 1401
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,138,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1393
                _la = self._input.LA(1)
                if not(_la==15 or _la==103):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1395
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==90:
                    self.state = 1394
                    self.match(CSharpParser.STATIC)


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1397
                self.match(CSharpParser.STATIC)
                self.state = 1398
                _la = self._input.LA(1)
                if not(_la==15 or _la==103):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1399
                self.match(CSharpParser.UNSAFE)
                self.state = 1400
                self.match(CSharpParser.STRUCT)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Local_function_bodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def block(self):
            return self.getTypedRuleContext(CSharpParser.BlockContext,0)


        def right_arrow(self):
            return self.getTypedRuleContext(CSharpParser.Right_arrowContext,0)


        def throwable_expression(self):
            return self.getTypedRuleContext(CSharpParser.Throwable_expressionContext,0)


        def SEMICOLON(self):
            return self.getToken(CSharpParser.SEMICOLON, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_local_function_body

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLocal_function_body" ):
                listener.enterLocal_function_body(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLocal_function_body" ):
                listener.exitLocal_function_body(self)




    def local_function_body(self):

        localctx = CSharpParser.Local_function_bodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 182, self.RULE_local_function_body)
        try:
            self.state = 1408
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [125]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1403
                self.block()
                pass
            elif token in [145]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1404
                self.right_arrow()
                self.state = 1405
                self.throwable_expression()
                self.state = 1406
                self.match(CSharpParser.SEMICOLON)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Labeled_StatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(CSharpParser.IdentifierContext,0)


        def COLON(self):
            return self.getToken(CSharpParser.COLON, 0)

        def statement(self):
            return self.getTypedRuleContext(CSharpParser.StatementContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_labeled_Statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLabeled_Statement" ):
                listener.enterLabeled_Statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLabeled_Statement" ):
                listener.exitLabeled_Statement(self)




    def labeled_Statement(self):

        localctx = CSharpParser.Labeled_StatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 184, self.RULE_labeled_Statement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1410
            self.identifier()
            self.state = 1411
            self.match(CSharpParser.COLON)
            self.state = 1412
            self.statement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Embedded_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def block(self):
            return self.getTypedRuleContext(CSharpParser.BlockContext,0)


        def empty_statement(self):
            return self.getTypedRuleContext(CSharpParser.Empty_statementContext,0)


        def expression(self):
            return self.getTypedRuleContext(CSharpParser.ExpressionContext,0)


        def SEMICOLON(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.SEMICOLON)
            else:
                return self.getToken(CSharpParser.SEMICOLON, i)

        def if_statement(self):
            return self.getTypedRuleContext(CSharpParser.If_statementContext,0)


        def SWITCH(self):
            return self.getToken(CSharpParser.SWITCH, 0)

        def OPEN_PARENS(self):
            return self.getToken(CSharpParser.OPEN_PARENS, 0)

        def CLOSE_PARENS(self):
            return self.getToken(CSharpParser.CLOSE_PARENS, 0)

        def OPEN_BRACE(self):
            return self.getToken(CSharpParser.OPEN_BRACE, 0)

        def CLOSE_BRACE(self):
            return self.getToken(CSharpParser.CLOSE_BRACE, 0)

        def switch_section(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Switch_sectionContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Switch_sectionContext,i)


        def WHILE(self):
            return self.getToken(CSharpParser.WHILE, 0)

        def embedded_statement(self):
            return self.getTypedRuleContext(CSharpParser.Embedded_statementContext,0)


        def DO(self):
            return self.getToken(CSharpParser.DO, 0)

        def FOR(self):
            return self.getToken(CSharpParser.FOR, 0)

        def for_initializer(self):
            return self.getTypedRuleContext(CSharpParser.For_initializerContext,0)


        def for_iterator(self):
            return self.getTypedRuleContext(CSharpParser.For_iteratorContext,0)


        def FOREACH(self):
            return self.getToken(CSharpParser.FOREACH, 0)

        def local_variable_type(self):
            return self.getTypedRuleContext(CSharpParser.Local_variable_typeContext,0)


        def IN(self):
            return self.getToken(CSharpParser.IN, 0)

        def identifier(self):
            return self.getTypedRuleContext(CSharpParser.IdentifierContext,0)


        def deconstruction_element(self):
            return self.getTypedRuleContext(CSharpParser.Deconstruction_elementContext,0)


        def AWAIT(self):
            return self.getToken(CSharpParser.AWAIT, 0)

        def BREAK(self):
            return self.getToken(CSharpParser.BREAK, 0)

        def CONTINUE(self):
            return self.getToken(CSharpParser.CONTINUE, 0)

        def GOTO(self):
            return self.getToken(CSharpParser.GOTO, 0)

        def CASE(self):
            return self.getToken(CSharpParser.CASE, 0)

        def DEFAULT(self):
            return self.getToken(CSharpParser.DEFAULT, 0)

        def RETURN(self):
            return self.getToken(CSharpParser.RETURN, 0)

        def THROW(self):
            return self.getToken(CSharpParser.THROW, 0)

        def try_statement(self):
            return self.getTypedRuleContext(CSharpParser.Try_statementContext,0)


        def checked_statement(self):
            return self.getTypedRuleContext(CSharpParser.Checked_statementContext,0)


        def unchecked_statement(self):
            return self.getTypedRuleContext(CSharpParser.Unchecked_statementContext,0)


        def lock_statement(self):
            return self.getTypedRuleContext(CSharpParser.Lock_statementContext,0)


        def using_statement(self):
            return self.getTypedRuleContext(CSharpParser.Using_statementContext,0)


        def yield_statement(self):
            return self.getTypedRuleContext(CSharpParser.Yield_statementContext,0)


        def unsafe_statement(self):
            return self.getTypedRuleContext(CSharpParser.Unsafe_statementContext,0)


        def fixed_statement(self):
            return self.getTypedRuleContext(CSharpParser.Fixed_statementContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_embedded_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEmbedded_statement" ):
                listener.enterEmbedded_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEmbedded_statement" ):
                listener.exitEmbedded_statement(self)




    def embedded_statement(self):

        localctx = CSharpParser.Embedded_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 186, self.RULE_embedded_statement)
        self._la = 0 # Token type
        try:
            self.state = 1507
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,149,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1414
                self.block()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1415
                self.empty_statement()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1416
                self.expression()
                self.state = 1417
                self.match(CSharpParser.SEMICOLON)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1419
                self.if_statement()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1420
                self.match(CSharpParser.SWITCH)
                self.state = 1421
                self.match(CSharpParser.OPEN_PARENS)
                self.state = 1422
                self.expression()
                self.state = 1423
                self.match(CSharpParser.CLOSE_PARENS)
                self.state = 1424
                self.match(CSharpParser.OPEN_BRACE)
                self.state = 1428
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==22 or _la==30:
                    self.state = 1425
                    self.switch_section()
                    self.state = 1430
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1431
                self.match(CSharpParser.CLOSE_BRACE)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1433
                self.match(CSharpParser.WHILE)
                self.state = 1434
                self.match(CSharpParser.OPEN_PARENS)
                self.state = 1435
                self.expression()
                self.state = 1436
                self.match(CSharpParser.CLOSE_PARENS)
                self.state = 1437
                self.embedded_statement()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1439
                self.match(CSharpParser.DO)
                self.state = 1440
                self.embedded_statement()
                self.state = 1441
                self.match(CSharpParser.WHILE)
                self.state = 1442
                self.match(CSharpParser.OPEN_PARENS)
                self.state = 1443
                self.expression()
                self.state = 1444
                self.match(CSharpParser.CLOSE_PARENS)
                self.state = 1445
                self.match(CSharpParser.SEMICOLON)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 1447
                self.match(CSharpParser.FOR)
                self.state = 1448
                self.match(CSharpParser.OPEN_PARENS)
                self.state = 1450
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -5437194615990526976) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 2305516992404850877) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & 4398059153857) != 0):
                    self.state = 1449
                    self.for_initializer()


                self.state = 1452
                self.match(CSharpParser.SEMICOLON)
                self.state = 1454
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -5437212208176571392) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 2305497201195550909) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & 4398059153857) != 0):
                    self.state = 1453
                    self.expression()


                self.state = 1456
                self.match(CSharpParser.SEMICOLON)
                self.state = 1458
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -5437212208176571392) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 2305497201195550909) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & 4398059153857) != 0):
                    self.state = 1457
                    self.for_iterator()


                self.state = 1460
                self.match(CSharpParser.CLOSE_PARENS)
                self.state = 1461
                self.embedded_statement()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 1463
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==16:
                    self.state = 1462
                    self.match(CSharpParser.AWAIT)


                self.state = 1465
                self.match(CSharpParser.FOREACH)
                self.state = 1466
                self.match(CSharpParser.OPEN_PARENS)
                self.state = 1467
                self.local_variable_type()
                self.state = 1470
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,145,self._ctx)
                if la_ == 1:
                    self.state = 1468
                    self.identifier()
                    pass

                elif la_ == 2:
                    self.state = 1469
                    self.deconstruction_element()
                    pass


                self.state = 1472
                self.match(CSharpParser.IN)
                self.state = 1473
                self.expression()
                self.state = 1474
                self.match(CSharpParser.CLOSE_PARENS)
                self.state = 1475
                self.embedded_statement()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 1477
                self.match(CSharpParser.BREAK)
                self.state = 1478
                self.match(CSharpParser.SEMICOLON)
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 1479
                self.match(CSharpParser.CONTINUE)
                self.state = 1480
                self.match(CSharpParser.SEMICOLON)
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 1481
                self.match(CSharpParser.GOTO)
                self.state = 1486
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [10, 11, 12, 14, 15, 16, 20, 32, 35, 38, 48, 49, 51, 58, 60, 61, 64, 69, 71, 75, 81, 85, 86, 102, 106, 110, 111, 113, 114]:
                    self.state = 1482
                    self.identifier()
                    pass
                elif token in [22]:
                    self.state = 1483
                    self.match(CSharpParser.CASE)
                    self.state = 1484
                    self.expression()
                    pass
                elif token in [30]:
                    self.state = 1485
                    self.match(CSharpParser.DEFAULT)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1488
                self.match(CSharpParser.SEMICOLON)
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 1489
                self.match(CSharpParser.RETURN)
                self.state = 1491
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -5437212208176571392) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 2305497201195550909) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & 4398059153857) != 0):
                    self.state = 1490
                    self.expression()


                self.state = 1493
                self.match(CSharpParser.SEMICOLON)
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 1494
                self.match(CSharpParser.THROW)
                self.state = 1496
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -5437212208176571392) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 2305497201195550909) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & 4398059153857) != 0):
                    self.state = 1495
                    self.expression()


                self.state = 1498
                self.match(CSharpParser.SEMICOLON)
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 1499
                self.try_statement()
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 1500
                self.checked_statement()
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 1501
                self.unchecked_statement()
                pass

            elif la_ == 18:
                self.enterOuterAlt(localctx, 18)
                self.state = 1502
                self.lock_statement()
                pass

            elif la_ == 19:
                self.enterOuterAlt(localctx, 19)
                self.state = 1503
                self.using_statement()
                pass

            elif la_ == 20:
                self.enterOuterAlt(localctx, 20)
                self.state = 1504
                self.yield_statement()
                pass

            elif la_ == 21:
                self.enterOuterAlt(localctx, 21)
                self.state = 1505
                self.unsafe_statement()
                pass

            elif la_ == 22:
                self.enterOuterAlt(localctx, 22)
                self.state = 1506
                self.fixed_statement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Empty_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SEMICOLON(self):
            return self.getToken(CSharpParser.SEMICOLON, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_empty_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEmpty_statement" ):
                listener.enterEmpty_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEmpty_statement" ):
                listener.exitEmpty_statement(self)




    def empty_statement(self):

        localctx = CSharpParser.Empty_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 188, self.RULE_empty_statement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1509
            self.match(CSharpParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class If_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IF(self):
            return self.getToken(CSharpParser.IF, 0)

        def OPEN_PARENS(self):
            return self.getToken(CSharpParser.OPEN_PARENS, 0)

        def expression(self):
            return self.getTypedRuleContext(CSharpParser.ExpressionContext,0)


        def CLOSE_PARENS(self):
            return self.getToken(CSharpParser.CLOSE_PARENS, 0)

        def embedded_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Embedded_statementContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Embedded_statementContext,i)


        def ELSE(self):
            return self.getToken(CSharpParser.ELSE, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_if_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIf_statement" ):
                listener.enterIf_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIf_statement" ):
                listener.exitIf_statement(self)




    def if_statement(self):

        localctx = CSharpParser.If_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 190, self.RULE_if_statement)
        try:
            self.state = 1525
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,150,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1511
                self.match(CSharpParser.IF)
                self.state = 1512
                self.match(CSharpParser.OPEN_PARENS)
                self.state = 1513
                self.expression()
                self.state = 1514
                self.match(CSharpParser.CLOSE_PARENS)
                self.state = 1515
                self.embedded_statement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1517
                self.match(CSharpParser.IF)
                self.state = 1518
                self.match(CSharpParser.OPEN_PARENS)
                self.state = 1519
                self.expression()
                self.state = 1520
                self.match(CSharpParser.CLOSE_PARENS)
                self.state = 1521
                self.embedded_statement()
                self.state = 1522
                self.match(CSharpParser.ELSE)
                self.state = 1523
                self.embedded_statement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Checked_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CHECKED(self):
            return self.getToken(CSharpParser.CHECKED, 0)

        def block(self):
            return self.getTypedRuleContext(CSharpParser.BlockContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_checked_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterChecked_statement" ):
                listener.enterChecked_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitChecked_statement" ):
                listener.exitChecked_statement(self)




    def checked_statement(self):

        localctx = CSharpParser.Checked_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 192, self.RULE_checked_statement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1527
            self.match(CSharpParser.CHECKED)
            self.state = 1528
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Unchecked_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UNCHECKED(self):
            return self.getToken(CSharpParser.UNCHECKED, 0)

        def block(self):
            return self.getTypedRuleContext(CSharpParser.BlockContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_unchecked_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnchecked_statement" ):
                listener.enterUnchecked_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnchecked_statement" ):
                listener.exitUnchecked_statement(self)




    def unchecked_statement(self):

        localctx = CSharpParser.Unchecked_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 194, self.RULE_unchecked_statement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1530
            self.match(CSharpParser.UNCHECKED)
            self.state = 1531
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Lock_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LOCK(self):
            return self.getToken(CSharpParser.LOCK, 0)

        def OPEN_PARENS(self):
            return self.getToken(CSharpParser.OPEN_PARENS, 0)

        def expression(self):
            return self.getTypedRuleContext(CSharpParser.ExpressionContext,0)


        def CLOSE_PARENS(self):
            return self.getToken(CSharpParser.CLOSE_PARENS, 0)

        def embedded_statement(self):
            return self.getTypedRuleContext(CSharpParser.Embedded_statementContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_lock_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLock_statement" ):
                listener.enterLock_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLock_statement" ):
                listener.exitLock_statement(self)




    def lock_statement(self):

        localctx = CSharpParser.Lock_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 196, self.RULE_lock_statement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1533
            self.match(CSharpParser.LOCK)
            self.state = 1534
            self.match(CSharpParser.OPEN_PARENS)
            self.state = 1535
            self.expression()
            self.state = 1536
            self.match(CSharpParser.CLOSE_PARENS)
            self.state = 1537
            self.embedded_statement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Unmanaged_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def type_(self):
            return self.getTypedRuleContext(CSharpParser.Type_Context,0)


        def pointer_type(self):
            return self.getTypedRuleContext(CSharpParser.Pointer_typeContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_unmanaged_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnmanaged_type" ):
                listener.enterUnmanaged_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnmanaged_type" ):
                listener.exitUnmanaged_type(self)




    def unmanaged_type(self):

        localctx = CSharpParser.Unmanaged_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 198, self.RULE_unmanaged_type)
        try:
            self.state = 1541
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,151,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1539
                self.type_()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1540
                self.pointer_type()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Stackalloc_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STACKALLOC(self):
            return self.getToken(CSharpParser.STACKALLOC, 0)

        def type_(self):
            return self.getTypedRuleContext(CSharpParser.Type_Context,0)


        def OPEN_BRACKET(self):
            return self.getToken(CSharpParser.OPEN_BRACKET, 0)

        def expression(self):
            return self.getTypedRuleContext(CSharpParser.ExpressionContext,0)


        def CLOSE_BRACKET(self):
            return self.getToken(CSharpParser.CLOSE_BRACKET, 0)

        def stackalloc_initializer(self):
            return self.getTypedRuleContext(CSharpParser.Stackalloc_initializerContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_stackalloc_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStackalloc_expression" ):
                listener.enterStackalloc_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStackalloc_expression" ):
                listener.exitStackalloc_expression(self)




    def stackalloc_expression(self):

        localctx = CSharpParser.Stackalloc_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 200, self.RULE_stackalloc_expression)
        self._la = 0 # Token type
        try:
            self.state = 1559
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,154,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1543
                self.match(CSharpParser.STACKALLOC)
                self.state = 1544
                self.type_()
                self.state = 1545
                self.match(CSharpParser.OPEN_BRACKET)
                self.state = 1546
                self.expression()
                self.state = 1547
                self.match(CSharpParser.CLOSE_BRACKET)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1549
                self.match(CSharpParser.STACKALLOC)
                self.state = 1551
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 10)) & ~0x3f) == 0 and ((1 << (_la - 10)) & 3201253152842599799) != 0) or ((((_la - 75)) & ~0x3f) == 0 and ((1 << (_la - 75)) & 18015337681329473) != 0):
                    self.state = 1550
                    self.type_()


                self.state = 1553
                self.match(CSharpParser.OPEN_BRACKET)
                self.state = 1555
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -5437212208176571392) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 2305497201195550909) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & 4398059153857) != 0):
                    self.state = 1554
                    self.expression()


                self.state = 1557
                self.match(CSharpParser.CLOSE_BRACKET)
                self.state = 1558
                self.stackalloc_initializer()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Stackalloc_initializerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_BRACE(self):
            return self.getToken(CSharpParser.OPEN_BRACE, 0)

        def stackalloc_initializer_element_list(self):
            return self.getTypedRuleContext(CSharpParser.Stackalloc_initializer_element_listContext,0)


        def CLOSE_BRACE(self):
            return self.getToken(CSharpParser.CLOSE_BRACE, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_stackalloc_initializer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStackalloc_initializer" ):
                listener.enterStackalloc_initializer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStackalloc_initializer" ):
                listener.exitStackalloc_initializer(self)




    def stackalloc_initializer(self):

        localctx = CSharpParser.Stackalloc_initializerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 202, self.RULE_stackalloc_initializer)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1561
            self.match(CSharpParser.OPEN_BRACE)
            self.state = 1562
            self.stackalloc_initializer_element_list()
            self.state = 1563
            self.match(CSharpParser.CLOSE_BRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Stackalloc_initializer_element_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def stackalloc_element_initializer(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Stackalloc_element_initializerContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Stackalloc_element_initializerContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.COMMA)
            else:
                return self.getToken(CSharpParser.COMMA, i)

        def getRuleIndex(self):
            return CSharpParser.RULE_stackalloc_initializer_element_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStackalloc_initializer_element_list" ):
                listener.enterStackalloc_initializer_element_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStackalloc_initializer_element_list" ):
                listener.exitStackalloc_initializer_element_list(self)




    def stackalloc_initializer_element_list(self):

        localctx = CSharpParser.Stackalloc_initializer_element_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 204, self.RULE_stackalloc_initializer_element_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1565
            self.stackalloc_element_initializer()
            self.state = 1570
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,155,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1566
                    self.match(CSharpParser.COMMA)
                    self.state = 1567
                    self.stackalloc_element_initializer() 
                self.state = 1572
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,155,self._ctx)

            self.state = 1574
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==132:
                self.state = 1573
                self.match(CSharpParser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Stackalloc_element_initializerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(CSharpParser.ExpressionContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_stackalloc_element_initializer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStackalloc_element_initializer" ):
                listener.enterStackalloc_element_initializer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStackalloc_element_initializer" ):
                listener.exitStackalloc_element_initializer(self)




    def stackalloc_element_initializer(self):

        localctx = CSharpParser.Stackalloc_element_initializerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 206, self.RULE_stackalloc_element_initializer)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1576
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Using_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def USING(self):
            return self.getToken(CSharpParser.USING, 0)

        def OPEN_PARENS(self):
            return self.getToken(CSharpParser.OPEN_PARENS, 0)

        def resource_acquisition(self):
            return self.getTypedRuleContext(CSharpParser.Resource_acquisitionContext,0)


        def CLOSE_PARENS(self):
            return self.getToken(CSharpParser.CLOSE_PARENS, 0)

        def embedded_statement(self):
            return self.getTypedRuleContext(CSharpParser.Embedded_statementContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_using_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUsing_statement" ):
                listener.enterUsing_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUsing_statement" ):
                listener.exitUsing_statement(self)




    def using_statement(self):

        localctx = CSharpParser.Using_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 208, self.RULE_using_statement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1578
            self.match(CSharpParser.USING)
            self.state = 1579
            self.match(CSharpParser.OPEN_PARENS)
            self.state = 1580
            self.resource_acquisition()
            self.state = 1581
            self.match(CSharpParser.CLOSE_PARENS)
            self.state = 1582
            self.embedded_statement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Yield_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def YIELD(self):
            return self.getToken(CSharpParser.YIELD, 0)

        def RETURN(self):
            return self.getToken(CSharpParser.RETURN, 0)

        def expression(self):
            return self.getTypedRuleContext(CSharpParser.ExpressionContext,0)


        def SEMICOLON(self):
            return self.getToken(CSharpParser.SEMICOLON, 0)

        def BREAK(self):
            return self.getToken(CSharpParser.BREAK, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_yield_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterYield_statement" ):
                listener.enterYield_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitYield_statement" ):
                listener.exitYield_statement(self)




    def yield_statement(self):

        localctx = CSharpParser.Yield_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 210, self.RULE_yield_statement)
        try:
            self.state = 1592
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,157,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1584
                self.match(CSharpParser.YIELD)
                self.state = 1585
                self.match(CSharpParser.RETURN)
                self.state = 1586
                self.expression()
                self.state = 1587
                self.match(CSharpParser.SEMICOLON)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1589
                self.match(CSharpParser.YIELD)
                self.state = 1590
                self.match(CSharpParser.BREAK)
                self.state = 1591
                self.match(CSharpParser.SEMICOLON)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Fixed_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FIXED(self):
            return self.getToken(CSharpParser.FIXED, 0)

        def OPEN_PARENS(self):
            return self.getToken(CSharpParser.OPEN_PARENS, 0)

        def pointer_type(self):
            return self.getTypedRuleContext(CSharpParser.Pointer_typeContext,0)


        def fixed_pointer_declarators(self):
            return self.getTypedRuleContext(CSharpParser.Fixed_pointer_declaratorsContext,0)


        def CLOSE_PARENS(self):
            return self.getToken(CSharpParser.CLOSE_PARENS, 0)

        def embedded_statement(self):
            return self.getTypedRuleContext(CSharpParser.Embedded_statementContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_fixed_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFixed_statement" ):
                listener.enterFixed_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFixed_statement" ):
                listener.exitFixed_statement(self)




    def fixed_statement(self):

        localctx = CSharpParser.Fixed_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 212, self.RULE_fixed_statement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1594
            self.match(CSharpParser.FIXED)
            self.state = 1595
            self.match(CSharpParser.OPEN_PARENS)
            self.state = 1596
            self.pointer_type()
            self.state = 1597
            self.fixed_pointer_declarators()
            self.state = 1598
            self.match(CSharpParser.CLOSE_PARENS)
            self.state = 1599
            self.embedded_statement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Unsafe_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UNSAFE(self):
            return self.getToken(CSharpParser.UNSAFE, 0)

        def block(self):
            return self.getTypedRuleContext(CSharpParser.BlockContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_unsafe_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnsafe_statement" ):
                listener.enterUnsafe_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnsafe_statement" ):
                listener.exitUnsafe_statement(self)




    def unsafe_statement(self):

        localctx = CSharpParser.Unsafe_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 214, self.RULE_unsafe_statement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1601
            self.match(CSharpParser.UNSAFE)
            self.state = 1602
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Try_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TRY(self):
            return self.getToken(CSharpParser.TRY, 0)

        def block(self):
            return self.getTypedRuleContext(CSharpParser.BlockContext,0)


        def catch_clauses(self):
            return self.getTypedRuleContext(CSharpParser.Catch_clausesContext,0)


        def finally_clause(self):
            return self.getTypedRuleContext(CSharpParser.Finally_clauseContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_try_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTry_statement" ):
                listener.enterTry_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTry_statement" ):
                listener.exitTry_statement(self)




    def try_statement(self):

        localctx = CSharpParser.Try_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 216, self.RULE_try_statement)
        self._la = 0 # Token type
        try:
            self.state = 1615
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,159,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1604
                self.match(CSharpParser.TRY)
                self.state = 1605
                self.block()
                self.state = 1606
                self.catch_clauses()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1608
                self.match(CSharpParser.TRY)
                self.state = 1609
                self.block()
                self.state = 1611
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==23:
                    self.state = 1610
                    self.catch_clauses()


                self.state = 1613
                self.finally_clause()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BlockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_BRACE(self):
            return self.getToken(CSharpParser.OPEN_BRACE, 0)

        def CLOSE_BRACE(self):
            return self.getToken(CSharpParser.CLOSE_BRACE, 0)

        def statement_list(self):
            return self.getTypedRuleContext(CSharpParser.Statement_listContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_block

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBlock" ):
                listener.enterBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBlock" ):
                listener.exitBlock(self)




    def block(self):

        localctx = CSharpParser.BlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 218, self.RULE_block)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1617
            self.match(CSharpParser.OPEN_BRACE)
            self.state = 1619
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & -819667982803280896) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 4611642037692729533) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & 4398059153889) != 0):
                self.state = 1618
                self.statement_list()


            self.state = 1621
            self.match(CSharpParser.CLOSE_BRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Local_variable_declarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def local_variable_type(self):
            return self.getTypedRuleContext(CSharpParser.Local_variable_typeContext,0)


        def local_variable_declarator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Local_variable_declaratorContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Local_variable_declaratorContext,i)


        def USING(self):
            return self.getToken(CSharpParser.USING, 0)

        def REF(self):
            return self.getToken(CSharpParser.REF, 0)

        def READONLY(self):
            return self.getToken(CSharpParser.READONLY, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.COMMA)
            else:
                return self.getToken(CSharpParser.COMMA, i)

        def FIXED(self):
            return self.getToken(CSharpParser.FIXED, 0)

        def pointer_type(self):
            return self.getTypedRuleContext(CSharpParser.Pointer_typeContext,0)


        def fixed_pointer_declarators(self):
            return self.getTypedRuleContext(CSharpParser.Fixed_pointer_declaratorsContext,0)


        def VAR(self):
            return self.getToken(CSharpParser.VAR, 0)

        def deconstruction_expression(self):
            return self.getTypedRuleContext(CSharpParser.Deconstruction_expressionContext,0)


        def ASSIGNMENT(self):
            return self.getToken(CSharpParser.ASSIGNMENT, 0)

        def expression(self):
            return self.getTypedRuleContext(CSharpParser.ExpressionContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_local_variable_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLocal_variable_declaration" ):
                listener.enterLocal_variable_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLocal_variable_declaration" ):
                listener.exitLocal_variable_declaration(self)




    def local_variable_declaration(self):

        localctx = CSharpParser.Local_variable_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 220, self.RULE_local_variable_declaration)
        self._la = 0 # Token type
        try:
            self.state = 1647
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,163,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1627
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,161,self._ctx)
                if la_ == 1:
                    self.state = 1623
                    self.match(CSharpParser.USING)

                elif la_ == 2:
                    self.state = 1624
                    self.match(CSharpParser.REF)

                elif la_ == 3:
                    self.state = 1625
                    self.match(CSharpParser.REF)
                    self.state = 1626
                    self.match(CSharpParser.READONLY)


                self.state = 1629
                self.local_variable_type()
                self.state = 1630
                self.local_variable_declarator()
                self.state = 1635
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==132:
                    self.state = 1631
                    self.match(CSharpParser.COMMA)
                    self.state = 1632
                    self.local_variable_declarator()
                    self.state = 1637
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1638
                self.match(CSharpParser.FIXED)
                self.state = 1639
                self.pointer_type()
                self.state = 1640
                self.fixed_pointer_declarators()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1642
                self.match(CSharpParser.VAR)
                self.state = 1643
                self.deconstruction_expression()
                self.state = 1644
                self.match(CSharpParser.ASSIGNMENT)
                self.state = 1645
                self.expression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Local_variable_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VAR(self):
            return self.getToken(CSharpParser.VAR, 0)

        def type_(self):
            return self.getTypedRuleContext(CSharpParser.Type_Context,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_local_variable_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLocal_variable_type" ):
                listener.enterLocal_variable_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLocal_variable_type" ):
                listener.exitLocal_variable_type(self)




    def local_variable_type(self):

        localctx = CSharpParser.Local_variable_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 222, self.RULE_local_variable_type)
        try:
            self.state = 1651
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,164,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1649
                self.match(CSharpParser.VAR)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1650
                self.type_()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Local_variable_declaratorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(CSharpParser.IdentifierContext,0)


        def ASSIGNMENT(self):
            return self.getToken(CSharpParser.ASSIGNMENT, 0)

        def local_variable_initializer(self):
            return self.getTypedRuleContext(CSharpParser.Local_variable_initializerContext,0)


        def REF(self):
            return self.getToken(CSharpParser.REF, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_local_variable_declarator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLocal_variable_declarator" ):
                listener.enterLocal_variable_declarator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLocal_variable_declarator" ):
                listener.exitLocal_variable_declarator(self)




    def local_variable_declarator(self):

        localctx = CSharpParser.Local_variable_declaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 224, self.RULE_local_variable_declarator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1653
            self.identifier()
            self.state = 1659
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==145:
                self.state = 1654
                self.match(CSharpParser.ASSIGNMENT)
                self.state = 1656
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,165,self._ctx)
                if la_ == 1:
                    self.state = 1655
                    self.match(CSharpParser.REF)


                self.state = 1658
                self.local_variable_initializer()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Local_variable_initializerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(CSharpParser.ExpressionContext,0)


        def array_initializer(self):
            return self.getTypedRuleContext(CSharpParser.Array_initializerContext,0)


        def stackalloc_initializer(self):
            return self.getTypedRuleContext(CSharpParser.Stackalloc_initializerContext,0)


        def deconstruction_element(self):
            return self.getTypedRuleContext(CSharpParser.Deconstruction_elementContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_local_variable_initializer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLocal_variable_initializer" ):
                listener.enterLocal_variable_initializer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLocal_variable_initializer" ):
                listener.exitLocal_variable_initializer(self)




    def local_variable_initializer(self):

        localctx = CSharpParser.Local_variable_initializerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 226, self.RULE_local_variable_initializer)
        try:
            self.state = 1665
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,167,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1661
                self.expression()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1662
                self.array_initializer()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1663
                self.stackalloc_initializer()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1664
                self.deconstruction_element()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Local_constant_declarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CONST(self):
            return self.getToken(CSharpParser.CONST, 0)

        def type_(self):
            return self.getTypedRuleContext(CSharpParser.Type_Context,0)


        def constant_declarators(self):
            return self.getTypedRuleContext(CSharpParser.Constant_declaratorsContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_local_constant_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLocal_constant_declaration" ):
                listener.enterLocal_constant_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLocal_constant_declaration" ):
                listener.exitLocal_constant_declaration(self)




    def local_constant_declaration(self):

        localctx = CSharpParser.Local_constant_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 228, self.RULE_local_constant_declaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1667
            self.match(CSharpParser.CONST)
            self.state = 1668
            self.type_()
            self.state = 1669
            self.constant_declarators()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Switch_sectionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def statement_list(self):
            return self.getTypedRuleContext(CSharpParser.Statement_listContext,0)


        def switch_label(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Switch_labelContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Switch_labelContext,i)


        def getRuleIndex(self):
            return CSharpParser.RULE_switch_section

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSwitch_section" ):
                listener.enterSwitch_section(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSwitch_section" ):
                listener.exitSwitch_section(self)




    def switch_section(self):

        localctx = CSharpParser.Switch_sectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 230, self.RULE_switch_section)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1672 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 1671
                    self.switch_label()

                else:
                    raise NoViableAltException(self)
                self.state = 1674 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,168,self._ctx)

            self.state = 1676
            self.statement_list()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Switch_labelContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CASE(self):
            return self.getToken(CSharpParser.CASE, 0)

        def expression(self):
            return self.getTypedRuleContext(CSharpParser.ExpressionContext,0)


        def COLON(self):
            return self.getToken(CSharpParser.COLON, 0)

        def case_guard(self):
            return self.getTypedRuleContext(CSharpParser.Case_guardContext,0)


        def pattern(self):
            return self.getTypedRuleContext(CSharpParser.PatternContext,0)


        def DEFAULT(self):
            return self.getToken(CSharpParser.DEFAULT, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_switch_label

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSwitch_label" ):
                listener.enterSwitch_label(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSwitch_label" ):
                listener.exitSwitch_label(self)




    def switch_label(self):

        localctx = CSharpParser.Switch_labelContext(self, self._ctx, self.state)
        self.enterRule(localctx, 232, self.RULE_switch_label)
        self._la = 0 # Token type
        try:
            self.state = 1694
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,171,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1678
                self.match(CSharpParser.CASE)
                self.state = 1679
                self.expression()
                self.state = 1681
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==110:
                    self.state = 1680
                    self.case_guard()


                self.state = 1683
                self.match(CSharpParser.COLON)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1685
                self.match(CSharpParser.CASE)
                self.state = 1686
                self.pattern()
                self.state = 1688
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==110:
                    self.state = 1687
                    self.case_guard()


                self.state = 1690
                self.match(CSharpParser.COLON)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1692
                self.match(CSharpParser.DEFAULT)
                self.state = 1693
                self.match(CSharpParser.COLON)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Case_guardContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHEN(self):
            return self.getToken(CSharpParser.WHEN, 0)

        def expression(self):
            return self.getTypedRuleContext(CSharpParser.ExpressionContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_case_guard

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCase_guard" ):
                listener.enterCase_guard(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCase_guard" ):
                listener.exitCase_guard(self)




    def case_guard(self):

        localctx = CSharpParser.Case_guardContext(self, self._ctx, self.state)
        self.enterRule(localctx, 234, self.RULE_case_guard)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1696
            self.match(CSharpParser.WHEN)
            self.state = 1697
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Statement_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.StatementContext)
            else:
                return self.getTypedRuleContext(CSharpParser.StatementContext,i)


        def getRuleIndex(self):
            return CSharpParser.RULE_statement_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatement_list" ):
                listener.enterStatement_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatement_list" ):
                listener.exitStatement_list(self)




    def statement_list(self):

        localctx = CSharpParser.Statement_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 236, self.RULE_statement_list)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1700 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 1699
                    self.statement()

                else:
                    raise NoViableAltException(self)
                self.state = 1702 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,172,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class For_initializerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def local_variable_declaration(self):
            return self.getTypedRuleContext(CSharpParser.Local_variable_declarationContext,0)


        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(CSharpParser.ExpressionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.COMMA)
            else:
                return self.getToken(CSharpParser.COMMA, i)

        def getRuleIndex(self):
            return CSharpParser.RULE_for_initializer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFor_initializer" ):
                listener.enterFor_initializer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFor_initializer" ):
                listener.exitFor_initializer(self)




    def for_initializer(self):

        localctx = CSharpParser.For_initializerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 238, self.RULE_for_initializer)
        self._la = 0 # Token type
        try:
            self.state = 1713
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,174,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1704
                self.local_variable_declaration()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1705
                self.expression()
                self.state = 1710
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==132:
                    self.state = 1706
                    self.match(CSharpParser.COMMA)
                    self.state = 1707
                    self.expression()
                    self.state = 1712
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class For_iteratorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(CSharpParser.ExpressionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.COMMA)
            else:
                return self.getToken(CSharpParser.COMMA, i)

        def getRuleIndex(self):
            return CSharpParser.RULE_for_iterator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFor_iterator" ):
                listener.enterFor_iterator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFor_iterator" ):
                listener.exitFor_iterator(self)




    def for_iterator(self):

        localctx = CSharpParser.For_iteratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 240, self.RULE_for_iterator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1715
            self.expression()
            self.state = 1720
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==132:
                self.state = 1716
                self.match(CSharpParser.COMMA)
                self.state = 1717
                self.expression()
                self.state = 1722
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Catch_clausesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def specific_catch_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Specific_catch_clauseContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Specific_catch_clauseContext,i)


        def general_catch_clause(self):
            return self.getTypedRuleContext(CSharpParser.General_catch_clauseContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_catch_clauses

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCatch_clauses" ):
                listener.enterCatch_clauses(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCatch_clauses" ):
                listener.exitCatch_clauses(self)




    def catch_clauses(self):

        localctx = CSharpParser.Catch_clausesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 242, self.RULE_catch_clauses)
        self._la = 0 # Token type
        try:
            self.state = 1734
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,178,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1723
                self.specific_catch_clause()
                self.state = 1727
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,176,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1724
                        self.specific_catch_clause() 
                    self.state = 1729
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,176,self._ctx)

                self.state = 1731
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==23:
                    self.state = 1730
                    self.general_catch_clause()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1733
                self.general_catch_clause()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Specific_catch_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CATCH(self):
            return self.getToken(CSharpParser.CATCH, 0)

        def OPEN_PARENS(self):
            return self.getToken(CSharpParser.OPEN_PARENS, 0)

        def class_type(self):
            return self.getTypedRuleContext(CSharpParser.Class_typeContext,0)


        def CLOSE_PARENS(self):
            return self.getToken(CSharpParser.CLOSE_PARENS, 0)

        def block(self):
            return self.getTypedRuleContext(CSharpParser.BlockContext,0)


        def identifier(self):
            return self.getTypedRuleContext(CSharpParser.IdentifierContext,0)


        def exception_filter(self):
            return self.getTypedRuleContext(CSharpParser.Exception_filterContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_specific_catch_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSpecific_catch_clause" ):
                listener.enterSpecific_catch_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSpecific_catch_clause" ):
                listener.exitSpecific_catch_clause(self)




    def specific_catch_clause(self):

        localctx = CSharpParser.Specific_catch_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 244, self.RULE_specific_catch_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1736
            self.match(CSharpParser.CATCH)
            self.state = 1737
            self.match(CSharpParser.OPEN_PARENS)
            self.state = 1738
            self.class_type()
            self.state = 1740
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 3750091428249852928) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 1904629023639713) != 0):
                self.state = 1739
                self.identifier()


            self.state = 1742
            self.match(CSharpParser.CLOSE_PARENS)
            self.state = 1744
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==110:
                self.state = 1743
                self.exception_filter()


            self.state = 1746
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class General_catch_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CATCH(self):
            return self.getToken(CSharpParser.CATCH, 0)

        def block(self):
            return self.getTypedRuleContext(CSharpParser.BlockContext,0)


        def exception_filter(self):
            return self.getTypedRuleContext(CSharpParser.Exception_filterContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_general_catch_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGeneral_catch_clause" ):
                listener.enterGeneral_catch_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGeneral_catch_clause" ):
                listener.exitGeneral_catch_clause(self)




    def general_catch_clause(self):

        localctx = CSharpParser.General_catch_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 246, self.RULE_general_catch_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1748
            self.match(CSharpParser.CATCH)
            self.state = 1750
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==110:
                self.state = 1749
                self.exception_filter()


            self.state = 1752
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Exception_filterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHEN(self):
            return self.getToken(CSharpParser.WHEN, 0)

        def OPEN_PARENS(self):
            return self.getToken(CSharpParser.OPEN_PARENS, 0)

        def expression(self):
            return self.getTypedRuleContext(CSharpParser.ExpressionContext,0)


        def CLOSE_PARENS(self):
            return self.getToken(CSharpParser.CLOSE_PARENS, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_exception_filter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterException_filter" ):
                listener.enterException_filter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitException_filter" ):
                listener.exitException_filter(self)




    def exception_filter(self):

        localctx = CSharpParser.Exception_filterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 248, self.RULE_exception_filter)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1754
            self.match(CSharpParser.WHEN)
            self.state = 1755
            self.match(CSharpParser.OPEN_PARENS)
            self.state = 1756
            self.expression()
            self.state = 1757
            self.match(CSharpParser.CLOSE_PARENS)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Finally_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FINALLY(self):
            return self.getToken(CSharpParser.FINALLY, 0)

        def block(self):
            return self.getTypedRuleContext(CSharpParser.BlockContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_finally_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFinally_clause" ):
                listener.enterFinally_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFinally_clause" ):
                listener.exitFinally_clause(self)




    def finally_clause(self):

        localctx = CSharpParser.Finally_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 250, self.RULE_finally_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1759
            self.match(CSharpParser.FINALLY)
            self.state = 1760
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Resource_acquisitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def local_variable_declaration(self):
            return self.getTypedRuleContext(CSharpParser.Local_variable_declarationContext,0)


        def expression(self):
            return self.getTypedRuleContext(CSharpParser.ExpressionContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_resource_acquisition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterResource_acquisition" ):
                listener.enterResource_acquisition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitResource_acquisition" ):
                listener.exitResource_acquisition(self)




    def resource_acquisition(self):

        localctx = CSharpParser.Resource_acquisitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 252, self.RULE_resource_acquisition)
        try:
            self.state = 1764
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,182,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1762
                self.local_variable_declaration()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1763
                self.expression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Namespace_declarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.qi = None # Qualified_identifierContext

        def NAMESPACE(self):
            return self.getToken(CSharpParser.NAMESPACE, 0)

        def namespace_body(self):
            return self.getTypedRuleContext(CSharpParser.Namespace_bodyContext,0)


        def qualified_identifier(self):
            return self.getTypedRuleContext(CSharpParser.Qualified_identifierContext,0)


        def SEMICOLON(self):
            return self.getToken(CSharpParser.SEMICOLON, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_namespace_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNamespace_declaration" ):
                listener.enterNamespace_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNamespace_declaration" ):
                listener.exitNamespace_declaration(self)




    def namespace_declaration(self):

        localctx = CSharpParser.Namespace_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 254, self.RULE_namespace_declaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1766
            self.match(CSharpParser.NAMESPACE)
            self.state = 1767
            localctx.qi = self.qualified_identifier()
            self.state = 1768
            self.namespace_body()
            self.state = 1770
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,183,self._ctx)
            if la_ == 1:
                self.state = 1769
                self.match(CSharpParser.SEMICOLON)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Qualified_identifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(CSharpParser.IdentifierContext,i)


        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.DOT)
            else:
                return self.getToken(CSharpParser.DOT, i)

        def getRuleIndex(self):
            return CSharpParser.RULE_qualified_identifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQualified_identifier" ):
                listener.enterQualified_identifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQualified_identifier" ):
                listener.exitQualified_identifier(self)




    def qualified_identifier(self):

        localctx = CSharpParser.Qualified_identifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 256, self.RULE_qualified_identifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1772
            self.identifier()
            self.state = 1777
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==131:
                self.state = 1773
                self.match(CSharpParser.DOT)
                self.state = 1774
                self.identifier()
                self.state = 1779
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Namespace_bodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_BRACE(self):
            return self.getToken(CSharpParser.OPEN_BRACE, 0)

        def CLOSE_BRACE(self):
            return self.getToken(CSharpParser.CLOSE_BRACE, 0)

        def extern_alias_directives(self):
            return self.getTypedRuleContext(CSharpParser.Extern_alias_directivesContext,0)


        def using_directives(self):
            return self.getTypedRuleContext(CSharpParser.Using_directivesContext,0)


        def namespace_member_declarations(self):
            return self.getTypedRuleContext(CSharpParser.Namespace_member_declarationsContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_namespace_body

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNamespace_body" ):
                listener.enterNamespace_body(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNamespace_body" ):
                listener.exitNamespace_body(self)




    def namespace_body(self):

        localctx = CSharpParser.Namespace_bodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 258, self.RULE_namespace_body)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1780
            self.match(CSharpParser.OPEN_BRACE)
            self.state = 1782
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,185,self._ctx)
            if la_ == 1:
                self.state = 1781
                self.extern_alias_directives()


            self.state = 1785
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==105:
                self.state = 1784
                self.using_directives()


            self.state = 1788
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 216175120790618624) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & 4611708283706211587) != 0):
                self.state = 1787
                self.namespace_member_declarations()


            self.state = 1790
            self.match(CSharpParser.CLOSE_BRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Extern_alias_directivesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def extern_alias_directive(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Extern_alias_directiveContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Extern_alias_directiveContext,i)


        def getRuleIndex(self):
            return CSharpParser.RULE_extern_alias_directives

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExtern_alias_directives" ):
                listener.enterExtern_alias_directives(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExtern_alias_directives" ):
                listener.exitExtern_alias_directives(self)




    def extern_alias_directives(self):

        localctx = CSharpParser.Extern_alias_directivesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 260, self.RULE_extern_alias_directives)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1793 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 1792
                    self.extern_alias_directive()

                else:
                    raise NoViableAltException(self)
                self.state = 1795 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,188,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Extern_alias_directiveContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXTERN(self):
            return self.getToken(CSharpParser.EXTERN, 0)

        def ALIAS(self):
            return self.getToken(CSharpParser.ALIAS, 0)

        def identifier(self):
            return self.getTypedRuleContext(CSharpParser.IdentifierContext,0)


        def SEMICOLON(self):
            return self.getToken(CSharpParser.SEMICOLON, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_extern_alias_directive

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExtern_alias_directive" ):
                listener.enterExtern_alias_directive(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExtern_alias_directive" ):
                listener.exitExtern_alias_directive(self)




    def extern_alias_directive(self):

        localctx = CSharpParser.Extern_alias_directiveContext(self, self._ctx, self.state)
        self.enterRule(localctx, 262, self.RULE_extern_alias_directive)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1797
            self.match(CSharpParser.EXTERN)
            self.state = 1798
            self.match(CSharpParser.ALIAS)
            self.state = 1799
            self.identifier()
            self.state = 1800
            self.match(CSharpParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Using_directivesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def using_directive(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Using_directiveContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Using_directiveContext,i)


        def getRuleIndex(self):
            return CSharpParser.RULE_using_directives

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUsing_directives" ):
                listener.enterUsing_directives(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUsing_directives" ):
                listener.exitUsing_directives(self)




    def using_directives(self):

        localctx = CSharpParser.Using_directivesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 264, self.RULE_using_directives)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1803 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 1802
                    self.using_directive()

                else:
                    raise NoViableAltException(self)
                self.state = 1805 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,189,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Using_directiveContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CSharpParser.RULE_using_directive

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class UsingAliasDirectiveContext(Using_directiveContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CSharpParser.Using_directiveContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def USING(self):
            return self.getToken(CSharpParser.USING, 0)
        def identifier(self):
            return self.getTypedRuleContext(CSharpParser.IdentifierContext,0)

        def ASSIGNMENT(self):
            return self.getToken(CSharpParser.ASSIGNMENT, 0)
        def namespace_or_type_name(self):
            return self.getTypedRuleContext(CSharpParser.Namespace_or_type_nameContext,0)

        def SEMICOLON(self):
            return self.getToken(CSharpParser.SEMICOLON, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUsingAliasDirective" ):
                listener.enterUsingAliasDirective(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUsingAliasDirective" ):
                listener.exitUsingAliasDirective(self)


    class UsingNamespaceDirectiveContext(Using_directiveContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CSharpParser.Using_directiveContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def USING(self):
            return self.getToken(CSharpParser.USING, 0)
        def namespace_or_type_name(self):
            return self.getTypedRuleContext(CSharpParser.Namespace_or_type_nameContext,0)

        def SEMICOLON(self):
            return self.getToken(CSharpParser.SEMICOLON, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUsingNamespaceDirective" ):
                listener.enterUsingNamespaceDirective(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUsingNamespaceDirective" ):
                listener.exitUsingNamespaceDirective(self)


    class UsingStaticDirectiveContext(Using_directiveContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CSharpParser.Using_directiveContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def USING(self):
            return self.getToken(CSharpParser.USING, 0)
        def STATIC(self):
            return self.getToken(CSharpParser.STATIC, 0)
        def namespace_or_type_name(self):
            return self.getTypedRuleContext(CSharpParser.Namespace_or_type_nameContext,0)

        def SEMICOLON(self):
            return self.getToken(CSharpParser.SEMICOLON, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUsingStaticDirective" ):
                listener.enterUsingStaticDirective(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUsingStaticDirective" ):
                listener.exitUsingStaticDirective(self)



    def using_directive(self):

        localctx = CSharpParser.Using_directiveContext(self, self._ctx, self.state)
        self.enterRule(localctx, 266, self.RULE_using_directive)
        try:
            self.state = 1822
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,190,self._ctx)
            if la_ == 1:
                localctx = CSharpParser.UsingAliasDirectiveContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1807
                self.match(CSharpParser.USING)
                self.state = 1808
                self.identifier()
                self.state = 1809
                self.match(CSharpParser.ASSIGNMENT)
                self.state = 1810
                self.namespace_or_type_name()
                self.state = 1811
                self.match(CSharpParser.SEMICOLON)
                pass

            elif la_ == 2:
                localctx = CSharpParser.UsingNamespaceDirectiveContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1813
                self.match(CSharpParser.USING)
                self.state = 1814
                self.namespace_or_type_name()
                self.state = 1815
                self.match(CSharpParser.SEMICOLON)
                pass

            elif la_ == 3:
                localctx = CSharpParser.UsingStaticDirectiveContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 1817
                self.match(CSharpParser.USING)
                self.state = 1818
                self.match(CSharpParser.STATIC)
                self.state = 1819
                self.namespace_or_type_name()
                self.state = 1820
                self.match(CSharpParser.SEMICOLON)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Namespace_member_declarationsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def namespace_member_declaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Namespace_member_declarationContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Namespace_member_declarationContext,i)


        def getRuleIndex(self):
            return CSharpParser.RULE_namespace_member_declarations

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNamespace_member_declarations" ):
                listener.enterNamespace_member_declarations(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNamespace_member_declarations" ):
                listener.exitNamespace_member_declarations(self)




    def namespace_member_declarations(self):

        localctx = CSharpParser.Namespace_member_declarationsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 268, self.RULE_namespace_member_declarations)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1825 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 1824
                    self.namespace_member_declaration()

                else:
                    raise NoViableAltException(self)
                self.state = 1827 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,191,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Namespace_member_declarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def namespace_declaration(self):
            return self.getTypedRuleContext(CSharpParser.Namespace_declarationContext,0)


        def type_declaration(self):
            return self.getTypedRuleContext(CSharpParser.Type_declarationContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_namespace_member_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNamespace_member_declaration" ):
                listener.enterNamespace_member_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNamespace_member_declaration" ):
                listener.exitNamespace_member_declaration(self)




    def namespace_member_declaration(self):

        localctx = CSharpParser.Namespace_member_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 270, self.RULE_namespace_member_declaration)
        try:
            self.state = 1831
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [65]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1829
                self.namespace_declaration()
                pass
            elif token in [9, 15, 26, 31, 37, 41, 56, 57, 66, 73, 75, 76, 77, 78, 79, 80, 84, 90, 92, 103, 107, 109, 127]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1830
                self.type_declaration()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Type_declarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def class_definition(self):
            return self.getTypedRuleContext(CSharpParser.Class_definitionContext,0)


        def struct_definition(self):
            return self.getTypedRuleContext(CSharpParser.Struct_definitionContext,0)


        def interface_definition(self):
            return self.getTypedRuleContext(CSharpParser.Interface_definitionContext,0)


        def enum_definition(self):
            return self.getTypedRuleContext(CSharpParser.Enum_definitionContext,0)


        def delegate_definition(self):
            return self.getTypedRuleContext(CSharpParser.Delegate_definitionContext,0)


        def attributes(self):
            return self.getTypedRuleContext(CSharpParser.AttributesContext,0)


        def all_member_modifiers(self):
            return self.getTypedRuleContext(CSharpParser.All_member_modifiersContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_type_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterType_declaration" ):
                listener.enterType_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitType_declaration" ):
                listener.exitType_declaration(self)




    def type_declaration(self):

        localctx = CSharpParser.Type_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 272, self.RULE_type_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1834
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==127:
                self.state = 1833
                self.attributes()


            self.state = 1837
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,194,self._ctx)
            if la_ == 1:
                self.state = 1836
                self.all_member_modifiers()


            self.state = 1844
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,195,self._ctx)
            if la_ == 1:
                self.state = 1839
                self.class_definition()
                pass

            elif la_ == 2:
                self.state = 1840
                self.struct_definition()
                pass

            elif la_ == 3:
                self.state = 1841
                self.interface_definition()
                pass

            elif la_ == 4:
                self.state = 1842
                self.enum_definition()
                pass

            elif la_ == 5:
                self.state = 1843
                self.delegate_definition()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Qualified_alias_memberContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(CSharpParser.IdentifierContext,i)


        def DOUBLE_COLON(self):
            return self.getToken(CSharpParser.DOUBLE_COLON, 0)

        def type_argument_list(self):
            return self.getTypedRuleContext(CSharpParser.Type_argument_listContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_qualified_alias_member

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQualified_alias_member" ):
                listener.enterQualified_alias_member(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQualified_alias_member" ):
                listener.exitQualified_alias_member(self)




    def qualified_alias_member(self):

        localctx = CSharpParser.Qualified_alias_memberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 274, self.RULE_qualified_alias_member)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1846
            self.identifier()
            self.state = 1847
            self.match(CSharpParser.DOUBLE_COLON)
            self.state = 1848
            self.identifier()
            self.state = 1850
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,196,self._ctx)
            if la_ == 1:
                self.state = 1849
                self.type_argument_list()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Type_parameter_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LT(self):
            return self.getToken(CSharpParser.LT, 0)

        def type_parameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Type_parameterContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Type_parameterContext,i)


        def GT(self):
            return self.getToken(CSharpParser.GT, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.COMMA)
            else:
                return self.getToken(CSharpParser.COMMA, i)

        def getRuleIndex(self):
            return CSharpParser.RULE_type_parameter_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterType_parameter_list" ):
                listener.enterType_parameter_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitType_parameter_list" ):
                listener.exitType_parameter_list(self)




    def type_parameter_list(self):

        localctx = CSharpParser.Type_parameter_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 276, self.RULE_type_parameter_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1852
            self.match(CSharpParser.LT)
            self.state = 1853
            self.type_parameter()
            self.state = 1858
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==132:
                self.state = 1854
                self.match(CSharpParser.COMMA)
                self.state = 1855
                self.type_parameter()
                self.state = 1860
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1861
            self.match(CSharpParser.GT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Type_parameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(CSharpParser.IdentifierContext,0)


        def attributes(self):
            return self.getTypedRuleContext(CSharpParser.AttributesContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_type_parameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterType_parameter" ):
                listener.enterType_parameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitType_parameter" ):
                listener.exitType_parameter(self)




    def type_parameter(self):

        localctx = CSharpParser.Type_parameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 278, self.RULE_type_parameter)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1864
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==127:
                self.state = 1863
                self.attributes()


            self.state = 1866
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Class_baseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COLON(self):
            return self.getToken(CSharpParser.COLON, 0)

        def class_type(self):
            return self.getTypedRuleContext(CSharpParser.Class_typeContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.COMMA)
            else:
                return self.getToken(CSharpParser.COMMA, i)

        def namespace_or_type_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Namespace_or_type_nameContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Namespace_or_type_nameContext,i)


        def getRuleIndex(self):
            return CSharpParser.RULE_class_base

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClass_base" ):
                listener.enterClass_base(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClass_base" ):
                listener.exitClass_base(self)




    def class_base(self):

        localctx = CSharpParser.Class_baseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 280, self.RULE_class_base)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1868
            self.match(CSharpParser.COLON)
            self.state = 1869
            self.class_type()
            self.state = 1874
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==132:
                self.state = 1870
                self.match(CSharpParser.COMMA)
                self.state = 1871
                self.namespace_or_type_name()
                self.state = 1876
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Interface_type_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def namespace_or_type_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Namespace_or_type_nameContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Namespace_or_type_nameContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.COMMA)
            else:
                return self.getToken(CSharpParser.COMMA, i)

        def getRuleIndex(self):
            return CSharpParser.RULE_interface_type_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterface_type_list" ):
                listener.enterInterface_type_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterface_type_list" ):
                listener.exitInterface_type_list(self)




    def interface_type_list(self):

        localctx = CSharpParser.Interface_type_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 282, self.RULE_interface_type_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1877
            self.namespace_or_type_name()
            self.state = 1882
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==132:
                self.state = 1878
                self.match(CSharpParser.COMMA)
                self.state = 1879
                self.namespace_or_type_name()
                self.state = 1884
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Type_parameter_constraints_clausesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def type_parameter_constraints_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Type_parameter_constraints_clauseContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Type_parameter_constraints_clauseContext,i)


        def getRuleIndex(self):
            return CSharpParser.RULE_type_parameter_constraints_clauses

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterType_parameter_constraints_clauses" ):
                listener.enterType_parameter_constraints_clauses(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitType_parameter_constraints_clauses" ):
                listener.exitType_parameter_constraints_clauses(self)




    def type_parameter_constraints_clauses(self):

        localctx = CSharpParser.Type_parameter_constraints_clausesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 284, self.RULE_type_parameter_constraints_clauses)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1886 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1885
                self.type_parameter_constraints_clause()
                self.state = 1888 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==111):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Type_parameter_constraints_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHERE(self):
            return self.getToken(CSharpParser.WHERE, 0)

        def identifier(self):
            return self.getTypedRuleContext(CSharpParser.IdentifierContext,0)


        def COLON(self):
            return self.getToken(CSharpParser.COLON, 0)

        def type_parameter_constraints(self):
            return self.getTypedRuleContext(CSharpParser.Type_parameter_constraintsContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_type_parameter_constraints_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterType_parameter_constraints_clause" ):
                listener.enterType_parameter_constraints_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitType_parameter_constraints_clause" ):
                listener.exitType_parameter_constraints_clause(self)




    def type_parameter_constraints_clause(self):

        localctx = CSharpParser.Type_parameter_constraints_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 286, self.RULE_type_parameter_constraints_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1890
            self.match(CSharpParser.WHERE)
            self.state = 1891
            self.identifier()
            self.state = 1892
            self.match(CSharpParser.COLON)
            self.state = 1893
            self.type_parameter_constraints()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Type_parameter_constraintsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def constructor_constraint(self):
            return self.getTypedRuleContext(CSharpParser.Constructor_constraintContext,0)


        def primary_constraint(self):
            return self.getTypedRuleContext(CSharpParser.Primary_constraintContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.COMMA)
            else:
                return self.getToken(CSharpParser.COMMA, i)

        def secondary_constraints(self):
            return self.getTypedRuleContext(CSharpParser.Secondary_constraintsContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_type_parameter_constraints

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterType_parameter_constraints" ):
                listener.enterType_parameter_constraints(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitType_parameter_constraints" ):
                listener.exitType_parameter_constraints(self)




    def type_parameter_constraints(self):

        localctx = CSharpParser.Type_parameter_constraintsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 288, self.RULE_type_parameter_constraints)
        self._la = 0 # Token type
        try:
            self.state = 1905
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [66]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1895
                self.constructor_constraint()
                pass
            elif token in [10, 11, 12, 14, 15, 16, 20, 26, 32, 35, 38, 48, 49, 51, 58, 60, 61, 64, 68, 69, 71, 75, 81, 85, 86, 91, 92, 102, 106, 110, 111, 113, 114]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1896
                self.primary_constraint()
                self.state = 1899
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,202,self._ctx)
                if la_ == 1:
                    self.state = 1897
                    self.match(CSharpParser.COMMA)
                    self.state = 1898
                    self.secondary_constraints()


                self.state = 1903
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==132:
                    self.state = 1901
                    self.match(CSharpParser.COMMA)
                    self.state = 1902
                    self.constructor_constraint()


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Primary_constraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def class_type(self):
            return self.getTypedRuleContext(CSharpParser.Class_typeContext,0)


        def CLASS(self):
            return self.getToken(CSharpParser.CLASS, 0)

        def INTERR(self):
            return self.getToken(CSharpParser.INTERR, 0)

        def STRUCT(self):
            return self.getToken(CSharpParser.STRUCT, 0)

        def UNMANAGED(self):
            return self.getToken(CSharpParser.UNMANAGED, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_primary_constraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrimary_constraint" ):
                listener.enterPrimary_constraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrimary_constraint" ):
                listener.exitPrimary_constraint(self)




    def primary_constraint(self):

        localctx = CSharpParser.Primary_constraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 290, self.RULE_primary_constraint)
        self._la = 0 # Token type
        try:
            self.state = 1914
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,206,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1907
                self.class_type()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1908
                self.match(CSharpParser.CLASS)
                self.state = 1910
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==148:
                    self.state = 1909
                    self.match(CSharpParser.INTERR)


                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1912
                self.match(CSharpParser.STRUCT)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1913
                self.match(CSharpParser.UNMANAGED)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PatternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declaration_pattern(self):
            return self.getTypedRuleContext(CSharpParser.Declaration_patternContext,0)


        def constant_pattern(self):
            return self.getTypedRuleContext(CSharpParser.Constant_patternContext,0)


        def var_pattern(self):
            return self.getTypedRuleContext(CSharpParser.Var_patternContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_pattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPattern" ):
                listener.enterPattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPattern" ):
                listener.exitPattern(self)




    def pattern(self):

        localctx = CSharpParser.PatternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 292, self.RULE_pattern)
        try:
            self.state = 1919
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,207,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1916
                self.declaration_pattern()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1917
                self.constant_pattern()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1918
                self.var_pattern()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Declaration_patternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def type_(self):
            return self.getTypedRuleContext(CSharpParser.Type_Context,0)


        def simple_designation(self):
            return self.getTypedRuleContext(CSharpParser.Simple_designationContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_declaration_pattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclaration_pattern" ):
                listener.enterDeclaration_pattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclaration_pattern" ):
                listener.exitDeclaration_pattern(self)




    def declaration_pattern(self):

        localctx = CSharpParser.Declaration_patternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 294, self.RULE_declaration_pattern)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1921
            self.type_()
            self.state = 1922
            self.simple_designation()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Simple_designationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def single_variable_designation(self):
            return self.getTypedRuleContext(CSharpParser.Single_variable_designationContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_simple_designation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimple_designation" ):
                listener.enterSimple_designation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimple_designation" ):
                listener.exitSimple_designation(self)




    def simple_designation(self):

        localctx = CSharpParser.Simple_designationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 296, self.RULE_simple_designation)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1924
            self.single_variable_designation()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Single_variable_designationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(CSharpParser.IdentifierContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_single_variable_designation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSingle_variable_designation" ):
                listener.enterSingle_variable_designation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSingle_variable_designation" ):
                listener.exitSingle_variable_designation(self)




    def single_variable_designation(self):

        localctx = CSharpParser.Single_variable_designationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 298, self.RULE_single_variable_designation)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1926
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Constant_patternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def constant_expression(self):
            return self.getTypedRuleContext(CSharpParser.Constant_expressionContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_constant_pattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstant_pattern" ):
                listener.enterConstant_pattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstant_pattern" ):
                listener.exitConstant_pattern(self)




    def constant_pattern(self):

        localctx = CSharpParser.Constant_patternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 300, self.RULE_constant_pattern)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1928
            self.constant_expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Var_patternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VAR(self):
            return self.getToken(CSharpParser.VAR, 0)

        def designation(self):
            return self.getTypedRuleContext(CSharpParser.DesignationContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_var_pattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVar_pattern" ):
                listener.enterVar_pattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVar_pattern" ):
                listener.exitVar_pattern(self)




    def var_pattern(self):

        localctx = CSharpParser.Var_patternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 302, self.RULE_var_pattern)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1930
            self.match(CSharpParser.VAR)
            self.state = 1931
            self.designation()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DesignationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simple_designation(self):
            return self.getTypedRuleContext(CSharpParser.Simple_designationContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_designation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDesignation" ):
                listener.enterDesignation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDesignation" ):
                listener.exitDesignation(self)




    def designation(self):

        localctx = CSharpParser.DesignationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 304, self.RULE_designation)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1933
            self.simple_designation()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Secondary_constraintsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def namespace_or_type_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Namespace_or_type_nameContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Namespace_or_type_nameContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.COMMA)
            else:
                return self.getToken(CSharpParser.COMMA, i)

        def getRuleIndex(self):
            return CSharpParser.RULE_secondary_constraints

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSecondary_constraints" ):
                listener.enterSecondary_constraints(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSecondary_constraints" ):
                listener.exitSecondary_constraints(self)




    def secondary_constraints(self):

        localctx = CSharpParser.Secondary_constraintsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 306, self.RULE_secondary_constraints)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1935
            self.namespace_or_type_name()
            self.state = 1940
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,208,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1936
                    self.match(CSharpParser.COMMA)
                    self.state = 1937
                    self.namespace_or_type_name() 
                self.state = 1942
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,208,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Constructor_constraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NEW(self):
            return self.getToken(CSharpParser.NEW, 0)

        def OPEN_PARENS(self):
            return self.getToken(CSharpParser.OPEN_PARENS, 0)

        def CLOSE_PARENS(self):
            return self.getToken(CSharpParser.CLOSE_PARENS, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_constructor_constraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstructor_constraint" ):
                listener.enterConstructor_constraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstructor_constraint" ):
                listener.exitConstructor_constraint(self)




    def constructor_constraint(self):

        localctx = CSharpParser.Constructor_constraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 308, self.RULE_constructor_constraint)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1943
            self.match(CSharpParser.NEW)
            self.state = 1944
            self.match(CSharpParser.OPEN_PARENS)
            self.state = 1945
            self.match(CSharpParser.CLOSE_PARENS)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Class_bodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_BRACE(self):
            return self.getToken(CSharpParser.OPEN_BRACE, 0)

        def CLOSE_BRACE(self):
            return self.getToken(CSharpParser.CLOSE_BRACE, 0)

        def class_member_declarations(self):
            return self.getTypedRuleContext(CSharpParser.Class_member_declarationsContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_class_body

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClass_body" ):
                listener.enterClass_body(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClass_body" ):
                listener.exitClass_body(self)




    def class_body(self):

        localctx = CSharpParser.Class_bodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 310, self.RULE_class_body)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1947
            self.match(CSharpParser.OPEN_BRACE)
            self.state = 1949
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & -5212032640031007232) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -9221404082353472843) != 0) or _la==129 or _la==144:
                self.state = 1948
                self.class_member_declarations()


            self.state = 1951
            self.match(CSharpParser.CLOSE_BRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Class_member_declarationsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def class_member_declaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Class_member_declarationContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Class_member_declarationContext,i)


        def getRuleIndex(self):
            return CSharpParser.RULE_class_member_declarations

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClass_member_declarations" ):
                listener.enterClass_member_declarations(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClass_member_declarations" ):
                listener.exitClass_member_declarations(self)




    def class_member_declarations(self):

        localctx = CSharpParser.Class_member_declarationsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 312, self.RULE_class_member_declarations)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1954 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1953
                self.class_member_declaration()
                self.state = 1956 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & -5212032640031007232) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -9221404082353472843) != 0) or _la==129 or _la==144):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Class_member_declarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def common_member_declaration(self):
            return self.getTypedRuleContext(CSharpParser.Common_member_declarationContext,0)


        def destructor_definition(self):
            return self.getTypedRuleContext(CSharpParser.Destructor_definitionContext,0)


        def attributes(self):
            return self.getTypedRuleContext(CSharpParser.AttributesContext,0)


        def all_member_modifiers(self):
            return self.getTypedRuleContext(CSharpParser.All_member_modifiersContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_class_member_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClass_member_declaration" ):
                listener.enterClass_member_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClass_member_declaration" ):
                listener.exitClass_member_declaration(self)




    def class_member_declaration(self):

        localctx = CSharpParser.Class_member_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 314, self.RULE_class_member_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1959
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==127:
                self.state = 1958
                self.attributes()


            self.state = 1962
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,212,self._ctx)
            if la_ == 1:
                self.state = 1961
                self.all_member_modifiers()


            self.state = 1966
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [9, 10, 11, 12, 14, 15, 16, 18, 20, 21, 24, 26, 27, 29, 31, 32, 34, 35, 37, 38, 39, 40, 45, 48, 49, 51, 53, 55, 56, 57, 58, 60, 61, 63, 64, 66, 68, 69, 71, 75, 76, 77, 78, 79, 80, 81, 83, 84, 85, 86, 87, 90, 91, 92, 99, 100, 102, 103, 104, 106, 108, 110, 111, 113, 114, 129]:
                self.state = 1964
                self.common_member_declaration()
                pass
            elif token in [144]:
                self.state = 1965
                self.destructor_definition()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class All_member_modifiersContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def all_member_modifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.All_member_modifierContext)
            else:
                return self.getTypedRuleContext(CSharpParser.All_member_modifierContext,i)


        def getRuleIndex(self):
            return CSharpParser.RULE_all_member_modifiers

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAll_member_modifiers" ):
                listener.enterAll_member_modifiers(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAll_member_modifiers" ):
                listener.exitAll_member_modifiers(self)




    def all_member_modifiers(self):

        localctx = CSharpParser.All_member_modifiersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 316, self.RULE_all_member_modifiers)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1969 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 1968
                    self.all_member_modifier()

                else:
                    raise NoViableAltException(self)
                self.state = 1971 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,214,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class All_member_modifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NEW(self):
            return self.getToken(CSharpParser.NEW, 0)

        def PUBLIC(self):
            return self.getToken(CSharpParser.PUBLIC, 0)

        def PROTECTED(self):
            return self.getToken(CSharpParser.PROTECTED, 0)

        def INTERNAL(self):
            return self.getToken(CSharpParser.INTERNAL, 0)

        def PRIVATE(self):
            return self.getToken(CSharpParser.PRIVATE, 0)

        def READONLY(self):
            return self.getToken(CSharpParser.READONLY, 0)

        def VOLATILE(self):
            return self.getToken(CSharpParser.VOLATILE, 0)

        def VIRTUAL(self):
            return self.getToken(CSharpParser.VIRTUAL, 0)

        def SEALED(self):
            return self.getToken(CSharpParser.SEALED, 0)

        def OVERRIDE(self):
            return self.getToken(CSharpParser.OVERRIDE, 0)

        def ABSTRACT(self):
            return self.getToken(CSharpParser.ABSTRACT, 0)

        def STATIC(self):
            return self.getToken(CSharpParser.STATIC, 0)

        def UNSAFE(self):
            return self.getToken(CSharpParser.UNSAFE, 0)

        def EXTERN(self):
            return self.getToken(CSharpParser.EXTERN, 0)

        def PARTIAL(self):
            return self.getToken(CSharpParser.PARTIAL, 0)

        def ASYNC(self):
            return self.getToken(CSharpParser.ASYNC, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_all_member_modifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAll_member_modifier" ):
                listener.enterAll_member_modifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAll_member_modifier" ):
                listener.exitAll_member_modifier(self)




    def all_member_modifier(self):

        localctx = CSharpParser.All_member_modifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 318, self.RULE_all_member_modifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1973
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 144117387099144704) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & 11132572286593) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Common_member_declarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def constant_declaration(self):
            return self.getTypedRuleContext(CSharpParser.Constant_declarationContext,0)


        def typed_member_declaration(self):
            return self.getTypedRuleContext(CSharpParser.Typed_member_declarationContext,0)


        def event_declaration(self):
            return self.getTypedRuleContext(CSharpParser.Event_declarationContext,0)


        def conversion_operator_declarator(self):
            return self.getTypedRuleContext(CSharpParser.Conversion_operator_declaratorContext,0)


        def body(self):
            return self.getTypedRuleContext(CSharpParser.BodyContext,0)


        def right_arrow(self):
            return self.getTypedRuleContext(CSharpParser.Right_arrowContext,0)


        def throwable_expression(self):
            return self.getTypedRuleContext(CSharpParser.Throwable_expressionContext,0)


        def SEMICOLON(self):
            return self.getToken(CSharpParser.SEMICOLON, 0)

        def constructor_declaration(self):
            return self.getTypedRuleContext(CSharpParser.Constructor_declarationContext,0)


        def VOID(self):
            return self.getToken(CSharpParser.VOID, 0)

        def method_declaration(self):
            return self.getTypedRuleContext(CSharpParser.Method_declarationContext,0)


        def class_definition(self):
            return self.getTypedRuleContext(CSharpParser.Class_definitionContext,0)


        def struct_definition(self):
            return self.getTypedRuleContext(CSharpParser.Struct_definitionContext,0)


        def interface_definition(self):
            return self.getTypedRuleContext(CSharpParser.Interface_definitionContext,0)


        def enum_definition(self):
            return self.getTypedRuleContext(CSharpParser.Enum_definitionContext,0)


        def delegate_definition(self):
            return self.getTypedRuleContext(CSharpParser.Delegate_definitionContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_common_member_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCommon_member_declaration" ):
                listener.enterCommon_member_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCommon_member_declaration" ):
                listener.exitCommon_member_declaration(self)




    def common_member_declaration(self):

        localctx = CSharpParser.Common_member_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 320, self.RULE_common_member_declaration)
        try:
            self.state = 1994
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,216,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1975
                self.constant_declaration()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1976
                self.typed_member_declaration()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1977
                self.event_declaration()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1978
                self.conversion_operator_declarator()
                self.state = 1984
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,215,self._ctx)
                if la_ == 1:
                    self.state = 1979
                    self.body()
                    pass

                elif la_ == 2:
                    self.state = 1980
                    self.right_arrow()
                    self.state = 1981
                    self.throwable_expression()
                    self.state = 1982
                    self.match(CSharpParser.SEMICOLON)
                    pass


                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1986
                self.constructor_declaration()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1987
                self.match(CSharpParser.VOID)
                self.state = 1988
                self.method_declaration()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1989
                self.class_definition()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 1990
                self.struct_definition()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 1991
                self.interface_definition()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 1992
                self.enum_definition()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 1993
                self.delegate_definition()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Typed_member_declarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def type_(self):
            return self.getTypedRuleContext(CSharpParser.Type_Context,0)


        def namespace_or_type_name(self):
            return self.getTypedRuleContext(CSharpParser.Namespace_or_type_nameContext,0)


        def DOT(self):
            return self.getToken(CSharpParser.DOT, 0)

        def indexer_declaration(self):
            return self.getTypedRuleContext(CSharpParser.Indexer_declarationContext,0)


        def method_declaration(self):
            return self.getTypedRuleContext(CSharpParser.Method_declarationContext,0)


        def property_declaration(self):
            return self.getTypedRuleContext(CSharpParser.Property_declarationContext,0)


        def operator_declaration(self):
            return self.getTypedRuleContext(CSharpParser.Operator_declarationContext,0)


        def field_declaration(self):
            return self.getTypedRuleContext(CSharpParser.Field_declarationContext,0)


        def REF(self):
            return self.getToken(CSharpParser.REF, 0)

        def READONLY(self):
            return self.getToken(CSharpParser.READONLY, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_typed_member_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTyped_member_declaration" ):
                listener.enterTyped_member_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTyped_member_declaration" ):
                listener.exitTyped_member_declaration(self)




    def typed_member_declaration(self):

        localctx = CSharpParser.Typed_member_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 322, self.RULE_typed_member_declaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2001
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,217,self._ctx)
            if la_ == 1:
                self.state = 1996
                self.match(CSharpParser.REF)

            elif la_ == 2:
                self.state = 1997
                self.match(CSharpParser.READONLY)
                self.state = 1998
                self.match(CSharpParser.REF)

            elif la_ == 3:
                self.state = 1999
                self.match(CSharpParser.REF)
                self.state = 2000
                self.match(CSharpParser.READONLY)


            self.state = 2003
            self.type_()
            self.state = 2013
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,218,self._ctx)
            if la_ == 1:
                self.state = 2004
                self.namespace_or_type_name()
                self.state = 2005
                self.match(CSharpParser.DOT)
                self.state = 2006
                self.indexer_declaration()
                pass

            elif la_ == 2:
                self.state = 2008
                self.method_declaration()
                pass

            elif la_ == 3:
                self.state = 2009
                self.property_declaration()
                pass

            elif la_ == 4:
                self.state = 2010
                self.indexer_declaration()
                pass

            elif la_ == 5:
                self.state = 2011
                self.operator_declaration()
                pass

            elif la_ == 6:
                self.state = 2012
                self.field_declaration()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Constant_declaratorsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def constant_declarator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Constant_declaratorContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Constant_declaratorContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.COMMA)
            else:
                return self.getToken(CSharpParser.COMMA, i)

        def getRuleIndex(self):
            return CSharpParser.RULE_constant_declarators

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstant_declarators" ):
                listener.enterConstant_declarators(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstant_declarators" ):
                listener.exitConstant_declarators(self)




    def constant_declarators(self):

        localctx = CSharpParser.Constant_declaratorsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 324, self.RULE_constant_declarators)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2015
            self.constant_declarator()
            self.state = 2020
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==132:
                self.state = 2016
                self.match(CSharpParser.COMMA)
                self.state = 2017
                self.constant_declarator()
                self.state = 2022
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Constant_declaratorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(CSharpParser.IdentifierContext,0)


        def ASSIGNMENT(self):
            return self.getToken(CSharpParser.ASSIGNMENT, 0)

        def expression(self):
            return self.getTypedRuleContext(CSharpParser.ExpressionContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_constant_declarator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstant_declarator" ):
                listener.enterConstant_declarator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstant_declarator" ):
                listener.exitConstant_declarator(self)




    def constant_declarator(self):

        localctx = CSharpParser.Constant_declaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 326, self.RULE_constant_declarator)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2023
            self.identifier()
            self.state = 2024
            self.match(CSharpParser.ASSIGNMENT)
            self.state = 2025
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Variable_declaratorsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def variable_declarator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Variable_declaratorContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Variable_declaratorContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.COMMA)
            else:
                return self.getToken(CSharpParser.COMMA, i)

        def getRuleIndex(self):
            return CSharpParser.RULE_variable_declarators

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariable_declarators" ):
                listener.enterVariable_declarators(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariable_declarators" ):
                listener.exitVariable_declarators(self)




    def variable_declarators(self):

        localctx = CSharpParser.Variable_declaratorsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 328, self.RULE_variable_declarators)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2027
            self.variable_declarator()
            self.state = 2032
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==132:
                self.state = 2028
                self.match(CSharpParser.COMMA)
                self.state = 2029
                self.variable_declarator()
                self.state = 2034
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Variable_declaratorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(CSharpParser.IdentifierContext,0)


        def ASSIGNMENT(self):
            return self.getToken(CSharpParser.ASSIGNMENT, 0)

        def variable_initializer(self):
            return self.getTypedRuleContext(CSharpParser.Variable_initializerContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_variable_declarator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariable_declarator" ):
                listener.enterVariable_declarator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariable_declarator" ):
                listener.exitVariable_declarator(self)




    def variable_declarator(self):

        localctx = CSharpParser.Variable_declaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 330, self.RULE_variable_declarator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2035
            self.identifier()
            self.state = 2038
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==145:
                self.state = 2036
                self.match(CSharpParser.ASSIGNMENT)
                self.state = 2037
                self.variable_initializer()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Variable_initializerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(CSharpParser.ExpressionContext,0)


        def array_initializer(self):
            return self.getTypedRuleContext(CSharpParser.Array_initializerContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_variable_initializer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariable_initializer" ):
                listener.enterVariable_initializer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariable_initializer" ):
                listener.exitVariable_initializer(self)




    def variable_initializer(self):

        localctx = CSharpParser.Variable_initializerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 332, self.RULE_variable_initializer)
        try:
            self.state = 2042
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [10, 11, 12, 14, 15, 16, 17, 18, 20, 21, 24, 25, 29, 30, 31, 32, 34, 35, 38, 42, 45, 48, 49, 51, 55, 58, 60, 61, 63, 64, 66, 67, 68, 69, 71, 75, 80, 81, 83, 85, 86, 87, 88, 89, 91, 94, 96, 98, 99, 100, 101, 102, 104, 106, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 129, 135, 136, 137, 140, 142, 143, 144, 151, 152, 171]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2040
                self.expression()
                pass
            elif token in [125]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2041
                self.array_initializer()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Return_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def type_(self):
            return self.getTypedRuleContext(CSharpParser.Type_Context,0)


        def VOID(self):
            return self.getToken(CSharpParser.VOID, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_return_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReturn_type" ):
                listener.enterReturn_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReturn_type" ):
                listener.exitReturn_type(self)




    def return_type(self):

        localctx = CSharpParser.Return_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 334, self.RULE_return_type)
        try:
            self.state = 2046
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,223,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2044
                self.type_()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2045
                self.match(CSharpParser.VOID)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Member_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def namespace_or_type_name(self):
            return self.getTypedRuleContext(CSharpParser.Namespace_or_type_nameContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_member_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMember_name" ):
                listener.enterMember_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMember_name" ):
                listener.exitMember_name(self)




    def member_name(self):

        localctx = CSharpParser.Member_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 336, self.RULE_member_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2048
            self.namespace_or_type_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Method_bodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def block(self):
            return self.getTypedRuleContext(CSharpParser.BlockContext,0)


        def SEMICOLON(self):
            return self.getToken(CSharpParser.SEMICOLON, 0)

        def right_arrow(self):
            return self.getTypedRuleContext(CSharpParser.Right_arrowContext,0)


        def expression(self):
            return self.getTypedRuleContext(CSharpParser.ExpressionContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_method_body

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMethod_body" ):
                listener.enterMethod_body(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMethod_body" ):
                listener.exitMethod_body(self)




    def method_body(self):

        localctx = CSharpParser.Method_bodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 338, self.RULE_method_body)
        try:
            self.state = 2056
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [125]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2050
                self.block()
                pass
            elif token in [134]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2051
                self.match(CSharpParser.SEMICOLON)
                pass
            elif token in [145]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2052
                self.right_arrow()
                self.state = 2053
                self.expression()
                self.state = 2054
                self.match(CSharpParser.SEMICOLON)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Formal_parameter_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def parameter_array(self):
            return self.getTypedRuleContext(CSharpParser.Parameter_arrayContext,0)


        def fixed_parameters(self):
            return self.getTypedRuleContext(CSharpParser.Fixed_parametersContext,0)


        def COMMA(self):
            return self.getToken(CSharpParser.COMMA, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_formal_parameter_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFormal_parameter_list" ):
                listener.enterFormal_parameter_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFormal_parameter_list" ):
                listener.exitFormal_parameter_list(self)




    def formal_parameter_list(self):

        localctx = CSharpParser.Formal_parameter_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 340, self.RULE_formal_parameter_list)
        self._la = 0 # Token type
        try:
            self.state = 2064
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,226,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2058
                self.parameter_array()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2059
                self.fixed_parameters()
                self.state = 2062
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==132:
                    self.state = 2060
                    self.match(CSharpParser.COMMA)
                    self.state = 2061
                    self.parameter_array()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Fixed_parametersContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fixed_parameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Fixed_parameterContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Fixed_parameterContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.COMMA)
            else:
                return self.getToken(CSharpParser.COMMA, i)

        def getRuleIndex(self):
            return CSharpParser.RULE_fixed_parameters

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFixed_parameters" ):
                listener.enterFixed_parameters(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFixed_parameters" ):
                listener.exitFixed_parameters(self)




    def fixed_parameters(self):

        localctx = CSharpParser.Fixed_parametersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 342, self.RULE_fixed_parameters)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2066
            self.fixed_parameter()
            self.state = 2071
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,227,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2067
                    self.match(CSharpParser.COMMA)
                    self.state = 2068
                    self.fixed_parameter() 
                self.state = 2073
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,227,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Fixed_parameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def arg_declaration(self):
            return self.getTypedRuleContext(CSharpParser.Arg_declarationContext,0)


        def attributes(self):
            return self.getTypedRuleContext(CSharpParser.AttributesContext,0)


        def parameter_modifier(self):
            return self.getTypedRuleContext(CSharpParser.Parameter_modifierContext,0)


        def ARGLIST(self):
            return self.getToken(CSharpParser.ARGLIST, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_fixed_parameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFixed_parameter" ):
                listener.enterFixed_parameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFixed_parameter" ):
                listener.exitFixed_parameter(self)




    def fixed_parameter(self):

        localctx = CSharpParser.Fixed_parameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 344, self.RULE_fixed_parameter)
        self._la = 0 # Token type
        try:
            self.state = 2082
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,230,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2075
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==127:
                    self.state = 2074
                    self.attributes()


                self.state = 2078
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 54)) & ~0x3f) == 0 and ((1 << (_la - 54)) & 1099578998785) != 0):
                    self.state = 2077
                    self.parameter_modifier()


                self.state = 2080
                self.arg_declaration()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2081
                self.match(CSharpParser.ARGLIST)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Parameter_modifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REF(self):
            return self.getToken(CSharpParser.REF, 0)

        def OUT(self):
            return self.getToken(CSharpParser.OUT, 0)

        def IN(self):
            return self.getToken(CSharpParser.IN, 0)

        def THIS(self):
            return self.getToken(CSharpParser.THIS, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_parameter_modifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParameter_modifier" ):
                listener.enterParameter_modifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParameter_modifier" ):
                listener.exitParameter_modifier(self)




    def parameter_modifier(self):

        localctx = CSharpParser.Parameter_modifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 346, self.RULE_parameter_modifier)
        try:
            self.state = 2092
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,231,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2084
                self.match(CSharpParser.REF)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2085
                self.match(CSharpParser.OUT)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2086
                self.match(CSharpParser.IN)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2087
                self.match(CSharpParser.REF)
                self.state = 2088
                self.match(CSharpParser.THIS)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 2089
                self.match(CSharpParser.IN)
                self.state = 2090
                self.match(CSharpParser.THIS)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 2091
                self.match(CSharpParser.THIS)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Parameter_arrayContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PARAMS(self):
            return self.getToken(CSharpParser.PARAMS, 0)

        def array_type(self):
            return self.getTypedRuleContext(CSharpParser.Array_typeContext,0)


        def identifier(self):
            return self.getTypedRuleContext(CSharpParser.IdentifierContext,0)


        def attributes(self):
            return self.getTypedRuleContext(CSharpParser.AttributesContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_parameter_array

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParameter_array" ):
                listener.enterParameter_array(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParameter_array" ):
                listener.exitParameter_array(self)




    def parameter_array(self):

        localctx = CSharpParser.Parameter_arrayContext(self, self._ctx, self.state)
        self.enterRule(localctx, 348, self.RULE_parameter_array)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2095
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==127:
                self.state = 2094
                self.attributes()


            self.state = 2097
            self.match(CSharpParser.PARAMS)
            self.state = 2098
            self.array_type()
            self.state = 2099
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Accessor_declarationsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.attrs = None # AttributesContext
            self.mods = None # Accessor_modifierContext

        def GET(self):
            return self.getToken(CSharpParser.GET, 0)

        def accessor_body(self):
            return self.getTypedRuleContext(CSharpParser.Accessor_bodyContext,0)


        def SET(self):
            return self.getToken(CSharpParser.SET, 0)

        def attributes(self):
            return self.getTypedRuleContext(CSharpParser.AttributesContext,0)


        def accessor_modifier(self):
            return self.getTypedRuleContext(CSharpParser.Accessor_modifierContext,0)


        def set_accessor_declaration(self):
            return self.getTypedRuleContext(CSharpParser.Set_accessor_declarationContext,0)


        def get_accessor_declaration(self):
            return self.getTypedRuleContext(CSharpParser.Get_accessor_declarationContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_accessor_declarations

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAccessor_declarations" ):
                listener.enterAccessor_declarations(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAccessor_declarations" ):
                listener.exitAccessor_declarations(self)




    def accessor_declarations(self):

        localctx = CSharpParser.Accessor_declarationsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 350, self.RULE_accessor_declarations)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2102
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==127:
                self.state = 2101
                localctx.attrs = self.attributes()


            self.state = 2105
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 57)) & ~0x3f) == 0 and ((1 << (_la - 57)) & 1572865) != 0):
                self.state = 2104
                localctx.mods = self.accessor_modifier()


            self.state = 2117
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [49]:
                self.state = 2107
                self.match(CSharpParser.GET)
                self.state = 2108
                self.accessor_body()
                self.state = 2110
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==57 or ((((_la - 76)) & ~0x3f) == 0 and ((1 << (_la - 76)) & 2251799813686275) != 0):
                    self.state = 2109
                    self.set_accessor_declaration()


                pass
            elif token in [86]:
                self.state = 2112
                self.match(CSharpParser.SET)
                self.state = 2113
                self.accessor_body()
                self.state = 2115
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==49 or _la==57 or ((((_la - 76)) & ~0x3f) == 0 and ((1 << (_la - 76)) & 2251799813685251) != 0):
                    self.state = 2114
                    self.get_accessor_declaration()


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Get_accessor_declarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GET(self):
            return self.getToken(CSharpParser.GET, 0)

        def accessor_body(self):
            return self.getTypedRuleContext(CSharpParser.Accessor_bodyContext,0)


        def attributes(self):
            return self.getTypedRuleContext(CSharpParser.AttributesContext,0)


        def accessor_modifier(self):
            return self.getTypedRuleContext(CSharpParser.Accessor_modifierContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_get_accessor_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGet_accessor_declaration" ):
                listener.enterGet_accessor_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGet_accessor_declaration" ):
                listener.exitGet_accessor_declaration(self)




    def get_accessor_declaration(self):

        localctx = CSharpParser.Get_accessor_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 352, self.RULE_get_accessor_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2120
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==127:
                self.state = 2119
                self.attributes()


            self.state = 2123
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 57)) & ~0x3f) == 0 and ((1 << (_la - 57)) & 1572865) != 0):
                self.state = 2122
                self.accessor_modifier()


            self.state = 2125
            self.match(CSharpParser.GET)
            self.state = 2126
            self.accessor_body()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Set_accessor_declarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SET(self):
            return self.getToken(CSharpParser.SET, 0)

        def accessor_body(self):
            return self.getTypedRuleContext(CSharpParser.Accessor_bodyContext,0)


        def attributes(self):
            return self.getTypedRuleContext(CSharpParser.AttributesContext,0)


        def accessor_modifier(self):
            return self.getTypedRuleContext(CSharpParser.Accessor_modifierContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_set_accessor_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSet_accessor_declaration" ):
                listener.enterSet_accessor_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSet_accessor_declaration" ):
                listener.exitSet_accessor_declaration(self)




    def set_accessor_declaration(self):

        localctx = CSharpParser.Set_accessor_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 354, self.RULE_set_accessor_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2129
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==127:
                self.state = 2128
                self.attributes()


            self.state = 2132
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 57)) & ~0x3f) == 0 and ((1 << (_la - 57)) & 1572865) != 0):
                self.state = 2131
                self.accessor_modifier()


            self.state = 2134
            self.match(CSharpParser.SET)
            self.state = 2135
            self.accessor_body()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Accessor_modifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PROTECTED(self):
            return self.getToken(CSharpParser.PROTECTED, 0)

        def INTERNAL(self):
            return self.getToken(CSharpParser.INTERNAL, 0)

        def PRIVATE(self):
            return self.getToken(CSharpParser.PRIVATE, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_accessor_modifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAccessor_modifier" ):
                listener.enterAccessor_modifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAccessor_modifier" ):
                listener.exitAccessor_modifier(self)




    def accessor_modifier(self):

        localctx = CSharpParser.Accessor_modifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 356, self.RULE_accessor_modifier)
        try:
            self.state = 2148
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,242,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2137
                self.match(CSharpParser.PROTECTED)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2138
                self.match(CSharpParser.INTERNAL)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2139
                self.match(CSharpParser.PRIVATE)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2140
                self.match(CSharpParser.PROTECTED)
                self.state = 2141
                self.match(CSharpParser.INTERNAL)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 2142
                self.match(CSharpParser.INTERNAL)
                self.state = 2143
                self.match(CSharpParser.PROTECTED)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 2144
                self.match(CSharpParser.PROTECTED)
                self.state = 2145
                self.match(CSharpParser.PRIVATE)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 2146
                self.match(CSharpParser.PRIVATE)
                self.state = 2147
                self.match(CSharpParser.PROTECTED)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Accessor_bodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def block(self):
            return self.getTypedRuleContext(CSharpParser.BlockContext,0)


        def right_arrow(self):
            return self.getTypedRuleContext(CSharpParser.Right_arrowContext,0)


        def expression(self):
            return self.getTypedRuleContext(CSharpParser.ExpressionContext,0)


        def SEMICOLON(self):
            return self.getToken(CSharpParser.SEMICOLON, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_accessor_body

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAccessor_body" ):
                listener.enterAccessor_body(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAccessor_body" ):
                listener.exitAccessor_body(self)




    def accessor_body(self):

        localctx = CSharpParser.Accessor_bodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 358, self.RULE_accessor_body)
        try:
            self.state = 2156
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [125]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2150
                self.block()
                pass
            elif token in [145]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2151
                self.right_arrow()
                self.state = 2152
                self.expression()
                self.state = 2153
                self.match(CSharpParser.SEMICOLON)
                pass
            elif token in [134]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2155
                self.match(CSharpParser.SEMICOLON)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Event_accessor_declarationsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ADD(self):
            return self.getToken(CSharpParser.ADD, 0)

        def block(self):
            return self.getTypedRuleContext(CSharpParser.BlockContext,0)


        def remove_accessor_declaration(self):
            return self.getTypedRuleContext(CSharpParser.Remove_accessor_declarationContext,0)


        def REMOVE(self):
            return self.getToken(CSharpParser.REMOVE, 0)

        def add_accessor_declaration(self):
            return self.getTypedRuleContext(CSharpParser.Add_accessor_declarationContext,0)


        def attributes(self):
            return self.getTypedRuleContext(CSharpParser.AttributesContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_event_accessor_declarations

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEvent_accessor_declarations" ):
                listener.enterEvent_accessor_declarations(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEvent_accessor_declarations" ):
                listener.exitEvent_accessor_declarations(self)




    def event_accessor_declarations(self):

        localctx = CSharpParser.Event_accessor_declarationsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 360, self.RULE_event_accessor_declarations)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2159
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==127:
                self.state = 2158
                self.attributes()


            self.state = 2169
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [10]:
                self.state = 2161
                self.match(CSharpParser.ADD)
                self.state = 2162
                self.block()
                self.state = 2163
                self.remove_accessor_declaration()
                pass
            elif token in [81]:
                self.state = 2165
                self.match(CSharpParser.REMOVE)
                self.state = 2166
                self.block()
                self.state = 2167
                self.add_accessor_declaration()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Add_accessor_declarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ADD(self):
            return self.getToken(CSharpParser.ADD, 0)

        def block(self):
            return self.getTypedRuleContext(CSharpParser.BlockContext,0)


        def attributes(self):
            return self.getTypedRuleContext(CSharpParser.AttributesContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_add_accessor_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAdd_accessor_declaration" ):
                listener.enterAdd_accessor_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAdd_accessor_declaration" ):
                listener.exitAdd_accessor_declaration(self)




    def add_accessor_declaration(self):

        localctx = CSharpParser.Add_accessor_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 362, self.RULE_add_accessor_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2172
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==127:
                self.state = 2171
                self.attributes()


            self.state = 2174
            self.match(CSharpParser.ADD)
            self.state = 2175
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Remove_accessor_declarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REMOVE(self):
            return self.getToken(CSharpParser.REMOVE, 0)

        def block(self):
            return self.getTypedRuleContext(CSharpParser.BlockContext,0)


        def attributes(self):
            return self.getTypedRuleContext(CSharpParser.AttributesContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_remove_accessor_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRemove_accessor_declaration" ):
                listener.enterRemove_accessor_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRemove_accessor_declaration" ):
                listener.exitRemove_accessor_declaration(self)




    def remove_accessor_declaration(self):

        localctx = CSharpParser.Remove_accessor_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 364, self.RULE_remove_accessor_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2178
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==127:
                self.state = 2177
                self.attributes()


            self.state = 2180
            self.match(CSharpParser.REMOVE)
            self.state = 2181
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Overloadable_operatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PLUS(self):
            return self.getToken(CSharpParser.PLUS, 0)

        def MINUS(self):
            return self.getToken(CSharpParser.MINUS, 0)

        def BANG(self):
            return self.getToken(CSharpParser.BANG, 0)

        def TILDE(self):
            return self.getToken(CSharpParser.TILDE, 0)

        def OP_INC(self):
            return self.getToken(CSharpParser.OP_INC, 0)

        def OP_DEC(self):
            return self.getToken(CSharpParser.OP_DEC, 0)

        def TRUE(self):
            return self.getToken(CSharpParser.TRUE, 0)

        def FALSE(self):
            return self.getToken(CSharpParser.FALSE, 0)

        def STAR(self):
            return self.getToken(CSharpParser.STAR, 0)

        def DIV(self):
            return self.getToken(CSharpParser.DIV, 0)

        def PERCENT(self):
            return self.getToken(CSharpParser.PERCENT, 0)

        def AMP(self):
            return self.getToken(CSharpParser.AMP, 0)

        def BITWISE_OR(self):
            return self.getToken(CSharpParser.BITWISE_OR, 0)

        def CARET(self):
            return self.getToken(CSharpParser.CARET, 0)

        def OP_LEFT_SHIFT(self):
            return self.getToken(CSharpParser.OP_LEFT_SHIFT, 0)

        def right_shift(self):
            return self.getTypedRuleContext(CSharpParser.Right_shiftContext,0)


        def OP_EQ(self):
            return self.getToken(CSharpParser.OP_EQ, 0)

        def OP_NE(self):
            return self.getToken(CSharpParser.OP_NE, 0)

        def GT(self):
            return self.getToken(CSharpParser.GT, 0)

        def LT(self):
            return self.getToken(CSharpParser.LT, 0)

        def OP_GE(self):
            return self.getToken(CSharpParser.OP_GE, 0)

        def OP_LE(self):
            return self.getToken(CSharpParser.OP_LE, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_overloadable_operator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOverloadable_operator" ):
                listener.enterOverloadable_operator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOverloadable_operator" ):
                listener.exitOverloadable_operator(self)




    def overloadable_operator(self):

        localctx = CSharpParser.Overloadable_operatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 366, self.RULE_overloadable_operator)
        try:
            self.state = 2205
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,248,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2183
                self.match(CSharpParser.PLUS)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2184
                self.match(CSharpParser.MINUS)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2185
                self.match(CSharpParser.BANG)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2186
                self.match(CSharpParser.TILDE)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 2187
                self.match(CSharpParser.OP_INC)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 2188
                self.match(CSharpParser.OP_DEC)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 2189
                self.match(CSharpParser.TRUE)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 2190
                self.match(CSharpParser.FALSE)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 2191
                self.match(CSharpParser.STAR)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 2192
                self.match(CSharpParser.DIV)
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 2193
                self.match(CSharpParser.PERCENT)
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 2194
                self.match(CSharpParser.AMP)
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 2195
                self.match(CSharpParser.BITWISE_OR)
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 2196
                self.match(CSharpParser.CARET)
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 2197
                self.match(CSharpParser.OP_LEFT_SHIFT)
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 2198
                self.right_shift()
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 2199
                self.match(CSharpParser.OP_EQ)
                pass

            elif la_ == 18:
                self.enterOuterAlt(localctx, 18)
                self.state = 2200
                self.match(CSharpParser.OP_NE)
                pass

            elif la_ == 19:
                self.enterOuterAlt(localctx, 19)
                self.state = 2201
                self.match(CSharpParser.GT)
                pass

            elif la_ == 20:
                self.enterOuterAlt(localctx, 20)
                self.state = 2202
                self.match(CSharpParser.LT)
                pass

            elif la_ == 21:
                self.enterOuterAlt(localctx, 21)
                self.state = 2203
                self.match(CSharpParser.OP_GE)
                pass

            elif la_ == 22:
                self.enterOuterAlt(localctx, 22)
                self.state = 2204
                self.match(CSharpParser.OP_LE)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Conversion_operator_declaratorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPERATOR(self):
            return self.getToken(CSharpParser.OPERATOR, 0)

        def type_(self):
            return self.getTypedRuleContext(CSharpParser.Type_Context,0)


        def OPEN_PARENS(self):
            return self.getToken(CSharpParser.OPEN_PARENS, 0)

        def arg_declaration(self):
            return self.getTypedRuleContext(CSharpParser.Arg_declarationContext,0)


        def CLOSE_PARENS(self):
            return self.getToken(CSharpParser.CLOSE_PARENS, 0)

        def IMPLICIT(self):
            return self.getToken(CSharpParser.IMPLICIT, 0)

        def EXPLICIT(self):
            return self.getToken(CSharpParser.EXPLICIT, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_conversion_operator_declarator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConversion_operator_declarator" ):
                listener.enterConversion_operator_declarator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConversion_operator_declarator" ):
                listener.exitConversion_operator_declarator(self)




    def conversion_operator_declarator(self):

        localctx = CSharpParser.Conversion_operator_declaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 368, self.RULE_conversion_operator_declarator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2207
            _la = self._input.LA(1)
            if not(_la==40 or _la==53):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 2208
            self.match(CSharpParser.OPERATOR)
            self.state = 2209
            self.type_()
            self.state = 2210
            self.match(CSharpParser.OPEN_PARENS)
            self.state = 2211
            self.arg_declaration()
            self.state = 2212
            self.match(CSharpParser.CLOSE_PARENS)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Constructor_initializerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COLON(self):
            return self.getToken(CSharpParser.COLON, 0)

        def OPEN_PARENS(self):
            return self.getToken(CSharpParser.OPEN_PARENS, 0)

        def CLOSE_PARENS(self):
            return self.getToken(CSharpParser.CLOSE_PARENS, 0)

        def BASE(self):
            return self.getToken(CSharpParser.BASE, 0)

        def THIS(self):
            return self.getToken(CSharpParser.THIS, 0)

        def argument_list(self):
            return self.getTypedRuleContext(CSharpParser.Argument_listContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_constructor_initializer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstructor_initializer" ):
                listener.enterConstructor_initializer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstructor_initializer" ):
                listener.exitConstructor_initializer(self)




    def constructor_initializer(self):

        localctx = CSharpParser.Constructor_initializerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 370, self.RULE_constructor_initializer)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2214
            self.match(CSharpParser.COLON)
            self.state = 2215
            _la = self._input.LA(1)
            if not(_la==17 or _la==94):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 2216
            self.match(CSharpParser.OPEN_PARENS)
            self.state = 2218
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & -5419197809667089408) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 2305514793381595581) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & 4398059153857) != 0):
                self.state = 2217
                self.argument_list()


            self.state = 2220
            self.match(CSharpParser.CLOSE_PARENS)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def block(self):
            return self.getTypedRuleContext(CSharpParser.BlockContext,0)


        def SEMICOLON(self):
            return self.getToken(CSharpParser.SEMICOLON, 0)

        def right_arrow(self):
            return self.getTypedRuleContext(CSharpParser.Right_arrowContext,0)


        def expression(self):
            return self.getTypedRuleContext(CSharpParser.ExpressionContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_body

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBody" ):
                listener.enterBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBody" ):
                listener.exitBody(self)




    def body(self):

        localctx = CSharpParser.BodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 372, self.RULE_body)
        try:
            self.state = 2228
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [125]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2222
                self.block()
                pass
            elif token in [134]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2223
                self.match(CSharpParser.SEMICOLON)
                pass
            elif token in [145]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2224
                self.right_arrow()
                self.state = 2225
                self.expression()
                self.state = 2226
                self.match(CSharpParser.SEMICOLON)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Struct_interfacesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COLON(self):
            return self.getToken(CSharpParser.COLON, 0)

        def interface_type_list(self):
            return self.getTypedRuleContext(CSharpParser.Interface_type_listContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_struct_interfaces

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStruct_interfaces" ):
                listener.enterStruct_interfaces(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStruct_interfaces" ):
                listener.exitStruct_interfaces(self)




    def struct_interfaces(self):

        localctx = CSharpParser.Struct_interfacesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 374, self.RULE_struct_interfaces)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2230
            self.match(CSharpParser.COLON)
            self.state = 2231
            self.interface_type_list()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Struct_bodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_BRACE(self):
            return self.getToken(CSharpParser.OPEN_BRACE, 0)

        def CLOSE_BRACE(self):
            return self.getToken(CSharpParser.CLOSE_BRACE, 0)

        def struct_member_declaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Struct_member_declarationContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Struct_member_declarationContext,i)


        def getRuleIndex(self):
            return CSharpParser.RULE_struct_body

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStruct_body" ):
                listener.enterStruct_body(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStruct_body" ):
                listener.exitStruct_body(self)




    def struct_body(self):

        localctx = CSharpParser.Struct_bodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 376, self.RULE_struct_body)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2233
            self.match(CSharpParser.OPEN_BRACE)
            self.state = 2237
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 9)) & ~0x3f) == 0 and ((1 << (_la - 9)) & 6547061340561119983) != 0) or ((((_la - 73)) & ~0x3f) == 0 and ((1 << (_la - 73)) & 90075836208545277) != 0):
                self.state = 2234
                self.struct_member_declaration()
                self.state = 2239
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2240
            self.match(CSharpParser.CLOSE_BRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Struct_member_declarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def common_member_declaration(self):
            return self.getTypedRuleContext(CSharpParser.Common_member_declarationContext,0)


        def FIXED(self):
            return self.getToken(CSharpParser.FIXED, 0)

        def type_(self):
            return self.getTypedRuleContext(CSharpParser.Type_Context,0)


        def SEMICOLON(self):
            return self.getToken(CSharpParser.SEMICOLON, 0)

        def attributes(self):
            return self.getTypedRuleContext(CSharpParser.AttributesContext,0)


        def all_member_modifiers(self):
            return self.getTypedRuleContext(CSharpParser.All_member_modifiersContext,0)


        def fixed_size_buffer_declarator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Fixed_size_buffer_declaratorContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Fixed_size_buffer_declaratorContext,i)


        def getRuleIndex(self):
            return CSharpParser.RULE_struct_member_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStruct_member_declaration" ):
                listener.enterStruct_member_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStruct_member_declaration" ):
                listener.exitStruct_member_declaration(self)




    def struct_member_declaration(self):

        localctx = CSharpParser.Struct_member_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 378, self.RULE_struct_member_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2243
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==127:
                self.state = 2242
                self.attributes()


            self.state = 2246
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,253,self._ctx)
            if la_ == 1:
                self.state = 2245
                self.all_member_modifiers()


            self.state = 2258
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [9, 10, 11, 12, 14, 15, 16, 18, 20, 21, 24, 26, 27, 29, 31, 32, 34, 35, 37, 38, 39, 40, 45, 48, 49, 51, 53, 55, 56, 57, 58, 60, 61, 63, 64, 66, 68, 69, 71, 75, 76, 77, 78, 79, 80, 81, 83, 84, 85, 86, 87, 90, 91, 92, 99, 100, 102, 103, 104, 106, 108, 110, 111, 113, 114, 129]:
                self.state = 2248
                self.common_member_declaration()
                pass
            elif token in [44]:
                self.state = 2249
                self.match(CSharpParser.FIXED)
                self.state = 2250
                self.type_()
                self.state = 2252 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 2251
                    self.fixed_size_buffer_declarator()
                    self.state = 2254 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & 3750091428249852928) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 1904629023639713) != 0)):
                        break

                self.state = 2256
                self.match(CSharpParser.SEMICOLON)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Array_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def base_type(self):
            return self.getTypedRuleContext(CSharpParser.Base_typeContext,0)


        def rank_specifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Rank_specifierContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Rank_specifierContext,i)


        def STAR(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.STAR)
            else:
                return self.getToken(CSharpParser.STAR, i)

        def INTERR(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.INTERR)
            else:
                return self.getToken(CSharpParser.INTERR, i)

        def getRuleIndex(self):
            return CSharpParser.RULE_array_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArray_type" ):
                listener.enterArray_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArray_type" ):
                listener.exitArray_type(self)




    def array_type(self):

        localctx = CSharpParser.Array_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 380, self.RULE_array_type)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2260
            self.base_type()
            self.state = 2268 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 2264
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==137 or _la==148:
                    self.state = 2261
                    _la = self._input.LA(1)
                    if not(_la==137 or _la==148):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 2266
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2267
                self.rank_specifier()
                self.state = 2270 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (((((_la - 127)) & ~0x3f) == 0 and ((1 << (_la - 127)) & 2098177) != 0)):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Rank_specifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_BRACKET(self):
            return self.getToken(CSharpParser.OPEN_BRACKET, 0)

        def CLOSE_BRACKET(self):
            return self.getToken(CSharpParser.CLOSE_BRACKET, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.COMMA)
            else:
                return self.getToken(CSharpParser.COMMA, i)

        def getRuleIndex(self):
            return CSharpParser.RULE_rank_specifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRank_specifier" ):
                listener.enterRank_specifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRank_specifier" ):
                listener.exitRank_specifier(self)




    def rank_specifier(self):

        localctx = CSharpParser.Rank_specifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 382, self.RULE_rank_specifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2272
            self.match(CSharpParser.OPEN_BRACKET)
            self.state = 2276
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==132:
                self.state = 2273
                self.match(CSharpParser.COMMA)
                self.state = 2278
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2279
            self.match(CSharpParser.CLOSE_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Array_initializerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_BRACE(self):
            return self.getToken(CSharpParser.OPEN_BRACE, 0)

        def CLOSE_BRACE(self):
            return self.getToken(CSharpParser.CLOSE_BRACE, 0)

        def variable_initializer(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Variable_initializerContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Variable_initializerContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.COMMA)
            else:
                return self.getToken(CSharpParser.COMMA, i)

        def getRuleIndex(self):
            return CSharpParser.RULE_array_initializer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArray_initializer" ):
                listener.enterArray_initializer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArray_initializer" ):
                listener.exitArray_initializer(self)




    def array_initializer(self):

        localctx = CSharpParser.Array_initializerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 384, self.RULE_array_initializer)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2281
            self.match(CSharpParser.OPEN_BRACE)
            self.state = 2293
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & -5437212208176571392) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 4611340210409244861) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & 4398059153857) != 0):
                self.state = 2282
                self.variable_initializer()
                self.state = 2287
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,259,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2283
                        self.match(CSharpParser.COMMA)
                        self.state = 2284
                        self.variable_initializer() 
                    self.state = 2289
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,259,self._ctx)

                self.state = 2291
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==132:
                    self.state = 2290
                    self.match(CSharpParser.COMMA)




            self.state = 2295
            self.match(CSharpParser.CLOSE_BRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Variant_type_parameter_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LT(self):
            return self.getToken(CSharpParser.LT, 0)

        def variant_type_parameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Variant_type_parameterContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Variant_type_parameterContext,i)


        def GT(self):
            return self.getToken(CSharpParser.GT, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.COMMA)
            else:
                return self.getToken(CSharpParser.COMMA, i)

        def getRuleIndex(self):
            return CSharpParser.RULE_variant_type_parameter_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariant_type_parameter_list" ):
                listener.enterVariant_type_parameter_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariant_type_parameter_list" ):
                listener.exitVariant_type_parameter_list(self)




    def variant_type_parameter_list(self):

        localctx = CSharpParser.Variant_type_parameter_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 386, self.RULE_variant_type_parameter_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2297
            self.match(CSharpParser.LT)
            self.state = 2298
            self.variant_type_parameter()
            self.state = 2303
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==132:
                self.state = 2299
                self.match(CSharpParser.COMMA)
                self.state = 2300
                self.variant_type_parameter()
                self.state = 2305
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2306
            self.match(CSharpParser.GT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Variant_type_parameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(CSharpParser.IdentifierContext,0)


        def attributes(self):
            return self.getTypedRuleContext(CSharpParser.AttributesContext,0)


        def variance_annotation(self):
            return self.getTypedRuleContext(CSharpParser.Variance_annotationContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_variant_type_parameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariant_type_parameter" ):
                listener.enterVariant_type_parameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariant_type_parameter" ):
                listener.exitVariant_type_parameter(self)




    def variant_type_parameter(self):

        localctx = CSharpParser.Variant_type_parameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 388, self.RULE_variant_type_parameter)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2309
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==127:
                self.state = 2308
                self.attributes()


            self.state = 2312
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==54 or _la==72:
                self.state = 2311
                self.variance_annotation()


            self.state = 2314
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Variance_annotationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IN(self):
            return self.getToken(CSharpParser.IN, 0)

        def OUT(self):
            return self.getToken(CSharpParser.OUT, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_variance_annotation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariance_annotation" ):
                listener.enterVariance_annotation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariance_annotation" ):
                listener.exitVariance_annotation(self)




    def variance_annotation(self):

        localctx = CSharpParser.Variance_annotationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 390, self.RULE_variance_annotation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2316
            _la = self._input.LA(1)
            if not(_la==54 or _la==72):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Interface_baseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COLON(self):
            return self.getToken(CSharpParser.COLON, 0)

        def interface_type_list(self):
            return self.getTypedRuleContext(CSharpParser.Interface_type_listContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_interface_base

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterface_base" ):
                listener.enterInterface_base(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterface_base" ):
                listener.exitInterface_base(self)




    def interface_base(self):

        localctx = CSharpParser.Interface_baseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 392, self.RULE_interface_base)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2318
            self.match(CSharpParser.COLON)
            self.state = 2319
            self.interface_type_list()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Interface_bodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_BRACE(self):
            return self.getToken(CSharpParser.OPEN_BRACE, 0)

        def CLOSE_BRACE(self):
            return self.getToken(CSharpParser.CLOSE_BRACE, 0)

        def interface_member_declaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Interface_member_declarationContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Interface_member_declarationContext,i)


        def getRuleIndex(self):
            return CSharpParser.RULE_interface_body

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterface_body" ):
                listener.enterInterface_body(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterface_body" ):
                listener.exitInterface_body(self)




    def interface_body(self):

        localctx = CSharpParser.Interface_bodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 394, self.RULE_interface_body)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2321
            self.match(CSharpParser.OPEN_BRACE)
            self.state = 2325
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 10)) & ~0x3f) == 0 and ((1 << (_la - 10)) & 3273310747417398647) != 0) or ((((_la - 75)) & ~0x3f) == 0 and ((1 << (_la - 75)) & 22518937577135473) != 0):
                self.state = 2322
                self.interface_member_declaration()
                self.state = 2327
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2328
            self.match(CSharpParser.CLOSE_BRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Interface_member_declarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def type_(self):
            return self.getTypedRuleContext(CSharpParser.Type_Context,0)


        def VOID(self):
            return self.getToken(CSharpParser.VOID, 0)

        def identifier(self):
            return self.getTypedRuleContext(CSharpParser.IdentifierContext,0)


        def OPEN_PARENS(self):
            return self.getToken(CSharpParser.OPEN_PARENS, 0)

        def CLOSE_PARENS(self):
            return self.getToken(CSharpParser.CLOSE_PARENS, 0)

        def SEMICOLON(self):
            return self.getToken(CSharpParser.SEMICOLON, 0)

        def EVENT(self):
            return self.getToken(CSharpParser.EVENT, 0)

        def attributes(self):
            return self.getTypedRuleContext(CSharpParser.AttributesContext,0)


        def NEW(self):
            return self.getToken(CSharpParser.NEW, 0)

        def OPEN_BRACE(self):
            return self.getToken(CSharpParser.OPEN_BRACE, 0)

        def interface_accessors(self):
            return self.getTypedRuleContext(CSharpParser.Interface_accessorsContext,0)


        def CLOSE_BRACE(self):
            return self.getToken(CSharpParser.CLOSE_BRACE, 0)

        def THIS(self):
            return self.getToken(CSharpParser.THIS, 0)

        def OPEN_BRACKET(self):
            return self.getToken(CSharpParser.OPEN_BRACKET, 0)

        def formal_parameter_list(self):
            return self.getTypedRuleContext(CSharpParser.Formal_parameter_listContext,0)


        def CLOSE_BRACKET(self):
            return self.getToken(CSharpParser.CLOSE_BRACKET, 0)

        def UNSAFE(self):
            return self.getToken(CSharpParser.UNSAFE, 0)

        def REF(self):
            return self.getToken(CSharpParser.REF, 0)

        def READONLY(self):
            return self.getToken(CSharpParser.READONLY, 0)

        def type_parameter_list(self):
            return self.getTypedRuleContext(CSharpParser.Type_parameter_listContext,0)


        def type_parameter_constraints_clauses(self):
            return self.getTypedRuleContext(CSharpParser.Type_parameter_constraints_clausesContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_interface_member_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterface_member_declaration" ):
                listener.enterInterface_member_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterface_member_declaration" ):
                listener.exitInterface_member_declaration(self)




    def interface_member_declaration(self):

        localctx = CSharpParser.Interface_member_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 396, self.RULE_interface_member_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2331
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==127:
                self.state = 2330
                self.attributes()


            self.state = 2334
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==66:
                self.state = 2333
                self.match(CSharpParser.NEW)


            self.state = 2399
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,278,self._ctx)
            if la_ == 1:
                self.state = 2337
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==103:
                    self.state = 2336
                    self.match(CSharpParser.UNSAFE)


                self.state = 2344
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,269,self._ctx)
                if la_ == 1:
                    self.state = 2339
                    self.match(CSharpParser.REF)

                elif la_ == 2:
                    self.state = 2340
                    self.match(CSharpParser.REF)
                    self.state = 2341
                    self.match(CSharpParser.READONLY)

                elif la_ == 3:
                    self.state = 2342
                    self.match(CSharpParser.READONLY)
                    self.state = 2343
                    self.match(CSharpParser.REF)


                self.state = 2346
                self.type_()
                self.state = 2374
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,273,self._ctx)
                if la_ == 1:
                    self.state = 2347
                    self.identifier()
                    self.state = 2349
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==146:
                        self.state = 2348
                        self.type_parameter_list()


                    self.state = 2351
                    self.match(CSharpParser.OPEN_PARENS)
                    self.state = 2353
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if ((((_la - 10)) & ~0x3f) == 0 and ((1 << (_la - 10)) & 7812956763456032119) != 0) or ((((_la - 74)) & ~0x3f) == 0 and ((1 << (_la - 74)) & 45037874618448579) != 0):
                        self.state = 2352
                        self.formal_parameter_list()


                    self.state = 2355
                    self.match(CSharpParser.CLOSE_PARENS)
                    self.state = 2357
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==111:
                        self.state = 2356
                        self.type_parameter_constraints_clauses()


                    self.state = 2359
                    self.match(CSharpParser.SEMICOLON)
                    pass

                elif la_ == 2:
                    self.state = 2361
                    self.identifier()
                    self.state = 2362
                    self.match(CSharpParser.OPEN_BRACE)
                    self.state = 2363
                    self.interface_accessors()
                    self.state = 2364
                    self.match(CSharpParser.CLOSE_BRACE)
                    pass

                elif la_ == 3:
                    self.state = 2366
                    self.match(CSharpParser.THIS)
                    self.state = 2367
                    self.match(CSharpParser.OPEN_BRACKET)
                    self.state = 2368
                    self.formal_parameter_list()
                    self.state = 2369
                    self.match(CSharpParser.CLOSE_BRACKET)
                    self.state = 2370
                    self.match(CSharpParser.OPEN_BRACE)
                    self.state = 2371
                    self.interface_accessors()
                    self.state = 2372
                    self.match(CSharpParser.CLOSE_BRACE)
                    pass


                pass

            elif la_ == 2:
                self.state = 2377
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==103:
                    self.state = 2376
                    self.match(CSharpParser.UNSAFE)


                self.state = 2379
                self.match(CSharpParser.VOID)
                self.state = 2380
                self.identifier()
                self.state = 2382
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==146:
                    self.state = 2381
                    self.type_parameter_list()


                self.state = 2384
                self.match(CSharpParser.OPEN_PARENS)
                self.state = 2386
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 10)) & ~0x3f) == 0 and ((1 << (_la - 10)) & 7812956763456032119) != 0) or ((((_la - 74)) & ~0x3f) == 0 and ((1 << (_la - 74)) & 45037874618448579) != 0):
                    self.state = 2385
                    self.formal_parameter_list()


                self.state = 2388
                self.match(CSharpParser.CLOSE_PARENS)
                self.state = 2390
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==111:
                    self.state = 2389
                    self.type_parameter_constraints_clauses()


                self.state = 2392
                self.match(CSharpParser.SEMICOLON)
                pass

            elif la_ == 3:
                self.state = 2394
                self.match(CSharpParser.EVENT)
                self.state = 2395
                self.type_()
                self.state = 2396
                self.identifier()
                self.state = 2397
                self.match(CSharpParser.SEMICOLON)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Interface_accessorsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GET(self):
            return self.getToken(CSharpParser.GET, 0)

        def SEMICOLON(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.SEMICOLON)
            else:
                return self.getToken(CSharpParser.SEMICOLON, i)

        def SET(self):
            return self.getToken(CSharpParser.SET, 0)

        def attributes(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.AttributesContext)
            else:
                return self.getTypedRuleContext(CSharpParser.AttributesContext,i)


        def getRuleIndex(self):
            return CSharpParser.RULE_interface_accessors

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterface_accessors" ):
                listener.enterInterface_accessors(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterface_accessors" ):
                listener.exitInterface_accessors(self)




    def interface_accessors(self):

        localctx = CSharpParser.Interface_accessorsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 398, self.RULE_interface_accessors)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2402
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==127:
                self.state = 2401
                self.attributes()


            self.state = 2422
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [49]:
                self.state = 2404
                self.match(CSharpParser.GET)
                self.state = 2405
                self.match(CSharpParser.SEMICOLON)
                self.state = 2411
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==86 or _la==127:
                    self.state = 2407
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==127:
                        self.state = 2406
                        self.attributes()


                    self.state = 2409
                    self.match(CSharpParser.SET)
                    self.state = 2410
                    self.match(CSharpParser.SEMICOLON)


                pass
            elif token in [86]:
                self.state = 2413
                self.match(CSharpParser.SET)
                self.state = 2414
                self.match(CSharpParser.SEMICOLON)
                self.state = 2420
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==49 or _la==127:
                    self.state = 2416
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==127:
                        self.state = 2415
                        self.attributes()


                    self.state = 2418
                    self.match(CSharpParser.GET)
                    self.state = 2419
                    self.match(CSharpParser.SEMICOLON)


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Enum_baseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COLON(self):
            return self.getToken(CSharpParser.COLON, 0)

        def type_(self):
            return self.getTypedRuleContext(CSharpParser.Type_Context,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_enum_base

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnum_base" ):
                listener.enterEnum_base(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnum_base" ):
                listener.exitEnum_base(self)




    def enum_base(self):

        localctx = CSharpParser.Enum_baseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 400, self.RULE_enum_base)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2424
            self.match(CSharpParser.COLON)
            self.state = 2425
            self.type_()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Enum_bodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_BRACE(self):
            return self.getToken(CSharpParser.OPEN_BRACE, 0)

        def CLOSE_BRACE(self):
            return self.getToken(CSharpParser.CLOSE_BRACE, 0)

        def enum_member_declaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Enum_member_declarationContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Enum_member_declarationContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.COMMA)
            else:
                return self.getToken(CSharpParser.COMMA, i)

        def getRuleIndex(self):
            return CSharpParser.RULE_enum_body

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnum_body" ):
                listener.enterEnum_body(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnum_body" ):
                listener.exitEnum_body(self)




    def enum_body(self):

        localctx = CSharpParser.Enum_bodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 402, self.RULE_enum_body)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2427
            self.match(CSharpParser.OPEN_BRACE)
            self.state = 2439
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 3750091428249852928) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -9221467407831136095) != 0):
                self.state = 2428
                self.enum_member_declaration()
                self.state = 2433
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,285,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2429
                        self.match(CSharpParser.COMMA)
                        self.state = 2430
                        self.enum_member_declaration() 
                    self.state = 2435
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,285,self._ctx)

                self.state = 2437
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==132:
                    self.state = 2436
                    self.match(CSharpParser.COMMA)




            self.state = 2441
            self.match(CSharpParser.CLOSE_BRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Enum_member_declarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(CSharpParser.IdentifierContext,0)


        def attributes(self):
            return self.getTypedRuleContext(CSharpParser.AttributesContext,0)


        def ASSIGNMENT(self):
            return self.getToken(CSharpParser.ASSIGNMENT, 0)

        def expression(self):
            return self.getTypedRuleContext(CSharpParser.ExpressionContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_enum_member_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnum_member_declaration" ):
                listener.enterEnum_member_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnum_member_declaration" ):
                listener.exitEnum_member_declaration(self)




    def enum_member_declaration(self):

        localctx = CSharpParser.Enum_member_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 404, self.RULE_enum_member_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2444
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==127:
                self.state = 2443
                self.attributes()


            self.state = 2446
            self.identifier()
            self.state = 2449
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==145:
                self.state = 2447
                self.match(CSharpParser.ASSIGNMENT)
                self.state = 2448
                self.expression()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Global_attribute_sectionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_BRACKET(self):
            return self.getToken(CSharpParser.OPEN_BRACKET, 0)

        def global_attribute_target(self):
            return self.getTypedRuleContext(CSharpParser.Global_attribute_targetContext,0)


        def COLON(self):
            return self.getToken(CSharpParser.COLON, 0)

        def attribute_list(self):
            return self.getTypedRuleContext(CSharpParser.Attribute_listContext,0)


        def CLOSE_BRACKET(self):
            return self.getToken(CSharpParser.CLOSE_BRACKET, 0)

        def COMMA(self):
            return self.getToken(CSharpParser.COMMA, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_global_attribute_section

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGlobal_attribute_section" ):
                listener.enterGlobal_attribute_section(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGlobal_attribute_section" ):
                listener.exitGlobal_attribute_section(self)




    def global_attribute_section(self):

        localctx = CSharpParser.Global_attribute_sectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 406, self.RULE_global_attribute_section)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2451
            self.match(CSharpParser.OPEN_BRACKET)
            self.state = 2452
            self.global_attribute_target()
            self.state = 2453
            self.match(CSharpParser.COLON)
            self.state = 2454
            self.attribute_list()
            self.state = 2456
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==132:
                self.state = 2455
                self.match(CSharpParser.COMMA)


            self.state = 2458
            self.match(CSharpParser.CLOSE_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Global_attribute_targetContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def keyword(self):
            return self.getTypedRuleContext(CSharpParser.KeywordContext,0)


        def identifier(self):
            return self.getTypedRuleContext(CSharpParser.IdentifierContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_global_attribute_target

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGlobal_attribute_target" ):
                listener.enterGlobal_attribute_target(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGlobal_attribute_target" ):
                listener.exitGlobal_attribute_target(self)




    def global_attribute_target(self):

        localctx = CSharpParser.Global_attribute_targetContext(self, self._ctx, self.state)
        self.enterRule(localctx, 408, self.RULE_global_attribute_target)
        try:
            self.state = 2462
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,291,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2460
                self.keyword()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2461
                self.identifier()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AttributesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def attribute_section(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Attribute_sectionContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Attribute_sectionContext,i)


        def getRuleIndex(self):
            return CSharpParser.RULE_attributes

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttributes" ):
                listener.enterAttributes(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttributes" ):
                listener.exitAttributes(self)




    def attributes(self):

        localctx = CSharpParser.AttributesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 410, self.RULE_attributes)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2465 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 2464
                self.attribute_section()
                self.state = 2467 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==127):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Attribute_sectionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_BRACKET(self):
            return self.getToken(CSharpParser.OPEN_BRACKET, 0)

        def attribute_list(self):
            return self.getTypedRuleContext(CSharpParser.Attribute_listContext,0)


        def CLOSE_BRACKET(self):
            return self.getToken(CSharpParser.CLOSE_BRACKET, 0)

        def attribute_target(self):
            return self.getTypedRuleContext(CSharpParser.Attribute_targetContext,0)


        def COLON(self):
            return self.getToken(CSharpParser.COLON, 0)

        def COMMA(self):
            return self.getToken(CSharpParser.COMMA, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_attribute_section

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttribute_section" ):
                listener.enterAttribute_section(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttribute_section" ):
                listener.exitAttribute_section(self)




    def attribute_section(self):

        localctx = CSharpParser.Attribute_sectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 412, self.RULE_attribute_section)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2469
            self.match(CSharpParser.OPEN_BRACKET)
            self.state = 2473
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,293,self._ctx)
            if la_ == 1:
                self.state = 2470
                self.attribute_target()
                self.state = 2471
                self.match(CSharpParser.COLON)


            self.state = 2475
            self.attribute_list()
            self.state = 2477
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==132:
                self.state = 2476
                self.match(CSharpParser.COMMA)


            self.state = 2479
            self.match(CSharpParser.CLOSE_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Attribute_targetContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def keyword(self):
            return self.getTypedRuleContext(CSharpParser.KeywordContext,0)


        def identifier(self):
            return self.getTypedRuleContext(CSharpParser.IdentifierContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_attribute_target

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttribute_target" ):
                listener.enterAttribute_target(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttribute_target" ):
                listener.exitAttribute_target(self)




    def attribute_target(self):

        localctx = CSharpParser.Attribute_targetContext(self, self._ctx, self.state)
        self.enterRule(localctx, 414, self.RULE_attribute_target)
        try:
            self.state = 2483
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,295,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2481
                self.keyword()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2482
                self.identifier()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Attribute_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def attribute(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.AttributeContext)
            else:
                return self.getTypedRuleContext(CSharpParser.AttributeContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.COMMA)
            else:
                return self.getToken(CSharpParser.COMMA, i)

        def getRuleIndex(self):
            return CSharpParser.RULE_attribute_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttribute_list" ):
                listener.enterAttribute_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttribute_list" ):
                listener.exitAttribute_list(self)




    def attribute_list(self):

        localctx = CSharpParser.Attribute_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 416, self.RULE_attribute_list)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2485
            self.attribute()
            self.state = 2490
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,296,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2486
                    self.match(CSharpParser.COMMA)
                    self.state = 2487
                    self.attribute() 
                self.state = 2492
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,296,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AttributeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def namespace_or_type_name(self):
            return self.getTypedRuleContext(CSharpParser.Namespace_or_type_nameContext,0)


        def OPEN_PARENS(self):
            return self.getToken(CSharpParser.OPEN_PARENS, 0)

        def CLOSE_PARENS(self):
            return self.getToken(CSharpParser.CLOSE_PARENS, 0)

        def attribute_argument(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Attribute_argumentContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Attribute_argumentContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.COMMA)
            else:
                return self.getToken(CSharpParser.COMMA, i)

        def getRuleIndex(self):
            return CSharpParser.RULE_attribute

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttribute" ):
                listener.enterAttribute(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttribute" ):
                listener.exitAttribute(self)




    def attribute(self):

        localctx = CSharpParser.AttributeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 418, self.RULE_attribute)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2493
            self.namespace_or_type_name()
            self.state = 2506
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==129:
                self.state = 2494
                self.match(CSharpParser.OPEN_PARENS)
                self.state = 2503
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -5437212208176571392) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 2305497201195550909) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & 4398059153857) != 0):
                    self.state = 2495
                    self.attribute_argument()
                    self.state = 2500
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==132:
                        self.state = 2496
                        self.match(CSharpParser.COMMA)
                        self.state = 2497
                        self.attribute_argument()
                        self.state = 2502
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 2505
                self.match(CSharpParser.CLOSE_PARENS)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Attribute_argumentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(CSharpParser.ExpressionContext,0)


        def identifier(self):
            return self.getTypedRuleContext(CSharpParser.IdentifierContext,0)


        def COLON(self):
            return self.getToken(CSharpParser.COLON, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_attribute_argument

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttribute_argument" ):
                listener.enterAttribute_argument(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttribute_argument" ):
                listener.exitAttribute_argument(self)




    def attribute_argument(self):

        localctx = CSharpParser.Attribute_argumentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 420, self.RULE_attribute_argument)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2511
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,300,self._ctx)
            if la_ == 1:
                self.state = 2508
                self.identifier()
                self.state = 2509
                self.match(CSharpParser.COLON)


            self.state = 2513
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pointer_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STAR(self):
            return self.getToken(CSharpParser.STAR, 0)

        def simple_type(self):
            return self.getTypedRuleContext(CSharpParser.Simple_typeContext,0)


        def class_type(self):
            return self.getTypedRuleContext(CSharpParser.Class_typeContext,0)


        def rank_specifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Rank_specifierContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Rank_specifierContext,i)


        def INTERR(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.INTERR)
            else:
                return self.getToken(CSharpParser.INTERR, i)

        def VOID(self):
            return self.getToken(CSharpParser.VOID, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_pointer_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPointer_type" ):
                listener.enterPointer_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPointer_type" ):
                listener.exitPointer_type(self)




    def pointer_type(self):

        localctx = CSharpParser.Pointer_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 422, self.RULE_pointer_type)
        self._la = 0 # Token type
        try:
            self.state = 2530
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [10, 11, 12, 14, 15, 16, 18, 20, 21, 24, 29, 32, 34, 35, 38, 45, 48, 49, 51, 55, 58, 60, 61, 63, 64, 68, 69, 71, 75, 81, 83, 85, 86, 87, 91, 99, 100, 102, 104, 106, 110, 111, 113, 114]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2517
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [18, 21, 24, 29, 34, 45, 55, 63, 83, 87, 99, 100, 104]:
                    self.state = 2515
                    self.simple_type()
                    pass
                elif token in [10, 11, 12, 14, 15, 16, 20, 32, 35, 38, 48, 49, 51, 58, 60, 61, 64, 68, 69, 71, 75, 81, 85, 86, 91, 102, 106, 110, 111, 113, 114]:
                    self.state = 2516
                    self.class_type()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 2523
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==127 or _la==148:
                    self.state = 2521
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [127]:
                        self.state = 2519
                        self.rank_specifier()
                        pass
                    elif token in [148]:
                        self.state = 2520
                        self.match(CSharpParser.INTERR)
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 2525
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2526
                self.match(CSharpParser.STAR)
                pass
            elif token in [108]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2528
                self.match(CSharpParser.VOID)
                self.state = 2529
                self.match(CSharpParser.STAR)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Fixed_pointer_declaratorsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fixed_pointer_declarator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Fixed_pointer_declaratorContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Fixed_pointer_declaratorContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.COMMA)
            else:
                return self.getToken(CSharpParser.COMMA, i)

        def getRuleIndex(self):
            return CSharpParser.RULE_fixed_pointer_declarators

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFixed_pointer_declarators" ):
                listener.enterFixed_pointer_declarators(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFixed_pointer_declarators" ):
                listener.exitFixed_pointer_declarators(self)




    def fixed_pointer_declarators(self):

        localctx = CSharpParser.Fixed_pointer_declaratorsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 424, self.RULE_fixed_pointer_declarators)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2532
            self.fixed_pointer_declarator()
            self.state = 2537
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==132:
                self.state = 2533
                self.match(CSharpParser.COMMA)
                self.state = 2534
                self.fixed_pointer_declarator()
                self.state = 2539
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Fixed_pointer_declaratorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(CSharpParser.IdentifierContext,0)


        def ASSIGNMENT(self):
            return self.getToken(CSharpParser.ASSIGNMENT, 0)

        def fixed_pointer_initializer(self):
            return self.getTypedRuleContext(CSharpParser.Fixed_pointer_initializerContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_fixed_pointer_declarator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFixed_pointer_declarator" ):
                listener.enterFixed_pointer_declarator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFixed_pointer_declarator" ):
                listener.exitFixed_pointer_declarator(self)




    def fixed_pointer_declarator(self):

        localctx = CSharpParser.Fixed_pointer_declaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 426, self.RULE_fixed_pointer_declarator)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2540
            self.identifier()
            self.state = 2541
            self.match(CSharpParser.ASSIGNMENT)
            self.state = 2542
            self.fixed_pointer_initializer()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Fixed_pointer_initializerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(CSharpParser.ExpressionContext,0)


        def AMP(self):
            return self.getToken(CSharpParser.AMP, 0)

        def stackalloc_initializer(self):
            return self.getTypedRuleContext(CSharpParser.Stackalloc_initializerContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_fixed_pointer_initializer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFixed_pointer_initializer" ):
                listener.enterFixed_pointer_initializer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFixed_pointer_initializer" ):
                listener.exitFixed_pointer_initializer(self)




    def fixed_pointer_initializer(self):

        localctx = CSharpParser.Fixed_pointer_initializerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 428, self.RULE_fixed_pointer_initializer)
        try:
            self.state = 2549
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [10, 11, 12, 14, 15, 16, 17, 18, 20, 21, 24, 25, 29, 30, 31, 32, 34, 35, 38, 42, 45, 48, 49, 51, 55, 58, 60, 61, 63, 64, 66, 67, 68, 69, 71, 75, 80, 81, 83, 85, 86, 87, 88, 89, 91, 94, 96, 98, 99, 100, 101, 102, 104, 106, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 129, 135, 136, 137, 140, 142, 143, 144, 151, 152, 171]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2545
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,306,self._ctx)
                if la_ == 1:
                    self.state = 2544
                    self.match(CSharpParser.AMP)


                self.state = 2547
                self.expression()
                pass
            elif token in [125]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2548
                self.stackalloc_initializer()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Fixed_size_buffer_declaratorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(CSharpParser.IdentifierContext,0)


        def OPEN_BRACKET(self):
            return self.getToken(CSharpParser.OPEN_BRACKET, 0)

        def expression(self):
            return self.getTypedRuleContext(CSharpParser.ExpressionContext,0)


        def CLOSE_BRACKET(self):
            return self.getToken(CSharpParser.CLOSE_BRACKET, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_fixed_size_buffer_declarator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFixed_size_buffer_declarator" ):
                listener.enterFixed_size_buffer_declarator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFixed_size_buffer_declarator" ):
                listener.exitFixed_size_buffer_declarator(self)




    def fixed_size_buffer_declarator(self):

        localctx = CSharpParser.Fixed_size_buffer_declaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 430, self.RULE_fixed_size_buffer_declarator)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2551
            self.identifier()
            self.state = 2552
            self.match(CSharpParser.OPEN_BRACKET)
            self.state = 2553
            self.expression()
            self.state = 2554
            self.match(CSharpParser.CLOSE_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Right_arrowContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.first = None # Token
            self.second = None # Token

        def ASSIGNMENT(self):
            return self.getToken(CSharpParser.ASSIGNMENT, 0)

        def GT(self):
            return self.getToken(CSharpParser.GT, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_right_arrow

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRight_arrow" ):
                listener.enterRight_arrow(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRight_arrow" ):
                listener.exitRight_arrow(self)




    def right_arrow(self):

        localctx = CSharpParser.Right_arrowContext(self, self._ctx, self.state)
        self.enterRule(localctx, 432, self.RULE_right_arrow)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2556
            localctx.first = self.match(CSharpParser.ASSIGNMENT)
            self.state = 2557
            localctx.second = self.match(CSharpParser.GT)
            self.state = 2558
            if not (0 if localctx.first is None else localctx.first.tokenIndex) + 1 == (0 if localctx.second is None else localctx.second.tokenIndex):
                from antlr4.error.Errors import FailedPredicateException
                raise FailedPredicateException(self, "$first.index + 1 == $second.index")
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Right_shiftContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.first = None # Token
            self.second = None # Token

        def GT(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.GT)
            else:
                return self.getToken(CSharpParser.GT, i)

        def getRuleIndex(self):
            return CSharpParser.RULE_right_shift

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRight_shift" ):
                listener.enterRight_shift(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRight_shift" ):
                listener.exitRight_shift(self)




    def right_shift(self):

        localctx = CSharpParser.Right_shiftContext(self, self._ctx, self.state)
        self.enterRule(localctx, 434, self.RULE_right_shift)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2560
            localctx.first = self.match(CSharpParser.GT)
            self.state = 2561
            localctx.second = self.match(CSharpParser.GT)
            self.state = 2562
            if not (0 if localctx.first is None else localctx.first.tokenIndex) + 1 == (0 if localctx.second is None else localctx.second.tokenIndex):
                from antlr4.error.Errors import FailedPredicateException
                raise FailedPredicateException(self, "$first.index + 1 == $second.index")
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Right_shift_assignmentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.first = None # Token
            self.second = None # Token

        def GT(self):
            return self.getToken(CSharpParser.GT, 0)

        def OP_GE(self):
            return self.getToken(CSharpParser.OP_GE, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_right_shift_assignment

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRight_shift_assignment" ):
                listener.enterRight_shift_assignment(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRight_shift_assignment" ):
                listener.exitRight_shift_assignment(self)




    def right_shift_assignment(self):

        localctx = CSharpParser.Right_shift_assignmentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 436, self.RULE_right_shift_assignment)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2564
            localctx.first = self.match(CSharpParser.GT)
            self.state = 2565
            localctx.second = self.match(CSharpParser.OP_GE)
            self.state = 2566
            if not (0 if localctx.first is None else localctx.first.tokenIndex) + 1 == (0 if localctx.second is None else localctx.second.tokenIndex):
                from antlr4.error.Errors import FailedPredicateException
                raise FailedPredicateException(self, "$first.index + 1 == $second.index")
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def boolean_literal(self):
            return self.getTypedRuleContext(CSharpParser.Boolean_literalContext,0)


        def string_literal(self):
            return self.getTypedRuleContext(CSharpParser.String_literalContext,0)


        def INTEGER_LITERAL(self):
            return self.getToken(CSharpParser.INTEGER_LITERAL, 0)

        def HEX_INTEGER_LITERAL(self):
            return self.getToken(CSharpParser.HEX_INTEGER_LITERAL, 0)

        def BIN_INTEGER_LITERAL(self):
            return self.getToken(CSharpParser.BIN_INTEGER_LITERAL, 0)

        def REAL_LITERAL(self):
            return self.getToken(CSharpParser.REAL_LITERAL, 0)

        def CHARACTER_LITERAL(self):
            return self.getToken(CSharpParser.CHARACTER_LITERAL, 0)

        def NULL_(self):
            return self.getToken(CSharpParser.NULL_, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLiteral" ):
                listener.enterLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLiteral" ):
                listener.exitLiteral(self)




    def literal(self):

        localctx = CSharpParser.LiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 438, self.RULE_literal)
        try:
            self.state = 2576
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [42, 96]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2568
                self.boolean_literal()
                pass
            elif token in [121, 122, 123, 124]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2569
                self.string_literal()
                pass
            elif token in [116]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2570
                self.match(CSharpParser.INTEGER_LITERAL)
                pass
            elif token in [117]:
                self.enterOuterAlt(localctx, 4)
                self.state = 2571
                self.match(CSharpParser.HEX_INTEGER_LITERAL)
                pass
            elif token in [118]:
                self.enterOuterAlt(localctx, 5)
                self.state = 2572
                self.match(CSharpParser.BIN_INTEGER_LITERAL)
                pass
            elif token in [119]:
                self.enterOuterAlt(localctx, 6)
                self.state = 2573
                self.match(CSharpParser.REAL_LITERAL)
                pass
            elif token in [120]:
                self.enterOuterAlt(localctx, 7)
                self.state = 2574
                self.match(CSharpParser.CHARACTER_LITERAL)
                pass
            elif token in [67]:
                self.enterOuterAlt(localctx, 8)
                self.state = 2575
                self.match(CSharpParser.NULL_)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Boolean_literalContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TRUE(self):
            return self.getToken(CSharpParser.TRUE, 0)

        def FALSE(self):
            return self.getToken(CSharpParser.FALSE, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_boolean_literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBoolean_literal" ):
                listener.enterBoolean_literal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBoolean_literal" ):
                listener.exitBoolean_literal(self)




    def boolean_literal(self):

        localctx = CSharpParser.Boolean_literalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 440, self.RULE_boolean_literal)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2578
            _la = self._input.LA(1)
            if not(_la==42 or _la==96):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class String_literalContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def interpolated_regular_string(self):
            return self.getTypedRuleContext(CSharpParser.Interpolated_regular_stringContext,0)


        def interpolated_verbatium_string(self):
            return self.getTypedRuleContext(CSharpParser.Interpolated_verbatium_stringContext,0)


        def REGULAR_STRING(self):
            return self.getToken(CSharpParser.REGULAR_STRING, 0)

        def VERBATIUM_STRING(self):
            return self.getToken(CSharpParser.VERBATIUM_STRING, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_string_literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterString_literal" ):
                listener.enterString_literal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitString_literal" ):
                listener.exitString_literal(self)




    def string_literal(self):

        localctx = CSharpParser.String_literalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 442, self.RULE_string_literal)
        try:
            self.state = 2584
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [123]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2580
                self.interpolated_regular_string()
                pass
            elif token in [124]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2581
                self.interpolated_verbatium_string()
                pass
            elif token in [121]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2582
                self.match(CSharpParser.REGULAR_STRING)
                pass
            elif token in [122]:
                self.enterOuterAlt(localctx, 4)
                self.state = 2583
                self.match(CSharpParser.VERBATIUM_STRING)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Interpolated_regular_stringContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INTERPOLATED_REGULAR_STRING_START(self):
            return self.getToken(CSharpParser.INTERPOLATED_REGULAR_STRING_START, 0)

        def DOUBLE_QUOTE_INSIDE(self):
            return self.getToken(CSharpParser.DOUBLE_QUOTE_INSIDE, 0)

        def interpolated_regular_string_part(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Interpolated_regular_string_partContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Interpolated_regular_string_partContext,i)


        def getRuleIndex(self):
            return CSharpParser.RULE_interpolated_regular_string

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterpolated_regular_string" ):
                listener.enterInterpolated_regular_string(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterpolated_regular_string" ):
                listener.exitInterpolated_regular_string(self)




    def interpolated_regular_string(self):

        localctx = CSharpParser.Interpolated_regular_stringContext(self, self._ctx, self.state)
        self.enterRule(localctx, 444, self.RULE_interpolated_regular_string)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2586
            self.match(CSharpParser.INTERPOLATED_REGULAR_STRING_START)
            self.state = 2590
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,310,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2587
                    self.interpolated_regular_string_part() 
                self.state = 2592
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,310,self._ctx)

            self.state = 2593
            self.match(CSharpParser.DOUBLE_QUOTE_INSIDE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Interpolated_verbatium_stringContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INTERPOLATED_VERBATIUM_STRING_START(self):
            return self.getToken(CSharpParser.INTERPOLATED_VERBATIUM_STRING_START, 0)

        def DOUBLE_QUOTE_INSIDE(self):
            return self.getToken(CSharpParser.DOUBLE_QUOTE_INSIDE, 0)

        def interpolated_verbatium_string_part(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Interpolated_verbatium_string_partContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Interpolated_verbatium_string_partContext,i)


        def getRuleIndex(self):
            return CSharpParser.RULE_interpolated_verbatium_string

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterpolated_verbatium_string" ):
                listener.enterInterpolated_verbatium_string(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterpolated_verbatium_string" ):
                listener.exitInterpolated_verbatium_string(self)




    def interpolated_verbatium_string(self):

        localctx = CSharpParser.Interpolated_verbatium_stringContext(self, self._ctx, self.state)
        self.enterRule(localctx, 446, self.RULE_interpolated_verbatium_string)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2595
            self.match(CSharpParser.INTERPOLATED_VERBATIUM_STRING_START)
            self.state = 2599
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 125)) & ~0x3f) == 0 and ((1 << (_la - 125)) & 10273836649938945) != 0):
                self.state = 2596
                self.interpolated_verbatium_string_part()
                self.state = 2601
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2602
            self.match(CSharpParser.DOUBLE_QUOTE_INSIDE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Interpolated_regular_string_partContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def interpolated_string_expression(self):
            return self.getTypedRuleContext(CSharpParser.Interpolated_string_expressionContext,0)


        def DOUBLE_CURLY_INSIDE(self):
            return self.getToken(CSharpParser.DOUBLE_CURLY_INSIDE, 0)

        def REGULAR_CHAR_INSIDE(self):
            return self.getToken(CSharpParser.REGULAR_CHAR_INSIDE, 0)

        def REGULAR_STRING_INSIDE(self):
            return self.getToken(CSharpParser.REGULAR_STRING_INSIDE, 0)

        def OPEN_BRACE_INSIDE(self):
            return self.getToken(CSharpParser.OPEN_BRACE_INSIDE, 0)

        def CLOSE_BRACE_INSIDE(self):
            return self.getToken(CSharpParser.CLOSE_BRACE_INSIDE, 0)

        def DOUBLE_QUOTE_INSIDE(self):
            return self.getToken(CSharpParser.DOUBLE_QUOTE_INSIDE, 0)

        def VERBATIUM_INSIDE_STRING(self):
            return self.getToken(CSharpParser.VERBATIUM_INSIDE_STRING, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_interpolated_regular_string_part

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterpolated_regular_string_part" ):
                listener.enterInterpolated_regular_string_part(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterpolated_regular_string_part" ):
                listener.exitInterpolated_regular_string_part(self)




    def interpolated_regular_string_part(self):

        localctx = CSharpParser.Interpolated_regular_string_partContext(self, self._ctx, self.state)
        self.enterRule(localctx, 448, self.RULE_interpolated_regular_string_part)
        try:
            self.state = 2612
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [125]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2604
                self.interpolated_string_expression()
                pass
            elif token in [172]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2605
                self.match(CSharpParser.DOUBLE_CURLY_INSIDE)
                pass
            elif token in [174]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2606
                self.match(CSharpParser.REGULAR_CHAR_INSIDE)
                pass
            elif token in [177]:
                self.enterOuterAlt(localctx, 4)
                self.state = 2607
                self.match(CSharpParser.REGULAR_STRING_INSIDE)
                pass
            elif token in [173]:
                self.enterOuterAlt(localctx, 5)
                self.state = 2608
                self.match(CSharpParser.OPEN_BRACE_INSIDE)
                pass
            elif token in [179]:
                self.enterOuterAlt(localctx, 6)
                self.state = 2609
                self.match(CSharpParser.CLOSE_BRACE_INSIDE)
                pass
            elif token in [176]:
                self.enterOuterAlt(localctx, 7)
                self.state = 2610
                self.match(CSharpParser.DOUBLE_QUOTE_INSIDE)
                pass
            elif token in [178]:
                self.enterOuterAlt(localctx, 8)
                self.state = 2611
                self.match(CSharpParser.VERBATIUM_INSIDE_STRING)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Interpolated_verbatium_string_partContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def interpolated_string_expression(self):
            return self.getTypedRuleContext(CSharpParser.Interpolated_string_expressionContext,0)


        def DOUBLE_CURLY_INSIDE(self):
            return self.getToken(CSharpParser.DOUBLE_CURLY_INSIDE, 0)

        def VERBATIUM_DOUBLE_QUOTE_INSIDE(self):
            return self.getToken(CSharpParser.VERBATIUM_DOUBLE_QUOTE_INSIDE, 0)

        def VERBATIUM_INSIDE_STRING(self):
            return self.getToken(CSharpParser.VERBATIUM_INSIDE_STRING, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_interpolated_verbatium_string_part

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterpolated_verbatium_string_part" ):
                listener.enterInterpolated_verbatium_string_part(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterpolated_verbatium_string_part" ):
                listener.exitInterpolated_verbatium_string_part(self)




    def interpolated_verbatium_string_part(self):

        localctx = CSharpParser.Interpolated_verbatium_string_partContext(self, self._ctx, self.state)
        self.enterRule(localctx, 450, self.RULE_interpolated_verbatium_string_part)
        try:
            self.state = 2618
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [125]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2614
                self.interpolated_string_expression()
                pass
            elif token in [172]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2615
                self.match(CSharpParser.DOUBLE_CURLY_INSIDE)
                pass
            elif token in [175]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2616
                self.match(CSharpParser.VERBATIUM_DOUBLE_QUOTE_INSIDE)
                pass
            elif token in [178]:
                self.enterOuterAlt(localctx, 4)
                self.state = 2617
                self.match(CSharpParser.VERBATIUM_INSIDE_STRING)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Interpolated_string_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_BRACE(self):
            return self.getToken(CSharpParser.OPEN_BRACE, 0)

        def expression(self):
            return self.getTypedRuleContext(CSharpParser.ExpressionContext,0)


        def CLOSE_BRACE(self):
            return self.getToken(CSharpParser.CLOSE_BRACE, 0)

        def COMMA(self):
            return self.getToken(CSharpParser.COMMA, 0)

        def interpolation_minimum_width(self):
            return self.getTypedRuleContext(CSharpParser.Interpolation_minimum_widthContext,0)


        def format_string(self):
            return self.getTypedRuleContext(CSharpParser.Format_stringContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_interpolated_string_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterpolated_string_expression" ):
                listener.enterInterpolated_string_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterpolated_string_expression" ):
                listener.exitInterpolated_string_expression(self)




    def interpolated_string_expression(self):

        localctx = CSharpParser.Interpolated_string_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 452, self.RULE_interpolated_string_expression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2620
            self.match(CSharpParser.OPEN_BRACE)
            self.state = 2621
            self.expression()
            self.state = 2624
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==132:
                self.state = 2622
                self.match(CSharpParser.COMMA)
                self.state = 2623
                self.interpolation_minimum_width()


            self.state = 2627
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==133:
                self.state = 2626
                self.format_string()


            self.state = 2629
            self.match(CSharpParser.CLOSE_BRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Interpolation_minimum_widthContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def constant_expression(self):
            return self.getTypedRuleContext(CSharpParser.Constant_expressionContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_interpolation_minimum_width

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterpolation_minimum_width" ):
                listener.enterInterpolation_minimum_width(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterpolation_minimum_width" ):
                listener.exitInterpolation_minimum_width(self)




    def interpolation_minimum_width(self):

        localctx = CSharpParser.Interpolation_minimum_widthContext(self, self._ctx, self.state)
        self.enterRule(localctx, 454, self.RULE_interpolation_minimum_width)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2631
            self.constant_expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Format_stringContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COLON(self):
            return self.getToken(CSharpParser.COLON, 0)

        def FORMAT_STRING(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.FORMAT_STRING)
            else:
                return self.getToken(CSharpParser.FORMAT_STRING, i)

        def getRuleIndex(self):
            return CSharpParser.RULE_format_string

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFormat_string" ):
                listener.enterFormat_string(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFormat_string" ):
                listener.exitFormat_string(self)




    def format_string(self):

        localctx = CSharpParser.Format_stringContext(self, self._ctx, self.state)
        self.enterRule(localctx, 456, self.RULE_format_string)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2633
            self.match(CSharpParser.COLON)
            self.state = 2635 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 2634
                self.match(CSharpParser.FORMAT_STRING)
                self.state = 2637 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==180):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Constant_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(CSharpParser.ExpressionContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_constant_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstant_expression" ):
                listener.enterConstant_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstant_expression" ):
                listener.exitConstant_expression(self)




    def constant_expression(self):

        localctx = CSharpParser.Constant_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 458, self.RULE_constant_expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2639
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class KeywordContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ABSTRACT(self):
            return self.getToken(CSharpParser.ABSTRACT, 0)

        def AS(self):
            return self.getToken(CSharpParser.AS, 0)

        def BASE(self):
            return self.getToken(CSharpParser.BASE, 0)

        def BOOL(self):
            return self.getToken(CSharpParser.BOOL, 0)

        def BREAK(self):
            return self.getToken(CSharpParser.BREAK, 0)

        def BYTE(self):
            return self.getToken(CSharpParser.BYTE, 0)

        def CASE(self):
            return self.getToken(CSharpParser.CASE, 0)

        def CATCH(self):
            return self.getToken(CSharpParser.CATCH, 0)

        def CHAR(self):
            return self.getToken(CSharpParser.CHAR, 0)

        def CHECKED(self):
            return self.getToken(CSharpParser.CHECKED, 0)

        def CLASS(self):
            return self.getToken(CSharpParser.CLASS, 0)

        def CONST(self):
            return self.getToken(CSharpParser.CONST, 0)

        def CONTINUE(self):
            return self.getToken(CSharpParser.CONTINUE, 0)

        def DECIMAL(self):
            return self.getToken(CSharpParser.DECIMAL, 0)

        def DEFAULT(self):
            return self.getToken(CSharpParser.DEFAULT, 0)

        def DELEGATE(self):
            return self.getToken(CSharpParser.DELEGATE, 0)

        def DO(self):
            return self.getToken(CSharpParser.DO, 0)

        def DOUBLE(self):
            return self.getToken(CSharpParser.DOUBLE, 0)

        def ELSE(self):
            return self.getToken(CSharpParser.ELSE, 0)

        def ENUM(self):
            return self.getToken(CSharpParser.ENUM, 0)

        def EVENT(self):
            return self.getToken(CSharpParser.EVENT, 0)

        def EXPLICIT(self):
            return self.getToken(CSharpParser.EXPLICIT, 0)

        def EXTERN(self):
            return self.getToken(CSharpParser.EXTERN, 0)

        def FALSE(self):
            return self.getToken(CSharpParser.FALSE, 0)

        def FINALLY(self):
            return self.getToken(CSharpParser.FINALLY, 0)

        def FIXED(self):
            return self.getToken(CSharpParser.FIXED, 0)

        def FLOAT(self):
            return self.getToken(CSharpParser.FLOAT, 0)

        def FOR(self):
            return self.getToken(CSharpParser.FOR, 0)

        def FOREACH(self):
            return self.getToken(CSharpParser.FOREACH, 0)

        def GOTO(self):
            return self.getToken(CSharpParser.GOTO, 0)

        def IF(self):
            return self.getToken(CSharpParser.IF, 0)

        def IMPLICIT(self):
            return self.getToken(CSharpParser.IMPLICIT, 0)

        def IN(self):
            return self.getToken(CSharpParser.IN, 0)

        def INT(self):
            return self.getToken(CSharpParser.INT, 0)

        def INTERFACE(self):
            return self.getToken(CSharpParser.INTERFACE, 0)

        def INTERNAL(self):
            return self.getToken(CSharpParser.INTERNAL, 0)

        def IS(self):
            return self.getToken(CSharpParser.IS, 0)

        def LOCK(self):
            return self.getToken(CSharpParser.LOCK, 0)

        def LONG(self):
            return self.getToken(CSharpParser.LONG, 0)

        def NAMESPACE(self):
            return self.getToken(CSharpParser.NAMESPACE, 0)

        def NEW(self):
            return self.getToken(CSharpParser.NEW, 0)

        def NULL_(self):
            return self.getToken(CSharpParser.NULL_, 0)

        def OBJECT(self):
            return self.getToken(CSharpParser.OBJECT, 0)

        def OPERATOR(self):
            return self.getToken(CSharpParser.OPERATOR, 0)

        def OUT(self):
            return self.getToken(CSharpParser.OUT, 0)

        def OVERRIDE(self):
            return self.getToken(CSharpParser.OVERRIDE, 0)

        def PARAMS(self):
            return self.getToken(CSharpParser.PARAMS, 0)

        def PRIVATE(self):
            return self.getToken(CSharpParser.PRIVATE, 0)

        def PROTECTED(self):
            return self.getToken(CSharpParser.PROTECTED, 0)

        def PUBLIC(self):
            return self.getToken(CSharpParser.PUBLIC, 0)

        def READONLY(self):
            return self.getToken(CSharpParser.READONLY, 0)

        def REF(self):
            return self.getToken(CSharpParser.REF, 0)

        def RETURN(self):
            return self.getToken(CSharpParser.RETURN, 0)

        def SBYTE(self):
            return self.getToken(CSharpParser.SBYTE, 0)

        def SEALED(self):
            return self.getToken(CSharpParser.SEALED, 0)

        def SHORT(self):
            return self.getToken(CSharpParser.SHORT, 0)

        def SIZEOF(self):
            return self.getToken(CSharpParser.SIZEOF, 0)

        def STACKALLOC(self):
            return self.getToken(CSharpParser.STACKALLOC, 0)

        def STATIC(self):
            return self.getToken(CSharpParser.STATIC, 0)

        def STRING(self):
            return self.getToken(CSharpParser.STRING, 0)

        def STRUCT(self):
            return self.getToken(CSharpParser.STRUCT, 0)

        def SWITCH(self):
            return self.getToken(CSharpParser.SWITCH, 0)

        def THIS(self):
            return self.getToken(CSharpParser.THIS, 0)

        def THROW(self):
            return self.getToken(CSharpParser.THROW, 0)

        def TRUE(self):
            return self.getToken(CSharpParser.TRUE, 0)

        def TRY(self):
            return self.getToken(CSharpParser.TRY, 0)

        def TYPEOF(self):
            return self.getToken(CSharpParser.TYPEOF, 0)

        def UINT(self):
            return self.getToken(CSharpParser.UINT, 0)

        def ULONG(self):
            return self.getToken(CSharpParser.ULONG, 0)

        def UNCHECKED(self):
            return self.getToken(CSharpParser.UNCHECKED, 0)

        def UNMANAGED(self):
            return self.getToken(CSharpParser.UNMANAGED, 0)

        def UNSAFE(self):
            return self.getToken(CSharpParser.UNSAFE, 0)

        def USHORT(self):
            return self.getToken(CSharpParser.USHORT, 0)

        def USING(self):
            return self.getToken(CSharpParser.USING, 0)

        def VIRTUAL(self):
            return self.getToken(CSharpParser.VIRTUAL, 0)

        def VOID(self):
            return self.getToken(CSharpParser.VOID, 0)

        def VOLATILE(self):
            return self.getToken(CSharpParser.VOLATILE, 0)

        def WHILE(self):
            return self.getToken(CSharpParser.WHILE, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_keyword

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterKeyword" ):
                listener.enterKeyword(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitKeyword" ):
                listener.exitKeyword(self)




    def keyword(self):

        localctx = CSharpParser.KeywordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 460, self.RULE_keyword)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2641
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & -3750091428249853440) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & 173722833976239) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Class_definitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CLASS(self):
            return self.getToken(CSharpParser.CLASS, 0)

        def identifier(self):
            return self.getTypedRuleContext(CSharpParser.IdentifierContext,0)


        def class_body(self):
            return self.getTypedRuleContext(CSharpParser.Class_bodyContext,0)


        def class_modifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Class_modifierContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Class_modifierContext,i)


        def PARTIAL(self):
            return self.getToken(CSharpParser.PARTIAL, 0)

        def type_parameter_list(self):
            return self.getTypedRuleContext(CSharpParser.Type_parameter_listContext,0)


        def class_base(self):
            return self.getTypedRuleContext(CSharpParser.Class_baseContext,0)


        def type_parameter_constraints_clauses(self):
            return self.getTypedRuleContext(CSharpParser.Type_parameter_constraints_clausesContext,0)


        def SEMICOLON(self):
            return self.getToken(CSharpParser.SEMICOLON, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_class_definition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClass_definition" ):
                listener.enterClass_definition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClass_definition" ):
                listener.exitClass_definition(self)




    def class_definition(self):

        localctx = CSharpParser.Class_definitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 462, self.RULE_class_definition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2646
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==9 or _la==57 or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & 137456000001) != 0):
                self.state = 2643
                self.class_modifier()
                self.state = 2648
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2650
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==75:
                self.state = 2649
                self.match(CSharpParser.PARTIAL)


            self.state = 2652
            self.match(CSharpParser.CLASS)
            self.state = 2653
            self.identifier()
            self.state = 2655
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==146:
                self.state = 2654
                self.type_parameter_list()


            self.state = 2658
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==133:
                self.state = 2657
                self.class_base()


            self.state = 2661
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==111:
                self.state = 2660
                self.type_parameter_constraints_clauses()


            self.state = 2663
            self.class_body()
            self.state = 2665
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,322,self._ctx)
            if la_ == 1:
                self.state = 2664
                self.match(CSharpParser.SEMICOLON)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Class_modifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NEW(self):
            return self.getToken(CSharpParser.NEW, 0)

        def PUBLIC(self):
            return self.getToken(CSharpParser.PUBLIC, 0)

        def PROTECTED(self):
            return self.getToken(CSharpParser.PROTECTED, 0)

        def INTERNAL(self):
            return self.getToken(CSharpParser.INTERNAL, 0)

        def PRIVATE(self):
            return self.getToken(CSharpParser.PRIVATE, 0)

        def ABSTRACT(self):
            return self.getToken(CSharpParser.ABSTRACT, 0)

        def SEALED(self):
            return self.getToken(CSharpParser.SEALED, 0)

        def STATIC(self):
            return self.getToken(CSharpParser.STATIC, 0)

        def UNSAFE(self):
            return self.getToken(CSharpParser.UNSAFE, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_class_modifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClass_modifier" ):
                listener.enterClass_modifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClass_modifier" ):
                listener.exitClass_modifier(self)




    def class_modifier(self):

        localctx = CSharpParser.Class_modifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 464, self.RULE_class_modifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2667
            _la = self._input.LA(1)
            if not(_la==9 or _la==57 or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & 137456000001) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Struct_definitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STRUCT(self):
            return self.getToken(CSharpParser.STRUCT, 0)

        def identifier(self):
            return self.getTypedRuleContext(CSharpParser.IdentifierContext,0)


        def struct_body(self):
            return self.getTypedRuleContext(CSharpParser.Struct_bodyContext,0)


        def struct_modifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Struct_modifierContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Struct_modifierContext,i)


        def REF(self):
            return self.getToken(CSharpParser.REF, 0)

        def PARTIAL(self):
            return self.getToken(CSharpParser.PARTIAL, 0)

        def type_parameter_list(self):
            return self.getTypedRuleContext(CSharpParser.Type_parameter_listContext,0)


        def struct_interfaces(self):
            return self.getTypedRuleContext(CSharpParser.Struct_interfacesContext,0)


        def type_parameter_constraints_clauses(self):
            return self.getTypedRuleContext(CSharpParser.Type_parameter_constraints_clausesContext,0)


        def SEMICOLON(self):
            return self.getToken(CSharpParser.SEMICOLON, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_struct_definition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStruct_definition" ):
                listener.enterStruct_definition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStruct_definition" ):
                listener.exitStruct_definition(self)




    def struct_definition(self):

        localctx = CSharpParser.Struct_definitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 466, self.RULE_struct_definition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2672
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 57)) & ~0x3f) == 0 and ((1 << (_la - 57)) & 70368752042497) != 0):
                self.state = 2669
                self.struct_modifier()
                self.state = 2674
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2676
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==80:
                self.state = 2675
                self.match(CSharpParser.REF)


            self.state = 2679
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==75:
                self.state = 2678
                self.match(CSharpParser.PARTIAL)


            self.state = 2681
            self.match(CSharpParser.STRUCT)
            self.state = 2682
            self.identifier()
            self.state = 2684
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==146:
                self.state = 2683
                self.type_parameter_list()


            self.state = 2687
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==133:
                self.state = 2686
                self.struct_interfaces()


            self.state = 2690
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==111:
                self.state = 2689
                self.type_parameter_constraints_clauses()


            self.state = 2692
            self.struct_body()
            self.state = 2694
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,329,self._ctx)
            if la_ == 1:
                self.state = 2693
                self.match(CSharpParser.SEMICOLON)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Struct_modifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NEW(self):
            return self.getToken(CSharpParser.NEW, 0)

        def PUBLIC(self):
            return self.getToken(CSharpParser.PUBLIC, 0)

        def PROTECTED(self):
            return self.getToken(CSharpParser.PROTECTED, 0)

        def INTERNAL(self):
            return self.getToken(CSharpParser.INTERNAL, 0)

        def PRIVATE(self):
            return self.getToken(CSharpParser.PRIVATE, 0)

        def READONLY(self):
            return self.getToken(CSharpParser.READONLY, 0)

        def UNSAFE(self):
            return self.getToken(CSharpParser.UNSAFE, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_struct_modifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStruct_modifier" ):
                listener.enterStruct_modifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStruct_modifier" ):
                listener.exitStruct_modifier(self)




    def struct_modifier(self):

        localctx = CSharpParser.Struct_modifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 468, self.RULE_struct_modifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2696
            _la = self._input.LA(1)
            if not(((((_la - 57)) & ~0x3f) == 0 and ((1 << (_la - 57)) & 70368752042497) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Interface_definitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INTERFACE(self):
            return self.getToken(CSharpParser.INTERFACE, 0)

        def identifier(self):
            return self.getTypedRuleContext(CSharpParser.IdentifierContext,0)


        def class_body(self):
            return self.getTypedRuleContext(CSharpParser.Class_bodyContext,0)


        def variant_type_parameter_list(self):
            return self.getTypedRuleContext(CSharpParser.Variant_type_parameter_listContext,0)


        def interface_base(self):
            return self.getTypedRuleContext(CSharpParser.Interface_baseContext,0)


        def type_parameter_constraints_clauses(self):
            return self.getTypedRuleContext(CSharpParser.Type_parameter_constraints_clausesContext,0)


        def SEMICOLON(self):
            return self.getToken(CSharpParser.SEMICOLON, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_interface_definition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterface_definition" ):
                listener.enterInterface_definition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterface_definition" ):
                listener.exitInterface_definition(self)




    def interface_definition(self):

        localctx = CSharpParser.Interface_definitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 470, self.RULE_interface_definition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2698
            self.match(CSharpParser.INTERFACE)
            self.state = 2699
            self.identifier()
            self.state = 2701
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==146:
                self.state = 2700
                self.variant_type_parameter_list()


            self.state = 2704
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==133:
                self.state = 2703
                self.interface_base()


            self.state = 2707
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==111:
                self.state = 2706
                self.type_parameter_constraints_clauses()


            self.state = 2709
            self.class_body()
            self.state = 2711
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,333,self._ctx)
            if la_ == 1:
                self.state = 2710
                self.match(CSharpParser.SEMICOLON)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Enum_definitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ENUM(self):
            return self.getToken(CSharpParser.ENUM, 0)

        def identifier(self):
            return self.getTypedRuleContext(CSharpParser.IdentifierContext,0)


        def enum_body(self):
            return self.getTypedRuleContext(CSharpParser.Enum_bodyContext,0)


        def enum_base(self):
            return self.getTypedRuleContext(CSharpParser.Enum_baseContext,0)


        def SEMICOLON(self):
            return self.getToken(CSharpParser.SEMICOLON, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_enum_definition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnum_definition" ):
                listener.enterEnum_definition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnum_definition" ):
                listener.exitEnum_definition(self)




    def enum_definition(self):

        localctx = CSharpParser.Enum_definitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 472, self.RULE_enum_definition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2713
            self.match(CSharpParser.ENUM)
            self.state = 2714
            self.identifier()
            self.state = 2716
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==133:
                self.state = 2715
                self.enum_base()


            self.state = 2718
            self.enum_body()
            self.state = 2720
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,335,self._ctx)
            if la_ == 1:
                self.state = 2719
                self.match(CSharpParser.SEMICOLON)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Delegate_definitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DELEGATE(self):
            return self.getToken(CSharpParser.DELEGATE, 0)

        def return_type(self):
            return self.getTypedRuleContext(CSharpParser.Return_typeContext,0)


        def identifier(self):
            return self.getTypedRuleContext(CSharpParser.IdentifierContext,0)


        def OPEN_PARENS(self):
            return self.getToken(CSharpParser.OPEN_PARENS, 0)

        def CLOSE_PARENS(self):
            return self.getToken(CSharpParser.CLOSE_PARENS, 0)

        def SEMICOLON(self):
            return self.getToken(CSharpParser.SEMICOLON, 0)

        def variant_type_parameter_list(self):
            return self.getTypedRuleContext(CSharpParser.Variant_type_parameter_listContext,0)


        def formal_parameter_list(self):
            return self.getTypedRuleContext(CSharpParser.Formal_parameter_listContext,0)


        def type_parameter_constraints_clauses(self):
            return self.getTypedRuleContext(CSharpParser.Type_parameter_constraints_clausesContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_delegate_definition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDelegate_definition" ):
                listener.enterDelegate_definition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDelegate_definition" ):
                listener.exitDelegate_definition(self)




    def delegate_definition(self):

        localctx = CSharpParser.Delegate_definitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 474, self.RULE_delegate_definition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2722
            self.match(CSharpParser.DELEGATE)
            self.state = 2723
            self.return_type()
            self.state = 2724
            self.identifier()
            self.state = 2726
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==146:
                self.state = 2725
                self.variant_type_parameter_list()


            self.state = 2728
            self.match(CSharpParser.OPEN_PARENS)
            self.state = 2730
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 10)) & ~0x3f) == 0 and ((1 << (_la - 10)) & 7812956763456032119) != 0) or ((((_la - 74)) & ~0x3f) == 0 and ((1 << (_la - 74)) & 45037874618448579) != 0):
                self.state = 2729
                self.formal_parameter_list()


            self.state = 2732
            self.match(CSharpParser.CLOSE_PARENS)
            self.state = 2734
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==111:
                self.state = 2733
                self.type_parameter_constraints_clauses()


            self.state = 2736
            self.match(CSharpParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Event_declarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EVENT(self):
            return self.getToken(CSharpParser.EVENT, 0)

        def type_(self):
            return self.getTypedRuleContext(CSharpParser.Type_Context,0)


        def variable_declarators(self):
            return self.getTypedRuleContext(CSharpParser.Variable_declaratorsContext,0)


        def SEMICOLON(self):
            return self.getToken(CSharpParser.SEMICOLON, 0)

        def member_name(self):
            return self.getTypedRuleContext(CSharpParser.Member_nameContext,0)


        def OPEN_BRACE(self):
            return self.getToken(CSharpParser.OPEN_BRACE, 0)

        def event_accessor_declarations(self):
            return self.getTypedRuleContext(CSharpParser.Event_accessor_declarationsContext,0)


        def CLOSE_BRACE(self):
            return self.getToken(CSharpParser.CLOSE_BRACE, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_event_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEvent_declaration" ):
                listener.enterEvent_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEvent_declaration" ):
                listener.exitEvent_declaration(self)




    def event_declaration(self):

        localctx = CSharpParser.Event_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 476, self.RULE_event_declaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2738
            self.match(CSharpParser.EVENT)
            self.state = 2739
            self.type_()
            self.state = 2748
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,339,self._ctx)
            if la_ == 1:
                self.state = 2740
                self.variable_declarators()
                self.state = 2741
                self.match(CSharpParser.SEMICOLON)
                pass

            elif la_ == 2:
                self.state = 2743
                self.member_name()
                self.state = 2744
                self.match(CSharpParser.OPEN_BRACE)
                self.state = 2745
                self.event_accessor_declarations()
                self.state = 2746
                self.match(CSharpParser.CLOSE_BRACE)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Field_declarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def variable_declarators(self):
            return self.getTypedRuleContext(CSharpParser.Variable_declaratorsContext,0)


        def SEMICOLON(self):
            return self.getToken(CSharpParser.SEMICOLON, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_field_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterField_declaration" ):
                listener.enterField_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitField_declaration" ):
                listener.exitField_declaration(self)




    def field_declaration(self):

        localctx = CSharpParser.Field_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 478, self.RULE_field_declaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2750
            self.variable_declarators()
            self.state = 2751
            self.match(CSharpParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Property_declarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def member_name(self):
            return self.getTypedRuleContext(CSharpParser.Member_nameContext,0)


        def OPEN_BRACE(self):
            return self.getToken(CSharpParser.OPEN_BRACE, 0)

        def accessor_declarations(self):
            return self.getTypedRuleContext(CSharpParser.Accessor_declarationsContext,0)


        def CLOSE_BRACE(self):
            return self.getToken(CSharpParser.CLOSE_BRACE, 0)

        def right_arrow(self):
            return self.getTypedRuleContext(CSharpParser.Right_arrowContext,0)


        def throwable_expression(self):
            return self.getTypedRuleContext(CSharpParser.Throwable_expressionContext,0)


        def SEMICOLON(self):
            return self.getToken(CSharpParser.SEMICOLON, 0)

        def ASSIGNMENT(self):
            return self.getToken(CSharpParser.ASSIGNMENT, 0)

        def variable_initializer(self):
            return self.getTypedRuleContext(CSharpParser.Variable_initializerContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_property_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProperty_declaration" ):
                listener.enterProperty_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProperty_declaration" ):
                listener.exitProperty_declaration(self)




    def property_declaration(self):

        localctx = CSharpParser.Property_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 480, self.RULE_property_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2753
            self.member_name()
            self.state = 2767
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [125]:
                self.state = 2754
                self.match(CSharpParser.OPEN_BRACE)
                self.state = 2755
                self.accessor_declarations()
                self.state = 2756
                self.match(CSharpParser.CLOSE_BRACE)
                self.state = 2761
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==145:
                    self.state = 2757
                    self.match(CSharpParser.ASSIGNMENT)
                    self.state = 2758
                    self.variable_initializer()
                    self.state = 2759
                    self.match(CSharpParser.SEMICOLON)


                pass
            elif token in [145]:
                self.state = 2763
                self.right_arrow()
                self.state = 2764
                self.throwable_expression()
                self.state = 2765
                self.match(CSharpParser.SEMICOLON)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Constant_declarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CONST(self):
            return self.getToken(CSharpParser.CONST, 0)

        def type_(self):
            return self.getTypedRuleContext(CSharpParser.Type_Context,0)


        def constant_declarators(self):
            return self.getTypedRuleContext(CSharpParser.Constant_declaratorsContext,0)


        def SEMICOLON(self):
            return self.getToken(CSharpParser.SEMICOLON, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_constant_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstant_declaration" ):
                listener.enterConstant_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstant_declaration" ):
                listener.exitConstant_declaration(self)




    def constant_declaration(self):

        localctx = CSharpParser.Constant_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 482, self.RULE_constant_declaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2769
            self.match(CSharpParser.CONST)
            self.state = 2770
            self.type_()
            self.state = 2771
            self.constant_declarators()
            self.state = 2772
            self.match(CSharpParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Indexer_declarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def THIS(self):
            return self.getToken(CSharpParser.THIS, 0)

        def OPEN_BRACKET(self):
            return self.getToken(CSharpParser.OPEN_BRACKET, 0)

        def formal_parameter_list(self):
            return self.getTypedRuleContext(CSharpParser.Formal_parameter_listContext,0)


        def CLOSE_BRACKET(self):
            return self.getToken(CSharpParser.CLOSE_BRACKET, 0)

        def OPEN_BRACE(self):
            return self.getToken(CSharpParser.OPEN_BRACE, 0)

        def accessor_declarations(self):
            return self.getTypedRuleContext(CSharpParser.Accessor_declarationsContext,0)


        def CLOSE_BRACE(self):
            return self.getToken(CSharpParser.CLOSE_BRACE, 0)

        def right_arrow(self):
            return self.getTypedRuleContext(CSharpParser.Right_arrowContext,0)


        def throwable_expression(self):
            return self.getTypedRuleContext(CSharpParser.Throwable_expressionContext,0)


        def SEMICOLON(self):
            return self.getToken(CSharpParser.SEMICOLON, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_indexer_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndexer_declaration" ):
                listener.enterIndexer_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndexer_declaration" ):
                listener.exitIndexer_declaration(self)




    def indexer_declaration(self):

        localctx = CSharpParser.Indexer_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 484, self.RULE_indexer_declaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2774
            self.match(CSharpParser.THIS)
            self.state = 2775
            self.match(CSharpParser.OPEN_BRACKET)
            self.state = 2776
            self.formal_parameter_list()
            self.state = 2777
            self.match(CSharpParser.CLOSE_BRACKET)
            self.state = 2786
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [125]:
                self.state = 2778
                self.match(CSharpParser.OPEN_BRACE)
                self.state = 2779
                self.accessor_declarations()
                self.state = 2780
                self.match(CSharpParser.CLOSE_BRACE)
                pass
            elif token in [145]:
                self.state = 2782
                self.right_arrow()
                self.state = 2783
                self.throwable_expression()
                self.state = 2784
                self.match(CSharpParser.SEMICOLON)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Destructor_definitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TILDE(self):
            return self.getToken(CSharpParser.TILDE, 0)

        def identifier(self):
            return self.getTypedRuleContext(CSharpParser.IdentifierContext,0)


        def OPEN_PARENS(self):
            return self.getToken(CSharpParser.OPEN_PARENS, 0)

        def CLOSE_PARENS(self):
            return self.getToken(CSharpParser.CLOSE_PARENS, 0)

        def body(self):
            return self.getTypedRuleContext(CSharpParser.BodyContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_destructor_definition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDestructor_definition" ):
                listener.enterDestructor_definition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDestructor_definition" ):
                listener.exitDestructor_definition(self)




    def destructor_definition(self):

        localctx = CSharpParser.Destructor_definitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 486, self.RULE_destructor_definition)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2788
            self.match(CSharpParser.TILDE)
            self.state = 2789
            self.identifier()
            self.state = 2790
            self.match(CSharpParser.OPEN_PARENS)
            self.state = 2791
            self.match(CSharpParser.CLOSE_PARENS)
            self.state = 2792
            self.body()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Constructor_declarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(CSharpParser.IdentifierContext,0)


        def OPEN_PARENS(self):
            return self.getToken(CSharpParser.OPEN_PARENS, 0)

        def CLOSE_PARENS(self):
            return self.getToken(CSharpParser.CLOSE_PARENS, 0)

        def body(self):
            return self.getTypedRuleContext(CSharpParser.BodyContext,0)


        def formal_parameter_list(self):
            return self.getTypedRuleContext(CSharpParser.Formal_parameter_listContext,0)


        def constructor_initializer(self):
            return self.getTypedRuleContext(CSharpParser.Constructor_initializerContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_constructor_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstructor_declaration" ):
                listener.enterConstructor_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstructor_declaration" ):
                listener.exitConstructor_declaration(self)




    def constructor_declaration(self):

        localctx = CSharpParser.Constructor_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 488, self.RULE_constructor_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2794
            self.identifier()
            self.state = 2795
            self.match(CSharpParser.OPEN_PARENS)
            self.state = 2797
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 10)) & ~0x3f) == 0 and ((1 << (_la - 10)) & 7812956763456032119) != 0) or ((((_la - 74)) & ~0x3f) == 0 and ((1 << (_la - 74)) & 45037874618448579) != 0):
                self.state = 2796
                self.formal_parameter_list()


            self.state = 2799
            self.match(CSharpParser.CLOSE_PARENS)
            self.state = 2801
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==133:
                self.state = 2800
                self.constructor_initializer()


            self.state = 2803
            self.body()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Method_declarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def method_member_name(self):
            return self.getTypedRuleContext(CSharpParser.Method_member_nameContext,0)


        def OPEN_PARENS(self):
            return self.getToken(CSharpParser.OPEN_PARENS, 0)

        def CLOSE_PARENS(self):
            return self.getToken(CSharpParser.CLOSE_PARENS, 0)

        def method_body(self):
            return self.getTypedRuleContext(CSharpParser.Method_bodyContext,0)


        def right_arrow(self):
            return self.getTypedRuleContext(CSharpParser.Right_arrowContext,0)


        def throwable_expression(self):
            return self.getTypedRuleContext(CSharpParser.Throwable_expressionContext,0)


        def SEMICOLON(self):
            return self.getToken(CSharpParser.SEMICOLON, 0)

        def type_parameter_list(self):
            return self.getTypedRuleContext(CSharpParser.Type_parameter_listContext,0)


        def formal_parameter_list(self):
            return self.getTypedRuleContext(CSharpParser.Formal_parameter_listContext,0)


        def type_parameter_constraints_clauses(self):
            return self.getTypedRuleContext(CSharpParser.Type_parameter_constraints_clausesContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_method_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMethod_declaration" ):
                listener.enterMethod_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMethod_declaration" ):
                listener.exitMethod_declaration(self)




    def method_declaration(self):

        localctx = CSharpParser.Method_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 490, self.RULE_method_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2805
            self.method_member_name()
            self.state = 2807
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==146:
                self.state = 2806
                self.type_parameter_list()


            self.state = 2809
            self.match(CSharpParser.OPEN_PARENS)
            self.state = 2811
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 10)) & ~0x3f) == 0 and ((1 << (_la - 10)) & 7812956763456032119) != 0) or ((((_la - 74)) & ~0x3f) == 0 and ((1 << (_la - 74)) & 45037874618448579) != 0):
                self.state = 2810
                self.formal_parameter_list()


            self.state = 2813
            self.match(CSharpParser.CLOSE_PARENS)
            self.state = 2815
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==111:
                self.state = 2814
                self.type_parameter_constraints_clauses()


            self.state = 2822
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,348,self._ctx)
            if la_ == 1:
                self.state = 2817
                self.method_body()
                pass

            elif la_ == 2:
                self.state = 2818
                self.right_arrow()
                self.state = 2819
                self.throwable_expression()
                self.state = 2820
                self.match(CSharpParser.SEMICOLON)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Method_member_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(CSharpParser.IdentifierContext,i)


        def DOUBLE_COLON(self):
            return self.getToken(CSharpParser.DOUBLE_COLON, 0)

        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.DOT)
            else:
                return self.getToken(CSharpParser.DOT, i)

        def type_argument_list(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Type_argument_listContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Type_argument_listContext,i)


        def getRuleIndex(self):
            return CSharpParser.RULE_method_member_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMethod_member_name" ):
                listener.enterMethod_member_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMethod_member_name" ):
                listener.exitMethod_member_name(self)




    def method_member_name(self):

        localctx = CSharpParser.Method_member_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 492, self.RULE_method_member_name)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2829
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,349,self._ctx)
            if la_ == 1:
                self.state = 2824
                self.identifier()
                pass

            elif la_ == 2:
                self.state = 2825
                self.identifier()
                self.state = 2826
                self.match(CSharpParser.DOUBLE_COLON)
                self.state = 2827
                self.identifier()
                pass


            self.state = 2838
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,351,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2832
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==146:
                        self.state = 2831
                        self.type_argument_list()


                    self.state = 2834
                    self.match(CSharpParser.DOT)
                    self.state = 2835
                    self.identifier() 
                self.state = 2840
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,351,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Operator_declarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPERATOR(self):
            return self.getToken(CSharpParser.OPERATOR, 0)

        def overloadable_operator(self):
            return self.getTypedRuleContext(CSharpParser.Overloadable_operatorContext,0)


        def OPEN_PARENS(self):
            return self.getToken(CSharpParser.OPEN_PARENS, 0)

        def arg_declaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Arg_declarationContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Arg_declarationContext,i)


        def CLOSE_PARENS(self):
            return self.getToken(CSharpParser.CLOSE_PARENS, 0)

        def body(self):
            return self.getTypedRuleContext(CSharpParser.BodyContext,0)


        def right_arrow(self):
            return self.getTypedRuleContext(CSharpParser.Right_arrowContext,0)


        def throwable_expression(self):
            return self.getTypedRuleContext(CSharpParser.Throwable_expressionContext,0)


        def SEMICOLON(self):
            return self.getToken(CSharpParser.SEMICOLON, 0)

        def IN(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.IN)
            else:
                return self.getToken(CSharpParser.IN, i)

        def COMMA(self):
            return self.getToken(CSharpParser.COMMA, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_operator_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOperator_declaration" ):
                listener.enterOperator_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOperator_declaration" ):
                listener.exitOperator_declaration(self)




    def operator_declaration(self):

        localctx = CSharpParser.Operator_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 494, self.RULE_operator_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2841
            self.match(CSharpParser.OPERATOR)
            self.state = 2842
            self.overloadable_operator()
            self.state = 2843
            self.match(CSharpParser.OPEN_PARENS)
            self.state = 2845
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==54:
                self.state = 2844
                self.match(CSharpParser.IN)


            self.state = 2847
            self.arg_declaration()
            self.state = 2853
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==132:
                self.state = 2848
                self.match(CSharpParser.COMMA)
                self.state = 2850
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==54:
                    self.state = 2849
                    self.match(CSharpParser.IN)


                self.state = 2852
                self.arg_declaration()


            self.state = 2855
            self.match(CSharpParser.CLOSE_PARENS)
            self.state = 2861
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,355,self._ctx)
            if la_ == 1:
                self.state = 2856
                self.body()
                pass

            elif la_ == 2:
                self.state = 2857
                self.right_arrow()
                self.state = 2858
                self.throwable_expression()
                self.state = 2859
                self.match(CSharpParser.SEMICOLON)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Arg_declarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def type_(self):
            return self.getTypedRuleContext(CSharpParser.Type_Context,0)


        def identifier(self):
            return self.getTypedRuleContext(CSharpParser.IdentifierContext,0)


        def ASSIGNMENT(self):
            return self.getToken(CSharpParser.ASSIGNMENT, 0)

        def expression(self):
            return self.getTypedRuleContext(CSharpParser.ExpressionContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_arg_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArg_declaration" ):
                listener.enterArg_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArg_declaration" ):
                listener.exitArg_declaration(self)




    def arg_declaration(self):

        localctx = CSharpParser.Arg_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 496, self.RULE_arg_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2863
            self.type_()
            self.state = 2864
            self.identifier()
            self.state = 2867
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==145:
                self.state = 2865
                self.match(CSharpParser.ASSIGNMENT)
                self.state = 2866
                self.expression()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Method_invocationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PARENS(self):
            return self.getToken(CSharpParser.OPEN_PARENS, 0)

        def CLOSE_PARENS(self):
            return self.getToken(CSharpParser.CLOSE_PARENS, 0)

        def argument_list(self):
            return self.getTypedRuleContext(CSharpParser.Argument_listContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_method_invocation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMethod_invocation" ):
                listener.enterMethod_invocation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMethod_invocation" ):
                listener.exitMethod_invocation(self)




    def method_invocation(self):

        localctx = CSharpParser.Method_invocationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 498, self.RULE_method_invocation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2869
            self.match(CSharpParser.OPEN_PARENS)
            self.state = 2871
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & -5419197809667089408) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 2305514793381595581) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & 4398059153857) != 0):
                self.state = 2870
                self.argument_list()


            self.state = 2873
            self.match(CSharpParser.CLOSE_PARENS)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Object_creation_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PARENS(self):
            return self.getToken(CSharpParser.OPEN_PARENS, 0)

        def CLOSE_PARENS(self):
            return self.getToken(CSharpParser.CLOSE_PARENS, 0)

        def argument_list(self):
            return self.getTypedRuleContext(CSharpParser.Argument_listContext,0)


        def object_or_collection_initializer(self):
            return self.getTypedRuleContext(CSharpParser.Object_or_collection_initializerContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_object_creation_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterObject_creation_expression" ):
                listener.enterObject_creation_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitObject_creation_expression" ):
                listener.exitObject_creation_expression(self)




    def object_creation_expression(self):

        localctx = CSharpParser.Object_creation_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 500, self.RULE_object_creation_expression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2875
            self.match(CSharpParser.OPEN_PARENS)
            self.state = 2877
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & -5419197809667089408) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 2305514793381595581) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & 4398059153857) != 0):
                self.state = 2876
                self.argument_list()


            self.state = 2879
            self.match(CSharpParser.CLOSE_PARENS)
            self.state = 2881
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==125:
                self.state = 2880
                self.object_or_collection_initializer()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self):
            return self.getToken(CSharpParser.IDENTIFIER, 0)

        def ADD(self):
            return self.getToken(CSharpParser.ADD, 0)

        def ALIAS(self):
            return self.getToken(CSharpParser.ALIAS, 0)

        def ARGLIST(self):
            return self.getToken(CSharpParser.ARGLIST, 0)

        def ASCENDING(self):
            return self.getToken(CSharpParser.ASCENDING, 0)

        def ASYNC(self):
            return self.getToken(CSharpParser.ASYNC, 0)

        def AWAIT(self):
            return self.getToken(CSharpParser.AWAIT, 0)

        def BY(self):
            return self.getToken(CSharpParser.BY, 0)

        def DESCENDING(self):
            return self.getToken(CSharpParser.DESCENDING, 0)

        def DYNAMIC(self):
            return self.getToken(CSharpParser.DYNAMIC, 0)

        def EQUALS(self):
            return self.getToken(CSharpParser.EQUALS, 0)

        def FROM(self):
            return self.getToken(CSharpParser.FROM, 0)

        def GET(self):
            return self.getToken(CSharpParser.GET, 0)

        def GROUP(self):
            return self.getToken(CSharpParser.GROUP, 0)

        def INTO(self):
            return self.getToken(CSharpParser.INTO, 0)

        def JOIN(self):
            return self.getToken(CSharpParser.JOIN, 0)

        def LET(self):
            return self.getToken(CSharpParser.LET, 0)

        def NAMEOF(self):
            return self.getToken(CSharpParser.NAMEOF, 0)

        def ON(self):
            return self.getToken(CSharpParser.ON, 0)

        def ORDERBY(self):
            return self.getToken(CSharpParser.ORDERBY, 0)

        def PARTIAL(self):
            return self.getToken(CSharpParser.PARTIAL, 0)

        def REMOVE(self):
            return self.getToken(CSharpParser.REMOVE, 0)

        def SELECT(self):
            return self.getToken(CSharpParser.SELECT, 0)

        def SET(self):
            return self.getToken(CSharpParser.SET, 0)

        def UNMANAGED(self):
            return self.getToken(CSharpParser.UNMANAGED, 0)

        def VAR(self):
            return self.getToken(CSharpParser.VAR, 0)

        def WHEN(self):
            return self.getToken(CSharpParser.WHEN, 0)

        def WHERE(self):
            return self.getToken(CSharpParser.WHERE, 0)

        def YIELD(self):
            return self.getToken(CSharpParser.YIELD, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_identifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentifier" ):
                listener.enterIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentifier" ):
                listener.exitIdentifier(self)




    def identifier(self):

        localctx = CSharpParser.IdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 502, self.RULE_identifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2883
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 3750091428249852928) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 1904629023639713) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[216] = self.right_arrow_sempred
        self._predicates[217] = self.right_shift_sempred
        self._predicates[218] = self.right_shift_assignment_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def right_arrow_sempred(self, localctx:Right_arrowContext, predIndex:int):
            if predIndex == 0:
                return (0 if localctx.first is None else localctx.first.tokenIndex) + 1 == (0 if localctx.second is None else localctx.second.tokenIndex)
         

    def right_shift_sempred(self, localctx:Right_shiftContext, predIndex:int):
            if predIndex == 1:
                return (0 if localctx.first is None else localctx.first.tokenIndex) + 1 == (0 if localctx.second is None else localctx.second.tokenIndex)
         

    def right_shift_assignment_sempred(self, localctx:Right_shift_assignmentContext, predIndex:int):
            if predIndex == 2:
                return (0 if localctx.first is None else localctx.first.tokenIndex) + 1 == (0 if localctx.second is None else localctx.second.tokenIndex)
         





# Generated from CSharpParser.g4 by ANTLR 4.13.2
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO

if "." in __name__:
    from .CSharpParserBase import CSharpParserBase
else:
    from CSharpParserBase import CSharpParserBase

def serializedATN():
    return [
        4,1,198,2662,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,
        7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,
        13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
        20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,
        26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,
        33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,
        39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,
        46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,
        52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,2,
        59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,65,7,
        65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,2,71,7,71,2,
        72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,78,7,
        78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,2,
        85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,
        91,2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,
        98,7,98,2,99,7,99,2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,
        2,104,7,104,2,105,7,105,2,106,7,106,2,107,7,107,2,108,7,108,2,109,
        7,109,2,110,7,110,2,111,7,111,2,112,7,112,2,113,7,113,2,114,7,114,
        2,115,7,115,2,116,7,116,2,117,7,117,2,118,7,118,2,119,7,119,2,120,
        7,120,2,121,7,121,2,122,7,122,2,123,7,123,2,124,7,124,2,125,7,125,
        2,126,7,126,2,127,7,127,2,128,7,128,2,129,7,129,2,130,7,130,2,131,
        7,131,2,132,7,132,2,133,7,133,2,134,7,134,2,135,7,135,2,136,7,136,
        2,137,7,137,2,138,7,138,2,139,7,139,2,140,7,140,2,141,7,141,2,142,
        7,142,2,143,7,143,2,144,7,144,2,145,7,145,2,146,7,146,2,147,7,147,
        2,148,7,148,2,149,7,149,2,150,7,150,2,151,7,151,2,152,7,152,2,153,
        7,153,2,154,7,154,2,155,7,155,2,156,7,156,2,157,7,157,2,158,7,158,
        2,159,7,159,2,160,7,160,2,161,7,161,2,162,7,162,2,163,7,163,2,164,
        7,164,2,165,7,165,2,166,7,166,2,167,7,167,2,168,7,168,2,169,7,169,
        2,170,7,170,2,171,7,171,2,172,7,172,2,173,7,173,2,174,7,174,2,175,
        7,175,2,176,7,176,2,177,7,177,2,178,7,178,2,179,7,179,2,180,7,180,
        2,181,7,181,2,182,7,182,2,183,7,183,2,184,7,184,2,185,7,185,2,186,
        7,186,2,187,7,187,2,188,7,188,2,189,7,189,2,190,7,190,2,191,7,191,
        2,192,7,192,2,193,7,193,2,194,7,194,2,195,7,195,2,196,7,196,2,197,
        7,197,2,198,7,198,2,199,7,199,2,200,7,200,2,201,7,201,2,202,7,202,
        2,203,7,203,2,204,7,204,2,205,7,205,2,206,7,206,2,207,7,207,2,208,
        7,208,2,209,7,209,2,210,7,210,2,211,7,211,2,212,7,212,2,213,7,213,
        2,214,7,214,2,215,7,215,2,216,7,216,2,217,7,217,2,218,7,218,2,219,
        7,219,2,220,7,220,2,221,7,221,1,0,3,0,446,8,0,1,0,3,0,449,8,0,1,
        0,3,0,452,8,0,1,0,5,0,455,8,0,10,0,12,0,458,9,0,1,0,3,0,461,8,0,
        1,0,1,0,1,1,1,1,3,1,467,8,1,1,1,3,1,470,8,1,1,1,1,1,1,1,3,1,475,
        8,1,5,1,477,8,1,10,1,12,1,480,9,1,1,2,1,2,1,2,1,2,5,2,486,8,2,10,
        2,12,2,489,9,2,1,3,1,3,1,3,1,3,1,3,3,3,496,8,3,1,4,1,4,1,4,1,4,4,
        4,502,8,4,11,4,12,4,503,1,4,1,4,1,5,1,5,3,5,510,8,5,1,6,1,6,3,6,
        514,8,6,1,7,1,7,1,7,3,7,519,8,7,1,8,1,8,1,9,1,9,1,10,1,10,1,10,1,
        10,3,10,529,8,10,1,11,1,11,1,11,1,11,5,11,535,8,11,10,11,12,11,538,
        9,11,1,11,1,11,1,12,1,12,1,12,5,12,545,8,12,10,12,12,12,548,9,12,
        1,13,1,13,1,13,3,13,553,8,13,1,13,3,13,556,8,13,1,13,1,13,1,13,3,
        13,561,8,13,1,13,3,13,564,8,13,1,14,1,14,1,14,1,14,3,14,570,8,14,
        1,15,1,15,1,15,3,15,575,8,15,1,16,1,16,1,16,1,16,1,16,1,16,1,16,
        1,16,3,16,585,8,16,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,
        1,17,1,17,3,17,598,8,17,1,18,1,18,1,18,1,18,1,18,1,18,3,18,606,8,
        18,1,19,1,19,1,19,1,19,3,19,612,8,19,3,19,614,8,19,1,20,1,20,1,20,
        5,20,619,8,20,10,20,12,20,622,9,20,1,21,1,21,1,21,5,21,627,8,21,
        10,21,12,21,630,9,21,1,22,1,22,1,22,5,22,635,8,22,10,22,12,22,638,
        9,22,1,23,1,23,1,23,5,23,643,8,23,10,23,12,23,646,9,23,1,24,1,24,
        1,24,5,24,651,8,24,10,24,12,24,654,9,24,1,25,1,25,1,25,5,25,659,
        8,25,10,25,12,25,662,9,25,1,26,1,26,1,26,1,26,1,26,1,26,1,26,5,26,
        671,8,26,10,26,12,26,674,9,26,1,27,1,27,1,27,3,27,679,8,27,1,27,
        5,27,682,8,27,10,27,12,27,685,9,27,1,28,1,28,1,28,5,28,690,8,28,
        10,28,12,28,693,9,28,1,29,1,29,1,29,5,29,698,8,29,10,29,12,29,701,
        9,29,1,30,1,30,1,30,1,30,1,30,3,30,708,8,30,3,30,710,8,30,1,30,3,
        30,713,8,30,1,31,1,31,1,31,5,31,718,8,31,10,31,12,31,721,9,31,1,
        32,1,32,3,32,725,8,32,1,32,1,32,1,32,1,33,1,33,3,33,732,8,33,1,33,
        1,33,3,33,736,8,33,3,33,738,8,33,1,34,1,34,1,34,1,34,1,34,1,34,1,
        34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,
        34,1,34,1,34,3,34,762,8,34,1,35,1,35,1,35,1,35,1,35,1,36,1,36,3,
        36,771,8,36,1,36,5,36,774,8,36,10,36,12,36,777,9,36,1,36,3,36,780,
        8,36,1,36,1,36,1,36,1,36,1,36,1,36,3,36,788,8,36,1,36,3,36,791,8,
        36,1,36,5,36,794,8,36,10,36,12,36,797,9,36,1,36,3,36,800,8,36,5,
        36,802,8,36,10,36,12,36,805,9,36,1,37,1,37,1,37,3,37,810,8,37,1,
        37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,3,37,824,
        8,37,1,37,1,37,1,37,1,37,3,37,830,8,37,1,37,1,37,1,37,1,37,1,37,
        1,37,1,37,1,37,5,37,840,8,37,10,37,12,37,843,9,37,1,37,3,37,846,
        8,37,1,37,4,37,849,8,37,11,37,12,37,850,1,37,1,37,3,37,855,8,37,
        1,37,1,37,1,37,1,37,3,37,861,8,37,1,37,1,37,1,37,1,37,4,37,867,8,
        37,11,37,12,37,868,1,37,1,37,1,37,1,37,1,37,1,37,1,37,3,37,878,8,
        37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,
        37,1,37,1,37,1,37,3,37,896,8,37,1,37,3,37,899,8,37,1,37,1,37,1,37,
        3,37,904,8,37,1,37,3,37,907,8,37,1,37,1,37,1,37,1,37,1,37,1,37,1,
        37,1,37,1,37,1,37,1,37,5,37,920,8,37,10,37,12,37,923,9,37,1,37,1,
        37,1,37,3,37,928,8,37,1,38,1,38,3,38,932,8,38,1,39,1,39,1,39,1,40,
        3,40,938,8,40,1,40,1,40,1,40,3,40,943,8,40,1,41,3,41,946,8,41,1,
        41,1,41,1,41,1,41,5,41,952,8,41,10,41,12,41,955,9,41,1,41,1,41,1,
        42,1,42,1,42,3,42,962,8,42,1,42,1,42,1,43,1,43,1,44,1,44,1,44,5,
        44,971,8,44,10,44,12,44,974,9,44,1,45,1,45,3,45,978,8,45,1,46,1,
        46,1,46,3,46,983,8,46,3,46,985,8,46,1,46,1,46,1,47,1,47,1,47,5,47,
        992,8,47,10,47,12,47,995,9,47,1,48,1,48,1,48,1,48,1,48,3,48,1002,
        8,48,1,48,1,48,1,48,1,49,1,49,3,49,1009,8,49,1,50,1,50,1,50,1,50,
        5,50,1015,8,50,10,50,12,50,1018,9,50,1,50,3,50,1021,8,50,1,50,1,
        50,1,51,1,51,1,51,1,51,1,51,3,51,1030,8,51,1,52,1,52,1,52,3,52,1035,
        8,52,3,52,1037,8,52,1,52,1,52,1,53,1,53,1,53,5,53,1044,8,53,10,53,
        12,53,1047,9,53,1,54,1,54,1,54,1,54,1,54,3,54,1054,8,54,1,55,1,55,
        3,55,1058,8,55,1,55,1,55,1,55,3,55,1063,8,55,3,55,1065,8,55,1,55,
        1,55,1,55,3,55,1070,8,55,5,55,1072,8,55,10,55,12,55,1075,9,55,1,
        56,1,56,5,56,1079,8,56,10,56,12,56,1082,9,56,1,56,1,56,1,57,1,57,
        1,57,5,57,1089,8,57,10,57,12,57,1092,9,57,1,57,3,57,1095,8,57,1,
        57,3,57,1098,8,57,1,57,3,57,1101,8,57,1,58,1,58,1,58,1,58,5,58,1107,
        8,58,10,58,12,58,1110,9,58,1,58,1,58,1,59,1,59,1,59,1,59,1,60,3,
        60,1119,8,60,1,60,1,60,1,60,1,60,1,61,1,61,1,61,1,61,1,61,1,61,1,
        61,1,61,1,61,1,61,1,61,3,61,1136,8,61,1,62,1,62,1,62,5,62,1141,8,
        62,10,62,12,62,1144,9,62,1,63,3,63,1147,8,63,1,63,1,63,1,63,1,64,
        1,64,1,64,5,64,1155,8,64,10,64,12,64,1158,9,64,1,65,1,65,3,65,1162,
        8,65,1,66,1,66,1,66,1,67,1,67,3,67,1169,8,67,1,67,1,67,1,67,1,67,
        1,68,5,68,1176,8,68,10,68,12,68,1179,9,68,1,68,1,68,3,68,1183,8,
        68,1,69,1,69,1,69,1,69,1,69,3,69,1190,8,69,1,70,1,70,1,70,1,70,1,
        70,1,71,1,71,1,71,1,72,1,72,3,72,1202,8,72,1,72,1,72,1,72,1,72,1,
        72,1,72,1,72,1,72,1,72,3,72,1213,8,72,1,73,1,73,1,73,1,73,5,73,1219,
        8,73,10,73,12,73,1222,9,73,1,74,1,74,3,74,1226,8,74,1,75,1,75,1,
        75,1,75,1,75,1,75,1,75,3,75,1235,8,75,1,76,1,76,1,76,1,76,1,77,1,
        77,1,77,3,77,1244,8,77,1,78,1,78,1,78,1,78,1,78,1,78,1,78,3,78,1253,
        8,78,1,79,1,79,1,79,1,80,3,80,1259,8,80,1,80,1,80,1,80,3,80,1264,
        8,80,1,80,1,80,3,80,1268,8,80,1,80,1,80,3,80,1272,8,80,1,81,1,81,
        3,81,1276,8,81,1,81,1,81,3,81,1280,8,81,1,82,1,82,1,82,1,82,1,82,
        3,82,1287,8,82,1,83,1,83,1,83,1,83,1,84,1,84,3,84,1295,8,84,1,85,
        1,85,1,85,1,85,1,85,1,85,1,85,1,85,1,85,1,85,1,85,3,85,1308,8,85,
        1,85,1,85,1,85,1,85,1,85,1,85,5,85,1316,8,85,10,85,12,85,1319,9,
        85,1,85,1,85,1,85,1,85,1,85,1,85,1,85,1,85,1,85,1,85,1,85,1,85,1,
        85,1,85,1,85,1,85,1,85,1,85,1,85,3,85,1340,8,85,1,85,1,85,3,85,1344,
        8,85,1,85,1,85,3,85,1348,8,85,1,85,1,85,1,85,3,85,1353,8,85,1,85,
        1,85,1,85,1,85,1,85,1,85,1,85,1,85,1,85,1,85,1,85,1,85,1,85,1,85,
        1,85,1,85,1,85,1,85,3,85,1373,8,85,1,85,1,85,1,85,3,85,1378,8,85,
        1,85,1,85,1,85,3,85,1383,8,85,1,85,1,85,1,85,1,85,1,85,3,85,1390,
        8,85,1,85,3,85,1393,8,85,1,85,1,85,1,85,1,85,1,85,1,85,1,85,1,85,
        1,85,1,85,1,85,1,85,1,85,1,85,1,85,1,85,1,85,1,85,1,85,1,85,3,85,
        1415,8,85,1,85,1,85,1,85,1,85,1,85,1,85,1,85,1,85,1,85,1,85,3,85,
        1427,8,85,1,86,1,86,3,86,1431,8,86,1,86,1,86,1,87,1,87,1,87,1,87,
        3,87,1439,8,87,1,87,1,87,1,87,1,87,5,87,1445,8,87,10,87,12,87,1448,
        9,87,1,87,1,87,1,87,1,87,3,87,1454,8,87,1,88,1,88,3,88,1458,8,88,
        1,89,1,89,1,89,3,89,1463,8,89,1,89,3,89,1466,8,89,1,90,1,90,1,90,
        3,90,1471,8,90,1,91,1,91,1,91,1,91,1,92,1,92,3,92,1479,8,92,1,93,
        4,93,1482,8,93,11,93,12,93,1483,1,93,1,93,1,94,1,94,1,94,3,94,1491,
        8,94,1,94,1,94,1,94,1,94,3,94,1497,8,94,1,95,1,95,1,95,1,96,4,96,
        1503,8,96,11,96,12,96,1504,1,97,1,97,1,97,1,97,5,97,1511,8,97,10,
        97,12,97,1514,9,97,3,97,1516,8,97,1,98,1,98,1,98,5,98,1521,8,98,
        10,98,12,98,1524,9,98,1,99,1,99,5,99,1528,8,99,10,99,12,99,1531,
        9,99,1,99,3,99,1534,8,99,1,99,3,99,1537,8,99,1,100,1,100,1,100,1,
        100,3,100,1543,8,100,1,100,1,100,3,100,1547,8,100,1,100,1,100,1,
        101,1,101,3,101,1553,8,101,1,101,1,101,1,102,1,102,1,102,1,102,1,
        102,1,103,1,103,1,103,1,104,1,104,3,104,1567,8,104,1,105,1,105,1,
        105,1,105,3,105,1573,8,105,1,106,1,106,1,106,5,106,1578,8,106,10,
        106,12,106,1581,9,106,1,107,1,107,3,107,1585,8,107,1,107,3,107,1588,
        8,107,1,107,3,107,1591,8,107,1,107,1,107,1,108,4,108,1596,8,108,
        11,108,12,108,1597,1,109,1,109,1,109,1,109,1,109,1,110,4,110,1606,
        8,110,11,110,12,110,1607,1,111,1,111,1,111,1,111,1,111,1,111,1,111,
        1,111,1,111,1,111,1,111,1,111,1,111,1,111,1,111,3,111,1625,8,111,
        1,112,4,112,1628,8,112,11,112,12,112,1629,1,113,1,113,3,113,1634,
        8,113,1,114,3,114,1637,8,114,1,114,3,114,1640,8,114,1,114,1,114,
        1,114,1,114,1,114,3,114,1647,8,114,1,115,1,115,1,115,1,115,3,115,
        1653,8,115,1,116,1,116,1,116,1,116,5,116,1659,8,116,10,116,12,116,
        1662,9,116,1,116,1,116,1,117,3,117,1667,8,117,1,117,1,117,1,118,
        1,118,1,118,1,118,5,118,1675,8,118,10,118,12,118,1678,9,118,1,119,
        1,119,1,119,5,119,1683,8,119,10,119,12,119,1686,9,119,1,120,4,120,
        1689,8,120,11,120,12,120,1690,1,121,1,121,1,121,1,121,1,121,1,122,
        1,122,1,122,1,122,3,122,1702,8,122,1,122,1,122,3,122,1706,8,122,
        3,122,1708,8,122,1,123,1,123,1,123,3,123,1713,8,123,1,123,1,123,
        3,123,1717,8,123,1,124,1,124,1,124,5,124,1722,8,124,10,124,12,124,
        1725,9,124,1,125,1,125,1,125,1,125,1,126,1,126,3,126,1733,8,126,
        1,126,1,126,1,127,4,127,1738,8,127,11,127,12,127,1739,1,128,3,128,
        1743,8,128,1,128,3,128,1746,8,128,1,128,1,128,3,128,1750,8,128,1,
        129,4,129,1753,8,129,11,129,12,129,1754,1,130,1,130,1,131,1,131,
        1,131,1,131,1,131,1,131,1,131,1,131,1,131,3,131,1768,8,131,1,131,
        1,131,1,131,1,131,1,131,1,131,1,131,1,131,3,131,1778,8,131,1,132,
        1,132,1,132,1,132,1,132,3,132,1785,8,132,1,132,1,132,1,132,1,132,
        1,132,1,132,1,132,1,132,1,132,1,132,3,132,1797,8,132,1,133,1,133,
        1,133,5,133,1802,8,133,10,133,12,133,1805,9,133,1,134,1,134,1,134,
        1,134,1,135,1,135,1,135,5,135,1814,8,135,10,135,12,135,1817,9,135,
        1,136,1,136,1,136,3,136,1822,8,136,1,137,1,137,3,137,1826,8,137,
        1,138,1,138,3,138,1830,8,138,1,139,1,139,1,140,1,140,3,140,1836,
        8,140,1,141,1,141,1,141,1,141,3,141,1842,8,141,3,141,1844,8,141,
        1,142,1,142,1,142,5,142,1849,8,142,10,142,12,142,1852,9,142,1,143,
        3,143,1855,8,143,1,143,3,143,1858,8,143,1,143,1,143,3,143,1862,8,
        143,1,144,1,144,1,144,1,144,1,144,1,144,1,144,1,144,3,144,1872,8,
        144,1,145,3,145,1875,8,145,1,145,1,145,1,145,1,145,1,146,3,146,1882,
        8,146,1,146,3,146,1885,8,146,1,146,1,146,1,146,3,146,1890,8,146,
        1,146,1,146,1,146,3,146,1895,8,146,3,146,1897,8,146,1,147,3,147,
        1900,8,147,1,147,3,147,1903,8,147,1,147,1,147,1,147,1,148,3,148,
        1909,8,148,1,148,3,148,1912,8,148,1,148,1,148,1,148,1,149,1,149,
        1,149,1,149,1,149,1,149,1,149,3,149,1924,8,149,1,150,1,150,3,150,
        1928,8,150,1,151,3,151,1931,8,151,1,151,1,151,1,151,1,151,1,151,
        1,151,1,151,1,151,3,151,1941,8,151,1,152,3,152,1944,8,152,1,152,
        1,152,1,152,1,153,3,153,1950,8,153,1,153,1,153,1,153,1,154,1,154,
        1,154,1,154,1,154,1,154,1,154,1,154,1,154,1,154,1,154,1,154,1,154,
        1,154,1,154,1,154,1,154,1,154,1,154,1,154,1,154,1,154,3,154,1977,
        8,154,1,155,1,155,1,155,1,155,1,155,1,155,1,155,1,156,1,156,1,156,
        1,156,3,156,1990,8,156,1,156,1,156,1,157,1,157,3,157,1996,8,157,
        1,158,1,158,1,158,1,159,1,159,5,159,2003,8,159,10,159,12,159,2006,
        9,159,1,159,1,159,1,160,3,160,2011,8,160,1,160,3,160,2014,8,160,
        1,160,1,160,1,160,1,160,4,160,2020,8,160,11,160,12,160,2021,1,160,
        1,160,3,160,2026,8,160,1,161,1,161,5,161,2030,8,161,10,161,12,161,
        2033,9,161,1,161,4,161,2036,8,161,11,161,12,161,2037,1,162,1,162,
        5,162,2042,8,162,10,162,12,162,2045,9,162,1,162,1,162,1,163,1,163,
        1,163,1,163,5,163,2053,8,163,10,163,12,163,2056,9,163,1,163,3,163,
        2059,8,163,3,163,2061,8,163,1,163,1,163,1,164,1,164,1,164,1,164,
        5,164,2069,8,164,10,164,12,164,2072,9,164,1,164,1,164,1,165,3,165,
        2077,8,165,1,165,3,165,2080,8,165,1,165,1,165,1,166,1,166,1,167,
        1,167,1,167,1,168,1,168,5,168,2091,8,168,10,168,12,168,2094,9,168,
        1,168,1,168,1,169,3,169,2099,8,169,1,169,3,169,2102,8,169,1,169,
        3,169,2105,8,169,1,169,1,169,1,169,1,169,1,169,3,169,2112,8,169,
        1,169,1,169,1,169,3,169,2117,8,169,1,169,1,169,3,169,2121,8,169,
        1,169,1,169,3,169,2125,8,169,1,169,1,169,1,169,1,169,1,169,1,169,
        1,169,1,169,1,169,1,169,1,169,1,169,1,169,1,169,1,169,3,169,2142,
        8,169,1,169,3,169,2145,8,169,1,169,1,169,1,169,3,169,2150,8,169,
        1,169,1,169,3,169,2154,8,169,1,169,1,169,3,169,2158,8,169,1,169,
        1,169,1,169,1,169,1,169,1,169,1,169,3,169,2167,8,169,1,170,3,170,
        2170,8,170,1,170,1,170,1,170,3,170,2175,8,170,1,170,1,170,3,170,
        2179,8,170,1,170,1,170,1,170,3,170,2184,8,170,1,170,1,170,3,170,
        2188,8,170,3,170,2190,8,170,1,171,1,171,1,171,1,172,1,172,1,172,
        1,172,5,172,2199,8,172,10,172,12,172,2202,9,172,1,172,3,172,2205,
        8,172,3,172,2207,8,172,1,172,1,172,1,173,3,173,2212,8,173,1,173,
        1,173,1,173,3,173,2217,8,173,1,174,1,174,1,174,1,174,1,174,3,174,
        2224,8,174,1,174,1,174,1,175,1,175,3,175,2230,8,175,1,176,4,176,
        2233,8,176,11,176,12,176,2234,1,177,1,177,1,177,1,177,3,177,2241,
        8,177,1,177,1,177,3,177,2245,8,177,1,177,1,177,1,178,1,178,3,178,
        2251,8,178,1,179,1,179,1,179,5,179,2256,8,179,10,179,12,179,2259,
        9,179,1,180,1,180,1,180,1,180,1,180,5,180,2266,8,180,10,180,12,180,
        2269,9,180,3,180,2271,8,180,1,180,3,180,2274,8,180,1,181,1,181,1,
        181,3,181,2279,8,181,1,181,1,181,1,182,1,182,3,182,2285,8,182,1,
        182,1,182,5,182,2289,8,182,10,182,12,182,2292,9,182,1,182,1,182,
        1,182,1,182,3,182,2298,8,182,1,183,1,183,1,183,5,183,2303,8,183,
        10,183,12,183,2306,9,183,1,184,1,184,1,184,1,184,1,185,3,185,2313,
        8,185,1,185,1,185,3,185,2317,8,185,1,186,1,186,1,186,1,186,1,186,
        1,187,1,187,1,187,1,187,1,187,1,187,1,187,1,187,3,187,2332,8,187,
        1,187,1,187,3,187,2336,8,187,1,187,1,187,1,187,1,187,1,187,5,187,
        2343,8,187,10,187,12,187,2346,9,187,1,187,3,187,2349,8,187,1,187,
        1,187,3,187,2353,8,187,1,188,1,188,1,188,1,188,1,189,1,189,1,189,
        1,189,1,190,1,190,1,190,1,190,1,191,1,191,1,191,1,191,1,191,1,191,
        1,191,1,191,3,191,2375,8,191,1,192,1,192,1,193,1,193,1,193,1,193,
        3,193,2383,8,193,1,194,1,194,5,194,2387,8,194,10,194,12,194,2390,
        9,194,1,194,1,194,1,195,1,195,5,195,2396,8,195,10,195,12,195,2399,
        9,195,1,195,1,195,1,196,1,196,1,196,1,196,1,196,1,196,1,196,1,196,
        3,196,2411,8,196,1,197,1,197,1,197,1,197,3,197,2417,8,197,1,198,
        1,198,1,198,1,198,3,198,2423,8,198,1,198,3,198,2426,8,198,1,198,
        1,198,1,199,1,199,1,200,1,200,4,200,2434,8,200,11,200,12,200,2435,
        1,201,1,201,1,202,1,202,1,203,1,203,1,203,3,203,2445,8,203,1,203,
        3,203,2448,8,203,1,203,3,203,2451,8,203,1,203,1,203,3,203,2455,8,
        203,1,204,3,204,2458,8,204,1,204,1,204,1,204,3,204,2463,8,204,1,
        204,3,204,2466,8,204,1,204,3,204,2469,8,204,1,204,1,204,3,204,2473,
        8,204,1,205,1,205,1,205,3,205,2478,8,205,1,205,3,205,2481,8,205,
        1,205,3,205,2484,8,205,1,205,1,205,3,205,2488,8,205,1,206,1,206,
        1,206,3,206,2493,8,206,1,206,1,206,3,206,2497,8,206,1,207,1,207,
        1,207,1,207,3,207,2503,8,207,1,207,1,207,3,207,2507,8,207,1,207,
        1,207,3,207,2511,8,207,1,207,1,207,1,208,1,208,1,208,1,208,1,208,
        1,208,1,208,1,208,1,208,1,208,3,208,2525,8,208,1,209,1,209,1,209,
        1,210,1,210,1,210,1,210,1,210,1,210,1,210,1,210,3,210,2538,8,210,
        1,210,1,210,1,210,1,210,3,210,2544,8,210,1,211,1,211,1,211,1,211,
        1,211,1,212,1,212,1,212,1,212,1,212,1,212,1,212,1,212,1,212,1,212,
        1,212,1,212,3,212,2563,8,212,1,213,1,213,1,213,1,213,1,213,1,213,
        1,214,1,214,1,214,3,214,2574,8,214,1,214,1,214,3,214,2578,8,214,
        1,214,1,214,1,215,1,215,3,215,2584,8,215,1,215,1,215,3,215,2588,
        8,215,1,215,1,215,3,215,2592,8,215,1,215,1,215,1,215,1,215,1,215,
        3,215,2599,8,215,1,216,1,216,1,216,1,216,1,216,3,216,2606,8,216,
        1,216,3,216,2609,8,216,1,216,1,216,5,216,2613,8,216,10,216,12,216,
        2616,9,216,1,217,1,217,1,217,1,217,3,217,2622,8,217,1,217,1,217,
        1,217,3,217,2627,8,217,1,217,3,217,2630,8,217,1,217,1,217,1,217,
        1,217,1,217,1,217,3,217,2638,8,217,1,218,1,218,1,218,1,218,3,218,
        2644,8,218,1,219,1,219,3,219,2648,8,219,1,219,1,219,1,220,1,220,
        3,220,2654,8,220,1,220,1,220,3,220,2658,8,220,1,221,1,221,1,221,
        0,0,222,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,
        42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,
        86,88,90,92,94,96,98,100,102,104,106,108,110,112,114,116,118,120,
        122,124,126,128,130,132,134,136,138,140,142,144,146,148,150,152,
        154,156,158,160,162,164,166,168,170,172,174,176,178,180,182,184,
        186,188,190,192,194,196,198,200,202,204,206,208,210,212,214,216,
        218,220,222,224,226,228,230,232,234,236,238,240,242,244,246,248,
        250,252,254,256,258,260,262,264,266,268,270,272,274,276,278,280,
        282,284,286,288,290,292,294,296,298,300,302,304,306,308,310,312,
        314,316,318,320,322,324,326,328,330,332,334,336,338,340,342,344,
        346,348,350,352,354,356,358,360,362,364,366,368,370,372,374,376,
        378,380,382,384,386,388,390,392,394,396,398,400,402,404,406,408,
        410,412,414,416,418,420,422,424,426,428,430,432,434,436,438,440,
        442,0,19,8,0,21,21,24,24,55,55,63,63,83,83,87,87,99,100,104,104,
        2,0,34,34,45,45,3,0,54,54,72,72,80,80,1,0,156,157,2,0,146,147,158,
        159,1,0,135,136,1,0,137,139,14,0,18,18,21,21,24,24,29,29,34,34,45,
        45,55,55,63,63,68,68,83,83,87,87,91,91,99,100,104,104,2,0,14,14,
        32,32,2,0,15,15,103,103,12,0,9,9,15,15,41,41,57,57,66,66,73,73,75,
        79,84,84,90,90,103,103,107,107,109,109,2,0,40,40,53,53,2,0,17,17,
        94,94,2,0,137,137,148,148,2,0,54,54,72,72,2,0,42,42,96,96,19,0,9,
        9,13,13,17,19,21,31,33,34,36,37,39,47,50,50,52,57,59,59,62,63,65,
        68,70,70,72,74,76,80,82,84,87,105,107,109,112,112,1,0,79,80,20,0,
        10,12,14,16,20,20,32,32,35,35,38,38,48,49,51,51,58,58,60,61,64,64,
        69,69,71,71,75,75,81,81,85,86,102,102,106,106,110,111,113,114,2932,
        0,445,1,0,0,0,2,469,1,0,0,0,4,481,1,0,0,0,6,495,1,0,0,0,8,497,1,
        0,0,0,10,507,1,0,0,0,12,513,1,0,0,0,14,518,1,0,0,0,16,520,1,0,0,
        0,18,522,1,0,0,0,20,528,1,0,0,0,22,530,1,0,0,0,24,541,1,0,0,0,26,
        552,1,0,0,0,28,569,1,0,0,0,30,574,1,0,0,0,32,584,1,0,0,0,34,597,
        1,0,0,0,36,599,1,0,0,0,38,607,1,0,0,0,40,615,1,0,0,0,42,623,1,0,
        0,0,44,631,1,0,0,0,46,639,1,0,0,0,48,647,1,0,0,0,50,655,1,0,0,0,
        52,663,1,0,0,0,54,675,1,0,0,0,56,686,1,0,0,0,58,694,1,0,0,0,60,702,
        1,0,0,0,62,714,1,0,0,0,64,722,1,0,0,0,66,737,1,0,0,0,68,761,1,0,
        0,0,70,763,1,0,0,0,72,768,1,0,0,0,74,927,1,0,0,0,76,931,1,0,0,0,
        78,933,1,0,0,0,80,937,1,0,0,0,82,945,1,0,0,0,84,961,1,0,0,0,86,965,
        1,0,0,0,88,967,1,0,0,0,90,977,1,0,0,0,92,979,1,0,0,0,94,988,1,0,
        0,0,96,1001,1,0,0,0,98,1008,1,0,0,0,100,1010,1,0,0,0,102,1029,1,
        0,0,0,104,1031,1,0,0,0,106,1040,1,0,0,0,108,1053,1,0,0,0,110,1055,
        1,0,0,0,112,1076,1,0,0,0,114,1085,1,0,0,0,116,1102,1,0,0,0,118,1113,
        1,0,0,0,120,1118,1,0,0,0,122,1135,1,0,0,0,124,1137,1,0,0,0,126,1146,
        1,0,0,0,128,1151,1,0,0,0,130,1161,1,0,0,0,132,1163,1,0,0,0,134,1166,
        1,0,0,0,136,1177,1,0,0,0,138,1189,1,0,0,0,140,1191,1,0,0,0,142,1196,
        1,0,0,0,144,1199,1,0,0,0,146,1214,1,0,0,0,148,1223,1,0,0,0,150,1234,
        1,0,0,0,152,1236,1,0,0,0,154,1243,1,0,0,0,156,1252,1,0,0,0,158,1254,
        1,0,0,0,160,1258,1,0,0,0,162,1279,1,0,0,0,164,1286,1,0,0,0,166,1288,
        1,0,0,0,168,1294,1,0,0,0,170,1426,1,0,0,0,172,1428,1,0,0,0,174,1453,
        1,0,0,0,176,1457,1,0,0,0,178,1459,1,0,0,0,180,1470,1,0,0,0,182,1472,
        1,0,0,0,184,1478,1,0,0,0,186,1481,1,0,0,0,188,1496,1,0,0,0,190,1498,
        1,0,0,0,192,1502,1,0,0,0,194,1515,1,0,0,0,196,1517,1,0,0,0,198,1536,
        1,0,0,0,200,1538,1,0,0,0,202,1550,1,0,0,0,204,1556,1,0,0,0,206,1561,
        1,0,0,0,208,1566,1,0,0,0,210,1568,1,0,0,0,212,1574,1,0,0,0,214,1582,
        1,0,0,0,216,1595,1,0,0,0,218,1599,1,0,0,0,220,1605,1,0,0,0,222,1624,
        1,0,0,0,224,1627,1,0,0,0,226,1633,1,0,0,0,228,1636,1,0,0,0,230,1648,
        1,0,0,0,232,1654,1,0,0,0,234,1666,1,0,0,0,236,1670,1,0,0,0,238,1679,
        1,0,0,0,240,1688,1,0,0,0,242,1692,1,0,0,0,244,1707,1,0,0,0,246,1716,
        1,0,0,0,248,1718,1,0,0,0,250,1726,1,0,0,0,252,1730,1,0,0,0,254,1737,
        1,0,0,0,256,1742,1,0,0,0,258,1752,1,0,0,0,260,1756,1,0,0,0,262,1777,
        1,0,0,0,264,1784,1,0,0,0,266,1798,1,0,0,0,268,1806,1,0,0,0,270,1810,
        1,0,0,0,272,1818,1,0,0,0,274,1825,1,0,0,0,276,1829,1,0,0,0,278,1831,
        1,0,0,0,280,1835,1,0,0,0,282,1843,1,0,0,0,284,1845,1,0,0,0,286,1861,
        1,0,0,0,288,1871,1,0,0,0,290,1874,1,0,0,0,292,1881,1,0,0,0,294,1899,
        1,0,0,0,296,1908,1,0,0,0,298,1923,1,0,0,0,300,1927,1,0,0,0,302,1930,
        1,0,0,0,304,1943,1,0,0,0,306,1949,1,0,0,0,308,1976,1,0,0,0,310,1978,
        1,0,0,0,312,1985,1,0,0,0,314,1995,1,0,0,0,316,1997,1,0,0,0,318,2000,
        1,0,0,0,320,2010,1,0,0,0,322,2027,1,0,0,0,324,2039,1,0,0,0,326,2048,
        1,0,0,0,328,2064,1,0,0,0,330,2076,1,0,0,0,332,2083,1,0,0,0,334,2085,
        1,0,0,0,336,2088,1,0,0,0,338,2098,1,0,0,0,340,2169,1,0,0,0,342,2191,
        1,0,0,0,344,2194,1,0,0,0,346,2211,1,0,0,0,348,2218,1,0,0,0,350,2229,
        1,0,0,0,352,2232,1,0,0,0,354,2236,1,0,0,0,356,2250,1,0,0,0,358,2252,
        1,0,0,0,360,2260,1,0,0,0,362,2278,1,0,0,0,364,2297,1,0,0,0,366,2299,
        1,0,0,0,368,2307,1,0,0,0,370,2316,1,0,0,0,372,2318,1,0,0,0,374,2352,
        1,0,0,0,376,2354,1,0,0,0,378,2358,1,0,0,0,380,2362,1,0,0,0,382,2374,
        1,0,0,0,384,2376,1,0,0,0,386,2382,1,0,0,0,388,2384,1,0,0,0,390,2393,
        1,0,0,0,392,2410,1,0,0,0,394,2416,1,0,0,0,396,2418,1,0,0,0,398,2429,
        1,0,0,0,400,2431,1,0,0,0,402,2437,1,0,0,0,404,2439,1,0,0,0,406,2441,
        1,0,0,0,408,2457,1,0,0,0,410,2474,1,0,0,0,412,2489,1,0,0,0,414,2498,
        1,0,0,0,416,2514,1,0,0,0,418,2526,1,0,0,0,420,2529,1,0,0,0,422,2545,
        1,0,0,0,424,2550,1,0,0,0,426,2564,1,0,0,0,428,2570,1,0,0,0,430,2581,
        1,0,0,0,432,2605,1,0,0,0,434,2617,1,0,0,0,436,2639,1,0,0,0,438,2645,
        1,0,0,0,440,2651,1,0,0,0,442,2659,1,0,0,0,444,446,5,1,0,0,445,444,
        1,0,0,0,445,446,1,0,0,0,446,448,1,0,0,0,447,449,3,216,108,0,448,
        447,1,0,0,0,448,449,1,0,0,0,449,451,1,0,0,0,450,452,3,220,110,0,
        451,450,1,0,0,0,451,452,1,0,0,0,452,456,1,0,0,0,453,455,3,348,174,
        0,454,453,1,0,0,0,455,458,1,0,0,0,456,454,1,0,0,0,456,457,1,0,0,
        0,457,460,1,0,0,0,458,456,1,0,0,0,459,461,3,224,112,0,460,459,1,
        0,0,0,460,461,1,0,0,0,461,462,1,0,0,0,462,463,5,0,0,1,463,1,1,0,
        0,0,464,466,3,442,221,0,465,467,3,22,11,0,466,465,1,0,0,0,466,467,
        1,0,0,0,467,470,1,0,0,0,468,470,3,230,115,0,469,464,1,0,0,0,469,
        468,1,0,0,0,470,478,1,0,0,0,471,472,5,131,0,0,472,474,3,442,221,
        0,473,475,3,22,11,0,474,473,1,0,0,0,474,475,1,0,0,0,475,477,1,0,
        0,0,476,471,1,0,0,0,477,480,1,0,0,0,478,476,1,0,0,0,478,479,1,0,
        0,0,479,3,1,0,0,0,480,478,1,0,0,0,481,487,3,6,3,0,482,486,5,148,
        0,0,483,486,3,324,162,0,484,486,5,137,0,0,485,482,1,0,0,0,485,483,
        1,0,0,0,485,484,1,0,0,0,486,489,1,0,0,0,487,485,1,0,0,0,487,488,
        1,0,0,0,488,5,1,0,0,0,489,487,1,0,0,0,490,496,3,12,6,0,491,496,3,
        20,10,0,492,493,5,108,0,0,493,496,5,137,0,0,494,496,3,8,4,0,495,
        490,1,0,0,0,495,491,1,0,0,0,495,492,1,0,0,0,495,494,1,0,0,0,496,
        7,1,0,0,0,497,498,5,129,0,0,498,501,3,10,5,0,499,500,5,132,0,0,500,
        502,3,10,5,0,501,499,1,0,0,0,502,503,1,0,0,0,503,501,1,0,0,0,503,
        504,1,0,0,0,504,505,1,0,0,0,505,506,5,130,0,0,506,9,1,0,0,0,507,
        509,3,4,2,0,508,510,3,442,221,0,509,508,1,0,0,0,509,510,1,0,0,0,
        510,11,1,0,0,0,511,514,3,14,7,0,512,514,5,18,0,0,513,511,1,0,0,0,
        513,512,1,0,0,0,514,13,1,0,0,0,515,519,3,16,8,0,516,519,3,18,9,0,
        517,519,5,29,0,0,518,515,1,0,0,0,518,516,1,0,0,0,518,517,1,0,0,0,
        519,15,1,0,0,0,520,521,7,0,0,0,521,17,1,0,0,0,522,523,7,1,0,0,523,
        19,1,0,0,0,524,529,3,2,1,0,525,529,5,68,0,0,526,529,5,35,0,0,527,
        529,5,91,0,0,528,524,1,0,0,0,528,525,1,0,0,0,528,526,1,0,0,0,528,
        527,1,0,0,0,529,21,1,0,0,0,530,531,5,146,0,0,531,536,3,4,2,0,532,
        533,5,132,0,0,533,535,3,4,2,0,534,532,1,0,0,0,535,538,1,0,0,0,536,
        534,1,0,0,0,536,537,1,0,0,0,537,539,1,0,0,0,538,536,1,0,0,0,539,
        540,5,147,0,0,540,23,1,0,0,0,541,546,3,26,13,0,542,543,5,132,0,0,
        543,545,3,26,13,0,544,542,1,0,0,0,545,548,1,0,0,0,546,544,1,0,0,
        0,546,547,1,0,0,0,547,25,1,0,0,0,548,546,1,0,0,0,549,550,3,442,221,
        0,550,551,5,133,0,0,551,553,1,0,0,0,552,549,1,0,0,0,552,553,1,0,
        0,0,553,555,1,0,0,0,554,556,7,2,0,0,555,554,1,0,0,0,555,556,1,0,
        0,0,556,563,1,0,0,0,557,564,3,28,14,0,558,561,5,106,0,0,559,561,
        3,4,2,0,560,558,1,0,0,0,560,559,1,0,0,0,561,562,1,0,0,0,562,564,
        3,28,14,0,563,557,1,0,0,0,563,560,1,0,0,0,564,27,1,0,0,0,565,570,
        3,32,16,0,566,570,3,30,15,0,567,568,5,80,0,0,568,570,3,30,15,0,569,
        565,1,0,0,0,569,566,1,0,0,0,569,567,1,0,0,0,570,29,1,0,0,0,571,575,
        3,120,60,0,572,575,3,132,66,0,573,575,3,36,18,0,574,571,1,0,0,0,
        574,572,1,0,0,0,574,573,1,0,0,0,575,31,1,0,0,0,576,577,3,68,34,0,
        577,578,3,34,17,0,578,579,3,28,14,0,579,585,1,0,0,0,580,581,3,68,
        34,0,581,582,5,170,0,0,582,583,3,76,38,0,583,585,1,0,0,0,584,576,
        1,0,0,0,584,580,1,0,0,0,585,33,1,0,0,0,586,598,5,145,0,0,587,598,
        5,160,0,0,588,598,5,161,0,0,589,598,5,162,0,0,590,598,5,163,0,0,
        591,598,5,164,0,0,592,598,5,165,0,0,593,598,5,166,0,0,594,598,5,
        167,0,0,595,598,5,169,0,0,596,598,3,380,190,0,597,586,1,0,0,0,597,
        587,1,0,0,0,597,588,1,0,0,0,597,589,1,0,0,0,597,590,1,0,0,0,597,
        591,1,0,0,0,597,592,1,0,0,0,597,593,1,0,0,0,597,594,1,0,0,0,597,
        595,1,0,0,0,597,596,1,0,0,0,598,35,1,0,0,0,599,605,3,38,19,0,600,
        601,5,148,0,0,601,602,3,76,38,0,602,603,5,133,0,0,603,604,3,76,38,
        0,604,606,1,0,0,0,605,600,1,0,0,0,605,606,1,0,0,0,606,37,1,0,0,0,
        607,613,3,40,20,0,608,611,5,150,0,0,609,612,3,38,19,0,610,612,3,
        78,39,0,611,609,1,0,0,0,611,610,1,0,0,0,612,614,1,0,0,0,613,608,
        1,0,0,0,613,614,1,0,0,0,614,39,1,0,0,0,615,620,3,42,21,0,616,617,
        5,154,0,0,617,619,3,42,21,0,618,616,1,0,0,0,619,622,1,0,0,0,620,
        618,1,0,0,0,620,621,1,0,0,0,621,41,1,0,0,0,622,620,1,0,0,0,623,628,
        3,44,22,0,624,625,5,153,0,0,625,627,3,44,22,0,626,624,1,0,0,0,627,
        630,1,0,0,0,628,626,1,0,0,0,628,629,1,0,0,0,629,43,1,0,0,0,630,628,
        1,0,0,0,631,636,3,46,23,0,632,633,5,141,0,0,633,635,3,46,23,0,634,
        632,1,0,0,0,635,638,1,0,0,0,636,634,1,0,0,0,636,637,1,0,0,0,637,
        45,1,0,0,0,638,636,1,0,0,0,639,644,3,48,24,0,640,641,5,142,0,0,641,
        643,3,48,24,0,642,640,1,0,0,0,643,646,1,0,0,0,644,642,1,0,0,0,644,
        645,1,0,0,0,645,47,1,0,0,0,646,644,1,0,0,0,647,652,3,50,25,0,648,
        649,5,140,0,0,649,651,3,50,25,0,650,648,1,0,0,0,651,654,1,0,0,0,
        652,650,1,0,0,0,652,653,1,0,0,0,653,49,1,0,0,0,654,652,1,0,0,0,655,
        660,3,52,26,0,656,657,7,3,0,0,657,659,3,52,26,0,658,656,1,0,0,0,
        659,662,1,0,0,0,660,658,1,0,0,0,660,661,1,0,0,0,661,51,1,0,0,0,662,
        660,1,0,0,0,663,672,3,54,27,0,664,665,7,4,0,0,665,671,3,54,27,0,
        666,667,5,59,0,0,667,671,3,114,57,0,668,669,5,13,0,0,669,671,3,4,
        2,0,670,664,1,0,0,0,670,666,1,0,0,0,670,668,1,0,0,0,671,674,1,0,
        0,0,672,670,1,0,0,0,672,673,1,0,0,0,673,53,1,0,0,0,674,672,1,0,0,
        0,675,683,3,56,28,0,676,679,5,168,0,0,677,679,3,378,189,0,678,676,
        1,0,0,0,678,677,1,0,0,0,679,680,1,0,0,0,680,682,3,56,28,0,681,678,
        1,0,0,0,682,685,1,0,0,0,683,681,1,0,0,0,683,684,1,0,0,0,684,55,1,
        0,0,0,685,683,1,0,0,0,686,691,3,58,29,0,687,688,7,5,0,0,688,690,
        3,58,29,0,689,687,1,0,0,0,690,693,1,0,0,0,691,689,1,0,0,0,691,692,
        1,0,0,0,692,57,1,0,0,0,693,691,1,0,0,0,694,699,3,60,30,0,695,696,
        7,6,0,0,696,698,3,60,30,0,697,695,1,0,0,0,698,701,1,0,0,0,699,697,
        1,0,0,0,699,700,1,0,0,0,700,59,1,0,0,0,701,699,1,0,0,0,702,712,3,
        66,33,0,703,704,5,93,0,0,704,709,5,125,0,0,705,707,3,62,31,0,706,
        708,5,132,0,0,707,706,1,0,0,0,707,708,1,0,0,0,708,710,1,0,0,0,709,
        705,1,0,0,0,709,710,1,0,0,0,710,711,1,0,0,0,711,713,5,126,0,0,712,
        703,1,0,0,0,712,713,1,0,0,0,713,61,1,0,0,0,714,719,3,64,32,0,715,
        716,5,132,0,0,716,718,3,64,32,0,717,715,1,0,0,0,718,721,1,0,0,0,
        719,717,1,0,0,0,719,720,1,0,0,0,720,63,1,0,0,0,721,719,1,0,0,0,722,
        724,3,28,14,0,723,725,3,190,95,0,724,723,1,0,0,0,724,725,1,0,0,0,
        725,726,1,0,0,0,726,727,3,376,188,0,727,728,3,76,38,0,728,65,1,0,
        0,0,729,738,3,68,34,0,730,732,3,68,34,0,731,730,1,0,0,0,731,732,
        1,0,0,0,732,733,1,0,0,0,733,735,5,171,0,0,734,736,3,68,34,0,735,
        734,1,0,0,0,735,736,1,0,0,0,736,738,1,0,0,0,737,729,1,0,0,0,737,
        731,1,0,0,0,738,67,1,0,0,0,739,762,3,70,35,0,740,762,3,72,36,0,741,
        742,5,135,0,0,742,762,3,68,34,0,743,744,5,136,0,0,744,762,3,68,34,
        0,745,746,5,143,0,0,746,762,3,68,34,0,747,748,5,144,0,0,748,762,
        3,68,34,0,749,750,5,151,0,0,750,762,3,68,34,0,751,752,5,152,0,0,
        752,762,3,68,34,0,753,754,5,16,0,0,754,762,3,68,34,0,755,756,5,140,
        0,0,756,762,3,68,34,0,757,758,5,137,0,0,758,762,3,68,34,0,759,760,
        5,142,0,0,760,762,3,68,34,0,761,739,1,0,0,0,761,740,1,0,0,0,761,
        741,1,0,0,0,761,743,1,0,0,0,761,745,1,0,0,0,761,747,1,0,0,0,761,
        749,1,0,0,0,761,751,1,0,0,0,761,753,1,0,0,0,761,755,1,0,0,0,761,
        757,1,0,0,0,761,759,1,0,0,0,762,69,1,0,0,0,763,764,5,129,0,0,764,
        765,3,4,2,0,765,766,5,130,0,0,766,767,3,68,34,0,767,71,1,0,0,0,768,
        770,3,74,37,0,769,771,5,143,0,0,770,769,1,0,0,0,770,771,1,0,0,0,
        771,775,1,0,0,0,772,774,3,82,41,0,773,772,1,0,0,0,774,777,1,0,0,
        0,775,773,1,0,0,0,775,776,1,0,0,0,776,779,1,0,0,0,777,775,1,0,0,
        0,778,780,5,143,0,0,779,778,1,0,0,0,779,780,1,0,0,0,780,803,1,0,
        0,0,781,788,3,80,40,0,782,788,3,438,219,0,783,788,5,151,0,0,784,
        788,5,152,0,0,785,786,5,155,0,0,786,788,3,442,221,0,787,781,1,0,
        0,0,787,782,1,0,0,0,787,783,1,0,0,0,787,784,1,0,0,0,787,785,1,0,
        0,0,788,790,1,0,0,0,789,791,5,143,0,0,790,789,1,0,0,0,790,791,1,
        0,0,0,791,795,1,0,0,0,792,794,3,82,41,0,793,792,1,0,0,0,794,797,
        1,0,0,0,795,793,1,0,0,0,795,796,1,0,0,0,796,799,1,0,0,0,797,795,
        1,0,0,0,798,800,5,143,0,0,799,798,1,0,0,0,799,800,1,0,0,0,800,802,
        1,0,0,0,801,787,1,0,0,0,802,805,1,0,0,0,803,801,1,0,0,0,803,804,
        1,0,0,0,804,73,1,0,0,0,805,803,1,0,0,0,806,928,3,382,191,0,807,809,
        3,442,221,0,808,810,3,22,11,0,809,808,1,0,0,0,809,810,1,0,0,0,810,
        928,1,0,0,0,811,812,5,129,0,0,812,813,3,28,14,0,813,814,5,130,0,
        0,814,928,1,0,0,0,815,928,3,86,43,0,816,928,3,230,115,0,817,928,
        5,115,0,0,818,928,5,94,0,0,819,829,5,17,0,0,820,821,5,131,0,0,821,
        823,3,442,221,0,822,824,3,22,11,0,823,822,1,0,0,0,823,824,1,0,0,
        0,824,830,1,0,0,0,825,826,5,127,0,0,826,827,3,88,44,0,827,828,5,
        128,0,0,828,830,1,0,0,0,829,820,1,0,0,0,829,825,1,0,0,0,830,928,
        1,0,0,0,831,860,5,66,0,0,832,854,3,4,2,0,833,855,3,440,220,0,834,
        855,3,90,45,0,835,836,5,127,0,0,836,837,3,88,44,0,837,841,5,128,
        0,0,838,840,3,324,162,0,839,838,1,0,0,0,840,843,1,0,0,0,841,839,
        1,0,0,0,841,842,1,0,0,0,842,845,1,0,0,0,843,841,1,0,0,0,844,846,
        3,326,163,0,845,844,1,0,0,0,845,846,1,0,0,0,846,855,1,0,0,0,847,
        849,3,324,162,0,848,847,1,0,0,0,849,850,1,0,0,0,850,848,1,0,0,0,
        850,851,1,0,0,0,851,852,1,0,0,0,852,853,3,326,163,0,853,855,1,0,
        0,0,854,833,1,0,0,0,854,834,1,0,0,0,854,835,1,0,0,0,854,848,1,0,
        0,0,855,861,1,0,0,0,856,861,3,104,52,0,857,858,3,324,162,0,858,859,
        3,326,163,0,859,861,1,0,0,0,860,832,1,0,0,0,860,856,1,0,0,0,860,
        857,1,0,0,0,861,928,1,0,0,0,862,863,5,129,0,0,863,866,3,26,13,0,
        864,865,5,132,0,0,865,867,3,26,13,0,866,864,1,0,0,0,867,868,1,0,
        0,0,868,866,1,0,0,0,868,869,1,0,0,0,869,870,1,0,0,0,870,871,5,130,
        0,0,871,928,1,0,0,0,872,873,5,98,0,0,873,877,5,129,0,0,874,878,3,
        110,55,0,875,878,3,4,2,0,876,878,5,108,0,0,877,874,1,0,0,0,877,875,
        1,0,0,0,877,876,1,0,0,0,878,879,1,0,0,0,879,928,5,130,0,0,880,881,
        5,25,0,0,881,882,5,129,0,0,882,883,3,28,14,0,883,884,5,130,0,0,884,
        928,1,0,0,0,885,886,5,101,0,0,886,887,5,129,0,0,887,888,3,28,14,
        0,888,889,5,130,0,0,889,928,1,0,0,0,890,895,5,30,0,0,891,892,5,129,
        0,0,892,893,3,4,2,0,893,894,5,130,0,0,894,896,1,0,0,0,895,891,1,
        0,0,0,895,896,1,0,0,0,896,928,1,0,0,0,897,899,5,15,0,0,898,897,1,
        0,0,0,898,899,1,0,0,0,899,900,1,0,0,0,900,906,5,31,0,0,901,903,5,
        129,0,0,902,904,3,124,62,0,903,902,1,0,0,0,903,904,1,0,0,0,904,905,
        1,0,0,0,905,907,5,130,0,0,906,901,1,0,0,0,906,907,1,0,0,0,907,908,
        1,0,0,0,908,928,3,172,86,0,909,910,5,88,0,0,910,911,5,129,0,0,911,
        912,3,4,2,0,912,913,5,130,0,0,913,928,1,0,0,0,914,915,5,64,0,0,915,
        921,5,129,0,0,916,917,3,442,221,0,917,918,5,131,0,0,918,920,1,0,
        0,0,919,916,1,0,0,0,920,923,1,0,0,0,921,919,1,0,0,0,921,922,1,0,
        0,0,922,924,1,0,0,0,923,921,1,0,0,0,924,925,3,442,221,0,925,926,
        5,130,0,0,926,928,1,0,0,0,927,806,1,0,0,0,927,807,1,0,0,0,927,811,
        1,0,0,0,927,815,1,0,0,0,927,816,1,0,0,0,927,817,1,0,0,0,927,818,
        1,0,0,0,927,819,1,0,0,0,927,831,1,0,0,0,927,862,1,0,0,0,927,872,
        1,0,0,0,927,880,1,0,0,0,927,885,1,0,0,0,927,890,1,0,0,0,927,898,
        1,0,0,0,927,909,1,0,0,0,927,914,1,0,0,0,928,75,1,0,0,0,929,932,3,
        28,14,0,930,932,3,78,39,0,931,929,1,0,0,0,931,930,1,0,0,0,932,77,
        1,0,0,0,933,934,5,95,0,0,934,935,3,28,14,0,935,79,1,0,0,0,936,938,
        5,148,0,0,937,936,1,0,0,0,937,938,1,0,0,0,938,939,1,0,0,0,939,940,
        5,131,0,0,940,942,3,442,221,0,941,943,3,22,11,0,942,941,1,0,0,0,
        942,943,1,0,0,0,943,81,1,0,0,0,944,946,5,148,0,0,945,944,1,0,0,0,
        945,946,1,0,0,0,946,947,1,0,0,0,947,948,5,127,0,0,948,953,3,84,42,
        0,949,950,5,132,0,0,950,952,3,84,42,0,951,949,1,0,0,0,952,955,1,
        0,0,0,953,951,1,0,0,0,953,954,1,0,0,0,954,956,1,0,0,0,955,953,1,
        0,0,0,956,957,5,128,0,0,957,83,1,0,0,0,958,959,3,442,221,0,959,960,
        5,133,0,0,960,962,1,0,0,0,961,958,1,0,0,0,961,962,1,0,0,0,962,963,
        1,0,0,0,963,964,3,28,14,0,964,85,1,0,0,0,965,966,7,7,0,0,966,87,
        1,0,0,0,967,972,3,28,14,0,968,969,5,132,0,0,969,971,3,28,14,0,970,
        968,1,0,0,0,971,974,1,0,0,0,972,970,1,0,0,0,972,973,1,0,0,0,973,
        89,1,0,0,0,974,972,1,0,0,0,975,978,3,92,46,0,976,978,3,100,50,0,
        977,975,1,0,0,0,977,976,1,0,0,0,978,91,1,0,0,0,979,984,5,125,0,0,
        980,982,3,94,47,0,981,983,5,132,0,0,982,981,1,0,0,0,982,983,1,0,
        0,0,983,985,1,0,0,0,984,980,1,0,0,0,984,985,1,0,0,0,985,986,1,0,
        0,0,986,987,5,126,0,0,987,93,1,0,0,0,988,993,3,96,48,0,989,990,5,
        132,0,0,990,992,3,96,48,0,991,989,1,0,0,0,992,995,1,0,0,0,993,991,
        1,0,0,0,993,994,1,0,0,0,994,95,1,0,0,0,995,993,1,0,0,0,996,1002,
        3,442,221,0,997,998,5,127,0,0,998,999,3,28,14,0,999,1000,5,128,0,
        0,1000,1002,1,0,0,0,1001,996,1,0,0,0,1001,997,1,0,0,0,1002,1003,
        1,0,0,0,1003,1004,5,145,0,0,1004,1005,3,98,49,0,1005,97,1,0,0,0,
        1006,1009,3,28,14,0,1007,1009,3,90,45,0,1008,1006,1,0,0,0,1008,1007,
        1,0,0,0,1009,99,1,0,0,0,1010,1011,5,125,0,0,1011,1016,3,102,51,0,
        1012,1013,5,132,0,0,1013,1015,3,102,51,0,1014,1012,1,0,0,0,1015,
        1018,1,0,0,0,1016,1014,1,0,0,0,1016,1017,1,0,0,0,1017,1020,1,0,0,
        0,1018,1016,1,0,0,0,1019,1021,5,132,0,0,1020,1019,1,0,0,0,1020,1021,
        1,0,0,0,1021,1022,1,0,0,0,1022,1023,5,126,0,0,1023,101,1,0,0,0,1024,
        1030,3,30,15,0,1025,1026,5,125,0,0,1026,1027,3,88,44,0,1027,1028,
        5,126,0,0,1028,1030,1,0,0,0,1029,1024,1,0,0,0,1029,1025,1,0,0,0,
        1030,103,1,0,0,0,1031,1036,5,125,0,0,1032,1034,3,106,53,0,1033,1035,
        5,132,0,0,1034,1033,1,0,0,0,1034,1035,1,0,0,0,1035,1037,1,0,0,0,
        1036,1032,1,0,0,0,1036,1037,1,0,0,0,1037,1038,1,0,0,0,1038,1039,
        5,126,0,0,1039,105,1,0,0,0,1040,1045,3,108,54,0,1041,1042,5,132,
        0,0,1042,1044,3,108,54,0,1043,1041,1,0,0,0,1044,1047,1,0,0,0,1045,
        1043,1,0,0,0,1045,1046,1,0,0,0,1046,107,1,0,0,0,1047,1045,1,0,0,
        0,1048,1054,3,72,36,0,1049,1050,3,442,221,0,1050,1051,5,145,0,0,
        1051,1052,3,28,14,0,1052,1054,1,0,0,0,1053,1048,1,0,0,0,1053,1049,
        1,0,0,0,1054,109,1,0,0,0,1055,1064,3,442,221,0,1056,1058,3,112,56,
        0,1057,1056,1,0,0,0,1057,1058,1,0,0,0,1058,1065,1,0,0,0,1059,1060,
        5,149,0,0,1060,1062,3,442,221,0,1061,1063,3,112,56,0,1062,1061,1,
        0,0,0,1062,1063,1,0,0,0,1063,1065,1,0,0,0,1064,1057,1,0,0,0,1064,
        1059,1,0,0,0,1065,1073,1,0,0,0,1066,1067,5,131,0,0,1067,1069,3,442,
        221,0,1068,1070,3,112,56,0,1069,1068,1,0,0,0,1069,1070,1,0,0,0,1070,
        1072,1,0,0,0,1071,1066,1,0,0,0,1072,1075,1,0,0,0,1073,1071,1,0,0,
        0,1073,1074,1,0,0,0,1074,111,1,0,0,0,1075,1073,1,0,0,0,1076,1080,
        5,146,0,0,1077,1079,5,132,0,0,1078,1077,1,0,0,0,1079,1082,1,0,0,
        0,1080,1078,1,0,0,0,1080,1081,1,0,0,0,1081,1083,1,0,0,0,1082,1080,
        1,0,0,0,1083,1084,5,147,0,0,1084,113,1,0,0,0,1085,1090,3,6,3,0,1086,
        1089,3,324,162,0,1087,1089,5,137,0,0,1088,1086,1,0,0,0,1088,1087,
        1,0,0,0,1089,1092,1,0,0,0,1090,1088,1,0,0,0,1090,1091,1,0,0,0,1091,
        1094,1,0,0,0,1092,1090,1,0,0,0,1093,1095,5,148,0,0,1094,1093,1,0,
        0,0,1094,1095,1,0,0,0,1095,1097,1,0,0,0,1096,1098,3,116,58,0,1097,
        1096,1,0,0,0,1097,1098,1,0,0,0,1098,1100,1,0,0,0,1099,1101,3,442,
        221,0,1100,1099,1,0,0,0,1100,1101,1,0,0,0,1101,115,1,0,0,0,1102,
        1103,5,125,0,0,1103,1108,3,118,59,0,1104,1105,5,132,0,0,1105,1107,
        3,118,59,0,1106,1104,1,0,0,0,1107,1110,1,0,0,0,1108,1106,1,0,0,0,
        1108,1109,1,0,0,0,1109,1111,1,0,0,0,1110,1108,1,0,0,0,1111,1112,
        5,126,0,0,1112,117,1,0,0,0,1113,1114,3,442,221,0,1114,1115,5,133,
        0,0,1115,1116,3,28,14,0,1116,119,1,0,0,0,1117,1119,5,15,0,0,1118,
        1117,1,0,0,0,1118,1119,1,0,0,0,1119,1120,1,0,0,0,1120,1121,3,122,
        61,0,1121,1122,3,376,188,0,1122,1123,3,130,65,0,1123,121,1,0,0,0,
        1124,1125,5,129,0,0,1125,1136,5,130,0,0,1126,1127,5,129,0,0,1127,
        1128,3,124,62,0,1128,1129,5,130,0,0,1129,1136,1,0,0,0,1130,1131,
        5,129,0,0,1131,1132,3,128,64,0,1132,1133,5,130,0,0,1133,1136,1,0,
        0,0,1134,1136,3,442,221,0,1135,1124,1,0,0,0,1135,1126,1,0,0,0,1135,
        1130,1,0,0,0,1135,1134,1,0,0,0,1136,123,1,0,0,0,1137,1142,3,126,
        63,0,1138,1139,5,132,0,0,1139,1141,3,126,63,0,1140,1138,1,0,0,0,
        1141,1144,1,0,0,0,1142,1140,1,0,0,0,1142,1143,1,0,0,0,1143,125,1,
        0,0,0,1144,1142,1,0,0,0,1145,1147,7,2,0,0,1146,1145,1,0,0,0,1146,
        1147,1,0,0,0,1147,1148,1,0,0,0,1148,1149,3,4,2,0,1149,1150,3,442,
        221,0,1150,127,1,0,0,0,1151,1156,3,442,221,0,1152,1153,5,132,0,0,
        1153,1155,3,442,221,0,1154,1152,1,0,0,0,1155,1158,1,0,0,0,1156,1154,
        1,0,0,0,1156,1157,1,0,0,0,1157,129,1,0,0,0,1158,1156,1,0,0,0,1159,
        1162,3,76,38,0,1160,1162,3,172,86,0,1161,1159,1,0,0,0,1161,1160,
        1,0,0,0,1162,131,1,0,0,0,1163,1164,3,134,67,0,1164,1165,3,136,68,
        0,1165,133,1,0,0,0,1166,1168,5,48,0,0,1167,1169,3,4,2,0,1168,1167,
        1,0,0,0,1168,1169,1,0,0,0,1169,1170,1,0,0,0,1170,1171,3,442,221,
        0,1171,1172,5,54,0,0,1172,1173,3,28,14,0,1173,135,1,0,0,0,1174,1176,
        3,138,69,0,1175,1174,1,0,0,0,1176,1179,1,0,0,0,1177,1175,1,0,0,0,
        1177,1178,1,0,0,0,1178,1180,1,0,0,0,1179,1177,1,0,0,0,1180,1182,
        3,150,75,0,1181,1183,3,152,76,0,1182,1181,1,0,0,0,1182,1183,1,0,
        0,0,1183,137,1,0,0,0,1184,1190,3,134,67,0,1185,1190,3,140,70,0,1186,
        1190,3,142,71,0,1187,1190,3,144,72,0,1188,1190,3,146,73,0,1189,1184,
        1,0,0,0,1189,1185,1,0,0,0,1189,1186,1,0,0,0,1189,1187,1,0,0,0,1189,
        1188,1,0,0,0,1190,139,1,0,0,0,1191,1192,5,61,0,0,1192,1193,3,442,
        221,0,1193,1194,5,145,0,0,1194,1195,3,28,14,0,1195,141,1,0,0,0,1196,
        1197,5,111,0,0,1197,1198,3,28,14,0,1198,143,1,0,0,0,1199,1201,5,
        60,0,0,1200,1202,3,4,2,0,1201,1200,1,0,0,0,1201,1202,1,0,0,0,1202,
        1203,1,0,0,0,1203,1204,3,442,221,0,1204,1205,5,54,0,0,1205,1206,
        3,28,14,0,1206,1207,5,69,0,0,1207,1208,3,28,14,0,1208,1209,5,38,
        0,0,1209,1212,3,28,14,0,1210,1211,5,58,0,0,1211,1213,3,442,221,0,
        1212,1210,1,0,0,0,1212,1213,1,0,0,0,1213,145,1,0,0,0,1214,1215,5,
        71,0,0,1215,1220,3,148,74,0,1216,1217,5,132,0,0,1217,1219,3,148,
        74,0,1218,1216,1,0,0,0,1219,1222,1,0,0,0,1220,1218,1,0,0,0,1220,
        1221,1,0,0,0,1221,147,1,0,0,0,1222,1220,1,0,0,0,1223,1225,3,28,14,
        0,1224,1226,7,8,0,0,1225,1224,1,0,0,0,1225,1226,1,0,0,0,1226,149,
        1,0,0,0,1227,1228,5,85,0,0,1228,1235,3,28,14,0,1229,1230,5,51,0,
        0,1230,1231,3,28,14,0,1231,1232,5,20,0,0,1232,1233,3,28,14,0,1233,
        1235,1,0,0,0,1234,1227,1,0,0,0,1234,1229,1,0,0,0,1235,151,1,0,0,
        0,1236,1237,5,58,0,0,1237,1238,3,442,221,0,1238,1239,3,136,68,0,
        1239,153,1,0,0,0,1240,1244,3,166,83,0,1241,1244,3,156,78,0,1242,
        1244,3,168,84,0,1243,1240,1,0,0,0,1243,1241,1,0,0,0,1243,1242,1,
        0,0,0,1244,155,1,0,0,0,1245,1246,3,174,87,0,1246,1247,5,134,0,0,
        1247,1253,1,0,0,0,1248,1249,3,182,91,0,1249,1250,5,134,0,0,1250,
        1253,1,0,0,0,1251,1253,3,158,79,0,1252,1245,1,0,0,0,1252,1248,1,
        0,0,0,1252,1251,1,0,0,0,1253,157,1,0,0,0,1254,1255,3,160,80,0,1255,
        1256,3,164,82,0,1256,159,1,0,0,0,1257,1259,3,162,81,0,1258,1257,
        1,0,0,0,1258,1259,1,0,0,0,1259,1260,1,0,0,0,1260,1261,3,276,138,
        0,1261,1263,3,442,221,0,1262,1264,3,232,116,0,1263,1262,1,0,0,0,
        1263,1264,1,0,0,0,1264,1265,1,0,0,0,1265,1267,5,129,0,0,1266,1268,
        3,282,141,0,1267,1266,1,0,0,0,1267,1268,1,0,0,0,1268,1269,1,0,0,
        0,1269,1271,5,130,0,0,1270,1272,3,240,120,0,1271,1270,1,0,0,0,1271,
        1272,1,0,0,0,1272,161,1,0,0,0,1273,1275,7,9,0,0,1274,1276,5,90,0,
        0,1275,1274,1,0,0,0,1275,1276,1,0,0,0,1276,1280,1,0,0,0,1277,1278,
        5,90,0,0,1278,1280,7,9,0,0,1279,1273,1,0,0,0,1279,1277,1,0,0,0,1280,
        163,1,0,0,0,1281,1287,3,172,86,0,1282,1283,3,376,188,0,1283,1284,
        3,76,38,0,1284,1285,5,134,0,0,1285,1287,1,0,0,0,1286,1281,1,0,0,
        0,1286,1282,1,0,0,0,1287,165,1,0,0,0,1288,1289,3,442,221,0,1289,
        1290,5,133,0,0,1290,1291,3,154,77,0,1291,167,1,0,0,0,1292,1295,3,
        172,86,0,1293,1295,3,170,85,0,1294,1292,1,0,0,0,1294,1293,1,0,0,
        0,1295,169,1,0,0,0,1296,1427,5,134,0,0,1297,1298,3,28,14,0,1298,
        1299,5,134,0,0,1299,1427,1,0,0,0,1300,1301,5,52,0,0,1301,1302,5,
        129,0,0,1302,1303,3,28,14,0,1303,1304,5,130,0,0,1304,1307,3,184,
        92,0,1305,1306,5,36,0,0,1306,1308,3,184,92,0,1307,1305,1,0,0,0,1307,
        1308,1,0,0,0,1308,1427,1,0,0,0,1309,1310,5,93,0,0,1310,1311,5,129,
        0,0,1311,1312,3,28,14,0,1312,1313,5,130,0,0,1313,1317,5,125,0,0,
        1314,1316,3,186,93,0,1315,1314,1,0,0,0,1316,1319,1,0,0,0,1317,1315,
        1,0,0,0,1317,1318,1,0,0,0,1318,1320,1,0,0,0,1319,1317,1,0,0,0,1320,
        1321,5,126,0,0,1321,1427,1,0,0,0,1322,1323,5,112,0,0,1323,1324,5,
        129,0,0,1324,1325,3,28,14,0,1325,1326,5,130,0,0,1326,1327,3,168,
        84,0,1327,1427,1,0,0,0,1328,1329,5,33,0,0,1329,1330,3,168,84,0,1330,
        1331,5,112,0,0,1331,1332,5,129,0,0,1332,1333,3,28,14,0,1333,1334,
        5,130,0,0,1334,1335,5,134,0,0,1335,1427,1,0,0,0,1336,1337,5,46,0,
        0,1337,1339,5,129,0,0,1338,1340,3,194,97,0,1339,1338,1,0,0,0,1339,
        1340,1,0,0,0,1340,1341,1,0,0,0,1341,1343,5,134,0,0,1342,1344,3,28,
        14,0,1343,1342,1,0,0,0,1343,1344,1,0,0,0,1344,1345,1,0,0,0,1345,
        1347,5,134,0,0,1346,1348,3,196,98,0,1347,1346,1,0,0,0,1347,1348,
        1,0,0,0,1348,1349,1,0,0,0,1349,1350,5,130,0,0,1350,1427,3,168,84,
        0,1351,1353,5,16,0,0,1352,1351,1,0,0,0,1352,1353,1,0,0,0,1353,1354,
        1,0,0,0,1354,1355,5,47,0,0,1355,1356,5,129,0,0,1356,1357,3,176,88,
        0,1357,1358,3,442,221,0,1358,1359,5,54,0,0,1359,1360,3,28,14,0,1360,
        1361,5,130,0,0,1361,1362,3,168,84,0,1362,1427,1,0,0,0,1363,1364,
        5,19,0,0,1364,1427,5,134,0,0,1365,1366,5,28,0,0,1366,1427,5,134,
        0,0,1367,1372,5,50,0,0,1368,1373,3,442,221,0,1369,1370,5,22,0,0,
        1370,1373,3,28,14,0,1371,1373,5,30,0,0,1372,1368,1,0,0,0,1372,1369,
        1,0,0,0,1372,1371,1,0,0,0,1373,1374,1,0,0,0,1374,1427,5,134,0,0,
        1375,1377,5,82,0,0,1376,1378,3,28,14,0,1377,1376,1,0,0,0,1377,1378,
        1,0,0,0,1378,1379,1,0,0,0,1379,1427,5,134,0,0,1380,1382,5,95,0,0,
        1381,1383,3,28,14,0,1382,1381,1,0,0,0,1382,1383,1,0,0,0,1383,1384,
        1,0,0,0,1384,1427,5,134,0,0,1385,1386,5,97,0,0,1386,1392,3,172,86,
        0,1387,1389,3,198,99,0,1388,1390,3,206,103,0,1389,1388,1,0,0,0,1389,
        1390,1,0,0,0,1390,1393,1,0,0,0,1391,1393,3,206,103,0,1392,1387,1,
        0,0,0,1392,1391,1,0,0,0,1393,1427,1,0,0,0,1394,1395,5,25,0,0,1395,
        1427,3,172,86,0,1396,1397,5,101,0,0,1397,1427,3,172,86,0,1398,1399,
        5,62,0,0,1399,1400,5,129,0,0,1400,1401,3,28,14,0,1401,1402,5,130,
        0,0,1402,1403,3,168,84,0,1403,1427,1,0,0,0,1404,1405,5,105,0,0,1405,
        1406,5,129,0,0,1406,1407,3,208,104,0,1407,1408,5,130,0,0,1408,1409,
        3,168,84,0,1409,1427,1,0,0,0,1410,1414,5,113,0,0,1411,1412,5,82,
        0,0,1412,1415,3,28,14,0,1413,1415,5,19,0,0,1414,1411,1,0,0,0,1414,
        1413,1,0,0,0,1415,1416,1,0,0,0,1416,1427,5,134,0,0,1417,1418,5,103,
        0,0,1418,1427,3,172,86,0,1419,1420,5,44,0,0,1420,1421,5,129,0,0,
        1421,1422,3,364,182,0,1422,1423,3,366,183,0,1423,1424,5,130,0,0,
        1424,1425,3,168,84,0,1425,1427,1,0,0,0,1426,1296,1,0,0,0,1426,1297,
        1,0,0,0,1426,1300,1,0,0,0,1426,1309,1,0,0,0,1426,1322,1,0,0,0,1426,
        1328,1,0,0,0,1426,1336,1,0,0,0,1426,1352,1,0,0,0,1426,1363,1,0,0,
        0,1426,1365,1,0,0,0,1426,1367,1,0,0,0,1426,1375,1,0,0,0,1426,1380,
        1,0,0,0,1426,1385,1,0,0,0,1426,1394,1,0,0,0,1426,1396,1,0,0,0,1426,
        1398,1,0,0,0,1426,1404,1,0,0,0,1426,1410,1,0,0,0,1426,1417,1,0,0,
        0,1426,1419,1,0,0,0,1427,171,1,0,0,0,1428,1430,5,125,0,0,1429,1431,
        3,192,96,0,1430,1429,1,0,0,0,1430,1431,1,0,0,0,1431,1432,1,0,0,0,
        1432,1433,5,126,0,0,1433,173,1,0,0,0,1434,1439,5,105,0,0,1435,1439,
        5,80,0,0,1436,1437,5,80,0,0,1437,1439,5,79,0,0,1438,1434,1,0,0,0,
        1438,1435,1,0,0,0,1438,1436,1,0,0,0,1438,1439,1,0,0,0,1439,1440,
        1,0,0,0,1440,1441,3,176,88,0,1441,1446,3,178,89,0,1442,1443,5,132,
        0,0,1443,1445,3,178,89,0,1444,1442,1,0,0,0,1445,1448,1,0,0,0,1446,
        1444,1,0,0,0,1446,1447,1,0,0,0,1447,1454,1,0,0,0,1448,1446,1,0,0,
        0,1449,1450,5,44,0,0,1450,1451,3,364,182,0,1451,1452,3,366,183,0,
        1452,1454,1,0,0,0,1453,1438,1,0,0,0,1453,1449,1,0,0,0,1454,175,1,
        0,0,0,1455,1458,5,106,0,0,1456,1458,3,4,2,0,1457,1455,1,0,0,0,1457,
        1456,1,0,0,0,1458,177,1,0,0,0,1459,1465,3,442,221,0,1460,1462,5,
        145,0,0,1461,1463,5,80,0,0,1462,1461,1,0,0,0,1462,1463,1,0,0,0,1463,
        1464,1,0,0,0,1464,1466,3,180,90,0,1465,1460,1,0,0,0,1465,1466,1,
        0,0,0,1466,179,1,0,0,0,1467,1471,3,28,14,0,1468,1471,3,326,163,0,
        1469,1471,3,374,187,0,1470,1467,1,0,0,0,1470,1468,1,0,0,0,1470,1469,
        1,0,0,0,1471,181,1,0,0,0,1472,1473,5,27,0,0,1473,1474,3,4,2,0,1474,
        1475,3,266,133,0,1475,183,1,0,0,0,1476,1479,3,172,86,0,1477,1479,
        3,170,85,0,1478,1476,1,0,0,0,1478,1477,1,0,0,0,1479,185,1,0,0,0,
        1480,1482,3,188,94,0,1481,1480,1,0,0,0,1482,1483,1,0,0,0,1483,1481,
        1,0,0,0,1483,1484,1,0,0,0,1484,1485,1,0,0,0,1485,1486,3,192,96,0,
        1486,187,1,0,0,0,1487,1488,5,22,0,0,1488,1490,3,28,14,0,1489,1491,
        3,190,95,0,1490,1489,1,0,0,0,1490,1491,1,0,0,0,1491,1492,1,0,0,0,
        1492,1493,5,133,0,0,1493,1497,1,0,0,0,1494,1495,5,30,0,0,1495,1497,
        5,133,0,0,1496,1487,1,0,0,0,1496,1494,1,0,0,0,1497,189,1,0,0,0,1498,
        1499,5,110,0,0,1499,1500,3,28,14,0,1500,191,1,0,0,0,1501,1503,3,
        154,77,0,1502,1501,1,0,0,0,1503,1504,1,0,0,0,1504,1502,1,0,0,0,1504,
        1505,1,0,0,0,1505,193,1,0,0,0,1506,1516,3,174,87,0,1507,1512,3,28,
        14,0,1508,1509,5,132,0,0,1509,1511,3,28,14,0,1510,1508,1,0,0,0,1511,
        1514,1,0,0,0,1512,1510,1,0,0,0,1512,1513,1,0,0,0,1513,1516,1,0,0,
        0,1514,1512,1,0,0,0,1515,1506,1,0,0,0,1515,1507,1,0,0,0,1516,195,
        1,0,0,0,1517,1522,3,28,14,0,1518,1519,5,132,0,0,1519,1521,3,28,14,
        0,1520,1518,1,0,0,0,1521,1524,1,0,0,0,1522,1520,1,0,0,0,1522,1523,
        1,0,0,0,1523,197,1,0,0,0,1524,1522,1,0,0,0,1525,1529,3,200,100,0,
        1526,1528,3,200,100,0,1527,1526,1,0,0,0,1528,1531,1,0,0,0,1529,1527,
        1,0,0,0,1529,1530,1,0,0,0,1530,1533,1,0,0,0,1531,1529,1,0,0,0,1532,
        1534,3,202,101,0,1533,1532,1,0,0,0,1533,1534,1,0,0,0,1534,1537,1,
        0,0,0,1535,1537,3,202,101,0,1536,1525,1,0,0,0,1536,1535,1,0,0,0,
        1537,199,1,0,0,0,1538,1539,5,23,0,0,1539,1540,5,129,0,0,1540,1542,
        3,20,10,0,1541,1543,3,442,221,0,1542,1541,1,0,0,0,1542,1543,1,0,
        0,0,1543,1544,1,0,0,0,1544,1546,5,130,0,0,1545,1547,3,204,102,0,
        1546,1545,1,0,0,0,1546,1547,1,0,0,0,1547,1548,1,0,0,0,1548,1549,
        3,172,86,0,1549,201,1,0,0,0,1550,1552,5,23,0,0,1551,1553,3,204,102,
        0,1552,1551,1,0,0,0,1552,1553,1,0,0,0,1553,1554,1,0,0,0,1554,1555,
        3,172,86,0,1555,203,1,0,0,0,1556,1557,5,110,0,0,1557,1558,5,129,
        0,0,1558,1559,3,28,14,0,1559,1560,5,130,0,0,1560,205,1,0,0,0,1561,
        1562,5,43,0,0,1562,1563,3,172,86,0,1563,207,1,0,0,0,1564,1567,3,
        174,87,0,1565,1567,3,28,14,0,1566,1564,1,0,0,0,1566,1565,1,0,0,0,
        1567,209,1,0,0,0,1568,1569,5,65,0,0,1569,1570,3,212,106,0,1570,1572,
        3,214,107,0,1571,1573,5,134,0,0,1572,1571,1,0,0,0,1572,1573,1,0,
        0,0,1573,211,1,0,0,0,1574,1579,3,442,221,0,1575,1576,5,131,0,0,1576,
        1578,3,442,221,0,1577,1575,1,0,0,0,1578,1581,1,0,0,0,1579,1577,1,
        0,0,0,1579,1580,1,0,0,0,1580,213,1,0,0,0,1581,1579,1,0,0,0,1582,
        1584,5,125,0,0,1583,1585,3,216,108,0,1584,1583,1,0,0,0,1584,1585,
        1,0,0,0,1585,1587,1,0,0,0,1586,1588,3,220,110,0,1587,1586,1,0,0,
        0,1587,1588,1,0,0,0,1588,1590,1,0,0,0,1589,1591,3,224,112,0,1590,
        1589,1,0,0,0,1590,1591,1,0,0,0,1591,1592,1,0,0,0,1592,1593,5,126,
        0,0,1593,215,1,0,0,0,1594,1596,3,218,109,0,1595,1594,1,0,0,0,1596,
        1597,1,0,0,0,1597,1595,1,0,0,0,1597,1598,1,0,0,0,1598,217,1,0,0,
        0,1599,1600,5,41,0,0,1600,1601,5,11,0,0,1601,1602,3,442,221,0,1602,
        1603,5,134,0,0,1603,219,1,0,0,0,1604,1606,3,222,111,0,1605,1604,
        1,0,0,0,1606,1607,1,0,0,0,1607,1605,1,0,0,0,1607,1608,1,0,0,0,1608,
        221,1,0,0,0,1609,1610,5,105,0,0,1610,1611,3,442,221,0,1611,1612,
        5,145,0,0,1612,1613,3,2,1,0,1613,1614,5,134,0,0,1614,1625,1,0,0,
        0,1615,1616,5,105,0,0,1616,1617,3,2,1,0,1617,1618,5,134,0,0,1618,
        1625,1,0,0,0,1619,1620,5,105,0,0,1620,1621,5,90,0,0,1621,1622,3,
        2,1,0,1622,1623,5,134,0,0,1623,1625,1,0,0,0,1624,1609,1,0,0,0,1624,
        1615,1,0,0,0,1624,1619,1,0,0,0,1625,223,1,0,0,0,1626,1628,3,226,
        113,0,1627,1626,1,0,0,0,1628,1629,1,0,0,0,1629,1627,1,0,0,0,1629,
        1630,1,0,0,0,1630,225,1,0,0,0,1631,1634,3,210,105,0,1632,1634,3,
        228,114,0,1633,1631,1,0,0,0,1633,1632,1,0,0,0,1634,227,1,0,0,0,1635,
        1637,3,352,176,0,1636,1635,1,0,0,0,1636,1637,1,0,0,0,1637,1639,1,
        0,0,0,1638,1640,3,258,129,0,1639,1638,1,0,0,0,1639,1640,1,0,0,0,
        1640,1646,1,0,0,0,1641,1647,3,406,203,0,1642,1647,3,408,204,0,1643,
        1647,3,410,205,0,1644,1647,3,412,206,0,1645,1647,3,414,207,0,1646,
        1641,1,0,0,0,1646,1642,1,0,0,0,1646,1643,1,0,0,0,1646,1644,1,0,0,
        0,1646,1645,1,0,0,0,1647,229,1,0,0,0,1648,1649,3,442,221,0,1649,
        1650,5,149,0,0,1650,1652,3,442,221,0,1651,1653,3,22,11,0,1652,1651,
        1,0,0,0,1652,1653,1,0,0,0,1653,231,1,0,0,0,1654,1655,5,146,0,0,1655,
        1660,3,234,117,0,1656,1657,5,132,0,0,1657,1659,3,234,117,0,1658,
        1656,1,0,0,0,1659,1662,1,0,0,0,1660,1658,1,0,0,0,1660,1661,1,0,0,
        0,1661,1663,1,0,0,0,1662,1660,1,0,0,0,1663,1664,5,147,0,0,1664,233,
        1,0,0,0,1665,1667,3,352,176,0,1666,1665,1,0,0,0,1666,1667,1,0,0,
        0,1667,1668,1,0,0,0,1668,1669,3,442,221,0,1669,235,1,0,0,0,1670,
        1671,5,133,0,0,1671,1676,3,20,10,0,1672,1673,5,132,0,0,1673,1675,
        3,2,1,0,1674,1672,1,0,0,0,1675,1678,1,0,0,0,1676,1674,1,0,0,0,1676,
        1677,1,0,0,0,1677,237,1,0,0,0,1678,1676,1,0,0,0,1679,1684,3,2,1,
        0,1680,1681,5,132,0,0,1681,1683,3,2,1,0,1682,1680,1,0,0,0,1683,1686,
        1,0,0,0,1684,1682,1,0,0,0,1684,1685,1,0,0,0,1685,239,1,0,0,0,1686,
        1684,1,0,0,0,1687,1689,3,242,121,0,1688,1687,1,0,0,0,1689,1690,1,
        0,0,0,1690,1688,1,0,0,0,1690,1691,1,0,0,0,1691,241,1,0,0,0,1692,
        1693,5,111,0,0,1693,1694,3,442,221,0,1694,1695,5,133,0,0,1695,1696,
        3,244,122,0,1696,243,1,0,0,0,1697,1708,3,250,125,0,1698,1701,3,246,
        123,0,1699,1700,5,132,0,0,1700,1702,3,248,124,0,1701,1699,1,0,0,
        0,1701,1702,1,0,0,0,1702,1705,1,0,0,0,1703,1704,5,132,0,0,1704,1706,
        3,250,125,0,1705,1703,1,0,0,0,1705,1706,1,0,0,0,1706,1708,1,0,0,
        0,1707,1697,1,0,0,0,1707,1698,1,0,0,0,1708,245,1,0,0,0,1709,1717,
        3,20,10,0,1710,1712,5,26,0,0,1711,1713,5,148,0,0,1712,1711,1,0,0,
        0,1712,1713,1,0,0,0,1713,1717,1,0,0,0,1714,1717,5,92,0,0,1715,1717,
        5,102,0,0,1716,1709,1,0,0,0,1716,1710,1,0,0,0,1716,1714,1,0,0,0,
        1716,1715,1,0,0,0,1717,247,1,0,0,0,1718,1723,3,2,1,0,1719,1720,5,
        132,0,0,1720,1722,3,2,1,0,1721,1719,1,0,0,0,1722,1725,1,0,0,0,1723,
        1721,1,0,0,0,1723,1724,1,0,0,0,1724,249,1,0,0,0,1725,1723,1,0,0,
        0,1726,1727,5,66,0,0,1727,1728,5,129,0,0,1728,1729,5,130,0,0,1729,
        251,1,0,0,0,1730,1732,5,125,0,0,1731,1733,3,254,127,0,1732,1731,
        1,0,0,0,1732,1733,1,0,0,0,1733,1734,1,0,0,0,1734,1735,5,126,0,0,
        1735,253,1,0,0,0,1736,1738,3,256,128,0,1737,1736,1,0,0,0,1738,1739,
        1,0,0,0,1739,1737,1,0,0,0,1739,1740,1,0,0,0,1740,255,1,0,0,0,1741,
        1743,3,352,176,0,1742,1741,1,0,0,0,1742,1743,1,0,0,0,1743,1745,1,
        0,0,0,1744,1746,3,258,129,0,1745,1744,1,0,0,0,1745,1746,1,0,0,0,
        1746,1749,1,0,0,0,1747,1750,3,262,131,0,1748,1750,3,426,213,0,1749,
        1747,1,0,0,0,1749,1748,1,0,0,0,1750,257,1,0,0,0,1751,1753,3,260,
        130,0,1752,1751,1,0,0,0,1753,1754,1,0,0,0,1754,1752,1,0,0,0,1754,
        1755,1,0,0,0,1755,259,1,0,0,0,1756,1757,7,10,0,0,1757,261,1,0,0,
        0,1758,1778,3,422,211,0,1759,1778,3,264,132,0,1760,1778,3,416,208,
        0,1761,1767,3,310,155,0,1762,1768,3,314,157,0,1763,1764,3,376,188,
        0,1764,1765,3,76,38,0,1765,1766,5,134,0,0,1766,1768,1,0,0,0,1767,
        1762,1,0,0,0,1767,1763,1,0,0,0,1768,1778,1,0,0,0,1769,1778,3,428,
        214,0,1770,1771,5,108,0,0,1771,1778,3,430,215,0,1772,1778,3,406,
        203,0,1773,1778,3,408,204,0,1774,1778,3,410,205,0,1775,1778,3,412,
        206,0,1776,1778,3,414,207,0,1777,1758,1,0,0,0,1777,1759,1,0,0,0,
        1777,1760,1,0,0,0,1777,1761,1,0,0,0,1777,1769,1,0,0,0,1777,1770,
        1,0,0,0,1777,1772,1,0,0,0,1777,1773,1,0,0,0,1777,1774,1,0,0,0,1777,
        1775,1,0,0,0,1777,1776,1,0,0,0,1778,263,1,0,0,0,1779,1785,5,80,0,
        0,1780,1781,5,79,0,0,1781,1785,5,80,0,0,1782,1783,5,80,0,0,1783,
        1785,5,79,0,0,1784,1779,1,0,0,0,1784,1780,1,0,0,0,1784,1782,1,0,
        0,0,1784,1785,1,0,0,0,1785,1786,1,0,0,0,1786,1796,3,4,2,0,1787,1788,
        3,2,1,0,1788,1789,5,131,0,0,1789,1790,3,424,212,0,1790,1797,1,0,
        0,0,1791,1797,3,430,215,0,1792,1797,3,420,210,0,1793,1797,3,424,
        212,0,1794,1797,3,434,217,0,1795,1797,3,418,209,0,1796,1787,1,0,
        0,0,1796,1791,1,0,0,0,1796,1792,1,0,0,0,1796,1793,1,0,0,0,1796,1794,
        1,0,0,0,1796,1795,1,0,0,0,1797,265,1,0,0,0,1798,1803,3,268,134,0,
        1799,1800,5,132,0,0,1800,1802,3,268,134,0,1801,1799,1,0,0,0,1802,
        1805,1,0,0,0,1803,1801,1,0,0,0,1803,1804,1,0,0,0,1804,267,1,0,0,
        0,1805,1803,1,0,0,0,1806,1807,3,442,221,0,1807,1808,5,145,0,0,1808,
        1809,3,28,14,0,1809,269,1,0,0,0,1810,1815,3,272,136,0,1811,1812,
        5,132,0,0,1812,1814,3,272,136,0,1813,1811,1,0,0,0,1814,1817,1,0,
        0,0,1815,1813,1,0,0,0,1815,1816,1,0,0,0,1816,271,1,0,0,0,1817,1815,
        1,0,0,0,1818,1821,3,442,221,0,1819,1820,5,145,0,0,1820,1822,3,274,
        137,0,1821,1819,1,0,0,0,1821,1822,1,0,0,0,1822,273,1,0,0,0,1823,
        1826,3,28,14,0,1824,1826,3,326,163,0,1825,1823,1,0,0,0,1825,1824,
        1,0,0,0,1826,275,1,0,0,0,1827,1830,3,4,2,0,1828,1830,5,108,0,0,1829,
        1827,1,0,0,0,1829,1828,1,0,0,0,1830,277,1,0,0,0,1831,1832,3,2,1,
        0,1832,279,1,0,0,0,1833,1836,3,172,86,0,1834,1836,5,134,0,0,1835,
        1833,1,0,0,0,1835,1834,1,0,0,0,1836,281,1,0,0,0,1837,1844,3,290,
        145,0,1838,1841,3,284,142,0,1839,1840,5,132,0,0,1840,1842,3,290,
        145,0,1841,1839,1,0,0,0,1841,1842,1,0,0,0,1842,1844,1,0,0,0,1843,
        1837,1,0,0,0,1843,1838,1,0,0,0,1844,283,1,0,0,0,1845,1850,3,286,
        143,0,1846,1847,5,132,0,0,1847,1849,3,286,143,0,1848,1846,1,0,0,
        0,1849,1852,1,0,0,0,1850,1848,1,0,0,0,1850,1851,1,0,0,0,1851,285,
        1,0,0,0,1852,1850,1,0,0,0,1853,1855,3,352,176,0,1854,1853,1,0,0,
        0,1854,1855,1,0,0,0,1855,1857,1,0,0,0,1856,1858,3,288,144,0,1857,
        1856,1,0,0,0,1857,1858,1,0,0,0,1858,1859,1,0,0,0,1859,1862,3,436,
        218,0,1860,1862,5,12,0,0,1861,1854,1,0,0,0,1861,1860,1,0,0,0,1862,
        287,1,0,0,0,1863,1872,5,80,0,0,1864,1872,5,72,0,0,1865,1872,5,54,
        0,0,1866,1867,5,80,0,0,1867,1872,5,94,0,0,1868,1869,5,54,0,0,1869,
        1872,5,94,0,0,1870,1872,5,94,0,0,1871,1863,1,0,0,0,1871,1864,1,0,
        0,0,1871,1865,1,0,0,0,1871,1866,1,0,0,0,1871,1868,1,0,0,0,1871,1870,
        1,0,0,0,1872,289,1,0,0,0,1873,1875,3,352,176,0,1874,1873,1,0,0,0,
        1874,1875,1,0,0,0,1875,1876,1,0,0,0,1876,1877,5,74,0,0,1877,1878,
        3,322,161,0,1878,1879,3,442,221,0,1879,291,1,0,0,0,1880,1882,3,352,
        176,0,1881,1880,1,0,0,0,1881,1882,1,0,0,0,1882,1884,1,0,0,0,1883,
        1885,3,298,149,0,1884,1883,1,0,0,0,1884,1885,1,0,0,0,1885,1896,1,
        0,0,0,1886,1887,5,49,0,0,1887,1889,3,300,150,0,1888,1890,3,296,148,
        0,1889,1888,1,0,0,0,1889,1890,1,0,0,0,1890,1897,1,0,0,0,1891,1892,
        5,86,0,0,1892,1894,3,300,150,0,1893,1895,3,294,147,0,1894,1893,1,
        0,0,0,1894,1895,1,0,0,0,1895,1897,1,0,0,0,1896,1886,1,0,0,0,1896,
        1891,1,0,0,0,1897,293,1,0,0,0,1898,1900,3,352,176,0,1899,1898,1,
        0,0,0,1899,1900,1,0,0,0,1900,1902,1,0,0,0,1901,1903,3,298,149,0,
        1902,1901,1,0,0,0,1902,1903,1,0,0,0,1903,1904,1,0,0,0,1904,1905,
        5,49,0,0,1905,1906,3,300,150,0,1906,295,1,0,0,0,1907,1909,3,352,
        176,0,1908,1907,1,0,0,0,1908,1909,1,0,0,0,1909,1911,1,0,0,0,1910,
        1912,3,298,149,0,1911,1910,1,0,0,0,1911,1912,1,0,0,0,1912,1913,1,
        0,0,0,1913,1914,5,86,0,0,1914,1915,3,300,150,0,1915,297,1,0,0,0,
        1916,1924,5,77,0,0,1917,1924,5,57,0,0,1918,1924,5,76,0,0,1919,1920,
        5,77,0,0,1920,1924,5,57,0,0,1921,1922,5,57,0,0,1922,1924,5,77,0,
        0,1923,1916,1,0,0,0,1923,1917,1,0,0,0,1923,1918,1,0,0,0,1923,1919,
        1,0,0,0,1923,1921,1,0,0,0,1924,299,1,0,0,0,1925,1928,3,172,86,0,
        1926,1928,5,134,0,0,1927,1925,1,0,0,0,1927,1926,1,0,0,0,1928,301,
        1,0,0,0,1929,1931,3,352,176,0,1930,1929,1,0,0,0,1930,1931,1,0,0,
        0,1931,1940,1,0,0,0,1932,1933,5,10,0,0,1933,1934,3,172,86,0,1934,
        1935,3,306,153,0,1935,1941,1,0,0,0,1936,1937,5,81,0,0,1937,1938,
        3,172,86,0,1938,1939,3,304,152,0,1939,1941,1,0,0,0,1940,1932,1,0,
        0,0,1940,1936,1,0,0,0,1941,303,1,0,0,0,1942,1944,3,352,176,0,1943,
        1942,1,0,0,0,1943,1944,1,0,0,0,1944,1945,1,0,0,0,1945,1946,5,10,
        0,0,1946,1947,3,172,86,0,1947,305,1,0,0,0,1948,1950,3,352,176,0,
        1949,1948,1,0,0,0,1949,1950,1,0,0,0,1950,1951,1,0,0,0,1951,1952,
        5,81,0,0,1952,1953,3,172,86,0,1953,307,1,0,0,0,1954,1977,5,135,0,
        0,1955,1977,5,136,0,0,1956,1977,5,143,0,0,1957,1977,5,144,0,0,1958,
        1977,5,151,0,0,1959,1977,5,152,0,0,1960,1977,5,96,0,0,1961,1977,
        5,42,0,0,1962,1977,5,137,0,0,1963,1977,5,138,0,0,1964,1977,5,139,
        0,0,1965,1977,5,140,0,0,1966,1977,5,141,0,0,1967,1977,5,142,0,0,
        1968,1977,5,168,0,0,1969,1977,3,378,189,0,1970,1977,5,156,0,0,1971,
        1977,5,157,0,0,1972,1977,5,147,0,0,1973,1977,5,146,0,0,1974,1977,
        5,159,0,0,1975,1977,5,158,0,0,1976,1954,1,0,0,0,1976,1955,1,0,0,
        0,1976,1956,1,0,0,0,1976,1957,1,0,0,0,1976,1958,1,0,0,0,1976,1959,
        1,0,0,0,1976,1960,1,0,0,0,1976,1961,1,0,0,0,1976,1962,1,0,0,0,1976,
        1963,1,0,0,0,1976,1964,1,0,0,0,1976,1965,1,0,0,0,1976,1966,1,0,0,
        0,1976,1967,1,0,0,0,1976,1968,1,0,0,0,1976,1969,1,0,0,0,1976,1970,
        1,0,0,0,1976,1971,1,0,0,0,1976,1972,1,0,0,0,1976,1973,1,0,0,0,1976,
        1974,1,0,0,0,1976,1975,1,0,0,0,1977,309,1,0,0,0,1978,1979,7,11,0,
        0,1979,1980,5,70,0,0,1980,1981,3,4,2,0,1981,1982,5,129,0,0,1982,
        1983,3,436,218,0,1983,1984,5,130,0,0,1984,311,1,0,0,0,1985,1986,
        5,133,0,0,1986,1987,7,12,0,0,1987,1989,5,129,0,0,1988,1990,3,24,
        12,0,1989,1988,1,0,0,0,1989,1990,1,0,0,0,1990,1991,1,0,0,0,1991,
        1992,5,130,0,0,1992,313,1,0,0,0,1993,1996,3,172,86,0,1994,1996,5,
        134,0,0,1995,1993,1,0,0,0,1995,1994,1,0,0,0,1996,315,1,0,0,0,1997,
        1998,5,133,0,0,1998,1999,3,238,119,0,1999,317,1,0,0,0,2000,2004,
        5,125,0,0,2001,2003,3,320,160,0,2002,2001,1,0,0,0,2003,2006,1,0,
        0,0,2004,2002,1,0,0,0,2004,2005,1,0,0,0,2005,2007,1,0,0,0,2006,2004,
        1,0,0,0,2007,2008,5,126,0,0,2008,319,1,0,0,0,2009,2011,3,352,176,
        0,2010,2009,1,0,0,0,2010,2011,1,0,0,0,2011,2013,1,0,0,0,2012,2014,
        3,258,129,0,2013,2012,1,0,0,0,2013,2014,1,0,0,0,2014,2025,1,0,0,
        0,2015,2026,3,262,131,0,2016,2017,5,44,0,0,2017,2019,3,4,2,0,2018,
        2020,3,372,186,0,2019,2018,1,0,0,0,2020,2021,1,0,0,0,2021,2019,1,
        0,0,0,2021,2022,1,0,0,0,2022,2023,1,0,0,0,2023,2024,5,134,0,0,2024,
        2026,1,0,0,0,2025,2015,1,0,0,0,2025,2016,1,0,0,0,2026,321,1,0,0,
        0,2027,2035,3,6,3,0,2028,2030,7,13,0,0,2029,2028,1,0,0,0,2030,2033,
        1,0,0,0,2031,2029,1,0,0,0,2031,2032,1,0,0,0,2032,2034,1,0,0,0,2033,
        2031,1,0,0,0,2034,2036,3,324,162,0,2035,2031,1,0,0,0,2036,2037,1,
        0,0,0,2037,2035,1,0,0,0,2037,2038,1,0,0,0,2038,323,1,0,0,0,2039,
        2043,5,127,0,0,2040,2042,5,132,0,0,2041,2040,1,0,0,0,2042,2045,1,
        0,0,0,2043,2041,1,0,0,0,2043,2044,1,0,0,0,2044,2046,1,0,0,0,2045,
        2043,1,0,0,0,2046,2047,5,128,0,0,2047,325,1,0,0,0,2048,2060,5,125,
        0,0,2049,2054,3,274,137,0,2050,2051,5,132,0,0,2051,2053,3,274,137,
        0,2052,2050,1,0,0,0,2053,2056,1,0,0,0,2054,2052,1,0,0,0,2054,2055,
        1,0,0,0,2055,2058,1,0,0,0,2056,2054,1,0,0,0,2057,2059,5,132,0,0,
        2058,2057,1,0,0,0,2058,2059,1,0,0,0,2059,2061,1,0,0,0,2060,2049,
        1,0,0,0,2060,2061,1,0,0,0,2061,2062,1,0,0,0,2062,2063,5,126,0,0,
        2063,327,1,0,0,0,2064,2065,5,146,0,0,2065,2070,3,330,165,0,2066,
        2067,5,132,0,0,2067,2069,3,330,165,0,2068,2066,1,0,0,0,2069,2072,
        1,0,0,0,2070,2068,1,0,0,0,2070,2071,1,0,0,0,2071,2073,1,0,0,0,2072,
        2070,1,0,0,0,2073,2074,5,147,0,0,2074,329,1,0,0,0,2075,2077,3,352,
        176,0,2076,2075,1,0,0,0,2076,2077,1,0,0,0,2077,2079,1,0,0,0,2078,
        2080,3,332,166,0,2079,2078,1,0,0,0,2079,2080,1,0,0,0,2080,2081,1,
        0,0,0,2081,2082,3,442,221,0,2082,331,1,0,0,0,2083,2084,7,14,0,0,
        2084,333,1,0,0,0,2085,2086,5,133,0,0,2086,2087,3,238,119,0,2087,
        335,1,0,0,0,2088,2092,5,125,0,0,2089,2091,3,338,169,0,2090,2089,
        1,0,0,0,2091,2094,1,0,0,0,2092,2090,1,0,0,0,2092,2093,1,0,0,0,2093,
        2095,1,0,0,0,2094,2092,1,0,0,0,2095,2096,5,126,0,0,2096,337,1,0,
        0,0,2097,2099,3,352,176,0,2098,2097,1,0,0,0,2098,2099,1,0,0,0,2099,
        2101,1,0,0,0,2100,2102,5,66,0,0,2101,2100,1,0,0,0,2101,2102,1,0,
        0,0,2102,2166,1,0,0,0,2103,2105,5,103,0,0,2104,2103,1,0,0,0,2104,
        2105,1,0,0,0,2105,2111,1,0,0,0,2106,2112,5,80,0,0,2107,2108,5,80,
        0,0,2108,2112,5,79,0,0,2109,2110,5,79,0,0,2110,2112,5,80,0,0,2111,
        2106,1,0,0,0,2111,2107,1,0,0,0,2111,2109,1,0,0,0,2111,2112,1,0,0,
        0,2112,2113,1,0,0,0,2113,2141,3,4,2,0,2114,2116,3,442,221,0,2115,
        2117,3,232,116,0,2116,2115,1,0,0,0,2116,2117,1,0,0,0,2117,2118,1,
        0,0,0,2118,2120,5,129,0,0,2119,2121,3,282,141,0,2120,2119,1,0,0,
        0,2120,2121,1,0,0,0,2121,2122,1,0,0,0,2122,2124,5,130,0,0,2123,2125,
        3,240,120,0,2124,2123,1,0,0,0,2124,2125,1,0,0,0,2125,2126,1,0,0,
        0,2126,2127,5,134,0,0,2127,2142,1,0,0,0,2128,2129,3,442,221,0,2129,
        2130,5,125,0,0,2130,2131,3,340,170,0,2131,2132,5,126,0,0,2132,2142,
        1,0,0,0,2133,2134,5,94,0,0,2134,2135,5,127,0,0,2135,2136,3,282,141,
        0,2136,2137,5,128,0,0,2137,2138,5,125,0,0,2138,2139,3,340,170,0,
        2139,2140,5,126,0,0,2140,2142,1,0,0,0,2141,2114,1,0,0,0,2141,2128,
        1,0,0,0,2141,2133,1,0,0,0,2142,2167,1,0,0,0,2143,2145,5,103,0,0,
        2144,2143,1,0,0,0,2144,2145,1,0,0,0,2145,2146,1,0,0,0,2146,2147,
        5,108,0,0,2147,2149,3,442,221,0,2148,2150,3,232,116,0,2149,2148,
        1,0,0,0,2149,2150,1,0,0,0,2150,2151,1,0,0,0,2151,2153,5,129,0,0,
        2152,2154,3,282,141,0,2153,2152,1,0,0,0,2153,2154,1,0,0,0,2154,2155,
        1,0,0,0,2155,2157,5,130,0,0,2156,2158,3,240,120,0,2157,2156,1,0,
        0,0,2157,2158,1,0,0,0,2158,2159,1,0,0,0,2159,2160,5,134,0,0,2160,
        2167,1,0,0,0,2161,2162,5,39,0,0,2162,2163,3,4,2,0,2163,2164,3,442,
        221,0,2164,2165,5,134,0,0,2165,2167,1,0,0,0,2166,2104,1,0,0,0,2166,
        2144,1,0,0,0,2166,2161,1,0,0,0,2167,339,1,0,0,0,2168,2170,3,352,
        176,0,2169,2168,1,0,0,0,2169,2170,1,0,0,0,2170,2189,1,0,0,0,2171,
        2172,5,49,0,0,2172,2178,5,134,0,0,2173,2175,3,352,176,0,2174,2173,
        1,0,0,0,2174,2175,1,0,0,0,2175,2176,1,0,0,0,2176,2177,5,86,0,0,2177,
        2179,5,134,0,0,2178,2174,1,0,0,0,2178,2179,1,0,0,0,2179,2190,1,0,
        0,0,2180,2181,5,86,0,0,2181,2187,5,134,0,0,2182,2184,3,352,176,0,
        2183,2182,1,0,0,0,2183,2184,1,0,0,0,2184,2185,1,0,0,0,2185,2186,
        5,49,0,0,2186,2188,5,134,0,0,2187,2183,1,0,0,0,2187,2188,1,0,0,0,
        2188,2190,1,0,0,0,2189,2171,1,0,0,0,2189,2180,1,0,0,0,2190,341,1,
        0,0,0,2191,2192,5,133,0,0,2192,2193,3,4,2,0,2193,343,1,0,0,0,2194,
        2206,5,125,0,0,2195,2200,3,346,173,0,2196,2197,5,132,0,0,2197,2199,
        3,346,173,0,2198,2196,1,0,0,0,2199,2202,1,0,0,0,2200,2198,1,0,0,
        0,2200,2201,1,0,0,0,2201,2204,1,0,0,0,2202,2200,1,0,0,0,2203,2205,
        5,132,0,0,2204,2203,1,0,0,0,2204,2205,1,0,0,0,2205,2207,1,0,0,0,
        2206,2195,1,0,0,0,2206,2207,1,0,0,0,2207,2208,1,0,0,0,2208,2209,
        5,126,0,0,2209,345,1,0,0,0,2210,2212,3,352,176,0,2211,2210,1,0,0,
        0,2211,2212,1,0,0,0,2212,2213,1,0,0,0,2213,2216,3,442,221,0,2214,
        2215,5,145,0,0,2215,2217,3,28,14,0,2216,2214,1,0,0,0,2216,2217,1,
        0,0,0,2217,347,1,0,0,0,2218,2219,5,127,0,0,2219,2220,3,350,175,0,
        2220,2221,5,133,0,0,2221,2223,3,358,179,0,2222,2224,5,132,0,0,2223,
        2222,1,0,0,0,2223,2224,1,0,0,0,2224,2225,1,0,0,0,2225,2226,5,128,
        0,0,2226,349,1,0,0,0,2227,2230,3,404,202,0,2228,2230,3,442,221,0,
        2229,2227,1,0,0,0,2229,2228,1,0,0,0,2230,351,1,0,0,0,2231,2233,3,
        354,177,0,2232,2231,1,0,0,0,2233,2234,1,0,0,0,2234,2232,1,0,0,0,
        2234,2235,1,0,0,0,2235,353,1,0,0,0,2236,2240,5,127,0,0,2237,2238,
        3,356,178,0,2238,2239,5,133,0,0,2239,2241,1,0,0,0,2240,2237,1,0,
        0,0,2240,2241,1,0,0,0,2241,2242,1,0,0,0,2242,2244,3,358,179,0,2243,
        2245,5,132,0,0,2244,2243,1,0,0,0,2244,2245,1,0,0,0,2245,2246,1,0,
        0,0,2246,2247,5,128,0,0,2247,355,1,0,0,0,2248,2251,3,404,202,0,2249,
        2251,3,442,221,0,2250,2248,1,0,0,0,2250,2249,1,0,0,0,2251,357,1,
        0,0,0,2252,2257,3,360,180,0,2253,2254,5,132,0,0,2254,2256,3,360,
        180,0,2255,2253,1,0,0,0,2256,2259,1,0,0,0,2257,2255,1,0,0,0,2257,
        2258,1,0,0,0,2258,359,1,0,0,0,2259,2257,1,0,0,0,2260,2273,3,2,1,
        0,2261,2270,5,129,0,0,2262,2267,3,362,181,0,2263,2264,5,132,0,0,
        2264,2266,3,362,181,0,2265,2263,1,0,0,0,2266,2269,1,0,0,0,2267,2265,
        1,0,0,0,2267,2268,1,0,0,0,2268,2271,1,0,0,0,2269,2267,1,0,0,0,2270,
        2262,1,0,0,0,2270,2271,1,0,0,0,2271,2272,1,0,0,0,2272,2274,5,130,
        0,0,2273,2261,1,0,0,0,2273,2274,1,0,0,0,2274,361,1,0,0,0,2275,2276,
        3,442,221,0,2276,2277,5,133,0,0,2277,2279,1,0,0,0,2278,2275,1,0,
        0,0,2278,2279,1,0,0,0,2279,2280,1,0,0,0,2280,2281,3,28,14,0,2281,
        363,1,0,0,0,2282,2285,3,12,6,0,2283,2285,3,20,10,0,2284,2282,1,0,
        0,0,2284,2283,1,0,0,0,2285,2290,1,0,0,0,2286,2289,3,324,162,0,2287,
        2289,5,148,0,0,2288,2286,1,0,0,0,2288,2287,1,0,0,0,2289,2292,1,0,
        0,0,2290,2288,1,0,0,0,2290,2291,1,0,0,0,2291,2293,1,0,0,0,2292,2290,
        1,0,0,0,2293,2294,5,137,0,0,2294,2298,1,0,0,0,2295,2296,5,108,0,
        0,2296,2298,5,137,0,0,2297,2284,1,0,0,0,2297,2295,1,0,0,0,2298,365,
        1,0,0,0,2299,2304,3,368,184,0,2300,2301,5,132,0,0,2301,2303,3,368,
        184,0,2302,2300,1,0,0,0,2303,2306,1,0,0,0,2304,2302,1,0,0,0,2304,
        2305,1,0,0,0,2305,367,1,0,0,0,2306,2304,1,0,0,0,2307,2308,3,442,
        221,0,2308,2309,5,145,0,0,2309,2310,3,370,185,0,2310,369,1,0,0,0,
        2311,2313,5,140,0,0,2312,2311,1,0,0,0,2312,2313,1,0,0,0,2313,2314,
        1,0,0,0,2314,2317,3,28,14,0,2315,2317,3,374,187,0,2316,2312,1,0,
        0,0,2316,2315,1,0,0,0,2317,371,1,0,0,0,2318,2319,3,442,221,0,2319,
        2320,5,127,0,0,2320,2321,3,28,14,0,2321,2322,5,128,0,0,2322,373,
        1,0,0,0,2323,2324,5,89,0,0,2324,2325,3,4,2,0,2325,2326,5,127,0,0,
        2326,2327,3,28,14,0,2327,2328,5,128,0,0,2328,2353,1,0,0,0,2329,2331,
        5,89,0,0,2330,2332,3,4,2,0,2331,2330,1,0,0,0,2331,2332,1,0,0,0,2332,
        2333,1,0,0,0,2333,2335,5,127,0,0,2334,2336,3,28,14,0,2335,2334,1,
        0,0,0,2335,2336,1,0,0,0,2336,2337,1,0,0,0,2337,2338,5,128,0,0,2338,
        2339,5,125,0,0,2339,2344,3,28,14,0,2340,2341,5,132,0,0,2341,2343,
        3,28,14,0,2342,2340,1,0,0,0,2343,2346,1,0,0,0,2344,2342,1,0,0,0,
        2344,2345,1,0,0,0,2345,2348,1,0,0,0,2346,2344,1,0,0,0,2347,2349,
        5,132,0,0,2348,2347,1,0,0,0,2348,2349,1,0,0,0,2349,2350,1,0,0,0,
        2350,2351,5,126,0,0,2351,2353,1,0,0,0,2352,2323,1,0,0,0,2352,2329,
        1,0,0,0,2353,375,1,0,0,0,2354,2355,5,145,0,0,2355,2356,5,147,0,0,
        2356,2357,4,188,0,1,2357,377,1,0,0,0,2358,2359,5,147,0,0,2359,2360,
        5,147,0,0,2360,2361,4,189,1,1,2361,379,1,0,0,0,2362,2363,5,147,0,
        0,2363,2364,5,159,0,0,2364,2365,4,190,2,1,2365,381,1,0,0,0,2366,
        2375,3,384,192,0,2367,2375,3,386,193,0,2368,2375,5,116,0,0,2369,
        2375,5,117,0,0,2370,2375,5,118,0,0,2371,2375,5,119,0,0,2372,2375,
        5,120,0,0,2373,2375,5,67,0,0,2374,2366,1,0,0,0,2374,2367,1,0,0,0,
        2374,2368,1,0,0,0,2374,2369,1,0,0,0,2374,2370,1,0,0,0,2374,2371,
        1,0,0,0,2374,2372,1,0,0,0,2374,2373,1,0,0,0,2375,383,1,0,0,0,2376,
        2377,7,15,0,0,2377,385,1,0,0,0,2378,2383,3,388,194,0,2379,2383,3,
        390,195,0,2380,2383,5,121,0,0,2381,2383,5,122,0,0,2382,2378,1,0,
        0,0,2382,2379,1,0,0,0,2382,2380,1,0,0,0,2382,2381,1,0,0,0,2383,387,
        1,0,0,0,2384,2388,5,123,0,0,2385,2387,3,392,196,0,2386,2385,1,0,
        0,0,2387,2390,1,0,0,0,2388,2386,1,0,0,0,2388,2389,1,0,0,0,2389,2391,
        1,0,0,0,2390,2388,1,0,0,0,2391,2392,5,176,0,0,2392,389,1,0,0,0,2393,
        2397,5,124,0,0,2394,2396,3,394,197,0,2395,2394,1,0,0,0,2396,2399,
        1,0,0,0,2397,2395,1,0,0,0,2397,2398,1,0,0,0,2398,2400,1,0,0,0,2399,
        2397,1,0,0,0,2400,2401,5,176,0,0,2401,391,1,0,0,0,2402,2411,3,396,
        198,0,2403,2411,5,172,0,0,2404,2411,5,174,0,0,2405,2411,5,177,0,
        0,2406,2411,5,173,0,0,2407,2411,5,179,0,0,2408,2411,5,176,0,0,2409,
        2411,5,178,0,0,2410,2402,1,0,0,0,2410,2403,1,0,0,0,2410,2404,1,0,
        0,0,2410,2405,1,0,0,0,2410,2406,1,0,0,0,2410,2407,1,0,0,0,2410,2408,
        1,0,0,0,2410,2409,1,0,0,0,2411,393,1,0,0,0,2412,2417,3,396,198,0,
        2413,2417,5,172,0,0,2414,2417,5,175,0,0,2415,2417,5,178,0,0,2416,
        2412,1,0,0,0,2416,2413,1,0,0,0,2416,2414,1,0,0,0,2416,2415,1,0,0,
        0,2417,395,1,0,0,0,2418,2419,5,125,0,0,2419,2422,3,28,14,0,2420,
        2421,5,132,0,0,2421,2423,3,398,199,0,2422,2420,1,0,0,0,2422,2423,
        1,0,0,0,2423,2425,1,0,0,0,2424,2426,3,400,200,0,2425,2424,1,0,0,
        0,2425,2426,1,0,0,0,2426,2427,1,0,0,0,2427,2428,5,126,0,0,2428,397,
        1,0,0,0,2429,2430,3,402,201,0,2430,399,1,0,0,0,2431,2433,5,133,0,
        0,2432,2434,5,180,0,0,2433,2432,1,0,0,0,2434,2435,1,0,0,0,2435,2433,
        1,0,0,0,2435,2436,1,0,0,0,2436,401,1,0,0,0,2437,2438,3,28,14,0,2438,
        403,1,0,0,0,2439,2440,7,16,0,0,2440,405,1,0,0,0,2441,2442,5,26,0,
        0,2442,2444,3,442,221,0,2443,2445,3,232,116,0,2444,2443,1,0,0,0,
        2444,2445,1,0,0,0,2445,2447,1,0,0,0,2446,2448,3,236,118,0,2447,2446,
        1,0,0,0,2447,2448,1,0,0,0,2448,2450,1,0,0,0,2449,2451,3,240,120,
        0,2450,2449,1,0,0,0,2450,2451,1,0,0,0,2451,2452,1,0,0,0,2452,2454,
        3,252,126,0,2453,2455,5,134,0,0,2454,2453,1,0,0,0,2454,2455,1,0,
        0,0,2455,407,1,0,0,0,2456,2458,7,17,0,0,2457,2456,1,0,0,0,2457,2458,
        1,0,0,0,2458,2459,1,0,0,0,2459,2460,5,92,0,0,2460,2462,3,442,221,
        0,2461,2463,3,232,116,0,2462,2461,1,0,0,0,2462,2463,1,0,0,0,2463,
        2465,1,0,0,0,2464,2466,3,316,158,0,2465,2464,1,0,0,0,2465,2466,1,
        0,0,0,2466,2468,1,0,0,0,2467,2469,3,240,120,0,2468,2467,1,0,0,0,
        2468,2469,1,0,0,0,2469,2470,1,0,0,0,2470,2472,3,318,159,0,2471,2473,
        5,134,0,0,2472,2471,1,0,0,0,2472,2473,1,0,0,0,2473,409,1,0,0,0,2474,
        2475,5,56,0,0,2475,2477,3,442,221,0,2476,2478,3,328,164,0,2477,2476,
        1,0,0,0,2477,2478,1,0,0,0,2478,2480,1,0,0,0,2479,2481,3,334,167,
        0,2480,2479,1,0,0,0,2480,2481,1,0,0,0,2481,2483,1,0,0,0,2482,2484,
        3,240,120,0,2483,2482,1,0,0,0,2483,2484,1,0,0,0,2484,2485,1,0,0,
        0,2485,2487,3,252,126,0,2486,2488,5,134,0,0,2487,2486,1,0,0,0,2487,
        2488,1,0,0,0,2488,411,1,0,0,0,2489,2490,5,37,0,0,2490,2492,3,442,
        221,0,2491,2493,3,342,171,0,2492,2491,1,0,0,0,2492,2493,1,0,0,0,
        2493,2494,1,0,0,0,2494,2496,3,344,172,0,2495,2497,5,134,0,0,2496,
        2495,1,0,0,0,2496,2497,1,0,0,0,2497,413,1,0,0,0,2498,2499,5,31,0,
        0,2499,2500,3,276,138,0,2500,2502,3,442,221,0,2501,2503,3,328,164,
        0,2502,2501,1,0,0,0,2502,2503,1,0,0,0,2503,2504,1,0,0,0,2504,2506,
        5,129,0,0,2505,2507,3,282,141,0,2506,2505,1,0,0,0,2506,2507,1,0,
        0,0,2507,2508,1,0,0,0,2508,2510,5,130,0,0,2509,2511,3,240,120,0,
        2510,2509,1,0,0,0,2510,2511,1,0,0,0,2511,2512,1,0,0,0,2512,2513,
        5,134,0,0,2513,415,1,0,0,0,2514,2515,5,39,0,0,2515,2524,3,4,2,0,
        2516,2517,3,270,135,0,2517,2518,5,134,0,0,2518,2525,1,0,0,0,2519,
        2520,3,278,139,0,2520,2521,5,125,0,0,2521,2522,3,302,151,0,2522,
        2523,5,126,0,0,2523,2525,1,0,0,0,2524,2516,1,0,0,0,2524,2519,1,0,
        0,0,2525,417,1,0,0,0,2526,2527,3,270,135,0,2527,2528,5,134,0,0,2528,
        419,1,0,0,0,2529,2543,3,278,139,0,2530,2531,5,125,0,0,2531,2532,
        3,292,146,0,2532,2537,5,126,0,0,2533,2534,5,145,0,0,2534,2535,3,
        274,137,0,2535,2536,5,134,0,0,2536,2538,1,0,0,0,2537,2533,1,0,0,
        0,2537,2538,1,0,0,0,2538,2544,1,0,0,0,2539,2540,3,376,188,0,2540,
        2541,3,76,38,0,2541,2542,5,134,0,0,2542,2544,1,0,0,0,2543,2530,1,
        0,0,0,2543,2539,1,0,0,0,2544,421,1,0,0,0,2545,2546,5,27,0,0,2546,
        2547,3,4,2,0,2547,2548,3,266,133,0,2548,2549,5,134,0,0,2549,423,
        1,0,0,0,2550,2551,5,94,0,0,2551,2552,5,127,0,0,2552,2553,3,282,141,
        0,2553,2562,5,128,0,0,2554,2555,5,125,0,0,2555,2556,3,292,146,0,
        2556,2557,5,126,0,0,2557,2563,1,0,0,0,2558,2559,3,376,188,0,2559,
        2560,3,76,38,0,2560,2561,5,134,0,0,2561,2563,1,0,0,0,2562,2554,1,
        0,0,0,2562,2558,1,0,0,0,2563,425,1,0,0,0,2564,2565,5,144,0,0,2565,
        2566,3,442,221,0,2566,2567,5,129,0,0,2567,2568,5,130,0,0,2568,2569,
        3,314,157,0,2569,427,1,0,0,0,2570,2571,3,442,221,0,2571,2573,5,129,
        0,0,2572,2574,3,282,141,0,2573,2572,1,0,0,0,2573,2574,1,0,0,0,2574,
        2575,1,0,0,0,2575,2577,5,130,0,0,2576,2578,3,312,156,0,2577,2576,
        1,0,0,0,2577,2578,1,0,0,0,2578,2579,1,0,0,0,2579,2580,3,314,157,
        0,2580,429,1,0,0,0,2581,2583,3,432,216,0,2582,2584,3,232,116,0,2583,
        2582,1,0,0,0,2583,2584,1,0,0,0,2584,2585,1,0,0,0,2585,2587,5,129,
        0,0,2586,2588,3,282,141,0,2587,2586,1,0,0,0,2587,2588,1,0,0,0,2588,
        2589,1,0,0,0,2589,2591,5,130,0,0,2590,2592,3,240,120,0,2591,2590,
        1,0,0,0,2591,2592,1,0,0,0,2592,2598,1,0,0,0,2593,2599,3,280,140,
        0,2594,2595,3,376,188,0,2595,2596,3,76,38,0,2596,2597,5,134,0,0,
        2597,2599,1,0,0,0,2598,2593,1,0,0,0,2598,2594,1,0,0,0,2599,431,1,
        0,0,0,2600,2606,3,442,221,0,2601,2602,3,442,221,0,2602,2603,5,149,
        0,0,2603,2604,3,442,221,0,2604,2606,1,0,0,0,2605,2600,1,0,0,0,2605,
        2601,1,0,0,0,2606,2614,1,0,0,0,2607,2609,3,22,11,0,2608,2607,1,0,
        0,0,2608,2609,1,0,0,0,2609,2610,1,0,0,0,2610,2611,5,131,0,0,2611,
        2613,3,442,221,0,2612,2608,1,0,0,0,2613,2616,1,0,0,0,2614,2612,1,
        0,0,0,2614,2615,1,0,0,0,2615,433,1,0,0,0,2616,2614,1,0,0,0,2617,
        2618,5,70,0,0,2618,2619,3,308,154,0,2619,2621,5,129,0,0,2620,2622,
        5,54,0,0,2621,2620,1,0,0,0,2621,2622,1,0,0,0,2622,2623,1,0,0,0,2623,
        2629,3,436,218,0,2624,2626,5,132,0,0,2625,2627,5,54,0,0,2626,2625,
        1,0,0,0,2626,2627,1,0,0,0,2627,2628,1,0,0,0,2628,2630,3,436,218,
        0,2629,2624,1,0,0,0,2629,2630,1,0,0,0,2630,2631,1,0,0,0,2631,2637,
        5,130,0,0,2632,2638,3,314,157,0,2633,2634,3,376,188,0,2634,2635,
        3,76,38,0,2635,2636,5,134,0,0,2636,2638,1,0,0,0,2637,2632,1,0,0,
        0,2637,2633,1,0,0,0,2638,435,1,0,0,0,2639,2640,3,4,2,0,2640,2643,
        3,442,221,0,2641,2642,5,145,0,0,2642,2644,3,28,14,0,2643,2641,1,
        0,0,0,2643,2644,1,0,0,0,2644,437,1,0,0,0,2645,2647,5,129,0,0,2646,
        2648,3,24,12,0,2647,2646,1,0,0,0,2647,2648,1,0,0,0,2648,2649,1,0,
        0,0,2649,2650,5,130,0,0,2650,439,1,0,0,0,2651,2653,5,129,0,0,2652,
        2654,3,24,12,0,2653,2652,1,0,0,0,2653,2654,1,0,0,0,2654,2655,1,0,
        0,0,2655,2657,5,130,0,0,2656,2658,3,90,45,0,2657,2656,1,0,0,0,2657,
        2658,1,0,0,0,2658,441,1,0,0,0,2659,2660,7,18,0,0,2660,443,1,0,0,
        0,345,445,448,451,456,460,466,469,474,478,485,487,495,503,509,513,
        518,528,536,546,552,555,560,563,569,574,584,597,605,611,613,620,
        628,636,644,652,660,670,672,678,683,691,699,707,709,712,719,724,
        731,735,737,761,770,775,779,787,790,795,799,803,809,823,829,841,
        845,850,854,860,868,877,895,898,903,906,921,927,931,937,942,945,
        953,961,972,977,982,984,993,1001,1008,1016,1020,1029,1034,1036,1045,
        1053,1057,1062,1064,1069,1073,1080,1088,1090,1094,1097,1100,1108,
        1118,1135,1142,1146,1156,1161,1168,1177,1182,1189,1201,1212,1220,
        1225,1234,1243,1252,1258,1263,1267,1271,1275,1279,1286,1294,1307,
        1317,1339,1343,1347,1352,1372,1377,1382,1389,1392,1414,1426,1430,
        1438,1446,1453,1457,1462,1465,1470,1478,1483,1490,1496,1504,1512,
        1515,1522,1529,1533,1536,1542,1546,1552,1566,1572,1579,1584,1587,
        1590,1597,1607,1624,1629,1633,1636,1639,1646,1652,1660,1666,1676,
        1684,1690,1701,1705,1707,1712,1716,1723,1732,1739,1742,1745,1749,
        1754,1767,1777,1784,1796,1803,1815,1821,1825,1829,1835,1841,1843,
        1850,1854,1857,1861,1871,1874,1881,1884,1889,1894,1896,1899,1902,
        1908,1911,1923,1927,1930,1940,1943,1949,1976,1989,1995,2004,2010,
        2013,2021,2025,2031,2037,2043,2054,2058,2060,2070,2076,2079,2092,
        2098,2101,2104,2111,2116,2120,2124,2141,2144,2149,2153,2157,2166,
        2169,2174,2178,2183,2187,2189,2200,2204,2206,2211,2216,2223,2229,
        2234,2240,2244,2250,2257,2267,2270,2273,2278,2284,2288,2290,2297,
        2304,2312,2316,2331,2335,2344,2348,2352,2374,2382,2388,2397,2410,
        2416,2422,2425,2435,2444,2447,2450,2454,2457,2462,2465,2468,2472,
        2477,2480,2483,2487,2492,2496,2502,2506,2510,2524,2537,2543,2562,
        2573,2577,2583,2587,2591,2598,2605,2608,2614,2621,2626,2629,2637,
        2643,2647,2653,2657
    ]

class CSharpParser ( CSharpParserBase ):

    grammarFileName = "CSharpParser.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "'\\u00EF\\u00BB\\u00BF'", "<INVALID>", 
                     "'/***/'", "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "'#'", "'abstract'", "'add'", "'alias'", "'__arglist'", 
                     "'as'", "'ascending'", "'async'", "'await'", "'base'", 
                     "'bool'", "'break'", "'by'", "'byte'", "'case'", "'catch'", 
                     "'char'", "'checked'", "'class'", "'const'", "'continue'", 
                     "'decimal'", "'default'", "'delegate'", "'descending'", 
                     "'do'", "'double'", "'dynamic'", "'else'", "'enum'", 
                     "'equals'", "'event'", "'explicit'", "'extern'", "'false'", 
                     "'finally'", "'fixed'", "'float'", "'for'", "'foreach'", 
                     "'from'", "'get'", "'goto'", "'group'", "'if'", "'implicit'", 
                     "'in'", "'int'", "'interface'", "'internal'", "'into'", 
                     "'is'", "'join'", "'let'", "'lock'", "'long'", "'nameof'", 
                     "'namespace'", "'new'", "'null'", "'object'", "'on'", 
                     "'operator'", "'orderby'", "'out'", "'override'", "'params'", 
                     "'partial'", "'private'", "'protected'", "'public'", 
                     "'readonly'", "'ref'", "'remove'", "'return'", "'sbyte'", 
                     "'sealed'", "'select'", "'set'", "'short'", "'sizeof'", 
                     "'stackalloc'", "'static'", "'string'", "'struct'", 
                     "'switch'", "'this'", "'throw'", "'true'", "'try'", 
                     "'typeof'", "'uint'", "'ulong'", "'unchecked'", "'unmanaged'", 
                     "'unsafe'", "'ushort'", "'using'", "'var'", "'virtual'", 
                     "'void'", "'volatile'", "'when'", "'where'", "'while'", 
                     "'yield'", "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "'{'", "'}'", 
                     "'['", "']'", "'('", "')'", "'.'", "','", "':'", "';'", 
                     "'+'", "'-'", "'*'", "'/'", "'%'", "'&'", "'|'", "'^'", 
                     "'!'", "'~'", "'='", "'<'", "'>'", "'?'", "'::'", "'??'", 
                     "'++'", "'--'", "'&&'", "'||'", "'->'", "'=='", "'!='", 
                     "'<='", "'>='", "'+='", "'-='", "'*='", "'/='", "'%='", 
                     "'&='", "'|='", "'^='", "'<<'", "'<<='", "'??='", "'..'", 
                     "'{{'", "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "'define'", "'undef'", "'elif'", 
                     "'endif'", "'line'", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "'hidden'", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "'}}'" ]

    symbolicNames = [ "<INVALID>", "BYTE_ORDER_MARK", "SINGLE_LINE_DOC_COMMENT", 
                      "EMPTY_DELIMITED_DOC_COMMENT", "DELIMITED_DOC_COMMENT", 
                      "SINGLE_LINE_COMMENT", "DELIMITED_COMMENT", "WHITESPACES", 
                      "SHARP", "ABSTRACT", "ADD", "ALIAS", "ARGLIST", "AS", 
                      "ASCENDING", "ASYNC", "AWAIT", "BASE", "BOOL", "BREAK", 
                      "BY", "BYTE", "CASE", "CATCH", "CHAR", "CHECKED", 
                      "CLASS", "CONST", "CONTINUE", "DECIMAL", "DEFAULT", 
                      "DELEGATE", "DESCENDING", "DO", "DOUBLE", "DYNAMIC", 
                      "ELSE", "ENUM", "EQUALS", "EVENT", "EXPLICIT", "EXTERN", 
                      "FALSE", "FINALLY", "FIXED", "FLOAT", "FOR", "FOREACH", 
                      "FROM", "GET", "GOTO", "GROUP", "IF", "IMPLICIT", 
                      "IN", "INT", "INTERFACE", "INTERNAL", "INTO", "IS", 
                      "JOIN", "LET", "LOCK", "LONG", "NAMEOF", "NAMESPACE", 
                      "NEW", "NULL_", "OBJECT", "ON", "OPERATOR", "ORDERBY", 
                      "OUT", "OVERRIDE", "PARAMS", "PARTIAL", "PRIVATE", 
                      "PROTECTED", "PUBLIC", "READONLY", "REF", "REMOVE", 
                      "RETURN", "SBYTE", "SEALED", "SELECT", "SET", "SHORT", 
                      "SIZEOF", "STACKALLOC", "STATIC", "STRING", "STRUCT", 
                      "SWITCH", "THIS", "THROW", "TRUE", "TRY", "TYPEOF", 
                      "UINT", "ULONG", "UNCHECKED", "UNMANAGED", "UNSAFE", 
                      "USHORT", "USING", "VAR", "VIRTUAL", "VOID", "VOLATILE", 
                      "WHEN", "WHERE", "WHILE", "YIELD", "IDENTIFIER", "LITERAL_ACCESS", 
                      "INTEGER_LITERAL", "HEX_INTEGER_LITERAL", "BIN_INTEGER_LITERAL", 
                      "REAL_LITERAL", "CHARACTER_LITERAL", "REGULAR_STRING", 
                      "VERBATIUM_STRING", "INTERPOLATED_REGULAR_STRING_START", 
                      "INTERPOLATED_VERBATIUM_STRING_START", "OPEN_BRACE", 
                      "CLOSE_BRACE", "OPEN_BRACKET", "CLOSE_BRACKET", "OPEN_PARENS", 
                      "CLOSE_PARENS", "DOT", "COMMA", "COLON", "SEMICOLON", 
                      "PLUS", "MINUS", "STAR", "DIV", "PERCENT", "AMP", 
                      "BITWISE_OR", "CARET", "BANG", "TILDE", "ASSIGNMENT", 
                      "LT", "GT", "INTERR", "DOUBLE_COLON", "OP_COALESCING", 
                      "OP_INC", "OP_DEC", "OP_AND", "OP_OR", "OP_PTR", "OP_EQ", 
                      "OP_NE", "OP_LE", "OP_GE", "OP_ADD_ASSIGNMENT", "OP_SUB_ASSIGNMENT", 
                      "OP_MULT_ASSIGNMENT", "OP_DIV_ASSIGNMENT", "OP_MOD_ASSIGNMENT", 
                      "OP_AND_ASSIGNMENT", "OP_OR_ASSIGNMENT", "OP_XOR_ASSIGNMENT", 
                      "OP_LEFT_SHIFT", "OP_LEFT_SHIFT_ASSIGNMENT", "OP_COALESCING_ASSIGNMENT", 
                      "OP_RANGE", "DOUBLE_CURLY_INSIDE", "OPEN_BRACE_INSIDE", 
                      "REGULAR_CHAR_INSIDE", "VERBATIUM_DOUBLE_QUOTE_INSIDE", 
                      "DOUBLE_QUOTE_INSIDE", "REGULAR_STRING_INSIDE", "VERBATIUM_INSIDE_STRING", 
                      "CLOSE_BRACE_INSIDE", "FORMAT_STRING", "DIRECTIVE_WHITESPACES", 
                      "DIGITS", "DEFINE", "UNDEF", "ELIF", "ENDIF", "LINE", 
                      "ERROR", "WARNING", "REGION", "ENDREGION", "PRAGMA", 
                      "NULLABLE", "DIRECTIVE_HIDDEN", "CONDITIONAL_SYMBOL", 
                      "DIRECTIVE_NEW_LINE", "TEXT", "DOUBLE_CURLY_CLOSE_INSIDE" ]

    RULE_compilation_unit = 0
    RULE_namespace_or_type_name = 1
    RULE_type_ = 2
    RULE_base_type = 3
    RULE_tuple_type = 4
    RULE_tuple_element = 5
    RULE_simple_type = 6
    RULE_numeric_type = 7
    RULE_integral_type = 8
    RULE_floating_point_type = 9
    RULE_class_type = 10
    RULE_type_argument_list = 11
    RULE_argument_list = 12
    RULE_argument = 13
    RULE_expression = 14
    RULE_non_assignment_expression = 15
    RULE_assignment = 16
    RULE_assignment_operator = 17
    RULE_conditional_expression = 18
    RULE_null_coalescing_expression = 19
    RULE_conditional_or_expression = 20
    RULE_conditional_and_expression = 21
    RULE_inclusive_or_expression = 22
    RULE_exclusive_or_expression = 23
    RULE_and_expression = 24
    RULE_equality_expression = 25
    RULE_relational_expression = 26
    RULE_shift_expression = 27
    RULE_additive_expression = 28
    RULE_multiplicative_expression = 29
    RULE_switch_expression = 30
    RULE_switch_expression_arms = 31
    RULE_switch_expression_arm = 32
    RULE_range_expression = 33
    RULE_unary_expression = 34
    RULE_cast_expression = 35
    RULE_primary_expression = 36
    RULE_primary_expression_start = 37
    RULE_throwable_expression = 38
    RULE_throw_expression = 39
    RULE_member_access = 40
    RULE_bracket_expression = 41
    RULE_indexer_argument = 42
    RULE_predefined_type = 43
    RULE_expression_list = 44
    RULE_object_or_collection_initializer = 45
    RULE_object_initializer = 46
    RULE_member_initializer_list = 47
    RULE_member_initializer = 48
    RULE_initializer_value = 49
    RULE_collection_initializer = 50
    RULE_element_initializer = 51
    RULE_anonymous_object_initializer = 52
    RULE_member_declarator_list = 53
    RULE_member_declarator = 54
    RULE_unbound_type_name = 55
    RULE_generic_dimension_specifier = 56
    RULE_isType = 57
    RULE_isTypePatternArms = 58
    RULE_isTypePatternArm = 59
    RULE_lambda_expression = 60
    RULE_anonymous_function_signature = 61
    RULE_explicit_anonymous_function_parameter_list = 62
    RULE_explicit_anonymous_function_parameter = 63
    RULE_implicit_anonymous_function_parameter_list = 64
    RULE_anonymous_function_body = 65
    RULE_query_expression = 66
    RULE_from_clause = 67
    RULE_query_body = 68
    RULE_query_body_clause = 69
    RULE_let_clause = 70
    RULE_where_clause = 71
    RULE_combined_join_clause = 72
    RULE_orderby_clause = 73
    RULE_ordering = 74
    RULE_select_or_group_clause = 75
    RULE_query_continuation = 76
    RULE_statement = 77
    RULE_declarationStatement = 78
    RULE_local_function_declaration = 79
    RULE_local_function_header = 80
    RULE_local_function_modifiers = 81
    RULE_local_function_body = 82
    RULE_labeled_Statement = 83
    RULE_embedded_statement = 84
    RULE_simple_embedded_statement = 85
    RULE_block = 86
    RULE_local_variable_declaration = 87
    RULE_local_variable_type = 88
    RULE_local_variable_declarator = 89
    RULE_local_variable_initializer = 90
    RULE_local_constant_declaration = 91
    RULE_if_body = 92
    RULE_switch_section = 93
    RULE_switch_label = 94
    RULE_case_guard = 95
    RULE_statement_list = 96
    RULE_for_initializer = 97
    RULE_for_iterator = 98
    RULE_catch_clauses = 99
    RULE_specific_catch_clause = 100
    RULE_general_catch_clause = 101
    RULE_exception_filter = 102
    RULE_finally_clause = 103
    RULE_resource_acquisition = 104
    RULE_namespace_declaration = 105
    RULE_qualified_identifier = 106
    RULE_namespace_body = 107
    RULE_extern_alias_directives = 108
    RULE_extern_alias_directive = 109
    RULE_using_directives = 110
    RULE_using_directive = 111
    RULE_namespace_member_declarations = 112
    RULE_namespace_member_declaration = 113
    RULE_type_declaration = 114
    RULE_qualified_alias_member = 115
    RULE_type_parameter_list = 116
    RULE_type_parameter = 117
    RULE_class_base = 118
    RULE_interface_type_list = 119
    RULE_type_parameter_constraints_clauses = 120
    RULE_type_parameter_constraints_clause = 121
    RULE_type_parameter_constraints = 122
    RULE_primary_constraint = 123
    RULE_secondary_constraints = 124
    RULE_constructor_constraint = 125
    RULE_class_body = 126
    RULE_class_member_declarations = 127
    RULE_class_member_declaration = 128
    RULE_all_member_modifiers = 129
    RULE_all_member_modifier = 130
    RULE_common_member_declaration = 131
    RULE_typed_member_declaration = 132
    RULE_constant_declarators = 133
    RULE_constant_declarator = 134
    RULE_variable_declarators = 135
    RULE_variable_declarator = 136
    RULE_variable_initializer = 137
    RULE_return_type = 138
    RULE_member_name = 139
    RULE_method_body = 140
    RULE_formal_parameter_list = 141
    RULE_fixed_parameters = 142
    RULE_fixed_parameter = 143
    RULE_parameter_modifier = 144
    RULE_parameter_array = 145
    RULE_accessor_declarations = 146
    RULE_get_accessor_declaration = 147
    RULE_set_accessor_declaration = 148
    RULE_accessor_modifier = 149
    RULE_accessor_body = 150
    RULE_event_accessor_declarations = 151
    RULE_add_accessor_declaration = 152
    RULE_remove_accessor_declaration = 153
    RULE_overloadable_operator = 154
    RULE_conversion_operator_declarator = 155
    RULE_constructor_initializer = 156
    RULE_body = 157
    RULE_struct_interfaces = 158
    RULE_struct_body = 159
    RULE_struct_member_declaration = 160
    RULE_array_type = 161
    RULE_rank_specifier = 162
    RULE_array_initializer = 163
    RULE_variant_type_parameter_list = 164
    RULE_variant_type_parameter = 165
    RULE_variance_annotation = 166
    RULE_interface_base = 167
    RULE_interface_body = 168
    RULE_interface_member_declaration = 169
    RULE_interface_accessors = 170
    RULE_enum_base = 171
    RULE_enum_body = 172
    RULE_enum_member_declaration = 173
    RULE_global_attribute_section = 174
    RULE_global_attribute_target = 175
    RULE_attributes = 176
    RULE_attribute_section = 177
    RULE_attribute_target = 178
    RULE_attribute_list = 179
    RULE_attribute = 180
    RULE_attribute_argument = 181
    RULE_pointer_type = 182
    RULE_fixed_pointer_declarators = 183
    RULE_fixed_pointer_declarator = 184
    RULE_fixed_pointer_initializer = 185
    RULE_fixed_size_buffer_declarator = 186
    RULE_stackalloc_initializer = 187
    RULE_right_arrow = 188
    RULE_right_shift = 189
    RULE_right_shift_assignment = 190
    RULE_literal = 191
    RULE_boolean_literal = 192
    RULE_string_literal = 193
    RULE_interpolated_regular_string = 194
    RULE_interpolated_verbatium_string = 195
    RULE_interpolated_regular_string_part = 196
    RULE_interpolated_verbatium_string_part = 197
    RULE_interpolated_string_expression = 198
    RULE_interpolation_minimum_width = 199
    RULE_format_string = 200
    RULE_constant_expression = 201
    RULE_keyword = 202
    RULE_class_definition = 203
    RULE_struct_definition = 204
    RULE_interface_definition = 205
    RULE_enum_definition = 206
    RULE_delegate_definition = 207
    RULE_event_declaration = 208
    RULE_field_declaration = 209
    RULE_property_declaration = 210
    RULE_constant_declaration = 211
    RULE_indexer_declaration = 212
    RULE_destructor_definition = 213
    RULE_constructor_declaration = 214
    RULE_method_declaration = 215
    RULE_method_member_name = 216
    RULE_operator_declaration = 217
    RULE_arg_declaration = 218
    RULE_method_invocation = 219
    RULE_object_creation_expression = 220
    RULE_identifier = 221

    ruleNames =  [ "compilation_unit", "namespace_or_type_name", "type_", 
                   "base_type", "tuple_type", "tuple_element", "simple_type", 
                   "numeric_type", "integral_type", "floating_point_type", 
                   "class_type", "type_argument_list", "argument_list", 
                   "argument", "expression", "non_assignment_expression", 
                   "assignment", "assignment_operator", "conditional_expression", 
                   "null_coalescing_expression", "conditional_or_expression", 
                   "conditional_and_expression", "inclusive_or_expression", 
                   "exclusive_or_expression", "and_expression", "equality_expression", 
                   "relational_expression", "shift_expression", "additive_expression", 
                   "multiplicative_expression", "switch_expression", "switch_expression_arms", 
                   "switch_expression_arm", "range_expression", "unary_expression", 
                   "cast_expression", "primary_expression", "primary_expression_start", 
                   "throwable_expression", "throw_expression", "member_access", 
                   "bracket_expression", "indexer_argument", "predefined_type", 
                   "expression_list", "object_or_collection_initializer", 
                   "object_initializer", "member_initializer_list", "member_initializer", 
                   "initializer_value", "collection_initializer", "element_initializer", 
                   "anonymous_object_initializer", "member_declarator_list", 
                   "member_declarator", "unbound_type_name", "generic_dimension_specifier", 
                   "isType", "isTypePatternArms", "isTypePatternArm", "lambda_expression", 
                   "anonymous_function_signature", "explicit_anonymous_function_parameter_list", 
                   "explicit_anonymous_function_parameter", "implicit_anonymous_function_parameter_list", 
                   "anonymous_function_body", "query_expression", "from_clause", 
                   "query_body", "query_body_clause", "let_clause", "where_clause", 
                   "combined_join_clause", "orderby_clause", "ordering", 
                   "select_or_group_clause", "query_continuation", "statement", 
                   "declarationStatement", "local_function_declaration", 
                   "local_function_header", "local_function_modifiers", 
                   "local_function_body", "labeled_Statement", "embedded_statement", 
                   "simple_embedded_statement", "block", "local_variable_declaration", 
                   "local_variable_type", "local_variable_declarator", "local_variable_initializer", 
                   "local_constant_declaration", "if_body", "switch_section", 
                   "switch_label", "case_guard", "statement_list", "for_initializer", 
                   "for_iterator", "catch_clauses", "specific_catch_clause", 
                   "general_catch_clause", "exception_filter", "finally_clause", 
                   "resource_acquisition", "namespace_declaration", "qualified_identifier", 
                   "namespace_body", "extern_alias_directives", "extern_alias_directive", 
                   "using_directives", "using_directive", "namespace_member_declarations", 
                   "namespace_member_declaration", "type_declaration", "qualified_alias_member", 
                   "type_parameter_list", "type_parameter", "class_base", 
                   "interface_type_list", "type_parameter_constraints_clauses", 
                   "type_parameter_constraints_clause", "type_parameter_constraints", 
                   "primary_constraint", "secondary_constraints", "constructor_constraint", 
                   "class_body", "class_member_declarations", "class_member_declaration", 
                   "all_member_modifiers", "all_member_modifier", "common_member_declaration", 
                   "typed_member_declaration", "constant_declarators", "constant_declarator", 
                   "variable_declarators", "variable_declarator", "variable_initializer", 
                   "return_type", "member_name", "method_body", "formal_parameter_list", 
                   "fixed_parameters", "fixed_parameter", "parameter_modifier", 
                   "parameter_array", "accessor_declarations", "get_accessor_declaration", 
                   "set_accessor_declaration", "accessor_modifier", "accessor_body", 
                   "event_accessor_declarations", "add_accessor_declaration", 
                   "remove_accessor_declaration", "overloadable_operator", 
                   "conversion_operator_declarator", "constructor_initializer", 
                   "body", "struct_interfaces", "struct_body", "struct_member_declaration", 
                   "array_type", "rank_specifier", "array_initializer", 
                   "variant_type_parameter_list", "variant_type_parameter", 
                   "variance_annotation", "interface_base", "interface_body", 
                   "interface_member_declaration", "interface_accessors", 
                   "enum_base", "enum_body", "enum_member_declaration", 
                   "global_attribute_section", "global_attribute_target", 
                   "attributes", "attribute_section", "attribute_target", 
                   "attribute_list", "attribute", "attribute_argument", 
                   "pointer_type", "fixed_pointer_declarators", "fixed_pointer_declarator", 
                   "fixed_pointer_initializer", "fixed_size_buffer_declarator", 
                   "stackalloc_initializer", "right_arrow", "right_shift", 
                   "right_shift_assignment", "literal", "boolean_literal", 
                   "string_literal", "interpolated_regular_string", "interpolated_verbatium_string", 
                   "interpolated_regular_string_part", "interpolated_verbatium_string_part", 
                   "interpolated_string_expression", "interpolation_minimum_width", 
                   "format_string", "constant_expression", "keyword", "class_definition", 
                   "struct_definition", "interface_definition", "enum_definition", 
                   "delegate_definition", "event_declaration", "field_declaration", 
                   "property_declaration", "constant_declaration", "indexer_declaration", 
                   "destructor_definition", "constructor_declaration", "method_declaration", 
                   "method_member_name", "operator_declaration", "arg_declaration", 
                   "method_invocation", "object_creation_expression", "identifier" ]

    EOF = Token.EOF
    BYTE_ORDER_MARK=1
    SINGLE_LINE_DOC_COMMENT=2
    EMPTY_DELIMITED_DOC_COMMENT=3
    DELIMITED_DOC_COMMENT=4
    SINGLE_LINE_COMMENT=5
    DELIMITED_COMMENT=6
    WHITESPACES=7
    SHARP=8
    ABSTRACT=9
    ADD=10
    ALIAS=11
    ARGLIST=12
    AS=13
    ASCENDING=14
    ASYNC=15
    AWAIT=16
    BASE=17
    BOOL=18
    BREAK=19
    BY=20
    BYTE=21
    CASE=22
    CATCH=23
    CHAR=24
    CHECKED=25
    CLASS=26
    CONST=27
    CONTINUE=28
    DECIMAL=29
    DEFAULT=30
    DELEGATE=31
    DESCENDING=32
    DO=33
    DOUBLE=34
    DYNAMIC=35
    ELSE=36
    ENUM=37
    EQUALS=38
    EVENT=39
    EXPLICIT=40
    EXTERN=41
    FALSE=42
    FINALLY=43
    FIXED=44
    FLOAT=45
    FOR=46
    FOREACH=47
    FROM=48
    GET=49
    GOTO=50
    GROUP=51
    IF=52
    IMPLICIT=53
    IN=54
    INT=55
    INTERFACE=56
    INTERNAL=57
    INTO=58
    IS=59
    JOIN=60
    LET=61
    LOCK=62
    LONG=63
    NAMEOF=64
    NAMESPACE=65
    NEW=66
    NULL_=67
    OBJECT=68
    ON=69
    OPERATOR=70
    ORDERBY=71
    OUT=72
    OVERRIDE=73
    PARAMS=74
    PARTIAL=75
    PRIVATE=76
    PROTECTED=77
    PUBLIC=78
    READONLY=79
    REF=80
    REMOVE=81
    RETURN=82
    SBYTE=83
    SEALED=84
    SELECT=85
    SET=86
    SHORT=87
    SIZEOF=88
    STACKALLOC=89
    STATIC=90
    STRING=91
    STRUCT=92
    SWITCH=93
    THIS=94
    THROW=95
    TRUE=96
    TRY=97
    TYPEOF=98
    UINT=99
    ULONG=100
    UNCHECKED=101
    UNMANAGED=102
    UNSAFE=103
    USHORT=104
    USING=105
    VAR=106
    VIRTUAL=107
    VOID=108
    VOLATILE=109
    WHEN=110
    WHERE=111
    WHILE=112
    YIELD=113
    IDENTIFIER=114
    LITERAL_ACCESS=115
    INTEGER_LITERAL=116
    HEX_INTEGER_LITERAL=117
    BIN_INTEGER_LITERAL=118
    REAL_LITERAL=119
    CHARACTER_LITERAL=120
    REGULAR_STRING=121
    VERBATIUM_STRING=122
    INTERPOLATED_REGULAR_STRING_START=123
    INTERPOLATED_VERBATIUM_STRING_START=124
    OPEN_BRACE=125
    CLOSE_BRACE=126
    OPEN_BRACKET=127
    CLOSE_BRACKET=128
    OPEN_PARENS=129
    CLOSE_PARENS=130
    DOT=131
    COMMA=132
    COLON=133
    SEMICOLON=134
    PLUS=135
    MINUS=136
    STAR=137
    DIV=138
    PERCENT=139
    AMP=140
    BITWISE_OR=141
    CARET=142
    BANG=143
    TILDE=144
    ASSIGNMENT=145
    LT=146
    GT=147
    INTERR=148
    DOUBLE_COLON=149
    OP_COALESCING=150
    OP_INC=151
    OP_DEC=152
    OP_AND=153
    OP_OR=154
    OP_PTR=155
    OP_EQ=156
    OP_NE=157
    OP_LE=158
    OP_GE=159
    OP_ADD_ASSIGNMENT=160
    OP_SUB_ASSIGNMENT=161
    OP_MULT_ASSIGNMENT=162
    OP_DIV_ASSIGNMENT=163
    OP_MOD_ASSIGNMENT=164
    OP_AND_ASSIGNMENT=165
    OP_OR_ASSIGNMENT=166
    OP_XOR_ASSIGNMENT=167
    OP_LEFT_SHIFT=168
    OP_LEFT_SHIFT_ASSIGNMENT=169
    OP_COALESCING_ASSIGNMENT=170
    OP_RANGE=171
    DOUBLE_CURLY_INSIDE=172
    OPEN_BRACE_INSIDE=173
    REGULAR_CHAR_INSIDE=174
    VERBATIUM_DOUBLE_QUOTE_INSIDE=175
    DOUBLE_QUOTE_INSIDE=176
    REGULAR_STRING_INSIDE=177
    VERBATIUM_INSIDE_STRING=178
    CLOSE_BRACE_INSIDE=179
    FORMAT_STRING=180
    DIRECTIVE_WHITESPACES=181
    DIGITS=182
    DEFINE=183
    UNDEF=184
    ELIF=185
    ENDIF=186
    LINE=187
    ERROR=188
    WARNING=189
    REGION=190
    ENDREGION=191
    PRAGMA=192
    NULLABLE=193
    DIRECTIVE_HIDDEN=194
    CONDITIONAL_SYMBOL=195
    DIRECTIVE_NEW_LINE=196
    TEXT=197
    DOUBLE_CURLY_CLOSE_INSIDE=198

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.2")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class Compilation_unitContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(CSharpParser.EOF, 0)

        def BYTE_ORDER_MARK(self):
            return self.getToken(CSharpParser.BYTE_ORDER_MARK, 0)

        def extern_alias_directives(self):
            return self.getTypedRuleContext(CSharpParser.Extern_alias_directivesContext,0)


        def using_directives(self):
            return self.getTypedRuleContext(CSharpParser.Using_directivesContext,0)


        def global_attribute_section(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Global_attribute_sectionContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Global_attribute_sectionContext,i)


        def namespace_member_declarations(self):
            return self.getTypedRuleContext(CSharpParser.Namespace_member_declarationsContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_compilation_unit

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCompilation_unit" ):
                listener.enterCompilation_unit(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCompilation_unit" ):
                listener.exitCompilation_unit(self)




    def compilation_unit(self):

        localctx = CSharpParser.Compilation_unitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_compilation_unit)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 445
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==1:
                self.state = 444
                self.match(CSharpParser.BYTE_ORDER_MARK)


            self.state = 448
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1,self._ctx)
            if la_ == 1:
                self.state = 447
                self.extern_alias_directives()


            self.state = 451
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==105:
                self.state = 450
                self.using_directives()


            self.state = 456
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,3,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 453
                    self.global_attribute_section() 
                self.state = 458
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,3,self._ctx)

            self.state = 460
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 216175120790618624) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & 4611708283706211587) != 0):
                self.state = 459
                self.namespace_member_declarations()


            self.state = 462
            self.match(CSharpParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Namespace_or_type_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(CSharpParser.IdentifierContext,i)


        def qualified_alias_member(self):
            return self.getTypedRuleContext(CSharpParser.Qualified_alias_memberContext,0)


        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.DOT)
            else:
                return self.getToken(CSharpParser.DOT, i)

        def type_argument_list(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Type_argument_listContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Type_argument_listContext,i)


        def getRuleIndex(self):
            return CSharpParser.RULE_namespace_or_type_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNamespace_or_type_name" ):
                listener.enterNamespace_or_type_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNamespace_or_type_name" ):
                listener.exitNamespace_or_type_name(self)




    def namespace_or_type_name(self):

        localctx = CSharpParser.Namespace_or_type_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_namespace_or_type_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 469
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,6,self._ctx)
            if la_ == 1:
                self.state = 464
                self.identifier()
                self.state = 466
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,5,self._ctx)
                if la_ == 1:
                    self.state = 465
                    self.type_argument_list()


                pass

            elif la_ == 2:
                self.state = 468
                self.qualified_alias_member()
                pass


            self.state = 478
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,8,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 471
                    self.match(CSharpParser.DOT)
                    self.state = 472
                    self.identifier()
                    self.state = 474
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,7,self._ctx)
                    if la_ == 1:
                        self.state = 473
                        self.type_argument_list()

             
                self.state = 480
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,8,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Type_Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def base_type(self):
            return self.getTypedRuleContext(CSharpParser.Base_typeContext,0)


        def INTERR(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.INTERR)
            else:
                return self.getToken(CSharpParser.INTERR, i)

        def rank_specifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Rank_specifierContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Rank_specifierContext,i)


        def STAR(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.STAR)
            else:
                return self.getToken(CSharpParser.STAR, i)

        def getRuleIndex(self):
            return CSharpParser.RULE_type_

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterType_" ):
                listener.enterType_(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitType_" ):
                listener.exitType_(self)




    def type_(self):

        localctx = CSharpParser.Type_Context(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_type_)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 481
            self.base_type()
            self.state = 487
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,10,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 485
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [148]:
                        self.state = 482
                        self.match(CSharpParser.INTERR)
                        pass
                    elif token in [127]:
                        self.state = 483
                        self.rank_specifier()
                        pass
                    elif token in [137]:
                        self.state = 484
                        self.match(CSharpParser.STAR)
                        pass
                    else:
                        raise NoViableAltException(self)
             
                self.state = 489
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,10,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Base_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simple_type(self):
            return self.getTypedRuleContext(CSharpParser.Simple_typeContext,0)


        def class_type(self):
            return self.getTypedRuleContext(CSharpParser.Class_typeContext,0)


        def VOID(self):
            return self.getToken(CSharpParser.VOID, 0)

        def STAR(self):
            return self.getToken(CSharpParser.STAR, 0)

        def tuple_type(self):
            return self.getTypedRuleContext(CSharpParser.Tuple_typeContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_base_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBase_type" ):
                listener.enterBase_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBase_type" ):
                listener.exitBase_type(self)




    def base_type(self):

        localctx = CSharpParser.Base_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_base_type)
        try:
            self.state = 495
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [18, 21, 24, 29, 34, 45, 55, 63, 83, 87, 99, 100, 104]:
                self.enterOuterAlt(localctx, 1)
                self.state = 490
                self.simple_type()
                pass
            elif token in [10, 11, 12, 14, 15, 16, 20, 32, 35, 38, 48, 49, 51, 58, 60, 61, 64, 68, 69, 71, 75, 81, 85, 86, 91, 102, 106, 110, 111, 113, 114]:
                self.enterOuterAlt(localctx, 2)
                self.state = 491
                self.class_type()
                pass
            elif token in [108]:
                self.enterOuterAlt(localctx, 3)
                self.state = 492
                self.match(CSharpParser.VOID)
                self.state = 493
                self.match(CSharpParser.STAR)
                pass
            elif token in [129]:
                self.enterOuterAlt(localctx, 4)
                self.state = 494
                self.tuple_type()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Tuple_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PARENS(self):
            return self.getToken(CSharpParser.OPEN_PARENS, 0)

        def tuple_element(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Tuple_elementContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Tuple_elementContext,i)


        def CLOSE_PARENS(self):
            return self.getToken(CSharpParser.CLOSE_PARENS, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.COMMA)
            else:
                return self.getToken(CSharpParser.COMMA, i)

        def getRuleIndex(self):
            return CSharpParser.RULE_tuple_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTuple_type" ):
                listener.enterTuple_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTuple_type" ):
                listener.exitTuple_type(self)




    def tuple_type(self):

        localctx = CSharpParser.Tuple_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_tuple_type)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 497
            self.match(CSharpParser.OPEN_PARENS)
            self.state = 498
            self.tuple_element()
            self.state = 501 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 499
                self.match(CSharpParser.COMMA)
                self.state = 500
                self.tuple_element()
                self.state = 503 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==132):
                    break

            self.state = 505
            self.match(CSharpParser.CLOSE_PARENS)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Tuple_elementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def type_(self):
            return self.getTypedRuleContext(CSharpParser.Type_Context,0)


        def identifier(self):
            return self.getTypedRuleContext(CSharpParser.IdentifierContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_tuple_element

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTuple_element" ):
                listener.enterTuple_element(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTuple_element" ):
                listener.exitTuple_element(self)




    def tuple_element(self):

        localctx = CSharpParser.Tuple_elementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_tuple_element)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 507
            self.type_()
            self.state = 509
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 3750091428249852928) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 1904629023639713) != 0):
                self.state = 508
                self.identifier()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Simple_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def numeric_type(self):
            return self.getTypedRuleContext(CSharpParser.Numeric_typeContext,0)


        def BOOL(self):
            return self.getToken(CSharpParser.BOOL, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_simple_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimple_type" ):
                listener.enterSimple_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimple_type" ):
                listener.exitSimple_type(self)




    def simple_type(self):

        localctx = CSharpParser.Simple_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_simple_type)
        try:
            self.state = 513
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [21, 24, 29, 34, 45, 55, 63, 83, 87, 99, 100, 104]:
                self.enterOuterAlt(localctx, 1)
                self.state = 511
                self.numeric_type()
                pass
            elif token in [18]:
                self.enterOuterAlt(localctx, 2)
                self.state = 512
                self.match(CSharpParser.BOOL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Numeric_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def integral_type(self):
            return self.getTypedRuleContext(CSharpParser.Integral_typeContext,0)


        def floating_point_type(self):
            return self.getTypedRuleContext(CSharpParser.Floating_point_typeContext,0)


        def DECIMAL(self):
            return self.getToken(CSharpParser.DECIMAL, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_numeric_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNumeric_type" ):
                listener.enterNumeric_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNumeric_type" ):
                listener.exitNumeric_type(self)




    def numeric_type(self):

        localctx = CSharpParser.Numeric_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_numeric_type)
        try:
            self.state = 518
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [21, 24, 55, 63, 83, 87, 99, 100, 104]:
                self.enterOuterAlt(localctx, 1)
                self.state = 515
                self.integral_type()
                pass
            elif token in [34, 45]:
                self.enterOuterAlt(localctx, 2)
                self.state = 516
                self.floating_point_type()
                pass
            elif token in [29]:
                self.enterOuterAlt(localctx, 3)
                self.state = 517
                self.match(CSharpParser.DECIMAL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Integral_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SBYTE(self):
            return self.getToken(CSharpParser.SBYTE, 0)

        def BYTE(self):
            return self.getToken(CSharpParser.BYTE, 0)

        def SHORT(self):
            return self.getToken(CSharpParser.SHORT, 0)

        def USHORT(self):
            return self.getToken(CSharpParser.USHORT, 0)

        def INT(self):
            return self.getToken(CSharpParser.INT, 0)

        def UINT(self):
            return self.getToken(CSharpParser.UINT, 0)

        def LONG(self):
            return self.getToken(CSharpParser.LONG, 0)

        def ULONG(self):
            return self.getToken(CSharpParser.ULONG, 0)

        def CHAR(self):
            return self.getToken(CSharpParser.CHAR, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_integral_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIntegral_type" ):
                listener.enterIntegral_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIntegral_type" ):
                listener.exitIntegral_type(self)




    def integral_type(self):

        localctx = CSharpParser.Integral_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_integral_type)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 520
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & -9187343239816937472) != 0) or ((((_la - 83)) & ~0x3f) == 0 and ((1 << (_la - 83)) & 2293777) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Floating_point_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FLOAT(self):
            return self.getToken(CSharpParser.FLOAT, 0)

        def DOUBLE(self):
            return self.getToken(CSharpParser.DOUBLE, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_floating_point_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFloating_point_type" ):
                listener.enterFloating_point_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFloating_point_type" ):
                listener.exitFloating_point_type(self)




    def floating_point_type(self):

        localctx = CSharpParser.Floating_point_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_floating_point_type)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 522
            _la = self._input.LA(1)
            if not(_la==34 or _la==45):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Class_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def namespace_or_type_name(self):
            return self.getTypedRuleContext(CSharpParser.Namespace_or_type_nameContext,0)


        def OBJECT(self):
            return self.getToken(CSharpParser.OBJECT, 0)

        def DYNAMIC(self):
            return self.getToken(CSharpParser.DYNAMIC, 0)

        def STRING(self):
            return self.getToken(CSharpParser.STRING, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_class_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClass_type" ):
                listener.enterClass_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClass_type" ):
                listener.exitClass_type(self)




    def class_type(self):

        localctx = CSharpParser.Class_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_class_type)
        try:
            self.state = 528
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,16,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 524
                self.namespace_or_type_name()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 525
                self.match(CSharpParser.OBJECT)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 526
                self.match(CSharpParser.DYNAMIC)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 527
                self.match(CSharpParser.STRING)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Type_argument_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LT(self):
            return self.getToken(CSharpParser.LT, 0)

        def type_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Type_Context)
            else:
                return self.getTypedRuleContext(CSharpParser.Type_Context,i)


        def GT(self):
            return self.getToken(CSharpParser.GT, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.COMMA)
            else:
                return self.getToken(CSharpParser.COMMA, i)

        def getRuleIndex(self):
            return CSharpParser.RULE_type_argument_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterType_argument_list" ):
                listener.enterType_argument_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitType_argument_list" ):
                listener.exitType_argument_list(self)




    def type_argument_list(self):

        localctx = CSharpParser.Type_argument_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_type_argument_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 530
            self.match(CSharpParser.LT)
            self.state = 531
            self.type_()
            self.state = 536
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==132:
                self.state = 532
                self.match(CSharpParser.COMMA)
                self.state = 533
                self.type_()
                self.state = 538
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 539
            self.match(CSharpParser.GT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Argument_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def argument(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.ArgumentContext)
            else:
                return self.getTypedRuleContext(CSharpParser.ArgumentContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.COMMA)
            else:
                return self.getToken(CSharpParser.COMMA, i)

        def getRuleIndex(self):
            return CSharpParser.RULE_argument_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArgument_list" ):
                listener.enterArgument_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArgument_list" ):
                listener.exitArgument_list(self)




    def argument_list(self):

        localctx = CSharpParser.Argument_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_argument_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 541
            self.argument()
            self.state = 546
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==132:
                self.state = 542
                self.match(CSharpParser.COMMA)
                self.state = 543
                self.argument()
                self.state = 548
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArgumentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.refout = None # Token

        def expression(self):
            return self.getTypedRuleContext(CSharpParser.ExpressionContext,0)


        def identifier(self):
            return self.getTypedRuleContext(CSharpParser.IdentifierContext,0)


        def COLON(self):
            return self.getToken(CSharpParser.COLON, 0)

        def VAR(self):
            return self.getToken(CSharpParser.VAR, 0)

        def type_(self):
            return self.getTypedRuleContext(CSharpParser.Type_Context,0)


        def REF(self):
            return self.getToken(CSharpParser.REF, 0)

        def OUT(self):
            return self.getToken(CSharpParser.OUT, 0)

        def IN(self):
            return self.getToken(CSharpParser.IN, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_argument

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArgument" ):
                listener.enterArgument(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArgument" ):
                listener.exitArgument(self)




    def argument(self):

        localctx = CSharpParser.ArgumentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_argument)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 552
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,19,self._ctx)
            if la_ == 1:
                self.state = 549
                self.identifier()
                self.state = 550
                self.match(CSharpParser.COLON)


            self.state = 555
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,20,self._ctx)
            if la_ == 1:
                self.state = 554
                localctx.refout = self._input.LT(1)
                _la = self._input.LA(1)
                if not(((((_la - 54)) & ~0x3f) == 0 and ((1 << (_la - 54)) & 67371009) != 0)):
                    localctx.refout = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 563
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,22,self._ctx)
            if la_ == 1:
                self.state = 557
                self.expression()
                pass

            elif la_ == 2:
                self.state = 560
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,21,self._ctx)
                if la_ == 1:
                    self.state = 558
                    self.match(CSharpParser.VAR)
                    pass

                elif la_ == 2:
                    self.state = 559
                    self.type_()
                    pass


                self.state = 562
                self.expression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assignment(self):
            return self.getTypedRuleContext(CSharpParser.AssignmentContext,0)


        def non_assignment_expression(self):
            return self.getTypedRuleContext(CSharpParser.Non_assignment_expressionContext,0)


        def REF(self):
            return self.getToken(CSharpParser.REF, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpression" ):
                listener.enterExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpression" ):
                listener.exitExpression(self)




    def expression(self):

        localctx = CSharpParser.ExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_expression)
        try:
            self.state = 569
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,23,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 565
                self.assignment()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 566
                self.non_assignment_expression()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 567
                self.match(CSharpParser.REF)
                self.state = 568
                self.non_assignment_expression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Non_assignment_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def lambda_expression(self):
            return self.getTypedRuleContext(CSharpParser.Lambda_expressionContext,0)


        def query_expression(self):
            return self.getTypedRuleContext(CSharpParser.Query_expressionContext,0)


        def conditional_expression(self):
            return self.getTypedRuleContext(CSharpParser.Conditional_expressionContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_non_assignment_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNon_assignment_expression" ):
                listener.enterNon_assignment_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNon_assignment_expression" ):
                listener.exitNon_assignment_expression(self)




    def non_assignment_expression(self):

        localctx = CSharpParser.Non_assignment_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_non_assignment_expression)
        try:
            self.state = 574
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,24,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 571
                self.lambda_expression()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 572
                self.query_expression()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 573
                self.conditional_expression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssignmentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def unary_expression(self):
            return self.getTypedRuleContext(CSharpParser.Unary_expressionContext,0)


        def assignment_operator(self):
            return self.getTypedRuleContext(CSharpParser.Assignment_operatorContext,0)


        def expression(self):
            return self.getTypedRuleContext(CSharpParser.ExpressionContext,0)


        def OP_COALESCING_ASSIGNMENT(self):
            return self.getToken(CSharpParser.OP_COALESCING_ASSIGNMENT, 0)

        def throwable_expression(self):
            return self.getTypedRuleContext(CSharpParser.Throwable_expressionContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_assignment

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssignment" ):
                listener.enterAssignment(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssignment" ):
                listener.exitAssignment(self)




    def assignment(self):

        localctx = CSharpParser.AssignmentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_assignment)
        try:
            self.state = 584
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,25,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 576
                self.unary_expression()
                self.state = 577
                self.assignment_operator()
                self.state = 578
                self.expression()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 580
                self.unary_expression()
                self.state = 581
                self.match(CSharpParser.OP_COALESCING_ASSIGNMENT)
                self.state = 582
                self.throwable_expression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Assignment_operatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ASSIGNMENT(self):
            return self.getToken(CSharpParser.ASSIGNMENT, 0)

        def OP_ADD_ASSIGNMENT(self):
            return self.getToken(CSharpParser.OP_ADD_ASSIGNMENT, 0)

        def OP_SUB_ASSIGNMENT(self):
            return self.getToken(CSharpParser.OP_SUB_ASSIGNMENT, 0)

        def OP_MULT_ASSIGNMENT(self):
            return self.getToken(CSharpParser.OP_MULT_ASSIGNMENT, 0)

        def OP_DIV_ASSIGNMENT(self):
            return self.getToken(CSharpParser.OP_DIV_ASSIGNMENT, 0)

        def OP_MOD_ASSIGNMENT(self):
            return self.getToken(CSharpParser.OP_MOD_ASSIGNMENT, 0)

        def OP_AND_ASSIGNMENT(self):
            return self.getToken(CSharpParser.OP_AND_ASSIGNMENT, 0)

        def OP_OR_ASSIGNMENT(self):
            return self.getToken(CSharpParser.OP_OR_ASSIGNMENT, 0)

        def OP_XOR_ASSIGNMENT(self):
            return self.getToken(CSharpParser.OP_XOR_ASSIGNMENT, 0)

        def OP_LEFT_SHIFT_ASSIGNMENT(self):
            return self.getToken(CSharpParser.OP_LEFT_SHIFT_ASSIGNMENT, 0)

        def right_shift_assignment(self):
            return self.getTypedRuleContext(CSharpParser.Right_shift_assignmentContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_assignment_operator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssignment_operator" ):
                listener.enterAssignment_operator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssignment_operator" ):
                listener.exitAssignment_operator(self)




    def assignment_operator(self):

        localctx = CSharpParser.Assignment_operatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_assignment_operator)
        try:
            self.state = 597
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [145]:
                self.enterOuterAlt(localctx, 1)
                self.state = 586
                self.match(CSharpParser.ASSIGNMENT)
                pass
            elif token in [160]:
                self.enterOuterAlt(localctx, 2)
                self.state = 587
                self.match(CSharpParser.OP_ADD_ASSIGNMENT)
                pass
            elif token in [161]:
                self.enterOuterAlt(localctx, 3)
                self.state = 588
                self.match(CSharpParser.OP_SUB_ASSIGNMENT)
                pass
            elif token in [162]:
                self.enterOuterAlt(localctx, 4)
                self.state = 589
                self.match(CSharpParser.OP_MULT_ASSIGNMENT)
                pass
            elif token in [163]:
                self.enterOuterAlt(localctx, 5)
                self.state = 590
                self.match(CSharpParser.OP_DIV_ASSIGNMENT)
                pass
            elif token in [164]:
                self.enterOuterAlt(localctx, 6)
                self.state = 591
                self.match(CSharpParser.OP_MOD_ASSIGNMENT)
                pass
            elif token in [165]:
                self.enterOuterAlt(localctx, 7)
                self.state = 592
                self.match(CSharpParser.OP_AND_ASSIGNMENT)
                pass
            elif token in [166]:
                self.enterOuterAlt(localctx, 8)
                self.state = 593
                self.match(CSharpParser.OP_OR_ASSIGNMENT)
                pass
            elif token in [167]:
                self.enterOuterAlt(localctx, 9)
                self.state = 594
                self.match(CSharpParser.OP_XOR_ASSIGNMENT)
                pass
            elif token in [169]:
                self.enterOuterAlt(localctx, 10)
                self.state = 595
                self.match(CSharpParser.OP_LEFT_SHIFT_ASSIGNMENT)
                pass
            elif token in [147]:
                self.enterOuterAlt(localctx, 11)
                self.state = 596
                self.right_shift_assignment()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Conditional_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def null_coalescing_expression(self):
            return self.getTypedRuleContext(CSharpParser.Null_coalescing_expressionContext,0)


        def INTERR(self):
            return self.getToken(CSharpParser.INTERR, 0)

        def throwable_expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Throwable_expressionContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Throwable_expressionContext,i)


        def COLON(self):
            return self.getToken(CSharpParser.COLON, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_conditional_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConditional_expression" ):
                listener.enterConditional_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConditional_expression" ):
                listener.exitConditional_expression(self)




    def conditional_expression(self):

        localctx = CSharpParser.Conditional_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_conditional_expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 599
            self.null_coalescing_expression()
            self.state = 605
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,27,self._ctx)
            if la_ == 1:
                self.state = 600
                self.match(CSharpParser.INTERR)
                self.state = 601
                self.throwable_expression()
                self.state = 602
                self.match(CSharpParser.COLON)
                self.state = 603
                self.throwable_expression()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Null_coalescing_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def conditional_or_expression(self):
            return self.getTypedRuleContext(CSharpParser.Conditional_or_expressionContext,0)


        def OP_COALESCING(self):
            return self.getToken(CSharpParser.OP_COALESCING, 0)

        def null_coalescing_expression(self):
            return self.getTypedRuleContext(CSharpParser.Null_coalescing_expressionContext,0)


        def throw_expression(self):
            return self.getTypedRuleContext(CSharpParser.Throw_expressionContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_null_coalescing_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNull_coalescing_expression" ):
                listener.enterNull_coalescing_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNull_coalescing_expression" ):
                listener.exitNull_coalescing_expression(self)




    def null_coalescing_expression(self):

        localctx = CSharpParser.Null_coalescing_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_null_coalescing_expression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 607
            self.conditional_or_expression()
            self.state = 613
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==150:
                self.state = 608
                self.match(CSharpParser.OP_COALESCING)
                self.state = 611
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [10, 11, 12, 14, 15, 16, 17, 18, 20, 21, 24, 25, 29, 30, 31, 32, 34, 35, 38, 42, 45, 48, 49, 51, 55, 58, 60, 61, 63, 64, 66, 67, 68, 69, 71, 75, 81, 83, 85, 86, 87, 88, 91, 94, 96, 98, 99, 100, 101, 102, 104, 106, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 129, 135, 136, 137, 140, 142, 143, 144, 151, 152, 171]:
                    self.state = 609
                    self.null_coalescing_expression()
                    pass
                elif token in [95]:
                    self.state = 610
                    self.throw_expression()
                    pass
                else:
                    raise NoViableAltException(self)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Conditional_or_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def conditional_and_expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Conditional_and_expressionContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Conditional_and_expressionContext,i)


        def OP_OR(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.OP_OR)
            else:
                return self.getToken(CSharpParser.OP_OR, i)

        def getRuleIndex(self):
            return CSharpParser.RULE_conditional_or_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConditional_or_expression" ):
                listener.enterConditional_or_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConditional_or_expression" ):
                listener.exitConditional_or_expression(self)




    def conditional_or_expression(self):

        localctx = CSharpParser.Conditional_or_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_conditional_or_expression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 615
            self.conditional_and_expression()
            self.state = 620
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==154:
                self.state = 616
                self.match(CSharpParser.OP_OR)
                self.state = 617
                self.conditional_and_expression()
                self.state = 622
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Conditional_and_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def inclusive_or_expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Inclusive_or_expressionContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Inclusive_or_expressionContext,i)


        def OP_AND(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.OP_AND)
            else:
                return self.getToken(CSharpParser.OP_AND, i)

        def getRuleIndex(self):
            return CSharpParser.RULE_conditional_and_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConditional_and_expression" ):
                listener.enterConditional_and_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConditional_and_expression" ):
                listener.exitConditional_and_expression(self)




    def conditional_and_expression(self):

        localctx = CSharpParser.Conditional_and_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_conditional_and_expression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 623
            self.inclusive_or_expression()
            self.state = 628
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==153:
                self.state = 624
                self.match(CSharpParser.OP_AND)
                self.state = 625
                self.inclusive_or_expression()
                self.state = 630
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Inclusive_or_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def exclusive_or_expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Exclusive_or_expressionContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Exclusive_or_expressionContext,i)


        def BITWISE_OR(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.BITWISE_OR)
            else:
                return self.getToken(CSharpParser.BITWISE_OR, i)

        def getRuleIndex(self):
            return CSharpParser.RULE_inclusive_or_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInclusive_or_expression" ):
                listener.enterInclusive_or_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInclusive_or_expression" ):
                listener.exitInclusive_or_expression(self)




    def inclusive_or_expression(self):

        localctx = CSharpParser.Inclusive_or_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_inclusive_or_expression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 631
            self.exclusive_or_expression()
            self.state = 636
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==141:
                self.state = 632
                self.match(CSharpParser.BITWISE_OR)
                self.state = 633
                self.exclusive_or_expression()
                self.state = 638
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Exclusive_or_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def and_expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.And_expressionContext)
            else:
                return self.getTypedRuleContext(CSharpParser.And_expressionContext,i)


        def CARET(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.CARET)
            else:
                return self.getToken(CSharpParser.CARET, i)

        def getRuleIndex(self):
            return CSharpParser.RULE_exclusive_or_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExclusive_or_expression" ):
                listener.enterExclusive_or_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExclusive_or_expression" ):
                listener.exitExclusive_or_expression(self)




    def exclusive_or_expression(self):

        localctx = CSharpParser.Exclusive_or_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_exclusive_or_expression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 639
            self.and_expression()
            self.state = 644
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==142:
                self.state = 640
                self.match(CSharpParser.CARET)
                self.state = 641
                self.and_expression()
                self.state = 646
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class And_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def equality_expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Equality_expressionContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Equality_expressionContext,i)


        def AMP(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.AMP)
            else:
                return self.getToken(CSharpParser.AMP, i)

        def getRuleIndex(self):
            return CSharpParser.RULE_and_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnd_expression" ):
                listener.enterAnd_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnd_expression" ):
                listener.exitAnd_expression(self)




    def and_expression(self):

        localctx = CSharpParser.And_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_and_expression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 647
            self.equality_expression()
            self.state = 652
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==140:
                self.state = 648
                self.match(CSharpParser.AMP)
                self.state = 649
                self.equality_expression()
                self.state = 654
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Equality_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def relational_expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Relational_expressionContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Relational_expressionContext,i)


        def OP_EQ(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.OP_EQ)
            else:
                return self.getToken(CSharpParser.OP_EQ, i)

        def OP_NE(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.OP_NE)
            else:
                return self.getToken(CSharpParser.OP_NE, i)

        def getRuleIndex(self):
            return CSharpParser.RULE_equality_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEquality_expression" ):
                listener.enterEquality_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEquality_expression" ):
                listener.exitEquality_expression(self)




    def equality_expression(self):

        localctx = CSharpParser.Equality_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_equality_expression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 655
            self.relational_expression()
            self.state = 660
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==156 or _la==157:
                self.state = 656
                _la = self._input.LA(1)
                if not(_la==156 or _la==157):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 657
                self.relational_expression()
                self.state = 662
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Relational_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def shift_expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Shift_expressionContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Shift_expressionContext,i)


        def IS(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.IS)
            else:
                return self.getToken(CSharpParser.IS, i)

        def isType(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.IsTypeContext)
            else:
                return self.getTypedRuleContext(CSharpParser.IsTypeContext,i)


        def AS(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.AS)
            else:
                return self.getToken(CSharpParser.AS, i)

        def type_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Type_Context)
            else:
                return self.getTypedRuleContext(CSharpParser.Type_Context,i)


        def LT(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.LT)
            else:
                return self.getToken(CSharpParser.LT, i)

        def GT(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.GT)
            else:
                return self.getToken(CSharpParser.GT, i)

        def OP_LE(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.OP_LE)
            else:
                return self.getToken(CSharpParser.OP_LE, i)

        def OP_GE(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.OP_GE)
            else:
                return self.getToken(CSharpParser.OP_GE, i)

        def getRuleIndex(self):
            return CSharpParser.RULE_relational_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRelational_expression" ):
                listener.enterRelational_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRelational_expression" ):
                listener.exitRelational_expression(self)




    def relational_expression(self):

        localctx = CSharpParser.Relational_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_relational_expression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 663
            self.shift_expression()
            self.state = 672
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==13 or _la==59 or ((((_la - 146)) & ~0x3f) == 0 and ((1 << (_la - 146)) & 12291) != 0):
                self.state = 670
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [146, 147, 158, 159]:
                    self.state = 664
                    _la = self._input.LA(1)
                    if not(((((_la - 146)) & ~0x3f) == 0 and ((1 << (_la - 146)) & 12291) != 0)):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 665
                    self.shift_expression()
                    pass
                elif token in [59]:
                    self.state = 666
                    self.match(CSharpParser.IS)
                    self.state = 667
                    self.isType()
                    pass
                elif token in [13]:
                    self.state = 668
                    self.match(CSharpParser.AS)
                    self.state = 669
                    self.type_()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 674
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Shift_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def additive_expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Additive_expressionContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Additive_expressionContext,i)


        def OP_LEFT_SHIFT(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.OP_LEFT_SHIFT)
            else:
                return self.getToken(CSharpParser.OP_LEFT_SHIFT, i)

        def right_shift(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Right_shiftContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Right_shiftContext,i)


        def getRuleIndex(self):
            return CSharpParser.RULE_shift_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShift_expression" ):
                listener.enterShift_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShift_expression" ):
                listener.exitShift_expression(self)




    def shift_expression(self):

        localctx = CSharpParser.Shift_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_shift_expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 675
            self.additive_expression()
            self.state = 683
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,39,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 678
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [168]:
                        self.state = 676
                        self.match(CSharpParser.OP_LEFT_SHIFT)
                        pass
                    elif token in [147]:
                        self.state = 677
                        self.right_shift()
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 680
                    self.additive_expression() 
                self.state = 685
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,39,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Additive_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def multiplicative_expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Multiplicative_expressionContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Multiplicative_expressionContext,i)


        def PLUS(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.PLUS)
            else:
                return self.getToken(CSharpParser.PLUS, i)

        def MINUS(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.MINUS)
            else:
                return self.getToken(CSharpParser.MINUS, i)

        def getRuleIndex(self):
            return CSharpParser.RULE_additive_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAdditive_expression" ):
                listener.enterAdditive_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAdditive_expression" ):
                listener.exitAdditive_expression(self)




    def additive_expression(self):

        localctx = CSharpParser.Additive_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_additive_expression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 686
            self.multiplicative_expression()
            self.state = 691
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==135 or _la==136:
                self.state = 687
                _la = self._input.LA(1)
                if not(_la==135 or _la==136):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 688
                self.multiplicative_expression()
                self.state = 693
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Multiplicative_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def switch_expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Switch_expressionContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Switch_expressionContext,i)


        def STAR(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.STAR)
            else:
                return self.getToken(CSharpParser.STAR, i)

        def DIV(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.DIV)
            else:
                return self.getToken(CSharpParser.DIV, i)

        def PERCENT(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.PERCENT)
            else:
                return self.getToken(CSharpParser.PERCENT, i)

        def getRuleIndex(self):
            return CSharpParser.RULE_multiplicative_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMultiplicative_expression" ):
                listener.enterMultiplicative_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMultiplicative_expression" ):
                listener.exitMultiplicative_expression(self)




    def multiplicative_expression(self):

        localctx = CSharpParser.Multiplicative_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_multiplicative_expression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 694
            self.switch_expression()
            self.state = 699
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 137)) & ~0x3f) == 0 and ((1 << (_la - 137)) & 7) != 0):
                self.state = 695
                _la = self._input.LA(1)
                if not(((((_la - 137)) & ~0x3f) == 0 and ((1 << (_la - 137)) & 7) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 696
                self.switch_expression()
                self.state = 701
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Switch_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def range_expression(self):
            return self.getTypedRuleContext(CSharpParser.Range_expressionContext,0)


        def SWITCH(self):
            return self.getToken(CSharpParser.SWITCH, 0)

        def OPEN_BRACE(self):
            return self.getToken(CSharpParser.OPEN_BRACE, 0)

        def CLOSE_BRACE(self):
            return self.getToken(CSharpParser.CLOSE_BRACE, 0)

        def switch_expression_arms(self):
            return self.getTypedRuleContext(CSharpParser.Switch_expression_armsContext,0)


        def COMMA(self):
            return self.getToken(CSharpParser.COMMA, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_switch_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSwitch_expression" ):
                listener.enterSwitch_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSwitch_expression" ):
                listener.exitSwitch_expression(self)




    def switch_expression(self):

        localctx = CSharpParser.Switch_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_switch_expression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 702
            self.range_expression()
            self.state = 712
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==93:
                self.state = 703
                self.match(CSharpParser.SWITCH)
                self.state = 704
                self.match(CSharpParser.OPEN_BRACE)
                self.state = 709
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -5437212208176571392) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 2305497201161996477) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & 4398059153857) != 0):
                    self.state = 705
                    self.switch_expression_arms()
                    self.state = 707
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==132:
                        self.state = 706
                        self.match(CSharpParser.COMMA)




                self.state = 711
                self.match(CSharpParser.CLOSE_BRACE)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Switch_expression_armsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def switch_expression_arm(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Switch_expression_armContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Switch_expression_armContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.COMMA)
            else:
                return self.getToken(CSharpParser.COMMA, i)

        def getRuleIndex(self):
            return CSharpParser.RULE_switch_expression_arms

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSwitch_expression_arms" ):
                listener.enterSwitch_expression_arms(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSwitch_expression_arms" ):
                listener.exitSwitch_expression_arms(self)




    def switch_expression_arms(self):

        localctx = CSharpParser.Switch_expression_armsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_switch_expression_arms)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 714
            self.switch_expression_arm()
            self.state = 719
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,45,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 715
                    self.match(CSharpParser.COMMA)
                    self.state = 716
                    self.switch_expression_arm() 
                self.state = 721
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,45,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Switch_expression_armContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(CSharpParser.ExpressionContext,0)


        def right_arrow(self):
            return self.getTypedRuleContext(CSharpParser.Right_arrowContext,0)


        def throwable_expression(self):
            return self.getTypedRuleContext(CSharpParser.Throwable_expressionContext,0)


        def case_guard(self):
            return self.getTypedRuleContext(CSharpParser.Case_guardContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_switch_expression_arm

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSwitch_expression_arm" ):
                listener.enterSwitch_expression_arm(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSwitch_expression_arm" ):
                listener.exitSwitch_expression_arm(self)




    def switch_expression_arm(self):

        localctx = CSharpParser.Switch_expression_armContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_switch_expression_arm)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 722
            self.expression()
            self.state = 724
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==110:
                self.state = 723
                self.case_guard()


            self.state = 726
            self.right_arrow()
            self.state = 727
            self.throwable_expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Range_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def unary_expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Unary_expressionContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Unary_expressionContext,i)


        def OP_RANGE(self):
            return self.getToken(CSharpParser.OP_RANGE, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_range_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRange_expression" ):
                listener.enterRange_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRange_expression" ):
                listener.exitRange_expression(self)




    def range_expression(self):

        localctx = CSharpParser.Range_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_range_expression)
        self._la = 0 # Token type
        try:
            self.state = 737
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,49,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 729
                self.unary_expression()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 731
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -5437212208176571392) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 2305497201161930941) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & 12642753) != 0):
                    self.state = 730
                    self.unary_expression()


                self.state = 733
                self.match(CSharpParser.OP_RANGE)
                self.state = 735
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,48,self._ctx)
                if la_ == 1:
                    self.state = 734
                    self.unary_expression()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Unary_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def cast_expression(self):
            return self.getTypedRuleContext(CSharpParser.Cast_expressionContext,0)


        def primary_expression(self):
            return self.getTypedRuleContext(CSharpParser.Primary_expressionContext,0)


        def PLUS(self):
            return self.getToken(CSharpParser.PLUS, 0)

        def unary_expression(self):
            return self.getTypedRuleContext(CSharpParser.Unary_expressionContext,0)


        def MINUS(self):
            return self.getToken(CSharpParser.MINUS, 0)

        def BANG(self):
            return self.getToken(CSharpParser.BANG, 0)

        def TILDE(self):
            return self.getToken(CSharpParser.TILDE, 0)

        def OP_INC(self):
            return self.getToken(CSharpParser.OP_INC, 0)

        def OP_DEC(self):
            return self.getToken(CSharpParser.OP_DEC, 0)

        def AWAIT(self):
            return self.getToken(CSharpParser.AWAIT, 0)

        def AMP(self):
            return self.getToken(CSharpParser.AMP, 0)

        def STAR(self):
            return self.getToken(CSharpParser.STAR, 0)

        def CARET(self):
            return self.getToken(CSharpParser.CARET, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_unary_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnary_expression" ):
                listener.enterUnary_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnary_expression" ):
                listener.exitUnary_expression(self)




    def unary_expression(self):

        localctx = CSharpParser.Unary_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_unary_expression)
        try:
            self.state = 761
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,50,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 739
                self.cast_expression()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 740
                self.primary_expression()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 741
                self.match(CSharpParser.PLUS)
                self.state = 742
                self.unary_expression()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 743
                self.match(CSharpParser.MINUS)
                self.state = 744
                self.unary_expression()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 745
                self.match(CSharpParser.BANG)
                self.state = 746
                self.unary_expression()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 747
                self.match(CSharpParser.TILDE)
                self.state = 748
                self.unary_expression()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 749
                self.match(CSharpParser.OP_INC)
                self.state = 750
                self.unary_expression()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 751
                self.match(CSharpParser.OP_DEC)
                self.state = 752
                self.unary_expression()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 753
                self.match(CSharpParser.AWAIT)
                self.state = 754
                self.unary_expression()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 755
                self.match(CSharpParser.AMP)
                self.state = 756
                self.unary_expression()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 757
                self.match(CSharpParser.STAR)
                self.state = 758
                self.unary_expression()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 759
                self.match(CSharpParser.CARET)
                self.state = 760
                self.unary_expression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Cast_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PARENS(self):
            return self.getToken(CSharpParser.OPEN_PARENS, 0)

        def type_(self):
            return self.getTypedRuleContext(CSharpParser.Type_Context,0)


        def CLOSE_PARENS(self):
            return self.getToken(CSharpParser.CLOSE_PARENS, 0)

        def unary_expression(self):
            return self.getTypedRuleContext(CSharpParser.Unary_expressionContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_cast_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCast_expression" ):
                listener.enterCast_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCast_expression" ):
                listener.exitCast_expression(self)




    def cast_expression(self):

        localctx = CSharpParser.Cast_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_cast_expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 763
            self.match(CSharpParser.OPEN_PARENS)
            self.state = 764
            self.type_()
            self.state = 765
            self.match(CSharpParser.CLOSE_PARENS)
            self.state = 766
            self.unary_expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Primary_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.pe = None # Primary_expression_startContext

        def primary_expression_start(self):
            return self.getTypedRuleContext(CSharpParser.Primary_expression_startContext,0)


        def BANG(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.BANG)
            else:
                return self.getToken(CSharpParser.BANG, i)

        def bracket_expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Bracket_expressionContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Bracket_expressionContext,i)


        def member_access(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Member_accessContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Member_accessContext,i)


        def method_invocation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Method_invocationContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Method_invocationContext,i)


        def OP_INC(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.OP_INC)
            else:
                return self.getToken(CSharpParser.OP_INC, i)

        def OP_DEC(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.OP_DEC)
            else:
                return self.getToken(CSharpParser.OP_DEC, i)

        def OP_PTR(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.OP_PTR)
            else:
                return self.getToken(CSharpParser.OP_PTR, i)

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(CSharpParser.IdentifierContext,i)


        def getRuleIndex(self):
            return CSharpParser.RULE_primary_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrimary_expression" ):
                listener.enterPrimary_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrimary_expression" ):
                listener.exitPrimary_expression(self)




    def primary_expression(self):

        localctx = CSharpParser.Primary_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_primary_expression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 768
            localctx.pe = self.primary_expression_start()
            self.state = 770
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,51,self._ctx)
            if la_ == 1:
                self.state = 769
                self.match(CSharpParser.BANG)


            self.state = 775
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,52,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 772
                    self.bracket_expression() 
                self.state = 777
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,52,self._ctx)

            self.state = 779
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==143:
                self.state = 778
                self.match(CSharpParser.BANG)


            self.state = 803
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,58,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 787
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [131, 148]:
                        self.state = 781
                        self.member_access()
                        pass
                    elif token in [129]:
                        self.state = 782
                        self.method_invocation()
                        pass
                    elif token in [151]:
                        self.state = 783
                        self.match(CSharpParser.OP_INC)
                        pass
                    elif token in [152]:
                        self.state = 784
                        self.match(CSharpParser.OP_DEC)
                        pass
                    elif token in [155]:
                        self.state = 785
                        self.match(CSharpParser.OP_PTR)
                        self.state = 786
                        self.identifier()
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 790
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,55,self._ctx)
                    if la_ == 1:
                        self.state = 789
                        self.match(CSharpParser.BANG)


                    self.state = 795
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,56,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 792
                            self.bracket_expression() 
                        self.state = 797
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,56,self._ctx)

                    self.state = 799
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==143:
                        self.state = 798
                        self.match(CSharpParser.BANG)

             
                self.state = 805
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,58,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Primary_expression_startContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CSharpParser.RULE_primary_expression_start

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class LiteralAccessExpressionContext(Primary_expression_startContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CSharpParser.Primary_expression_startContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LITERAL_ACCESS(self):
            return self.getToken(CSharpParser.LITERAL_ACCESS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLiteralAccessExpression" ):
                listener.enterLiteralAccessExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLiteralAccessExpression" ):
                listener.exitLiteralAccessExpression(self)


    class DefaultValueExpressionContext(Primary_expression_startContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CSharpParser.Primary_expression_startContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DEFAULT(self):
            return self.getToken(CSharpParser.DEFAULT, 0)
        def OPEN_PARENS(self):
            return self.getToken(CSharpParser.OPEN_PARENS, 0)
        def type_(self):
            return self.getTypedRuleContext(CSharpParser.Type_Context,0)

        def CLOSE_PARENS(self):
            return self.getToken(CSharpParser.CLOSE_PARENS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDefaultValueExpression" ):
                listener.enterDefaultValueExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDefaultValueExpression" ):
                listener.exitDefaultValueExpression(self)


    class BaseAccessExpressionContext(Primary_expression_startContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CSharpParser.Primary_expression_startContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def BASE(self):
            return self.getToken(CSharpParser.BASE, 0)
        def DOT(self):
            return self.getToken(CSharpParser.DOT, 0)
        def identifier(self):
            return self.getTypedRuleContext(CSharpParser.IdentifierContext,0)

        def OPEN_BRACKET(self):
            return self.getToken(CSharpParser.OPEN_BRACKET, 0)
        def expression_list(self):
            return self.getTypedRuleContext(CSharpParser.Expression_listContext,0)

        def CLOSE_BRACKET(self):
            return self.getToken(CSharpParser.CLOSE_BRACKET, 0)
        def type_argument_list(self):
            return self.getTypedRuleContext(CSharpParser.Type_argument_listContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBaseAccessExpression" ):
                listener.enterBaseAccessExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBaseAccessExpression" ):
                listener.exitBaseAccessExpression(self)


    class SizeofExpressionContext(Primary_expression_startContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CSharpParser.Primary_expression_startContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SIZEOF(self):
            return self.getToken(CSharpParser.SIZEOF, 0)
        def OPEN_PARENS(self):
            return self.getToken(CSharpParser.OPEN_PARENS, 0)
        def type_(self):
            return self.getTypedRuleContext(CSharpParser.Type_Context,0)

        def CLOSE_PARENS(self):
            return self.getToken(CSharpParser.CLOSE_PARENS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSizeofExpression" ):
                listener.enterSizeofExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSizeofExpression" ):
                listener.exitSizeofExpression(self)


    class ParenthesisExpressionsContext(Primary_expression_startContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CSharpParser.Primary_expression_startContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def OPEN_PARENS(self):
            return self.getToken(CSharpParser.OPEN_PARENS, 0)
        def expression(self):
            return self.getTypedRuleContext(CSharpParser.ExpressionContext,0)

        def CLOSE_PARENS(self):
            return self.getToken(CSharpParser.CLOSE_PARENS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParenthesisExpressions" ):
                listener.enterParenthesisExpressions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParenthesisExpressions" ):
                listener.exitParenthesisExpressions(self)


    class ThisReferenceExpressionContext(Primary_expression_startContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CSharpParser.Primary_expression_startContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def THIS(self):
            return self.getToken(CSharpParser.THIS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterThisReferenceExpression" ):
                listener.enterThisReferenceExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitThisReferenceExpression" ):
                listener.exitThisReferenceExpression(self)


    class ObjectCreationExpressionContext(Primary_expression_startContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CSharpParser.Primary_expression_startContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def NEW(self):
            return self.getToken(CSharpParser.NEW, 0)
        def type_(self):
            return self.getTypedRuleContext(CSharpParser.Type_Context,0)

        def anonymous_object_initializer(self):
            return self.getTypedRuleContext(CSharpParser.Anonymous_object_initializerContext,0)

        def rank_specifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Rank_specifierContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Rank_specifierContext,i)

        def array_initializer(self):
            return self.getTypedRuleContext(CSharpParser.Array_initializerContext,0)

        def object_creation_expression(self):
            return self.getTypedRuleContext(CSharpParser.Object_creation_expressionContext,0)

        def object_or_collection_initializer(self):
            return self.getTypedRuleContext(CSharpParser.Object_or_collection_initializerContext,0)

        def OPEN_BRACKET(self):
            return self.getToken(CSharpParser.OPEN_BRACKET, 0)
        def expression_list(self):
            return self.getTypedRuleContext(CSharpParser.Expression_listContext,0)

        def CLOSE_BRACKET(self):
            return self.getToken(CSharpParser.CLOSE_BRACKET, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterObjectCreationExpression" ):
                listener.enterObjectCreationExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitObjectCreationExpression" ):
                listener.exitObjectCreationExpression(self)


    class AnonymousMethodExpressionContext(Primary_expression_startContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CSharpParser.Primary_expression_startContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DELEGATE(self):
            return self.getToken(CSharpParser.DELEGATE, 0)
        def block(self):
            return self.getTypedRuleContext(CSharpParser.BlockContext,0)

        def ASYNC(self):
            return self.getToken(CSharpParser.ASYNC, 0)
        def OPEN_PARENS(self):
            return self.getToken(CSharpParser.OPEN_PARENS, 0)
        def CLOSE_PARENS(self):
            return self.getToken(CSharpParser.CLOSE_PARENS, 0)
        def explicit_anonymous_function_parameter_list(self):
            return self.getTypedRuleContext(CSharpParser.Explicit_anonymous_function_parameter_listContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnonymousMethodExpression" ):
                listener.enterAnonymousMethodExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnonymousMethodExpression" ):
                listener.exitAnonymousMethodExpression(self)


    class TypeofExpressionContext(Primary_expression_startContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CSharpParser.Primary_expression_startContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def TYPEOF(self):
            return self.getToken(CSharpParser.TYPEOF, 0)
        def OPEN_PARENS(self):
            return self.getToken(CSharpParser.OPEN_PARENS, 0)
        def CLOSE_PARENS(self):
            return self.getToken(CSharpParser.CLOSE_PARENS, 0)
        def unbound_type_name(self):
            return self.getTypedRuleContext(CSharpParser.Unbound_type_nameContext,0)

        def type_(self):
            return self.getTypedRuleContext(CSharpParser.Type_Context,0)

        def VOID(self):
            return self.getToken(CSharpParser.VOID, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeofExpression" ):
                listener.enterTypeofExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeofExpression" ):
                listener.exitTypeofExpression(self)


    class TupleExpressionContext(Primary_expression_startContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CSharpParser.Primary_expression_startContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def OPEN_PARENS(self):
            return self.getToken(CSharpParser.OPEN_PARENS, 0)
        def argument(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.ArgumentContext)
            else:
                return self.getTypedRuleContext(CSharpParser.ArgumentContext,i)

        def CLOSE_PARENS(self):
            return self.getToken(CSharpParser.CLOSE_PARENS, 0)
        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.COMMA)
            else:
                return self.getToken(CSharpParser.COMMA, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTupleExpression" ):
                listener.enterTupleExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTupleExpression" ):
                listener.exitTupleExpression(self)


    class UncheckedExpressionContext(Primary_expression_startContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CSharpParser.Primary_expression_startContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def UNCHECKED(self):
            return self.getToken(CSharpParser.UNCHECKED, 0)
        def OPEN_PARENS(self):
            return self.getToken(CSharpParser.OPEN_PARENS, 0)
        def expression(self):
            return self.getTypedRuleContext(CSharpParser.ExpressionContext,0)

        def CLOSE_PARENS(self):
            return self.getToken(CSharpParser.CLOSE_PARENS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUncheckedExpression" ):
                listener.enterUncheckedExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUncheckedExpression" ):
                listener.exitUncheckedExpression(self)


    class SimpleNameExpressionContext(Primary_expression_startContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CSharpParser.Primary_expression_startContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def identifier(self):
            return self.getTypedRuleContext(CSharpParser.IdentifierContext,0)

        def type_argument_list(self):
            return self.getTypedRuleContext(CSharpParser.Type_argument_listContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleNameExpression" ):
                listener.enterSimpleNameExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleNameExpression" ):
                listener.exitSimpleNameExpression(self)


    class MemberAccessExpressionContext(Primary_expression_startContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CSharpParser.Primary_expression_startContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def predefined_type(self):
            return self.getTypedRuleContext(CSharpParser.Predefined_typeContext,0)

        def qualified_alias_member(self):
            return self.getTypedRuleContext(CSharpParser.Qualified_alias_memberContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMemberAccessExpression" ):
                listener.enterMemberAccessExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMemberAccessExpression" ):
                listener.exitMemberAccessExpression(self)


    class CheckedExpressionContext(Primary_expression_startContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CSharpParser.Primary_expression_startContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CHECKED(self):
            return self.getToken(CSharpParser.CHECKED, 0)
        def OPEN_PARENS(self):
            return self.getToken(CSharpParser.OPEN_PARENS, 0)
        def expression(self):
            return self.getTypedRuleContext(CSharpParser.ExpressionContext,0)

        def CLOSE_PARENS(self):
            return self.getToken(CSharpParser.CLOSE_PARENS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCheckedExpression" ):
                listener.enterCheckedExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCheckedExpression" ):
                listener.exitCheckedExpression(self)


    class LiteralExpressionContext(Primary_expression_startContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CSharpParser.Primary_expression_startContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def literal(self):
            return self.getTypedRuleContext(CSharpParser.LiteralContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLiteralExpression" ):
                listener.enterLiteralExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLiteralExpression" ):
                listener.exitLiteralExpression(self)


    class NameofExpressionContext(Primary_expression_startContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CSharpParser.Primary_expression_startContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def NAMEOF(self):
            return self.getToken(CSharpParser.NAMEOF, 0)
        def OPEN_PARENS(self):
            return self.getToken(CSharpParser.OPEN_PARENS, 0)
        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(CSharpParser.IdentifierContext,i)

        def CLOSE_PARENS(self):
            return self.getToken(CSharpParser.CLOSE_PARENS, 0)
        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.DOT)
            else:
                return self.getToken(CSharpParser.DOT, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNameofExpression" ):
                listener.enterNameofExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNameofExpression" ):
                listener.exitNameofExpression(self)



    def primary_expression_start(self):

        localctx = CSharpParser.Primary_expression_startContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_primary_expression_start)
        self._la = 0 # Token type
        try:
            self.state = 927
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,74,self._ctx)
            if la_ == 1:
                localctx = CSharpParser.LiteralExpressionContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 806
                self.literal()
                pass

            elif la_ == 2:
                localctx = CSharpParser.SimpleNameExpressionContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 807
                self.identifier()
                self.state = 809
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,59,self._ctx)
                if la_ == 1:
                    self.state = 808
                    self.type_argument_list()


                pass

            elif la_ == 3:
                localctx = CSharpParser.ParenthesisExpressionsContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 811
                self.match(CSharpParser.OPEN_PARENS)
                self.state = 812
                self.expression()
                self.state = 813
                self.match(CSharpParser.CLOSE_PARENS)
                pass

            elif la_ == 4:
                localctx = CSharpParser.MemberAccessExpressionContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 815
                self.predefined_type()
                pass

            elif la_ == 5:
                localctx = CSharpParser.MemberAccessExpressionContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 816
                self.qualified_alias_member()
                pass

            elif la_ == 6:
                localctx = CSharpParser.LiteralAccessExpressionContext(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 817
                self.match(CSharpParser.LITERAL_ACCESS)
                pass

            elif la_ == 7:
                localctx = CSharpParser.ThisReferenceExpressionContext(self, localctx)
                self.enterOuterAlt(localctx, 7)
                self.state = 818
                self.match(CSharpParser.THIS)
                pass

            elif la_ == 8:
                localctx = CSharpParser.BaseAccessExpressionContext(self, localctx)
                self.enterOuterAlt(localctx, 8)
                self.state = 819
                self.match(CSharpParser.BASE)
                self.state = 829
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [131]:
                    self.state = 820
                    self.match(CSharpParser.DOT)
                    self.state = 821
                    self.identifier()
                    self.state = 823
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,60,self._ctx)
                    if la_ == 1:
                        self.state = 822
                        self.type_argument_list()


                    pass
                elif token in [127]:
                    self.state = 825
                    self.match(CSharpParser.OPEN_BRACKET)
                    self.state = 826
                    self.expression_list()
                    self.state = 827
                    self.match(CSharpParser.CLOSE_BRACKET)
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 9:
                localctx = CSharpParser.ObjectCreationExpressionContext(self, localctx)
                self.enterOuterAlt(localctx, 9)
                self.state = 831
                self.match(CSharpParser.NEW)
                self.state = 860
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [10, 11, 12, 14, 15, 16, 18, 20, 21, 24, 29, 32, 34, 35, 38, 45, 48, 49, 51, 55, 58, 60, 61, 63, 64, 68, 69, 71, 75, 81, 83, 85, 86, 87, 91, 99, 100, 102, 104, 106, 108, 110, 111, 113, 114, 129]:
                    self.state = 832
                    self.type_()
                    self.state = 854
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,65,self._ctx)
                    if la_ == 1:
                        self.state = 833
                        self.object_creation_expression()
                        pass

                    elif la_ == 2:
                        self.state = 834
                        self.object_or_collection_initializer()
                        pass

                    elif la_ == 3:
                        self.state = 835
                        self.match(CSharpParser.OPEN_BRACKET)
                        self.state = 836
                        self.expression_list()
                        self.state = 837
                        self.match(CSharpParser.CLOSE_BRACKET)
                        self.state = 841
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,62,self._ctx)
                        while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                            if _alt==1:
                                self.state = 838
                                self.rank_specifier() 
                            self.state = 843
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input,62,self._ctx)

                        self.state = 845
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==125:
                            self.state = 844
                            self.array_initializer()


                        pass

                    elif la_ == 4:
                        self.state = 848 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while True:
                            self.state = 847
                            self.rank_specifier()
                            self.state = 850 
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if not (_la==127):
                                break

                        self.state = 852
                        self.array_initializer()
                        pass


                    pass
                elif token in [125]:
                    self.state = 856
                    self.anonymous_object_initializer()
                    pass
                elif token in [127]:
                    self.state = 857
                    self.rank_specifier()
                    self.state = 858
                    self.array_initializer()
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 10:
                localctx = CSharpParser.TupleExpressionContext(self, localctx)
                self.enterOuterAlt(localctx, 10)
                self.state = 862
                self.match(CSharpParser.OPEN_PARENS)
                self.state = 863
                self.argument()
                self.state = 866 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 864
                    self.match(CSharpParser.COMMA)
                    self.state = 865
                    self.argument()
                    self.state = 868 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==132):
                        break

                self.state = 870
                self.match(CSharpParser.CLOSE_PARENS)
                pass

            elif la_ == 11:
                localctx = CSharpParser.TypeofExpressionContext(self, localctx)
                self.enterOuterAlt(localctx, 11)
                self.state = 872
                self.match(CSharpParser.TYPEOF)
                self.state = 873
                self.match(CSharpParser.OPEN_PARENS)
                self.state = 877
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,68,self._ctx)
                if la_ == 1:
                    self.state = 874
                    self.unbound_type_name()
                    pass

                elif la_ == 2:
                    self.state = 875
                    self.type_()
                    pass

                elif la_ == 3:
                    self.state = 876
                    self.match(CSharpParser.VOID)
                    pass


                self.state = 879
                self.match(CSharpParser.CLOSE_PARENS)
                pass

            elif la_ == 12:
                localctx = CSharpParser.CheckedExpressionContext(self, localctx)
                self.enterOuterAlt(localctx, 12)
                self.state = 880
                self.match(CSharpParser.CHECKED)
                self.state = 881
                self.match(CSharpParser.OPEN_PARENS)
                self.state = 882
                self.expression()
                self.state = 883
                self.match(CSharpParser.CLOSE_PARENS)
                pass

            elif la_ == 13:
                localctx = CSharpParser.UncheckedExpressionContext(self, localctx)
                self.enterOuterAlt(localctx, 13)
                self.state = 885
                self.match(CSharpParser.UNCHECKED)
                self.state = 886
                self.match(CSharpParser.OPEN_PARENS)
                self.state = 887
                self.expression()
                self.state = 888
                self.match(CSharpParser.CLOSE_PARENS)
                pass

            elif la_ == 14:
                localctx = CSharpParser.DefaultValueExpressionContext(self, localctx)
                self.enterOuterAlt(localctx, 14)
                self.state = 890
                self.match(CSharpParser.DEFAULT)
                self.state = 895
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,69,self._ctx)
                if la_ == 1:
                    self.state = 891
                    self.match(CSharpParser.OPEN_PARENS)
                    self.state = 892
                    self.type_()
                    self.state = 893
                    self.match(CSharpParser.CLOSE_PARENS)


                pass

            elif la_ == 15:
                localctx = CSharpParser.AnonymousMethodExpressionContext(self, localctx)
                self.enterOuterAlt(localctx, 15)
                self.state = 898
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==15:
                    self.state = 897
                    self.match(CSharpParser.ASYNC)


                self.state = 900
                self.match(CSharpParser.DELEGATE)
                self.state = 906
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==129:
                    self.state = 901
                    self.match(CSharpParser.OPEN_PARENS)
                    self.state = 903
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if ((((_la - 10)) & ~0x3f) == 0 and ((1 << (_la - 10)) & 7812956763456032119) != 0) or ((((_la - 75)) & ~0x3f) == 0 and ((1 << (_la - 75)) & 18015337681329505) != 0):
                        self.state = 902
                        self.explicit_anonymous_function_parameter_list()


                    self.state = 905
                    self.match(CSharpParser.CLOSE_PARENS)


                self.state = 908
                self.block()
                pass

            elif la_ == 16:
                localctx = CSharpParser.SizeofExpressionContext(self, localctx)
                self.enterOuterAlt(localctx, 16)
                self.state = 909
                self.match(CSharpParser.SIZEOF)
                self.state = 910
                self.match(CSharpParser.OPEN_PARENS)
                self.state = 911
                self.type_()
                self.state = 912
                self.match(CSharpParser.CLOSE_PARENS)
                pass

            elif la_ == 17:
                localctx = CSharpParser.NameofExpressionContext(self, localctx)
                self.enterOuterAlt(localctx, 17)
                self.state = 914
                self.match(CSharpParser.NAMEOF)
                self.state = 915
                self.match(CSharpParser.OPEN_PARENS)
                self.state = 921
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,73,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 916
                        self.identifier()
                        self.state = 917
                        self.match(CSharpParser.DOT) 
                    self.state = 923
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,73,self._ctx)

                self.state = 924
                self.identifier()
                self.state = 925
                self.match(CSharpParser.CLOSE_PARENS)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Throwable_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(CSharpParser.ExpressionContext,0)


        def throw_expression(self):
            return self.getTypedRuleContext(CSharpParser.Throw_expressionContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_throwable_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterThrowable_expression" ):
                listener.enterThrowable_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitThrowable_expression" ):
                listener.exitThrowable_expression(self)




    def throwable_expression(self):

        localctx = CSharpParser.Throwable_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_throwable_expression)
        try:
            self.state = 931
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [10, 11, 12, 14, 15, 16, 17, 18, 20, 21, 24, 25, 29, 30, 31, 32, 34, 35, 38, 42, 45, 48, 49, 51, 55, 58, 60, 61, 63, 64, 66, 67, 68, 69, 71, 75, 80, 81, 83, 85, 86, 87, 88, 91, 94, 96, 98, 99, 100, 101, 102, 104, 106, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 129, 135, 136, 137, 140, 142, 143, 144, 151, 152, 171]:
                self.enterOuterAlt(localctx, 1)
                self.state = 929
                self.expression()
                pass
            elif token in [95]:
                self.enterOuterAlt(localctx, 2)
                self.state = 930
                self.throw_expression()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Throw_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def THROW(self):
            return self.getToken(CSharpParser.THROW, 0)

        def expression(self):
            return self.getTypedRuleContext(CSharpParser.ExpressionContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_throw_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterThrow_expression" ):
                listener.enterThrow_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitThrow_expression" ):
                listener.exitThrow_expression(self)




    def throw_expression(self):

        localctx = CSharpParser.Throw_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_throw_expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 933
            self.match(CSharpParser.THROW)
            self.state = 934
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Member_accessContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DOT(self):
            return self.getToken(CSharpParser.DOT, 0)

        def identifier(self):
            return self.getTypedRuleContext(CSharpParser.IdentifierContext,0)


        def INTERR(self):
            return self.getToken(CSharpParser.INTERR, 0)

        def type_argument_list(self):
            return self.getTypedRuleContext(CSharpParser.Type_argument_listContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_member_access

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMember_access" ):
                listener.enterMember_access(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMember_access" ):
                listener.exitMember_access(self)




    def member_access(self):

        localctx = CSharpParser.Member_accessContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_member_access)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 937
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==148:
                self.state = 936
                self.match(CSharpParser.INTERR)


            self.state = 939
            self.match(CSharpParser.DOT)
            self.state = 940
            self.identifier()
            self.state = 942
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,77,self._ctx)
            if la_ == 1:
                self.state = 941
                self.type_argument_list()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Bracket_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_BRACKET(self):
            return self.getToken(CSharpParser.OPEN_BRACKET, 0)

        def indexer_argument(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Indexer_argumentContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Indexer_argumentContext,i)


        def CLOSE_BRACKET(self):
            return self.getToken(CSharpParser.CLOSE_BRACKET, 0)

        def INTERR(self):
            return self.getToken(CSharpParser.INTERR, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.COMMA)
            else:
                return self.getToken(CSharpParser.COMMA, i)

        def getRuleIndex(self):
            return CSharpParser.RULE_bracket_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBracket_expression" ):
                listener.enterBracket_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBracket_expression" ):
                listener.exitBracket_expression(self)




    def bracket_expression(self):

        localctx = CSharpParser.Bracket_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_bracket_expression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 945
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==148:
                self.state = 944
                self.match(CSharpParser.INTERR)


            self.state = 947
            self.match(CSharpParser.OPEN_BRACKET)
            self.state = 948
            self.indexer_argument()
            self.state = 953
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==132:
                self.state = 949
                self.match(CSharpParser.COMMA)
                self.state = 950
                self.indexer_argument()
                self.state = 955
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 956
            self.match(CSharpParser.CLOSE_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Indexer_argumentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(CSharpParser.ExpressionContext,0)


        def identifier(self):
            return self.getTypedRuleContext(CSharpParser.IdentifierContext,0)


        def COLON(self):
            return self.getToken(CSharpParser.COLON, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_indexer_argument

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndexer_argument" ):
                listener.enterIndexer_argument(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndexer_argument" ):
                listener.exitIndexer_argument(self)




    def indexer_argument(self):

        localctx = CSharpParser.Indexer_argumentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_indexer_argument)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 961
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,80,self._ctx)
            if la_ == 1:
                self.state = 958
                self.identifier()
                self.state = 959
                self.match(CSharpParser.COLON)


            self.state = 963
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Predefined_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BOOL(self):
            return self.getToken(CSharpParser.BOOL, 0)

        def BYTE(self):
            return self.getToken(CSharpParser.BYTE, 0)

        def CHAR(self):
            return self.getToken(CSharpParser.CHAR, 0)

        def DECIMAL(self):
            return self.getToken(CSharpParser.DECIMAL, 0)

        def DOUBLE(self):
            return self.getToken(CSharpParser.DOUBLE, 0)

        def FLOAT(self):
            return self.getToken(CSharpParser.FLOAT, 0)

        def INT(self):
            return self.getToken(CSharpParser.INT, 0)

        def LONG(self):
            return self.getToken(CSharpParser.LONG, 0)

        def OBJECT(self):
            return self.getToken(CSharpParser.OBJECT, 0)

        def SBYTE(self):
            return self.getToken(CSharpParser.SBYTE, 0)

        def SHORT(self):
            return self.getToken(CSharpParser.SHORT, 0)

        def STRING(self):
            return self.getToken(CSharpParser.STRING, 0)

        def UINT(self):
            return self.getToken(CSharpParser.UINT, 0)

        def ULONG(self):
            return self.getToken(CSharpParser.ULONG, 0)

        def USHORT(self):
            return self.getToken(CSharpParser.USHORT, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_predefined_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPredefined_type" ):
                listener.enterPredefined_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPredefined_type" ):
                listener.exitPredefined_type(self)




    def predefined_type(self):

        localctx = CSharpParser.Predefined_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_predefined_type)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 965
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & -9187308037727846400) != 0) or ((((_la - 68)) & ~0x3f) == 0 and ((1 << (_la - 68)) & 75170873345) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Expression_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(CSharpParser.ExpressionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.COMMA)
            else:
                return self.getToken(CSharpParser.COMMA, i)

        def getRuleIndex(self):
            return CSharpParser.RULE_expression_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpression_list" ):
                listener.enterExpression_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpression_list" ):
                listener.exitExpression_list(self)




    def expression_list(self):

        localctx = CSharpParser.Expression_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_expression_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 967
            self.expression()
            self.state = 972
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==132:
                self.state = 968
                self.match(CSharpParser.COMMA)
                self.state = 969
                self.expression()
                self.state = 974
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Object_or_collection_initializerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def object_initializer(self):
            return self.getTypedRuleContext(CSharpParser.Object_initializerContext,0)


        def collection_initializer(self):
            return self.getTypedRuleContext(CSharpParser.Collection_initializerContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_object_or_collection_initializer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterObject_or_collection_initializer" ):
                listener.enterObject_or_collection_initializer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitObject_or_collection_initializer" ):
                listener.exitObject_or_collection_initializer(self)




    def object_or_collection_initializer(self):

        localctx = CSharpParser.Object_or_collection_initializerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_object_or_collection_initializer)
        try:
            self.state = 977
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,82,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 975
                self.object_initializer()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 976
                self.collection_initializer()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Object_initializerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_BRACE(self):
            return self.getToken(CSharpParser.OPEN_BRACE, 0)

        def CLOSE_BRACE(self):
            return self.getToken(CSharpParser.CLOSE_BRACE, 0)

        def member_initializer_list(self):
            return self.getTypedRuleContext(CSharpParser.Member_initializer_listContext,0)


        def COMMA(self):
            return self.getToken(CSharpParser.COMMA, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_object_initializer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterObject_initializer" ):
                listener.enterObject_initializer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitObject_initializer" ):
                listener.exitObject_initializer(self)




    def object_initializer(self):

        localctx = CSharpParser.Object_initializerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_object_initializer)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 979
            self.match(CSharpParser.OPEN_BRACE)
            self.state = 984
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 3750091428249852928) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -9221467407831136095) != 0):
                self.state = 980
                self.member_initializer_list()
                self.state = 982
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==132:
                    self.state = 981
                    self.match(CSharpParser.COMMA)




            self.state = 986
            self.match(CSharpParser.CLOSE_BRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Member_initializer_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def member_initializer(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Member_initializerContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Member_initializerContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.COMMA)
            else:
                return self.getToken(CSharpParser.COMMA, i)

        def getRuleIndex(self):
            return CSharpParser.RULE_member_initializer_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMember_initializer_list" ):
                listener.enterMember_initializer_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMember_initializer_list" ):
                listener.exitMember_initializer_list(self)




    def member_initializer_list(self):

        localctx = CSharpParser.Member_initializer_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_member_initializer_list)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 988
            self.member_initializer()
            self.state = 993
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,85,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 989
                    self.match(CSharpParser.COMMA)
                    self.state = 990
                    self.member_initializer() 
                self.state = 995
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,85,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Member_initializerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ASSIGNMENT(self):
            return self.getToken(CSharpParser.ASSIGNMENT, 0)

        def initializer_value(self):
            return self.getTypedRuleContext(CSharpParser.Initializer_valueContext,0)


        def identifier(self):
            return self.getTypedRuleContext(CSharpParser.IdentifierContext,0)


        def OPEN_BRACKET(self):
            return self.getToken(CSharpParser.OPEN_BRACKET, 0)

        def expression(self):
            return self.getTypedRuleContext(CSharpParser.ExpressionContext,0)


        def CLOSE_BRACKET(self):
            return self.getToken(CSharpParser.CLOSE_BRACKET, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_member_initializer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMember_initializer" ):
                listener.enterMember_initializer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMember_initializer" ):
                listener.exitMember_initializer(self)




    def member_initializer(self):

        localctx = CSharpParser.Member_initializerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_member_initializer)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1001
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [10, 11, 12, 14, 15, 16, 20, 32, 35, 38, 48, 49, 51, 58, 60, 61, 64, 69, 71, 75, 81, 85, 86, 102, 106, 110, 111, 113, 114]:
                self.state = 996
                self.identifier()
                pass
            elif token in [127]:
                self.state = 997
                self.match(CSharpParser.OPEN_BRACKET)
                self.state = 998
                self.expression()
                self.state = 999
                self.match(CSharpParser.CLOSE_BRACKET)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 1003
            self.match(CSharpParser.ASSIGNMENT)
            self.state = 1004
            self.initializer_value()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Initializer_valueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(CSharpParser.ExpressionContext,0)


        def object_or_collection_initializer(self):
            return self.getTypedRuleContext(CSharpParser.Object_or_collection_initializerContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_initializer_value

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInitializer_value" ):
                listener.enterInitializer_value(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInitializer_value" ):
                listener.exitInitializer_value(self)




    def initializer_value(self):

        localctx = CSharpParser.Initializer_valueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_initializer_value)
        try:
            self.state = 1008
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [10, 11, 12, 14, 15, 16, 17, 18, 20, 21, 24, 25, 29, 30, 31, 32, 34, 35, 38, 42, 45, 48, 49, 51, 55, 58, 60, 61, 63, 64, 66, 67, 68, 69, 71, 75, 80, 81, 83, 85, 86, 87, 88, 91, 94, 96, 98, 99, 100, 101, 102, 104, 106, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 129, 135, 136, 137, 140, 142, 143, 144, 151, 152, 171]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1006
                self.expression()
                pass
            elif token in [125]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1007
                self.object_or_collection_initializer()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Collection_initializerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_BRACE(self):
            return self.getToken(CSharpParser.OPEN_BRACE, 0)

        def element_initializer(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Element_initializerContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Element_initializerContext,i)


        def CLOSE_BRACE(self):
            return self.getToken(CSharpParser.CLOSE_BRACE, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.COMMA)
            else:
                return self.getToken(CSharpParser.COMMA, i)

        def getRuleIndex(self):
            return CSharpParser.RULE_collection_initializer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCollection_initializer" ):
                listener.enterCollection_initializer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCollection_initializer" ):
                listener.exitCollection_initializer(self)




    def collection_initializer(self):

        localctx = CSharpParser.Collection_initializerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_collection_initializer)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1010
            self.match(CSharpParser.OPEN_BRACE)
            self.state = 1011
            self.element_initializer()
            self.state = 1016
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,88,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1012
                    self.match(CSharpParser.COMMA)
                    self.state = 1013
                    self.element_initializer() 
                self.state = 1018
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,88,self._ctx)

            self.state = 1020
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==132:
                self.state = 1019
                self.match(CSharpParser.COMMA)


            self.state = 1022
            self.match(CSharpParser.CLOSE_BRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Element_initializerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def non_assignment_expression(self):
            return self.getTypedRuleContext(CSharpParser.Non_assignment_expressionContext,0)


        def OPEN_BRACE(self):
            return self.getToken(CSharpParser.OPEN_BRACE, 0)

        def expression_list(self):
            return self.getTypedRuleContext(CSharpParser.Expression_listContext,0)


        def CLOSE_BRACE(self):
            return self.getToken(CSharpParser.CLOSE_BRACE, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_element_initializer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElement_initializer" ):
                listener.enterElement_initializer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElement_initializer" ):
                listener.exitElement_initializer(self)




    def element_initializer(self):

        localctx = CSharpParser.Element_initializerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_element_initializer)
        try:
            self.state = 1029
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [10, 11, 12, 14, 15, 16, 17, 18, 20, 21, 24, 25, 29, 30, 31, 32, 34, 35, 38, 42, 45, 48, 49, 51, 55, 58, 60, 61, 63, 64, 66, 67, 68, 69, 71, 75, 81, 83, 85, 86, 87, 88, 91, 94, 96, 98, 99, 100, 101, 102, 104, 106, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 129, 135, 136, 137, 140, 142, 143, 144, 151, 152, 171]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1024
                self.non_assignment_expression()
                pass
            elif token in [125]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1025
                self.match(CSharpParser.OPEN_BRACE)
                self.state = 1026
                self.expression_list()
                self.state = 1027
                self.match(CSharpParser.CLOSE_BRACE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Anonymous_object_initializerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_BRACE(self):
            return self.getToken(CSharpParser.OPEN_BRACE, 0)

        def CLOSE_BRACE(self):
            return self.getToken(CSharpParser.CLOSE_BRACE, 0)

        def member_declarator_list(self):
            return self.getTypedRuleContext(CSharpParser.Member_declarator_listContext,0)


        def COMMA(self):
            return self.getToken(CSharpParser.COMMA, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_anonymous_object_initializer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnonymous_object_initializer" ):
                listener.enterAnonymous_object_initializer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnonymous_object_initializer" ):
                listener.exitAnonymous_object_initializer(self)




    def anonymous_object_initializer(self):

        localctx = CSharpParser.Anonymous_object_initializerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_anonymous_object_initializer)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1031
            self.match(CSharpParser.OPEN_BRACE)
            self.state = 1036
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 10)) & ~0x3f) == 0 and ((1 << (_la - 10)) & 3417425939254529527) != 0) or ((((_la - 75)) & ~0x3f) == 0 and ((1 << (_la - 75)) & 19140129564736833) != 0):
                self.state = 1032
                self.member_declarator_list()
                self.state = 1034
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==132:
                    self.state = 1033
                    self.match(CSharpParser.COMMA)




            self.state = 1038
            self.match(CSharpParser.CLOSE_BRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Member_declarator_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def member_declarator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Member_declaratorContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Member_declaratorContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.COMMA)
            else:
                return self.getToken(CSharpParser.COMMA, i)

        def getRuleIndex(self):
            return CSharpParser.RULE_member_declarator_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMember_declarator_list" ):
                listener.enterMember_declarator_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMember_declarator_list" ):
                listener.exitMember_declarator_list(self)




    def member_declarator_list(self):

        localctx = CSharpParser.Member_declarator_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_member_declarator_list)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1040
            self.member_declarator()
            self.state = 1045
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,93,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1041
                    self.match(CSharpParser.COMMA)
                    self.state = 1042
                    self.member_declarator() 
                self.state = 1047
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,93,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Member_declaratorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def primary_expression(self):
            return self.getTypedRuleContext(CSharpParser.Primary_expressionContext,0)


        def identifier(self):
            return self.getTypedRuleContext(CSharpParser.IdentifierContext,0)


        def ASSIGNMENT(self):
            return self.getToken(CSharpParser.ASSIGNMENT, 0)

        def expression(self):
            return self.getTypedRuleContext(CSharpParser.ExpressionContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_member_declarator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMember_declarator" ):
                listener.enterMember_declarator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMember_declarator" ):
                listener.exitMember_declarator(self)




    def member_declarator(self):

        localctx = CSharpParser.Member_declaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_member_declarator)
        try:
            self.state = 1053
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,94,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1048
                self.primary_expression()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1049
                self.identifier()
                self.state = 1050
                self.match(CSharpParser.ASSIGNMENT)
                self.state = 1051
                self.expression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Unbound_type_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(CSharpParser.IdentifierContext,i)


        def DOUBLE_COLON(self):
            return self.getToken(CSharpParser.DOUBLE_COLON, 0)

        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.DOT)
            else:
                return self.getToken(CSharpParser.DOT, i)

        def generic_dimension_specifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Generic_dimension_specifierContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Generic_dimension_specifierContext,i)


        def getRuleIndex(self):
            return CSharpParser.RULE_unbound_type_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnbound_type_name" ):
                listener.enterUnbound_type_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnbound_type_name" ):
                listener.exitUnbound_type_name(self)




    def unbound_type_name(self):

        localctx = CSharpParser.Unbound_type_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_unbound_type_name)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1055
            self.identifier()
            self.state = 1064
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [130, 131, 146]:
                self.state = 1057
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==146:
                    self.state = 1056
                    self.generic_dimension_specifier()


                pass
            elif token in [149]:
                self.state = 1059
                self.match(CSharpParser.DOUBLE_COLON)
                self.state = 1060
                self.identifier()
                self.state = 1062
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==146:
                    self.state = 1061
                    self.generic_dimension_specifier()


                pass
            else:
                raise NoViableAltException(self)

            self.state = 1073
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==131:
                self.state = 1066
                self.match(CSharpParser.DOT)
                self.state = 1067
                self.identifier()
                self.state = 1069
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==146:
                    self.state = 1068
                    self.generic_dimension_specifier()


                self.state = 1075
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Generic_dimension_specifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LT(self):
            return self.getToken(CSharpParser.LT, 0)

        def GT(self):
            return self.getToken(CSharpParser.GT, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.COMMA)
            else:
                return self.getToken(CSharpParser.COMMA, i)

        def getRuleIndex(self):
            return CSharpParser.RULE_generic_dimension_specifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGeneric_dimension_specifier" ):
                listener.enterGeneric_dimension_specifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGeneric_dimension_specifier" ):
                listener.exitGeneric_dimension_specifier(self)




    def generic_dimension_specifier(self):

        localctx = CSharpParser.Generic_dimension_specifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_generic_dimension_specifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1076
            self.match(CSharpParser.LT)
            self.state = 1080
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==132:
                self.state = 1077
                self.match(CSharpParser.COMMA)
                self.state = 1082
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1083
            self.match(CSharpParser.GT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IsTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def base_type(self):
            return self.getTypedRuleContext(CSharpParser.Base_typeContext,0)


        def rank_specifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Rank_specifierContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Rank_specifierContext,i)


        def STAR(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.STAR)
            else:
                return self.getToken(CSharpParser.STAR, i)

        def INTERR(self):
            return self.getToken(CSharpParser.INTERR, 0)

        def isTypePatternArms(self):
            return self.getTypedRuleContext(CSharpParser.IsTypePatternArmsContext,0)


        def identifier(self):
            return self.getTypedRuleContext(CSharpParser.IdentifierContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_isType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIsType" ):
                listener.enterIsType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIsType" ):
                listener.exitIsType(self)




    def isType(self):

        localctx = CSharpParser.IsTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_isType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1085
            self.base_type()
            self.state = 1090
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==127 or _la==137:
                self.state = 1088
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [127]:
                    self.state = 1086
                    self.rank_specifier()
                    pass
                elif token in [137]:
                    self.state = 1087
                    self.match(CSharpParser.STAR)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1092
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1094
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,103,self._ctx)
            if la_ == 1:
                self.state = 1093
                self.match(CSharpParser.INTERR)


            self.state = 1097
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==125:
                self.state = 1096
                self.isTypePatternArms()


            self.state = 1100
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,105,self._ctx)
            if la_ == 1:
                self.state = 1099
                self.identifier()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IsTypePatternArmsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_BRACE(self):
            return self.getToken(CSharpParser.OPEN_BRACE, 0)

        def isTypePatternArm(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.IsTypePatternArmContext)
            else:
                return self.getTypedRuleContext(CSharpParser.IsTypePatternArmContext,i)


        def CLOSE_BRACE(self):
            return self.getToken(CSharpParser.CLOSE_BRACE, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.COMMA)
            else:
                return self.getToken(CSharpParser.COMMA, i)

        def getRuleIndex(self):
            return CSharpParser.RULE_isTypePatternArms

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIsTypePatternArms" ):
                listener.enterIsTypePatternArms(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIsTypePatternArms" ):
                listener.exitIsTypePatternArms(self)




    def isTypePatternArms(self):

        localctx = CSharpParser.IsTypePatternArmsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_isTypePatternArms)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1102
            self.match(CSharpParser.OPEN_BRACE)
            self.state = 1103
            self.isTypePatternArm()
            self.state = 1108
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==132:
                self.state = 1104
                self.match(CSharpParser.COMMA)
                self.state = 1105
                self.isTypePatternArm()
                self.state = 1110
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1111
            self.match(CSharpParser.CLOSE_BRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IsTypePatternArmContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(CSharpParser.IdentifierContext,0)


        def COLON(self):
            return self.getToken(CSharpParser.COLON, 0)

        def expression(self):
            return self.getTypedRuleContext(CSharpParser.ExpressionContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_isTypePatternArm

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIsTypePatternArm" ):
                listener.enterIsTypePatternArm(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIsTypePatternArm" ):
                listener.exitIsTypePatternArm(self)




    def isTypePatternArm(self):

        localctx = CSharpParser.IsTypePatternArmContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_isTypePatternArm)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1113
            self.identifier()
            self.state = 1114
            self.match(CSharpParser.COLON)
            self.state = 1115
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Lambda_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def anonymous_function_signature(self):
            return self.getTypedRuleContext(CSharpParser.Anonymous_function_signatureContext,0)


        def right_arrow(self):
            return self.getTypedRuleContext(CSharpParser.Right_arrowContext,0)


        def anonymous_function_body(self):
            return self.getTypedRuleContext(CSharpParser.Anonymous_function_bodyContext,0)


        def ASYNC(self):
            return self.getToken(CSharpParser.ASYNC, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_lambda_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLambda_expression" ):
                listener.enterLambda_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLambda_expression" ):
                listener.exitLambda_expression(self)




    def lambda_expression(self):

        localctx = CSharpParser.Lambda_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_lambda_expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1118
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,107,self._ctx)
            if la_ == 1:
                self.state = 1117
                self.match(CSharpParser.ASYNC)


            self.state = 1120
            self.anonymous_function_signature()
            self.state = 1121
            self.right_arrow()
            self.state = 1122
            self.anonymous_function_body()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Anonymous_function_signatureContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PARENS(self):
            return self.getToken(CSharpParser.OPEN_PARENS, 0)

        def CLOSE_PARENS(self):
            return self.getToken(CSharpParser.CLOSE_PARENS, 0)

        def explicit_anonymous_function_parameter_list(self):
            return self.getTypedRuleContext(CSharpParser.Explicit_anonymous_function_parameter_listContext,0)


        def implicit_anonymous_function_parameter_list(self):
            return self.getTypedRuleContext(CSharpParser.Implicit_anonymous_function_parameter_listContext,0)


        def identifier(self):
            return self.getTypedRuleContext(CSharpParser.IdentifierContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_anonymous_function_signature

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnonymous_function_signature" ):
                listener.enterAnonymous_function_signature(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnonymous_function_signature" ):
                listener.exitAnonymous_function_signature(self)




    def anonymous_function_signature(self):

        localctx = CSharpParser.Anonymous_function_signatureContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_anonymous_function_signature)
        try:
            self.state = 1135
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,108,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1124
                self.match(CSharpParser.OPEN_PARENS)
                self.state = 1125
                self.match(CSharpParser.CLOSE_PARENS)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1126
                self.match(CSharpParser.OPEN_PARENS)
                self.state = 1127
                self.explicit_anonymous_function_parameter_list()
                self.state = 1128
                self.match(CSharpParser.CLOSE_PARENS)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1130
                self.match(CSharpParser.OPEN_PARENS)
                self.state = 1131
                self.implicit_anonymous_function_parameter_list()
                self.state = 1132
                self.match(CSharpParser.CLOSE_PARENS)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1134
                self.identifier()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Explicit_anonymous_function_parameter_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def explicit_anonymous_function_parameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Explicit_anonymous_function_parameterContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Explicit_anonymous_function_parameterContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.COMMA)
            else:
                return self.getToken(CSharpParser.COMMA, i)

        def getRuleIndex(self):
            return CSharpParser.RULE_explicit_anonymous_function_parameter_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExplicit_anonymous_function_parameter_list" ):
                listener.enterExplicit_anonymous_function_parameter_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExplicit_anonymous_function_parameter_list" ):
                listener.exitExplicit_anonymous_function_parameter_list(self)




    def explicit_anonymous_function_parameter_list(self):

        localctx = CSharpParser.Explicit_anonymous_function_parameter_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_explicit_anonymous_function_parameter_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1137
            self.explicit_anonymous_function_parameter()
            self.state = 1142
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==132:
                self.state = 1138
                self.match(CSharpParser.COMMA)
                self.state = 1139
                self.explicit_anonymous_function_parameter()
                self.state = 1144
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Explicit_anonymous_function_parameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.refout = None # Token

        def type_(self):
            return self.getTypedRuleContext(CSharpParser.Type_Context,0)


        def identifier(self):
            return self.getTypedRuleContext(CSharpParser.IdentifierContext,0)


        def REF(self):
            return self.getToken(CSharpParser.REF, 0)

        def OUT(self):
            return self.getToken(CSharpParser.OUT, 0)

        def IN(self):
            return self.getToken(CSharpParser.IN, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_explicit_anonymous_function_parameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExplicit_anonymous_function_parameter" ):
                listener.enterExplicit_anonymous_function_parameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExplicit_anonymous_function_parameter" ):
                listener.exitExplicit_anonymous_function_parameter(self)




    def explicit_anonymous_function_parameter(self):

        localctx = CSharpParser.Explicit_anonymous_function_parameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_explicit_anonymous_function_parameter)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1146
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 54)) & ~0x3f) == 0 and ((1 << (_la - 54)) & 67371009) != 0):
                self.state = 1145
                localctx.refout = self._input.LT(1)
                _la = self._input.LA(1)
                if not(((((_la - 54)) & ~0x3f) == 0 and ((1 << (_la - 54)) & 67371009) != 0)):
                    localctx.refout = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 1148
            self.type_()
            self.state = 1149
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Implicit_anonymous_function_parameter_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(CSharpParser.IdentifierContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.COMMA)
            else:
                return self.getToken(CSharpParser.COMMA, i)

        def getRuleIndex(self):
            return CSharpParser.RULE_implicit_anonymous_function_parameter_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImplicit_anonymous_function_parameter_list" ):
                listener.enterImplicit_anonymous_function_parameter_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImplicit_anonymous_function_parameter_list" ):
                listener.exitImplicit_anonymous_function_parameter_list(self)




    def implicit_anonymous_function_parameter_list(self):

        localctx = CSharpParser.Implicit_anonymous_function_parameter_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_implicit_anonymous_function_parameter_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1151
            self.identifier()
            self.state = 1156
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==132:
                self.state = 1152
                self.match(CSharpParser.COMMA)
                self.state = 1153
                self.identifier()
                self.state = 1158
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Anonymous_function_bodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def throwable_expression(self):
            return self.getTypedRuleContext(CSharpParser.Throwable_expressionContext,0)


        def block(self):
            return self.getTypedRuleContext(CSharpParser.BlockContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_anonymous_function_body

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnonymous_function_body" ):
                listener.enterAnonymous_function_body(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnonymous_function_body" ):
                listener.exitAnonymous_function_body(self)




    def anonymous_function_body(self):

        localctx = CSharpParser.Anonymous_function_bodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_anonymous_function_body)
        try:
            self.state = 1161
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [10, 11, 12, 14, 15, 16, 17, 18, 20, 21, 24, 25, 29, 30, 31, 32, 34, 35, 38, 42, 45, 48, 49, 51, 55, 58, 60, 61, 63, 64, 66, 67, 68, 69, 71, 75, 80, 81, 83, 85, 86, 87, 88, 91, 94, 95, 96, 98, 99, 100, 101, 102, 104, 106, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 129, 135, 136, 137, 140, 142, 143, 144, 151, 152, 171]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1159
                self.throwable_expression()
                pass
            elif token in [125]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1160
                self.block()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Query_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def from_clause(self):
            return self.getTypedRuleContext(CSharpParser.From_clauseContext,0)


        def query_body(self):
            return self.getTypedRuleContext(CSharpParser.Query_bodyContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_query_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuery_expression" ):
                listener.enterQuery_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuery_expression" ):
                listener.exitQuery_expression(self)




    def query_expression(self):

        localctx = CSharpParser.Query_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_query_expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1163
            self.from_clause()
            self.state = 1164
            self.query_body()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class From_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FROM(self):
            return self.getToken(CSharpParser.FROM, 0)

        def identifier(self):
            return self.getTypedRuleContext(CSharpParser.IdentifierContext,0)


        def IN(self):
            return self.getToken(CSharpParser.IN, 0)

        def expression(self):
            return self.getTypedRuleContext(CSharpParser.ExpressionContext,0)


        def type_(self):
            return self.getTypedRuleContext(CSharpParser.Type_Context,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_from_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFrom_clause" ):
                listener.enterFrom_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFrom_clause" ):
                listener.exitFrom_clause(self)




    def from_clause(self):

        localctx = CSharpParser.From_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_from_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1166
            self.match(CSharpParser.FROM)
            self.state = 1168
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,113,self._ctx)
            if la_ == 1:
                self.state = 1167
                self.type_()


            self.state = 1170
            self.identifier()
            self.state = 1171
            self.match(CSharpParser.IN)
            self.state = 1172
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Query_bodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def select_or_group_clause(self):
            return self.getTypedRuleContext(CSharpParser.Select_or_group_clauseContext,0)


        def query_body_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Query_body_clauseContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Query_body_clauseContext,i)


        def query_continuation(self):
            return self.getTypedRuleContext(CSharpParser.Query_continuationContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_query_body

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuery_body" ):
                listener.enterQuery_body(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuery_body" ):
                listener.exitQuery_body(self)




    def query_body(self):

        localctx = CSharpParser.Query_bodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_query_body)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1177
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 48)) & ~0x3f) == 0 and ((1 << (_la - 48)) & -9223372036846374911) != 0):
                self.state = 1174
                self.query_body_clause()
                self.state = 1179
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1180
            self.select_or_group_clause()
            self.state = 1182
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,115,self._ctx)
            if la_ == 1:
                self.state = 1181
                self.query_continuation()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Query_body_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def from_clause(self):
            return self.getTypedRuleContext(CSharpParser.From_clauseContext,0)


        def let_clause(self):
            return self.getTypedRuleContext(CSharpParser.Let_clauseContext,0)


        def where_clause(self):
            return self.getTypedRuleContext(CSharpParser.Where_clauseContext,0)


        def combined_join_clause(self):
            return self.getTypedRuleContext(CSharpParser.Combined_join_clauseContext,0)


        def orderby_clause(self):
            return self.getTypedRuleContext(CSharpParser.Orderby_clauseContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_query_body_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuery_body_clause" ):
                listener.enterQuery_body_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuery_body_clause" ):
                listener.exitQuery_body_clause(self)




    def query_body_clause(self):

        localctx = CSharpParser.Query_body_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_query_body_clause)
        try:
            self.state = 1189
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [48]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1184
                self.from_clause()
                pass
            elif token in [61]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1185
                self.let_clause()
                pass
            elif token in [111]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1186
                self.where_clause()
                pass
            elif token in [60]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1187
                self.combined_join_clause()
                pass
            elif token in [71]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1188
                self.orderby_clause()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Let_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LET(self):
            return self.getToken(CSharpParser.LET, 0)

        def identifier(self):
            return self.getTypedRuleContext(CSharpParser.IdentifierContext,0)


        def ASSIGNMENT(self):
            return self.getToken(CSharpParser.ASSIGNMENT, 0)

        def expression(self):
            return self.getTypedRuleContext(CSharpParser.ExpressionContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_let_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLet_clause" ):
                listener.enterLet_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLet_clause" ):
                listener.exitLet_clause(self)




    def let_clause(self):

        localctx = CSharpParser.Let_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_let_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1191
            self.match(CSharpParser.LET)
            self.state = 1192
            self.identifier()
            self.state = 1193
            self.match(CSharpParser.ASSIGNMENT)
            self.state = 1194
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Where_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHERE(self):
            return self.getToken(CSharpParser.WHERE, 0)

        def expression(self):
            return self.getTypedRuleContext(CSharpParser.ExpressionContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_where_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhere_clause" ):
                listener.enterWhere_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhere_clause" ):
                listener.exitWhere_clause(self)




    def where_clause(self):

        localctx = CSharpParser.Where_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_where_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1196
            self.match(CSharpParser.WHERE)
            self.state = 1197
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Combined_join_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def JOIN(self):
            return self.getToken(CSharpParser.JOIN, 0)

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(CSharpParser.IdentifierContext,i)


        def IN(self):
            return self.getToken(CSharpParser.IN, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(CSharpParser.ExpressionContext,i)


        def ON(self):
            return self.getToken(CSharpParser.ON, 0)

        def EQUALS(self):
            return self.getToken(CSharpParser.EQUALS, 0)

        def type_(self):
            return self.getTypedRuleContext(CSharpParser.Type_Context,0)


        def INTO(self):
            return self.getToken(CSharpParser.INTO, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_combined_join_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCombined_join_clause" ):
                listener.enterCombined_join_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCombined_join_clause" ):
                listener.exitCombined_join_clause(self)




    def combined_join_clause(self):

        localctx = CSharpParser.Combined_join_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_combined_join_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1199
            self.match(CSharpParser.JOIN)
            self.state = 1201
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,117,self._ctx)
            if la_ == 1:
                self.state = 1200
                self.type_()


            self.state = 1203
            self.identifier()
            self.state = 1204
            self.match(CSharpParser.IN)
            self.state = 1205
            self.expression()
            self.state = 1206
            self.match(CSharpParser.ON)
            self.state = 1207
            self.expression()
            self.state = 1208
            self.match(CSharpParser.EQUALS)
            self.state = 1209
            self.expression()
            self.state = 1212
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==58:
                self.state = 1210
                self.match(CSharpParser.INTO)
                self.state = 1211
                self.identifier()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Orderby_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ORDERBY(self):
            return self.getToken(CSharpParser.ORDERBY, 0)

        def ordering(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.OrderingContext)
            else:
                return self.getTypedRuleContext(CSharpParser.OrderingContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.COMMA)
            else:
                return self.getToken(CSharpParser.COMMA, i)

        def getRuleIndex(self):
            return CSharpParser.RULE_orderby_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOrderby_clause" ):
                listener.enterOrderby_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOrderby_clause" ):
                listener.exitOrderby_clause(self)




    def orderby_clause(self):

        localctx = CSharpParser.Orderby_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_orderby_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1214
            self.match(CSharpParser.ORDERBY)
            self.state = 1215
            self.ordering()
            self.state = 1220
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==132:
                self.state = 1216
                self.match(CSharpParser.COMMA)
                self.state = 1217
                self.ordering()
                self.state = 1222
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OrderingContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.dir_ = None # Token

        def expression(self):
            return self.getTypedRuleContext(CSharpParser.ExpressionContext,0)


        def ASCENDING(self):
            return self.getToken(CSharpParser.ASCENDING, 0)

        def DESCENDING(self):
            return self.getToken(CSharpParser.DESCENDING, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_ordering

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOrdering" ):
                listener.enterOrdering(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOrdering" ):
                listener.exitOrdering(self)




    def ordering(self):

        localctx = CSharpParser.OrderingContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_ordering)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1223
            self.expression()
            self.state = 1225
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==14 or _la==32:
                self.state = 1224
                localctx.dir_ = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==14 or _la==32):
                    localctx.dir_ = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Select_or_group_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SELECT(self):
            return self.getToken(CSharpParser.SELECT, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(CSharpParser.ExpressionContext,i)


        def GROUP(self):
            return self.getToken(CSharpParser.GROUP, 0)

        def BY(self):
            return self.getToken(CSharpParser.BY, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_select_or_group_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelect_or_group_clause" ):
                listener.enterSelect_or_group_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelect_or_group_clause" ):
                listener.exitSelect_or_group_clause(self)




    def select_or_group_clause(self):

        localctx = CSharpParser.Select_or_group_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_select_or_group_clause)
        try:
            self.state = 1234
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [85]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1227
                self.match(CSharpParser.SELECT)
                self.state = 1228
                self.expression()
                pass
            elif token in [51]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1229
                self.match(CSharpParser.GROUP)
                self.state = 1230
                self.expression()
                self.state = 1231
                self.match(CSharpParser.BY)
                self.state = 1232
                self.expression()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Query_continuationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INTO(self):
            return self.getToken(CSharpParser.INTO, 0)

        def identifier(self):
            return self.getTypedRuleContext(CSharpParser.IdentifierContext,0)


        def query_body(self):
            return self.getTypedRuleContext(CSharpParser.Query_bodyContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_query_continuation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuery_continuation" ):
                listener.enterQuery_continuation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuery_continuation" ):
                listener.exitQuery_continuation(self)




    def query_continuation(self):

        localctx = CSharpParser.Query_continuationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_query_continuation)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1236
            self.match(CSharpParser.INTO)
            self.state = 1237
            self.identifier()
            self.state = 1238
            self.query_body()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def labeled_Statement(self):
            return self.getTypedRuleContext(CSharpParser.Labeled_StatementContext,0)


        def declarationStatement(self):
            return self.getTypedRuleContext(CSharpParser.DeclarationStatementContext,0)


        def embedded_statement(self):
            return self.getTypedRuleContext(CSharpParser.Embedded_statementContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatement" ):
                listener.enterStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatement" ):
                listener.exitStatement(self)




    def statement(self):

        localctx = CSharpParser.StatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_statement)
        try:
            self.state = 1243
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,122,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1240
                self.labeled_Statement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1241
                self.declarationStatement()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1242
                self.embedded_statement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeclarationStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def local_variable_declaration(self):
            return self.getTypedRuleContext(CSharpParser.Local_variable_declarationContext,0)


        def SEMICOLON(self):
            return self.getToken(CSharpParser.SEMICOLON, 0)

        def local_constant_declaration(self):
            return self.getTypedRuleContext(CSharpParser.Local_constant_declarationContext,0)


        def local_function_declaration(self):
            return self.getTypedRuleContext(CSharpParser.Local_function_declarationContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_declarationStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclarationStatement" ):
                listener.enterDeclarationStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclarationStatement" ):
                listener.exitDeclarationStatement(self)




    def declarationStatement(self):

        localctx = CSharpParser.DeclarationStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_declarationStatement)
        try:
            self.state = 1252
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,123,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1245
                self.local_variable_declaration()
                self.state = 1246
                self.match(CSharpParser.SEMICOLON)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1248
                self.local_constant_declaration()
                self.state = 1249
                self.match(CSharpParser.SEMICOLON)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1251
                self.local_function_declaration()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Local_function_declarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def local_function_header(self):
            return self.getTypedRuleContext(CSharpParser.Local_function_headerContext,0)


        def local_function_body(self):
            return self.getTypedRuleContext(CSharpParser.Local_function_bodyContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_local_function_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLocal_function_declaration" ):
                listener.enterLocal_function_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLocal_function_declaration" ):
                listener.exitLocal_function_declaration(self)




    def local_function_declaration(self):

        localctx = CSharpParser.Local_function_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_local_function_declaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1254
            self.local_function_header()
            self.state = 1255
            self.local_function_body()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Local_function_headerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def return_type(self):
            return self.getTypedRuleContext(CSharpParser.Return_typeContext,0)


        def identifier(self):
            return self.getTypedRuleContext(CSharpParser.IdentifierContext,0)


        def OPEN_PARENS(self):
            return self.getToken(CSharpParser.OPEN_PARENS, 0)

        def CLOSE_PARENS(self):
            return self.getToken(CSharpParser.CLOSE_PARENS, 0)

        def local_function_modifiers(self):
            return self.getTypedRuleContext(CSharpParser.Local_function_modifiersContext,0)


        def type_parameter_list(self):
            return self.getTypedRuleContext(CSharpParser.Type_parameter_listContext,0)


        def formal_parameter_list(self):
            return self.getTypedRuleContext(CSharpParser.Formal_parameter_listContext,0)


        def type_parameter_constraints_clauses(self):
            return self.getTypedRuleContext(CSharpParser.Type_parameter_constraints_clausesContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_local_function_header

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLocal_function_header" ):
                listener.enterLocal_function_header(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLocal_function_header" ):
                listener.exitLocal_function_header(self)




    def local_function_header(self):

        localctx = CSharpParser.Local_function_headerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_local_function_header)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1258
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,124,self._ctx)
            if la_ == 1:
                self.state = 1257
                self.local_function_modifiers()


            self.state = 1260
            self.return_type()
            self.state = 1261
            self.identifier()
            self.state = 1263
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==146:
                self.state = 1262
                self.type_parameter_list()


            self.state = 1265
            self.match(CSharpParser.OPEN_PARENS)
            self.state = 1267
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 10)) & ~0x3f) == 0 and ((1 << (_la - 10)) & 7812956763456032119) != 0) or ((((_la - 74)) & ~0x3f) == 0 and ((1 << (_la - 74)) & 45037874618448579) != 0):
                self.state = 1266
                self.formal_parameter_list()


            self.state = 1269
            self.match(CSharpParser.CLOSE_PARENS)
            self.state = 1271
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==111:
                self.state = 1270
                self.type_parameter_constraints_clauses()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Local_function_modifiersContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ASYNC(self):
            return self.getToken(CSharpParser.ASYNC, 0)

        def UNSAFE(self):
            return self.getToken(CSharpParser.UNSAFE, 0)

        def STATIC(self):
            return self.getToken(CSharpParser.STATIC, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_local_function_modifiers

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLocal_function_modifiers" ):
                listener.enterLocal_function_modifiers(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLocal_function_modifiers" ):
                listener.exitLocal_function_modifiers(self)




    def local_function_modifiers(self):

        localctx = CSharpParser.Local_function_modifiersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_local_function_modifiers)
        self._la = 0 # Token type
        try:
            self.state = 1279
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [15, 103]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1273
                _la = self._input.LA(1)
                if not(_la==15 or _la==103):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1275
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==90:
                    self.state = 1274
                    self.match(CSharpParser.STATIC)


                pass
            elif token in [90]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1277
                self.match(CSharpParser.STATIC)
                self.state = 1278
                _la = self._input.LA(1)
                if not(_la==15 or _la==103):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Local_function_bodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def block(self):
            return self.getTypedRuleContext(CSharpParser.BlockContext,0)


        def right_arrow(self):
            return self.getTypedRuleContext(CSharpParser.Right_arrowContext,0)


        def throwable_expression(self):
            return self.getTypedRuleContext(CSharpParser.Throwable_expressionContext,0)


        def SEMICOLON(self):
            return self.getToken(CSharpParser.SEMICOLON, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_local_function_body

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLocal_function_body" ):
                listener.enterLocal_function_body(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLocal_function_body" ):
                listener.exitLocal_function_body(self)




    def local_function_body(self):

        localctx = CSharpParser.Local_function_bodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_local_function_body)
        try:
            self.state = 1286
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [125]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1281
                self.block()
                pass
            elif token in [145]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1282
                self.right_arrow()
                self.state = 1283
                self.throwable_expression()
                self.state = 1284
                self.match(CSharpParser.SEMICOLON)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Labeled_StatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(CSharpParser.IdentifierContext,0)


        def COLON(self):
            return self.getToken(CSharpParser.COLON, 0)

        def statement(self):
            return self.getTypedRuleContext(CSharpParser.StatementContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_labeled_Statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLabeled_Statement" ):
                listener.enterLabeled_Statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLabeled_Statement" ):
                listener.exitLabeled_Statement(self)




    def labeled_Statement(self):

        localctx = CSharpParser.Labeled_StatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_labeled_Statement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1288
            self.identifier()
            self.state = 1289
            self.match(CSharpParser.COLON)
            self.state = 1290
            self.statement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Embedded_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def block(self):
            return self.getTypedRuleContext(CSharpParser.BlockContext,0)


        def simple_embedded_statement(self):
            return self.getTypedRuleContext(CSharpParser.Simple_embedded_statementContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_embedded_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEmbedded_statement" ):
                listener.enterEmbedded_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEmbedded_statement" ):
                listener.exitEmbedded_statement(self)




    def embedded_statement(self):

        localctx = CSharpParser.Embedded_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_embedded_statement)
        try:
            self.state = 1294
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [125]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1292
                self.block()
                pass
            elif token in [10, 11, 12, 14, 15, 16, 17, 18, 19, 20, 21, 24, 25, 28, 29, 30, 31, 32, 33, 34, 35, 38, 42, 44, 45, 46, 47, 48, 49, 50, 51, 52, 55, 58, 60, 61, 62, 63, 64, 66, 67, 68, 69, 71, 75, 80, 81, 82, 83, 85, 86, 87, 88, 91, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 129, 134, 135, 136, 137, 140, 142, 143, 144, 151, 152, 171]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1293
                self.simple_embedded_statement()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Simple_embedded_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CSharpParser.RULE_simple_embedded_statement

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class TryStatementContext(Simple_embedded_statementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CSharpParser.Simple_embedded_statementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def TRY(self):
            return self.getToken(CSharpParser.TRY, 0)
        def block(self):
            return self.getTypedRuleContext(CSharpParser.BlockContext,0)

        def catch_clauses(self):
            return self.getTypedRuleContext(CSharpParser.Catch_clausesContext,0)

        def finally_clause(self):
            return self.getTypedRuleContext(CSharpParser.Finally_clauseContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTryStatement" ):
                listener.enterTryStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTryStatement" ):
                listener.exitTryStatement(self)


    class CheckedStatementContext(Simple_embedded_statementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CSharpParser.Simple_embedded_statementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CHECKED(self):
            return self.getToken(CSharpParser.CHECKED, 0)
        def block(self):
            return self.getTypedRuleContext(CSharpParser.BlockContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCheckedStatement" ):
                listener.enterCheckedStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCheckedStatement" ):
                listener.exitCheckedStatement(self)


    class ThrowStatementContext(Simple_embedded_statementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CSharpParser.Simple_embedded_statementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def THROW(self):
            return self.getToken(CSharpParser.THROW, 0)
        def SEMICOLON(self):
            return self.getToken(CSharpParser.SEMICOLON, 0)
        def expression(self):
            return self.getTypedRuleContext(CSharpParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterThrowStatement" ):
                listener.enterThrowStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitThrowStatement" ):
                listener.exitThrowStatement(self)


    class TheEmptyStatementContext(Simple_embedded_statementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CSharpParser.Simple_embedded_statementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SEMICOLON(self):
            return self.getToken(CSharpParser.SEMICOLON, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTheEmptyStatement" ):
                listener.enterTheEmptyStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTheEmptyStatement" ):
                listener.exitTheEmptyStatement(self)


    class UnsafeStatementContext(Simple_embedded_statementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CSharpParser.Simple_embedded_statementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def UNSAFE(self):
            return self.getToken(CSharpParser.UNSAFE, 0)
        def block(self):
            return self.getTypedRuleContext(CSharpParser.BlockContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnsafeStatement" ):
                listener.enterUnsafeStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnsafeStatement" ):
                listener.exitUnsafeStatement(self)


    class ForStatementContext(Simple_embedded_statementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CSharpParser.Simple_embedded_statementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def FOR(self):
            return self.getToken(CSharpParser.FOR, 0)
        def OPEN_PARENS(self):
            return self.getToken(CSharpParser.OPEN_PARENS, 0)
        def SEMICOLON(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.SEMICOLON)
            else:
                return self.getToken(CSharpParser.SEMICOLON, i)
        def CLOSE_PARENS(self):
            return self.getToken(CSharpParser.CLOSE_PARENS, 0)
        def embedded_statement(self):
            return self.getTypedRuleContext(CSharpParser.Embedded_statementContext,0)

        def for_initializer(self):
            return self.getTypedRuleContext(CSharpParser.For_initializerContext,0)

        def expression(self):
            return self.getTypedRuleContext(CSharpParser.ExpressionContext,0)

        def for_iterator(self):
            return self.getTypedRuleContext(CSharpParser.For_iteratorContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForStatement" ):
                listener.enterForStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForStatement" ):
                listener.exitForStatement(self)


    class BreakStatementContext(Simple_embedded_statementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CSharpParser.Simple_embedded_statementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def BREAK(self):
            return self.getToken(CSharpParser.BREAK, 0)
        def SEMICOLON(self):
            return self.getToken(CSharpParser.SEMICOLON, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBreakStatement" ):
                listener.enterBreakStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBreakStatement" ):
                listener.exitBreakStatement(self)


    class IfStatementContext(Simple_embedded_statementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CSharpParser.Simple_embedded_statementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def IF(self):
            return self.getToken(CSharpParser.IF, 0)
        def OPEN_PARENS(self):
            return self.getToken(CSharpParser.OPEN_PARENS, 0)
        def expression(self):
            return self.getTypedRuleContext(CSharpParser.ExpressionContext,0)

        def CLOSE_PARENS(self):
            return self.getToken(CSharpParser.CLOSE_PARENS, 0)
        def if_body(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.If_bodyContext)
            else:
                return self.getTypedRuleContext(CSharpParser.If_bodyContext,i)

        def ELSE(self):
            return self.getToken(CSharpParser.ELSE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIfStatement" ):
                listener.enterIfStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIfStatement" ):
                listener.exitIfStatement(self)


    class ReturnStatementContext(Simple_embedded_statementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CSharpParser.Simple_embedded_statementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def RETURN(self):
            return self.getToken(CSharpParser.RETURN, 0)
        def SEMICOLON(self):
            return self.getToken(CSharpParser.SEMICOLON, 0)
        def expression(self):
            return self.getTypedRuleContext(CSharpParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReturnStatement" ):
                listener.enterReturnStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReturnStatement" ):
                listener.exitReturnStatement(self)


    class GotoStatementContext(Simple_embedded_statementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CSharpParser.Simple_embedded_statementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def GOTO(self):
            return self.getToken(CSharpParser.GOTO, 0)
        def SEMICOLON(self):
            return self.getToken(CSharpParser.SEMICOLON, 0)
        def identifier(self):
            return self.getTypedRuleContext(CSharpParser.IdentifierContext,0)

        def CASE(self):
            return self.getToken(CSharpParser.CASE, 0)
        def expression(self):
            return self.getTypedRuleContext(CSharpParser.ExpressionContext,0)

        def DEFAULT(self):
            return self.getToken(CSharpParser.DEFAULT, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGotoStatement" ):
                listener.enterGotoStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGotoStatement" ):
                listener.exitGotoStatement(self)


    class SwitchStatementContext(Simple_embedded_statementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CSharpParser.Simple_embedded_statementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SWITCH(self):
            return self.getToken(CSharpParser.SWITCH, 0)
        def OPEN_PARENS(self):
            return self.getToken(CSharpParser.OPEN_PARENS, 0)
        def expression(self):
            return self.getTypedRuleContext(CSharpParser.ExpressionContext,0)

        def CLOSE_PARENS(self):
            return self.getToken(CSharpParser.CLOSE_PARENS, 0)
        def OPEN_BRACE(self):
            return self.getToken(CSharpParser.OPEN_BRACE, 0)
        def CLOSE_BRACE(self):
            return self.getToken(CSharpParser.CLOSE_BRACE, 0)
        def switch_section(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Switch_sectionContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Switch_sectionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSwitchStatement" ):
                listener.enterSwitchStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSwitchStatement" ):
                listener.exitSwitchStatement(self)


    class FixedStatementContext(Simple_embedded_statementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CSharpParser.Simple_embedded_statementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def FIXED(self):
            return self.getToken(CSharpParser.FIXED, 0)
        def OPEN_PARENS(self):
            return self.getToken(CSharpParser.OPEN_PARENS, 0)
        def pointer_type(self):
            return self.getTypedRuleContext(CSharpParser.Pointer_typeContext,0)

        def fixed_pointer_declarators(self):
            return self.getTypedRuleContext(CSharpParser.Fixed_pointer_declaratorsContext,0)

        def CLOSE_PARENS(self):
            return self.getToken(CSharpParser.CLOSE_PARENS, 0)
        def embedded_statement(self):
            return self.getTypedRuleContext(CSharpParser.Embedded_statementContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFixedStatement" ):
                listener.enterFixedStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFixedStatement" ):
                listener.exitFixedStatement(self)


    class WhileStatementContext(Simple_embedded_statementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CSharpParser.Simple_embedded_statementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def WHILE(self):
            return self.getToken(CSharpParser.WHILE, 0)
        def OPEN_PARENS(self):
            return self.getToken(CSharpParser.OPEN_PARENS, 0)
        def expression(self):
            return self.getTypedRuleContext(CSharpParser.ExpressionContext,0)

        def CLOSE_PARENS(self):
            return self.getToken(CSharpParser.CLOSE_PARENS, 0)
        def embedded_statement(self):
            return self.getTypedRuleContext(CSharpParser.Embedded_statementContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhileStatement" ):
                listener.enterWhileStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhileStatement" ):
                listener.exitWhileStatement(self)


    class DoStatementContext(Simple_embedded_statementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CSharpParser.Simple_embedded_statementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DO(self):
            return self.getToken(CSharpParser.DO, 0)
        def embedded_statement(self):
            return self.getTypedRuleContext(CSharpParser.Embedded_statementContext,0)

        def WHILE(self):
            return self.getToken(CSharpParser.WHILE, 0)
        def OPEN_PARENS(self):
            return self.getToken(CSharpParser.OPEN_PARENS, 0)
        def expression(self):
            return self.getTypedRuleContext(CSharpParser.ExpressionContext,0)

        def CLOSE_PARENS(self):
            return self.getToken(CSharpParser.CLOSE_PARENS, 0)
        def SEMICOLON(self):
            return self.getToken(CSharpParser.SEMICOLON, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDoStatement" ):
                listener.enterDoStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDoStatement" ):
                listener.exitDoStatement(self)


    class ForeachStatementContext(Simple_embedded_statementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CSharpParser.Simple_embedded_statementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def FOREACH(self):
            return self.getToken(CSharpParser.FOREACH, 0)
        def OPEN_PARENS(self):
            return self.getToken(CSharpParser.OPEN_PARENS, 0)
        def local_variable_type(self):
            return self.getTypedRuleContext(CSharpParser.Local_variable_typeContext,0)

        def identifier(self):
            return self.getTypedRuleContext(CSharpParser.IdentifierContext,0)

        def IN(self):
            return self.getToken(CSharpParser.IN, 0)
        def expression(self):
            return self.getTypedRuleContext(CSharpParser.ExpressionContext,0)

        def CLOSE_PARENS(self):
            return self.getToken(CSharpParser.CLOSE_PARENS, 0)
        def embedded_statement(self):
            return self.getTypedRuleContext(CSharpParser.Embedded_statementContext,0)

        def AWAIT(self):
            return self.getToken(CSharpParser.AWAIT, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForeachStatement" ):
                listener.enterForeachStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForeachStatement" ):
                listener.exitForeachStatement(self)


    class UncheckedStatementContext(Simple_embedded_statementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CSharpParser.Simple_embedded_statementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def UNCHECKED(self):
            return self.getToken(CSharpParser.UNCHECKED, 0)
        def block(self):
            return self.getTypedRuleContext(CSharpParser.BlockContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUncheckedStatement" ):
                listener.enterUncheckedStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUncheckedStatement" ):
                listener.exitUncheckedStatement(self)


    class ExpressionStatementContext(Simple_embedded_statementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CSharpParser.Simple_embedded_statementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self):
            return self.getTypedRuleContext(CSharpParser.ExpressionContext,0)

        def SEMICOLON(self):
            return self.getToken(CSharpParser.SEMICOLON, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpressionStatement" ):
                listener.enterExpressionStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpressionStatement" ):
                listener.exitExpressionStatement(self)


    class ContinueStatementContext(Simple_embedded_statementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CSharpParser.Simple_embedded_statementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CONTINUE(self):
            return self.getToken(CSharpParser.CONTINUE, 0)
        def SEMICOLON(self):
            return self.getToken(CSharpParser.SEMICOLON, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterContinueStatement" ):
                listener.enterContinueStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitContinueStatement" ):
                listener.exitContinueStatement(self)


    class UsingStatementContext(Simple_embedded_statementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CSharpParser.Simple_embedded_statementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def USING(self):
            return self.getToken(CSharpParser.USING, 0)
        def OPEN_PARENS(self):
            return self.getToken(CSharpParser.OPEN_PARENS, 0)
        def resource_acquisition(self):
            return self.getTypedRuleContext(CSharpParser.Resource_acquisitionContext,0)

        def CLOSE_PARENS(self):
            return self.getToken(CSharpParser.CLOSE_PARENS, 0)
        def embedded_statement(self):
            return self.getTypedRuleContext(CSharpParser.Embedded_statementContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUsingStatement" ):
                listener.enterUsingStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUsingStatement" ):
                listener.exitUsingStatement(self)


    class LockStatementContext(Simple_embedded_statementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CSharpParser.Simple_embedded_statementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LOCK(self):
            return self.getToken(CSharpParser.LOCK, 0)
        def OPEN_PARENS(self):
            return self.getToken(CSharpParser.OPEN_PARENS, 0)
        def expression(self):
            return self.getTypedRuleContext(CSharpParser.ExpressionContext,0)

        def CLOSE_PARENS(self):
            return self.getToken(CSharpParser.CLOSE_PARENS, 0)
        def embedded_statement(self):
            return self.getTypedRuleContext(CSharpParser.Embedded_statementContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLockStatement" ):
                listener.enterLockStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLockStatement" ):
                listener.exitLockStatement(self)


    class YieldStatementContext(Simple_embedded_statementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CSharpParser.Simple_embedded_statementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def YIELD(self):
            return self.getToken(CSharpParser.YIELD, 0)
        def SEMICOLON(self):
            return self.getToken(CSharpParser.SEMICOLON, 0)
        def RETURN(self):
            return self.getToken(CSharpParser.RETURN, 0)
        def expression(self):
            return self.getTypedRuleContext(CSharpParser.ExpressionContext,0)

        def BREAK(self):
            return self.getToken(CSharpParser.BREAK, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterYieldStatement" ):
                listener.enterYieldStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitYieldStatement" ):
                listener.exitYieldStatement(self)



    def simple_embedded_statement(self):

        localctx = CSharpParser.Simple_embedded_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_simple_embedded_statement)
        self._la = 0 # Token type
        try:
            self.state = 1426
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,144,self._ctx)
            if la_ == 1:
                localctx = CSharpParser.TheEmptyStatementContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1296
                self.match(CSharpParser.SEMICOLON)
                pass

            elif la_ == 2:
                localctx = CSharpParser.ExpressionStatementContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1297
                self.expression()
                self.state = 1298
                self.match(CSharpParser.SEMICOLON)
                pass

            elif la_ == 3:
                localctx = CSharpParser.IfStatementContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 1300
                self.match(CSharpParser.IF)
                self.state = 1301
                self.match(CSharpParser.OPEN_PARENS)
                self.state = 1302
                self.expression()
                self.state = 1303
                self.match(CSharpParser.CLOSE_PARENS)
                self.state = 1304
                self.if_body()
                self.state = 1307
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,132,self._ctx)
                if la_ == 1:
                    self.state = 1305
                    self.match(CSharpParser.ELSE)
                    self.state = 1306
                    self.if_body()


                pass

            elif la_ == 4:
                localctx = CSharpParser.SwitchStatementContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 1309
                self.match(CSharpParser.SWITCH)
                self.state = 1310
                self.match(CSharpParser.OPEN_PARENS)
                self.state = 1311
                self.expression()
                self.state = 1312
                self.match(CSharpParser.CLOSE_PARENS)
                self.state = 1313
                self.match(CSharpParser.OPEN_BRACE)
                self.state = 1317
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==22 or _la==30:
                    self.state = 1314
                    self.switch_section()
                    self.state = 1319
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1320
                self.match(CSharpParser.CLOSE_BRACE)
                pass

            elif la_ == 5:
                localctx = CSharpParser.WhileStatementContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 1322
                self.match(CSharpParser.WHILE)
                self.state = 1323
                self.match(CSharpParser.OPEN_PARENS)
                self.state = 1324
                self.expression()
                self.state = 1325
                self.match(CSharpParser.CLOSE_PARENS)
                self.state = 1326
                self.embedded_statement()
                pass

            elif la_ == 6:
                localctx = CSharpParser.DoStatementContext(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 1328
                self.match(CSharpParser.DO)
                self.state = 1329
                self.embedded_statement()
                self.state = 1330
                self.match(CSharpParser.WHILE)
                self.state = 1331
                self.match(CSharpParser.OPEN_PARENS)
                self.state = 1332
                self.expression()
                self.state = 1333
                self.match(CSharpParser.CLOSE_PARENS)
                self.state = 1334
                self.match(CSharpParser.SEMICOLON)
                pass

            elif la_ == 7:
                localctx = CSharpParser.ForStatementContext(self, localctx)
                self.enterOuterAlt(localctx, 7)
                self.state = 1336
                self.match(CSharpParser.FOR)
                self.state = 1337
                self.match(CSharpParser.OPEN_PARENS)
                self.state = 1339
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -5437194615990526976) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 2305516992371296445) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & 4398059153857) != 0):
                    self.state = 1338
                    self.for_initializer()


                self.state = 1341
                self.match(CSharpParser.SEMICOLON)
                self.state = 1343
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -5437212208176571392) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 2305497201161996477) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & 4398059153857) != 0):
                    self.state = 1342
                    self.expression()


                self.state = 1345
                self.match(CSharpParser.SEMICOLON)
                self.state = 1347
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -5437212208176571392) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 2305497201161996477) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & 4398059153857) != 0):
                    self.state = 1346
                    self.for_iterator()


                self.state = 1349
                self.match(CSharpParser.CLOSE_PARENS)
                self.state = 1350
                self.embedded_statement()
                pass

            elif la_ == 8:
                localctx = CSharpParser.ForeachStatementContext(self, localctx)
                self.enterOuterAlt(localctx, 8)
                self.state = 1352
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==16:
                    self.state = 1351
                    self.match(CSharpParser.AWAIT)


                self.state = 1354
                self.match(CSharpParser.FOREACH)
                self.state = 1355
                self.match(CSharpParser.OPEN_PARENS)
                self.state = 1356
                self.local_variable_type()
                self.state = 1357
                self.identifier()
                self.state = 1358
                self.match(CSharpParser.IN)
                self.state = 1359
                self.expression()
                self.state = 1360
                self.match(CSharpParser.CLOSE_PARENS)
                self.state = 1361
                self.embedded_statement()
                pass

            elif la_ == 9:
                localctx = CSharpParser.BreakStatementContext(self, localctx)
                self.enterOuterAlt(localctx, 9)
                self.state = 1363
                self.match(CSharpParser.BREAK)
                self.state = 1364
                self.match(CSharpParser.SEMICOLON)
                pass

            elif la_ == 10:
                localctx = CSharpParser.ContinueStatementContext(self, localctx)
                self.enterOuterAlt(localctx, 10)
                self.state = 1365
                self.match(CSharpParser.CONTINUE)
                self.state = 1366
                self.match(CSharpParser.SEMICOLON)
                pass

            elif la_ == 11:
                localctx = CSharpParser.GotoStatementContext(self, localctx)
                self.enterOuterAlt(localctx, 11)
                self.state = 1367
                self.match(CSharpParser.GOTO)
                self.state = 1372
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [10, 11, 12, 14, 15, 16, 20, 32, 35, 38, 48, 49, 51, 58, 60, 61, 64, 69, 71, 75, 81, 85, 86, 102, 106, 110, 111, 113, 114]:
                    self.state = 1368
                    self.identifier()
                    pass
                elif token in [22]:
                    self.state = 1369
                    self.match(CSharpParser.CASE)
                    self.state = 1370
                    self.expression()
                    pass
                elif token in [30]:
                    self.state = 1371
                    self.match(CSharpParser.DEFAULT)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1374
                self.match(CSharpParser.SEMICOLON)
                pass

            elif la_ == 12:
                localctx = CSharpParser.ReturnStatementContext(self, localctx)
                self.enterOuterAlt(localctx, 12)
                self.state = 1375
                self.match(CSharpParser.RETURN)
                self.state = 1377
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -5437212208176571392) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 2305497201161996477) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & 4398059153857) != 0):
                    self.state = 1376
                    self.expression()


                self.state = 1379
                self.match(CSharpParser.SEMICOLON)
                pass

            elif la_ == 13:
                localctx = CSharpParser.ThrowStatementContext(self, localctx)
                self.enterOuterAlt(localctx, 13)
                self.state = 1380
                self.match(CSharpParser.THROW)
                self.state = 1382
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -5437212208176571392) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 2305497201161996477) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & 4398059153857) != 0):
                    self.state = 1381
                    self.expression()


                self.state = 1384
                self.match(CSharpParser.SEMICOLON)
                pass

            elif la_ == 14:
                localctx = CSharpParser.TryStatementContext(self, localctx)
                self.enterOuterAlt(localctx, 14)
                self.state = 1385
                self.match(CSharpParser.TRY)
                self.state = 1386
                self.block()
                self.state = 1392
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [23]:
                    self.state = 1387
                    self.catch_clauses()
                    self.state = 1389
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==43:
                        self.state = 1388
                        self.finally_clause()


                    pass
                elif token in [43]:
                    self.state = 1391
                    self.finally_clause()
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 15:
                localctx = CSharpParser.CheckedStatementContext(self, localctx)
                self.enterOuterAlt(localctx, 15)
                self.state = 1394
                self.match(CSharpParser.CHECKED)
                self.state = 1395
                self.block()
                pass

            elif la_ == 16:
                localctx = CSharpParser.UncheckedStatementContext(self, localctx)
                self.enterOuterAlt(localctx, 16)
                self.state = 1396
                self.match(CSharpParser.UNCHECKED)
                self.state = 1397
                self.block()
                pass

            elif la_ == 17:
                localctx = CSharpParser.LockStatementContext(self, localctx)
                self.enterOuterAlt(localctx, 17)
                self.state = 1398
                self.match(CSharpParser.LOCK)
                self.state = 1399
                self.match(CSharpParser.OPEN_PARENS)
                self.state = 1400
                self.expression()
                self.state = 1401
                self.match(CSharpParser.CLOSE_PARENS)
                self.state = 1402
                self.embedded_statement()
                pass

            elif la_ == 18:
                localctx = CSharpParser.UsingStatementContext(self, localctx)
                self.enterOuterAlt(localctx, 18)
                self.state = 1404
                self.match(CSharpParser.USING)
                self.state = 1405
                self.match(CSharpParser.OPEN_PARENS)
                self.state = 1406
                self.resource_acquisition()
                self.state = 1407
                self.match(CSharpParser.CLOSE_PARENS)
                self.state = 1408
                self.embedded_statement()
                pass

            elif la_ == 19:
                localctx = CSharpParser.YieldStatementContext(self, localctx)
                self.enterOuterAlt(localctx, 19)
                self.state = 1410
                self.match(CSharpParser.YIELD)
                self.state = 1414
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [82]:
                    self.state = 1411
                    self.match(CSharpParser.RETURN)
                    self.state = 1412
                    self.expression()
                    pass
                elif token in [19]:
                    self.state = 1413
                    self.match(CSharpParser.BREAK)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1416
                self.match(CSharpParser.SEMICOLON)
                pass

            elif la_ == 20:
                localctx = CSharpParser.UnsafeStatementContext(self, localctx)
                self.enterOuterAlt(localctx, 20)
                self.state = 1417
                self.match(CSharpParser.UNSAFE)
                self.state = 1418
                self.block()
                pass

            elif la_ == 21:
                localctx = CSharpParser.FixedStatementContext(self, localctx)
                self.enterOuterAlt(localctx, 21)
                self.state = 1419
                self.match(CSharpParser.FIXED)
                self.state = 1420
                self.match(CSharpParser.OPEN_PARENS)
                self.state = 1421
                self.pointer_type()
                self.state = 1422
                self.fixed_pointer_declarators()
                self.state = 1423
                self.match(CSharpParser.CLOSE_PARENS)
                self.state = 1424
                self.embedded_statement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BlockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_BRACE(self):
            return self.getToken(CSharpParser.OPEN_BRACE, 0)

        def CLOSE_BRACE(self):
            return self.getToken(CSharpParser.CLOSE_BRACE, 0)

        def statement_list(self):
            return self.getTypedRuleContext(CSharpParser.Statement_listContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_block

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBlock" ):
                listener.enterBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBlock" ):
                listener.exitBlock(self)




    def block(self):

        localctx = CSharpParser.BlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_block)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1428
            self.match(CSharpParser.OPEN_BRACE)
            self.state = 1430
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & -819667982803280896) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 4611642037659175101) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & 4398059153889) != 0):
                self.state = 1429
                self.statement_list()


            self.state = 1432
            self.match(CSharpParser.CLOSE_BRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Local_variable_declarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def local_variable_type(self):
            return self.getTypedRuleContext(CSharpParser.Local_variable_typeContext,0)


        def local_variable_declarator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Local_variable_declaratorContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Local_variable_declaratorContext,i)


        def USING(self):
            return self.getToken(CSharpParser.USING, 0)

        def REF(self):
            return self.getToken(CSharpParser.REF, 0)

        def READONLY(self):
            return self.getToken(CSharpParser.READONLY, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.COMMA)
            else:
                return self.getToken(CSharpParser.COMMA, i)

        def FIXED(self):
            return self.getToken(CSharpParser.FIXED, 0)

        def pointer_type(self):
            return self.getTypedRuleContext(CSharpParser.Pointer_typeContext,0)


        def fixed_pointer_declarators(self):
            return self.getTypedRuleContext(CSharpParser.Fixed_pointer_declaratorsContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_local_variable_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLocal_variable_declaration" ):
                listener.enterLocal_variable_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLocal_variable_declaration" ):
                listener.exitLocal_variable_declaration(self)




    def local_variable_declaration(self):

        localctx = CSharpParser.Local_variable_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_local_variable_declaration)
        self._la = 0 # Token type
        try:
            self.state = 1453
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [10, 11, 12, 14, 15, 16, 18, 20, 21, 24, 29, 32, 34, 35, 38, 45, 48, 49, 51, 55, 58, 60, 61, 63, 64, 68, 69, 71, 75, 80, 81, 83, 85, 86, 87, 91, 99, 100, 102, 104, 105, 106, 108, 110, 111, 113, 114, 129]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1438
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,146,self._ctx)
                if la_ == 1:
                    self.state = 1434
                    self.match(CSharpParser.USING)

                elif la_ == 2:
                    self.state = 1435
                    self.match(CSharpParser.REF)

                elif la_ == 3:
                    self.state = 1436
                    self.match(CSharpParser.REF)
                    self.state = 1437
                    self.match(CSharpParser.READONLY)


                self.state = 1440
                self.local_variable_type()
                self.state = 1441
                self.local_variable_declarator()
                self.state = 1446
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==132:
                    self.state = 1442
                    self.match(CSharpParser.COMMA)
                    self.state = 1443
                    self.local_variable_declarator()
                    self.state = 1448
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            elif token in [44]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1449
                self.match(CSharpParser.FIXED)
                self.state = 1450
                self.pointer_type()
                self.state = 1451
                self.fixed_pointer_declarators()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Local_variable_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VAR(self):
            return self.getToken(CSharpParser.VAR, 0)

        def type_(self):
            return self.getTypedRuleContext(CSharpParser.Type_Context,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_local_variable_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLocal_variable_type" ):
                listener.enterLocal_variable_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLocal_variable_type" ):
                listener.exitLocal_variable_type(self)




    def local_variable_type(self):

        localctx = CSharpParser.Local_variable_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_local_variable_type)
        try:
            self.state = 1457
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,149,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1455
                self.match(CSharpParser.VAR)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1456
                self.type_()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Local_variable_declaratorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(CSharpParser.IdentifierContext,0)


        def ASSIGNMENT(self):
            return self.getToken(CSharpParser.ASSIGNMENT, 0)

        def local_variable_initializer(self):
            return self.getTypedRuleContext(CSharpParser.Local_variable_initializerContext,0)


        def REF(self):
            return self.getToken(CSharpParser.REF, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_local_variable_declarator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLocal_variable_declarator" ):
                listener.enterLocal_variable_declarator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLocal_variable_declarator" ):
                listener.exitLocal_variable_declarator(self)




    def local_variable_declarator(self):

        localctx = CSharpParser.Local_variable_declaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_local_variable_declarator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1459
            self.identifier()
            self.state = 1465
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==145:
                self.state = 1460
                self.match(CSharpParser.ASSIGNMENT)
                self.state = 1462
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,150,self._ctx)
                if la_ == 1:
                    self.state = 1461
                    self.match(CSharpParser.REF)


                self.state = 1464
                self.local_variable_initializer()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Local_variable_initializerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(CSharpParser.ExpressionContext,0)


        def array_initializer(self):
            return self.getTypedRuleContext(CSharpParser.Array_initializerContext,0)


        def stackalloc_initializer(self):
            return self.getTypedRuleContext(CSharpParser.Stackalloc_initializerContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_local_variable_initializer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLocal_variable_initializer" ):
                listener.enterLocal_variable_initializer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLocal_variable_initializer" ):
                listener.exitLocal_variable_initializer(self)




    def local_variable_initializer(self):

        localctx = CSharpParser.Local_variable_initializerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_local_variable_initializer)
        try:
            self.state = 1470
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [10, 11, 12, 14, 15, 16, 17, 18, 20, 21, 24, 25, 29, 30, 31, 32, 34, 35, 38, 42, 45, 48, 49, 51, 55, 58, 60, 61, 63, 64, 66, 67, 68, 69, 71, 75, 80, 81, 83, 85, 86, 87, 88, 91, 94, 96, 98, 99, 100, 101, 102, 104, 106, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 129, 135, 136, 137, 140, 142, 143, 144, 151, 152, 171]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1467
                self.expression()
                pass
            elif token in [125]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1468
                self.array_initializer()
                pass
            elif token in [89]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1469
                self.stackalloc_initializer()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Local_constant_declarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CONST(self):
            return self.getToken(CSharpParser.CONST, 0)

        def type_(self):
            return self.getTypedRuleContext(CSharpParser.Type_Context,0)


        def constant_declarators(self):
            return self.getTypedRuleContext(CSharpParser.Constant_declaratorsContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_local_constant_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLocal_constant_declaration" ):
                listener.enterLocal_constant_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLocal_constant_declaration" ):
                listener.exitLocal_constant_declaration(self)




    def local_constant_declaration(self):

        localctx = CSharpParser.Local_constant_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 182, self.RULE_local_constant_declaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1472
            self.match(CSharpParser.CONST)
            self.state = 1473
            self.type_()
            self.state = 1474
            self.constant_declarators()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class If_bodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def block(self):
            return self.getTypedRuleContext(CSharpParser.BlockContext,0)


        def simple_embedded_statement(self):
            return self.getTypedRuleContext(CSharpParser.Simple_embedded_statementContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_if_body

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIf_body" ):
                listener.enterIf_body(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIf_body" ):
                listener.exitIf_body(self)




    def if_body(self):

        localctx = CSharpParser.If_bodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 184, self.RULE_if_body)
        try:
            self.state = 1478
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [125]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1476
                self.block()
                pass
            elif token in [10, 11, 12, 14, 15, 16, 17, 18, 19, 20, 21, 24, 25, 28, 29, 30, 31, 32, 33, 34, 35, 38, 42, 44, 45, 46, 47, 48, 49, 50, 51, 52, 55, 58, 60, 61, 62, 63, 64, 66, 67, 68, 69, 71, 75, 80, 81, 82, 83, 85, 86, 87, 88, 91, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 129, 134, 135, 136, 137, 140, 142, 143, 144, 151, 152, 171]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1477
                self.simple_embedded_statement()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Switch_sectionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def statement_list(self):
            return self.getTypedRuleContext(CSharpParser.Statement_listContext,0)


        def switch_label(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Switch_labelContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Switch_labelContext,i)


        def getRuleIndex(self):
            return CSharpParser.RULE_switch_section

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSwitch_section" ):
                listener.enterSwitch_section(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSwitch_section" ):
                listener.exitSwitch_section(self)




    def switch_section(self):

        localctx = CSharpParser.Switch_sectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 186, self.RULE_switch_section)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1481 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 1480
                    self.switch_label()

                else:
                    raise NoViableAltException(self)
                self.state = 1483 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,154,self._ctx)

            self.state = 1485
            self.statement_list()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Switch_labelContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CASE(self):
            return self.getToken(CSharpParser.CASE, 0)

        def expression(self):
            return self.getTypedRuleContext(CSharpParser.ExpressionContext,0)


        def COLON(self):
            return self.getToken(CSharpParser.COLON, 0)

        def case_guard(self):
            return self.getTypedRuleContext(CSharpParser.Case_guardContext,0)


        def DEFAULT(self):
            return self.getToken(CSharpParser.DEFAULT, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_switch_label

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSwitch_label" ):
                listener.enterSwitch_label(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSwitch_label" ):
                listener.exitSwitch_label(self)




    def switch_label(self):

        localctx = CSharpParser.Switch_labelContext(self, self._ctx, self.state)
        self.enterRule(localctx, 188, self.RULE_switch_label)
        self._la = 0 # Token type
        try:
            self.state = 1496
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [22]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1487
                self.match(CSharpParser.CASE)
                self.state = 1488
                self.expression()
                self.state = 1490
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==110:
                    self.state = 1489
                    self.case_guard()


                self.state = 1492
                self.match(CSharpParser.COLON)
                pass
            elif token in [30]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1494
                self.match(CSharpParser.DEFAULT)
                self.state = 1495
                self.match(CSharpParser.COLON)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Case_guardContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHEN(self):
            return self.getToken(CSharpParser.WHEN, 0)

        def expression(self):
            return self.getTypedRuleContext(CSharpParser.ExpressionContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_case_guard

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCase_guard" ):
                listener.enterCase_guard(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCase_guard" ):
                listener.exitCase_guard(self)




    def case_guard(self):

        localctx = CSharpParser.Case_guardContext(self, self._ctx, self.state)
        self.enterRule(localctx, 190, self.RULE_case_guard)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1498
            self.match(CSharpParser.WHEN)
            self.state = 1499
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Statement_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.StatementContext)
            else:
                return self.getTypedRuleContext(CSharpParser.StatementContext,i)


        def getRuleIndex(self):
            return CSharpParser.RULE_statement_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatement_list" ):
                listener.enterStatement_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatement_list" ):
                listener.exitStatement_list(self)




    def statement_list(self):

        localctx = CSharpParser.Statement_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 192, self.RULE_statement_list)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1502 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 1501
                    self.statement()

                else:
                    raise NoViableAltException(self)
                self.state = 1504 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,157,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class For_initializerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def local_variable_declaration(self):
            return self.getTypedRuleContext(CSharpParser.Local_variable_declarationContext,0)


        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(CSharpParser.ExpressionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.COMMA)
            else:
                return self.getToken(CSharpParser.COMMA, i)

        def getRuleIndex(self):
            return CSharpParser.RULE_for_initializer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFor_initializer" ):
                listener.enterFor_initializer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFor_initializer" ):
                listener.exitFor_initializer(self)




    def for_initializer(self):

        localctx = CSharpParser.For_initializerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 194, self.RULE_for_initializer)
        self._la = 0 # Token type
        try:
            self.state = 1515
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,159,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1506
                self.local_variable_declaration()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1507
                self.expression()
                self.state = 1512
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==132:
                    self.state = 1508
                    self.match(CSharpParser.COMMA)
                    self.state = 1509
                    self.expression()
                    self.state = 1514
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class For_iteratorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(CSharpParser.ExpressionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.COMMA)
            else:
                return self.getToken(CSharpParser.COMMA, i)

        def getRuleIndex(self):
            return CSharpParser.RULE_for_iterator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFor_iterator" ):
                listener.enterFor_iterator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFor_iterator" ):
                listener.exitFor_iterator(self)




    def for_iterator(self):

        localctx = CSharpParser.For_iteratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 196, self.RULE_for_iterator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1517
            self.expression()
            self.state = 1522
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==132:
                self.state = 1518
                self.match(CSharpParser.COMMA)
                self.state = 1519
                self.expression()
                self.state = 1524
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Catch_clausesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def specific_catch_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Specific_catch_clauseContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Specific_catch_clauseContext,i)


        def general_catch_clause(self):
            return self.getTypedRuleContext(CSharpParser.General_catch_clauseContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_catch_clauses

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCatch_clauses" ):
                listener.enterCatch_clauses(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCatch_clauses" ):
                listener.exitCatch_clauses(self)




    def catch_clauses(self):

        localctx = CSharpParser.Catch_clausesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 198, self.RULE_catch_clauses)
        self._la = 0 # Token type
        try:
            self.state = 1536
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,163,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1525
                self.specific_catch_clause()
                self.state = 1529
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,161,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1526
                        self.specific_catch_clause() 
                    self.state = 1531
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,161,self._ctx)

                self.state = 1533
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==23:
                    self.state = 1532
                    self.general_catch_clause()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1535
                self.general_catch_clause()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Specific_catch_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CATCH(self):
            return self.getToken(CSharpParser.CATCH, 0)

        def OPEN_PARENS(self):
            return self.getToken(CSharpParser.OPEN_PARENS, 0)

        def class_type(self):
            return self.getTypedRuleContext(CSharpParser.Class_typeContext,0)


        def CLOSE_PARENS(self):
            return self.getToken(CSharpParser.CLOSE_PARENS, 0)

        def block(self):
            return self.getTypedRuleContext(CSharpParser.BlockContext,0)


        def identifier(self):
            return self.getTypedRuleContext(CSharpParser.IdentifierContext,0)


        def exception_filter(self):
            return self.getTypedRuleContext(CSharpParser.Exception_filterContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_specific_catch_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSpecific_catch_clause" ):
                listener.enterSpecific_catch_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSpecific_catch_clause" ):
                listener.exitSpecific_catch_clause(self)




    def specific_catch_clause(self):

        localctx = CSharpParser.Specific_catch_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 200, self.RULE_specific_catch_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1538
            self.match(CSharpParser.CATCH)
            self.state = 1539
            self.match(CSharpParser.OPEN_PARENS)
            self.state = 1540
            self.class_type()
            self.state = 1542
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 3750091428249852928) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 1904629023639713) != 0):
                self.state = 1541
                self.identifier()


            self.state = 1544
            self.match(CSharpParser.CLOSE_PARENS)
            self.state = 1546
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==110:
                self.state = 1545
                self.exception_filter()


            self.state = 1548
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class General_catch_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CATCH(self):
            return self.getToken(CSharpParser.CATCH, 0)

        def block(self):
            return self.getTypedRuleContext(CSharpParser.BlockContext,0)


        def exception_filter(self):
            return self.getTypedRuleContext(CSharpParser.Exception_filterContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_general_catch_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGeneral_catch_clause" ):
                listener.enterGeneral_catch_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGeneral_catch_clause" ):
                listener.exitGeneral_catch_clause(self)




    def general_catch_clause(self):

        localctx = CSharpParser.General_catch_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 202, self.RULE_general_catch_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1550
            self.match(CSharpParser.CATCH)
            self.state = 1552
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==110:
                self.state = 1551
                self.exception_filter()


            self.state = 1554
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Exception_filterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHEN(self):
            return self.getToken(CSharpParser.WHEN, 0)

        def OPEN_PARENS(self):
            return self.getToken(CSharpParser.OPEN_PARENS, 0)

        def expression(self):
            return self.getTypedRuleContext(CSharpParser.ExpressionContext,0)


        def CLOSE_PARENS(self):
            return self.getToken(CSharpParser.CLOSE_PARENS, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_exception_filter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterException_filter" ):
                listener.enterException_filter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitException_filter" ):
                listener.exitException_filter(self)




    def exception_filter(self):

        localctx = CSharpParser.Exception_filterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 204, self.RULE_exception_filter)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1556
            self.match(CSharpParser.WHEN)
            self.state = 1557
            self.match(CSharpParser.OPEN_PARENS)
            self.state = 1558
            self.expression()
            self.state = 1559
            self.match(CSharpParser.CLOSE_PARENS)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Finally_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FINALLY(self):
            return self.getToken(CSharpParser.FINALLY, 0)

        def block(self):
            return self.getTypedRuleContext(CSharpParser.BlockContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_finally_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFinally_clause" ):
                listener.enterFinally_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFinally_clause" ):
                listener.exitFinally_clause(self)




    def finally_clause(self):

        localctx = CSharpParser.Finally_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 206, self.RULE_finally_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1561
            self.match(CSharpParser.FINALLY)
            self.state = 1562
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Resource_acquisitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def local_variable_declaration(self):
            return self.getTypedRuleContext(CSharpParser.Local_variable_declarationContext,0)


        def expression(self):
            return self.getTypedRuleContext(CSharpParser.ExpressionContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_resource_acquisition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterResource_acquisition" ):
                listener.enterResource_acquisition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitResource_acquisition" ):
                listener.exitResource_acquisition(self)




    def resource_acquisition(self):

        localctx = CSharpParser.Resource_acquisitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 208, self.RULE_resource_acquisition)
        try:
            self.state = 1566
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,167,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1564
                self.local_variable_declaration()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1565
                self.expression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Namespace_declarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.qi = None # Qualified_identifierContext

        def NAMESPACE(self):
            return self.getToken(CSharpParser.NAMESPACE, 0)

        def namespace_body(self):
            return self.getTypedRuleContext(CSharpParser.Namespace_bodyContext,0)


        def qualified_identifier(self):
            return self.getTypedRuleContext(CSharpParser.Qualified_identifierContext,0)


        def SEMICOLON(self):
            return self.getToken(CSharpParser.SEMICOLON, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_namespace_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNamespace_declaration" ):
                listener.enterNamespace_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNamespace_declaration" ):
                listener.exitNamespace_declaration(self)




    def namespace_declaration(self):

        localctx = CSharpParser.Namespace_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 210, self.RULE_namespace_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1568
            self.match(CSharpParser.NAMESPACE)
            self.state = 1569
            localctx.qi = self.qualified_identifier()
            self.state = 1570
            self.namespace_body()
            self.state = 1572
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==134:
                self.state = 1571
                self.match(CSharpParser.SEMICOLON)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Qualified_identifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(CSharpParser.IdentifierContext,i)


        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.DOT)
            else:
                return self.getToken(CSharpParser.DOT, i)

        def getRuleIndex(self):
            return CSharpParser.RULE_qualified_identifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQualified_identifier" ):
                listener.enterQualified_identifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQualified_identifier" ):
                listener.exitQualified_identifier(self)




    def qualified_identifier(self):

        localctx = CSharpParser.Qualified_identifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 212, self.RULE_qualified_identifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1574
            self.identifier()
            self.state = 1579
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==131:
                self.state = 1575
                self.match(CSharpParser.DOT)
                self.state = 1576
                self.identifier()
                self.state = 1581
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Namespace_bodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_BRACE(self):
            return self.getToken(CSharpParser.OPEN_BRACE, 0)

        def CLOSE_BRACE(self):
            return self.getToken(CSharpParser.CLOSE_BRACE, 0)

        def extern_alias_directives(self):
            return self.getTypedRuleContext(CSharpParser.Extern_alias_directivesContext,0)


        def using_directives(self):
            return self.getTypedRuleContext(CSharpParser.Using_directivesContext,0)


        def namespace_member_declarations(self):
            return self.getTypedRuleContext(CSharpParser.Namespace_member_declarationsContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_namespace_body

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNamespace_body" ):
                listener.enterNamespace_body(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNamespace_body" ):
                listener.exitNamespace_body(self)




    def namespace_body(self):

        localctx = CSharpParser.Namespace_bodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 214, self.RULE_namespace_body)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1582
            self.match(CSharpParser.OPEN_BRACE)
            self.state = 1584
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,170,self._ctx)
            if la_ == 1:
                self.state = 1583
                self.extern_alias_directives()


            self.state = 1587
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==105:
                self.state = 1586
                self.using_directives()


            self.state = 1590
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 216175120790618624) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & 4611708283706211587) != 0):
                self.state = 1589
                self.namespace_member_declarations()


            self.state = 1592
            self.match(CSharpParser.CLOSE_BRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Extern_alias_directivesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def extern_alias_directive(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Extern_alias_directiveContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Extern_alias_directiveContext,i)


        def getRuleIndex(self):
            return CSharpParser.RULE_extern_alias_directives

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExtern_alias_directives" ):
                listener.enterExtern_alias_directives(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExtern_alias_directives" ):
                listener.exitExtern_alias_directives(self)




    def extern_alias_directives(self):

        localctx = CSharpParser.Extern_alias_directivesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 216, self.RULE_extern_alias_directives)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1595 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 1594
                    self.extern_alias_directive()

                else:
                    raise NoViableAltException(self)
                self.state = 1597 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,173,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Extern_alias_directiveContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXTERN(self):
            return self.getToken(CSharpParser.EXTERN, 0)

        def ALIAS(self):
            return self.getToken(CSharpParser.ALIAS, 0)

        def identifier(self):
            return self.getTypedRuleContext(CSharpParser.IdentifierContext,0)


        def SEMICOLON(self):
            return self.getToken(CSharpParser.SEMICOLON, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_extern_alias_directive

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExtern_alias_directive" ):
                listener.enterExtern_alias_directive(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExtern_alias_directive" ):
                listener.exitExtern_alias_directive(self)




    def extern_alias_directive(self):

        localctx = CSharpParser.Extern_alias_directiveContext(self, self._ctx, self.state)
        self.enterRule(localctx, 218, self.RULE_extern_alias_directive)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1599
            self.match(CSharpParser.EXTERN)
            self.state = 1600
            self.match(CSharpParser.ALIAS)
            self.state = 1601
            self.identifier()
            self.state = 1602
            self.match(CSharpParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Using_directivesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def using_directive(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Using_directiveContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Using_directiveContext,i)


        def getRuleIndex(self):
            return CSharpParser.RULE_using_directives

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUsing_directives" ):
                listener.enterUsing_directives(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUsing_directives" ):
                listener.exitUsing_directives(self)




    def using_directives(self):

        localctx = CSharpParser.Using_directivesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 220, self.RULE_using_directives)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1605 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1604
                self.using_directive()
                self.state = 1607 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==105):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Using_directiveContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CSharpParser.RULE_using_directive

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class UsingAliasDirectiveContext(Using_directiveContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CSharpParser.Using_directiveContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def USING(self):
            return self.getToken(CSharpParser.USING, 0)
        def identifier(self):
            return self.getTypedRuleContext(CSharpParser.IdentifierContext,0)

        def ASSIGNMENT(self):
            return self.getToken(CSharpParser.ASSIGNMENT, 0)
        def namespace_or_type_name(self):
            return self.getTypedRuleContext(CSharpParser.Namespace_or_type_nameContext,0)

        def SEMICOLON(self):
            return self.getToken(CSharpParser.SEMICOLON, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUsingAliasDirective" ):
                listener.enterUsingAliasDirective(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUsingAliasDirective" ):
                listener.exitUsingAliasDirective(self)


    class UsingNamespaceDirectiveContext(Using_directiveContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CSharpParser.Using_directiveContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def USING(self):
            return self.getToken(CSharpParser.USING, 0)
        def namespace_or_type_name(self):
            return self.getTypedRuleContext(CSharpParser.Namespace_or_type_nameContext,0)

        def SEMICOLON(self):
            return self.getToken(CSharpParser.SEMICOLON, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUsingNamespaceDirective" ):
                listener.enterUsingNamespaceDirective(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUsingNamespaceDirective" ):
                listener.exitUsingNamespaceDirective(self)


    class UsingStaticDirectiveContext(Using_directiveContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CSharpParser.Using_directiveContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def USING(self):
            return self.getToken(CSharpParser.USING, 0)
        def STATIC(self):
            return self.getToken(CSharpParser.STATIC, 0)
        def namespace_or_type_name(self):
            return self.getTypedRuleContext(CSharpParser.Namespace_or_type_nameContext,0)

        def SEMICOLON(self):
            return self.getToken(CSharpParser.SEMICOLON, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUsingStaticDirective" ):
                listener.enterUsingStaticDirective(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUsingStaticDirective" ):
                listener.exitUsingStaticDirective(self)



    def using_directive(self):

        localctx = CSharpParser.Using_directiveContext(self, self._ctx, self.state)
        self.enterRule(localctx, 222, self.RULE_using_directive)
        try:
            self.state = 1624
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,175,self._ctx)
            if la_ == 1:
                localctx = CSharpParser.UsingAliasDirectiveContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1609
                self.match(CSharpParser.USING)
                self.state = 1610
                self.identifier()
                self.state = 1611
                self.match(CSharpParser.ASSIGNMENT)
                self.state = 1612
                self.namespace_or_type_name()
                self.state = 1613
                self.match(CSharpParser.SEMICOLON)
                pass

            elif la_ == 2:
                localctx = CSharpParser.UsingNamespaceDirectiveContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1615
                self.match(CSharpParser.USING)
                self.state = 1616
                self.namespace_or_type_name()
                self.state = 1617
                self.match(CSharpParser.SEMICOLON)
                pass

            elif la_ == 3:
                localctx = CSharpParser.UsingStaticDirectiveContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 1619
                self.match(CSharpParser.USING)
                self.state = 1620
                self.match(CSharpParser.STATIC)
                self.state = 1621
                self.namespace_or_type_name()
                self.state = 1622
                self.match(CSharpParser.SEMICOLON)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Namespace_member_declarationsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def namespace_member_declaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Namespace_member_declarationContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Namespace_member_declarationContext,i)


        def getRuleIndex(self):
            return CSharpParser.RULE_namespace_member_declarations

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNamespace_member_declarations" ):
                listener.enterNamespace_member_declarations(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNamespace_member_declarations" ):
                listener.exitNamespace_member_declarations(self)




    def namespace_member_declarations(self):

        localctx = CSharpParser.Namespace_member_declarationsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 224, self.RULE_namespace_member_declarations)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1627 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1626
                self.namespace_member_declaration()
                self.state = 1629 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & 216175120790618624) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & 4611708283706211587) != 0)):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Namespace_member_declarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def namespace_declaration(self):
            return self.getTypedRuleContext(CSharpParser.Namespace_declarationContext,0)


        def type_declaration(self):
            return self.getTypedRuleContext(CSharpParser.Type_declarationContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_namespace_member_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNamespace_member_declaration" ):
                listener.enterNamespace_member_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNamespace_member_declaration" ):
                listener.exitNamespace_member_declaration(self)




    def namespace_member_declaration(self):

        localctx = CSharpParser.Namespace_member_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 226, self.RULE_namespace_member_declaration)
        try:
            self.state = 1633
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [65]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1631
                self.namespace_declaration()
                pass
            elif token in [9, 15, 26, 31, 37, 41, 56, 57, 66, 73, 75, 76, 77, 78, 79, 80, 84, 90, 92, 103, 107, 109, 127]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1632
                self.type_declaration()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Type_declarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def class_definition(self):
            return self.getTypedRuleContext(CSharpParser.Class_definitionContext,0)


        def struct_definition(self):
            return self.getTypedRuleContext(CSharpParser.Struct_definitionContext,0)


        def interface_definition(self):
            return self.getTypedRuleContext(CSharpParser.Interface_definitionContext,0)


        def enum_definition(self):
            return self.getTypedRuleContext(CSharpParser.Enum_definitionContext,0)


        def delegate_definition(self):
            return self.getTypedRuleContext(CSharpParser.Delegate_definitionContext,0)


        def attributes(self):
            return self.getTypedRuleContext(CSharpParser.AttributesContext,0)


        def all_member_modifiers(self):
            return self.getTypedRuleContext(CSharpParser.All_member_modifiersContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_type_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterType_declaration" ):
                listener.enterType_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitType_declaration" ):
                listener.exitType_declaration(self)




    def type_declaration(self):

        localctx = CSharpParser.Type_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 228, self.RULE_type_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1636
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==127:
                self.state = 1635
                self.attributes()


            self.state = 1639
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,179,self._ctx)
            if la_ == 1:
                self.state = 1638
                self.all_member_modifiers()


            self.state = 1646
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [26]:
                self.state = 1641
                self.class_definition()
                pass
            elif token in [79, 80, 92]:
                self.state = 1642
                self.struct_definition()
                pass
            elif token in [56]:
                self.state = 1643
                self.interface_definition()
                pass
            elif token in [37]:
                self.state = 1644
                self.enum_definition()
                pass
            elif token in [31]:
                self.state = 1645
                self.delegate_definition()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Qualified_alias_memberContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(CSharpParser.IdentifierContext,i)


        def DOUBLE_COLON(self):
            return self.getToken(CSharpParser.DOUBLE_COLON, 0)

        def type_argument_list(self):
            return self.getTypedRuleContext(CSharpParser.Type_argument_listContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_qualified_alias_member

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQualified_alias_member" ):
                listener.enterQualified_alias_member(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQualified_alias_member" ):
                listener.exitQualified_alias_member(self)




    def qualified_alias_member(self):

        localctx = CSharpParser.Qualified_alias_memberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 230, self.RULE_qualified_alias_member)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1648
            self.identifier()
            self.state = 1649
            self.match(CSharpParser.DOUBLE_COLON)
            self.state = 1650
            self.identifier()
            self.state = 1652
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,181,self._ctx)
            if la_ == 1:
                self.state = 1651
                self.type_argument_list()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Type_parameter_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LT(self):
            return self.getToken(CSharpParser.LT, 0)

        def type_parameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Type_parameterContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Type_parameterContext,i)


        def GT(self):
            return self.getToken(CSharpParser.GT, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.COMMA)
            else:
                return self.getToken(CSharpParser.COMMA, i)

        def getRuleIndex(self):
            return CSharpParser.RULE_type_parameter_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterType_parameter_list" ):
                listener.enterType_parameter_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitType_parameter_list" ):
                listener.exitType_parameter_list(self)




    def type_parameter_list(self):

        localctx = CSharpParser.Type_parameter_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 232, self.RULE_type_parameter_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1654
            self.match(CSharpParser.LT)
            self.state = 1655
            self.type_parameter()
            self.state = 1660
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==132:
                self.state = 1656
                self.match(CSharpParser.COMMA)
                self.state = 1657
                self.type_parameter()
                self.state = 1662
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1663
            self.match(CSharpParser.GT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Type_parameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(CSharpParser.IdentifierContext,0)


        def attributes(self):
            return self.getTypedRuleContext(CSharpParser.AttributesContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_type_parameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterType_parameter" ):
                listener.enterType_parameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitType_parameter" ):
                listener.exitType_parameter(self)




    def type_parameter(self):

        localctx = CSharpParser.Type_parameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 234, self.RULE_type_parameter)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1666
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==127:
                self.state = 1665
                self.attributes()


            self.state = 1668
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Class_baseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COLON(self):
            return self.getToken(CSharpParser.COLON, 0)

        def class_type(self):
            return self.getTypedRuleContext(CSharpParser.Class_typeContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.COMMA)
            else:
                return self.getToken(CSharpParser.COMMA, i)

        def namespace_or_type_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Namespace_or_type_nameContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Namespace_or_type_nameContext,i)


        def getRuleIndex(self):
            return CSharpParser.RULE_class_base

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClass_base" ):
                listener.enterClass_base(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClass_base" ):
                listener.exitClass_base(self)




    def class_base(self):

        localctx = CSharpParser.Class_baseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 236, self.RULE_class_base)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1670
            self.match(CSharpParser.COLON)
            self.state = 1671
            self.class_type()
            self.state = 1676
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==132:
                self.state = 1672
                self.match(CSharpParser.COMMA)
                self.state = 1673
                self.namespace_or_type_name()
                self.state = 1678
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Interface_type_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def namespace_or_type_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Namespace_or_type_nameContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Namespace_or_type_nameContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.COMMA)
            else:
                return self.getToken(CSharpParser.COMMA, i)

        def getRuleIndex(self):
            return CSharpParser.RULE_interface_type_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterface_type_list" ):
                listener.enterInterface_type_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterface_type_list" ):
                listener.exitInterface_type_list(self)




    def interface_type_list(self):

        localctx = CSharpParser.Interface_type_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 238, self.RULE_interface_type_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1679
            self.namespace_or_type_name()
            self.state = 1684
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==132:
                self.state = 1680
                self.match(CSharpParser.COMMA)
                self.state = 1681
                self.namespace_or_type_name()
                self.state = 1686
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Type_parameter_constraints_clausesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def type_parameter_constraints_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Type_parameter_constraints_clauseContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Type_parameter_constraints_clauseContext,i)


        def getRuleIndex(self):
            return CSharpParser.RULE_type_parameter_constraints_clauses

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterType_parameter_constraints_clauses" ):
                listener.enterType_parameter_constraints_clauses(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitType_parameter_constraints_clauses" ):
                listener.exitType_parameter_constraints_clauses(self)




    def type_parameter_constraints_clauses(self):

        localctx = CSharpParser.Type_parameter_constraints_clausesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 240, self.RULE_type_parameter_constraints_clauses)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1688 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1687
                self.type_parameter_constraints_clause()
                self.state = 1690 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==111):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Type_parameter_constraints_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHERE(self):
            return self.getToken(CSharpParser.WHERE, 0)

        def identifier(self):
            return self.getTypedRuleContext(CSharpParser.IdentifierContext,0)


        def COLON(self):
            return self.getToken(CSharpParser.COLON, 0)

        def type_parameter_constraints(self):
            return self.getTypedRuleContext(CSharpParser.Type_parameter_constraintsContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_type_parameter_constraints_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterType_parameter_constraints_clause" ):
                listener.enterType_parameter_constraints_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitType_parameter_constraints_clause" ):
                listener.exitType_parameter_constraints_clause(self)




    def type_parameter_constraints_clause(self):

        localctx = CSharpParser.Type_parameter_constraints_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 242, self.RULE_type_parameter_constraints_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1692
            self.match(CSharpParser.WHERE)
            self.state = 1693
            self.identifier()
            self.state = 1694
            self.match(CSharpParser.COLON)
            self.state = 1695
            self.type_parameter_constraints()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Type_parameter_constraintsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def constructor_constraint(self):
            return self.getTypedRuleContext(CSharpParser.Constructor_constraintContext,0)


        def primary_constraint(self):
            return self.getTypedRuleContext(CSharpParser.Primary_constraintContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.COMMA)
            else:
                return self.getToken(CSharpParser.COMMA, i)

        def secondary_constraints(self):
            return self.getTypedRuleContext(CSharpParser.Secondary_constraintsContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_type_parameter_constraints

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterType_parameter_constraints" ):
                listener.enterType_parameter_constraints(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitType_parameter_constraints" ):
                listener.exitType_parameter_constraints(self)




    def type_parameter_constraints(self):

        localctx = CSharpParser.Type_parameter_constraintsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 244, self.RULE_type_parameter_constraints)
        self._la = 0 # Token type
        try:
            self.state = 1707
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [66]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1697
                self.constructor_constraint()
                pass
            elif token in [10, 11, 12, 14, 15, 16, 20, 26, 32, 35, 38, 48, 49, 51, 58, 60, 61, 64, 68, 69, 71, 75, 81, 85, 86, 91, 92, 102, 106, 110, 111, 113, 114]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1698
                self.primary_constraint()
                self.state = 1701
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,187,self._ctx)
                if la_ == 1:
                    self.state = 1699
                    self.match(CSharpParser.COMMA)
                    self.state = 1700
                    self.secondary_constraints()


                self.state = 1705
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==132:
                    self.state = 1703
                    self.match(CSharpParser.COMMA)
                    self.state = 1704
                    self.constructor_constraint()


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Primary_constraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def class_type(self):
            return self.getTypedRuleContext(CSharpParser.Class_typeContext,0)


        def CLASS(self):
            return self.getToken(CSharpParser.CLASS, 0)

        def INTERR(self):
            return self.getToken(CSharpParser.INTERR, 0)

        def STRUCT(self):
            return self.getToken(CSharpParser.STRUCT, 0)

        def UNMANAGED(self):
            return self.getToken(CSharpParser.UNMANAGED, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_primary_constraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrimary_constraint" ):
                listener.enterPrimary_constraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrimary_constraint" ):
                listener.exitPrimary_constraint(self)




    def primary_constraint(self):

        localctx = CSharpParser.Primary_constraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 246, self.RULE_primary_constraint)
        self._la = 0 # Token type
        try:
            self.state = 1716
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,191,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1709
                self.class_type()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1710
                self.match(CSharpParser.CLASS)
                self.state = 1712
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==148:
                    self.state = 1711
                    self.match(CSharpParser.INTERR)


                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1714
                self.match(CSharpParser.STRUCT)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1715
                self.match(CSharpParser.UNMANAGED)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Secondary_constraintsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def namespace_or_type_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Namespace_or_type_nameContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Namespace_or_type_nameContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.COMMA)
            else:
                return self.getToken(CSharpParser.COMMA, i)

        def getRuleIndex(self):
            return CSharpParser.RULE_secondary_constraints

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSecondary_constraints" ):
                listener.enterSecondary_constraints(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSecondary_constraints" ):
                listener.exitSecondary_constraints(self)




    def secondary_constraints(self):

        localctx = CSharpParser.Secondary_constraintsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 248, self.RULE_secondary_constraints)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1718
            self.namespace_or_type_name()
            self.state = 1723
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,192,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1719
                    self.match(CSharpParser.COMMA)
                    self.state = 1720
                    self.namespace_or_type_name() 
                self.state = 1725
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,192,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Constructor_constraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NEW(self):
            return self.getToken(CSharpParser.NEW, 0)

        def OPEN_PARENS(self):
            return self.getToken(CSharpParser.OPEN_PARENS, 0)

        def CLOSE_PARENS(self):
            return self.getToken(CSharpParser.CLOSE_PARENS, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_constructor_constraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstructor_constraint" ):
                listener.enterConstructor_constraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstructor_constraint" ):
                listener.exitConstructor_constraint(self)




    def constructor_constraint(self):

        localctx = CSharpParser.Constructor_constraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 250, self.RULE_constructor_constraint)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1726
            self.match(CSharpParser.NEW)
            self.state = 1727
            self.match(CSharpParser.OPEN_PARENS)
            self.state = 1728
            self.match(CSharpParser.CLOSE_PARENS)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Class_bodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_BRACE(self):
            return self.getToken(CSharpParser.OPEN_BRACE, 0)

        def CLOSE_BRACE(self):
            return self.getToken(CSharpParser.CLOSE_BRACE, 0)

        def class_member_declarations(self):
            return self.getTypedRuleContext(CSharpParser.Class_member_declarationsContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_class_body

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClass_body" ):
                listener.enterClass_body(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClass_body" ):
                listener.exitClass_body(self)




    def class_body(self):

        localctx = CSharpParser.Class_bodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 252, self.RULE_class_body)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1730
            self.match(CSharpParser.OPEN_BRACE)
            self.state = 1732
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & -5212032640031007232) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -9221404082353472843) != 0) or _la==129 or _la==144:
                self.state = 1731
                self.class_member_declarations()


            self.state = 1734
            self.match(CSharpParser.CLOSE_BRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Class_member_declarationsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def class_member_declaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Class_member_declarationContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Class_member_declarationContext,i)


        def getRuleIndex(self):
            return CSharpParser.RULE_class_member_declarations

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClass_member_declarations" ):
                listener.enterClass_member_declarations(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClass_member_declarations" ):
                listener.exitClass_member_declarations(self)




    def class_member_declarations(self):

        localctx = CSharpParser.Class_member_declarationsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 254, self.RULE_class_member_declarations)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1737 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1736
                self.class_member_declaration()
                self.state = 1739 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & -5212032640031007232) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -9221404082353472843) != 0) or _la==129 or _la==144):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Class_member_declarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def common_member_declaration(self):
            return self.getTypedRuleContext(CSharpParser.Common_member_declarationContext,0)


        def destructor_definition(self):
            return self.getTypedRuleContext(CSharpParser.Destructor_definitionContext,0)


        def attributes(self):
            return self.getTypedRuleContext(CSharpParser.AttributesContext,0)


        def all_member_modifiers(self):
            return self.getTypedRuleContext(CSharpParser.All_member_modifiersContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_class_member_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClass_member_declaration" ):
                listener.enterClass_member_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClass_member_declaration" ):
                listener.exitClass_member_declaration(self)




    def class_member_declaration(self):

        localctx = CSharpParser.Class_member_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 256, self.RULE_class_member_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1742
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==127:
                self.state = 1741
                self.attributes()


            self.state = 1745
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,196,self._ctx)
            if la_ == 1:
                self.state = 1744
                self.all_member_modifiers()


            self.state = 1749
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [10, 11, 12, 14, 15, 16, 18, 20, 21, 24, 26, 27, 29, 31, 32, 34, 35, 37, 38, 39, 40, 45, 48, 49, 51, 53, 55, 56, 58, 60, 61, 63, 64, 68, 69, 71, 75, 79, 80, 81, 83, 85, 86, 87, 91, 92, 99, 100, 102, 104, 106, 108, 110, 111, 113, 114, 129]:
                self.state = 1747
                self.common_member_declaration()
                pass
            elif token in [144]:
                self.state = 1748
                self.destructor_definition()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class All_member_modifiersContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def all_member_modifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.All_member_modifierContext)
            else:
                return self.getTypedRuleContext(CSharpParser.All_member_modifierContext,i)


        def getRuleIndex(self):
            return CSharpParser.RULE_all_member_modifiers

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAll_member_modifiers" ):
                listener.enterAll_member_modifiers(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAll_member_modifiers" ):
                listener.exitAll_member_modifiers(self)




    def all_member_modifiers(self):

        localctx = CSharpParser.All_member_modifiersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 258, self.RULE_all_member_modifiers)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1752 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 1751
                    self.all_member_modifier()

                else:
                    raise NoViableAltException(self)
                self.state = 1754 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,198,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class All_member_modifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NEW(self):
            return self.getToken(CSharpParser.NEW, 0)

        def PUBLIC(self):
            return self.getToken(CSharpParser.PUBLIC, 0)

        def PROTECTED(self):
            return self.getToken(CSharpParser.PROTECTED, 0)

        def INTERNAL(self):
            return self.getToken(CSharpParser.INTERNAL, 0)

        def PRIVATE(self):
            return self.getToken(CSharpParser.PRIVATE, 0)

        def READONLY(self):
            return self.getToken(CSharpParser.READONLY, 0)

        def VOLATILE(self):
            return self.getToken(CSharpParser.VOLATILE, 0)

        def VIRTUAL(self):
            return self.getToken(CSharpParser.VIRTUAL, 0)

        def SEALED(self):
            return self.getToken(CSharpParser.SEALED, 0)

        def OVERRIDE(self):
            return self.getToken(CSharpParser.OVERRIDE, 0)

        def ABSTRACT(self):
            return self.getToken(CSharpParser.ABSTRACT, 0)

        def STATIC(self):
            return self.getToken(CSharpParser.STATIC, 0)

        def UNSAFE(self):
            return self.getToken(CSharpParser.UNSAFE, 0)

        def EXTERN(self):
            return self.getToken(CSharpParser.EXTERN, 0)

        def PARTIAL(self):
            return self.getToken(CSharpParser.PARTIAL, 0)

        def ASYNC(self):
            return self.getToken(CSharpParser.ASYNC, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_all_member_modifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAll_member_modifier" ):
                listener.enterAll_member_modifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAll_member_modifier" ):
                listener.exitAll_member_modifier(self)




    def all_member_modifier(self):

        localctx = CSharpParser.All_member_modifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 260, self.RULE_all_member_modifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1756
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 144117387099144704) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & 11132572286593) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Common_member_declarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def constant_declaration(self):
            return self.getTypedRuleContext(CSharpParser.Constant_declarationContext,0)


        def typed_member_declaration(self):
            return self.getTypedRuleContext(CSharpParser.Typed_member_declarationContext,0)


        def event_declaration(self):
            return self.getTypedRuleContext(CSharpParser.Event_declarationContext,0)


        def conversion_operator_declarator(self):
            return self.getTypedRuleContext(CSharpParser.Conversion_operator_declaratorContext,0)


        def body(self):
            return self.getTypedRuleContext(CSharpParser.BodyContext,0)


        def right_arrow(self):
            return self.getTypedRuleContext(CSharpParser.Right_arrowContext,0)


        def throwable_expression(self):
            return self.getTypedRuleContext(CSharpParser.Throwable_expressionContext,0)


        def SEMICOLON(self):
            return self.getToken(CSharpParser.SEMICOLON, 0)

        def constructor_declaration(self):
            return self.getTypedRuleContext(CSharpParser.Constructor_declarationContext,0)


        def VOID(self):
            return self.getToken(CSharpParser.VOID, 0)

        def method_declaration(self):
            return self.getTypedRuleContext(CSharpParser.Method_declarationContext,0)


        def class_definition(self):
            return self.getTypedRuleContext(CSharpParser.Class_definitionContext,0)


        def struct_definition(self):
            return self.getTypedRuleContext(CSharpParser.Struct_definitionContext,0)


        def interface_definition(self):
            return self.getTypedRuleContext(CSharpParser.Interface_definitionContext,0)


        def enum_definition(self):
            return self.getTypedRuleContext(CSharpParser.Enum_definitionContext,0)


        def delegate_definition(self):
            return self.getTypedRuleContext(CSharpParser.Delegate_definitionContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_common_member_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCommon_member_declaration" ):
                listener.enterCommon_member_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCommon_member_declaration" ):
                listener.exitCommon_member_declaration(self)




    def common_member_declaration(self):

        localctx = CSharpParser.Common_member_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 262, self.RULE_common_member_declaration)
        try:
            self.state = 1777
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,200,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1758
                self.constant_declaration()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1759
                self.typed_member_declaration()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1760
                self.event_declaration()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1761
                self.conversion_operator_declarator()
                self.state = 1767
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [125, 134]:
                    self.state = 1762
                    self.body()
                    pass
                elif token in [145]:
                    self.state = 1763
                    self.right_arrow()
                    self.state = 1764
                    self.throwable_expression()
                    self.state = 1765
                    self.match(CSharpParser.SEMICOLON)
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1769
                self.constructor_declaration()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1770
                self.match(CSharpParser.VOID)
                self.state = 1771
                self.method_declaration()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1772
                self.class_definition()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 1773
                self.struct_definition()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 1774
                self.interface_definition()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 1775
                self.enum_definition()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 1776
                self.delegate_definition()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Typed_member_declarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def type_(self):
            return self.getTypedRuleContext(CSharpParser.Type_Context,0)


        def namespace_or_type_name(self):
            return self.getTypedRuleContext(CSharpParser.Namespace_or_type_nameContext,0)


        def DOT(self):
            return self.getToken(CSharpParser.DOT, 0)

        def indexer_declaration(self):
            return self.getTypedRuleContext(CSharpParser.Indexer_declarationContext,0)


        def method_declaration(self):
            return self.getTypedRuleContext(CSharpParser.Method_declarationContext,0)


        def property_declaration(self):
            return self.getTypedRuleContext(CSharpParser.Property_declarationContext,0)


        def operator_declaration(self):
            return self.getTypedRuleContext(CSharpParser.Operator_declarationContext,0)


        def field_declaration(self):
            return self.getTypedRuleContext(CSharpParser.Field_declarationContext,0)


        def REF(self):
            return self.getToken(CSharpParser.REF, 0)

        def READONLY(self):
            return self.getToken(CSharpParser.READONLY, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_typed_member_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTyped_member_declaration" ):
                listener.enterTyped_member_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTyped_member_declaration" ):
                listener.exitTyped_member_declaration(self)




    def typed_member_declaration(self):

        localctx = CSharpParser.Typed_member_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 264, self.RULE_typed_member_declaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1784
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,201,self._ctx)
            if la_ == 1:
                self.state = 1779
                self.match(CSharpParser.REF)

            elif la_ == 2:
                self.state = 1780
                self.match(CSharpParser.READONLY)
                self.state = 1781
                self.match(CSharpParser.REF)

            elif la_ == 3:
                self.state = 1782
                self.match(CSharpParser.REF)
                self.state = 1783
                self.match(CSharpParser.READONLY)


            self.state = 1786
            self.type_()
            self.state = 1796
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,202,self._ctx)
            if la_ == 1:
                self.state = 1787
                self.namespace_or_type_name()
                self.state = 1788
                self.match(CSharpParser.DOT)
                self.state = 1789
                self.indexer_declaration()
                pass

            elif la_ == 2:
                self.state = 1791
                self.method_declaration()
                pass

            elif la_ == 3:
                self.state = 1792
                self.property_declaration()
                pass

            elif la_ == 4:
                self.state = 1793
                self.indexer_declaration()
                pass

            elif la_ == 5:
                self.state = 1794
                self.operator_declaration()
                pass

            elif la_ == 6:
                self.state = 1795
                self.field_declaration()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Constant_declaratorsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def constant_declarator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Constant_declaratorContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Constant_declaratorContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.COMMA)
            else:
                return self.getToken(CSharpParser.COMMA, i)

        def getRuleIndex(self):
            return CSharpParser.RULE_constant_declarators

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstant_declarators" ):
                listener.enterConstant_declarators(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstant_declarators" ):
                listener.exitConstant_declarators(self)




    def constant_declarators(self):

        localctx = CSharpParser.Constant_declaratorsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 266, self.RULE_constant_declarators)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1798
            self.constant_declarator()
            self.state = 1803
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==132:
                self.state = 1799
                self.match(CSharpParser.COMMA)
                self.state = 1800
                self.constant_declarator()
                self.state = 1805
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Constant_declaratorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(CSharpParser.IdentifierContext,0)


        def ASSIGNMENT(self):
            return self.getToken(CSharpParser.ASSIGNMENT, 0)

        def expression(self):
            return self.getTypedRuleContext(CSharpParser.ExpressionContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_constant_declarator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstant_declarator" ):
                listener.enterConstant_declarator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstant_declarator" ):
                listener.exitConstant_declarator(self)




    def constant_declarator(self):

        localctx = CSharpParser.Constant_declaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 268, self.RULE_constant_declarator)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1806
            self.identifier()
            self.state = 1807
            self.match(CSharpParser.ASSIGNMENT)
            self.state = 1808
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Variable_declaratorsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def variable_declarator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Variable_declaratorContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Variable_declaratorContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.COMMA)
            else:
                return self.getToken(CSharpParser.COMMA, i)

        def getRuleIndex(self):
            return CSharpParser.RULE_variable_declarators

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariable_declarators" ):
                listener.enterVariable_declarators(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariable_declarators" ):
                listener.exitVariable_declarators(self)




    def variable_declarators(self):

        localctx = CSharpParser.Variable_declaratorsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 270, self.RULE_variable_declarators)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1810
            self.variable_declarator()
            self.state = 1815
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==132:
                self.state = 1811
                self.match(CSharpParser.COMMA)
                self.state = 1812
                self.variable_declarator()
                self.state = 1817
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Variable_declaratorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(CSharpParser.IdentifierContext,0)


        def ASSIGNMENT(self):
            return self.getToken(CSharpParser.ASSIGNMENT, 0)

        def variable_initializer(self):
            return self.getTypedRuleContext(CSharpParser.Variable_initializerContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_variable_declarator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariable_declarator" ):
                listener.enterVariable_declarator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariable_declarator" ):
                listener.exitVariable_declarator(self)




    def variable_declarator(self):

        localctx = CSharpParser.Variable_declaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 272, self.RULE_variable_declarator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1818
            self.identifier()
            self.state = 1821
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==145:
                self.state = 1819
                self.match(CSharpParser.ASSIGNMENT)
                self.state = 1820
                self.variable_initializer()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Variable_initializerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(CSharpParser.ExpressionContext,0)


        def array_initializer(self):
            return self.getTypedRuleContext(CSharpParser.Array_initializerContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_variable_initializer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariable_initializer" ):
                listener.enterVariable_initializer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariable_initializer" ):
                listener.exitVariable_initializer(self)




    def variable_initializer(self):

        localctx = CSharpParser.Variable_initializerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 274, self.RULE_variable_initializer)
        try:
            self.state = 1825
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [10, 11, 12, 14, 15, 16, 17, 18, 20, 21, 24, 25, 29, 30, 31, 32, 34, 35, 38, 42, 45, 48, 49, 51, 55, 58, 60, 61, 63, 64, 66, 67, 68, 69, 71, 75, 80, 81, 83, 85, 86, 87, 88, 91, 94, 96, 98, 99, 100, 101, 102, 104, 106, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 129, 135, 136, 137, 140, 142, 143, 144, 151, 152, 171]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1823
                self.expression()
                pass
            elif token in [125]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1824
                self.array_initializer()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Return_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def type_(self):
            return self.getTypedRuleContext(CSharpParser.Type_Context,0)


        def VOID(self):
            return self.getToken(CSharpParser.VOID, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_return_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReturn_type" ):
                listener.enterReturn_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReturn_type" ):
                listener.exitReturn_type(self)




    def return_type(self):

        localctx = CSharpParser.Return_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 276, self.RULE_return_type)
        try:
            self.state = 1829
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,207,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1827
                self.type_()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1828
                self.match(CSharpParser.VOID)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Member_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def namespace_or_type_name(self):
            return self.getTypedRuleContext(CSharpParser.Namespace_or_type_nameContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_member_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMember_name" ):
                listener.enterMember_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMember_name" ):
                listener.exitMember_name(self)




    def member_name(self):

        localctx = CSharpParser.Member_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 278, self.RULE_member_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1831
            self.namespace_or_type_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Method_bodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def block(self):
            return self.getTypedRuleContext(CSharpParser.BlockContext,0)


        def SEMICOLON(self):
            return self.getToken(CSharpParser.SEMICOLON, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_method_body

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMethod_body" ):
                listener.enterMethod_body(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMethod_body" ):
                listener.exitMethod_body(self)




    def method_body(self):

        localctx = CSharpParser.Method_bodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 280, self.RULE_method_body)
        try:
            self.state = 1835
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [125]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1833
                self.block()
                pass
            elif token in [134]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1834
                self.match(CSharpParser.SEMICOLON)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Formal_parameter_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def parameter_array(self):
            return self.getTypedRuleContext(CSharpParser.Parameter_arrayContext,0)


        def fixed_parameters(self):
            return self.getTypedRuleContext(CSharpParser.Fixed_parametersContext,0)


        def COMMA(self):
            return self.getToken(CSharpParser.COMMA, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_formal_parameter_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFormal_parameter_list" ):
                listener.enterFormal_parameter_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFormal_parameter_list" ):
                listener.exitFormal_parameter_list(self)




    def formal_parameter_list(self):

        localctx = CSharpParser.Formal_parameter_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 282, self.RULE_formal_parameter_list)
        self._la = 0 # Token type
        try:
            self.state = 1843
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,210,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1837
                self.parameter_array()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1838
                self.fixed_parameters()
                self.state = 1841
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==132:
                    self.state = 1839
                    self.match(CSharpParser.COMMA)
                    self.state = 1840
                    self.parameter_array()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Fixed_parametersContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fixed_parameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Fixed_parameterContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Fixed_parameterContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.COMMA)
            else:
                return self.getToken(CSharpParser.COMMA, i)

        def getRuleIndex(self):
            return CSharpParser.RULE_fixed_parameters

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFixed_parameters" ):
                listener.enterFixed_parameters(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFixed_parameters" ):
                listener.exitFixed_parameters(self)




    def fixed_parameters(self):

        localctx = CSharpParser.Fixed_parametersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 284, self.RULE_fixed_parameters)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1845
            self.fixed_parameter()
            self.state = 1850
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,211,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1846
                    self.match(CSharpParser.COMMA)
                    self.state = 1847
                    self.fixed_parameter() 
                self.state = 1852
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,211,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Fixed_parameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def arg_declaration(self):
            return self.getTypedRuleContext(CSharpParser.Arg_declarationContext,0)


        def attributes(self):
            return self.getTypedRuleContext(CSharpParser.AttributesContext,0)


        def parameter_modifier(self):
            return self.getTypedRuleContext(CSharpParser.Parameter_modifierContext,0)


        def ARGLIST(self):
            return self.getToken(CSharpParser.ARGLIST, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_fixed_parameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFixed_parameter" ):
                listener.enterFixed_parameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFixed_parameter" ):
                listener.exitFixed_parameter(self)




    def fixed_parameter(self):

        localctx = CSharpParser.Fixed_parameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 286, self.RULE_fixed_parameter)
        self._la = 0 # Token type
        try:
            self.state = 1861
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,214,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1854
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==127:
                    self.state = 1853
                    self.attributes()


                self.state = 1857
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 54)) & ~0x3f) == 0 and ((1 << (_la - 54)) & 1099578998785) != 0):
                    self.state = 1856
                    self.parameter_modifier()


                self.state = 1859
                self.arg_declaration()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1860
                self.match(CSharpParser.ARGLIST)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Parameter_modifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REF(self):
            return self.getToken(CSharpParser.REF, 0)

        def OUT(self):
            return self.getToken(CSharpParser.OUT, 0)

        def IN(self):
            return self.getToken(CSharpParser.IN, 0)

        def THIS(self):
            return self.getToken(CSharpParser.THIS, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_parameter_modifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParameter_modifier" ):
                listener.enterParameter_modifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParameter_modifier" ):
                listener.exitParameter_modifier(self)




    def parameter_modifier(self):

        localctx = CSharpParser.Parameter_modifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 288, self.RULE_parameter_modifier)
        try:
            self.state = 1871
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,215,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1863
                self.match(CSharpParser.REF)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1864
                self.match(CSharpParser.OUT)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1865
                self.match(CSharpParser.IN)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1866
                self.match(CSharpParser.REF)
                self.state = 1867
                self.match(CSharpParser.THIS)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1868
                self.match(CSharpParser.IN)
                self.state = 1869
                self.match(CSharpParser.THIS)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1870
                self.match(CSharpParser.THIS)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Parameter_arrayContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PARAMS(self):
            return self.getToken(CSharpParser.PARAMS, 0)

        def array_type(self):
            return self.getTypedRuleContext(CSharpParser.Array_typeContext,0)


        def identifier(self):
            return self.getTypedRuleContext(CSharpParser.IdentifierContext,0)


        def attributes(self):
            return self.getTypedRuleContext(CSharpParser.AttributesContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_parameter_array

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParameter_array" ):
                listener.enterParameter_array(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParameter_array" ):
                listener.exitParameter_array(self)




    def parameter_array(self):

        localctx = CSharpParser.Parameter_arrayContext(self, self._ctx, self.state)
        self.enterRule(localctx, 290, self.RULE_parameter_array)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1874
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==127:
                self.state = 1873
                self.attributes()


            self.state = 1876
            self.match(CSharpParser.PARAMS)
            self.state = 1877
            self.array_type()
            self.state = 1878
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Accessor_declarationsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.attrs = None # AttributesContext
            self.mods = None # Accessor_modifierContext

        def GET(self):
            return self.getToken(CSharpParser.GET, 0)

        def accessor_body(self):
            return self.getTypedRuleContext(CSharpParser.Accessor_bodyContext,0)


        def SET(self):
            return self.getToken(CSharpParser.SET, 0)

        def attributes(self):
            return self.getTypedRuleContext(CSharpParser.AttributesContext,0)


        def accessor_modifier(self):
            return self.getTypedRuleContext(CSharpParser.Accessor_modifierContext,0)


        def set_accessor_declaration(self):
            return self.getTypedRuleContext(CSharpParser.Set_accessor_declarationContext,0)


        def get_accessor_declaration(self):
            return self.getTypedRuleContext(CSharpParser.Get_accessor_declarationContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_accessor_declarations

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAccessor_declarations" ):
                listener.enterAccessor_declarations(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAccessor_declarations" ):
                listener.exitAccessor_declarations(self)




    def accessor_declarations(self):

        localctx = CSharpParser.Accessor_declarationsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 292, self.RULE_accessor_declarations)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1881
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==127:
                self.state = 1880
                localctx.attrs = self.attributes()


            self.state = 1884
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 57)) & ~0x3f) == 0 and ((1 << (_la - 57)) & 1572865) != 0):
                self.state = 1883
                localctx.mods = self.accessor_modifier()


            self.state = 1896
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [49]:
                self.state = 1886
                self.match(CSharpParser.GET)
                self.state = 1887
                self.accessor_body()
                self.state = 1889
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==57 or ((((_la - 76)) & ~0x3f) == 0 and ((1 << (_la - 76)) & 2251799813686275) != 0):
                    self.state = 1888
                    self.set_accessor_declaration()


                pass
            elif token in [86]:
                self.state = 1891
                self.match(CSharpParser.SET)
                self.state = 1892
                self.accessor_body()
                self.state = 1894
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==49 or _la==57 or ((((_la - 76)) & ~0x3f) == 0 and ((1 << (_la - 76)) & 2251799813685251) != 0):
                    self.state = 1893
                    self.get_accessor_declaration()


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Get_accessor_declarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GET(self):
            return self.getToken(CSharpParser.GET, 0)

        def accessor_body(self):
            return self.getTypedRuleContext(CSharpParser.Accessor_bodyContext,0)


        def attributes(self):
            return self.getTypedRuleContext(CSharpParser.AttributesContext,0)


        def accessor_modifier(self):
            return self.getTypedRuleContext(CSharpParser.Accessor_modifierContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_get_accessor_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGet_accessor_declaration" ):
                listener.enterGet_accessor_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGet_accessor_declaration" ):
                listener.exitGet_accessor_declaration(self)




    def get_accessor_declaration(self):

        localctx = CSharpParser.Get_accessor_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 294, self.RULE_get_accessor_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1899
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==127:
                self.state = 1898
                self.attributes()


            self.state = 1902
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 57)) & ~0x3f) == 0 and ((1 << (_la - 57)) & 1572865) != 0):
                self.state = 1901
                self.accessor_modifier()


            self.state = 1904
            self.match(CSharpParser.GET)
            self.state = 1905
            self.accessor_body()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Set_accessor_declarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SET(self):
            return self.getToken(CSharpParser.SET, 0)

        def accessor_body(self):
            return self.getTypedRuleContext(CSharpParser.Accessor_bodyContext,0)


        def attributes(self):
            return self.getTypedRuleContext(CSharpParser.AttributesContext,0)


        def accessor_modifier(self):
            return self.getTypedRuleContext(CSharpParser.Accessor_modifierContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_set_accessor_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSet_accessor_declaration" ):
                listener.enterSet_accessor_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSet_accessor_declaration" ):
                listener.exitSet_accessor_declaration(self)




    def set_accessor_declaration(self):

        localctx = CSharpParser.Set_accessor_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 296, self.RULE_set_accessor_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1908
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==127:
                self.state = 1907
                self.attributes()


            self.state = 1911
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 57)) & ~0x3f) == 0 and ((1 << (_la - 57)) & 1572865) != 0):
                self.state = 1910
                self.accessor_modifier()


            self.state = 1913
            self.match(CSharpParser.SET)
            self.state = 1914
            self.accessor_body()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Accessor_modifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PROTECTED(self):
            return self.getToken(CSharpParser.PROTECTED, 0)

        def INTERNAL(self):
            return self.getToken(CSharpParser.INTERNAL, 0)

        def PRIVATE(self):
            return self.getToken(CSharpParser.PRIVATE, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_accessor_modifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAccessor_modifier" ):
                listener.enterAccessor_modifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAccessor_modifier" ):
                listener.exitAccessor_modifier(self)




    def accessor_modifier(self):

        localctx = CSharpParser.Accessor_modifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 298, self.RULE_accessor_modifier)
        try:
            self.state = 1923
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,226,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1916
                self.match(CSharpParser.PROTECTED)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1917
                self.match(CSharpParser.INTERNAL)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1918
                self.match(CSharpParser.PRIVATE)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1919
                self.match(CSharpParser.PROTECTED)
                self.state = 1920
                self.match(CSharpParser.INTERNAL)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1921
                self.match(CSharpParser.INTERNAL)
                self.state = 1922
                self.match(CSharpParser.PROTECTED)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Accessor_bodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def block(self):
            return self.getTypedRuleContext(CSharpParser.BlockContext,0)


        def SEMICOLON(self):
            return self.getToken(CSharpParser.SEMICOLON, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_accessor_body

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAccessor_body" ):
                listener.enterAccessor_body(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAccessor_body" ):
                listener.exitAccessor_body(self)




    def accessor_body(self):

        localctx = CSharpParser.Accessor_bodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 300, self.RULE_accessor_body)
        try:
            self.state = 1927
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [125]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1925
                self.block()
                pass
            elif token in [134]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1926
                self.match(CSharpParser.SEMICOLON)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Event_accessor_declarationsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ADD(self):
            return self.getToken(CSharpParser.ADD, 0)

        def block(self):
            return self.getTypedRuleContext(CSharpParser.BlockContext,0)


        def remove_accessor_declaration(self):
            return self.getTypedRuleContext(CSharpParser.Remove_accessor_declarationContext,0)


        def REMOVE(self):
            return self.getToken(CSharpParser.REMOVE, 0)

        def add_accessor_declaration(self):
            return self.getTypedRuleContext(CSharpParser.Add_accessor_declarationContext,0)


        def attributes(self):
            return self.getTypedRuleContext(CSharpParser.AttributesContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_event_accessor_declarations

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEvent_accessor_declarations" ):
                listener.enterEvent_accessor_declarations(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEvent_accessor_declarations" ):
                listener.exitEvent_accessor_declarations(self)




    def event_accessor_declarations(self):

        localctx = CSharpParser.Event_accessor_declarationsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 302, self.RULE_event_accessor_declarations)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1930
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==127:
                self.state = 1929
                self.attributes()


            self.state = 1940
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [10]:
                self.state = 1932
                self.match(CSharpParser.ADD)
                self.state = 1933
                self.block()
                self.state = 1934
                self.remove_accessor_declaration()
                pass
            elif token in [81]:
                self.state = 1936
                self.match(CSharpParser.REMOVE)
                self.state = 1937
                self.block()
                self.state = 1938
                self.add_accessor_declaration()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Add_accessor_declarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ADD(self):
            return self.getToken(CSharpParser.ADD, 0)

        def block(self):
            return self.getTypedRuleContext(CSharpParser.BlockContext,0)


        def attributes(self):
            return self.getTypedRuleContext(CSharpParser.AttributesContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_add_accessor_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAdd_accessor_declaration" ):
                listener.enterAdd_accessor_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAdd_accessor_declaration" ):
                listener.exitAdd_accessor_declaration(self)




    def add_accessor_declaration(self):

        localctx = CSharpParser.Add_accessor_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 304, self.RULE_add_accessor_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1943
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==127:
                self.state = 1942
                self.attributes()


            self.state = 1945
            self.match(CSharpParser.ADD)
            self.state = 1946
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Remove_accessor_declarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REMOVE(self):
            return self.getToken(CSharpParser.REMOVE, 0)

        def block(self):
            return self.getTypedRuleContext(CSharpParser.BlockContext,0)


        def attributes(self):
            return self.getTypedRuleContext(CSharpParser.AttributesContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_remove_accessor_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRemove_accessor_declaration" ):
                listener.enterRemove_accessor_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRemove_accessor_declaration" ):
                listener.exitRemove_accessor_declaration(self)




    def remove_accessor_declaration(self):

        localctx = CSharpParser.Remove_accessor_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 306, self.RULE_remove_accessor_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1949
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==127:
                self.state = 1948
                self.attributes()


            self.state = 1951
            self.match(CSharpParser.REMOVE)
            self.state = 1952
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Overloadable_operatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PLUS(self):
            return self.getToken(CSharpParser.PLUS, 0)

        def MINUS(self):
            return self.getToken(CSharpParser.MINUS, 0)

        def BANG(self):
            return self.getToken(CSharpParser.BANG, 0)

        def TILDE(self):
            return self.getToken(CSharpParser.TILDE, 0)

        def OP_INC(self):
            return self.getToken(CSharpParser.OP_INC, 0)

        def OP_DEC(self):
            return self.getToken(CSharpParser.OP_DEC, 0)

        def TRUE(self):
            return self.getToken(CSharpParser.TRUE, 0)

        def FALSE(self):
            return self.getToken(CSharpParser.FALSE, 0)

        def STAR(self):
            return self.getToken(CSharpParser.STAR, 0)

        def DIV(self):
            return self.getToken(CSharpParser.DIV, 0)

        def PERCENT(self):
            return self.getToken(CSharpParser.PERCENT, 0)

        def AMP(self):
            return self.getToken(CSharpParser.AMP, 0)

        def BITWISE_OR(self):
            return self.getToken(CSharpParser.BITWISE_OR, 0)

        def CARET(self):
            return self.getToken(CSharpParser.CARET, 0)

        def OP_LEFT_SHIFT(self):
            return self.getToken(CSharpParser.OP_LEFT_SHIFT, 0)

        def right_shift(self):
            return self.getTypedRuleContext(CSharpParser.Right_shiftContext,0)


        def OP_EQ(self):
            return self.getToken(CSharpParser.OP_EQ, 0)

        def OP_NE(self):
            return self.getToken(CSharpParser.OP_NE, 0)

        def GT(self):
            return self.getToken(CSharpParser.GT, 0)

        def LT(self):
            return self.getToken(CSharpParser.LT, 0)

        def OP_GE(self):
            return self.getToken(CSharpParser.OP_GE, 0)

        def OP_LE(self):
            return self.getToken(CSharpParser.OP_LE, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_overloadable_operator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOverloadable_operator" ):
                listener.enterOverloadable_operator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOverloadable_operator" ):
                listener.exitOverloadable_operator(self)




    def overloadable_operator(self):

        localctx = CSharpParser.Overloadable_operatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 308, self.RULE_overloadable_operator)
        try:
            self.state = 1976
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,232,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1954
                self.match(CSharpParser.PLUS)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1955
                self.match(CSharpParser.MINUS)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1956
                self.match(CSharpParser.BANG)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1957
                self.match(CSharpParser.TILDE)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1958
                self.match(CSharpParser.OP_INC)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1959
                self.match(CSharpParser.OP_DEC)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1960
                self.match(CSharpParser.TRUE)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 1961
                self.match(CSharpParser.FALSE)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 1962
                self.match(CSharpParser.STAR)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 1963
                self.match(CSharpParser.DIV)
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 1964
                self.match(CSharpParser.PERCENT)
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 1965
                self.match(CSharpParser.AMP)
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 1966
                self.match(CSharpParser.BITWISE_OR)
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 1967
                self.match(CSharpParser.CARET)
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 1968
                self.match(CSharpParser.OP_LEFT_SHIFT)
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 1969
                self.right_shift()
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 1970
                self.match(CSharpParser.OP_EQ)
                pass

            elif la_ == 18:
                self.enterOuterAlt(localctx, 18)
                self.state = 1971
                self.match(CSharpParser.OP_NE)
                pass

            elif la_ == 19:
                self.enterOuterAlt(localctx, 19)
                self.state = 1972
                self.match(CSharpParser.GT)
                pass

            elif la_ == 20:
                self.enterOuterAlt(localctx, 20)
                self.state = 1973
                self.match(CSharpParser.LT)
                pass

            elif la_ == 21:
                self.enterOuterAlt(localctx, 21)
                self.state = 1974
                self.match(CSharpParser.OP_GE)
                pass

            elif la_ == 22:
                self.enterOuterAlt(localctx, 22)
                self.state = 1975
                self.match(CSharpParser.OP_LE)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Conversion_operator_declaratorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPERATOR(self):
            return self.getToken(CSharpParser.OPERATOR, 0)

        def type_(self):
            return self.getTypedRuleContext(CSharpParser.Type_Context,0)


        def OPEN_PARENS(self):
            return self.getToken(CSharpParser.OPEN_PARENS, 0)

        def arg_declaration(self):
            return self.getTypedRuleContext(CSharpParser.Arg_declarationContext,0)


        def CLOSE_PARENS(self):
            return self.getToken(CSharpParser.CLOSE_PARENS, 0)

        def IMPLICIT(self):
            return self.getToken(CSharpParser.IMPLICIT, 0)

        def EXPLICIT(self):
            return self.getToken(CSharpParser.EXPLICIT, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_conversion_operator_declarator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConversion_operator_declarator" ):
                listener.enterConversion_operator_declarator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConversion_operator_declarator" ):
                listener.exitConversion_operator_declarator(self)




    def conversion_operator_declarator(self):

        localctx = CSharpParser.Conversion_operator_declaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 310, self.RULE_conversion_operator_declarator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1978
            _la = self._input.LA(1)
            if not(_la==40 or _la==53):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1979
            self.match(CSharpParser.OPERATOR)
            self.state = 1980
            self.type_()
            self.state = 1981
            self.match(CSharpParser.OPEN_PARENS)
            self.state = 1982
            self.arg_declaration()
            self.state = 1983
            self.match(CSharpParser.CLOSE_PARENS)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Constructor_initializerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COLON(self):
            return self.getToken(CSharpParser.COLON, 0)

        def OPEN_PARENS(self):
            return self.getToken(CSharpParser.OPEN_PARENS, 0)

        def CLOSE_PARENS(self):
            return self.getToken(CSharpParser.CLOSE_PARENS, 0)

        def BASE(self):
            return self.getToken(CSharpParser.BASE, 0)

        def THIS(self):
            return self.getToken(CSharpParser.THIS, 0)

        def argument_list(self):
            return self.getTypedRuleContext(CSharpParser.Argument_listContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_constructor_initializer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstructor_initializer" ):
                listener.enterConstructor_initializer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstructor_initializer" ):
                listener.exitConstructor_initializer(self)




    def constructor_initializer(self):

        localctx = CSharpParser.Constructor_initializerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 312, self.RULE_constructor_initializer)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1985
            self.match(CSharpParser.COLON)
            self.state = 1986
            _la = self._input.LA(1)
            if not(_la==17 or _la==94):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1987
            self.match(CSharpParser.OPEN_PARENS)
            self.state = 1989
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & -5419197809667089408) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 2305514793348041149) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & 4398059153857) != 0):
                self.state = 1988
                self.argument_list()


            self.state = 1991
            self.match(CSharpParser.CLOSE_PARENS)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def block(self):
            return self.getTypedRuleContext(CSharpParser.BlockContext,0)


        def SEMICOLON(self):
            return self.getToken(CSharpParser.SEMICOLON, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_body

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBody" ):
                listener.enterBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBody" ):
                listener.exitBody(self)




    def body(self):

        localctx = CSharpParser.BodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 314, self.RULE_body)
        try:
            self.state = 1995
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [125]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1993
                self.block()
                pass
            elif token in [134]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1994
                self.match(CSharpParser.SEMICOLON)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Struct_interfacesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COLON(self):
            return self.getToken(CSharpParser.COLON, 0)

        def interface_type_list(self):
            return self.getTypedRuleContext(CSharpParser.Interface_type_listContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_struct_interfaces

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStruct_interfaces" ):
                listener.enterStruct_interfaces(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStruct_interfaces" ):
                listener.exitStruct_interfaces(self)




    def struct_interfaces(self):

        localctx = CSharpParser.Struct_interfacesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 316, self.RULE_struct_interfaces)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1997
            self.match(CSharpParser.COLON)
            self.state = 1998
            self.interface_type_list()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Struct_bodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_BRACE(self):
            return self.getToken(CSharpParser.OPEN_BRACE, 0)

        def CLOSE_BRACE(self):
            return self.getToken(CSharpParser.CLOSE_BRACE, 0)

        def struct_member_declaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Struct_member_declarationContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Struct_member_declarationContext,i)


        def getRuleIndex(self):
            return CSharpParser.RULE_struct_body

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStruct_body" ):
                listener.enterStruct_body(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStruct_body" ):
                listener.exitStruct_body(self)




    def struct_body(self):

        localctx = CSharpParser.Struct_bodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 318, self.RULE_struct_body)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2000
            self.match(CSharpParser.OPEN_BRACE)
            self.state = 2004
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 9)) & ~0x3f) == 0 and ((1 << (_la - 9)) & 6547061340561119983) != 0) or ((((_la - 73)) & ~0x3f) == 0 and ((1 << (_la - 73)) & 90075836208545277) != 0):
                self.state = 2001
                self.struct_member_declaration()
                self.state = 2006
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2007
            self.match(CSharpParser.CLOSE_BRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Struct_member_declarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def common_member_declaration(self):
            return self.getTypedRuleContext(CSharpParser.Common_member_declarationContext,0)


        def FIXED(self):
            return self.getToken(CSharpParser.FIXED, 0)

        def type_(self):
            return self.getTypedRuleContext(CSharpParser.Type_Context,0)


        def SEMICOLON(self):
            return self.getToken(CSharpParser.SEMICOLON, 0)

        def attributes(self):
            return self.getTypedRuleContext(CSharpParser.AttributesContext,0)


        def all_member_modifiers(self):
            return self.getTypedRuleContext(CSharpParser.All_member_modifiersContext,0)


        def fixed_size_buffer_declarator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Fixed_size_buffer_declaratorContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Fixed_size_buffer_declaratorContext,i)


        def getRuleIndex(self):
            return CSharpParser.RULE_struct_member_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStruct_member_declaration" ):
                listener.enterStruct_member_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStruct_member_declaration" ):
                listener.exitStruct_member_declaration(self)




    def struct_member_declaration(self):

        localctx = CSharpParser.Struct_member_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 320, self.RULE_struct_member_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2010
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==127:
                self.state = 2009
                self.attributes()


            self.state = 2013
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,237,self._ctx)
            if la_ == 1:
                self.state = 2012
                self.all_member_modifiers()


            self.state = 2025
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [10, 11, 12, 14, 15, 16, 18, 20, 21, 24, 26, 27, 29, 31, 32, 34, 35, 37, 38, 39, 40, 45, 48, 49, 51, 53, 55, 56, 58, 60, 61, 63, 64, 68, 69, 71, 75, 79, 80, 81, 83, 85, 86, 87, 91, 92, 99, 100, 102, 104, 106, 108, 110, 111, 113, 114, 129]:
                self.state = 2015
                self.common_member_declaration()
                pass
            elif token in [44]:
                self.state = 2016
                self.match(CSharpParser.FIXED)
                self.state = 2017
                self.type_()
                self.state = 2019 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 2018
                    self.fixed_size_buffer_declarator()
                    self.state = 2021 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & 3750091428249852928) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 1904629023639713) != 0)):
                        break

                self.state = 2023
                self.match(CSharpParser.SEMICOLON)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Array_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def base_type(self):
            return self.getTypedRuleContext(CSharpParser.Base_typeContext,0)


        def rank_specifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Rank_specifierContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Rank_specifierContext,i)


        def STAR(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.STAR)
            else:
                return self.getToken(CSharpParser.STAR, i)

        def INTERR(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.INTERR)
            else:
                return self.getToken(CSharpParser.INTERR, i)

        def getRuleIndex(self):
            return CSharpParser.RULE_array_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArray_type" ):
                listener.enterArray_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArray_type" ):
                listener.exitArray_type(self)




    def array_type(self):

        localctx = CSharpParser.Array_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 322, self.RULE_array_type)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2027
            self.base_type()
            self.state = 2035 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 2031
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==137 or _la==148:
                    self.state = 2028
                    _la = self._input.LA(1)
                    if not(_la==137 or _la==148):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 2033
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2034
                self.rank_specifier()
                self.state = 2037 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (((((_la - 127)) & ~0x3f) == 0 and ((1 << (_la - 127)) & 2098177) != 0)):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Rank_specifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_BRACKET(self):
            return self.getToken(CSharpParser.OPEN_BRACKET, 0)

        def CLOSE_BRACKET(self):
            return self.getToken(CSharpParser.CLOSE_BRACKET, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.COMMA)
            else:
                return self.getToken(CSharpParser.COMMA, i)

        def getRuleIndex(self):
            return CSharpParser.RULE_rank_specifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRank_specifier" ):
                listener.enterRank_specifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRank_specifier" ):
                listener.exitRank_specifier(self)




    def rank_specifier(self):

        localctx = CSharpParser.Rank_specifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 324, self.RULE_rank_specifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2039
            self.match(CSharpParser.OPEN_BRACKET)
            self.state = 2043
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==132:
                self.state = 2040
                self.match(CSharpParser.COMMA)
                self.state = 2045
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2046
            self.match(CSharpParser.CLOSE_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Array_initializerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_BRACE(self):
            return self.getToken(CSharpParser.OPEN_BRACE, 0)

        def CLOSE_BRACE(self):
            return self.getToken(CSharpParser.CLOSE_BRACE, 0)

        def variable_initializer(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Variable_initializerContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Variable_initializerContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.COMMA)
            else:
                return self.getToken(CSharpParser.COMMA, i)

        def getRuleIndex(self):
            return CSharpParser.RULE_array_initializer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArray_initializer" ):
                listener.enterArray_initializer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArray_initializer" ):
                listener.exitArray_initializer(self)




    def array_initializer(self):

        localctx = CSharpParser.Array_initializerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 326, self.RULE_array_initializer)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2048
            self.match(CSharpParser.OPEN_BRACE)
            self.state = 2060
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & -5437212208176571392) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 4611340210375690429) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & 4398059153857) != 0):
                self.state = 2049
                self.variable_initializer()
                self.state = 2054
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,243,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2050
                        self.match(CSharpParser.COMMA)
                        self.state = 2051
                        self.variable_initializer() 
                    self.state = 2056
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,243,self._ctx)

                self.state = 2058
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==132:
                    self.state = 2057
                    self.match(CSharpParser.COMMA)




            self.state = 2062
            self.match(CSharpParser.CLOSE_BRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Variant_type_parameter_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LT(self):
            return self.getToken(CSharpParser.LT, 0)

        def variant_type_parameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Variant_type_parameterContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Variant_type_parameterContext,i)


        def GT(self):
            return self.getToken(CSharpParser.GT, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.COMMA)
            else:
                return self.getToken(CSharpParser.COMMA, i)

        def getRuleIndex(self):
            return CSharpParser.RULE_variant_type_parameter_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariant_type_parameter_list" ):
                listener.enterVariant_type_parameter_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariant_type_parameter_list" ):
                listener.exitVariant_type_parameter_list(self)




    def variant_type_parameter_list(self):

        localctx = CSharpParser.Variant_type_parameter_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 328, self.RULE_variant_type_parameter_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2064
            self.match(CSharpParser.LT)
            self.state = 2065
            self.variant_type_parameter()
            self.state = 2070
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==132:
                self.state = 2066
                self.match(CSharpParser.COMMA)
                self.state = 2067
                self.variant_type_parameter()
                self.state = 2072
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2073
            self.match(CSharpParser.GT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Variant_type_parameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(CSharpParser.IdentifierContext,0)


        def attributes(self):
            return self.getTypedRuleContext(CSharpParser.AttributesContext,0)


        def variance_annotation(self):
            return self.getTypedRuleContext(CSharpParser.Variance_annotationContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_variant_type_parameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariant_type_parameter" ):
                listener.enterVariant_type_parameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariant_type_parameter" ):
                listener.exitVariant_type_parameter(self)




    def variant_type_parameter(self):

        localctx = CSharpParser.Variant_type_parameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 330, self.RULE_variant_type_parameter)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2076
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==127:
                self.state = 2075
                self.attributes()


            self.state = 2079
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==54 or _la==72:
                self.state = 2078
                self.variance_annotation()


            self.state = 2081
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Variance_annotationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IN(self):
            return self.getToken(CSharpParser.IN, 0)

        def OUT(self):
            return self.getToken(CSharpParser.OUT, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_variance_annotation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariance_annotation" ):
                listener.enterVariance_annotation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariance_annotation" ):
                listener.exitVariance_annotation(self)




    def variance_annotation(self):

        localctx = CSharpParser.Variance_annotationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 332, self.RULE_variance_annotation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2083
            _la = self._input.LA(1)
            if not(_la==54 or _la==72):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Interface_baseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COLON(self):
            return self.getToken(CSharpParser.COLON, 0)

        def interface_type_list(self):
            return self.getTypedRuleContext(CSharpParser.Interface_type_listContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_interface_base

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterface_base" ):
                listener.enterInterface_base(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterface_base" ):
                listener.exitInterface_base(self)




    def interface_base(self):

        localctx = CSharpParser.Interface_baseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 334, self.RULE_interface_base)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2085
            self.match(CSharpParser.COLON)
            self.state = 2086
            self.interface_type_list()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Interface_bodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_BRACE(self):
            return self.getToken(CSharpParser.OPEN_BRACE, 0)

        def CLOSE_BRACE(self):
            return self.getToken(CSharpParser.CLOSE_BRACE, 0)

        def interface_member_declaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Interface_member_declarationContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Interface_member_declarationContext,i)


        def getRuleIndex(self):
            return CSharpParser.RULE_interface_body

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterface_body" ):
                listener.enterInterface_body(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterface_body" ):
                listener.exitInterface_body(self)




    def interface_body(self):

        localctx = CSharpParser.Interface_bodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 336, self.RULE_interface_body)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2088
            self.match(CSharpParser.OPEN_BRACE)
            self.state = 2092
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 10)) & ~0x3f) == 0 and ((1 << (_la - 10)) & 3273310747417398647) != 0) or ((((_la - 75)) & ~0x3f) == 0 and ((1 << (_la - 75)) & 22518937577135473) != 0):
                self.state = 2089
                self.interface_member_declaration()
                self.state = 2094
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2095
            self.match(CSharpParser.CLOSE_BRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Interface_member_declarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def type_(self):
            return self.getTypedRuleContext(CSharpParser.Type_Context,0)


        def VOID(self):
            return self.getToken(CSharpParser.VOID, 0)

        def identifier(self):
            return self.getTypedRuleContext(CSharpParser.IdentifierContext,0)


        def OPEN_PARENS(self):
            return self.getToken(CSharpParser.OPEN_PARENS, 0)

        def CLOSE_PARENS(self):
            return self.getToken(CSharpParser.CLOSE_PARENS, 0)

        def SEMICOLON(self):
            return self.getToken(CSharpParser.SEMICOLON, 0)

        def EVENT(self):
            return self.getToken(CSharpParser.EVENT, 0)

        def attributes(self):
            return self.getTypedRuleContext(CSharpParser.AttributesContext,0)


        def NEW(self):
            return self.getToken(CSharpParser.NEW, 0)

        def OPEN_BRACE(self):
            return self.getToken(CSharpParser.OPEN_BRACE, 0)

        def interface_accessors(self):
            return self.getTypedRuleContext(CSharpParser.Interface_accessorsContext,0)


        def CLOSE_BRACE(self):
            return self.getToken(CSharpParser.CLOSE_BRACE, 0)

        def THIS(self):
            return self.getToken(CSharpParser.THIS, 0)

        def OPEN_BRACKET(self):
            return self.getToken(CSharpParser.OPEN_BRACKET, 0)

        def formal_parameter_list(self):
            return self.getTypedRuleContext(CSharpParser.Formal_parameter_listContext,0)


        def CLOSE_BRACKET(self):
            return self.getToken(CSharpParser.CLOSE_BRACKET, 0)

        def UNSAFE(self):
            return self.getToken(CSharpParser.UNSAFE, 0)

        def REF(self):
            return self.getToken(CSharpParser.REF, 0)

        def READONLY(self):
            return self.getToken(CSharpParser.READONLY, 0)

        def type_parameter_list(self):
            return self.getTypedRuleContext(CSharpParser.Type_parameter_listContext,0)


        def type_parameter_constraints_clauses(self):
            return self.getTypedRuleContext(CSharpParser.Type_parameter_constraints_clausesContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_interface_member_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterface_member_declaration" ):
                listener.enterInterface_member_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterface_member_declaration" ):
                listener.exitInterface_member_declaration(self)




    def interface_member_declaration(self):

        localctx = CSharpParser.Interface_member_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 338, self.RULE_interface_member_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2098
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==127:
                self.state = 2097
                self.attributes()


            self.state = 2101
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==66:
                self.state = 2100
                self.match(CSharpParser.NEW)


            self.state = 2166
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,262,self._ctx)
            if la_ == 1:
                self.state = 2104
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==103:
                    self.state = 2103
                    self.match(CSharpParser.UNSAFE)


                self.state = 2111
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,253,self._ctx)
                if la_ == 1:
                    self.state = 2106
                    self.match(CSharpParser.REF)

                elif la_ == 2:
                    self.state = 2107
                    self.match(CSharpParser.REF)
                    self.state = 2108
                    self.match(CSharpParser.READONLY)

                elif la_ == 3:
                    self.state = 2109
                    self.match(CSharpParser.READONLY)
                    self.state = 2110
                    self.match(CSharpParser.REF)


                self.state = 2113
                self.type_()
                self.state = 2141
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,257,self._ctx)
                if la_ == 1:
                    self.state = 2114
                    self.identifier()
                    self.state = 2116
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==146:
                        self.state = 2115
                        self.type_parameter_list()


                    self.state = 2118
                    self.match(CSharpParser.OPEN_PARENS)
                    self.state = 2120
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if ((((_la - 10)) & ~0x3f) == 0 and ((1 << (_la - 10)) & 7812956763456032119) != 0) or ((((_la - 74)) & ~0x3f) == 0 and ((1 << (_la - 74)) & 45037874618448579) != 0):
                        self.state = 2119
                        self.formal_parameter_list()


                    self.state = 2122
                    self.match(CSharpParser.CLOSE_PARENS)
                    self.state = 2124
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==111:
                        self.state = 2123
                        self.type_parameter_constraints_clauses()


                    self.state = 2126
                    self.match(CSharpParser.SEMICOLON)
                    pass

                elif la_ == 2:
                    self.state = 2128
                    self.identifier()
                    self.state = 2129
                    self.match(CSharpParser.OPEN_BRACE)
                    self.state = 2130
                    self.interface_accessors()
                    self.state = 2131
                    self.match(CSharpParser.CLOSE_BRACE)
                    pass

                elif la_ == 3:
                    self.state = 2133
                    self.match(CSharpParser.THIS)
                    self.state = 2134
                    self.match(CSharpParser.OPEN_BRACKET)
                    self.state = 2135
                    self.formal_parameter_list()
                    self.state = 2136
                    self.match(CSharpParser.CLOSE_BRACKET)
                    self.state = 2137
                    self.match(CSharpParser.OPEN_BRACE)
                    self.state = 2138
                    self.interface_accessors()
                    self.state = 2139
                    self.match(CSharpParser.CLOSE_BRACE)
                    pass


                pass

            elif la_ == 2:
                self.state = 2144
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==103:
                    self.state = 2143
                    self.match(CSharpParser.UNSAFE)


                self.state = 2146
                self.match(CSharpParser.VOID)
                self.state = 2147
                self.identifier()
                self.state = 2149
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==146:
                    self.state = 2148
                    self.type_parameter_list()


                self.state = 2151
                self.match(CSharpParser.OPEN_PARENS)
                self.state = 2153
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 10)) & ~0x3f) == 0 and ((1 << (_la - 10)) & 7812956763456032119) != 0) or ((((_la - 74)) & ~0x3f) == 0 and ((1 << (_la - 74)) & 45037874618448579) != 0):
                    self.state = 2152
                    self.formal_parameter_list()


                self.state = 2155
                self.match(CSharpParser.CLOSE_PARENS)
                self.state = 2157
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==111:
                    self.state = 2156
                    self.type_parameter_constraints_clauses()


                self.state = 2159
                self.match(CSharpParser.SEMICOLON)
                pass

            elif la_ == 3:
                self.state = 2161
                self.match(CSharpParser.EVENT)
                self.state = 2162
                self.type_()
                self.state = 2163
                self.identifier()
                self.state = 2164
                self.match(CSharpParser.SEMICOLON)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Interface_accessorsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GET(self):
            return self.getToken(CSharpParser.GET, 0)

        def SEMICOLON(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.SEMICOLON)
            else:
                return self.getToken(CSharpParser.SEMICOLON, i)

        def SET(self):
            return self.getToken(CSharpParser.SET, 0)

        def attributes(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.AttributesContext)
            else:
                return self.getTypedRuleContext(CSharpParser.AttributesContext,i)


        def getRuleIndex(self):
            return CSharpParser.RULE_interface_accessors

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterface_accessors" ):
                listener.enterInterface_accessors(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterface_accessors" ):
                listener.exitInterface_accessors(self)




    def interface_accessors(self):

        localctx = CSharpParser.Interface_accessorsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 340, self.RULE_interface_accessors)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2169
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==127:
                self.state = 2168
                self.attributes()


            self.state = 2189
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [49]:
                self.state = 2171
                self.match(CSharpParser.GET)
                self.state = 2172
                self.match(CSharpParser.SEMICOLON)
                self.state = 2178
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==86 or _la==127:
                    self.state = 2174
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==127:
                        self.state = 2173
                        self.attributes()


                    self.state = 2176
                    self.match(CSharpParser.SET)
                    self.state = 2177
                    self.match(CSharpParser.SEMICOLON)


                pass
            elif token in [86]:
                self.state = 2180
                self.match(CSharpParser.SET)
                self.state = 2181
                self.match(CSharpParser.SEMICOLON)
                self.state = 2187
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==49 or _la==127:
                    self.state = 2183
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==127:
                        self.state = 2182
                        self.attributes()


                    self.state = 2185
                    self.match(CSharpParser.GET)
                    self.state = 2186
                    self.match(CSharpParser.SEMICOLON)


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Enum_baseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COLON(self):
            return self.getToken(CSharpParser.COLON, 0)

        def type_(self):
            return self.getTypedRuleContext(CSharpParser.Type_Context,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_enum_base

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnum_base" ):
                listener.enterEnum_base(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnum_base" ):
                listener.exitEnum_base(self)




    def enum_base(self):

        localctx = CSharpParser.Enum_baseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 342, self.RULE_enum_base)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2191
            self.match(CSharpParser.COLON)
            self.state = 2192
            self.type_()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Enum_bodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_BRACE(self):
            return self.getToken(CSharpParser.OPEN_BRACE, 0)

        def CLOSE_BRACE(self):
            return self.getToken(CSharpParser.CLOSE_BRACE, 0)

        def enum_member_declaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Enum_member_declarationContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Enum_member_declarationContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.COMMA)
            else:
                return self.getToken(CSharpParser.COMMA, i)

        def getRuleIndex(self):
            return CSharpParser.RULE_enum_body

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnum_body" ):
                listener.enterEnum_body(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnum_body" ):
                listener.exitEnum_body(self)




    def enum_body(self):

        localctx = CSharpParser.Enum_bodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 344, self.RULE_enum_body)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2194
            self.match(CSharpParser.OPEN_BRACE)
            self.state = 2206
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 3750091428249852928) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -9221467407831136095) != 0):
                self.state = 2195
                self.enum_member_declaration()
                self.state = 2200
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,269,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2196
                        self.match(CSharpParser.COMMA)
                        self.state = 2197
                        self.enum_member_declaration() 
                    self.state = 2202
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,269,self._ctx)

                self.state = 2204
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==132:
                    self.state = 2203
                    self.match(CSharpParser.COMMA)




            self.state = 2208
            self.match(CSharpParser.CLOSE_BRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Enum_member_declarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(CSharpParser.IdentifierContext,0)


        def attributes(self):
            return self.getTypedRuleContext(CSharpParser.AttributesContext,0)


        def ASSIGNMENT(self):
            return self.getToken(CSharpParser.ASSIGNMENT, 0)

        def expression(self):
            return self.getTypedRuleContext(CSharpParser.ExpressionContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_enum_member_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnum_member_declaration" ):
                listener.enterEnum_member_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnum_member_declaration" ):
                listener.exitEnum_member_declaration(self)




    def enum_member_declaration(self):

        localctx = CSharpParser.Enum_member_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 346, self.RULE_enum_member_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2211
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==127:
                self.state = 2210
                self.attributes()


            self.state = 2213
            self.identifier()
            self.state = 2216
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==145:
                self.state = 2214
                self.match(CSharpParser.ASSIGNMENT)
                self.state = 2215
                self.expression()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Global_attribute_sectionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_BRACKET(self):
            return self.getToken(CSharpParser.OPEN_BRACKET, 0)

        def global_attribute_target(self):
            return self.getTypedRuleContext(CSharpParser.Global_attribute_targetContext,0)


        def COLON(self):
            return self.getToken(CSharpParser.COLON, 0)

        def attribute_list(self):
            return self.getTypedRuleContext(CSharpParser.Attribute_listContext,0)


        def CLOSE_BRACKET(self):
            return self.getToken(CSharpParser.CLOSE_BRACKET, 0)

        def COMMA(self):
            return self.getToken(CSharpParser.COMMA, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_global_attribute_section

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGlobal_attribute_section" ):
                listener.enterGlobal_attribute_section(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGlobal_attribute_section" ):
                listener.exitGlobal_attribute_section(self)




    def global_attribute_section(self):

        localctx = CSharpParser.Global_attribute_sectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 348, self.RULE_global_attribute_section)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2218
            self.match(CSharpParser.OPEN_BRACKET)
            self.state = 2219
            self.global_attribute_target()
            self.state = 2220
            self.match(CSharpParser.COLON)
            self.state = 2221
            self.attribute_list()
            self.state = 2223
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==132:
                self.state = 2222
                self.match(CSharpParser.COMMA)


            self.state = 2225
            self.match(CSharpParser.CLOSE_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Global_attribute_targetContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def keyword(self):
            return self.getTypedRuleContext(CSharpParser.KeywordContext,0)


        def identifier(self):
            return self.getTypedRuleContext(CSharpParser.IdentifierContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_global_attribute_target

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGlobal_attribute_target" ):
                listener.enterGlobal_attribute_target(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGlobal_attribute_target" ):
                listener.exitGlobal_attribute_target(self)




    def global_attribute_target(self):

        localctx = CSharpParser.Global_attribute_targetContext(self, self._ctx, self.state)
        self.enterRule(localctx, 350, self.RULE_global_attribute_target)
        try:
            self.state = 2229
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,275,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2227
                self.keyword()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2228
                self.identifier()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AttributesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def attribute_section(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Attribute_sectionContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Attribute_sectionContext,i)


        def getRuleIndex(self):
            return CSharpParser.RULE_attributes

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttributes" ):
                listener.enterAttributes(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttributes" ):
                listener.exitAttributes(self)




    def attributes(self):

        localctx = CSharpParser.AttributesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 352, self.RULE_attributes)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2232 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 2231
                self.attribute_section()
                self.state = 2234 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==127):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Attribute_sectionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_BRACKET(self):
            return self.getToken(CSharpParser.OPEN_BRACKET, 0)

        def attribute_list(self):
            return self.getTypedRuleContext(CSharpParser.Attribute_listContext,0)


        def CLOSE_BRACKET(self):
            return self.getToken(CSharpParser.CLOSE_BRACKET, 0)

        def attribute_target(self):
            return self.getTypedRuleContext(CSharpParser.Attribute_targetContext,0)


        def COLON(self):
            return self.getToken(CSharpParser.COLON, 0)

        def COMMA(self):
            return self.getToken(CSharpParser.COMMA, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_attribute_section

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttribute_section" ):
                listener.enterAttribute_section(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttribute_section" ):
                listener.exitAttribute_section(self)




    def attribute_section(self):

        localctx = CSharpParser.Attribute_sectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 354, self.RULE_attribute_section)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2236
            self.match(CSharpParser.OPEN_BRACKET)
            self.state = 2240
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,277,self._ctx)
            if la_ == 1:
                self.state = 2237
                self.attribute_target()
                self.state = 2238
                self.match(CSharpParser.COLON)


            self.state = 2242
            self.attribute_list()
            self.state = 2244
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==132:
                self.state = 2243
                self.match(CSharpParser.COMMA)


            self.state = 2246
            self.match(CSharpParser.CLOSE_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Attribute_targetContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def keyword(self):
            return self.getTypedRuleContext(CSharpParser.KeywordContext,0)


        def identifier(self):
            return self.getTypedRuleContext(CSharpParser.IdentifierContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_attribute_target

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttribute_target" ):
                listener.enterAttribute_target(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttribute_target" ):
                listener.exitAttribute_target(self)




    def attribute_target(self):

        localctx = CSharpParser.Attribute_targetContext(self, self._ctx, self.state)
        self.enterRule(localctx, 356, self.RULE_attribute_target)
        try:
            self.state = 2250
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,279,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2248
                self.keyword()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2249
                self.identifier()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Attribute_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def attribute(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.AttributeContext)
            else:
                return self.getTypedRuleContext(CSharpParser.AttributeContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.COMMA)
            else:
                return self.getToken(CSharpParser.COMMA, i)

        def getRuleIndex(self):
            return CSharpParser.RULE_attribute_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttribute_list" ):
                listener.enterAttribute_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttribute_list" ):
                listener.exitAttribute_list(self)




    def attribute_list(self):

        localctx = CSharpParser.Attribute_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 358, self.RULE_attribute_list)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2252
            self.attribute()
            self.state = 2257
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,280,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2253
                    self.match(CSharpParser.COMMA)
                    self.state = 2254
                    self.attribute() 
                self.state = 2259
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,280,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AttributeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def namespace_or_type_name(self):
            return self.getTypedRuleContext(CSharpParser.Namespace_or_type_nameContext,0)


        def OPEN_PARENS(self):
            return self.getToken(CSharpParser.OPEN_PARENS, 0)

        def CLOSE_PARENS(self):
            return self.getToken(CSharpParser.CLOSE_PARENS, 0)

        def attribute_argument(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Attribute_argumentContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Attribute_argumentContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.COMMA)
            else:
                return self.getToken(CSharpParser.COMMA, i)

        def getRuleIndex(self):
            return CSharpParser.RULE_attribute

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttribute" ):
                listener.enterAttribute(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttribute" ):
                listener.exitAttribute(self)




    def attribute(self):

        localctx = CSharpParser.AttributeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 360, self.RULE_attribute)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2260
            self.namespace_or_type_name()
            self.state = 2273
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==129:
                self.state = 2261
                self.match(CSharpParser.OPEN_PARENS)
                self.state = 2270
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -5437212208176571392) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 2305497201161996477) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & 4398059153857) != 0):
                    self.state = 2262
                    self.attribute_argument()
                    self.state = 2267
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==132:
                        self.state = 2263
                        self.match(CSharpParser.COMMA)
                        self.state = 2264
                        self.attribute_argument()
                        self.state = 2269
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 2272
                self.match(CSharpParser.CLOSE_PARENS)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Attribute_argumentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(CSharpParser.ExpressionContext,0)


        def identifier(self):
            return self.getTypedRuleContext(CSharpParser.IdentifierContext,0)


        def COLON(self):
            return self.getToken(CSharpParser.COLON, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_attribute_argument

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttribute_argument" ):
                listener.enterAttribute_argument(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttribute_argument" ):
                listener.exitAttribute_argument(self)




    def attribute_argument(self):

        localctx = CSharpParser.Attribute_argumentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 362, self.RULE_attribute_argument)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2278
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,284,self._ctx)
            if la_ == 1:
                self.state = 2275
                self.identifier()
                self.state = 2276
                self.match(CSharpParser.COLON)


            self.state = 2280
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pointer_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STAR(self):
            return self.getToken(CSharpParser.STAR, 0)

        def simple_type(self):
            return self.getTypedRuleContext(CSharpParser.Simple_typeContext,0)


        def class_type(self):
            return self.getTypedRuleContext(CSharpParser.Class_typeContext,0)


        def rank_specifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Rank_specifierContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Rank_specifierContext,i)


        def INTERR(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.INTERR)
            else:
                return self.getToken(CSharpParser.INTERR, i)

        def VOID(self):
            return self.getToken(CSharpParser.VOID, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_pointer_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPointer_type" ):
                listener.enterPointer_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPointer_type" ):
                listener.exitPointer_type(self)




    def pointer_type(self):

        localctx = CSharpParser.Pointer_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 364, self.RULE_pointer_type)
        self._la = 0 # Token type
        try:
            self.state = 2297
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [10, 11, 12, 14, 15, 16, 18, 20, 21, 24, 29, 32, 34, 35, 38, 45, 48, 49, 51, 55, 58, 60, 61, 63, 64, 68, 69, 71, 75, 81, 83, 85, 86, 87, 91, 99, 100, 102, 104, 106, 110, 111, 113, 114]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2284
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [18, 21, 24, 29, 34, 45, 55, 63, 83, 87, 99, 100, 104]:
                    self.state = 2282
                    self.simple_type()
                    pass
                elif token in [10, 11, 12, 14, 15, 16, 20, 32, 35, 38, 48, 49, 51, 58, 60, 61, 64, 68, 69, 71, 75, 81, 85, 86, 91, 102, 106, 110, 111, 113, 114]:
                    self.state = 2283
                    self.class_type()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 2290
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==127 or _la==148:
                    self.state = 2288
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [127]:
                        self.state = 2286
                        self.rank_specifier()
                        pass
                    elif token in [148]:
                        self.state = 2287
                        self.match(CSharpParser.INTERR)
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 2292
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2293
                self.match(CSharpParser.STAR)
                pass
            elif token in [108]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2295
                self.match(CSharpParser.VOID)
                self.state = 2296
                self.match(CSharpParser.STAR)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Fixed_pointer_declaratorsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fixed_pointer_declarator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Fixed_pointer_declaratorContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Fixed_pointer_declaratorContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.COMMA)
            else:
                return self.getToken(CSharpParser.COMMA, i)

        def getRuleIndex(self):
            return CSharpParser.RULE_fixed_pointer_declarators

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFixed_pointer_declarators" ):
                listener.enterFixed_pointer_declarators(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFixed_pointer_declarators" ):
                listener.exitFixed_pointer_declarators(self)




    def fixed_pointer_declarators(self):

        localctx = CSharpParser.Fixed_pointer_declaratorsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 366, self.RULE_fixed_pointer_declarators)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2299
            self.fixed_pointer_declarator()
            self.state = 2304
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==132:
                self.state = 2300
                self.match(CSharpParser.COMMA)
                self.state = 2301
                self.fixed_pointer_declarator()
                self.state = 2306
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Fixed_pointer_declaratorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(CSharpParser.IdentifierContext,0)


        def ASSIGNMENT(self):
            return self.getToken(CSharpParser.ASSIGNMENT, 0)

        def fixed_pointer_initializer(self):
            return self.getTypedRuleContext(CSharpParser.Fixed_pointer_initializerContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_fixed_pointer_declarator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFixed_pointer_declarator" ):
                listener.enterFixed_pointer_declarator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFixed_pointer_declarator" ):
                listener.exitFixed_pointer_declarator(self)




    def fixed_pointer_declarator(self):

        localctx = CSharpParser.Fixed_pointer_declaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 368, self.RULE_fixed_pointer_declarator)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2307
            self.identifier()
            self.state = 2308
            self.match(CSharpParser.ASSIGNMENT)
            self.state = 2309
            self.fixed_pointer_initializer()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Fixed_pointer_initializerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(CSharpParser.ExpressionContext,0)


        def AMP(self):
            return self.getToken(CSharpParser.AMP, 0)

        def stackalloc_initializer(self):
            return self.getTypedRuleContext(CSharpParser.Stackalloc_initializerContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_fixed_pointer_initializer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFixed_pointer_initializer" ):
                listener.enterFixed_pointer_initializer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFixed_pointer_initializer" ):
                listener.exitFixed_pointer_initializer(self)




    def fixed_pointer_initializer(self):

        localctx = CSharpParser.Fixed_pointer_initializerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 370, self.RULE_fixed_pointer_initializer)
        try:
            self.state = 2316
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [10, 11, 12, 14, 15, 16, 17, 18, 20, 21, 24, 25, 29, 30, 31, 32, 34, 35, 38, 42, 45, 48, 49, 51, 55, 58, 60, 61, 63, 64, 66, 67, 68, 69, 71, 75, 80, 81, 83, 85, 86, 87, 88, 91, 94, 96, 98, 99, 100, 101, 102, 104, 106, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 129, 135, 136, 137, 140, 142, 143, 144, 151, 152, 171]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2312
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,290,self._ctx)
                if la_ == 1:
                    self.state = 2311
                    self.match(CSharpParser.AMP)


                self.state = 2314
                self.expression()
                pass
            elif token in [89]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2315
                self.stackalloc_initializer()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Fixed_size_buffer_declaratorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(CSharpParser.IdentifierContext,0)


        def OPEN_BRACKET(self):
            return self.getToken(CSharpParser.OPEN_BRACKET, 0)

        def expression(self):
            return self.getTypedRuleContext(CSharpParser.ExpressionContext,0)


        def CLOSE_BRACKET(self):
            return self.getToken(CSharpParser.CLOSE_BRACKET, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_fixed_size_buffer_declarator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFixed_size_buffer_declarator" ):
                listener.enterFixed_size_buffer_declarator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFixed_size_buffer_declarator" ):
                listener.exitFixed_size_buffer_declarator(self)




    def fixed_size_buffer_declarator(self):

        localctx = CSharpParser.Fixed_size_buffer_declaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 372, self.RULE_fixed_size_buffer_declarator)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2318
            self.identifier()
            self.state = 2319
            self.match(CSharpParser.OPEN_BRACKET)
            self.state = 2320
            self.expression()
            self.state = 2321
            self.match(CSharpParser.CLOSE_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Stackalloc_initializerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STACKALLOC(self):
            return self.getToken(CSharpParser.STACKALLOC, 0)

        def type_(self):
            return self.getTypedRuleContext(CSharpParser.Type_Context,0)


        def OPEN_BRACKET(self):
            return self.getToken(CSharpParser.OPEN_BRACKET, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(CSharpParser.ExpressionContext,i)


        def CLOSE_BRACKET(self):
            return self.getToken(CSharpParser.CLOSE_BRACKET, 0)

        def OPEN_BRACE(self):
            return self.getToken(CSharpParser.OPEN_BRACE, 0)

        def CLOSE_BRACE(self):
            return self.getToken(CSharpParser.CLOSE_BRACE, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.COMMA)
            else:
                return self.getToken(CSharpParser.COMMA, i)

        def getRuleIndex(self):
            return CSharpParser.RULE_stackalloc_initializer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStackalloc_initializer" ):
                listener.enterStackalloc_initializer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStackalloc_initializer" ):
                listener.exitStackalloc_initializer(self)




    def stackalloc_initializer(self):

        localctx = CSharpParser.Stackalloc_initializerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 374, self.RULE_stackalloc_initializer)
        self._la = 0 # Token type
        try:
            self.state = 2352
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,296,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2323
                self.match(CSharpParser.STACKALLOC)
                self.state = 2324
                self.type_()
                self.state = 2325
                self.match(CSharpParser.OPEN_BRACKET)
                self.state = 2326
                self.expression()
                self.state = 2327
                self.match(CSharpParser.CLOSE_BRACKET)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2329
                self.match(CSharpParser.STACKALLOC)
                self.state = 2331
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 10)) & ~0x3f) == 0 and ((1 << (_la - 10)) & 3201253152842599799) != 0) or ((((_la - 75)) & ~0x3f) == 0 and ((1 << (_la - 75)) & 18015337681329473) != 0):
                    self.state = 2330
                    self.type_()


                self.state = 2333
                self.match(CSharpParser.OPEN_BRACKET)
                self.state = 2335
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -5437212208176571392) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 2305497201161996477) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & 4398059153857) != 0):
                    self.state = 2334
                    self.expression()


                self.state = 2337
                self.match(CSharpParser.CLOSE_BRACKET)
                self.state = 2338
                self.match(CSharpParser.OPEN_BRACE)
                self.state = 2339
                self.expression()
                self.state = 2344
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,294,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2340
                        self.match(CSharpParser.COMMA)
                        self.state = 2341
                        self.expression() 
                    self.state = 2346
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,294,self._ctx)

                self.state = 2348
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==132:
                    self.state = 2347
                    self.match(CSharpParser.COMMA)


                self.state = 2350
                self.match(CSharpParser.CLOSE_BRACE)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Right_arrowContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.first = None # Token
            self.second = None # Token

        def ASSIGNMENT(self):
            return self.getToken(CSharpParser.ASSIGNMENT, 0)

        def GT(self):
            return self.getToken(CSharpParser.GT, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_right_arrow

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRight_arrow" ):
                listener.enterRight_arrow(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRight_arrow" ):
                listener.exitRight_arrow(self)




    def right_arrow(self):

        localctx = CSharpParser.Right_arrowContext(self, self._ctx, self.state)
        self.enterRule(localctx, 376, self.RULE_right_arrow)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2354
            localctx.first = self.match(CSharpParser.ASSIGNMENT)
            self.state = 2355
            localctx.second = self.match(CSharpParser.GT)
            self.state = 2356
            if not (0 if localctx.first is None else localctx.first.tokenIndex) + 1 == (0 if localctx.second is None else localctx.second.tokenIndex):
                from antlr4.error.Errors import FailedPredicateException
                raise FailedPredicateException(self, "$first.index + 1 == $second.index")
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Right_shiftContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.first = None # Token
            self.second = None # Token

        def GT(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.GT)
            else:
                return self.getToken(CSharpParser.GT, i)

        def getRuleIndex(self):
            return CSharpParser.RULE_right_shift

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRight_shift" ):
                listener.enterRight_shift(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRight_shift" ):
                listener.exitRight_shift(self)




    def right_shift(self):

        localctx = CSharpParser.Right_shiftContext(self, self._ctx, self.state)
        self.enterRule(localctx, 378, self.RULE_right_shift)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2358
            localctx.first = self.match(CSharpParser.GT)
            self.state = 2359
            localctx.second = self.match(CSharpParser.GT)
            self.state = 2360
            if not (0 if localctx.first is None else localctx.first.tokenIndex) + 1 == (0 if localctx.second is None else localctx.second.tokenIndex):
                from antlr4.error.Errors import FailedPredicateException
                raise FailedPredicateException(self, "$first.index + 1 == $second.index")
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Right_shift_assignmentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.first = None # Token
            self.second = None # Token

        def GT(self):
            return self.getToken(CSharpParser.GT, 0)

        def OP_GE(self):
            return self.getToken(CSharpParser.OP_GE, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_right_shift_assignment

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRight_shift_assignment" ):
                listener.enterRight_shift_assignment(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRight_shift_assignment" ):
                listener.exitRight_shift_assignment(self)




    def right_shift_assignment(self):

        localctx = CSharpParser.Right_shift_assignmentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 380, self.RULE_right_shift_assignment)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2362
            localctx.first = self.match(CSharpParser.GT)
            self.state = 2363
            localctx.second = self.match(CSharpParser.OP_GE)
            self.state = 2364
            if not (0 if localctx.first is None else localctx.first.tokenIndex) + 1 == (0 if localctx.second is None else localctx.second.tokenIndex):
                from antlr4.error.Errors import FailedPredicateException
                raise FailedPredicateException(self, "$first.index + 1 == $second.index")
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def boolean_literal(self):
            return self.getTypedRuleContext(CSharpParser.Boolean_literalContext,0)


        def string_literal(self):
            return self.getTypedRuleContext(CSharpParser.String_literalContext,0)


        def INTEGER_LITERAL(self):
            return self.getToken(CSharpParser.INTEGER_LITERAL, 0)

        def HEX_INTEGER_LITERAL(self):
            return self.getToken(CSharpParser.HEX_INTEGER_LITERAL, 0)

        def BIN_INTEGER_LITERAL(self):
            return self.getToken(CSharpParser.BIN_INTEGER_LITERAL, 0)

        def REAL_LITERAL(self):
            return self.getToken(CSharpParser.REAL_LITERAL, 0)

        def CHARACTER_LITERAL(self):
            return self.getToken(CSharpParser.CHARACTER_LITERAL, 0)

        def NULL_(self):
            return self.getToken(CSharpParser.NULL_, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLiteral" ):
                listener.enterLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLiteral" ):
                listener.exitLiteral(self)




    def literal(self):

        localctx = CSharpParser.LiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 382, self.RULE_literal)
        try:
            self.state = 2374
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [42, 96]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2366
                self.boolean_literal()
                pass
            elif token in [121, 122, 123, 124]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2367
                self.string_literal()
                pass
            elif token in [116]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2368
                self.match(CSharpParser.INTEGER_LITERAL)
                pass
            elif token in [117]:
                self.enterOuterAlt(localctx, 4)
                self.state = 2369
                self.match(CSharpParser.HEX_INTEGER_LITERAL)
                pass
            elif token in [118]:
                self.enterOuterAlt(localctx, 5)
                self.state = 2370
                self.match(CSharpParser.BIN_INTEGER_LITERAL)
                pass
            elif token in [119]:
                self.enterOuterAlt(localctx, 6)
                self.state = 2371
                self.match(CSharpParser.REAL_LITERAL)
                pass
            elif token in [120]:
                self.enterOuterAlt(localctx, 7)
                self.state = 2372
                self.match(CSharpParser.CHARACTER_LITERAL)
                pass
            elif token in [67]:
                self.enterOuterAlt(localctx, 8)
                self.state = 2373
                self.match(CSharpParser.NULL_)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Boolean_literalContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TRUE(self):
            return self.getToken(CSharpParser.TRUE, 0)

        def FALSE(self):
            return self.getToken(CSharpParser.FALSE, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_boolean_literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBoolean_literal" ):
                listener.enterBoolean_literal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBoolean_literal" ):
                listener.exitBoolean_literal(self)




    def boolean_literal(self):

        localctx = CSharpParser.Boolean_literalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 384, self.RULE_boolean_literal)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2376
            _la = self._input.LA(1)
            if not(_la==42 or _la==96):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class String_literalContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def interpolated_regular_string(self):
            return self.getTypedRuleContext(CSharpParser.Interpolated_regular_stringContext,0)


        def interpolated_verbatium_string(self):
            return self.getTypedRuleContext(CSharpParser.Interpolated_verbatium_stringContext,0)


        def REGULAR_STRING(self):
            return self.getToken(CSharpParser.REGULAR_STRING, 0)

        def VERBATIUM_STRING(self):
            return self.getToken(CSharpParser.VERBATIUM_STRING, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_string_literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterString_literal" ):
                listener.enterString_literal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitString_literal" ):
                listener.exitString_literal(self)




    def string_literal(self):

        localctx = CSharpParser.String_literalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 386, self.RULE_string_literal)
        try:
            self.state = 2382
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [123]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2378
                self.interpolated_regular_string()
                pass
            elif token in [124]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2379
                self.interpolated_verbatium_string()
                pass
            elif token in [121]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2380
                self.match(CSharpParser.REGULAR_STRING)
                pass
            elif token in [122]:
                self.enterOuterAlt(localctx, 4)
                self.state = 2381
                self.match(CSharpParser.VERBATIUM_STRING)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Interpolated_regular_stringContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INTERPOLATED_REGULAR_STRING_START(self):
            return self.getToken(CSharpParser.INTERPOLATED_REGULAR_STRING_START, 0)

        def DOUBLE_QUOTE_INSIDE(self):
            return self.getToken(CSharpParser.DOUBLE_QUOTE_INSIDE, 0)

        def interpolated_regular_string_part(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Interpolated_regular_string_partContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Interpolated_regular_string_partContext,i)


        def getRuleIndex(self):
            return CSharpParser.RULE_interpolated_regular_string

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterpolated_regular_string" ):
                listener.enterInterpolated_regular_string(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterpolated_regular_string" ):
                listener.exitInterpolated_regular_string(self)




    def interpolated_regular_string(self):

        localctx = CSharpParser.Interpolated_regular_stringContext(self, self._ctx, self.state)
        self.enterRule(localctx, 388, self.RULE_interpolated_regular_string)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2384
            self.match(CSharpParser.INTERPOLATED_REGULAR_STRING_START)
            self.state = 2388
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,299,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2385
                    self.interpolated_regular_string_part() 
                self.state = 2390
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,299,self._ctx)

            self.state = 2391
            self.match(CSharpParser.DOUBLE_QUOTE_INSIDE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Interpolated_verbatium_stringContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INTERPOLATED_VERBATIUM_STRING_START(self):
            return self.getToken(CSharpParser.INTERPOLATED_VERBATIUM_STRING_START, 0)

        def DOUBLE_QUOTE_INSIDE(self):
            return self.getToken(CSharpParser.DOUBLE_QUOTE_INSIDE, 0)

        def interpolated_verbatium_string_part(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Interpolated_verbatium_string_partContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Interpolated_verbatium_string_partContext,i)


        def getRuleIndex(self):
            return CSharpParser.RULE_interpolated_verbatium_string

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterpolated_verbatium_string" ):
                listener.enterInterpolated_verbatium_string(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterpolated_verbatium_string" ):
                listener.exitInterpolated_verbatium_string(self)




    def interpolated_verbatium_string(self):

        localctx = CSharpParser.Interpolated_verbatium_stringContext(self, self._ctx, self.state)
        self.enterRule(localctx, 390, self.RULE_interpolated_verbatium_string)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2393
            self.match(CSharpParser.INTERPOLATED_VERBATIUM_STRING_START)
            self.state = 2397
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 125)) & ~0x3f) == 0 and ((1 << (_la - 125)) & 10273836649938945) != 0):
                self.state = 2394
                self.interpolated_verbatium_string_part()
                self.state = 2399
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2400
            self.match(CSharpParser.DOUBLE_QUOTE_INSIDE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Interpolated_regular_string_partContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def interpolated_string_expression(self):
            return self.getTypedRuleContext(CSharpParser.Interpolated_string_expressionContext,0)


        def DOUBLE_CURLY_INSIDE(self):
            return self.getToken(CSharpParser.DOUBLE_CURLY_INSIDE, 0)

        def REGULAR_CHAR_INSIDE(self):
            return self.getToken(CSharpParser.REGULAR_CHAR_INSIDE, 0)

        def REGULAR_STRING_INSIDE(self):
            return self.getToken(CSharpParser.REGULAR_STRING_INSIDE, 0)

        def OPEN_BRACE_INSIDE(self):
            return self.getToken(CSharpParser.OPEN_BRACE_INSIDE, 0)

        def CLOSE_BRACE_INSIDE(self):
            return self.getToken(CSharpParser.CLOSE_BRACE_INSIDE, 0)

        def DOUBLE_QUOTE_INSIDE(self):
            return self.getToken(CSharpParser.DOUBLE_QUOTE_INSIDE, 0)

        def VERBATIUM_INSIDE_STRING(self):
            return self.getToken(CSharpParser.VERBATIUM_INSIDE_STRING, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_interpolated_regular_string_part

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterpolated_regular_string_part" ):
                listener.enterInterpolated_regular_string_part(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterpolated_regular_string_part" ):
                listener.exitInterpolated_regular_string_part(self)




    def interpolated_regular_string_part(self):

        localctx = CSharpParser.Interpolated_regular_string_partContext(self, self._ctx, self.state)
        self.enterRule(localctx, 392, self.RULE_interpolated_regular_string_part)
        try:
            self.state = 2410
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [125]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2402
                self.interpolated_string_expression()
                pass
            elif token in [172]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2403
                self.match(CSharpParser.DOUBLE_CURLY_INSIDE)
                pass
            elif token in [174]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2404
                self.match(CSharpParser.REGULAR_CHAR_INSIDE)
                pass
            elif token in [177]:
                self.enterOuterAlt(localctx, 4)
                self.state = 2405
                self.match(CSharpParser.REGULAR_STRING_INSIDE)
                pass
            elif token in [173]:
                self.enterOuterAlt(localctx, 5)
                self.state = 2406
                self.match(CSharpParser.OPEN_BRACE_INSIDE)
                pass
            elif token in [179]:
                self.enterOuterAlt(localctx, 6)
                self.state = 2407
                self.match(CSharpParser.CLOSE_BRACE_INSIDE)
                pass
            elif token in [176]:
                self.enterOuterAlt(localctx, 7)
                self.state = 2408
                self.match(CSharpParser.DOUBLE_QUOTE_INSIDE)
                pass
            elif token in [178]:
                self.enterOuterAlt(localctx, 8)
                self.state = 2409
                self.match(CSharpParser.VERBATIUM_INSIDE_STRING)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Interpolated_verbatium_string_partContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def interpolated_string_expression(self):
            return self.getTypedRuleContext(CSharpParser.Interpolated_string_expressionContext,0)


        def DOUBLE_CURLY_INSIDE(self):
            return self.getToken(CSharpParser.DOUBLE_CURLY_INSIDE, 0)

        def VERBATIUM_DOUBLE_QUOTE_INSIDE(self):
            return self.getToken(CSharpParser.VERBATIUM_DOUBLE_QUOTE_INSIDE, 0)

        def VERBATIUM_INSIDE_STRING(self):
            return self.getToken(CSharpParser.VERBATIUM_INSIDE_STRING, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_interpolated_verbatium_string_part

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterpolated_verbatium_string_part" ):
                listener.enterInterpolated_verbatium_string_part(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterpolated_verbatium_string_part" ):
                listener.exitInterpolated_verbatium_string_part(self)




    def interpolated_verbatium_string_part(self):

        localctx = CSharpParser.Interpolated_verbatium_string_partContext(self, self._ctx, self.state)
        self.enterRule(localctx, 394, self.RULE_interpolated_verbatium_string_part)
        try:
            self.state = 2416
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [125]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2412
                self.interpolated_string_expression()
                pass
            elif token in [172]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2413
                self.match(CSharpParser.DOUBLE_CURLY_INSIDE)
                pass
            elif token in [175]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2414
                self.match(CSharpParser.VERBATIUM_DOUBLE_QUOTE_INSIDE)
                pass
            elif token in [178]:
                self.enterOuterAlt(localctx, 4)
                self.state = 2415
                self.match(CSharpParser.VERBATIUM_INSIDE_STRING)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Interpolated_string_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_BRACE(self):
            return self.getToken(CSharpParser.OPEN_BRACE, 0)

        def expression(self):
            return self.getTypedRuleContext(CSharpParser.ExpressionContext,0)


        def CLOSE_BRACE(self):
            return self.getToken(CSharpParser.CLOSE_BRACE, 0)

        def COMMA(self):
            return self.getToken(CSharpParser.COMMA, 0)

        def interpolation_minimum_width(self):
            return self.getTypedRuleContext(CSharpParser.Interpolation_minimum_widthContext,0)


        def format_string(self):
            return self.getTypedRuleContext(CSharpParser.Format_stringContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_interpolated_string_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterpolated_string_expression" ):
                listener.enterInterpolated_string_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterpolated_string_expression" ):
                listener.exitInterpolated_string_expression(self)




    def interpolated_string_expression(self):

        localctx = CSharpParser.Interpolated_string_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 396, self.RULE_interpolated_string_expression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2418
            self.match(CSharpParser.OPEN_BRACE)
            self.state = 2419
            self.expression()
            self.state = 2422
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==132:
                self.state = 2420
                self.match(CSharpParser.COMMA)
                self.state = 2421
                self.interpolation_minimum_width()


            self.state = 2425
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==133:
                self.state = 2424
                self.format_string()


            self.state = 2427
            self.match(CSharpParser.CLOSE_BRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Interpolation_minimum_widthContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def constant_expression(self):
            return self.getTypedRuleContext(CSharpParser.Constant_expressionContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_interpolation_minimum_width

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterpolation_minimum_width" ):
                listener.enterInterpolation_minimum_width(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterpolation_minimum_width" ):
                listener.exitInterpolation_minimum_width(self)




    def interpolation_minimum_width(self):

        localctx = CSharpParser.Interpolation_minimum_widthContext(self, self._ctx, self.state)
        self.enterRule(localctx, 398, self.RULE_interpolation_minimum_width)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2429
            self.constant_expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Format_stringContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COLON(self):
            return self.getToken(CSharpParser.COLON, 0)

        def FORMAT_STRING(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.FORMAT_STRING)
            else:
                return self.getToken(CSharpParser.FORMAT_STRING, i)

        def getRuleIndex(self):
            return CSharpParser.RULE_format_string

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFormat_string" ):
                listener.enterFormat_string(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFormat_string" ):
                listener.exitFormat_string(self)




    def format_string(self):

        localctx = CSharpParser.Format_stringContext(self, self._ctx, self.state)
        self.enterRule(localctx, 400, self.RULE_format_string)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2431
            self.match(CSharpParser.COLON)
            self.state = 2433 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 2432
                self.match(CSharpParser.FORMAT_STRING)
                self.state = 2435 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==180):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Constant_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(CSharpParser.ExpressionContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_constant_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstant_expression" ):
                listener.enterConstant_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstant_expression" ):
                listener.exitConstant_expression(self)




    def constant_expression(self):

        localctx = CSharpParser.Constant_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 402, self.RULE_constant_expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2437
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class KeywordContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ABSTRACT(self):
            return self.getToken(CSharpParser.ABSTRACT, 0)

        def AS(self):
            return self.getToken(CSharpParser.AS, 0)

        def BASE(self):
            return self.getToken(CSharpParser.BASE, 0)

        def BOOL(self):
            return self.getToken(CSharpParser.BOOL, 0)

        def BREAK(self):
            return self.getToken(CSharpParser.BREAK, 0)

        def BYTE(self):
            return self.getToken(CSharpParser.BYTE, 0)

        def CASE(self):
            return self.getToken(CSharpParser.CASE, 0)

        def CATCH(self):
            return self.getToken(CSharpParser.CATCH, 0)

        def CHAR(self):
            return self.getToken(CSharpParser.CHAR, 0)

        def CHECKED(self):
            return self.getToken(CSharpParser.CHECKED, 0)

        def CLASS(self):
            return self.getToken(CSharpParser.CLASS, 0)

        def CONST(self):
            return self.getToken(CSharpParser.CONST, 0)

        def CONTINUE(self):
            return self.getToken(CSharpParser.CONTINUE, 0)

        def DECIMAL(self):
            return self.getToken(CSharpParser.DECIMAL, 0)

        def DEFAULT(self):
            return self.getToken(CSharpParser.DEFAULT, 0)

        def DELEGATE(self):
            return self.getToken(CSharpParser.DELEGATE, 0)

        def DO(self):
            return self.getToken(CSharpParser.DO, 0)

        def DOUBLE(self):
            return self.getToken(CSharpParser.DOUBLE, 0)

        def ELSE(self):
            return self.getToken(CSharpParser.ELSE, 0)

        def ENUM(self):
            return self.getToken(CSharpParser.ENUM, 0)

        def EVENT(self):
            return self.getToken(CSharpParser.EVENT, 0)

        def EXPLICIT(self):
            return self.getToken(CSharpParser.EXPLICIT, 0)

        def EXTERN(self):
            return self.getToken(CSharpParser.EXTERN, 0)

        def FALSE(self):
            return self.getToken(CSharpParser.FALSE, 0)

        def FINALLY(self):
            return self.getToken(CSharpParser.FINALLY, 0)

        def FIXED(self):
            return self.getToken(CSharpParser.FIXED, 0)

        def FLOAT(self):
            return self.getToken(CSharpParser.FLOAT, 0)

        def FOR(self):
            return self.getToken(CSharpParser.FOR, 0)

        def FOREACH(self):
            return self.getToken(CSharpParser.FOREACH, 0)

        def GOTO(self):
            return self.getToken(CSharpParser.GOTO, 0)

        def IF(self):
            return self.getToken(CSharpParser.IF, 0)

        def IMPLICIT(self):
            return self.getToken(CSharpParser.IMPLICIT, 0)

        def IN(self):
            return self.getToken(CSharpParser.IN, 0)

        def INT(self):
            return self.getToken(CSharpParser.INT, 0)

        def INTERFACE(self):
            return self.getToken(CSharpParser.INTERFACE, 0)

        def INTERNAL(self):
            return self.getToken(CSharpParser.INTERNAL, 0)

        def IS(self):
            return self.getToken(CSharpParser.IS, 0)

        def LOCK(self):
            return self.getToken(CSharpParser.LOCK, 0)

        def LONG(self):
            return self.getToken(CSharpParser.LONG, 0)

        def NAMESPACE(self):
            return self.getToken(CSharpParser.NAMESPACE, 0)

        def NEW(self):
            return self.getToken(CSharpParser.NEW, 0)

        def NULL_(self):
            return self.getToken(CSharpParser.NULL_, 0)

        def OBJECT(self):
            return self.getToken(CSharpParser.OBJECT, 0)

        def OPERATOR(self):
            return self.getToken(CSharpParser.OPERATOR, 0)

        def OUT(self):
            return self.getToken(CSharpParser.OUT, 0)

        def OVERRIDE(self):
            return self.getToken(CSharpParser.OVERRIDE, 0)

        def PARAMS(self):
            return self.getToken(CSharpParser.PARAMS, 0)

        def PRIVATE(self):
            return self.getToken(CSharpParser.PRIVATE, 0)

        def PROTECTED(self):
            return self.getToken(CSharpParser.PROTECTED, 0)

        def PUBLIC(self):
            return self.getToken(CSharpParser.PUBLIC, 0)

        def READONLY(self):
            return self.getToken(CSharpParser.READONLY, 0)

        def REF(self):
            return self.getToken(CSharpParser.REF, 0)

        def RETURN(self):
            return self.getToken(CSharpParser.RETURN, 0)

        def SBYTE(self):
            return self.getToken(CSharpParser.SBYTE, 0)

        def SEALED(self):
            return self.getToken(CSharpParser.SEALED, 0)

        def SHORT(self):
            return self.getToken(CSharpParser.SHORT, 0)

        def SIZEOF(self):
            return self.getToken(CSharpParser.SIZEOF, 0)

        def STACKALLOC(self):
            return self.getToken(CSharpParser.STACKALLOC, 0)

        def STATIC(self):
            return self.getToken(CSharpParser.STATIC, 0)

        def STRING(self):
            return self.getToken(CSharpParser.STRING, 0)

        def STRUCT(self):
            return self.getToken(CSharpParser.STRUCT, 0)

        def SWITCH(self):
            return self.getToken(CSharpParser.SWITCH, 0)

        def THIS(self):
            return self.getToken(CSharpParser.THIS, 0)

        def THROW(self):
            return self.getToken(CSharpParser.THROW, 0)

        def TRUE(self):
            return self.getToken(CSharpParser.TRUE, 0)

        def TRY(self):
            return self.getToken(CSharpParser.TRY, 0)

        def TYPEOF(self):
            return self.getToken(CSharpParser.TYPEOF, 0)

        def UINT(self):
            return self.getToken(CSharpParser.UINT, 0)

        def ULONG(self):
            return self.getToken(CSharpParser.ULONG, 0)

        def UNCHECKED(self):
            return self.getToken(CSharpParser.UNCHECKED, 0)

        def UNMANAGED(self):
            return self.getToken(CSharpParser.UNMANAGED, 0)

        def UNSAFE(self):
            return self.getToken(CSharpParser.UNSAFE, 0)

        def USHORT(self):
            return self.getToken(CSharpParser.USHORT, 0)

        def USING(self):
            return self.getToken(CSharpParser.USING, 0)

        def VIRTUAL(self):
            return self.getToken(CSharpParser.VIRTUAL, 0)

        def VOID(self):
            return self.getToken(CSharpParser.VOID, 0)

        def VOLATILE(self):
            return self.getToken(CSharpParser.VOLATILE, 0)

        def WHILE(self):
            return self.getToken(CSharpParser.WHILE, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_keyword

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterKeyword" ):
                listener.enterKeyword(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitKeyword" ):
                listener.exitKeyword(self)




    def keyword(self):

        localctx = CSharpParser.KeywordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 404, self.RULE_keyword)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2439
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & -3750091428249853440) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & 173722833976239) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Class_definitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CLASS(self):
            return self.getToken(CSharpParser.CLASS, 0)

        def identifier(self):
            return self.getTypedRuleContext(CSharpParser.IdentifierContext,0)


        def class_body(self):
            return self.getTypedRuleContext(CSharpParser.Class_bodyContext,0)


        def type_parameter_list(self):
            return self.getTypedRuleContext(CSharpParser.Type_parameter_listContext,0)


        def class_base(self):
            return self.getTypedRuleContext(CSharpParser.Class_baseContext,0)


        def type_parameter_constraints_clauses(self):
            return self.getTypedRuleContext(CSharpParser.Type_parameter_constraints_clausesContext,0)


        def SEMICOLON(self):
            return self.getToken(CSharpParser.SEMICOLON, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_class_definition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClass_definition" ):
                listener.enterClass_definition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClass_definition" ):
                listener.exitClass_definition(self)




    def class_definition(self):

        localctx = CSharpParser.Class_definitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 406, self.RULE_class_definition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2441
            self.match(CSharpParser.CLASS)
            self.state = 2442
            self.identifier()
            self.state = 2444
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==146:
                self.state = 2443
                self.type_parameter_list()


            self.state = 2447
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==133:
                self.state = 2446
                self.class_base()


            self.state = 2450
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==111:
                self.state = 2449
                self.type_parameter_constraints_clauses()


            self.state = 2452
            self.class_body()
            self.state = 2454
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==134:
                self.state = 2453
                self.match(CSharpParser.SEMICOLON)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Struct_definitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STRUCT(self):
            return self.getToken(CSharpParser.STRUCT, 0)

        def identifier(self):
            return self.getTypedRuleContext(CSharpParser.IdentifierContext,0)


        def struct_body(self):
            return self.getTypedRuleContext(CSharpParser.Struct_bodyContext,0)


        def type_parameter_list(self):
            return self.getTypedRuleContext(CSharpParser.Type_parameter_listContext,0)


        def struct_interfaces(self):
            return self.getTypedRuleContext(CSharpParser.Struct_interfacesContext,0)


        def type_parameter_constraints_clauses(self):
            return self.getTypedRuleContext(CSharpParser.Type_parameter_constraints_clausesContext,0)


        def SEMICOLON(self):
            return self.getToken(CSharpParser.SEMICOLON, 0)

        def READONLY(self):
            return self.getToken(CSharpParser.READONLY, 0)

        def REF(self):
            return self.getToken(CSharpParser.REF, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_struct_definition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStruct_definition" ):
                listener.enterStruct_definition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStruct_definition" ):
                listener.exitStruct_definition(self)




    def struct_definition(self):

        localctx = CSharpParser.Struct_definitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 408, self.RULE_struct_definition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2457
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==79 or _la==80:
                self.state = 2456
                _la = self._input.LA(1)
                if not(_la==79 or _la==80):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 2459
            self.match(CSharpParser.STRUCT)
            self.state = 2460
            self.identifier()
            self.state = 2462
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==146:
                self.state = 2461
                self.type_parameter_list()


            self.state = 2465
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==133:
                self.state = 2464
                self.struct_interfaces()


            self.state = 2468
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==111:
                self.state = 2467
                self.type_parameter_constraints_clauses()


            self.state = 2470
            self.struct_body()
            self.state = 2472
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==134:
                self.state = 2471
                self.match(CSharpParser.SEMICOLON)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Interface_definitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INTERFACE(self):
            return self.getToken(CSharpParser.INTERFACE, 0)

        def identifier(self):
            return self.getTypedRuleContext(CSharpParser.IdentifierContext,0)


        def class_body(self):
            return self.getTypedRuleContext(CSharpParser.Class_bodyContext,0)


        def variant_type_parameter_list(self):
            return self.getTypedRuleContext(CSharpParser.Variant_type_parameter_listContext,0)


        def interface_base(self):
            return self.getTypedRuleContext(CSharpParser.Interface_baseContext,0)


        def type_parameter_constraints_clauses(self):
            return self.getTypedRuleContext(CSharpParser.Type_parameter_constraints_clausesContext,0)


        def SEMICOLON(self):
            return self.getToken(CSharpParser.SEMICOLON, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_interface_definition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterface_definition" ):
                listener.enterInterface_definition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterface_definition" ):
                listener.exitInterface_definition(self)




    def interface_definition(self):

        localctx = CSharpParser.Interface_definitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 410, self.RULE_interface_definition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2474
            self.match(CSharpParser.INTERFACE)
            self.state = 2475
            self.identifier()
            self.state = 2477
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==146:
                self.state = 2476
                self.variant_type_parameter_list()


            self.state = 2480
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==133:
                self.state = 2479
                self.interface_base()


            self.state = 2483
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==111:
                self.state = 2482
                self.type_parameter_constraints_clauses()


            self.state = 2485
            self.class_body()
            self.state = 2487
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==134:
                self.state = 2486
                self.match(CSharpParser.SEMICOLON)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Enum_definitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ENUM(self):
            return self.getToken(CSharpParser.ENUM, 0)

        def identifier(self):
            return self.getTypedRuleContext(CSharpParser.IdentifierContext,0)


        def enum_body(self):
            return self.getTypedRuleContext(CSharpParser.Enum_bodyContext,0)


        def enum_base(self):
            return self.getTypedRuleContext(CSharpParser.Enum_baseContext,0)


        def SEMICOLON(self):
            return self.getToken(CSharpParser.SEMICOLON, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_enum_definition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnum_definition" ):
                listener.enterEnum_definition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnum_definition" ):
                listener.exitEnum_definition(self)




    def enum_definition(self):

        localctx = CSharpParser.Enum_definitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 412, self.RULE_enum_definition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2489
            self.match(CSharpParser.ENUM)
            self.state = 2490
            self.identifier()
            self.state = 2492
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==133:
                self.state = 2491
                self.enum_base()


            self.state = 2494
            self.enum_body()
            self.state = 2496
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==134:
                self.state = 2495
                self.match(CSharpParser.SEMICOLON)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Delegate_definitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DELEGATE(self):
            return self.getToken(CSharpParser.DELEGATE, 0)

        def return_type(self):
            return self.getTypedRuleContext(CSharpParser.Return_typeContext,0)


        def identifier(self):
            return self.getTypedRuleContext(CSharpParser.IdentifierContext,0)


        def OPEN_PARENS(self):
            return self.getToken(CSharpParser.OPEN_PARENS, 0)

        def CLOSE_PARENS(self):
            return self.getToken(CSharpParser.CLOSE_PARENS, 0)

        def SEMICOLON(self):
            return self.getToken(CSharpParser.SEMICOLON, 0)

        def variant_type_parameter_list(self):
            return self.getTypedRuleContext(CSharpParser.Variant_type_parameter_listContext,0)


        def formal_parameter_list(self):
            return self.getTypedRuleContext(CSharpParser.Formal_parameter_listContext,0)


        def type_parameter_constraints_clauses(self):
            return self.getTypedRuleContext(CSharpParser.Type_parameter_constraints_clausesContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_delegate_definition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDelegate_definition" ):
                listener.enterDelegate_definition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDelegate_definition" ):
                listener.exitDelegate_definition(self)




    def delegate_definition(self):

        localctx = CSharpParser.Delegate_definitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 414, self.RULE_delegate_definition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2498
            self.match(CSharpParser.DELEGATE)
            self.state = 2499
            self.return_type()
            self.state = 2500
            self.identifier()
            self.state = 2502
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==146:
                self.state = 2501
                self.variant_type_parameter_list()


            self.state = 2504
            self.match(CSharpParser.OPEN_PARENS)
            self.state = 2506
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 10)) & ~0x3f) == 0 and ((1 << (_la - 10)) & 7812956763456032119) != 0) or ((((_la - 74)) & ~0x3f) == 0 and ((1 << (_la - 74)) & 45037874618448579) != 0):
                self.state = 2505
                self.formal_parameter_list()


            self.state = 2508
            self.match(CSharpParser.CLOSE_PARENS)
            self.state = 2510
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==111:
                self.state = 2509
                self.type_parameter_constraints_clauses()


            self.state = 2512
            self.match(CSharpParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Event_declarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EVENT(self):
            return self.getToken(CSharpParser.EVENT, 0)

        def type_(self):
            return self.getTypedRuleContext(CSharpParser.Type_Context,0)


        def variable_declarators(self):
            return self.getTypedRuleContext(CSharpParser.Variable_declaratorsContext,0)


        def SEMICOLON(self):
            return self.getToken(CSharpParser.SEMICOLON, 0)

        def member_name(self):
            return self.getTypedRuleContext(CSharpParser.Member_nameContext,0)


        def OPEN_BRACE(self):
            return self.getToken(CSharpParser.OPEN_BRACE, 0)

        def event_accessor_declarations(self):
            return self.getTypedRuleContext(CSharpParser.Event_accessor_declarationsContext,0)


        def CLOSE_BRACE(self):
            return self.getToken(CSharpParser.CLOSE_BRACE, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_event_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEvent_declaration" ):
                listener.enterEvent_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEvent_declaration" ):
                listener.exitEvent_declaration(self)




    def event_declaration(self):

        localctx = CSharpParser.Event_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 416, self.RULE_event_declaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2514
            self.match(CSharpParser.EVENT)
            self.state = 2515
            self.type_()
            self.state = 2524
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,324,self._ctx)
            if la_ == 1:
                self.state = 2516
                self.variable_declarators()
                self.state = 2517
                self.match(CSharpParser.SEMICOLON)
                pass

            elif la_ == 2:
                self.state = 2519
                self.member_name()
                self.state = 2520
                self.match(CSharpParser.OPEN_BRACE)
                self.state = 2521
                self.event_accessor_declarations()
                self.state = 2522
                self.match(CSharpParser.CLOSE_BRACE)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Field_declarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def variable_declarators(self):
            return self.getTypedRuleContext(CSharpParser.Variable_declaratorsContext,0)


        def SEMICOLON(self):
            return self.getToken(CSharpParser.SEMICOLON, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_field_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterField_declaration" ):
                listener.enterField_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitField_declaration" ):
                listener.exitField_declaration(self)




    def field_declaration(self):

        localctx = CSharpParser.Field_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 418, self.RULE_field_declaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2526
            self.variable_declarators()
            self.state = 2527
            self.match(CSharpParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Property_declarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def member_name(self):
            return self.getTypedRuleContext(CSharpParser.Member_nameContext,0)


        def OPEN_BRACE(self):
            return self.getToken(CSharpParser.OPEN_BRACE, 0)

        def accessor_declarations(self):
            return self.getTypedRuleContext(CSharpParser.Accessor_declarationsContext,0)


        def CLOSE_BRACE(self):
            return self.getToken(CSharpParser.CLOSE_BRACE, 0)

        def right_arrow(self):
            return self.getTypedRuleContext(CSharpParser.Right_arrowContext,0)


        def throwable_expression(self):
            return self.getTypedRuleContext(CSharpParser.Throwable_expressionContext,0)


        def SEMICOLON(self):
            return self.getToken(CSharpParser.SEMICOLON, 0)

        def ASSIGNMENT(self):
            return self.getToken(CSharpParser.ASSIGNMENT, 0)

        def variable_initializer(self):
            return self.getTypedRuleContext(CSharpParser.Variable_initializerContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_property_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProperty_declaration" ):
                listener.enterProperty_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProperty_declaration" ):
                listener.exitProperty_declaration(self)




    def property_declaration(self):

        localctx = CSharpParser.Property_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 420, self.RULE_property_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2529
            self.member_name()
            self.state = 2543
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [125]:
                self.state = 2530
                self.match(CSharpParser.OPEN_BRACE)
                self.state = 2531
                self.accessor_declarations()
                self.state = 2532
                self.match(CSharpParser.CLOSE_BRACE)
                self.state = 2537
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==145:
                    self.state = 2533
                    self.match(CSharpParser.ASSIGNMENT)
                    self.state = 2534
                    self.variable_initializer()
                    self.state = 2535
                    self.match(CSharpParser.SEMICOLON)


                pass
            elif token in [145]:
                self.state = 2539
                self.right_arrow()
                self.state = 2540
                self.throwable_expression()
                self.state = 2541
                self.match(CSharpParser.SEMICOLON)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Constant_declarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CONST(self):
            return self.getToken(CSharpParser.CONST, 0)

        def type_(self):
            return self.getTypedRuleContext(CSharpParser.Type_Context,0)


        def constant_declarators(self):
            return self.getTypedRuleContext(CSharpParser.Constant_declaratorsContext,0)


        def SEMICOLON(self):
            return self.getToken(CSharpParser.SEMICOLON, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_constant_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstant_declaration" ):
                listener.enterConstant_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstant_declaration" ):
                listener.exitConstant_declaration(self)




    def constant_declaration(self):

        localctx = CSharpParser.Constant_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 422, self.RULE_constant_declaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2545
            self.match(CSharpParser.CONST)
            self.state = 2546
            self.type_()
            self.state = 2547
            self.constant_declarators()
            self.state = 2548
            self.match(CSharpParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Indexer_declarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def THIS(self):
            return self.getToken(CSharpParser.THIS, 0)

        def OPEN_BRACKET(self):
            return self.getToken(CSharpParser.OPEN_BRACKET, 0)

        def formal_parameter_list(self):
            return self.getTypedRuleContext(CSharpParser.Formal_parameter_listContext,0)


        def CLOSE_BRACKET(self):
            return self.getToken(CSharpParser.CLOSE_BRACKET, 0)

        def OPEN_BRACE(self):
            return self.getToken(CSharpParser.OPEN_BRACE, 0)

        def accessor_declarations(self):
            return self.getTypedRuleContext(CSharpParser.Accessor_declarationsContext,0)


        def CLOSE_BRACE(self):
            return self.getToken(CSharpParser.CLOSE_BRACE, 0)

        def right_arrow(self):
            return self.getTypedRuleContext(CSharpParser.Right_arrowContext,0)


        def throwable_expression(self):
            return self.getTypedRuleContext(CSharpParser.Throwable_expressionContext,0)


        def SEMICOLON(self):
            return self.getToken(CSharpParser.SEMICOLON, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_indexer_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndexer_declaration" ):
                listener.enterIndexer_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndexer_declaration" ):
                listener.exitIndexer_declaration(self)




    def indexer_declaration(self):

        localctx = CSharpParser.Indexer_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 424, self.RULE_indexer_declaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2550
            self.match(CSharpParser.THIS)
            self.state = 2551
            self.match(CSharpParser.OPEN_BRACKET)
            self.state = 2552
            self.formal_parameter_list()
            self.state = 2553
            self.match(CSharpParser.CLOSE_BRACKET)
            self.state = 2562
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [125]:
                self.state = 2554
                self.match(CSharpParser.OPEN_BRACE)
                self.state = 2555
                self.accessor_declarations()
                self.state = 2556
                self.match(CSharpParser.CLOSE_BRACE)
                pass
            elif token in [145]:
                self.state = 2558
                self.right_arrow()
                self.state = 2559
                self.throwable_expression()
                self.state = 2560
                self.match(CSharpParser.SEMICOLON)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Destructor_definitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TILDE(self):
            return self.getToken(CSharpParser.TILDE, 0)

        def identifier(self):
            return self.getTypedRuleContext(CSharpParser.IdentifierContext,0)


        def OPEN_PARENS(self):
            return self.getToken(CSharpParser.OPEN_PARENS, 0)

        def CLOSE_PARENS(self):
            return self.getToken(CSharpParser.CLOSE_PARENS, 0)

        def body(self):
            return self.getTypedRuleContext(CSharpParser.BodyContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_destructor_definition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDestructor_definition" ):
                listener.enterDestructor_definition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDestructor_definition" ):
                listener.exitDestructor_definition(self)




    def destructor_definition(self):

        localctx = CSharpParser.Destructor_definitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 426, self.RULE_destructor_definition)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2564
            self.match(CSharpParser.TILDE)
            self.state = 2565
            self.identifier()
            self.state = 2566
            self.match(CSharpParser.OPEN_PARENS)
            self.state = 2567
            self.match(CSharpParser.CLOSE_PARENS)
            self.state = 2568
            self.body()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Constructor_declarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(CSharpParser.IdentifierContext,0)


        def OPEN_PARENS(self):
            return self.getToken(CSharpParser.OPEN_PARENS, 0)

        def CLOSE_PARENS(self):
            return self.getToken(CSharpParser.CLOSE_PARENS, 0)

        def body(self):
            return self.getTypedRuleContext(CSharpParser.BodyContext,0)


        def formal_parameter_list(self):
            return self.getTypedRuleContext(CSharpParser.Formal_parameter_listContext,0)


        def constructor_initializer(self):
            return self.getTypedRuleContext(CSharpParser.Constructor_initializerContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_constructor_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstructor_declaration" ):
                listener.enterConstructor_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstructor_declaration" ):
                listener.exitConstructor_declaration(self)




    def constructor_declaration(self):

        localctx = CSharpParser.Constructor_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 428, self.RULE_constructor_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2570
            self.identifier()
            self.state = 2571
            self.match(CSharpParser.OPEN_PARENS)
            self.state = 2573
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 10)) & ~0x3f) == 0 and ((1 << (_la - 10)) & 7812956763456032119) != 0) or ((((_la - 74)) & ~0x3f) == 0 and ((1 << (_la - 74)) & 45037874618448579) != 0):
                self.state = 2572
                self.formal_parameter_list()


            self.state = 2575
            self.match(CSharpParser.CLOSE_PARENS)
            self.state = 2577
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==133:
                self.state = 2576
                self.constructor_initializer()


            self.state = 2579
            self.body()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Method_declarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def method_member_name(self):
            return self.getTypedRuleContext(CSharpParser.Method_member_nameContext,0)


        def OPEN_PARENS(self):
            return self.getToken(CSharpParser.OPEN_PARENS, 0)

        def CLOSE_PARENS(self):
            return self.getToken(CSharpParser.CLOSE_PARENS, 0)

        def method_body(self):
            return self.getTypedRuleContext(CSharpParser.Method_bodyContext,0)


        def right_arrow(self):
            return self.getTypedRuleContext(CSharpParser.Right_arrowContext,0)


        def throwable_expression(self):
            return self.getTypedRuleContext(CSharpParser.Throwable_expressionContext,0)


        def SEMICOLON(self):
            return self.getToken(CSharpParser.SEMICOLON, 0)

        def type_parameter_list(self):
            return self.getTypedRuleContext(CSharpParser.Type_parameter_listContext,0)


        def formal_parameter_list(self):
            return self.getTypedRuleContext(CSharpParser.Formal_parameter_listContext,0)


        def type_parameter_constraints_clauses(self):
            return self.getTypedRuleContext(CSharpParser.Type_parameter_constraints_clausesContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_method_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMethod_declaration" ):
                listener.enterMethod_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMethod_declaration" ):
                listener.exitMethod_declaration(self)




    def method_declaration(self):

        localctx = CSharpParser.Method_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 430, self.RULE_method_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2581
            self.method_member_name()
            self.state = 2583
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==146:
                self.state = 2582
                self.type_parameter_list()


            self.state = 2585
            self.match(CSharpParser.OPEN_PARENS)
            self.state = 2587
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 10)) & ~0x3f) == 0 and ((1 << (_la - 10)) & 7812956763456032119) != 0) or ((((_la - 74)) & ~0x3f) == 0 and ((1 << (_la - 74)) & 45037874618448579) != 0):
                self.state = 2586
                self.formal_parameter_list()


            self.state = 2589
            self.match(CSharpParser.CLOSE_PARENS)
            self.state = 2591
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==111:
                self.state = 2590
                self.type_parameter_constraints_clauses()


            self.state = 2598
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [125, 134]:
                self.state = 2593
                self.method_body()
                pass
            elif token in [145]:
                self.state = 2594
                self.right_arrow()
                self.state = 2595
                self.throwable_expression()
                self.state = 2596
                self.match(CSharpParser.SEMICOLON)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Method_member_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(CSharpParser.IdentifierContext,i)


        def DOUBLE_COLON(self):
            return self.getToken(CSharpParser.DOUBLE_COLON, 0)

        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.DOT)
            else:
                return self.getToken(CSharpParser.DOT, i)

        def type_argument_list(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Type_argument_listContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Type_argument_listContext,i)


        def getRuleIndex(self):
            return CSharpParser.RULE_method_member_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMethod_member_name" ):
                listener.enterMethod_member_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMethod_member_name" ):
                listener.exitMethod_member_name(self)




    def method_member_name(self):

        localctx = CSharpParser.Method_member_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 432, self.RULE_method_member_name)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2605
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,334,self._ctx)
            if la_ == 1:
                self.state = 2600
                self.identifier()
                pass

            elif la_ == 2:
                self.state = 2601
                self.identifier()
                self.state = 2602
                self.match(CSharpParser.DOUBLE_COLON)
                self.state = 2603
                self.identifier()
                pass


            self.state = 2614
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,336,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2608
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==146:
                        self.state = 2607
                        self.type_argument_list()


                    self.state = 2610
                    self.match(CSharpParser.DOT)
                    self.state = 2611
                    self.identifier() 
                self.state = 2616
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,336,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Operator_declarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPERATOR(self):
            return self.getToken(CSharpParser.OPERATOR, 0)

        def overloadable_operator(self):
            return self.getTypedRuleContext(CSharpParser.Overloadable_operatorContext,0)


        def OPEN_PARENS(self):
            return self.getToken(CSharpParser.OPEN_PARENS, 0)

        def arg_declaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Arg_declarationContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Arg_declarationContext,i)


        def CLOSE_PARENS(self):
            return self.getToken(CSharpParser.CLOSE_PARENS, 0)

        def body(self):
            return self.getTypedRuleContext(CSharpParser.BodyContext,0)


        def right_arrow(self):
            return self.getTypedRuleContext(CSharpParser.Right_arrowContext,0)


        def throwable_expression(self):
            return self.getTypedRuleContext(CSharpParser.Throwable_expressionContext,0)


        def SEMICOLON(self):
            return self.getToken(CSharpParser.SEMICOLON, 0)

        def IN(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.IN)
            else:
                return self.getToken(CSharpParser.IN, i)

        def COMMA(self):
            return self.getToken(CSharpParser.COMMA, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_operator_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOperator_declaration" ):
                listener.enterOperator_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOperator_declaration" ):
                listener.exitOperator_declaration(self)




    def operator_declaration(self):

        localctx = CSharpParser.Operator_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 434, self.RULE_operator_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2617
            self.match(CSharpParser.OPERATOR)
            self.state = 2618
            self.overloadable_operator()
            self.state = 2619
            self.match(CSharpParser.OPEN_PARENS)
            self.state = 2621
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==54:
                self.state = 2620
                self.match(CSharpParser.IN)


            self.state = 2623
            self.arg_declaration()
            self.state = 2629
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==132:
                self.state = 2624
                self.match(CSharpParser.COMMA)
                self.state = 2626
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==54:
                    self.state = 2625
                    self.match(CSharpParser.IN)


                self.state = 2628
                self.arg_declaration()


            self.state = 2631
            self.match(CSharpParser.CLOSE_PARENS)
            self.state = 2637
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [125, 134]:
                self.state = 2632
                self.body()
                pass
            elif token in [145]:
                self.state = 2633
                self.right_arrow()
                self.state = 2634
                self.throwable_expression()
                self.state = 2635
                self.match(CSharpParser.SEMICOLON)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Arg_declarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def type_(self):
            return self.getTypedRuleContext(CSharpParser.Type_Context,0)


        def identifier(self):
            return self.getTypedRuleContext(CSharpParser.IdentifierContext,0)


        def ASSIGNMENT(self):
            return self.getToken(CSharpParser.ASSIGNMENT, 0)

        def expression(self):
            return self.getTypedRuleContext(CSharpParser.ExpressionContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_arg_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArg_declaration" ):
                listener.enterArg_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArg_declaration" ):
                listener.exitArg_declaration(self)




    def arg_declaration(self):

        localctx = CSharpParser.Arg_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 436, self.RULE_arg_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2639
            self.type_()
            self.state = 2640
            self.identifier()
            self.state = 2643
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==145:
                self.state = 2641
                self.match(CSharpParser.ASSIGNMENT)
                self.state = 2642
                self.expression()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Method_invocationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PARENS(self):
            return self.getToken(CSharpParser.OPEN_PARENS, 0)

        def CLOSE_PARENS(self):
            return self.getToken(CSharpParser.CLOSE_PARENS, 0)

        def argument_list(self):
            return self.getTypedRuleContext(CSharpParser.Argument_listContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_method_invocation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMethod_invocation" ):
                listener.enterMethod_invocation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMethod_invocation" ):
                listener.exitMethod_invocation(self)




    def method_invocation(self):

        localctx = CSharpParser.Method_invocationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 438, self.RULE_method_invocation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2645
            self.match(CSharpParser.OPEN_PARENS)
            self.state = 2647
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & -5419197809667089408) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 2305514793348041149) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & 4398059153857) != 0):
                self.state = 2646
                self.argument_list()


            self.state = 2649
            self.match(CSharpParser.CLOSE_PARENS)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Object_creation_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PARENS(self):
            return self.getToken(CSharpParser.OPEN_PARENS, 0)

        def CLOSE_PARENS(self):
            return self.getToken(CSharpParser.CLOSE_PARENS, 0)

        def argument_list(self):
            return self.getTypedRuleContext(CSharpParser.Argument_listContext,0)


        def object_or_collection_initializer(self):
            return self.getTypedRuleContext(CSharpParser.Object_or_collection_initializerContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_object_creation_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterObject_creation_expression" ):
                listener.enterObject_creation_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitObject_creation_expression" ):
                listener.exitObject_creation_expression(self)




    def object_creation_expression(self):

        localctx = CSharpParser.Object_creation_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 440, self.RULE_object_creation_expression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2651
            self.match(CSharpParser.OPEN_PARENS)
            self.state = 2653
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & -5419197809667089408) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 2305514793348041149) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & 4398059153857) != 0):
                self.state = 2652
                self.argument_list()


            self.state = 2655
            self.match(CSharpParser.CLOSE_PARENS)
            self.state = 2657
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==125:
                self.state = 2656
                self.object_or_collection_initializer()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self):
            return self.getToken(CSharpParser.IDENTIFIER, 0)

        def ADD(self):
            return self.getToken(CSharpParser.ADD, 0)

        def ALIAS(self):
            return self.getToken(CSharpParser.ALIAS, 0)

        def ARGLIST(self):
            return self.getToken(CSharpParser.ARGLIST, 0)

        def ASCENDING(self):
            return self.getToken(CSharpParser.ASCENDING, 0)

        def ASYNC(self):
            return self.getToken(CSharpParser.ASYNC, 0)

        def AWAIT(self):
            return self.getToken(CSharpParser.AWAIT, 0)

        def BY(self):
            return self.getToken(CSharpParser.BY, 0)

        def DESCENDING(self):
            return self.getToken(CSharpParser.DESCENDING, 0)

        def DYNAMIC(self):
            return self.getToken(CSharpParser.DYNAMIC, 0)

        def EQUALS(self):
            return self.getToken(CSharpParser.EQUALS, 0)

        def FROM(self):
            return self.getToken(CSharpParser.FROM, 0)

        def GET(self):
            return self.getToken(CSharpParser.GET, 0)

        def GROUP(self):
            return self.getToken(CSharpParser.GROUP, 0)

        def INTO(self):
            return self.getToken(CSharpParser.INTO, 0)

        def JOIN(self):
            return self.getToken(CSharpParser.JOIN, 0)

        def LET(self):
            return self.getToken(CSharpParser.LET, 0)

        def NAMEOF(self):
            return self.getToken(CSharpParser.NAMEOF, 0)

        def ON(self):
            return self.getToken(CSharpParser.ON, 0)

        def ORDERBY(self):
            return self.getToken(CSharpParser.ORDERBY, 0)

        def PARTIAL(self):
            return self.getToken(CSharpParser.PARTIAL, 0)

        def REMOVE(self):
            return self.getToken(CSharpParser.REMOVE, 0)

        def SELECT(self):
            return self.getToken(CSharpParser.SELECT, 0)

        def SET(self):
            return self.getToken(CSharpParser.SET, 0)

        def UNMANAGED(self):
            return self.getToken(CSharpParser.UNMANAGED, 0)

        def VAR(self):
            return self.getToken(CSharpParser.VAR, 0)

        def WHEN(self):
            return self.getToken(CSharpParser.WHEN, 0)

        def WHERE(self):
            return self.getToken(CSharpParser.WHERE, 0)

        def YIELD(self):
            return self.getToken(CSharpParser.YIELD, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_identifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentifier" ):
                listener.enterIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentifier" ):
                listener.exitIdentifier(self)




    def identifier(self):

        localctx = CSharpParser.IdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 442, self.RULE_identifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2659
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 3750091428249852928) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 1904629023639713) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[188] = self.right_arrow_sempred
        self._predicates[189] = self.right_shift_sempred
        self._predicates[190] = self.right_shift_assignment_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def right_arrow_sempred(self, localctx:Right_arrowContext, predIndex:int):
            if predIndex == 0:
                return (0 if localctx.first is None else localctx.first.tokenIndex) + 1 == (0 if localctx.second is None else localctx.second.tokenIndex)
         

    def right_shift_sempred(self, localctx:Right_shiftContext, predIndex:int):
            if predIndex == 1:
                return (0 if localctx.first is None else localctx.first.tokenIndex) + 1 == (0 if localctx.second is None else localctx.second.tokenIndex)
         

    def right_shift_assignment_sempred(self, localctx:Right_shift_assignmentContext, predIndex:int):
            if predIndex == 2:
                return (0 if localctx.first is None else localctx.first.tokenIndex) + 1 == (0 if localctx.second is None else localctx.second.tokenIndex)
         





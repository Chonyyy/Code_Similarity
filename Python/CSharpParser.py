# Generated from CSharpParser.g4 by ANTLR 4.13.2
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO

if "." in __name__:
    from .CSharpParserBase import CSharpParserBase
else:
    from CSharpParserBase import CSharpParserBase

def serializedATN():
    return [
        4,1,209,3499,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,
        7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,
        13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
        20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,
        26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,
        33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,
        39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,
        46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,
        52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,2,
        59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,65,7,
        65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,2,71,7,71,2,
        72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,78,7,
        78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,2,
        85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,
        91,2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,
        98,7,98,2,99,7,99,2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,
        2,104,7,104,2,105,7,105,2,106,7,106,2,107,7,107,2,108,7,108,2,109,
        7,109,2,110,7,110,2,111,7,111,2,112,7,112,2,113,7,113,2,114,7,114,
        2,115,7,115,2,116,7,116,2,117,7,117,2,118,7,118,2,119,7,119,2,120,
        7,120,2,121,7,121,2,122,7,122,2,123,7,123,2,124,7,124,2,125,7,125,
        2,126,7,126,2,127,7,127,2,128,7,128,2,129,7,129,2,130,7,130,2,131,
        7,131,2,132,7,132,2,133,7,133,2,134,7,134,2,135,7,135,2,136,7,136,
        2,137,7,137,2,138,7,138,2,139,7,139,2,140,7,140,2,141,7,141,2,142,
        7,142,2,143,7,143,2,144,7,144,2,145,7,145,2,146,7,146,2,147,7,147,
        2,148,7,148,2,149,7,149,2,150,7,150,2,151,7,151,2,152,7,152,2,153,
        7,153,2,154,7,154,2,155,7,155,2,156,7,156,2,157,7,157,2,158,7,158,
        2,159,7,159,2,160,7,160,2,161,7,161,2,162,7,162,2,163,7,163,2,164,
        7,164,2,165,7,165,2,166,7,166,2,167,7,167,2,168,7,168,2,169,7,169,
        2,170,7,170,2,171,7,171,2,172,7,172,2,173,7,173,2,174,7,174,2,175,
        7,175,2,176,7,176,2,177,7,177,2,178,7,178,2,179,7,179,2,180,7,180,
        2,181,7,181,2,182,7,182,2,183,7,183,2,184,7,184,2,185,7,185,2,186,
        7,186,2,187,7,187,2,188,7,188,2,189,7,189,2,190,7,190,2,191,7,191,
        2,192,7,192,2,193,7,193,2,194,7,194,2,195,7,195,2,196,7,196,2,197,
        7,197,2,198,7,198,2,199,7,199,2,200,7,200,2,201,7,201,2,202,7,202,
        2,203,7,203,2,204,7,204,2,205,7,205,2,206,7,206,2,207,7,207,2,208,
        7,208,2,209,7,209,2,210,7,210,2,211,7,211,2,212,7,212,2,213,7,213,
        2,214,7,214,2,215,7,215,2,216,7,216,2,217,7,217,2,218,7,218,2,219,
        7,219,2,220,7,220,2,221,7,221,2,222,7,222,2,223,7,223,2,224,7,224,
        2,225,7,225,2,226,7,226,2,227,7,227,2,228,7,228,2,229,7,229,2,230,
        7,230,2,231,7,231,2,232,7,232,2,233,7,233,2,234,7,234,2,235,7,235,
        2,236,7,236,2,237,7,237,2,238,7,238,2,239,7,239,2,240,7,240,2,241,
        7,241,2,242,7,242,2,243,7,243,2,244,7,244,2,245,7,245,2,246,7,246,
        2,247,7,247,2,248,7,248,2,249,7,249,2,250,7,250,2,251,7,251,2,252,
        7,252,2,253,7,253,2,254,7,254,2,255,7,255,2,256,7,256,2,257,7,257,
        2,258,7,258,2,259,7,259,2,260,7,260,2,261,7,261,2,262,7,262,2,263,
        7,263,2,264,7,264,2,265,7,265,2,266,7,266,2,267,7,267,2,268,7,268,
        2,269,7,269,2,270,7,270,2,271,7,271,2,272,7,272,2,273,7,273,2,274,
        7,274,2,275,7,275,2,276,7,276,2,277,7,277,2,278,7,278,2,279,7,279,
        2,280,7,280,2,281,7,281,2,282,7,282,2,283,7,283,2,284,7,284,2,285,
        7,285,2,286,7,286,2,287,7,287,2,288,7,288,2,289,7,289,2,290,7,290,
        2,291,7,291,2,292,7,292,1,0,3,0,588,8,0,1,0,5,0,591,8,0,10,0,12,
        0,594,9,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,3,1,604,8,1,1,2,1,2,4,
        2,608,8,2,11,2,12,2,609,1,3,4,3,613,8,3,11,3,12,3,614,1,4,1,4,1,
        4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,3,
        4,635,8,4,1,5,1,5,3,5,639,8,5,1,5,3,5,642,8,5,1,5,1,5,1,5,3,5,647,
        8,5,5,5,649,8,5,10,5,12,5,652,9,5,1,6,1,6,1,6,1,6,5,6,658,8,6,10,
        6,12,6,661,9,6,1,6,1,6,3,6,665,8,6,1,6,3,6,668,8,6,1,6,1,6,1,6,1,
        6,1,6,3,6,675,8,6,1,6,3,6,678,8,6,1,6,3,6,681,8,6,1,6,1,6,1,6,1,
        6,1,6,1,6,3,6,689,8,6,1,7,1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,8,5,8,700,
        8,8,10,8,12,8,703,9,8,1,9,1,9,1,9,1,9,1,9,3,9,710,8,9,1,10,1,10,
        1,10,1,10,4,10,716,8,10,11,10,12,10,717,1,10,1,10,1,10,3,10,723,
        8,10,1,11,3,11,726,8,11,1,11,1,11,1,12,1,12,1,12,1,12,4,12,734,8,
        12,11,12,12,12,735,1,12,1,12,1,13,1,13,3,13,742,8,13,3,13,744,8,
        13,1,14,3,14,747,8,14,1,14,3,14,750,8,14,1,15,1,15,3,15,754,8,15,
        1,16,1,16,1,16,3,16,759,8,16,1,17,1,17,1,18,1,18,1,19,1,19,3,19,
        767,8,19,1,20,1,20,1,20,1,20,1,20,1,21,1,21,1,22,1,22,1,23,1,23,
        1,23,1,23,3,23,782,8,23,1,24,1,24,1,24,1,24,5,24,788,8,24,10,24,
        12,24,791,9,24,1,24,1,24,1,25,1,25,1,25,5,25,798,8,25,10,25,12,25,
        801,9,25,1,26,3,26,804,8,26,1,26,3,26,807,8,26,1,26,1,26,1,26,3,
        26,812,8,26,1,26,3,26,815,8,26,1,27,1,27,1,27,1,28,1,28,1,28,1,28,
        1,28,1,28,1,28,1,28,1,28,3,28,829,8,28,1,29,1,29,1,29,1,29,1,29,
        1,29,1,30,1,30,1,30,3,30,840,8,30,1,31,1,31,1,31,1,31,1,31,1,31,
        1,31,1,31,3,31,850,8,31,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,
        1,32,1,32,1,32,3,32,863,8,32,1,33,1,33,1,33,1,33,1,33,1,33,1,33,
        1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,3,33,880,8,33,1,34,1,34,
        1,34,1,34,3,34,886,8,34,3,34,888,8,34,1,35,1,35,1,35,5,35,893,8,
        35,10,35,12,35,896,9,35,1,36,1,36,1,36,5,36,901,8,36,10,36,12,36,
        904,9,36,1,37,1,37,1,37,5,37,909,8,37,10,37,12,37,912,9,37,1,38,
        1,38,1,38,5,38,917,8,38,10,38,12,38,920,9,38,1,39,1,39,1,39,5,39,
        925,8,39,10,39,12,39,928,9,39,1,40,1,40,1,40,5,40,933,8,40,10,40,
        12,40,936,9,40,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,5,41,
        947,8,41,10,41,12,41,950,9,41,1,42,1,42,1,42,3,42,955,8,42,1,42,
        5,42,958,8,42,10,42,12,42,961,9,42,1,43,1,43,3,43,965,8,43,1,43,
        1,43,1,43,3,43,970,8,43,5,43,972,8,43,10,43,12,43,975,9,43,1,44,
        1,44,3,44,979,8,44,1,44,1,44,1,44,3,44,984,8,44,5,44,986,8,44,10,
        44,12,44,989,9,44,1,45,1,45,1,45,1,45,1,45,3,45,996,8,45,3,45,998,
        8,45,1,45,3,45,1001,8,45,1,46,1,46,1,46,5,46,1006,8,46,10,46,12,
        46,1009,9,46,1,47,1,47,3,47,1013,8,47,1,47,1,47,1,47,1,48,1,48,3,
        48,1020,8,48,1,48,1,48,3,48,1024,8,48,1,48,1,48,3,48,1028,8,48,4,
        48,1030,8,48,11,48,12,48,1031,3,48,1034,8,48,1,49,1,49,1,49,1,49,
        1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,
        1,49,1,49,1,49,1,49,1,49,3,49,1058,8,49,1,50,1,50,1,50,1,50,1,50,
        1,51,1,51,3,51,1067,8,51,1,51,1,51,1,52,1,52,1,52,5,52,1074,8,52,
        10,52,12,52,1077,9,52,1,53,1,53,1,53,3,53,1082,8,53,1,54,1,54,3,
        54,1086,8,54,1,54,5,54,1089,8,54,10,54,12,54,1092,9,54,1,54,3,54,
        1095,8,54,1,54,1,54,1,54,3,54,1100,8,54,1,54,1,54,1,54,1,54,3,54,
        1106,8,54,1,54,3,54,1109,8,54,1,54,5,54,1112,8,54,10,54,12,54,1115,
        9,54,1,54,3,54,1118,8,54,5,54,1120,8,54,10,54,12,54,1123,9,54,1,
        54,1,54,1,54,1,54,3,54,1129,8,54,1,55,1,55,1,55,3,55,1134,8,55,1,
        55,1,55,1,55,1,55,1,55,1,55,1,55,1,55,1,55,1,55,1,55,1,55,3,55,1148,
        8,55,1,55,1,55,1,55,1,55,3,55,1154,8,55,1,55,1,55,1,55,1,55,1,55,
        1,55,1,55,1,55,5,55,1164,8,55,10,55,12,55,1167,9,55,1,55,3,55,1170,
        8,55,1,55,4,55,1173,8,55,11,55,12,55,1174,1,55,1,55,3,55,1179,8,
        55,1,55,1,55,1,55,1,55,3,55,1185,8,55,1,55,1,55,1,55,1,55,1,55,1,
        55,4,55,1193,8,55,11,55,12,55,1194,1,55,1,55,1,55,1,55,1,55,1,55,
        1,55,3,55,1204,8,55,1,55,1,55,1,55,1,55,1,55,1,55,1,55,1,55,1,55,
        1,55,1,55,1,55,1,55,1,55,1,55,1,55,3,55,1222,8,55,1,55,3,55,1225,
        8,55,1,55,1,55,1,55,3,55,1230,8,55,1,55,3,55,1233,8,55,1,55,1,55,
        1,55,1,55,1,55,1,55,1,55,1,55,1,55,1,55,1,55,5,55,1246,8,55,10,55,
        12,55,1249,9,55,1,55,1,55,1,55,3,55,1254,8,55,1,56,1,56,3,56,1258,
        8,56,1,57,1,57,1,57,1,58,3,58,1264,8,58,1,58,1,58,1,58,3,58,1269,
        8,58,1,59,3,59,1272,8,59,1,59,1,59,1,59,1,59,5,59,1278,8,59,10,59,
        12,59,1281,9,59,1,59,1,59,1,60,1,60,1,60,3,60,1288,8,60,1,60,1,60,
        1,61,1,61,1,62,1,62,1,62,5,62,1297,8,62,10,62,12,62,1300,9,62,1,
        63,1,63,3,63,1304,8,63,1,64,1,64,1,64,3,64,1309,8,64,3,64,1311,8,
        64,1,64,1,64,1,65,1,65,1,65,5,65,1318,8,65,10,65,12,65,1321,9,65,
        1,66,1,66,1,66,1,66,1,66,3,66,1328,8,66,1,66,1,66,1,66,1,67,1,67,
        1,67,3,67,1336,8,67,1,68,1,68,1,68,1,68,5,68,1342,8,68,10,68,12,
        68,1345,9,68,1,68,3,68,1348,8,68,1,68,1,68,1,69,1,69,1,69,1,69,1,
        69,1,69,3,69,1358,8,69,1,70,1,70,1,70,3,70,1363,8,70,3,70,1365,8,
        70,1,70,1,70,1,71,1,71,1,71,5,71,1372,8,71,10,71,12,71,1375,9,71,
        1,72,1,72,1,72,1,72,3,72,1381,8,72,1,72,1,72,1,72,1,72,1,72,3,72,
        1388,8,72,1,73,1,73,3,73,1392,8,73,1,73,1,73,1,73,3,73,1397,8,73,
        3,73,1399,8,73,1,73,1,73,1,73,3,73,1404,8,73,5,73,1406,8,73,10,73,
        12,73,1409,9,73,1,74,1,74,5,74,1413,8,74,10,74,12,74,1416,9,74,1,
        74,1,74,1,75,1,75,1,75,5,75,1423,8,75,10,75,12,75,1426,9,75,1,75,
        3,75,1429,8,75,1,75,3,75,1432,8,75,1,75,3,75,1435,8,75,1,76,1,76,
        1,76,1,76,5,76,1441,8,76,10,76,12,76,1444,9,76,1,76,1,76,1,77,1,
        77,1,77,1,77,1,78,3,78,1453,8,78,1,78,3,78,1456,8,78,1,78,3,78,1459,
        8,78,1,78,1,78,1,78,1,78,1,79,1,79,1,79,1,79,1,79,1,79,1,79,1,79,
        1,79,1,79,1,79,3,79,1476,8,79,1,80,1,80,1,80,5,80,1481,8,80,10,80,
        12,80,1484,9,80,1,81,3,81,1487,8,81,1,81,1,81,1,81,1,81,1,81,3,81,
        1494,8,81,1,81,3,81,1497,8,81,1,81,1,81,1,81,3,81,1502,8,81,1,82,
        1,82,1,82,5,82,1507,8,82,10,82,12,82,1510,9,82,1,83,1,83,3,83,1514,
        8,83,1,84,1,84,1,84,1,85,1,85,3,85,1521,8,85,1,85,1,85,1,85,1,85,
        1,86,5,86,1528,8,86,10,86,12,86,1531,9,86,1,86,1,86,3,86,1535,8,
        86,1,87,1,87,1,87,1,87,1,87,3,87,1542,8,87,1,88,1,88,1,88,1,88,1,
        88,1,89,1,89,1,89,1,90,1,90,3,90,1554,8,90,1,90,1,90,1,90,1,90,1,
        90,1,90,1,90,1,90,1,90,3,90,1565,8,90,1,91,1,91,1,91,1,91,5,91,1571,
        8,91,10,91,12,91,1574,9,91,1,92,1,92,3,92,1578,8,92,1,93,1,93,1,
        93,1,93,1,93,1,93,1,93,3,93,1587,8,93,1,94,1,94,1,94,1,94,1,95,1,
        95,1,95,1,95,1,95,3,95,1598,8,95,1,96,1,96,1,96,1,96,1,96,1,96,1,
        96,3,96,1607,8,96,1,97,1,97,1,97,1,98,3,98,1613,8,98,1,98,1,98,1,
        98,3,98,1618,8,98,1,98,1,98,3,98,1622,8,98,1,98,1,98,3,98,1626,8,
        98,1,99,1,99,3,99,1630,8,99,1,99,1,99,3,99,1634,8,99,1,99,1,99,3,
        99,1638,8,99,1,100,1,100,1,100,1,100,1,100,3,100,1645,8,100,1,101,
        1,101,1,101,1,101,1,102,1,102,1,102,1,102,1,102,1,102,1,102,1,102,
        1,102,1,102,1,102,1,102,5,102,1663,8,102,10,102,12,102,1666,9,102,
        1,102,1,102,1,102,1,102,1,102,1,102,1,102,1,102,1,102,1,102,1,102,
        1,102,1,102,1,102,1,102,1,102,1,102,1,102,1,102,3,102,1687,8,102,
        1,102,1,102,3,102,1691,8,102,1,102,1,102,3,102,1695,8,102,1,102,
        1,102,1,102,3,102,1700,8,102,1,102,1,102,1,102,1,102,1,102,3,102,
        1707,8,102,1,102,1,102,1,102,1,102,1,102,1,102,1,102,1,102,1,102,
        1,102,1,102,1,102,1,102,1,102,3,102,1723,8,102,1,102,1,102,1,102,
        3,102,1728,8,102,1,102,1,102,1,102,3,102,1733,8,102,1,102,1,102,
        1,102,1,102,1,102,1,102,1,102,1,102,1,102,3,102,1744,8,102,1,103,
        1,103,1,104,1,104,1,104,3,104,1751,8,104,1,104,1,104,1,104,1,104,
        1,104,1,104,1,104,3,104,1760,8,104,1,104,1,104,1,104,1,104,1,104,
        1,104,3,104,1768,8,104,1,105,1,105,1,105,1,106,1,106,1,106,1,107,
        1,107,1,107,1,107,1,107,1,107,1,108,1,108,3,108,1784,8,108,1,109,
        1,109,1,109,1,109,1,109,1,109,1,109,1,109,3,109,1794,8,109,1,109,
        1,109,3,109,1798,8,109,1,109,1,109,3,109,1802,8,109,1,110,1,110,
        1,110,1,110,1,111,1,111,1,111,5,111,1811,8,111,10,111,12,111,1814,
        9,111,1,111,3,111,1817,8,111,1,112,1,112,1,113,1,113,1,113,1,113,
        1,113,1,113,1,114,1,114,1,114,1,114,1,114,1,114,1,114,1,114,3,114,
        1835,8,114,1,115,1,115,1,115,1,115,1,115,1,115,1,115,1,116,1,116,
        1,116,1,117,1,117,1,117,1,117,1,117,1,117,1,117,3,117,1854,8,117,
        1,117,1,117,3,117,1858,8,117,1,118,1,118,3,118,1862,8,118,1,118,
        1,118,1,119,1,119,1,119,1,119,3,119,1870,8,119,1,119,1,119,1,119,
        1,119,5,119,1876,8,119,10,119,12,119,1879,9,119,1,119,1,119,1,119,
        1,119,1,119,1,119,1,119,1,119,1,119,1,119,1,119,3,119,1892,8,119,
        1,119,1,119,1,119,1,119,1,119,1,119,3,119,1900,8,119,1,119,1,119,
        1,119,1,119,1,119,3,119,1907,8,119,3,119,1909,8,119,1,120,1,120,
        1,120,1,120,1,120,1,121,1,121,1,121,1,121,1,121,1,121,1,121,1,121,
        1,121,1,121,1,121,1,122,1,122,3,122,1929,8,122,1,123,1,123,1,123,
        3,123,1934,8,123,1,123,3,123,1937,8,123,1,124,1,124,1,124,1,124,
        1,124,3,124,1944,8,124,1,125,1,125,1,125,1,125,1,126,4,126,1951,
        8,126,11,126,12,126,1952,1,126,1,126,1,127,1,127,1,127,3,127,1960,
        8,127,1,127,1,127,1,127,1,127,1,127,3,127,1967,8,127,1,127,1,127,
        1,127,1,127,3,127,1973,8,127,1,128,1,128,1,128,1,129,4,129,1979,
        8,129,11,129,12,129,1980,1,130,1,130,1,130,1,130,5,130,1987,8,130,
        10,130,12,130,1990,9,130,3,130,1992,8,130,1,131,1,131,1,131,5,131,
        1997,8,131,10,131,12,131,2000,9,131,1,132,1,132,5,132,2004,8,132,
        10,132,12,132,2007,9,132,1,132,3,132,2010,8,132,1,132,3,132,2013,
        8,132,1,133,1,133,1,133,1,133,3,133,2019,8,133,1,133,1,133,3,133,
        2023,8,133,1,133,1,133,1,134,1,134,3,134,2029,8,134,1,134,1,134,
        1,135,1,135,1,135,1,135,1,135,1,136,1,136,1,136,1,137,1,137,3,137,
        2043,8,137,1,138,1,138,1,138,1,138,3,138,2049,8,138,1,139,1,139,
        1,139,5,139,2054,8,139,10,139,12,139,2057,9,139,1,140,1,140,3,140,
        2061,8,140,1,140,3,140,2064,8,140,1,140,3,140,2067,8,140,1,140,1,
        140,3,140,2071,8,140,1,141,4,141,2074,8,141,11,141,12,141,2075,1,
        142,1,142,1,142,1,142,1,142,1,143,4,143,2084,8,143,11,143,12,143,
        2085,1,144,3,144,2089,8,144,1,144,1,144,1,144,1,144,1,144,3,144,
        2096,8,144,1,144,1,144,1,144,3,144,2101,8,144,1,144,1,144,1,144,
        1,144,1,144,3,144,2108,8,144,1,144,1,144,1,144,1,144,1,144,3,144,
        2115,8,144,1,145,4,145,2118,8,145,11,145,12,145,2119,1,146,1,146,
        1,146,1,146,3,146,2126,8,146,1,147,3,147,2129,8,147,1,147,3,147,
        2132,8,147,1,147,1,147,1,147,1,147,1,147,1,147,3,147,2140,8,147,
        1,148,1,148,3,148,2144,8,148,1,148,1,148,3,148,2148,8,148,1,148,
        3,148,2151,8,148,1,148,3,148,2154,8,148,1,148,1,148,3,148,2158,8,
        148,1,148,1,148,1,148,1,149,1,149,1,149,1,149,5,149,2167,8,149,10,
        149,12,149,2170,9,149,1,150,1,150,3,150,2174,8,150,1,150,1,150,3,
        150,2178,8,150,1,151,1,151,1,151,5,151,2183,8,151,10,151,12,151,
        2186,9,151,1,152,3,152,2189,8,152,1,152,1,152,1,152,1,153,1,153,
        1,153,1,153,3,153,2198,8,153,1,154,1,154,1,154,1,154,5,154,2204,
        8,154,10,154,12,154,2207,9,154,1,154,1,154,1,155,3,155,2212,8,155,
        1,155,1,155,1,156,1,156,1,156,1,156,5,156,2220,8,156,10,156,12,156,
        2223,9,156,1,157,1,157,1,157,5,157,2228,8,157,10,157,12,157,2231,
        9,157,1,158,4,158,2234,8,158,11,158,12,158,2235,1,159,1,159,1,159,
        1,159,1,159,1,160,1,160,1,160,1,160,3,160,2247,8,160,1,160,1,160,
        3,160,2251,8,160,3,160,2253,8,160,1,161,1,161,1,161,3,161,2258,8,
        161,1,161,1,161,3,161,2262,8,161,1,162,1,162,1,162,1,162,1,162,1,
        162,1,162,1,162,1,162,1,162,1,162,1,162,3,162,2276,8,162,1,163,1,
        163,1,163,1,163,5,163,2282,8,163,10,163,12,163,2285,9,163,1,163,
        1,163,1,164,1,164,1,164,1,164,1,164,1,164,1,164,1,164,1,164,3,164,
        2298,8,164,1,165,1,165,3,165,2302,8,165,1,165,3,165,2305,8,165,1,
        166,1,166,1,166,1,166,1,167,1,167,1,167,5,167,2314,8,167,10,167,
        12,167,2317,9,167,1,167,3,167,2320,8,167,1,168,3,168,2323,8,168,
        1,168,3,168,2326,8,168,1,168,3,168,2329,8,168,1,169,1,169,1,169,
        1,169,5,169,2335,8,169,10,169,12,169,2338,9,169,1,169,1,169,1,170,
        1,170,1,170,1,170,1,171,1,171,1,171,1,171,1,171,1,171,1,171,1,171,
        3,171,2354,8,171,1,172,1,172,1,172,1,172,1,173,1,173,1,173,1,173,
        1,174,1,174,1,174,1,175,1,175,1,175,1,176,1,176,1,177,1,177,1,178,
        1,178,1,179,1,179,1,179,1,180,1,180,1,181,1,181,3,181,2383,8,181,
        1,181,3,181,2386,8,181,1,181,1,181,1,181,1,181,1,181,1,181,1,181,
        1,182,1,182,1,182,5,182,2398,8,182,10,182,12,182,2401,9,182,1,183,
        1,183,1,183,1,183,1,184,1,184,3,184,2409,8,184,1,184,1,184,1,185,
        4,185,2414,8,185,11,185,12,185,2415,1,186,3,186,2419,8,186,1,186,
        3,186,2422,8,186,1,186,1,186,3,186,2426,8,186,1,187,4,187,2429,8,
        187,11,187,12,187,2430,1,188,1,188,1,189,1,189,1,189,1,189,1,189,
        1,189,1,189,1,189,1,189,3,189,2444,8,189,1,189,1,189,1,189,1,189,
        1,189,1,189,1,189,1,189,3,189,2454,8,189,1,190,1,190,1,190,1,190,
        1,190,3,190,2461,8,190,1,190,3,190,2464,8,190,1,190,1,190,1,190,
        1,190,1,190,1,190,1,190,1,190,1,190,1,190,3,190,2476,8,190,1,191,
        1,191,1,191,5,191,2481,8,191,10,191,12,191,2484,9,191,1,192,1,192,
        1,192,1,192,1,193,1,193,1,193,5,193,2493,8,193,10,193,12,193,2496,
        9,193,1,194,1,194,1,194,3,194,2501,8,194,1,195,1,195,3,195,2505,
        8,195,1,196,1,196,3,196,2509,8,196,1,197,1,197,1,198,1,198,1,198,
        1,198,1,198,1,198,3,198,2519,8,198,1,199,1,199,1,199,1,199,3,199,
        2525,8,199,3,199,2527,8,199,1,200,1,200,1,200,5,200,2532,8,200,10,
        200,12,200,2535,9,200,1,201,3,201,2538,8,201,1,201,3,201,2541,8,
        201,1,201,1,201,3,201,2545,8,201,1,202,1,202,1,202,1,202,1,202,1,
        202,1,202,1,202,1,202,1,202,3,202,2557,8,202,1,203,3,203,2560,8,
        203,1,203,1,203,1,203,1,203,1,204,3,204,2567,8,204,1,204,3,204,2570,
        8,204,1,204,1,204,1,204,3,204,2575,8,204,1,204,1,204,1,204,3,204,
        2580,8,204,1,204,1,204,1,204,3,204,2585,8,204,1,204,1,204,1,204,
        3,204,2590,8,204,3,204,2592,8,204,1,205,3,205,2595,8,205,1,205,1,
        205,1,205,1,206,3,206,2601,8,206,1,206,3,206,2604,8,206,1,206,1,
        206,1,206,1,207,3,207,2610,8,207,1,207,3,207,2613,8,207,1,207,1,
        207,1,207,1,208,1,208,1,208,1,208,1,208,1,208,1,208,1,208,1,208,
        1,208,1,208,1,208,1,208,3,208,2631,8,208,1,209,1,209,1,209,1,209,
        1,209,1,209,3,209,2639,8,209,1,210,3,210,2642,8,210,1,210,1,210,
        1,210,1,210,1,210,1,210,1,210,1,210,3,210,2652,8,210,1,211,3,211,
        2655,8,211,1,211,1,211,1,211,1,212,3,212,2661,8,212,1,212,1,212,
        1,212,1,213,1,213,1,213,1,213,1,213,1,213,1,213,1,213,1,213,1,213,
        1,213,1,213,1,213,1,213,1,213,1,213,1,213,1,213,1,213,1,213,1,213,
        1,213,3,213,2688,8,213,1,214,1,214,1,214,1,214,1,214,1,214,1,214,
        1,215,1,215,1,215,1,215,3,215,2701,8,215,1,215,1,215,1,216,1,216,
        1,216,1,216,1,216,1,216,3,216,2711,8,216,1,217,1,217,1,217,1,218,
        1,218,5,218,2718,8,218,10,218,12,218,2721,9,218,1,218,1,218,3,218,
        2725,8,218,1,219,3,219,2728,8,219,1,219,3,219,2731,8,219,1,219,1,
        219,1,219,1,219,4,219,2737,8,219,11,219,12,219,2738,1,219,1,219,
        1,219,1,219,1,219,1,219,3,219,2747,8,219,1,220,1,220,5,220,2751,
        8,220,10,220,12,220,2754,9,220,1,220,4,220,2757,8,220,11,220,12,
        220,2758,1,221,1,221,5,221,2763,8,221,10,221,12,221,2766,9,221,1,
        221,1,221,1,222,1,222,1,222,1,222,5,222,2774,8,222,10,222,12,222,
        2777,9,222,1,222,3,222,2780,8,222,3,222,2782,8,222,1,222,1,222,1,
        223,1,223,1,223,1,223,5,223,2790,8,223,10,223,12,223,2793,9,223,
        1,223,1,223,1,224,3,224,2798,8,224,1,224,3,224,2801,8,224,1,224,
        1,224,1,225,1,225,1,226,1,226,1,226,1,227,1,227,5,227,2812,8,227,
        10,227,12,227,2815,9,227,1,227,1,227,1,228,3,228,2820,8,228,1,228,
        3,228,2823,8,228,1,228,3,228,2826,8,228,1,228,1,228,1,228,1,228,
        1,228,3,228,2833,8,228,1,228,1,228,1,228,3,228,2838,8,228,1,228,
        1,228,3,228,2842,8,228,1,228,1,228,3,228,2846,8,228,1,228,1,228,
        1,228,1,228,1,228,1,228,1,228,1,228,1,228,1,228,1,228,1,228,1,228,
        1,228,1,228,3,228,2863,8,228,1,228,3,228,2866,8,228,1,228,1,228,
        1,228,3,228,2871,8,228,1,228,1,228,3,228,2875,8,228,1,228,1,228,
        3,228,2879,8,228,1,228,1,228,1,228,1,228,1,228,1,228,1,228,3,228,
        2888,8,228,1,229,3,229,2891,8,229,1,229,1,229,1,229,3,229,2896,8,
        229,1,229,1,229,3,229,2900,8,229,1,229,1,229,1,229,3,229,2905,8,
        229,1,229,1,229,3,229,2909,8,229,3,229,2911,8,229,1,230,1,230,1,
        230,1,231,1,231,1,231,1,231,5,231,2920,8,231,10,231,12,231,2923,
        9,231,1,231,3,231,2926,8,231,3,231,2928,8,231,1,231,1,231,1,232,
        3,232,2933,8,232,1,232,1,232,1,232,3,232,2938,8,232,1,233,1,233,
        1,233,1,233,1,233,3,233,2945,8,233,1,233,1,233,1,234,1,234,3,234,
        2951,8,234,1,235,4,235,2954,8,235,11,235,12,235,2955,1,236,1,236,
        1,236,1,236,3,236,2962,8,236,1,236,1,236,3,236,2966,8,236,1,236,
        1,236,1,236,1,236,1,236,1,236,1,236,1,236,1,236,1,236,5,236,2978,
        8,236,10,236,12,236,2981,9,236,3,236,2983,8,236,1,237,1,237,3,237,
        2987,8,237,1,238,1,238,1,238,5,238,2992,8,238,10,238,12,238,2995,
        9,238,1,239,1,239,1,239,1,239,1,239,5,239,3002,8,239,10,239,12,239,
        3005,9,239,3,239,3007,8,239,1,239,3,239,3010,8,239,1,240,1,240,1,
        240,3,240,3015,8,240,1,240,1,240,1,241,1,241,3,241,3021,8,241,1,
        241,1,241,5,241,3025,8,241,10,241,12,241,3028,9,241,1,241,1,241,
        1,241,1,241,3,241,3034,8,241,1,242,1,242,1,242,5,242,3039,8,242,
        10,242,12,242,3042,9,242,1,243,1,243,1,243,1,243,1,244,3,244,3049,
        8,244,1,244,1,244,3,244,3053,8,244,1,245,1,245,1,245,1,245,1,245,
        1,246,1,246,1,246,1,246,1,247,1,247,1,247,1,247,1,248,1,248,1,248,
        1,248,1,249,1,249,1,249,1,249,1,249,1,249,1,249,1,249,1,249,1,249,
        3,249,3082,8,249,1,250,1,250,1,250,1,250,3,250,3088,8,250,1,251,
        1,251,1,252,1,252,1,252,1,252,3,252,3096,8,252,1,253,1,253,5,253,
        3100,8,253,10,253,12,253,3103,9,253,1,253,1,253,1,254,1,254,5,254,
        3109,8,254,10,254,12,254,3112,9,254,1,254,1,254,1,255,1,255,1,255,
        1,255,1,255,1,255,1,255,1,255,1,255,1,255,3,255,3126,8,255,1,256,
        1,256,1,256,1,256,3,256,3132,8,256,1,257,1,257,1,257,1,257,3,257,
        3138,8,257,1,257,3,257,3141,8,257,1,257,1,257,1,258,1,258,1,259,
        1,259,4,259,3149,8,259,11,259,12,259,3150,1,260,1,260,1,261,1,261,
        1,262,5,262,3158,8,262,10,262,12,262,3161,9,262,1,262,3,262,3164,
        8,262,1,262,1,262,1,262,3,262,3169,8,262,1,262,3,262,3172,8,262,
        1,262,3,262,3175,8,262,1,262,3,262,3178,8,262,1,262,1,262,3,262,
        3182,8,262,1,263,1,263,3,263,3186,8,263,1,263,1,263,1,264,1,264,
        1,265,5,265,3193,8,265,10,265,12,265,3196,9,265,1,265,3,265,3199,
        8,265,1,265,3,265,3202,8,265,1,265,1,265,1,265,3,265,3207,8,265,
        1,265,1,265,1,265,3,265,3212,8,265,1,265,3,265,3215,8,265,1,265,
        3,265,3218,8,265,1,265,1,265,1,266,1,266,1,267,1,267,1,267,3,267,
        3227,8,267,1,267,3,267,3230,8,267,1,267,3,267,3233,8,267,1,267,1,
        267,3,267,3237,8,267,1,268,1,268,1,268,3,268,3242,8,268,1,268,1,
        268,3,268,3246,8,268,1,269,1,269,1,269,1,269,3,269,3252,8,269,1,
        269,1,269,3,269,3256,8,269,1,269,1,269,3,269,3260,8,269,1,269,1,
        269,1,270,1,270,1,270,1,270,1,270,1,270,1,270,1,270,1,270,1,270,
        3,270,3274,8,270,1,271,1,271,1,271,1,272,1,272,1,272,1,272,1,272,
        1,272,1,272,1,272,3,272,3287,8,272,1,272,1,272,1,272,1,272,3,272,
        3293,8,272,1,273,1,273,1,273,1,273,1,273,1,274,1,274,1,274,1,274,
        1,274,1,274,1,274,1,274,1,274,1,274,1,274,1,274,3,274,3312,8,274,
        1,275,1,275,1,275,1,275,1,275,1,275,1,276,1,276,1,276,3,276,3323,
        8,276,1,276,1,276,3,276,3327,8,276,1,276,1,276,1,277,3,277,3332,
        8,277,1,277,1,277,3,277,3336,8,277,1,277,1,277,1,277,1,277,1,277,
        3,277,3343,8,277,1,277,1,277,1,277,1,277,1,277,1,277,3,277,3351,
        8,277,1,278,1,278,1,278,3,278,3356,8,278,1,278,1,278,1,278,1,278,
        1,278,1,278,3,278,3364,8,278,1,278,1,278,5,278,3368,8,278,10,278,
        12,278,3371,9,278,3,278,3373,8,278,1,279,1,279,1,279,3,279,3378,
        8,279,1,280,5,280,3381,8,280,10,280,12,280,3384,9,280,1,281,1,281,
        1,282,5,282,3389,8,282,10,282,12,282,3392,9,282,1,282,3,282,3395,
        8,282,1,283,1,283,3,283,3399,8,283,1,284,1,284,1,284,1,284,1,284,
        1,284,1,284,3,284,3408,8,284,1,285,1,285,1,286,1,286,1,286,1,286,
        1,286,3,286,3417,8,286,1,286,3,286,3420,8,286,1,286,1,286,5,286,
        3424,8,286,10,286,12,286,3427,9,286,1,287,1,287,1,287,1,287,3,287,
        3433,8,287,1,287,1,287,1,287,3,287,3438,8,287,1,287,3,287,3441,8,
        287,1,287,1,287,1,287,1,287,1,287,1,287,3,287,3449,8,287,1,288,1,
        288,1,288,1,288,3,288,3455,8,288,1,289,1,289,1,289,3,289,3460,8,
        289,1,289,3,289,3463,8,289,1,290,1,290,3,290,3467,8,290,1,290,1,
        290,3,290,3471,8,290,1,290,1,290,1,290,1,290,1,290,1,290,5,290,3479,
        8,290,10,290,12,290,3482,9,290,1,290,3,290,3485,8,290,3,290,3487,
        8,290,1,291,1,291,3,291,3491,8,291,1,291,1,291,3,291,3495,8,291,
        1,292,1,292,1,292,0,0,293,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,
        30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,
        74,76,78,80,82,84,86,88,90,92,94,96,98,100,102,104,106,108,110,112,
        114,116,118,120,122,124,126,128,130,132,134,136,138,140,142,144,
        146,148,150,152,154,156,158,160,162,164,166,168,170,172,174,176,
        178,180,182,184,186,188,190,192,194,196,198,200,202,204,206,208,
        210,212,214,216,218,220,222,224,226,228,230,232,234,236,238,240,
        242,244,246,248,250,252,254,256,258,260,262,264,266,268,270,272,
        274,276,278,280,282,284,286,288,290,292,294,296,298,300,302,304,
        306,308,310,312,314,316,318,320,322,324,326,328,330,332,334,336,
        338,340,342,344,346,348,350,352,354,356,358,360,362,364,366,368,
        370,372,374,376,378,380,382,384,386,388,390,392,394,396,398,400,
        402,404,406,408,410,412,414,416,418,420,422,424,426,428,430,432,
        434,436,438,440,442,444,446,448,450,452,454,456,458,460,462,464,
        466,468,470,472,474,476,478,480,482,484,486,488,490,492,494,496,
        498,500,502,504,506,508,510,512,514,516,518,520,522,524,526,528,
        530,532,534,536,538,540,542,544,546,548,550,552,554,556,558,560,
        562,564,566,568,570,572,574,576,578,580,582,584,0,21,8,0,22,22,25,
        25,58,58,67,67,90,90,94,94,107,108,112,112,2,0,35,35,46,46,3,0,57,
        57,78,78,87,87,1,0,167,168,2,0,157,158,169,170,1,0,146,147,1,0,148,
        150,14,0,19,19,22,22,25,25,30,30,35,35,46,46,58,58,67,67,73,73,90,
        90,94,94,98,98,107,108,112,112,2,0,15,15,33,33,2,0,16,16,111,111,
        13,0,9,9,16,16,42,42,47,47,60,60,70,70,79,79,81,85,91,91,97,97,111,
        111,115,115,117,117,2,0,41,41,56,56,2,0,18,18,101,101,2,0,148,148,
        159,159,2,0,57,57,78,78,2,0,43,43,103,103,23,0,9,9,14,14,18,20,22,
        32,34,35,37,38,40,46,48,49,52,52,55,60,63,63,66,67,69,70,72,73,76,
        76,78,80,82,85,87,87,89,91,94,105,107,113,115,117,120,120,8,0,9,
        9,47,47,60,60,70,70,82,84,91,91,97,97,111,111,5,0,47,47,60,60,70,
        70,82,85,111,111,10,0,9,9,42,42,60,60,70,70,79,79,82,84,91,91,97,
        97,111,111,115,115,22,0,10,10,12,13,15,17,21,21,33,33,36,36,39,39,
        50,51,54,54,62,62,64,65,68,68,74,74,77,77,81,81,88,88,92,93,110,
        110,114,114,118,119,121,121,124,124,3872,0,587,1,0,0,0,2,603,1,0,
        0,0,4,607,1,0,0,0,6,612,1,0,0,0,8,634,1,0,0,0,10,641,1,0,0,0,12,
        688,1,0,0,0,14,690,1,0,0,0,16,696,1,0,0,0,18,709,1,0,0,0,20,722,
        1,0,0,0,22,725,1,0,0,0,24,729,1,0,0,0,26,743,1,0,0,0,28,746,1,0,
        0,0,30,753,1,0,0,0,32,758,1,0,0,0,34,760,1,0,0,0,36,762,1,0,0,0,
        38,766,1,0,0,0,40,768,1,0,0,0,42,773,1,0,0,0,44,775,1,0,0,0,46,781,
        1,0,0,0,48,783,1,0,0,0,50,794,1,0,0,0,52,803,1,0,0,0,54,816,1,0,
        0,0,56,828,1,0,0,0,58,830,1,0,0,0,60,839,1,0,0,0,62,849,1,0,0,0,
        64,862,1,0,0,0,66,879,1,0,0,0,68,881,1,0,0,0,70,889,1,0,0,0,72,897,
        1,0,0,0,74,905,1,0,0,0,76,913,1,0,0,0,78,921,1,0,0,0,80,929,1,0,
        0,0,82,937,1,0,0,0,84,951,1,0,0,0,86,964,1,0,0,0,88,978,1,0,0,0,
        90,990,1,0,0,0,92,1002,1,0,0,0,94,1010,1,0,0,0,96,1033,1,0,0,0,98,
        1057,1,0,0,0,100,1059,1,0,0,0,102,1064,1,0,0,0,104,1070,1,0,0,0,
        106,1081,1,0,0,0,108,1128,1,0,0,0,110,1253,1,0,0,0,112,1257,1,0,
        0,0,114,1259,1,0,0,0,116,1263,1,0,0,0,118,1271,1,0,0,0,120,1287,
        1,0,0,0,122,1291,1,0,0,0,124,1293,1,0,0,0,126,1303,1,0,0,0,128,1305,
        1,0,0,0,130,1314,1,0,0,0,132,1327,1,0,0,0,134,1335,1,0,0,0,136,1337,
        1,0,0,0,138,1357,1,0,0,0,140,1359,1,0,0,0,142,1368,1,0,0,0,144,1387,
        1,0,0,0,146,1389,1,0,0,0,148,1410,1,0,0,0,150,1419,1,0,0,0,152,1436,
        1,0,0,0,154,1447,1,0,0,0,156,1452,1,0,0,0,158,1475,1,0,0,0,160,1477,
        1,0,0,0,162,1486,1,0,0,0,164,1503,1,0,0,0,166,1513,1,0,0,0,168,1515,
        1,0,0,0,170,1518,1,0,0,0,172,1529,1,0,0,0,174,1541,1,0,0,0,176,1543,
        1,0,0,0,178,1548,1,0,0,0,180,1551,1,0,0,0,182,1566,1,0,0,0,184,1575,
        1,0,0,0,186,1586,1,0,0,0,188,1588,1,0,0,0,190,1597,1,0,0,0,192,1606,
        1,0,0,0,194,1608,1,0,0,0,196,1612,1,0,0,0,198,1637,1,0,0,0,200,1644,
        1,0,0,0,202,1646,1,0,0,0,204,1743,1,0,0,0,206,1745,1,0,0,0,208,1767,
        1,0,0,0,210,1769,1,0,0,0,212,1772,1,0,0,0,214,1775,1,0,0,0,216,1783,
        1,0,0,0,218,1801,1,0,0,0,220,1803,1,0,0,0,222,1807,1,0,0,0,224,1818,
        1,0,0,0,226,1820,1,0,0,0,228,1834,1,0,0,0,230,1836,1,0,0,0,232,1843,
        1,0,0,0,234,1857,1,0,0,0,236,1859,1,0,0,0,238,1908,1,0,0,0,240,1910,
        1,0,0,0,242,1915,1,0,0,0,244,1928,1,0,0,0,246,1930,1,0,0,0,248,1943,
        1,0,0,0,250,1945,1,0,0,0,252,1950,1,0,0,0,254,1972,1,0,0,0,256,1974,
        1,0,0,0,258,1978,1,0,0,0,260,1991,1,0,0,0,262,1993,1,0,0,0,264,2012,
        1,0,0,0,266,2014,1,0,0,0,268,2026,1,0,0,0,270,2032,1,0,0,0,272,2037,
        1,0,0,0,274,2042,1,0,0,0,276,2044,1,0,0,0,278,2050,1,0,0,0,280,2070,
        1,0,0,0,282,2073,1,0,0,0,284,2077,1,0,0,0,286,2083,1,0,0,0,288,2114,
        1,0,0,0,290,2117,1,0,0,0,292,2125,1,0,0,0,294,2128,1,0,0,0,296,2141,
        1,0,0,0,298,2162,1,0,0,0,300,2177,1,0,0,0,302,2179,1,0,0,0,304,2188,
        1,0,0,0,306,2193,1,0,0,0,308,2199,1,0,0,0,310,2211,1,0,0,0,312,2215,
        1,0,0,0,314,2224,1,0,0,0,316,2233,1,0,0,0,318,2237,1,0,0,0,320,2252,
        1,0,0,0,322,2261,1,0,0,0,324,2275,1,0,0,0,326,2277,1,0,0,0,328,2297,
        1,0,0,0,330,2299,1,0,0,0,332,2306,1,0,0,0,334,2310,1,0,0,0,336,2322,
        1,0,0,0,338,2330,1,0,0,0,340,2341,1,0,0,0,342,2353,1,0,0,0,344,2355,
        1,0,0,0,346,2359,1,0,0,0,348,2363,1,0,0,0,350,2366,1,0,0,0,352,2369,
        1,0,0,0,354,2371,1,0,0,0,356,2373,1,0,0,0,358,2375,1,0,0,0,360,2378,
        1,0,0,0,362,2380,1,0,0,0,364,2394,1,0,0,0,366,2402,1,0,0,0,368,2406,
        1,0,0,0,370,2413,1,0,0,0,372,2418,1,0,0,0,374,2428,1,0,0,0,376,2432,
        1,0,0,0,378,2453,1,0,0,0,380,2460,1,0,0,0,382,2477,1,0,0,0,384,2485,
        1,0,0,0,386,2489,1,0,0,0,388,2497,1,0,0,0,390,2504,1,0,0,0,392,2508,
        1,0,0,0,394,2510,1,0,0,0,396,2518,1,0,0,0,398,2526,1,0,0,0,400,2528,
        1,0,0,0,402,2544,1,0,0,0,404,2556,1,0,0,0,406,2559,1,0,0,0,408,2566,
        1,0,0,0,410,2594,1,0,0,0,412,2600,1,0,0,0,414,2609,1,0,0,0,416,2630,
        1,0,0,0,418,2638,1,0,0,0,420,2641,1,0,0,0,422,2654,1,0,0,0,424,2660,
        1,0,0,0,426,2687,1,0,0,0,428,2689,1,0,0,0,430,2696,1,0,0,0,432,2710,
        1,0,0,0,434,2712,1,0,0,0,436,2724,1,0,0,0,438,2727,1,0,0,0,440,2748,
        1,0,0,0,442,2760,1,0,0,0,444,2769,1,0,0,0,446,2785,1,0,0,0,448,2797,
        1,0,0,0,450,2804,1,0,0,0,452,2806,1,0,0,0,454,2809,1,0,0,0,456,2819,
        1,0,0,0,458,2890,1,0,0,0,460,2912,1,0,0,0,462,2915,1,0,0,0,464,2932,
        1,0,0,0,466,2939,1,0,0,0,468,2950,1,0,0,0,470,2953,1,0,0,0,472,2982,
        1,0,0,0,474,2986,1,0,0,0,476,2988,1,0,0,0,478,2996,1,0,0,0,480,3014,
        1,0,0,0,482,3033,1,0,0,0,484,3035,1,0,0,0,486,3043,1,0,0,0,488,3052,
        1,0,0,0,490,3054,1,0,0,0,492,3059,1,0,0,0,494,3063,1,0,0,0,496,3067,
        1,0,0,0,498,3081,1,0,0,0,500,3087,1,0,0,0,502,3089,1,0,0,0,504,3095,
        1,0,0,0,506,3097,1,0,0,0,508,3106,1,0,0,0,510,3125,1,0,0,0,512,3131,
        1,0,0,0,514,3133,1,0,0,0,516,3144,1,0,0,0,518,3146,1,0,0,0,520,3152,
        1,0,0,0,522,3154,1,0,0,0,524,3159,1,0,0,0,526,3183,1,0,0,0,528,3189,
        1,0,0,0,530,3194,1,0,0,0,532,3221,1,0,0,0,534,3223,1,0,0,0,536,3238,
        1,0,0,0,538,3247,1,0,0,0,540,3263,1,0,0,0,542,3275,1,0,0,0,544,3278,
        1,0,0,0,546,3294,1,0,0,0,548,3299,1,0,0,0,550,3313,1,0,0,0,552,3319,
        1,0,0,0,554,3350,1,0,0,0,556,3372,1,0,0,0,558,3377,1,0,0,0,560,3382,
        1,0,0,0,562,3385,1,0,0,0,564,3390,1,0,0,0,566,3398,1,0,0,0,568,3407,
        1,0,0,0,570,3409,1,0,0,0,572,3416,1,0,0,0,574,3428,1,0,0,0,576,3450,
        1,0,0,0,578,3456,1,0,0,0,580,3486,1,0,0,0,582,3488,1,0,0,0,584,3496,
        1,0,0,0,586,588,5,1,0,0,587,586,1,0,0,0,587,588,1,0,0,0,588,592,
        1,0,0,0,589,591,3,2,1,0,590,589,1,0,0,0,591,594,1,0,0,0,592,590,
        1,0,0,0,592,593,1,0,0,0,593,595,1,0,0,0,594,592,1,0,0,0,595,596,
        5,0,0,1,596,1,1,0,0,0,597,604,3,282,141,0,598,604,3,286,143,0,599,
        604,3,466,233,0,600,604,3,4,2,0,601,604,3,290,145,0,602,604,3,6,
        3,0,603,597,1,0,0,0,603,598,1,0,0,0,603,599,1,0,0,0,603,600,1,0,
        0,0,603,601,1,0,0,0,603,602,1,0,0,0,604,3,1,0,0,0,605,608,3,190,
        95,0,606,608,3,294,147,0,607,605,1,0,0,0,607,606,1,0,0,0,608,609,
        1,0,0,0,609,607,1,0,0,0,609,610,1,0,0,0,610,5,1,0,0,0,611,613,3,
        8,4,0,612,611,1,0,0,0,613,614,1,0,0,0,614,612,1,0,0,0,614,615,1,
        0,0,0,615,7,1,0,0,0,616,617,5,53,0,0,617,618,5,113,0,0,618,619,3,
        584,292,0,619,620,5,156,0,0,620,621,3,10,5,0,621,622,5,145,0,0,622,
        635,1,0,0,0,623,624,5,53,0,0,624,625,5,113,0,0,625,626,3,10,5,0,
        626,627,5,145,0,0,627,635,1,0,0,0,628,629,5,53,0,0,629,630,5,113,
        0,0,630,631,5,97,0,0,631,632,3,10,5,0,632,633,5,145,0,0,633,635,
        1,0,0,0,634,616,1,0,0,0,634,623,1,0,0,0,634,628,1,0,0,0,635,9,1,
        0,0,0,636,638,3,584,292,0,637,639,3,48,24,0,638,637,1,0,0,0,638,
        639,1,0,0,0,639,642,1,0,0,0,640,642,3,306,153,0,641,636,1,0,0,0,
        641,640,1,0,0,0,642,650,1,0,0,0,643,644,5,142,0,0,644,646,3,584,
        292,0,645,647,3,48,24,0,646,645,1,0,0,0,646,647,1,0,0,0,647,649,
        1,0,0,0,648,643,1,0,0,0,649,652,1,0,0,0,650,648,1,0,0,0,650,651,
        1,0,0,0,651,11,1,0,0,0,652,650,1,0,0,0,653,659,3,18,9,0,654,658,
        5,159,0,0,655,658,3,442,221,0,656,658,5,148,0,0,657,654,1,0,0,0,
        657,655,1,0,0,0,657,656,1,0,0,0,658,661,1,0,0,0,659,657,1,0,0,0,
        659,660,1,0,0,0,660,689,1,0,0,0,661,659,1,0,0,0,662,689,3,14,7,0,
        663,665,5,87,0,0,664,663,1,0,0,0,664,665,1,0,0,0,665,667,1,0,0,0,
        666,668,5,85,0,0,667,666,1,0,0,0,667,668,1,0,0,0,668,669,1,0,0,0,
        669,674,3,18,9,0,670,671,5,157,0,0,671,672,3,48,24,0,672,673,5,158,
        0,0,673,675,1,0,0,0,674,670,1,0,0,0,674,675,1,0,0,0,675,689,1,0,
        0,0,676,678,5,87,0,0,677,676,1,0,0,0,677,678,1,0,0,0,678,680,1,0,
        0,0,679,681,5,85,0,0,680,679,1,0,0,0,680,681,1,0,0,0,681,682,1,0,
        0,0,682,683,3,18,9,0,683,684,5,138,0,0,684,685,5,126,0,0,685,686,
        5,139,0,0,686,689,1,0,0,0,687,689,3,20,10,0,688,653,1,0,0,0,688,
        662,1,0,0,0,688,664,1,0,0,0,688,677,1,0,0,0,688,687,1,0,0,0,689,
        13,1,0,0,0,690,691,5,32,0,0,691,692,5,148,0,0,692,693,5,157,0,0,
        693,694,3,16,8,0,694,695,5,158,0,0,695,15,1,0,0,0,696,701,3,12,6,
        0,697,698,5,143,0,0,698,700,3,12,6,0,699,697,1,0,0,0,700,703,1,0,
        0,0,701,699,1,0,0,0,701,702,1,0,0,0,702,17,1,0,0,0,703,701,1,0,0,
        0,704,710,3,30,15,0,705,710,3,46,23,0,706,707,5,116,0,0,707,710,
        5,148,0,0,708,710,3,20,10,0,709,704,1,0,0,0,709,705,1,0,0,0,709,
        706,1,0,0,0,709,708,1,0,0,0,710,19,1,0,0,0,711,712,5,140,0,0,712,
        715,3,28,14,0,713,714,5,143,0,0,714,716,3,28,14,0,715,713,1,0,0,
        0,716,717,1,0,0,0,717,715,1,0,0,0,717,718,1,0,0,0,718,719,1,0,0,
        0,719,720,5,141,0,0,720,723,1,0,0,0,721,723,3,22,11,0,722,711,1,
        0,0,0,722,721,1,0,0,0,723,21,1,0,0,0,724,726,5,114,0,0,725,724,1,
        0,0,0,725,726,1,0,0,0,726,727,1,0,0,0,727,728,3,24,12,0,728,23,1,
        0,0,0,729,730,5,140,0,0,730,733,3,26,13,0,731,732,5,143,0,0,732,
        734,3,26,13,0,733,731,1,0,0,0,734,735,1,0,0,0,735,733,1,0,0,0,735,
        736,1,0,0,0,736,737,1,0,0,0,737,738,5,141,0,0,738,25,1,0,0,0,739,
        744,3,24,12,0,740,742,3,584,292,0,741,740,1,0,0,0,741,742,1,0,0,
        0,742,744,1,0,0,0,743,739,1,0,0,0,743,741,1,0,0,0,744,27,1,0,0,0,
        745,747,3,12,6,0,746,745,1,0,0,0,746,747,1,0,0,0,747,749,1,0,0,0,
        748,750,3,584,292,0,749,748,1,0,0,0,749,750,1,0,0,0,750,29,1,0,0,
        0,751,754,3,32,16,0,752,754,5,19,0,0,753,751,1,0,0,0,753,752,1,0,
        0,0,754,31,1,0,0,0,755,759,3,34,17,0,756,759,3,36,18,0,757,759,5,
        30,0,0,758,755,1,0,0,0,758,756,1,0,0,0,758,757,1,0,0,0,759,33,1,
        0,0,0,760,761,7,0,0,0,761,35,1,0,0,0,762,763,7,1,0,0,763,37,1,0,
        0,0,764,767,3,40,20,0,765,767,3,42,21,0,766,764,1,0,0,0,766,765,
        1,0,0,0,767,39,1,0,0,0,768,769,5,31,0,0,769,770,5,140,0,0,770,771,
        3,12,6,0,771,772,5,141,0,0,772,41,1,0,0,0,773,774,5,31,0,0,774,43,
        1,0,0,0,775,776,3,56,28,0,776,45,1,0,0,0,777,782,3,10,5,0,778,782,
        5,73,0,0,779,782,5,36,0,0,780,782,5,98,0,0,781,777,1,0,0,0,781,778,
        1,0,0,0,781,779,1,0,0,0,781,780,1,0,0,0,782,47,1,0,0,0,783,784,5,
        157,0,0,784,789,3,12,6,0,785,786,5,143,0,0,786,788,3,12,6,0,787,
        785,1,0,0,0,788,791,1,0,0,0,789,787,1,0,0,0,789,790,1,0,0,0,790,
        792,1,0,0,0,791,789,1,0,0,0,792,793,5,158,0,0,793,49,1,0,0,0,794,
        799,3,52,26,0,795,796,5,143,0,0,796,798,3,52,26,0,797,795,1,0,0,
        0,798,801,1,0,0,0,799,797,1,0,0,0,799,800,1,0,0,0,800,51,1,0,0,0,
        801,799,1,0,0,0,802,804,3,54,27,0,803,802,1,0,0,0,803,804,1,0,0,
        0,804,806,1,0,0,0,805,807,7,2,0,0,806,805,1,0,0,0,806,807,1,0,0,
        0,807,814,1,0,0,0,808,815,3,56,28,0,809,812,5,114,0,0,810,812,3,
        12,6,0,811,809,1,0,0,0,811,810,1,0,0,0,812,813,1,0,0,0,813,815,3,
        56,28,0,814,808,1,0,0,0,814,811,1,0,0,0,815,53,1,0,0,0,816,817,3,
        584,292,0,817,818,5,144,0,0,818,55,1,0,0,0,819,829,3,62,31,0,820,
        829,3,60,30,0,821,822,5,87,0,0,822,829,3,60,30,0,823,829,3,156,78,
        0,824,829,3,102,51,0,825,829,3,578,289,0,826,829,3,114,57,0,827,
        829,3,58,29,0,828,819,1,0,0,0,828,820,1,0,0,0,828,821,1,0,0,0,828,
        823,1,0,0,0,828,824,1,0,0,0,828,825,1,0,0,0,828,826,1,0,0,0,828,
        827,1,0,0,0,829,57,1,0,0,0,830,831,3,108,54,0,831,832,5,123,0,0,
        832,833,5,136,0,0,833,834,3,130,65,0,834,835,5,137,0,0,835,59,1,
        0,0,0,836,840,3,156,78,0,837,840,3,168,84,0,838,840,3,66,33,0,839,
        836,1,0,0,0,839,837,1,0,0,0,839,838,1,0,0,0,840,61,1,0,0,0,841,842,
        3,98,49,0,842,843,3,64,32,0,843,844,3,56,28,0,844,850,1,0,0,0,845,
        846,3,98,49,0,846,847,5,181,0,0,847,848,3,112,56,0,848,850,1,0,0,
        0,849,841,1,0,0,0,849,845,1,0,0,0,850,63,1,0,0,0,851,863,5,156,0,
        0,852,863,5,171,0,0,853,863,5,172,0,0,854,863,5,173,0,0,855,863,
        5,174,0,0,856,863,5,175,0,0,857,863,5,176,0,0,858,863,5,177,0,0,
        859,863,5,178,0,0,860,863,5,180,0,0,861,863,3,496,248,0,862,851,
        1,0,0,0,862,852,1,0,0,0,862,853,1,0,0,0,862,854,1,0,0,0,862,855,
        1,0,0,0,862,856,1,0,0,0,862,857,1,0,0,0,862,858,1,0,0,0,862,859,
        1,0,0,0,862,860,1,0,0,0,862,861,1,0,0,0,863,65,1,0,0,0,864,880,3,
        68,34,0,865,866,3,68,34,0,866,867,5,159,0,0,867,868,3,56,28,0,868,
        869,5,144,0,0,869,870,3,56,28,0,870,880,1,0,0,0,871,872,3,68,34,
        0,872,873,5,159,0,0,873,874,5,87,0,0,874,875,3,44,22,0,875,876,5,
        144,0,0,876,877,5,87,0,0,877,878,3,44,22,0,878,880,1,0,0,0,879,864,
        1,0,0,0,879,865,1,0,0,0,879,871,1,0,0,0,880,67,1,0,0,0,881,887,3,
        70,35,0,882,885,5,161,0,0,883,886,3,68,34,0,884,886,3,114,57,0,885,
        883,1,0,0,0,885,884,1,0,0,0,886,888,1,0,0,0,887,882,1,0,0,0,887,
        888,1,0,0,0,888,69,1,0,0,0,889,894,3,72,36,0,890,891,5,165,0,0,891,
        893,3,72,36,0,892,890,1,0,0,0,893,896,1,0,0,0,894,892,1,0,0,0,894,
        895,1,0,0,0,895,71,1,0,0,0,896,894,1,0,0,0,897,902,3,74,37,0,898,
        899,5,164,0,0,899,901,3,74,37,0,900,898,1,0,0,0,901,904,1,0,0,0,
        902,900,1,0,0,0,902,903,1,0,0,0,903,73,1,0,0,0,904,902,1,0,0,0,905,
        910,3,76,38,0,906,907,5,152,0,0,907,909,3,76,38,0,908,906,1,0,0,
        0,909,912,1,0,0,0,910,908,1,0,0,0,910,911,1,0,0,0,911,75,1,0,0,0,
        912,910,1,0,0,0,913,918,3,78,39,0,914,915,5,153,0,0,915,917,3,78,
        39,0,916,914,1,0,0,0,917,920,1,0,0,0,918,916,1,0,0,0,918,919,1,0,
        0,0,919,77,1,0,0,0,920,918,1,0,0,0,921,926,3,80,40,0,922,923,5,151,
        0,0,923,925,3,80,40,0,924,922,1,0,0,0,925,928,1,0,0,0,926,924,1,
        0,0,0,926,927,1,0,0,0,927,79,1,0,0,0,928,926,1,0,0,0,929,934,3,82,
        41,0,930,931,7,3,0,0,931,933,3,82,41,0,932,930,1,0,0,0,933,936,1,
        0,0,0,934,932,1,0,0,0,934,935,1,0,0,0,935,81,1,0,0,0,936,934,1,0,
        0,0,937,948,3,84,42,0,938,939,7,4,0,0,939,947,3,84,42,0,940,941,
        5,63,0,0,941,947,3,150,75,0,942,943,5,14,0,0,943,947,3,150,75,0,
        944,945,5,63,0,0,945,947,3,324,162,0,946,938,1,0,0,0,946,940,1,0,
        0,0,946,942,1,0,0,0,946,944,1,0,0,0,947,950,1,0,0,0,948,946,1,0,
        0,0,948,949,1,0,0,0,949,83,1,0,0,0,950,948,1,0,0,0,951,959,3,86,
        43,0,952,955,5,179,0,0,953,955,3,494,247,0,954,952,1,0,0,0,954,953,
        1,0,0,0,955,956,1,0,0,0,956,958,3,86,43,0,957,954,1,0,0,0,958,961,
        1,0,0,0,959,957,1,0,0,0,959,960,1,0,0,0,960,85,1,0,0,0,961,959,1,
        0,0,0,962,965,3,88,44,0,963,965,3,578,289,0,964,962,1,0,0,0,964,
        963,1,0,0,0,965,973,1,0,0,0,966,969,7,5,0,0,967,970,3,88,44,0,968,
        970,3,578,289,0,969,967,1,0,0,0,969,968,1,0,0,0,970,972,1,0,0,0,
        971,966,1,0,0,0,972,975,1,0,0,0,973,971,1,0,0,0,973,974,1,0,0,0,
        974,87,1,0,0,0,975,973,1,0,0,0,976,979,3,90,45,0,977,979,3,578,289,
        0,978,976,1,0,0,0,978,977,1,0,0,0,979,987,1,0,0,0,980,983,7,6,0,
        0,981,984,3,90,45,0,982,984,3,578,289,0,983,981,1,0,0,0,983,982,
        1,0,0,0,984,986,1,0,0,0,985,980,1,0,0,0,986,989,1,0,0,0,987,985,
        1,0,0,0,987,988,1,0,0,0,988,89,1,0,0,0,989,987,1,0,0,0,990,1000,
        3,96,48,0,991,992,5,100,0,0,992,997,5,136,0,0,993,995,3,92,46,0,
        994,996,5,143,0,0,995,994,1,0,0,0,995,996,1,0,0,0,996,998,1,0,0,
        0,997,993,1,0,0,0,997,998,1,0,0,0,998,999,1,0,0,0,999,1001,5,137,
        0,0,1000,991,1,0,0,0,1000,1001,1,0,0,0,1001,91,1,0,0,0,1002,1007,
        3,94,47,0,1003,1004,5,143,0,0,1004,1006,3,94,47,0,1005,1003,1,0,
        0,0,1006,1009,1,0,0,0,1007,1005,1,0,0,0,1007,1008,1,0,0,0,1008,93,
        1,0,0,0,1009,1007,1,0,0,0,1010,1012,3,324,162,0,1011,1013,3,256,
        128,0,1012,1011,1,0,0,0,1012,1013,1,0,0,0,1013,1014,1,0,0,0,1014,
        1015,3,492,246,0,1015,1016,3,112,56,0,1016,95,1,0,0,0,1017,1034,
        3,98,49,0,1018,1020,3,98,49,0,1019,1018,1,0,0,0,1019,1020,1,0,0,
        0,1020,1021,1,0,0,0,1021,1023,5,182,0,0,1022,1024,3,98,49,0,1023,
        1022,1,0,0,0,1023,1024,1,0,0,0,1024,1034,1,0,0,0,1025,1027,3,578,
        289,0,1026,1028,5,142,0,0,1027,1026,1,0,0,0,1027,1028,1,0,0,0,1028,
        1030,1,0,0,0,1029,1025,1,0,0,0,1030,1031,1,0,0,0,1031,1029,1,0,0,
        0,1031,1032,1,0,0,0,1032,1034,1,0,0,0,1033,1017,1,0,0,0,1033,1019,
        1,0,0,0,1033,1029,1,0,0,0,1034,97,1,0,0,0,1035,1058,3,100,50,0,1036,
        1058,3,108,54,0,1037,1038,5,146,0,0,1038,1058,3,98,49,0,1039,1040,
        5,147,0,0,1040,1058,3,98,49,0,1041,1042,5,154,0,0,1042,1058,3,98,
        49,0,1043,1044,5,155,0,0,1044,1058,3,98,49,0,1045,1046,5,162,0,0,
        1046,1058,3,98,49,0,1047,1048,5,163,0,0,1048,1058,3,98,49,0,1049,
        1050,5,17,0,0,1050,1058,3,98,49,0,1051,1052,5,151,0,0,1052,1058,
        3,98,49,0,1053,1054,5,148,0,0,1054,1058,3,98,49,0,1055,1056,5,153,
        0,0,1056,1058,3,98,49,0,1057,1035,1,0,0,0,1057,1036,1,0,0,0,1057,
        1037,1,0,0,0,1057,1039,1,0,0,0,1057,1041,1,0,0,0,1057,1043,1,0,0,
        0,1057,1045,1,0,0,0,1057,1047,1,0,0,0,1057,1049,1,0,0,0,1057,1051,
        1,0,0,0,1057,1053,1,0,0,0,1057,1055,1,0,0,0,1058,99,1,0,0,0,1059,
        1060,5,140,0,0,1060,1061,3,12,6,0,1061,1062,5,141,0,0,1062,1063,
        3,98,49,0,1063,101,1,0,0,0,1064,1066,5,138,0,0,1065,1067,3,104,52,
        0,1066,1065,1,0,0,0,1066,1067,1,0,0,0,1067,1068,1,0,0,0,1068,1069,
        5,139,0,0,1069,103,1,0,0,0,1070,1075,3,106,53,0,1071,1072,5,143,
        0,0,1072,1074,3,106,53,0,1073,1071,1,0,0,0,1074,1077,1,0,0,0,1075,
        1073,1,0,0,0,1075,1076,1,0,0,0,1076,105,1,0,0,0,1077,1075,1,0,0,
        0,1078,1082,3,56,28,0,1079,1080,5,182,0,0,1080,1082,3,56,28,0,1081,
        1078,1,0,0,0,1081,1079,1,0,0,0,1082,107,1,0,0,0,1083,1085,3,110,
        55,0,1084,1086,5,154,0,0,1085,1084,1,0,0,0,1085,1086,1,0,0,0,1086,
        1090,1,0,0,0,1087,1089,3,118,59,0,1088,1087,1,0,0,0,1089,1092,1,
        0,0,0,1090,1088,1,0,0,0,1090,1091,1,0,0,0,1091,1094,1,0,0,0,1092,
        1090,1,0,0,0,1093,1095,5,154,0,0,1094,1093,1,0,0,0,1094,1095,1,0,
        0,0,1095,1121,1,0,0,0,1096,1106,3,116,58,0,1097,1099,3,578,289,0,
        1098,1100,5,142,0,0,1099,1098,1,0,0,0,1099,1100,1,0,0,0,1100,1106,
        1,0,0,0,1101,1106,5,162,0,0,1102,1106,5,163,0,0,1103,1104,5,166,
        0,0,1104,1106,3,584,292,0,1105,1096,1,0,0,0,1105,1097,1,0,0,0,1105,
        1101,1,0,0,0,1105,1102,1,0,0,0,1105,1103,1,0,0,0,1106,1108,1,0,0,
        0,1107,1109,5,154,0,0,1108,1107,1,0,0,0,1108,1109,1,0,0,0,1109,1113,
        1,0,0,0,1110,1112,3,118,59,0,1111,1110,1,0,0,0,1112,1115,1,0,0,0,
        1113,1111,1,0,0,0,1113,1114,1,0,0,0,1114,1117,1,0,0,0,1115,1113,
        1,0,0,0,1116,1118,5,154,0,0,1117,1116,1,0,0,0,1117,1118,1,0,0,0,
        1118,1120,1,0,0,0,1119,1105,1,0,0,0,1120,1123,1,0,0,0,1121,1119,
        1,0,0,0,1121,1122,1,0,0,0,1122,1129,1,0,0,0,1123,1121,1,0,0,0,1124,
        1129,3,20,10,0,1125,1129,3,38,19,0,1126,1129,3,218,109,0,1127,1129,
        3,102,51,0,1128,1083,1,0,0,0,1128,1124,1,0,0,0,1128,1125,1,0,0,0,
        1128,1126,1,0,0,0,1128,1127,1,0,0,0,1129,109,1,0,0,0,1130,1254,3,
        498,249,0,1131,1133,3,584,292,0,1132,1134,3,48,24,0,1133,1132,1,
        0,0,0,1133,1134,1,0,0,0,1134,1254,1,0,0,0,1135,1136,5,140,0,0,1136,
        1137,3,56,28,0,1137,1138,5,141,0,0,1138,1254,1,0,0,0,1139,1254,3,
        122,61,0,1140,1254,3,306,153,0,1141,1254,5,125,0,0,1142,1254,5,101,
        0,0,1143,1153,5,18,0,0,1144,1145,5,142,0,0,1145,1147,3,584,292,0,
        1146,1148,3,48,24,0,1147,1146,1,0,0,0,1147,1148,1,0,0,0,1148,1154,
        1,0,0,0,1149,1150,5,138,0,0,1150,1151,3,124,62,0,1151,1152,5,139,
        0,0,1152,1154,1,0,0,0,1153,1144,1,0,0,0,1153,1149,1,0,0,0,1154,1254,
        1,0,0,0,1155,1184,5,70,0,0,1156,1178,3,12,6,0,1157,1179,3,580,290,
        0,1158,1179,3,126,63,0,1159,1160,5,138,0,0,1160,1161,3,124,62,0,
        1161,1165,5,139,0,0,1162,1164,3,442,221,0,1163,1162,1,0,0,0,1164,
        1167,1,0,0,0,1165,1163,1,0,0,0,1165,1166,1,0,0,0,1166,1169,1,0,0,
        0,1167,1165,1,0,0,0,1168,1170,3,444,222,0,1169,1168,1,0,0,0,1169,
        1170,1,0,0,0,1170,1179,1,0,0,0,1171,1173,3,442,221,0,1172,1171,1,
        0,0,0,1173,1174,1,0,0,0,1174,1172,1,0,0,0,1174,1175,1,0,0,0,1175,
        1176,1,0,0,0,1176,1177,3,444,222,0,1177,1179,1,0,0,0,1178,1157,1,
        0,0,0,1178,1158,1,0,0,0,1178,1159,1,0,0,0,1178,1172,1,0,0,0,1179,
        1185,1,0,0,0,1180,1185,3,140,70,0,1181,1182,3,442,221,0,1182,1183,
        3,444,222,0,1183,1185,1,0,0,0,1184,1156,1,0,0,0,1184,1180,1,0,0,
        0,1184,1181,1,0,0,0,1184,1185,1,0,0,0,1185,1254,1,0,0,0,1186,1187,
        5,70,0,0,1187,1254,3,582,291,0,1188,1189,5,140,0,0,1189,1192,3,52,
        26,0,1190,1191,5,143,0,0,1191,1193,3,52,26,0,1192,1190,1,0,0,0,1193,
        1194,1,0,0,0,1194,1192,1,0,0,0,1194,1195,1,0,0,0,1195,1196,1,0,0,
        0,1196,1197,5,141,0,0,1197,1254,1,0,0,0,1198,1199,5,105,0,0,1199,
        1203,5,140,0,0,1200,1204,3,146,73,0,1201,1204,3,12,6,0,1202,1204,
        5,116,0,0,1203,1200,1,0,0,0,1203,1201,1,0,0,0,1203,1202,1,0,0,0,
        1204,1205,1,0,0,0,1205,1254,5,141,0,0,1206,1207,5,26,0,0,1207,1208,
        5,140,0,0,1208,1209,3,56,28,0,1209,1210,5,141,0,0,1210,1254,1,0,
        0,0,1211,1212,5,109,0,0,1212,1213,5,140,0,0,1213,1214,3,56,28,0,
        1214,1215,5,141,0,0,1215,1254,1,0,0,0,1216,1221,5,31,0,0,1217,1218,
        5,140,0,0,1218,1219,3,12,6,0,1219,1220,5,141,0,0,1220,1222,1,0,0,
        0,1221,1217,1,0,0,0,1221,1222,1,0,0,0,1222,1254,1,0,0,0,1223,1225,
        5,16,0,0,1224,1223,1,0,0,0,1224,1225,1,0,0,0,1225,1226,1,0,0,0,1226,
        1232,5,32,0,0,1227,1229,5,140,0,0,1228,1230,3,160,80,0,1229,1228,
        1,0,0,0,1229,1230,1,0,0,0,1230,1231,1,0,0,0,1231,1233,5,141,0,0,
        1232,1227,1,0,0,0,1232,1233,1,0,0,0,1233,1234,1,0,0,0,1234,1254,
        3,236,118,0,1235,1236,5,95,0,0,1236,1237,5,140,0,0,1237,1238,3,12,
        6,0,1238,1239,5,141,0,0,1239,1254,1,0,0,0,1240,1241,5,68,0,0,1241,
        1247,5,140,0,0,1242,1243,3,584,292,0,1243,1244,5,142,0,0,1244,1246,
        1,0,0,0,1245,1242,1,0,0,0,1246,1249,1,0,0,0,1247,1245,1,0,0,0,1247,
        1248,1,0,0,0,1248,1250,1,0,0,0,1249,1247,1,0,0,0,1250,1251,3,584,
        292,0,1251,1252,5,141,0,0,1252,1254,1,0,0,0,1253,1130,1,0,0,0,1253,
        1131,1,0,0,0,1253,1135,1,0,0,0,1253,1139,1,0,0,0,1253,1140,1,0,0,
        0,1253,1141,1,0,0,0,1253,1142,1,0,0,0,1253,1143,1,0,0,0,1253,1155,
        1,0,0,0,1253,1186,1,0,0,0,1253,1188,1,0,0,0,1253,1198,1,0,0,0,1253,
        1206,1,0,0,0,1253,1211,1,0,0,0,1253,1216,1,0,0,0,1253,1224,1,0,0,
        0,1253,1235,1,0,0,0,1253,1240,1,0,0,0,1254,111,1,0,0,0,1255,1258,
        3,56,28,0,1256,1258,3,114,57,0,1257,1255,1,0,0,0,1257,1256,1,0,0,
        0,1258,113,1,0,0,0,1259,1260,5,102,0,0,1260,1261,3,56,28,0,1261,
        115,1,0,0,0,1262,1264,5,159,0,0,1263,1262,1,0,0,0,1263,1264,1,0,
        0,0,1264,1265,1,0,0,0,1265,1266,5,142,0,0,1266,1268,3,584,292,0,
        1267,1269,3,48,24,0,1268,1267,1,0,0,0,1268,1269,1,0,0,0,1269,117,
        1,0,0,0,1270,1272,5,159,0,0,1271,1270,1,0,0,0,1271,1272,1,0,0,0,
        1272,1273,1,0,0,0,1273,1274,5,138,0,0,1274,1279,3,120,60,0,1275,
        1276,5,143,0,0,1276,1278,3,120,60,0,1277,1275,1,0,0,0,1278,1281,
        1,0,0,0,1279,1277,1,0,0,0,1279,1280,1,0,0,0,1280,1282,1,0,0,0,1281,
        1279,1,0,0,0,1282,1283,5,139,0,0,1283,119,1,0,0,0,1284,1285,3,584,
        292,0,1285,1286,5,144,0,0,1286,1288,1,0,0,0,1287,1284,1,0,0,0,1287,
        1288,1,0,0,0,1288,1289,1,0,0,0,1289,1290,3,56,28,0,1290,121,1,0,
        0,0,1291,1292,7,7,0,0,1292,123,1,0,0,0,1293,1298,3,56,28,0,1294,
        1295,5,143,0,0,1295,1297,3,56,28,0,1296,1294,1,0,0,0,1297,1300,1,
        0,0,0,1298,1296,1,0,0,0,1298,1299,1,0,0,0,1299,125,1,0,0,0,1300,
        1298,1,0,0,0,1301,1304,3,128,64,0,1302,1304,3,136,68,0,1303,1301,
        1,0,0,0,1303,1302,1,0,0,0,1304,127,1,0,0,0,1305,1310,5,136,0,0,1306,
        1308,3,130,65,0,1307,1309,5,143,0,0,1308,1307,1,0,0,0,1308,1309,
        1,0,0,0,1309,1311,1,0,0,0,1310,1306,1,0,0,0,1310,1311,1,0,0,0,1311,
        1312,1,0,0,0,1312,1313,5,137,0,0,1313,129,1,0,0,0,1314,1319,3,132,
        66,0,1315,1316,5,143,0,0,1316,1318,3,132,66,0,1317,1315,1,0,0,0,
        1318,1321,1,0,0,0,1319,1317,1,0,0,0,1319,1320,1,0,0,0,1320,131,1,
        0,0,0,1321,1319,1,0,0,0,1322,1328,3,584,292,0,1323,1324,5,138,0,
        0,1324,1325,3,56,28,0,1325,1326,5,139,0,0,1326,1328,1,0,0,0,1327,
        1322,1,0,0,0,1327,1323,1,0,0,0,1328,1329,1,0,0,0,1329,1330,5,156,
        0,0,1330,1331,3,134,67,0,1331,133,1,0,0,0,1332,1336,3,56,28,0,1333,
        1336,3,126,63,0,1334,1336,3,20,10,0,1335,1332,1,0,0,0,1335,1333,
        1,0,0,0,1335,1334,1,0,0,0,1336,135,1,0,0,0,1337,1338,5,136,0,0,1338,
        1343,3,138,69,0,1339,1340,5,143,0,0,1340,1342,3,138,69,0,1341,1339,
        1,0,0,0,1342,1345,1,0,0,0,1343,1341,1,0,0,0,1343,1344,1,0,0,0,1344,
        1347,1,0,0,0,1345,1343,1,0,0,0,1346,1348,5,143,0,0,1347,1346,1,0,
        0,0,1347,1348,1,0,0,0,1348,1349,1,0,0,0,1349,1350,5,137,0,0,1350,
        137,1,0,0,0,1351,1358,3,60,30,0,1352,1353,5,136,0,0,1353,1354,3,
        124,62,0,1354,1355,5,137,0,0,1355,1358,1,0,0,0,1356,1358,3,56,28,
        0,1357,1351,1,0,0,0,1357,1352,1,0,0,0,1357,1356,1,0,0,0,1358,139,
        1,0,0,0,1359,1364,5,136,0,0,1360,1362,3,142,71,0,1361,1363,5,143,
        0,0,1362,1361,1,0,0,0,1362,1363,1,0,0,0,1363,1365,1,0,0,0,1364,1360,
        1,0,0,0,1364,1365,1,0,0,0,1365,1366,1,0,0,0,1366,1367,5,137,0,0,
        1367,141,1,0,0,0,1368,1373,3,144,72,0,1369,1370,5,143,0,0,1370,1372,
        3,144,72,0,1371,1369,1,0,0,0,1372,1375,1,0,0,0,1373,1371,1,0,0,0,
        1373,1374,1,0,0,0,1374,143,1,0,0,0,1375,1373,1,0,0,0,1376,1388,3,
        108,54,0,1377,1380,3,584,292,0,1378,1379,5,156,0,0,1379,1381,3,56,
        28,0,1380,1378,1,0,0,0,1380,1381,1,0,0,0,1381,1388,1,0,0,0,1382,
        1383,3,584,292,0,1383,1384,5,138,0,0,1384,1385,5,126,0,0,1385,1386,
        5,139,0,0,1386,1388,1,0,0,0,1387,1376,1,0,0,0,1387,1377,1,0,0,0,
        1387,1382,1,0,0,0,1388,145,1,0,0,0,1389,1398,3,584,292,0,1390,1392,
        3,148,74,0,1391,1390,1,0,0,0,1391,1392,1,0,0,0,1392,1399,1,0,0,0,
        1393,1394,5,160,0,0,1394,1396,3,584,292,0,1395,1397,3,148,74,0,1396,
        1395,1,0,0,0,1396,1397,1,0,0,0,1397,1399,1,0,0,0,1398,1391,1,0,0,
        0,1398,1393,1,0,0,0,1399,1407,1,0,0,0,1400,1401,5,142,0,0,1401,1403,
        3,584,292,0,1402,1404,3,148,74,0,1403,1402,1,0,0,0,1403,1404,1,0,
        0,0,1404,1406,1,0,0,0,1405,1400,1,0,0,0,1406,1409,1,0,0,0,1407,1405,
        1,0,0,0,1407,1408,1,0,0,0,1408,147,1,0,0,0,1409,1407,1,0,0,0,1410,
        1414,5,157,0,0,1411,1413,5,143,0,0,1412,1411,1,0,0,0,1413,1416,1,
        0,0,0,1414,1412,1,0,0,0,1414,1415,1,0,0,0,1415,1417,1,0,0,0,1416,
        1414,1,0,0,0,1417,1418,5,158,0,0,1418,149,1,0,0,0,1419,1424,3,18,
        9,0,1420,1423,3,442,221,0,1421,1423,5,148,0,0,1422,1420,1,0,0,0,
        1422,1421,1,0,0,0,1423,1426,1,0,0,0,1424,1422,1,0,0,0,1424,1425,
        1,0,0,0,1425,1428,1,0,0,0,1426,1424,1,0,0,0,1427,1429,5,159,0,0,
        1428,1427,1,0,0,0,1428,1429,1,0,0,0,1429,1431,1,0,0,0,1430,1432,
        3,152,76,0,1431,1430,1,0,0,0,1431,1432,1,0,0,0,1432,1434,1,0,0,0,
        1433,1435,3,584,292,0,1434,1433,1,0,0,0,1434,1435,1,0,0,0,1435,151,
        1,0,0,0,1436,1437,5,136,0,0,1437,1442,3,154,77,0,1438,1439,5,143,
        0,0,1439,1441,3,154,77,0,1440,1438,1,0,0,0,1441,1444,1,0,0,0,1442,
        1440,1,0,0,0,1442,1443,1,0,0,0,1443,1445,1,0,0,0,1444,1442,1,0,0,
        0,1445,1446,5,137,0,0,1446,153,1,0,0,0,1447,1448,3,584,292,0,1448,
        1449,5,144,0,0,1449,1450,3,56,28,0,1450,155,1,0,0,0,1451,1453,3,
        470,235,0,1452,1451,1,0,0,0,1452,1453,1,0,0,0,1453,1455,1,0,0,0,
        1454,1456,5,16,0,0,1455,1454,1,0,0,0,1455,1456,1,0,0,0,1456,1458,
        1,0,0,0,1457,1459,5,97,0,0,1458,1457,1,0,0,0,1458,1459,1,0,0,0,1459,
        1460,1,0,0,0,1460,1461,3,158,79,0,1461,1462,3,492,246,0,1462,1463,
        3,166,83,0,1463,157,1,0,0,0,1464,1465,5,140,0,0,1465,1476,5,141,
        0,0,1466,1467,5,140,0,0,1467,1468,3,160,80,0,1468,1469,5,141,0,0,
        1469,1476,1,0,0,0,1470,1471,5,140,0,0,1471,1472,3,164,82,0,1472,
        1473,5,141,0,0,1473,1476,1,0,0,0,1474,1476,3,584,292,0,1475,1464,
        1,0,0,0,1475,1466,1,0,0,0,1475,1470,1,0,0,0,1475,1474,1,0,0,0,1476,
        159,1,0,0,0,1477,1482,3,162,81,0,1478,1479,5,143,0,0,1479,1481,3,
        162,81,0,1480,1478,1,0,0,0,1481,1484,1,0,0,0,1482,1480,1,0,0,0,1482,
        1483,1,0,0,0,1483,161,1,0,0,0,1484,1482,1,0,0,0,1485,1487,3,470,
        235,0,1486,1485,1,0,0,0,1486,1487,1,0,0,0,1487,1493,1,0,0,0,1488,
        1494,5,87,0,0,1489,1494,5,78,0,0,1490,1494,5,57,0,0,1491,1492,5,
        87,0,0,1492,1494,5,85,0,0,1493,1488,1,0,0,0,1493,1489,1,0,0,0,1493,
        1490,1,0,0,0,1493,1491,1,0,0,0,1493,1494,1,0,0,0,1494,1496,1,0,0,
        0,1495,1497,3,12,6,0,1496,1495,1,0,0,0,1496,1497,1,0,0,0,1497,1498,
        1,0,0,0,1498,1501,3,584,292,0,1499,1500,5,156,0,0,1500,1502,3,56,
        28,0,1501,1499,1,0,0,0,1501,1502,1,0,0,0,1502,163,1,0,0,0,1503,1508,
        3,584,292,0,1504,1505,5,143,0,0,1505,1507,3,584,292,0,1506,1504,
        1,0,0,0,1507,1510,1,0,0,0,1508,1506,1,0,0,0,1508,1509,1,0,0,0,1509,
        165,1,0,0,0,1510,1508,1,0,0,0,1511,1514,3,112,56,0,1512,1514,3,236,
        118,0,1513,1511,1,0,0,0,1513,1512,1,0,0,0,1514,167,1,0,0,0,1515,
        1516,3,170,85,0,1516,1517,3,172,86,0,1517,169,1,0,0,0,1518,1520,
        5,50,0,0,1519,1521,3,12,6,0,1520,1519,1,0,0,0,1520,1521,1,0,0,0,
        1521,1522,1,0,0,0,1522,1523,3,584,292,0,1523,1524,5,57,0,0,1524,
        1525,3,56,28,0,1525,171,1,0,0,0,1526,1528,3,174,87,0,1527,1526,1,
        0,0,0,1528,1531,1,0,0,0,1529,1527,1,0,0,0,1529,1530,1,0,0,0,1530,
        1532,1,0,0,0,1531,1529,1,0,0,0,1532,1534,3,186,93,0,1533,1535,3,
        188,94,0,1534,1533,1,0,0,0,1534,1535,1,0,0,0,1535,173,1,0,0,0,1536,
        1542,3,170,85,0,1537,1542,3,176,88,0,1538,1542,3,178,89,0,1539,1542,
        3,180,90,0,1540,1542,3,182,91,0,1541,1536,1,0,0,0,1541,1537,1,0,
        0,0,1541,1538,1,0,0,0,1541,1539,1,0,0,0,1541,1540,1,0,0,0,1542,175,
        1,0,0,0,1543,1544,5,65,0,0,1544,1545,3,584,292,0,1545,1546,5,156,
        0,0,1546,1547,3,56,28,0,1547,177,1,0,0,0,1548,1549,5,119,0,0,1549,
        1550,3,56,28,0,1550,179,1,0,0,0,1551,1553,5,64,0,0,1552,1554,3,12,
        6,0,1553,1552,1,0,0,0,1553,1554,1,0,0,0,1554,1555,1,0,0,0,1555,1556,
        3,584,292,0,1556,1557,5,57,0,0,1557,1558,3,56,28,0,1558,1559,5,74,
        0,0,1559,1560,3,56,28,0,1560,1561,5,39,0,0,1561,1564,3,56,28,0,1562,
        1563,5,62,0,0,1563,1565,3,584,292,0,1564,1562,1,0,0,0,1564,1565,
        1,0,0,0,1565,181,1,0,0,0,1566,1567,5,77,0,0,1567,1572,3,184,92,0,
        1568,1569,5,143,0,0,1569,1571,3,184,92,0,1570,1568,1,0,0,0,1571,
        1574,1,0,0,0,1572,1570,1,0,0,0,1572,1573,1,0,0,0,1573,183,1,0,0,
        0,1574,1572,1,0,0,0,1575,1577,3,56,28,0,1576,1578,7,8,0,0,1577,1576,
        1,0,0,0,1577,1578,1,0,0,0,1578,185,1,0,0,0,1579,1580,5,92,0,0,1580,
        1587,3,56,28,0,1581,1582,5,54,0,0,1582,1583,3,56,28,0,1583,1584,
        5,21,0,0,1584,1585,3,56,28,0,1585,1587,1,0,0,0,1586,1579,1,0,0,0,
        1586,1581,1,0,0,0,1587,187,1,0,0,0,1588,1589,5,62,0,0,1589,1590,
        3,584,292,0,1590,1591,3,172,86,0,1591,189,1,0,0,0,1592,1598,3,202,
        101,0,1593,1598,3,192,96,0,1594,1598,3,204,102,0,1595,1598,3,578,
        289,0,1596,1598,3,294,147,0,1597,1592,1,0,0,0,1597,1593,1,0,0,0,
        1597,1594,1,0,0,0,1597,1595,1,0,0,0,1597,1596,1,0,0,0,1598,191,1,
        0,0,0,1599,1600,3,238,119,0,1600,1601,5,145,0,0,1601,1607,1,0,0,
        0,1602,1603,3,250,125,0,1603,1604,5,145,0,0,1604,1607,1,0,0,0,1605,
        1607,3,194,97,0,1606,1599,1,0,0,0,1606,1602,1,0,0,0,1606,1605,1,
        0,0,0,1607,193,1,0,0,0,1608,1609,3,196,98,0,1609,1610,3,200,100,
        0,1610,195,1,0,0,0,1611,1613,3,198,99,0,1612,1611,1,0,0,0,1612,1613,
        1,0,0,0,1613,1614,1,0,0,0,1614,1615,3,392,196,0,1615,1617,3,584,
        292,0,1616,1618,3,308,154,0,1617,1616,1,0,0,0,1617,1618,1,0,0,0,
        1618,1619,1,0,0,0,1619,1621,5,140,0,0,1620,1622,3,398,199,0,1621,
        1620,1,0,0,0,1621,1622,1,0,0,0,1622,1623,1,0,0,0,1623,1625,5,141,
        0,0,1624,1626,3,316,158,0,1625,1624,1,0,0,0,1625,1626,1,0,0,0,1626,
        197,1,0,0,0,1627,1629,7,9,0,0,1628,1630,5,97,0,0,1629,1628,1,0,0,
        0,1629,1630,1,0,0,0,1630,1638,1,0,0,0,1631,1633,5,97,0,0,1632,1634,
        7,9,0,0,1633,1632,1,0,0,0,1633,1634,1,0,0,0,1634,1638,1,0,0,0,1635,
        1636,5,111,0,0,1636,1638,5,99,0,0,1637,1627,1,0,0,0,1637,1631,1,
        0,0,0,1637,1635,1,0,0,0,1638,199,1,0,0,0,1639,1645,3,236,118,0,1640,
        1641,3,492,246,0,1641,1642,3,112,56,0,1642,1643,5,145,0,0,1643,1645,
        1,0,0,0,1644,1639,1,0,0,0,1644,1640,1,0,0,0,1645,201,1,0,0,0,1646,
        1647,3,584,292,0,1647,1648,5,144,0,0,1648,1649,3,190,95,0,1649,203,
        1,0,0,0,1650,1744,3,236,118,0,1651,1744,3,206,103,0,1652,1653,3,
        56,28,0,1653,1654,5,145,0,0,1654,1744,1,0,0,0,1655,1744,3,208,104,
        0,1656,1657,5,100,0,0,1657,1658,5,140,0,0,1658,1659,3,56,28,0,1659,
        1660,5,141,0,0,1660,1664,5,136,0,0,1661,1663,3,252,126,0,1662,1661,
        1,0,0,0,1663,1666,1,0,0,0,1664,1662,1,0,0,0,1664,1665,1,0,0,0,1665,
        1667,1,0,0,0,1666,1664,1,0,0,0,1667,1668,5,137,0,0,1668,1744,1,0,
        0,0,1669,1670,5,120,0,0,1670,1671,5,140,0,0,1671,1672,3,56,28,0,
        1672,1673,5,141,0,0,1673,1674,3,204,102,0,1674,1744,1,0,0,0,1675,
        1676,5,34,0,0,1676,1677,3,204,102,0,1677,1678,5,120,0,0,1678,1679,
        5,140,0,0,1679,1680,3,56,28,0,1680,1681,5,141,0,0,1681,1682,5,145,
        0,0,1682,1744,1,0,0,0,1683,1684,5,48,0,0,1684,1686,5,140,0,0,1685,
        1687,3,260,130,0,1686,1685,1,0,0,0,1686,1687,1,0,0,0,1687,1688,1,
        0,0,0,1688,1690,5,145,0,0,1689,1691,3,56,28,0,1690,1689,1,0,0,0,
        1690,1691,1,0,0,0,1691,1692,1,0,0,0,1692,1694,5,145,0,0,1693,1695,
        3,262,131,0,1694,1693,1,0,0,0,1694,1695,1,0,0,0,1695,1696,1,0,0,
        0,1696,1697,5,141,0,0,1697,1744,3,204,102,0,1698,1700,5,17,0,0,1699,
        1698,1,0,0,0,1699,1700,1,0,0,0,1700,1701,1,0,0,0,1701,1702,5,49,
        0,0,1702,1703,5,140,0,0,1703,1706,3,244,122,0,1704,1707,3,584,292,
        0,1705,1707,3,26,13,0,1706,1704,1,0,0,0,1706,1705,1,0,0,0,1707,1708,
        1,0,0,0,1708,1709,5,57,0,0,1709,1710,3,56,28,0,1710,1711,5,141,0,
        0,1711,1712,3,204,102,0,1712,1744,1,0,0,0,1713,1714,5,20,0,0,1714,
        1744,5,145,0,0,1715,1716,5,29,0,0,1716,1744,5,145,0,0,1717,1722,
        5,52,0,0,1718,1723,3,584,292,0,1719,1720,5,23,0,0,1720,1723,3,56,
        28,0,1721,1723,5,31,0,0,1722,1718,1,0,0,0,1722,1719,1,0,0,0,1722,
        1721,1,0,0,0,1723,1724,1,0,0,0,1724,1744,5,145,0,0,1725,1727,5,89,
        0,0,1726,1728,3,56,28,0,1727,1726,1,0,0,0,1727,1728,1,0,0,0,1728,
        1729,1,0,0,0,1729,1744,5,145,0,0,1730,1732,5,102,0,0,1731,1733,3,
        56,28,0,1732,1731,1,0,0,0,1732,1733,1,0,0,0,1733,1734,1,0,0,0,1734,
        1744,5,145,0,0,1735,1744,3,234,117,0,1736,1744,3,210,105,0,1737,
        1744,3,212,106,0,1738,1744,3,214,107,0,1739,1744,3,226,113,0,1740,
        1744,3,228,114,0,1741,1744,3,232,116,0,1742,1744,3,230,115,0,1743,
        1650,1,0,0,0,1743,1651,1,0,0,0,1743,1652,1,0,0,0,1743,1655,1,0,0,
        0,1743,1656,1,0,0,0,1743,1669,1,0,0,0,1743,1675,1,0,0,0,1743,1683,
        1,0,0,0,1743,1699,1,0,0,0,1743,1713,1,0,0,0,1743,1715,1,0,0,0,1743,
        1717,1,0,0,0,1743,1725,1,0,0,0,1743,1730,1,0,0,0,1743,1735,1,0,0,
        0,1743,1736,1,0,0,0,1743,1737,1,0,0,0,1743,1738,1,0,0,0,1743,1739,
        1,0,0,0,1743,1740,1,0,0,0,1743,1741,1,0,0,0,1743,1742,1,0,0,0,1744,
        205,1,0,0,0,1745,1746,5,145,0,0,1746,207,1,0,0,0,1747,1748,5,55,
        0,0,1748,1750,5,140,0,0,1749,1751,5,154,0,0,1750,1749,1,0,0,0,1750,
        1751,1,0,0,0,1751,1752,1,0,0,0,1752,1753,3,56,28,0,1753,1754,5,141,
        0,0,1754,1755,3,204,102,0,1755,1768,1,0,0,0,1756,1757,5,55,0,0,1757,
        1759,5,140,0,0,1758,1760,5,154,0,0,1759,1758,1,0,0,0,1759,1760,1,
        0,0,0,1760,1761,1,0,0,0,1761,1762,3,56,28,0,1762,1763,5,141,0,0,
        1763,1764,3,204,102,0,1764,1765,5,37,0,0,1765,1766,3,204,102,0,1766,
        1768,1,0,0,0,1767,1747,1,0,0,0,1767,1756,1,0,0,0,1768,209,1,0,0,
        0,1769,1770,5,26,0,0,1770,1771,3,236,118,0,1771,211,1,0,0,0,1772,
        1773,5,109,0,0,1773,1774,3,236,118,0,1774,213,1,0,0,0,1775,1776,
        5,66,0,0,1776,1777,5,140,0,0,1777,1778,3,56,28,0,1778,1779,5,141,
        0,0,1779,1780,3,204,102,0,1780,215,1,0,0,0,1781,1784,3,12,6,0,1782,
        1784,3,482,241,0,1783,1781,1,0,0,0,1783,1782,1,0,0,0,1784,217,1,
        0,0,0,1785,1786,5,96,0,0,1786,1787,3,12,6,0,1787,1788,5,138,0,0,
        1788,1789,3,56,28,0,1789,1790,5,139,0,0,1790,1802,1,0,0,0,1791,1793,
        5,96,0,0,1792,1794,3,12,6,0,1793,1792,1,0,0,0,1793,1794,1,0,0,0,
        1794,1795,1,0,0,0,1795,1797,5,138,0,0,1796,1798,3,56,28,0,1797,1796,
        1,0,0,0,1797,1798,1,0,0,0,1798,1799,1,0,0,0,1799,1800,5,139,0,0,
        1800,1802,3,220,110,0,1801,1785,1,0,0,0,1801,1791,1,0,0,0,1802,219,
        1,0,0,0,1803,1804,5,136,0,0,1804,1805,3,222,111,0,1805,1806,5,137,
        0,0,1806,221,1,0,0,0,1807,1812,3,224,112,0,1808,1809,5,143,0,0,1809,
        1811,3,224,112,0,1810,1808,1,0,0,0,1811,1814,1,0,0,0,1812,1810,1,
        0,0,0,1812,1813,1,0,0,0,1813,1816,1,0,0,0,1814,1812,1,0,0,0,1815,
        1817,5,143,0,0,1816,1815,1,0,0,0,1816,1817,1,0,0,0,1817,223,1,0,
        0,0,1818,1819,3,56,28,0,1819,225,1,0,0,0,1820,1821,5,113,0,0,1821,
        1822,5,140,0,0,1822,1823,3,274,137,0,1823,1824,5,141,0,0,1824,1825,
        3,204,102,0,1825,227,1,0,0,0,1826,1827,5,121,0,0,1827,1828,5,89,
        0,0,1828,1829,3,56,28,0,1829,1830,5,145,0,0,1830,1835,1,0,0,0,1831,
        1832,5,121,0,0,1832,1833,5,20,0,0,1833,1835,5,145,0,0,1834,1826,
        1,0,0,0,1834,1831,1,0,0,0,1835,229,1,0,0,0,1836,1837,5,45,0,0,1837,
        1838,5,140,0,0,1838,1839,3,482,241,0,1839,1840,3,484,242,0,1840,
        1841,5,141,0,0,1841,1842,3,204,102,0,1842,231,1,0,0,0,1843,1844,
        5,111,0,0,1844,1845,3,236,118,0,1845,233,1,0,0,0,1846,1847,5,104,
        0,0,1847,1848,3,236,118,0,1848,1849,3,264,132,0,1849,1858,1,0,0,
        0,1850,1851,5,104,0,0,1851,1853,3,236,118,0,1852,1854,3,264,132,
        0,1853,1852,1,0,0,0,1853,1854,1,0,0,0,1854,1855,1,0,0,0,1855,1856,
        3,272,136,0,1856,1858,1,0,0,0,1857,1846,1,0,0,0,1857,1850,1,0,0,
        0,1858,235,1,0,0,0,1859,1861,5,136,0,0,1860,1862,3,258,129,0,1861,
        1860,1,0,0,0,1861,1862,1,0,0,0,1862,1863,1,0,0,0,1863,1864,5,137,
        0,0,1864,237,1,0,0,0,1865,1870,5,113,0,0,1866,1870,5,87,0,0,1867,
        1868,5,87,0,0,1868,1870,5,85,0,0,1869,1865,1,0,0,0,1869,1866,1,0,
        0,0,1869,1867,1,0,0,0,1869,1870,1,0,0,0,1870,1871,1,0,0,0,1871,1872,
        3,244,122,0,1872,1877,3,246,123,0,1873,1874,5,143,0,0,1874,1876,
        3,246,123,0,1875,1873,1,0,0,0,1876,1879,1,0,0,0,1877,1875,1,0,0,
        0,1877,1878,1,0,0,0,1878,1909,1,0,0,0,1879,1877,1,0,0,0,1880,1881,
        5,45,0,0,1881,1882,3,482,241,0,1882,1883,3,484,242,0,1883,1909,1,
        0,0,0,1884,1885,5,114,0,0,1885,1886,3,22,11,0,1886,1887,5,156,0,
        0,1887,1888,3,56,28,0,1888,1909,1,0,0,0,1889,1909,3,240,120,0,1890,
        1892,3,470,235,0,1891,1890,1,0,0,0,1891,1892,1,0,0,0,1892,1893,1,
        0,0,0,1893,1894,3,12,6,0,1894,1895,3,584,292,0,1895,1896,5,156,0,
        0,1896,1897,3,156,78,0,1897,1909,1,0,0,0,1898,1900,3,470,235,0,1899,
        1898,1,0,0,0,1899,1900,1,0,0,0,1900,1901,1,0,0,0,1901,1902,3,12,
        6,0,1902,1903,3,584,292,0,1903,1906,5,156,0,0,1904,1907,3,56,28,
        0,1905,1907,3,578,289,0,1906,1904,1,0,0,0,1906,1905,1,0,0,0,1907,
        1909,1,0,0,0,1908,1869,1,0,0,0,1908,1880,1,0,0,0,1908,1884,1,0,0,
        0,1908,1889,1,0,0,0,1908,1891,1,0,0,0,1908,1899,1,0,0,0,1909,239,
        1,0,0,0,1910,1911,5,111,0,0,1911,1912,5,136,0,0,1912,1913,3,242,
        121,0,1913,1914,5,137,0,0,1914,241,1,0,0,0,1915,1916,5,32,0,0,1916,
        1917,5,148,0,0,1917,1918,5,157,0,0,1918,1919,3,16,8,0,1919,1920,
        5,158,0,0,1920,1921,3,584,292,0,1921,1922,5,156,0,0,1922,1923,5,
        151,0,0,1923,1924,3,584,292,0,1924,1925,5,145,0,0,1925,243,1,0,0,
        0,1926,1929,5,114,0,0,1927,1929,3,12,6,0,1928,1926,1,0,0,0,1928,
        1927,1,0,0,0,1929,245,1,0,0,0,1930,1936,3,584,292,0,1931,1933,5,
        156,0,0,1932,1934,5,87,0,0,1933,1932,1,0,0,0,1933,1934,1,0,0,0,1934,
        1935,1,0,0,0,1935,1937,3,248,124,0,1936,1931,1,0,0,0,1936,1937,1,
        0,0,0,1937,247,1,0,0,0,1938,1944,3,56,28,0,1939,1944,3,444,222,0,
        1940,1944,3,220,110,0,1941,1944,3,26,13,0,1942,1944,3,156,78,0,1943,
        1938,1,0,0,0,1943,1939,1,0,0,0,1943,1940,1,0,0,0,1943,1941,1,0,0,
        0,1943,1942,1,0,0,0,1944,249,1,0,0,0,1945,1946,5,28,0,0,1946,1947,
        3,12,6,0,1947,1948,3,382,191,0,1948,251,1,0,0,0,1949,1951,3,254,
        127,0,1950,1949,1,0,0,0,1951,1952,1,0,0,0,1952,1950,1,0,0,0,1952,
        1953,1,0,0,0,1953,1954,1,0,0,0,1954,1955,3,258,129,0,1955,253,1,
        0,0,0,1956,1957,5,23,0,0,1957,1959,3,56,28,0,1958,1960,3,256,128,
        0,1959,1958,1,0,0,0,1959,1960,1,0,0,0,1960,1961,1,0,0,0,1961,1962,
        5,144,0,0,1962,1973,1,0,0,0,1963,1964,5,23,0,0,1964,1966,3,324,162,
        0,1965,1967,3,256,128,0,1966,1965,1,0,0,0,1966,1967,1,0,0,0,1967,
        1968,1,0,0,0,1968,1969,5,144,0,0,1969,1973,1,0,0,0,1970,1971,5,31,
        0,0,1971,1973,5,144,0,0,1972,1956,1,0,0,0,1972,1963,1,0,0,0,1972,
        1970,1,0,0,0,1973,255,1,0,0,0,1974,1975,5,118,0,0,1975,1976,3,56,
        28,0,1976,257,1,0,0,0,1977,1979,3,190,95,0,1978,1977,1,0,0,0,1979,
        1980,1,0,0,0,1980,1978,1,0,0,0,1980,1981,1,0,0,0,1981,259,1,0,0,
        0,1982,1992,3,238,119,0,1983,1988,3,56,28,0,1984,1985,5,143,0,0,
        1985,1987,3,56,28,0,1986,1984,1,0,0,0,1987,1990,1,0,0,0,1988,1986,
        1,0,0,0,1988,1989,1,0,0,0,1989,1992,1,0,0,0,1990,1988,1,0,0,0,1991,
        1982,1,0,0,0,1991,1983,1,0,0,0,1992,261,1,0,0,0,1993,1998,3,56,28,
        0,1994,1995,5,143,0,0,1995,1997,3,56,28,0,1996,1994,1,0,0,0,1997,
        2000,1,0,0,0,1998,1996,1,0,0,0,1998,1999,1,0,0,0,1999,263,1,0,0,
        0,2000,1998,1,0,0,0,2001,2005,3,266,133,0,2002,2004,3,266,133,0,
        2003,2002,1,0,0,0,2004,2007,1,0,0,0,2005,2003,1,0,0,0,2005,2006,
        1,0,0,0,2006,2009,1,0,0,0,2007,2005,1,0,0,0,2008,2010,3,268,134,
        0,2009,2008,1,0,0,0,2009,2010,1,0,0,0,2010,2013,1,0,0,0,2011,2013,
        3,268,134,0,2012,2001,1,0,0,0,2012,2011,1,0,0,0,2013,265,1,0,0,0,
        2014,2015,5,24,0,0,2015,2016,5,140,0,0,2016,2018,3,46,23,0,2017,
        2019,3,584,292,0,2018,2017,1,0,0,0,2018,2019,1,0,0,0,2019,2020,1,
        0,0,0,2020,2022,5,141,0,0,2021,2023,3,270,135,0,2022,2021,1,0,0,
        0,2022,2023,1,0,0,0,2023,2024,1,0,0,0,2024,2025,3,236,118,0,2025,
        267,1,0,0,0,2026,2028,5,24,0,0,2027,2029,3,270,135,0,2028,2027,1,
        0,0,0,2028,2029,1,0,0,0,2029,2030,1,0,0,0,2030,2031,3,236,118,0,
        2031,269,1,0,0,0,2032,2033,5,118,0,0,2033,2034,5,140,0,0,2034,2035,
        3,56,28,0,2035,2036,5,141,0,0,2036,271,1,0,0,0,2037,2038,5,44,0,
        0,2038,2039,3,236,118,0,2039,273,1,0,0,0,2040,2043,3,238,119,0,2041,
        2043,3,56,28,0,2042,2040,1,0,0,0,2042,2041,1,0,0,0,2043,275,1,0,
        0,0,2044,2045,5,69,0,0,2045,2046,3,278,139,0,2046,2048,3,280,140,
        0,2047,2049,5,145,0,0,2048,2047,1,0,0,0,2048,2049,1,0,0,0,2049,277,
        1,0,0,0,2050,2055,3,584,292,0,2051,2052,5,142,0,0,2052,2054,3,584,
        292,0,2053,2051,1,0,0,0,2054,2057,1,0,0,0,2055,2053,1,0,0,0,2055,
        2056,1,0,0,0,2056,279,1,0,0,0,2057,2055,1,0,0,0,2058,2060,5,136,
        0,0,2059,2061,3,282,141,0,2060,2059,1,0,0,0,2060,2061,1,0,0,0,2061,
        2063,1,0,0,0,2062,2064,3,286,143,0,2063,2062,1,0,0,0,2063,2064,1,
        0,0,0,2064,2066,1,0,0,0,2065,2067,3,290,145,0,2066,2065,1,0,0,0,
        2066,2067,1,0,0,0,2067,2068,1,0,0,0,2068,2071,5,137,0,0,2069,2071,
        5,145,0,0,2070,2058,1,0,0,0,2070,2069,1,0,0,0,2071,281,1,0,0,0,2072,
        2074,3,284,142,0,2073,2072,1,0,0,0,2074,2075,1,0,0,0,2075,2073,1,
        0,0,0,2075,2076,1,0,0,0,2076,283,1,0,0,0,2077,2078,5,42,0,0,2078,
        2079,5,12,0,0,2079,2080,3,584,292,0,2080,2081,5,145,0,0,2081,285,
        1,0,0,0,2082,2084,3,288,144,0,2083,2082,1,0,0,0,2084,2085,1,0,0,
        0,2085,2083,1,0,0,0,2085,2086,1,0,0,0,2086,287,1,0,0,0,2087,2089,
        5,53,0,0,2088,2087,1,0,0,0,2088,2089,1,0,0,0,2089,2090,1,0,0,0,2090,
        2091,5,113,0,0,2091,2092,3,584,292,0,2092,2095,5,156,0,0,2093,2096,
        3,10,5,0,2094,2096,3,20,10,0,2095,2093,1,0,0,0,2095,2094,1,0,0,0,
        2096,2097,1,0,0,0,2097,2098,5,145,0,0,2098,2115,1,0,0,0,2099,2101,
        5,53,0,0,2100,2099,1,0,0,0,2100,2101,1,0,0,0,2101,2102,1,0,0,0,2102,
        2103,5,113,0,0,2103,2104,3,10,5,0,2104,2105,5,145,0,0,2105,2115,
        1,0,0,0,2106,2108,5,53,0,0,2107,2106,1,0,0,0,2107,2108,1,0,0,0,2108,
        2109,1,0,0,0,2109,2110,5,113,0,0,2110,2111,5,97,0,0,2111,2112,3,
        10,5,0,2112,2113,5,145,0,0,2113,2115,1,0,0,0,2114,2088,1,0,0,0,2114,
        2100,1,0,0,0,2114,2107,1,0,0,0,2115,289,1,0,0,0,2116,2118,3,292,
        146,0,2117,2116,1,0,0,0,2118,2119,1,0,0,0,2119,2117,1,0,0,0,2119,
        2120,1,0,0,0,2120,291,1,0,0,0,2121,2126,3,276,138,0,2122,2126,3,
        294,147,0,2123,2126,3,362,181,0,2124,2126,3,378,189,0,2125,2121,
        1,0,0,0,2125,2122,1,0,0,0,2125,2123,1,0,0,0,2125,2124,1,0,0,0,2126,
        293,1,0,0,0,2127,2129,3,470,235,0,2128,2127,1,0,0,0,2128,2129,1,
        0,0,0,2129,2131,1,0,0,0,2130,2132,3,374,187,0,2131,2130,1,0,0,0,
        2131,2132,1,0,0,0,2132,2139,1,0,0,0,2133,2140,3,524,262,0,2134,2140,
        3,530,265,0,2135,2140,3,534,267,0,2136,2140,3,536,268,0,2137,2140,
        3,538,269,0,2138,2140,3,296,148,0,2139,2133,1,0,0,0,2139,2134,1,
        0,0,0,2139,2135,1,0,0,0,2139,2136,1,0,0,0,2139,2137,1,0,0,0,2139,
        2138,1,0,0,0,2140,295,1,0,0,0,2141,2143,5,122,0,0,2142,2144,5,99,
        0,0,2143,2142,1,0,0,0,2143,2144,1,0,0,0,2144,2145,1,0,0,0,2145,2147,
        3,584,292,0,2146,2148,3,308,154,0,2147,2146,1,0,0,0,2147,2148,1,
        0,0,0,2148,2150,1,0,0,0,2149,2151,3,298,149,0,2150,2149,1,0,0,0,
        2150,2151,1,0,0,0,2151,2153,1,0,0,0,2152,2154,3,316,158,0,2153,2152,
        1,0,0,0,2153,2154,1,0,0,0,2154,2155,1,0,0,0,2155,2157,5,140,0,0,
        2156,2158,3,398,199,0,2157,2156,1,0,0,0,2157,2158,1,0,0,0,2158,2159,
        1,0,0,0,2159,2160,5,141,0,0,2160,2161,3,300,150,0,2161,297,1,0,0,
        0,2162,2163,5,144,0,0,2163,2168,3,46,23,0,2164,2165,5,143,0,0,2165,
        2167,3,10,5,0,2166,2164,1,0,0,0,2167,2170,1,0,0,0,2168,2166,1,0,
        0,0,2168,2169,1,0,0,0,2169,299,1,0,0,0,2170,2168,1,0,0,0,2171,2173,
        5,136,0,0,2172,2174,3,370,185,0,2173,2172,1,0,0,0,2173,2174,1,0,
        0,0,2174,2175,1,0,0,0,2175,2178,5,137,0,0,2176,2178,5,145,0,0,2177,
        2171,1,0,0,0,2177,2176,1,0,0,0,2178,301,1,0,0,0,2179,2184,3,304,
        152,0,2180,2181,5,143,0,0,2181,2183,3,304,152,0,2182,2180,1,0,0,
        0,2183,2186,1,0,0,0,2184,2182,1,0,0,0,2184,2185,1,0,0,0,2185,303,
        1,0,0,0,2186,2184,1,0,0,0,2187,2189,3,470,235,0,2188,2187,1,0,0,
        0,2188,2189,1,0,0,0,2189,2190,1,0,0,0,2190,2191,3,12,6,0,2191,2192,
        3,584,292,0,2192,305,1,0,0,0,2193,2194,3,584,292,0,2194,2195,5,160,
        0,0,2195,2197,3,584,292,0,2196,2198,3,48,24,0,2197,2196,1,0,0,0,
        2197,2198,1,0,0,0,2198,307,1,0,0,0,2199,2200,5,157,0,0,2200,2205,
        3,310,155,0,2201,2202,5,143,0,0,2202,2204,3,310,155,0,2203,2201,
        1,0,0,0,2204,2207,1,0,0,0,2205,2203,1,0,0,0,2205,2206,1,0,0,0,2206,
        2208,1,0,0,0,2207,2205,1,0,0,0,2208,2209,5,158,0,0,2209,309,1,0,
        0,0,2210,2212,3,470,235,0,2211,2210,1,0,0,0,2211,2212,1,0,0,0,2212,
        2213,1,0,0,0,2213,2214,3,584,292,0,2214,311,1,0,0,0,2215,2216,5,
        144,0,0,2216,2221,3,46,23,0,2217,2218,5,143,0,0,2218,2220,3,10,5,
        0,2219,2217,1,0,0,0,2220,2223,1,0,0,0,2221,2219,1,0,0,0,2221,2222,
        1,0,0,0,2222,313,1,0,0,0,2223,2221,1,0,0,0,2224,2229,3,10,5,0,2225,
        2226,5,143,0,0,2226,2228,3,10,5,0,2227,2225,1,0,0,0,2228,2231,1,
        0,0,0,2229,2227,1,0,0,0,2229,2230,1,0,0,0,2230,315,1,0,0,0,2231,
        2229,1,0,0,0,2232,2234,3,318,159,0,2233,2232,1,0,0,0,2234,2235,1,
        0,0,0,2235,2233,1,0,0,0,2235,2236,1,0,0,0,2236,317,1,0,0,0,2237,
        2238,5,119,0,0,2238,2239,3,584,292,0,2239,2240,5,144,0,0,2240,2241,
        3,320,160,0,2241,319,1,0,0,0,2242,2253,3,366,183,0,2243,2246,3,322,
        161,0,2244,2245,5,143,0,0,2245,2247,3,364,182,0,2246,2244,1,0,0,
        0,2246,2247,1,0,0,0,2247,2250,1,0,0,0,2248,2249,5,143,0,0,2249,2251,
        3,366,183,0,2250,2248,1,0,0,0,2250,2251,1,0,0,0,2251,2253,1,0,0,
        0,2252,2242,1,0,0,0,2252,2243,1,0,0,0,2253,321,1,0,0,0,2254,2262,
        3,46,23,0,2255,2257,5,27,0,0,2256,2258,5,159,0,0,2257,2256,1,0,0,
        0,2257,2258,1,0,0,0,2258,2262,1,0,0,0,2259,2262,5,99,0,0,2260,2262,
        5,110,0,0,2261,2254,1,0,0,0,2261,2255,1,0,0,0,2261,2259,1,0,0,0,
        2261,2260,1,0,0,0,2262,323,1,0,0,0,2263,2276,3,350,175,0,2264,2276,
        3,356,178,0,2265,2276,3,358,179,0,2266,2276,3,342,171,0,2267,2276,
        3,344,172,0,2268,2276,3,346,173,0,2269,2276,3,348,174,0,2270,2276,
        3,56,28,0,2271,2276,3,336,168,0,2272,2276,3,332,166,0,2273,2276,
        3,330,165,0,2274,2276,3,326,163,0,2275,2263,1,0,0,0,2275,2264,1,
        0,0,0,2275,2265,1,0,0,0,2275,2266,1,0,0,0,2275,2267,1,0,0,0,2275,
        2268,1,0,0,0,2275,2269,1,0,0,0,2275,2270,1,0,0,0,2275,2271,1,0,0,
        0,2275,2272,1,0,0,0,2275,2273,1,0,0,0,2275,2274,1,0,0,0,2276,325,
        1,0,0,0,2277,2278,5,140,0,0,2278,2283,3,328,164,0,2279,2280,5,143,
        0,0,2280,2282,3,328,164,0,2281,2279,1,0,0,0,2282,2285,1,0,0,0,2283,
        2281,1,0,0,0,2283,2284,1,0,0,0,2284,2286,1,0,0,0,2285,2283,1,0,0,
        0,2286,2287,5,141,0,0,2287,327,1,0,0,0,2288,2298,3,324,162,0,2289,
        2290,3,584,292,0,2290,2291,5,144,0,0,2291,2292,3,324,162,0,2292,
        2298,1,0,0,0,2293,2294,5,169,0,0,2294,2298,3,56,28,0,2295,2296,5,
        170,0,0,2296,2298,3,56,28,0,2297,2288,1,0,0,0,2297,2289,1,0,0,0,
        2297,2293,1,0,0,0,2297,2295,1,0,0,0,2298,329,1,0,0,0,2299,2301,5,
        182,0,0,2300,2302,3,12,6,0,2301,2300,1,0,0,0,2301,2302,1,0,0,0,2302,
        2304,1,0,0,0,2303,2305,3,56,28,0,2304,2303,1,0,0,0,2304,2305,1,0,
        0,0,2305,331,1,0,0,0,2306,2307,5,138,0,0,2307,2308,3,334,167,0,2308,
        2309,5,139,0,0,2309,333,1,0,0,0,2310,2315,3,324,162,0,2311,2312,
        5,143,0,0,2312,2314,3,324,162,0,2313,2311,1,0,0,0,2314,2317,1,0,
        0,0,2315,2313,1,0,0,0,2315,2316,1,0,0,0,2316,2319,1,0,0,0,2317,2315,
        1,0,0,0,2318,2320,5,143,0,0,2319,2318,1,0,0,0,2319,2320,1,0,0,0,
        2320,335,1,0,0,0,2321,2323,3,12,6,0,2322,2321,1,0,0,0,2322,2323,
        1,0,0,0,2323,2325,1,0,0,0,2324,2326,3,352,176,0,2325,2324,1,0,0,
        0,2325,2326,1,0,0,0,2326,2328,1,0,0,0,2327,2329,3,338,169,0,2328,
        2327,1,0,0,0,2328,2329,1,0,0,0,2329,337,1,0,0,0,2330,2331,5,136,
        0,0,2331,2336,3,340,170,0,2332,2333,5,143,0,0,2333,2335,3,340,170,
        0,2334,2332,1,0,0,0,2335,2338,1,0,0,0,2336,2334,1,0,0,0,2336,2337,
        1,0,0,0,2337,2339,1,0,0,0,2338,2336,1,0,0,0,2339,2340,5,137,0,0,
        2340,339,1,0,0,0,2341,2342,3,584,292,0,2342,2343,5,144,0,0,2343,
        2344,3,324,162,0,2344,341,1,0,0,0,2345,2346,5,157,0,0,2346,2354,
        3,56,28,0,2347,2348,5,169,0,0,2348,2354,3,56,28,0,2349,2350,5,158,
        0,0,2350,2354,3,56,28,0,2351,2352,5,170,0,0,2352,2354,3,56,28,0,
        2353,2345,1,0,0,0,2353,2347,1,0,0,0,2353,2349,1,0,0,0,2353,2351,
        1,0,0,0,2354,343,1,0,0,0,2355,2356,3,342,171,0,2356,2357,5,11,0,
        0,2357,2358,3,324,162,0,2358,345,1,0,0,0,2359,2360,3,56,28,0,2360,
        2361,5,75,0,0,2361,2362,3,324,162,0,2362,347,1,0,0,0,2363,2364,5,
        71,0,0,2364,2365,3,324,162,0,2365,349,1,0,0,0,2366,2367,3,12,6,0,
        2367,2368,3,352,176,0,2368,351,1,0,0,0,2369,2370,3,354,177,0,2370,
        353,1,0,0,0,2371,2372,3,584,292,0,2372,355,1,0,0,0,2373,2374,3,520,
        260,0,2374,357,1,0,0,0,2375,2376,5,114,0,0,2376,2377,3,360,180,0,
        2377,359,1,0,0,0,2378,2379,3,352,176,0,2379,361,1,0,0,0,2380,2382,
        3,470,235,0,2381,2383,5,60,0,0,2382,2381,1,0,0,0,2382,2383,1,0,0,
        0,2383,2385,1,0,0,0,2384,2386,5,84,0,0,2385,2384,1,0,0,0,2385,2386,
        1,0,0,0,2386,2387,1,0,0,0,2387,2388,5,97,0,0,2388,2389,5,116,0,0,
        2389,2390,3,584,292,0,2390,2391,5,140,0,0,2391,2392,5,141,0,0,2392,
        2393,3,396,198,0,2393,363,1,0,0,0,2394,2399,3,10,5,0,2395,2396,5,
        143,0,0,2396,2398,3,10,5,0,2397,2395,1,0,0,0,2398,2401,1,0,0,0,2399,
        2397,1,0,0,0,2399,2400,1,0,0,0,2400,365,1,0,0,0,2401,2399,1,0,0,
        0,2402,2403,5,70,0,0,2403,2404,5,140,0,0,2404,2405,5,141,0,0,2405,
        367,1,0,0,0,2406,2408,5,136,0,0,2407,2409,3,370,185,0,2408,2407,
        1,0,0,0,2408,2409,1,0,0,0,2409,2410,1,0,0,0,2410,2411,5,137,0,0,
        2411,369,1,0,0,0,2412,2414,3,372,186,0,2413,2412,1,0,0,0,2414,2415,
        1,0,0,0,2415,2413,1,0,0,0,2415,2416,1,0,0,0,2416,371,1,0,0,0,2417,
        2419,3,470,235,0,2418,2417,1,0,0,0,2418,2419,1,0,0,0,2419,2421,1,
        0,0,0,2420,2422,3,374,187,0,2421,2420,1,0,0,0,2421,2422,1,0,0,0,
        2422,2425,1,0,0,0,2423,2426,3,378,189,0,2424,2426,3,550,275,0,2425,
        2423,1,0,0,0,2425,2424,1,0,0,0,2426,373,1,0,0,0,2427,2429,3,376,
        188,0,2428,2427,1,0,0,0,2429,2430,1,0,0,0,2430,2428,1,0,0,0,2430,
        2431,1,0,0,0,2431,375,1,0,0,0,2432,2433,7,10,0,0,2433,377,1,0,0,
        0,2434,2454,3,546,273,0,2435,2454,3,380,190,0,2436,2454,3,540,270,
        0,2437,2443,3,428,214,0,2438,2444,3,432,216,0,2439,2440,3,492,246,
        0,2440,2441,3,112,56,0,2441,2442,5,145,0,0,2442,2444,1,0,0,0,2443,
        2438,1,0,0,0,2443,2439,1,0,0,0,2444,2454,1,0,0,0,2445,2454,3,552,
        276,0,2446,2454,3,554,277,0,2447,2454,3,524,262,0,2448,2454,3,530,
        265,0,2449,2454,3,534,267,0,2450,2454,3,536,268,0,2451,2454,3,538,
        269,0,2452,2454,3,296,148,0,2453,2434,1,0,0,0,2453,2435,1,0,0,0,
        2453,2436,1,0,0,0,2453,2437,1,0,0,0,2453,2445,1,0,0,0,2453,2446,
        1,0,0,0,2453,2447,1,0,0,0,2453,2448,1,0,0,0,2453,2449,1,0,0,0,2453,
        2450,1,0,0,0,2453,2451,1,0,0,0,2453,2452,1,0,0,0,2454,379,1,0,0,
        0,2455,2461,5,87,0,0,2456,2457,5,85,0,0,2457,2461,5,87,0,0,2458,
        2459,5,87,0,0,2459,2461,5,85,0,0,2460,2455,1,0,0,0,2460,2456,1,0,
        0,0,2460,2458,1,0,0,0,2460,2461,1,0,0,0,2461,2463,1,0,0,0,2462,2464,
        5,86,0,0,2463,2462,1,0,0,0,2463,2464,1,0,0,0,2464,2465,1,0,0,0,2465,
        2475,3,12,6,0,2466,2467,3,10,5,0,2467,2468,5,142,0,0,2468,2469,3,
        548,274,0,2469,2476,1,0,0,0,2470,2476,3,554,277,0,2471,2476,3,544,
        272,0,2472,2476,3,548,274,0,2473,2476,3,574,287,0,2474,2476,3,542,
        271,0,2475,2466,1,0,0,0,2475,2470,1,0,0,0,2475,2471,1,0,0,0,2475,
        2472,1,0,0,0,2475,2473,1,0,0,0,2475,2474,1,0,0,0,2476,381,1,0,0,
        0,2477,2482,3,384,192,0,2478,2479,5,143,0,0,2479,2481,3,384,192,
        0,2480,2478,1,0,0,0,2481,2484,1,0,0,0,2482,2480,1,0,0,0,2482,2483,
        1,0,0,0,2483,383,1,0,0,0,2484,2482,1,0,0,0,2485,2486,3,584,292,0,
        2486,2487,5,156,0,0,2487,2488,3,56,28,0,2488,385,1,0,0,0,2489,2494,
        3,388,194,0,2490,2491,5,143,0,0,2491,2493,3,388,194,0,2492,2490,
        1,0,0,0,2493,2496,1,0,0,0,2494,2492,1,0,0,0,2494,2495,1,0,0,0,2495,
        387,1,0,0,0,2496,2494,1,0,0,0,2497,2500,3,584,292,0,2498,2499,5,
        156,0,0,2499,2501,3,390,195,0,2500,2498,1,0,0,0,2500,2501,1,0,0,
        0,2501,389,1,0,0,0,2502,2505,3,56,28,0,2503,2505,3,444,222,0,2504,
        2502,1,0,0,0,2504,2503,1,0,0,0,2505,391,1,0,0,0,2506,2509,3,12,6,
        0,2507,2509,5,116,0,0,2508,2506,1,0,0,0,2508,2507,1,0,0,0,2509,393,
        1,0,0,0,2510,2511,3,10,5,0,2511,395,1,0,0,0,2512,2519,3,236,118,
        0,2513,2519,5,145,0,0,2514,2515,3,492,246,0,2515,2516,3,56,28,0,
        2516,2517,5,145,0,0,2517,2519,1,0,0,0,2518,2512,1,0,0,0,2518,2513,
        1,0,0,0,2518,2514,1,0,0,0,2519,397,1,0,0,0,2520,2527,3,406,203,0,
        2521,2524,3,400,200,0,2522,2523,5,143,0,0,2523,2525,3,406,203,0,
        2524,2522,1,0,0,0,2524,2525,1,0,0,0,2525,2527,1,0,0,0,2526,2520,
        1,0,0,0,2526,2521,1,0,0,0,2527,399,1,0,0,0,2528,2533,3,402,201,0,
        2529,2530,5,143,0,0,2530,2532,3,402,201,0,2531,2529,1,0,0,0,2532,
        2535,1,0,0,0,2533,2531,1,0,0,0,2533,2534,1,0,0,0,2534,401,1,0,0,
        0,2535,2533,1,0,0,0,2536,2538,3,470,235,0,2537,2536,1,0,0,0,2537,
        2538,1,0,0,0,2538,2540,1,0,0,0,2539,2541,3,404,202,0,2540,2539,1,
        0,0,0,2540,2541,1,0,0,0,2541,2542,1,0,0,0,2542,2545,3,576,288,0,
        2543,2545,5,13,0,0,2544,2537,1,0,0,0,2544,2543,1,0,0,0,2545,403,
        1,0,0,0,2546,2557,5,87,0,0,2547,2557,5,78,0,0,2548,2557,5,57,0,0,
        2549,2550,5,87,0,0,2550,2557,5,85,0,0,2551,2552,5,87,0,0,2552,2557,
        5,101,0,0,2553,2554,5,57,0,0,2554,2557,5,101,0,0,2555,2557,5,101,
        0,0,2556,2546,1,0,0,0,2556,2547,1,0,0,0,2556,2548,1,0,0,0,2556,2549,
        1,0,0,0,2556,2551,1,0,0,0,2556,2553,1,0,0,0,2556,2555,1,0,0,0,2557,
        405,1,0,0,0,2558,2560,3,470,235,0,2559,2558,1,0,0,0,2559,2560,1,
        0,0,0,2560,2561,1,0,0,0,2561,2562,5,80,0,0,2562,2563,3,440,220,0,
        2563,2564,3,584,292,0,2564,407,1,0,0,0,2565,2567,3,470,235,0,2566,
        2565,1,0,0,0,2566,2567,1,0,0,0,2567,2569,1,0,0,0,2568,2570,3,416,
        208,0,2569,2568,1,0,0,0,2569,2570,1,0,0,0,2570,2591,1,0,0,0,2571,
        2572,5,51,0,0,2572,2574,3,418,209,0,2573,2575,3,414,207,0,2574,2573,
        1,0,0,0,2574,2575,1,0,0,0,2575,2592,1,0,0,0,2576,2577,5,93,0,0,2577,
        2579,3,418,209,0,2578,2580,3,412,206,0,2579,2578,1,0,0,0,2579,2580,
        1,0,0,0,2580,2592,1,0,0,0,2581,2582,5,51,0,0,2582,2584,3,418,209,
        0,2583,2585,3,410,205,0,2584,2583,1,0,0,0,2584,2585,1,0,0,0,2585,
        2592,1,0,0,0,2586,2587,5,61,0,0,2587,2589,3,418,209,0,2588,2590,
        3,412,206,0,2589,2588,1,0,0,0,2589,2590,1,0,0,0,2590,2592,1,0,0,
        0,2591,2571,1,0,0,0,2591,2576,1,0,0,0,2591,2581,1,0,0,0,2591,2586,
        1,0,0,0,2592,409,1,0,0,0,2593,2595,3,470,235,0,2594,2593,1,0,0,0,
        2594,2595,1,0,0,0,2595,2596,1,0,0,0,2596,2597,5,61,0,0,2597,2598,
        3,418,209,0,2598,411,1,0,0,0,2599,2601,3,470,235,0,2600,2599,1,0,
        0,0,2600,2601,1,0,0,0,2601,2603,1,0,0,0,2602,2604,3,416,208,0,2603,
        2602,1,0,0,0,2603,2604,1,0,0,0,2604,2605,1,0,0,0,2605,2606,5,51,
        0,0,2606,2607,3,418,209,0,2607,413,1,0,0,0,2608,2610,3,470,235,0,
        2609,2608,1,0,0,0,2609,2610,1,0,0,0,2610,2612,1,0,0,0,2611,2613,
        3,416,208,0,2612,2611,1,0,0,0,2612,2613,1,0,0,0,2613,2614,1,0,0,
        0,2614,2615,5,93,0,0,2615,2616,3,418,209,0,2616,415,1,0,0,0,2617,
        2631,5,83,0,0,2618,2631,5,60,0,0,2619,2631,5,82,0,0,2620,2621,5,
        83,0,0,2621,2631,5,60,0,0,2622,2623,5,60,0,0,2623,2631,5,83,0,0,
        2624,2625,5,83,0,0,2625,2631,5,82,0,0,2626,2627,5,82,0,0,2627,2631,
        5,83,0,0,2628,2631,5,85,0,0,2629,2631,5,86,0,0,2630,2617,1,0,0,0,
        2630,2618,1,0,0,0,2630,2619,1,0,0,0,2630,2620,1,0,0,0,2630,2622,
        1,0,0,0,2630,2624,1,0,0,0,2630,2626,1,0,0,0,2630,2628,1,0,0,0,2630,
        2629,1,0,0,0,2631,417,1,0,0,0,2632,2639,3,236,118,0,2633,2634,3,
        492,246,0,2634,2635,3,56,28,0,2635,2636,5,145,0,0,2636,2639,1,0,
        0,0,2637,2639,5,145,0,0,2638,2632,1,0,0,0,2638,2633,1,0,0,0,2638,
        2637,1,0,0,0,2639,419,1,0,0,0,2640,2642,3,470,235,0,2641,2640,1,
        0,0,0,2641,2642,1,0,0,0,2642,2651,1,0,0,0,2643,2644,5,10,0,0,2644,
        2645,3,236,118,0,2645,2646,3,424,212,0,2646,2652,1,0,0,0,2647,2648,
        5,88,0,0,2648,2649,3,236,118,0,2649,2650,3,422,211,0,2650,2652,1,
        0,0,0,2651,2643,1,0,0,0,2651,2647,1,0,0,0,2652,421,1,0,0,0,2653,
        2655,3,470,235,0,2654,2653,1,0,0,0,2654,2655,1,0,0,0,2655,2656,1,
        0,0,0,2656,2657,5,10,0,0,2657,2658,3,236,118,0,2658,423,1,0,0,0,
        2659,2661,3,470,235,0,2660,2659,1,0,0,0,2660,2661,1,0,0,0,2661,2662,
        1,0,0,0,2662,2663,5,88,0,0,2663,2664,3,236,118,0,2664,425,1,0,0,
        0,2665,2688,5,146,0,0,2666,2688,5,147,0,0,2667,2688,5,154,0,0,2668,
        2688,5,155,0,0,2669,2688,5,162,0,0,2670,2688,5,163,0,0,2671,2688,
        5,103,0,0,2672,2688,5,43,0,0,2673,2688,5,148,0,0,2674,2688,5,149,
        0,0,2675,2688,5,150,0,0,2676,2688,5,151,0,0,2677,2688,5,152,0,0,
        2678,2688,5,153,0,0,2679,2688,5,179,0,0,2680,2688,3,494,247,0,2681,
        2688,5,167,0,0,2682,2688,5,168,0,0,2683,2688,5,158,0,0,2684,2688,
        5,157,0,0,2685,2688,5,170,0,0,2686,2688,5,169,0,0,2687,2665,1,0,
        0,0,2687,2666,1,0,0,0,2687,2667,1,0,0,0,2687,2668,1,0,0,0,2687,2669,
        1,0,0,0,2687,2670,1,0,0,0,2687,2671,1,0,0,0,2687,2672,1,0,0,0,2687,
        2673,1,0,0,0,2687,2674,1,0,0,0,2687,2675,1,0,0,0,2687,2676,1,0,0,
        0,2687,2677,1,0,0,0,2687,2678,1,0,0,0,2687,2679,1,0,0,0,2687,2680,
        1,0,0,0,2687,2681,1,0,0,0,2687,2682,1,0,0,0,2687,2683,1,0,0,0,2687,
        2684,1,0,0,0,2687,2685,1,0,0,0,2687,2686,1,0,0,0,2688,427,1,0,0,
        0,2689,2690,7,11,0,0,2690,2691,5,76,0,0,2691,2692,3,12,6,0,2692,
        2693,5,140,0,0,2693,2694,3,576,288,0,2694,2695,5,141,0,0,2695,429,
        1,0,0,0,2696,2697,5,144,0,0,2697,2698,7,12,0,0,2698,2700,5,140,0,
        0,2699,2701,3,50,25,0,2700,2699,1,0,0,0,2700,2701,1,0,0,0,2701,2702,
        1,0,0,0,2702,2703,5,141,0,0,2703,431,1,0,0,0,2704,2711,3,236,118,
        0,2705,2711,5,145,0,0,2706,2707,3,492,246,0,2707,2708,3,56,28,0,
        2708,2709,5,145,0,0,2709,2711,1,0,0,0,2710,2704,1,0,0,0,2710,2705,
        1,0,0,0,2710,2706,1,0,0,0,2711,433,1,0,0,0,2712,2713,5,144,0,0,2713,
        2714,3,314,157,0,2714,435,1,0,0,0,2715,2719,5,136,0,0,2716,2718,
        3,438,219,0,2717,2716,1,0,0,0,2718,2721,1,0,0,0,2719,2717,1,0,0,
        0,2719,2720,1,0,0,0,2720,2722,1,0,0,0,2721,2719,1,0,0,0,2722,2725,
        5,137,0,0,2723,2725,5,145,0,0,2724,2715,1,0,0,0,2724,2723,1,0,0,
        0,2725,437,1,0,0,0,2726,2728,3,470,235,0,2727,2726,1,0,0,0,2727,
        2728,1,0,0,0,2728,2730,1,0,0,0,2729,2731,3,374,187,0,2730,2729,1,
        0,0,0,2730,2731,1,0,0,0,2731,2746,1,0,0,0,2732,2747,3,378,189,0,
        2733,2734,5,45,0,0,2734,2736,3,12,6,0,2735,2737,3,490,245,0,2736,
        2735,1,0,0,0,2737,2738,1,0,0,0,2738,2736,1,0,0,0,2738,2739,1,0,0,
        0,2739,2740,1,0,0,0,2740,2741,5,145,0,0,2741,2747,1,0,0,0,2742,2743,
        3,12,6,0,2743,2744,3,144,72,0,2744,2745,5,145,0,0,2745,2747,1,0,
        0,0,2746,2732,1,0,0,0,2746,2733,1,0,0,0,2746,2742,1,0,0,0,2747,439,
        1,0,0,0,2748,2756,3,18,9,0,2749,2751,7,13,0,0,2750,2749,1,0,0,0,
        2751,2754,1,0,0,0,2752,2750,1,0,0,0,2752,2753,1,0,0,0,2753,2755,
        1,0,0,0,2754,2752,1,0,0,0,2755,2757,3,442,221,0,2756,2752,1,0,0,
        0,2757,2758,1,0,0,0,2758,2756,1,0,0,0,2758,2759,1,0,0,0,2759,441,
        1,0,0,0,2760,2764,5,138,0,0,2761,2763,5,143,0,0,2762,2761,1,0,0,
        0,2763,2766,1,0,0,0,2764,2762,1,0,0,0,2764,2765,1,0,0,0,2765,2767,
        1,0,0,0,2766,2764,1,0,0,0,2767,2768,5,139,0,0,2768,443,1,0,0,0,2769,
        2781,5,136,0,0,2770,2775,3,390,195,0,2771,2772,5,143,0,0,2772,2774,
        3,390,195,0,2773,2771,1,0,0,0,2774,2777,1,0,0,0,2775,2773,1,0,0,
        0,2775,2776,1,0,0,0,2776,2779,1,0,0,0,2777,2775,1,0,0,0,2778,2780,
        5,143,0,0,2779,2778,1,0,0,0,2779,2780,1,0,0,0,2780,2782,1,0,0,0,
        2781,2770,1,0,0,0,2781,2782,1,0,0,0,2782,2783,1,0,0,0,2783,2784,
        5,137,0,0,2784,445,1,0,0,0,2785,2786,5,157,0,0,2786,2791,3,448,224,
        0,2787,2788,5,143,0,0,2788,2790,3,448,224,0,2789,2787,1,0,0,0,2790,
        2793,1,0,0,0,2791,2789,1,0,0,0,2791,2792,1,0,0,0,2792,2794,1,0,0,
        0,2793,2791,1,0,0,0,2794,2795,5,158,0,0,2795,447,1,0,0,0,2796,2798,
        3,470,235,0,2797,2796,1,0,0,0,2797,2798,1,0,0,0,2798,2800,1,0,0,
        0,2799,2801,3,450,225,0,2800,2799,1,0,0,0,2800,2801,1,0,0,0,2801,
        2802,1,0,0,0,2802,2803,3,584,292,0,2803,449,1,0,0,0,2804,2805,7,
        14,0,0,2805,451,1,0,0,0,2806,2807,5,144,0,0,2807,2808,3,314,157,
        0,2808,453,1,0,0,0,2809,2813,5,136,0,0,2810,2812,3,456,228,0,2811,
        2810,1,0,0,0,2812,2815,1,0,0,0,2813,2811,1,0,0,0,2813,2814,1,0,0,
        0,2814,2816,1,0,0,0,2815,2813,1,0,0,0,2816,2817,5,137,0,0,2817,455,
        1,0,0,0,2818,2820,3,470,235,0,2819,2818,1,0,0,0,2819,2820,1,0,0,
        0,2820,2822,1,0,0,0,2821,2823,5,70,0,0,2822,2821,1,0,0,0,2822,2823,
        1,0,0,0,2823,2887,1,0,0,0,2824,2826,5,111,0,0,2825,2824,1,0,0,0,
        2825,2826,1,0,0,0,2826,2832,1,0,0,0,2827,2833,5,87,0,0,2828,2829,
        5,87,0,0,2829,2833,5,85,0,0,2830,2831,5,85,0,0,2831,2833,5,87,0,
        0,2832,2827,1,0,0,0,2832,2828,1,0,0,0,2832,2830,1,0,0,0,2832,2833,
        1,0,0,0,2833,2834,1,0,0,0,2834,2862,3,12,6,0,2835,2837,3,584,292,
        0,2836,2838,3,308,154,0,2837,2836,1,0,0,0,2837,2838,1,0,0,0,2838,
        2839,1,0,0,0,2839,2841,5,140,0,0,2840,2842,3,398,199,0,2841,2840,
        1,0,0,0,2841,2842,1,0,0,0,2842,2843,1,0,0,0,2843,2845,5,141,0,0,
        2844,2846,3,316,158,0,2845,2844,1,0,0,0,2845,2846,1,0,0,0,2846,2847,
        1,0,0,0,2847,2848,5,145,0,0,2848,2863,1,0,0,0,2849,2850,3,584,292,
        0,2850,2851,5,136,0,0,2851,2852,3,458,229,0,2852,2853,5,137,0,0,
        2853,2863,1,0,0,0,2854,2855,5,101,0,0,2855,2856,5,138,0,0,2856,2857,
        3,398,199,0,2857,2858,5,139,0,0,2858,2859,5,136,0,0,2859,2860,3,
        458,229,0,2860,2861,5,137,0,0,2861,2863,1,0,0,0,2862,2835,1,0,0,
        0,2862,2849,1,0,0,0,2862,2854,1,0,0,0,2863,2888,1,0,0,0,2864,2866,
        5,111,0,0,2865,2864,1,0,0,0,2865,2866,1,0,0,0,2866,2867,1,0,0,0,
        2867,2868,5,116,0,0,2868,2870,3,584,292,0,2869,2871,3,308,154,0,
        2870,2869,1,0,0,0,2870,2871,1,0,0,0,2871,2872,1,0,0,0,2872,2874,
        5,140,0,0,2873,2875,3,398,199,0,2874,2873,1,0,0,0,2874,2875,1,0,
        0,0,2875,2876,1,0,0,0,2876,2878,5,141,0,0,2877,2879,3,316,158,0,
        2878,2877,1,0,0,0,2878,2879,1,0,0,0,2879,2880,1,0,0,0,2880,2881,
        5,145,0,0,2881,2888,1,0,0,0,2882,2883,5,40,0,0,2883,2884,3,12,6,
        0,2884,2885,3,584,292,0,2885,2886,5,145,0,0,2886,2888,1,0,0,0,2887,
        2825,1,0,0,0,2887,2865,1,0,0,0,2887,2882,1,0,0,0,2888,457,1,0,0,
        0,2889,2891,3,470,235,0,2890,2889,1,0,0,0,2890,2891,1,0,0,0,2891,
        2910,1,0,0,0,2892,2893,5,51,0,0,2893,2899,5,145,0,0,2894,2896,3,
        470,235,0,2895,2894,1,0,0,0,2895,2896,1,0,0,0,2896,2897,1,0,0,0,
        2897,2898,5,93,0,0,2898,2900,5,145,0,0,2899,2895,1,0,0,0,2899,2900,
        1,0,0,0,2900,2911,1,0,0,0,2901,2902,5,93,0,0,2902,2908,5,145,0,0,
        2903,2905,3,470,235,0,2904,2903,1,0,0,0,2904,2905,1,0,0,0,2905,2906,
        1,0,0,0,2906,2907,5,51,0,0,2907,2909,5,145,0,0,2908,2904,1,0,0,0,
        2908,2909,1,0,0,0,2909,2911,1,0,0,0,2910,2892,1,0,0,0,2910,2901,
        1,0,0,0,2911,459,1,0,0,0,2912,2913,5,144,0,0,2913,2914,3,12,6,0,
        2914,461,1,0,0,0,2915,2927,5,136,0,0,2916,2921,3,464,232,0,2917,
        2918,5,143,0,0,2918,2920,3,464,232,0,2919,2917,1,0,0,0,2920,2923,
        1,0,0,0,2921,2919,1,0,0,0,2921,2922,1,0,0,0,2922,2925,1,0,0,0,2923,
        2921,1,0,0,0,2924,2926,5,143,0,0,2925,2924,1,0,0,0,2925,2926,1,0,
        0,0,2926,2928,1,0,0,0,2927,2916,1,0,0,0,2927,2928,1,0,0,0,2928,2929,
        1,0,0,0,2929,2930,5,137,0,0,2930,463,1,0,0,0,2931,2933,3,470,235,
        0,2932,2931,1,0,0,0,2932,2933,1,0,0,0,2933,2934,1,0,0,0,2934,2937,
        3,584,292,0,2935,2936,5,156,0,0,2936,2938,3,56,28,0,2937,2935,1,
        0,0,0,2937,2938,1,0,0,0,2938,465,1,0,0,0,2939,2940,5,138,0,0,2940,
        2941,3,468,234,0,2941,2942,5,144,0,0,2942,2944,3,476,238,0,2943,
        2945,5,143,0,0,2944,2943,1,0,0,0,2944,2945,1,0,0,0,2945,2946,1,0,
        0,0,2946,2947,5,139,0,0,2947,467,1,0,0,0,2948,2951,3,522,261,0,2949,
        2951,3,584,292,0,2950,2948,1,0,0,0,2950,2949,1,0,0,0,2951,469,1,
        0,0,0,2952,2954,3,472,236,0,2953,2952,1,0,0,0,2954,2955,1,0,0,0,
        2955,2953,1,0,0,0,2955,2956,1,0,0,0,2956,471,1,0,0,0,2957,2961,5,
        138,0,0,2958,2959,3,474,237,0,2959,2960,5,144,0,0,2960,2962,1,0,
        0,0,2961,2958,1,0,0,0,2961,2962,1,0,0,0,2962,2963,1,0,0,0,2963,2965,
        3,476,238,0,2964,2966,5,143,0,0,2965,2964,1,0,0,0,2965,2966,1,0,
        0,0,2966,2967,1,0,0,0,2967,2968,5,139,0,0,2968,2983,1,0,0,0,2969,
        2970,5,138,0,0,2970,2971,3,476,238,0,2971,2979,5,139,0,0,2972,2973,
        5,143,0,0,2973,2974,5,138,0,0,2974,2975,3,476,238,0,2975,2976,5,
        139,0,0,2976,2978,1,0,0,0,2977,2972,1,0,0,0,2978,2981,1,0,0,0,2979,
        2977,1,0,0,0,2979,2980,1,0,0,0,2980,2983,1,0,0,0,2981,2979,1,0,0,
        0,2982,2957,1,0,0,0,2982,2969,1,0,0,0,2983,473,1,0,0,0,2984,2987,
        3,522,261,0,2985,2987,3,584,292,0,2986,2984,1,0,0,0,2986,2985,1,
        0,0,0,2987,475,1,0,0,0,2988,2993,3,478,239,0,2989,2990,5,143,0,0,
        2990,2992,3,478,239,0,2991,2989,1,0,0,0,2992,2995,1,0,0,0,2993,2991,
        1,0,0,0,2993,2994,1,0,0,0,2994,477,1,0,0,0,2995,2993,1,0,0,0,2996,
        3009,3,10,5,0,2997,3006,5,140,0,0,2998,3003,3,480,240,0,2999,3000,
        5,143,0,0,3000,3002,3,480,240,0,3001,2999,1,0,0,0,3002,3005,1,0,
        0,0,3003,3001,1,0,0,0,3003,3004,1,0,0,0,3004,3007,1,0,0,0,3005,3003,
        1,0,0,0,3006,2998,1,0,0,0,3006,3007,1,0,0,0,3007,3008,1,0,0,0,3008,
        3010,5,141,0,0,3009,2997,1,0,0,0,3009,3010,1,0,0,0,3010,479,1,0,
        0,0,3011,3012,3,584,292,0,3012,3013,5,144,0,0,3013,3015,1,0,0,0,
        3014,3011,1,0,0,0,3014,3015,1,0,0,0,3015,3016,1,0,0,0,3016,3017,
        3,56,28,0,3017,481,1,0,0,0,3018,3021,3,30,15,0,3019,3021,3,46,23,
        0,3020,3018,1,0,0,0,3020,3019,1,0,0,0,3021,3026,1,0,0,0,3022,3025,
        3,442,221,0,3023,3025,5,159,0,0,3024,3022,1,0,0,0,3024,3023,1,0,
        0,0,3025,3028,1,0,0,0,3026,3024,1,0,0,0,3026,3027,1,0,0,0,3027,3029,
        1,0,0,0,3028,3026,1,0,0,0,3029,3030,5,148,0,0,3030,3034,1,0,0,0,
        3031,3032,5,116,0,0,3032,3034,5,148,0,0,3033,3020,1,0,0,0,3033,3031,
        1,0,0,0,3034,483,1,0,0,0,3035,3040,3,486,243,0,3036,3037,5,143,0,
        0,3037,3039,3,486,243,0,3038,3036,1,0,0,0,3039,3042,1,0,0,0,3040,
        3038,1,0,0,0,3040,3041,1,0,0,0,3041,485,1,0,0,0,3042,3040,1,0,0,
        0,3043,3044,3,584,292,0,3044,3045,5,156,0,0,3045,3046,3,488,244,
        0,3046,487,1,0,0,0,3047,3049,5,151,0,0,3048,3047,1,0,0,0,3048,3049,
        1,0,0,0,3049,3050,1,0,0,0,3050,3053,3,56,28,0,3051,3053,3,220,110,
        0,3052,3048,1,0,0,0,3052,3051,1,0,0,0,3053,489,1,0,0,0,3054,3055,
        3,584,292,0,3055,3056,5,138,0,0,3056,3057,3,56,28,0,3057,3058,5,
        139,0,0,3058,491,1,0,0,0,3059,3060,5,156,0,0,3060,3061,5,158,0,0,
        3061,3062,4,246,0,1,3062,493,1,0,0,0,3063,3064,5,158,0,0,3064,3065,
        5,158,0,0,3065,3066,4,247,1,1,3066,495,1,0,0,0,3067,3068,5,158,0,
        0,3068,3069,5,170,0,0,3069,3070,4,248,2,1,3070,497,1,0,0,0,3071,
        3082,3,502,251,0,3072,3082,3,504,252,0,3073,3082,5,135,0,0,3074,
        3082,3,500,250,0,3075,3082,5,126,0,0,3076,3082,5,127,0,0,3077,3082,
        5,128,0,0,3078,3082,5,129,0,0,3079,3082,5,130,0,0,3080,3082,5,72,
        0,0,3081,3071,1,0,0,0,3081,3072,1,0,0,0,3081,3073,1,0,0,0,3081,3074,
        1,0,0,0,3081,3075,1,0,0,0,3081,3076,1,0,0,0,3081,3077,1,0,0,0,3081,
        3078,1,0,0,0,3081,3079,1,0,0,0,3081,3080,1,0,0,0,3082,499,1,0,0,
        0,3083,3084,5,131,0,0,3084,3088,5,106,0,0,3085,3086,5,132,0,0,3086,
        3088,5,106,0,0,3087,3083,1,0,0,0,3087,3085,1,0,0,0,3088,501,1,0,
        0,0,3089,3090,7,15,0,0,3090,503,1,0,0,0,3091,3096,3,506,253,0,3092,
        3096,3,508,254,0,3093,3096,5,131,0,0,3094,3096,5,132,0,0,3095,3091,
        1,0,0,0,3095,3092,1,0,0,0,3095,3093,1,0,0,0,3095,3094,1,0,0,0,3096,
        505,1,0,0,0,3097,3101,5,133,0,0,3098,3100,3,510,255,0,3099,3098,
        1,0,0,0,3100,3103,1,0,0,0,3101,3099,1,0,0,0,3101,3102,1,0,0,0,3102,
        3104,1,0,0,0,3103,3101,1,0,0,0,3104,3105,5,187,0,0,3105,507,1,0,
        0,0,3106,3110,5,134,0,0,3107,3109,3,512,256,0,3108,3107,1,0,0,0,
        3109,3112,1,0,0,0,3110,3108,1,0,0,0,3110,3111,1,0,0,0,3111,3113,
        1,0,0,0,3112,3110,1,0,0,0,3113,3114,5,187,0,0,3114,509,1,0,0,0,3115,
        3126,3,514,257,0,3116,3126,5,183,0,0,3117,3126,5,185,0,0,3118,3126,
        5,188,0,0,3119,3126,5,184,0,0,3120,3126,5,190,0,0,3121,3126,5,187,
        0,0,3122,3126,5,189,0,0,3123,3126,5,136,0,0,3124,3126,5,137,0,0,
        3125,3115,1,0,0,0,3125,3116,1,0,0,0,3125,3117,1,0,0,0,3125,3118,
        1,0,0,0,3125,3119,1,0,0,0,3125,3120,1,0,0,0,3125,3121,1,0,0,0,3125,
        3122,1,0,0,0,3125,3123,1,0,0,0,3125,3124,1,0,0,0,3126,511,1,0,0,
        0,3127,3132,3,514,257,0,3128,3132,5,183,0,0,3129,3132,5,186,0,0,
        3130,3132,5,189,0,0,3131,3127,1,0,0,0,3131,3128,1,0,0,0,3131,3129,
        1,0,0,0,3131,3130,1,0,0,0,3132,513,1,0,0,0,3133,3134,5,184,0,0,3134,
        3137,3,56,28,0,3135,3136,5,143,0,0,3136,3138,3,516,258,0,3137,3135,
        1,0,0,0,3137,3138,1,0,0,0,3138,3140,1,0,0,0,3139,3141,3,518,259,
        0,3140,3139,1,0,0,0,3140,3141,1,0,0,0,3141,3142,1,0,0,0,3142,3143,
        5,190,0,0,3143,515,1,0,0,0,3144,3145,3,520,260,0,3145,517,1,0,0,
        0,3146,3148,5,144,0,0,3147,3149,5,191,0,0,3148,3147,1,0,0,0,3149,
        3150,1,0,0,0,3150,3148,1,0,0,0,3150,3151,1,0,0,0,3151,519,1,0,0,
        0,3152,3153,3,56,28,0,3153,521,1,0,0,0,3154,3155,7,16,0,0,3155,523,
        1,0,0,0,3156,3158,3,528,264,0,3157,3156,1,0,0,0,3158,3161,1,0,0,
        0,3159,3157,1,0,0,0,3159,3160,1,0,0,0,3160,3163,1,0,0,0,3161,3159,
        1,0,0,0,3162,3164,5,81,0,0,3163,3162,1,0,0,0,3163,3164,1,0,0,0,3164,
        3165,1,0,0,0,3165,3166,5,27,0,0,3166,3168,3,584,292,0,3167,3169,
        3,308,154,0,3168,3167,1,0,0,0,3168,3169,1,0,0,0,3169,3171,1,0,0,
        0,3170,3172,3,526,263,0,3171,3170,1,0,0,0,3171,3172,1,0,0,0,3172,
        3174,1,0,0,0,3173,3175,3,312,156,0,3174,3173,1,0,0,0,3174,3175,1,
        0,0,0,3175,3177,1,0,0,0,3176,3178,3,316,158,0,3177,3176,1,0,0,0,
        3177,3178,1,0,0,0,3178,3179,1,0,0,0,3179,3181,3,368,184,0,3180,3182,
        5,145,0,0,3181,3180,1,0,0,0,3181,3182,1,0,0,0,3182,525,1,0,0,0,3183,
        3185,5,140,0,0,3184,3186,3,398,199,0,3185,3184,1,0,0,0,3185,3186,
        1,0,0,0,3186,3187,1,0,0,0,3187,3188,5,141,0,0,3188,527,1,0,0,0,3189,
        3190,7,17,0,0,3190,529,1,0,0,0,3191,3193,3,532,266,0,3192,3191,1,
        0,0,0,3193,3196,1,0,0,0,3194,3192,1,0,0,0,3194,3195,1,0,0,0,3195,
        3198,1,0,0,0,3196,3194,1,0,0,0,3197,3199,5,87,0,0,3198,3197,1,0,
        0,0,3198,3199,1,0,0,0,3199,3201,1,0,0,0,3200,3202,5,81,0,0,3201,
        3200,1,0,0,0,3201,3202,1,0,0,0,3202,3206,1,0,0,0,3203,3207,5,122,
        0,0,3204,3205,5,85,0,0,3205,3207,5,122,0,0,3206,3203,1,0,0,0,3206,
        3204,1,0,0,0,3206,3207,1,0,0,0,3207,3208,1,0,0,0,3208,3209,5,99,
        0,0,3209,3211,3,584,292,0,3210,3212,3,308,154,0,3211,3210,1,0,0,
        0,3211,3212,1,0,0,0,3212,3214,1,0,0,0,3213,3215,3,434,217,0,3214,
        3213,1,0,0,0,3214,3215,1,0,0,0,3215,3217,1,0,0,0,3216,3218,3,316,
        158,0,3217,3216,1,0,0,0,3217,3218,1,0,0,0,3218,3219,1,0,0,0,3219,
        3220,3,436,218,0,3220,531,1,0,0,0,3221,3222,7,18,0,0,3222,533,1,
        0,0,0,3223,3224,5,59,0,0,3224,3226,3,584,292,0,3225,3227,3,446,223,
        0,3226,3225,1,0,0,0,3226,3227,1,0,0,0,3227,3229,1,0,0,0,3228,3230,
        3,452,226,0,3229,3228,1,0,0,0,3229,3230,1,0,0,0,3230,3232,1,0,0,
        0,3231,3233,3,316,158,0,3232,3231,1,0,0,0,3232,3233,1,0,0,0,3233,
        3234,1,0,0,0,3234,3236,3,368,184,0,3235,3237,5,145,0,0,3236,3235,
        1,0,0,0,3236,3237,1,0,0,0,3237,535,1,0,0,0,3238,3239,5,38,0,0,3239,
        3241,3,584,292,0,3240,3242,3,460,230,0,3241,3240,1,0,0,0,3241,3242,
        1,0,0,0,3242,3243,1,0,0,0,3243,3245,3,462,231,0,3244,3246,5,145,
        0,0,3245,3244,1,0,0,0,3245,3246,1,0,0,0,3246,537,1,0,0,0,3247,3248,
        5,32,0,0,3248,3249,3,392,196,0,3249,3251,3,584,292,0,3250,3252,3,
        446,223,0,3251,3250,1,0,0,0,3251,3252,1,0,0,0,3252,3253,1,0,0,0,
        3253,3255,5,140,0,0,3254,3256,3,398,199,0,3255,3254,1,0,0,0,3255,
        3256,1,0,0,0,3256,3257,1,0,0,0,3257,3259,5,141,0,0,3258,3260,3,316,
        158,0,3259,3258,1,0,0,0,3259,3260,1,0,0,0,3260,3261,1,0,0,0,3261,
        3262,5,145,0,0,3262,539,1,0,0,0,3263,3264,5,40,0,0,3264,3273,3,12,
        6,0,3265,3266,3,386,193,0,3266,3267,5,145,0,0,3267,3274,1,0,0,0,
        3268,3269,3,394,197,0,3269,3270,5,136,0,0,3270,3271,3,420,210,0,
        3271,3272,5,137,0,0,3272,3274,1,0,0,0,3273,3265,1,0,0,0,3273,3268,
        1,0,0,0,3274,541,1,0,0,0,3275,3276,3,386,193,0,3276,3277,5,145,0,
        0,3277,543,1,0,0,0,3278,3292,3,394,197,0,3279,3280,5,136,0,0,3280,
        3281,3,408,204,0,3281,3286,5,137,0,0,3282,3283,5,156,0,0,3283,3284,
        3,390,195,0,3284,3285,5,145,0,0,3285,3287,1,0,0,0,3286,3282,1,0,
        0,0,3286,3287,1,0,0,0,3287,3293,1,0,0,0,3288,3289,3,492,246,0,3289,
        3290,3,112,56,0,3290,3291,5,145,0,0,3291,3293,1,0,0,0,3292,3279,
        1,0,0,0,3292,3288,1,0,0,0,3293,545,1,0,0,0,3294,3295,5,28,0,0,3295,
        3296,3,12,6,0,3296,3297,3,382,191,0,3297,3298,5,145,0,0,3298,547,
        1,0,0,0,3299,3300,5,101,0,0,3300,3301,5,138,0,0,3301,3302,3,398,
        199,0,3302,3311,5,139,0,0,3303,3304,5,136,0,0,3304,3305,3,408,204,
        0,3305,3306,5,137,0,0,3306,3312,1,0,0,0,3307,3308,3,492,246,0,3308,
        3309,3,112,56,0,3309,3310,5,145,0,0,3310,3312,1,0,0,0,3311,3303,
        1,0,0,0,3311,3307,1,0,0,0,3312,549,1,0,0,0,3313,3314,5,155,0,0,3314,
        3315,3,584,292,0,3315,3316,5,140,0,0,3316,3317,5,141,0,0,3317,3318,
        3,432,216,0,3318,551,1,0,0,0,3319,3320,3,584,292,0,3320,3322,5,140,
        0,0,3321,3323,3,398,199,0,3322,3321,1,0,0,0,3322,3323,1,0,0,0,3323,
        3324,1,0,0,0,3324,3326,5,141,0,0,3325,3327,3,430,215,0,3326,3325,
        1,0,0,0,3326,3327,1,0,0,0,3327,3328,1,0,0,0,3328,3329,3,432,216,
        0,3329,553,1,0,0,0,3330,3332,3,470,235,0,3331,3330,1,0,0,0,3331,
        3332,1,0,0,0,3332,3333,1,0,0,0,3333,3335,3,564,282,0,3334,3336,5,
        84,0,0,3335,3334,1,0,0,0,3335,3336,1,0,0,0,3336,3337,1,0,0,0,3337,
        3338,3,392,196,0,3338,3339,3,556,278,0,3339,3340,3,396,198,0,3340,
        3351,1,0,0,0,3341,3343,3,470,235,0,3342,3341,1,0,0,0,3342,3343,1,
        0,0,0,3343,3344,1,0,0,0,3344,3345,3,560,280,0,3345,3346,3,558,279,
        0,3346,3347,3,562,281,0,3347,3348,3,556,278,0,3348,3349,3,568,284,
        0,3349,3351,1,0,0,0,3350,3331,1,0,0,0,3350,3342,1,0,0,0,3351,555,
        1,0,0,0,3352,3353,3,572,286,0,3353,3355,5,140,0,0,3354,3356,3,398,
        199,0,3355,3354,1,0,0,0,3355,3356,1,0,0,0,3356,3357,1,0,0,0,3357,
        3358,5,141,0,0,3358,3373,1,0,0,0,3359,3360,3,572,286,0,3360,3361,
        3,308,154,0,3361,3363,5,140,0,0,3362,3364,3,398,199,0,3363,3362,
        1,0,0,0,3363,3364,1,0,0,0,3364,3365,1,0,0,0,3365,3369,5,141,0,0,
        3366,3368,3,318,159,0,3367,3366,1,0,0,0,3368,3371,1,0,0,0,3369,3367,
        1,0,0,0,3369,3370,1,0,0,0,3370,3373,1,0,0,0,3371,3369,1,0,0,0,3372,
        3352,1,0,0,0,3372,3359,1,0,0,0,3373,557,1,0,0,0,3374,3378,5,87,0,
        0,3375,3376,5,87,0,0,3376,3378,5,85,0,0,3377,3374,1,0,0,0,3377,3375,
        1,0,0,0,3378,559,1,0,0,0,3379,3381,3,570,285,0,3380,3379,1,0,0,0,
        3381,3384,1,0,0,0,3382,3380,1,0,0,0,3382,3383,1,0,0,0,3383,561,1,
        0,0,0,3384,3382,1,0,0,0,3385,3386,3,12,6,0,3386,563,1,0,0,0,3387,
        3389,3,566,283,0,3388,3387,1,0,0,0,3389,3392,1,0,0,0,3390,3388,1,
        0,0,0,3390,3391,1,0,0,0,3391,3394,1,0,0,0,3392,3390,1,0,0,0,3393,
        3395,5,81,0,0,3394,3393,1,0,0,0,3394,3395,1,0,0,0,3395,565,1,0,0,
        0,3396,3399,3,570,285,0,3397,3399,5,16,0,0,3398,3396,1,0,0,0,3398,
        3397,1,0,0,0,3399,567,1,0,0,0,3400,3408,3,236,118,0,3401,3402,3,
        492,246,0,3402,3403,5,87,0,0,3403,3404,3,44,22,0,3404,3405,5,145,
        0,0,3405,3408,1,0,0,0,3406,3408,5,145,0,0,3407,3400,1,0,0,0,3407,
        3401,1,0,0,0,3407,3406,1,0,0,0,3408,569,1,0,0,0,3409,3410,7,19,0,
        0,3410,571,1,0,0,0,3411,3417,3,584,292,0,3412,3413,3,584,292,0,3413,
        3414,5,160,0,0,3414,3415,3,584,292,0,3415,3417,1,0,0,0,3416,3411,
        1,0,0,0,3416,3412,1,0,0,0,3417,3425,1,0,0,0,3418,3420,3,48,24,0,
        3419,3418,1,0,0,0,3419,3420,1,0,0,0,3420,3421,1,0,0,0,3421,3422,
        5,142,0,0,3422,3424,3,584,292,0,3423,3419,1,0,0,0,3424,3427,1,0,
        0,0,3425,3423,1,0,0,0,3425,3426,1,0,0,0,3426,573,1,0,0,0,3427,3425,
        1,0,0,0,3428,3429,5,76,0,0,3429,3430,3,426,213,0,3430,3432,5,140,
        0,0,3431,3433,5,57,0,0,3432,3431,1,0,0,0,3432,3433,1,0,0,0,3433,
        3434,1,0,0,0,3434,3440,3,576,288,0,3435,3437,5,143,0,0,3436,3438,
        5,57,0,0,3437,3436,1,0,0,0,3437,3438,1,0,0,0,3438,3439,1,0,0,0,3439,
        3441,3,576,288,0,3440,3435,1,0,0,0,3440,3441,1,0,0,0,3441,3442,1,
        0,0,0,3442,3448,5,141,0,0,3443,3449,3,432,216,0,3444,3445,3,492,
        246,0,3445,3446,3,112,56,0,3446,3447,5,145,0,0,3447,3449,1,0,0,0,
        3448,3443,1,0,0,0,3448,3444,1,0,0,0,3449,575,1,0,0,0,3450,3451,3,
        12,6,0,3451,3454,3,584,292,0,3452,3453,5,156,0,0,3453,3455,3,56,
        28,0,3454,3452,1,0,0,0,3454,3455,1,0,0,0,3455,577,1,0,0,0,3456,3462,
        3,108,54,0,3457,3459,5,140,0,0,3458,3460,3,50,25,0,3459,3458,1,0,
        0,0,3459,3460,1,0,0,0,3460,3461,1,0,0,0,3461,3463,5,141,0,0,3462,
        3457,1,0,0,0,3462,3463,1,0,0,0,3463,579,1,0,0,0,3464,3466,5,140,
        0,0,3465,3467,3,50,25,0,3466,3465,1,0,0,0,3466,3467,1,0,0,0,3467,
        3468,1,0,0,0,3468,3470,5,141,0,0,3469,3471,3,126,63,0,3470,3469,
        1,0,0,0,3470,3471,1,0,0,0,3471,3487,1,0,0,0,3472,3487,3,126,63,0,
        3473,3487,3,582,291,0,3474,3475,5,138,0,0,3475,3476,3,124,62,0,3476,
        3480,5,139,0,0,3477,3479,3,442,221,0,3478,3477,1,0,0,0,3479,3482,
        1,0,0,0,3480,3478,1,0,0,0,3480,3481,1,0,0,0,3481,3484,1,0,0,0,3482,
        3480,1,0,0,0,3483,3485,3,444,222,0,3484,3483,1,0,0,0,3484,3485,1,
        0,0,0,3485,3487,1,0,0,0,3486,3464,1,0,0,0,3486,3472,1,0,0,0,3486,
        3473,1,0,0,0,3486,3474,1,0,0,0,3487,581,1,0,0,0,3488,3490,5,140,
        0,0,3489,3491,3,50,25,0,3490,3489,1,0,0,0,3490,3491,1,0,0,0,3491,
        3492,1,0,0,0,3492,3494,5,141,0,0,3493,3495,3,126,63,0,3494,3493,
        1,0,0,0,3494,3495,1,0,0,0,3495,583,1,0,0,0,3496,3497,7,20,0,0,3497,
        585,1,0,0,0,444,587,592,603,607,609,614,634,638,641,646,650,657,
        659,664,667,674,677,680,688,701,709,717,722,725,735,741,743,746,
        749,753,758,766,781,789,799,803,806,811,814,828,839,849,862,879,
        885,887,894,902,910,918,926,934,946,948,954,959,964,969,973,978,
        983,987,995,997,1000,1007,1012,1019,1023,1027,1031,1033,1057,1066,
        1075,1081,1085,1090,1094,1099,1105,1108,1113,1117,1121,1128,1133,
        1147,1153,1165,1169,1174,1178,1184,1194,1203,1221,1224,1229,1232,
        1247,1253,1257,1263,1268,1271,1279,1287,1298,1303,1308,1310,1319,
        1327,1335,1343,1347,1357,1362,1364,1373,1380,1387,1391,1396,1398,
        1403,1407,1414,1422,1424,1428,1431,1434,1442,1452,1455,1458,1475,
        1482,1486,1493,1496,1501,1508,1513,1520,1529,1534,1541,1553,1564,
        1572,1577,1586,1597,1606,1612,1617,1621,1625,1629,1633,1637,1644,
        1664,1686,1690,1694,1699,1706,1722,1727,1732,1743,1750,1759,1767,
        1783,1793,1797,1801,1812,1816,1834,1853,1857,1861,1869,1877,1891,
        1899,1906,1908,1928,1933,1936,1943,1952,1959,1966,1972,1980,1988,
        1991,1998,2005,2009,2012,2018,2022,2028,2042,2048,2055,2060,2063,
        2066,2070,2075,2085,2088,2095,2100,2107,2114,2119,2125,2128,2131,
        2139,2143,2147,2150,2153,2157,2168,2173,2177,2184,2188,2197,2205,
        2211,2221,2229,2235,2246,2250,2252,2257,2261,2275,2283,2297,2301,
        2304,2315,2319,2322,2325,2328,2336,2353,2382,2385,2399,2408,2415,
        2418,2421,2425,2430,2443,2453,2460,2463,2475,2482,2494,2500,2504,
        2508,2518,2524,2526,2533,2537,2540,2544,2556,2559,2566,2569,2574,
        2579,2584,2589,2591,2594,2600,2603,2609,2612,2630,2638,2641,2651,
        2654,2660,2687,2700,2710,2719,2724,2727,2730,2738,2746,2752,2758,
        2764,2775,2779,2781,2791,2797,2800,2813,2819,2822,2825,2832,2837,
        2841,2845,2862,2865,2870,2874,2878,2887,2890,2895,2899,2904,2908,
        2910,2921,2925,2927,2932,2937,2944,2950,2955,2961,2965,2979,2982,
        2986,2993,3003,3006,3009,3014,3020,3024,3026,3033,3040,3048,3052,
        3081,3087,3095,3101,3110,3125,3131,3137,3140,3150,3159,3163,3168,
        3171,3174,3177,3181,3185,3194,3198,3201,3206,3211,3214,3217,3226,
        3229,3232,3236,3241,3245,3251,3255,3259,3273,3286,3292,3311,3322,
        3326,3331,3335,3342,3350,3355,3363,3369,3372,3377,3382,3390,3394,
        3398,3407,3416,3419,3425,3432,3437,3440,3448,3454,3459,3462,3466,
        3470,3480,3484,3486,3490,3494
    ]

class CSharpParser ( CSharpParserBase ):

    grammarFileName = "CSharpParser.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "'\\u00EF\\u00BB\\u00BF'", "<INVALID>", 
                     "'/***/'", "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "'#'", "'abstract'", "'add'", "'and'", "'alias'", "'__arglist'", 
                     "'as'", "'ascending'", "'async'", "'await'", "'base'", 
                     "'bool'", "'break'", "'by'", "'byte'", "'case'", "'catch'", 
                     "'char'", "'checked'", "'class'", "'const'", "'continue'", 
                     "'decimal'", "'default'", "'delegate'", "'descending'", 
                     "'do'", "'double'", "'dynamic'", "'else'", "'enum'", 
                     "'equals'", "'event'", "'explicit'", "'extern'", "'false'", 
                     "'finally'", "'fixed'", "'float'", "'file'", "'for'", 
                     "'foreach'", "'from'", "'get'", "'goto'", "'global'", 
                     "'group'", "'if'", "'implicit'", "'in'", "'int'", "'interface'", 
                     "'internal'", "'init'", "'into'", "'is'", "'join'", 
                     "'let'", "'lock'", "'long'", "'nameof'", "'namespace'", 
                     "'new'", "'not'", "'null'", "'object'", "'on'", "'or'", 
                     "'operator'", "'orderby'", "'out'", "'override'", "'params'", 
                     "'partial'", "'private'", "'protected'", "'public'", 
                     "'readonly'", "'required'", "'ref'", "'remove'", "'return'", 
                     "'sbyte'", "'sealed'", "'select'", "'set'", "'short'", 
                     "'sizeof'", "'stackalloc'", "'static'", "'string'", 
                     "'struct'", "'switch'", "'this'", "'throw'", "'true'", 
                     "'try'", "'typeof'", "'u8'", "'uint'", "'ulong'", "'unchecked'", 
                     "'unmanaged'", "'unsafe'", "'ushort'", "'using'", "'var'", 
                     "'virtual'", "'void'", "'volatile'", "'when'", "'where'", 
                     "'while'", "'yield'", "'record'", "'with'", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "'}'", "'['", "']'", "'('", "')'", "'.'", "','", "':'", 
                     "';'", "'+'", "'-'", "'*'", "'/'", "'%'", "'&'", "'|'", 
                     "'^'", "'!'", "'~'", "'='", "'<'", "'>'", "'?'", "'::'", 
                     "'??'", "'++'", "'--'", "'&&'", "'||'", "'->'", "'=='", 
                     "'!='", "'<='", "'>='", "'+='", "'-='", "'*='", "'/='", 
                     "'%='", "'&='", "'|='", "'^='", "'<<'", "'<<='", "'??='", 
                     "'..'", "'{{'", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "'define'", 
                     "'undef'", "'elif'", "'endif'", "'line'", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "'hidden'", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "'}}'" ]

    symbolicNames = [ "<INVALID>", "BYTE_ORDER_MARK", "SINGLE_LINE_DOC_COMMENT", 
                      "EMPTY_DELIMITED_DOC_COMMENT", "DELIMITED_DOC_COMMENT", 
                      "SINGLE_LINE_COMMENT", "DELIMITED_COMMENT", "WHITESPACES", 
                      "SHARP", "ABSTRACT", "ADD", "AND", "ALIAS", "ARGLIST", 
                      "AS", "ASCENDING", "ASYNC", "AWAIT", "BASE", "BOOL", 
                      "BREAK", "BY", "BYTE", "CASE", "CATCH", "CHAR", "CHECKED", 
                      "CLASS", "CONST", "CONTINUE", "DECIMAL", "DEFAULT", 
                      "DELEGATE", "DESCENDING", "DO", "DOUBLE", "DYNAMIC", 
                      "ELSE", "ENUM", "EQUALS", "EVENT", "EXPLICIT", "EXTERN", 
                      "FALSE", "FINALLY", "FIXED", "FLOAT", "FILE", "FOR", 
                      "FOREACH", "FROM", "GET", "GOTO", "GLOBAL", "GROUP", 
                      "IF", "IMPLICIT", "IN", "INT", "INTERFACE", "INTERNAL", 
                      "INIT", "INTO", "IS", "JOIN", "LET", "LOCK", "LONG", 
                      "NAMEOF", "NAMESPACE", "NEW", "NOT", "NULL_", "OBJECT", 
                      "ON", "OR", "OPERATOR", "ORDERBY", "OUT", "OVERRIDE", 
                      "PARAMS", "PARTIAL", "PRIVATE", "PROTECTED", "PUBLIC", 
                      "READONLY", "REQUIRED", "REF", "REMOVE", "RETURN", 
                      "SBYTE", "SEALED", "SELECT", "SET", "SHORT", "SIZEOF", 
                      "STACKALLOC", "STATIC", "STRING", "STRUCT", "SWITCH", 
                      "THIS", "THROW", "TRUE", "TRY", "TYPEOF", "UTF8_SUFFIX", 
                      "UINT", "ULONG", "UNCHECKED", "UNMANAGED", "UNSAFE", 
                      "USHORT", "USING", "VAR", "VIRTUAL", "VOID", "VOLATILE", 
                      "WHEN", "WHERE", "WHILE", "YIELD", "RECORD", "WITH", 
                      "IDENTIFIER", "LITERAL_ACCESS", "INTEGER_LITERAL", 
                      "HEX_INTEGER_LITERAL", "BIN_INTEGER_LITERAL", "REAL_LITERAL", 
                      "CHARACTER_LITERAL", "REGULAR_STRING", "VERBATIUM_STRING", 
                      "INTERPOLATED_REGULAR_STRING_START", "INTERPOLATED_VERBATIUM_STRING_START", 
                      "RAW_STRING_LITERAL", "OPEN_BRACE", "CLOSE_BRACE", 
                      "OPEN_BRACKET", "CLOSE_BRACKET", "OPEN_PARENS", "CLOSE_PARENS", 
                      "DOT", "COMMA", "COLON", "SEMICOLON", "PLUS", "MINUS", 
                      "STAR", "DIV", "PERCENT", "AMP", "BITWISE_OR", "CARET", 
                      "BANG", "TILDE", "ASSIGNMENT", "LT", "GT", "INTERR", 
                      "DOUBLE_COLON", "OP_COALESCING", "OP_INC", "OP_DEC", 
                      "OP_AND", "OP_OR", "OP_PTR", "OP_EQ", "OP_NE", "OP_LE", 
                      "OP_GE", "OP_ADD_ASSIGNMENT", "OP_SUB_ASSIGNMENT", 
                      "OP_MULT_ASSIGNMENT", "OP_DIV_ASSIGNMENT", "OP_MOD_ASSIGNMENT", 
                      "OP_AND_ASSIGNMENT", "OP_OR_ASSIGNMENT", "OP_XOR_ASSIGNMENT", 
                      "OP_LEFT_SHIFT", "OP_LEFT_SHIFT_ASSIGNMENT", "OP_COALESCING_ASSIGNMENT", 
                      "OP_RANGE", "DOUBLE_CURLY_INSIDE", "OPEN_BRACE_INSIDE", 
                      "REGULAR_CHAR_INSIDE", "VERBATIUM_DOUBLE_QUOTE_INSIDE", 
                      "DOUBLE_QUOTE_INSIDE", "REGULAR_STRING_INSIDE", "VERBATIUM_INSIDE_STRING", 
                      "CLOSE_BRACE_INSIDE", "FORMAT_STRING", "DIRECTIVE_WHITESPACES", 
                      "DIGITS", "DEFINE", "UNDEF", "ELIF", "ENDIF", "LINE", 
                      "ERROR", "WARNING", "REGION", "ENDREGION", "PRAGMA", 
                      "NULLABLE", "DIRECTIVE_HIDDEN", "CONDITIONAL_SYMBOL", 
                      "DIRECTIVE_NEW_LINE", "TEXT", "DOUBLE_CURLY_CLOSE_INSIDE" ]

    RULE_compilation_unit = 0
    RULE_compilation_unit_element = 1
    RULE_top_level_statements = 2
    RULE_global_using_directives = 3
    RULE_global_using_directive = 4
    RULE_namespace_or_type_name = 5
    RULE_type_ = 6
    RULE_function_pointer_type = 7
    RULE_function_pointer_parameter_list = 8
    RULE_base_type = 9
    RULE_tuple_type = 10
    RULE_deconstruction_expression = 11
    RULE_deconstruction_tuple = 12
    RULE_deconstruction_element = 13
    RULE_tuple_element = 14
    RULE_simple_type = 15
    RULE_numeric_type = 16
    RULE_integral_type = 17
    RULE_floating_point_type = 18
    RULE_default_value_expression = 19
    RULE_explictly_typed_default = 20
    RULE_default_literal = 21
    RULE_variable_reference = 22
    RULE_class_type = 23
    RULE_type_argument_list = 24
    RULE_argument_list = 25
    RULE_argument = 26
    RULE_argument_name = 27
    RULE_expression = 28
    RULE_with_expression = 29
    RULE_non_assignment_expression = 30
    RULE_assignment = 31
    RULE_assignment_operator = 32
    RULE_conditional_expression = 33
    RULE_null_coalescing_expression = 34
    RULE_conditional_or_expression = 35
    RULE_conditional_and_expression = 36
    RULE_inclusive_or_expression = 37
    RULE_exclusive_or_expression = 38
    RULE_and_expression = 39
    RULE_equality_expression = 40
    RULE_relational_expression = 41
    RULE_shift_expression = 42
    RULE_additive_expression = 43
    RULE_multiplicative_expression = 44
    RULE_switch_expression = 45
    RULE_switch_expression_arms = 46
    RULE_switch_expression_arm = 47
    RULE_range_expression = 48
    RULE_unary_expression = 49
    RULE_cast_expression = 50
    RULE_collection_expression = 51
    RULE_collection_element_list = 52
    RULE_collection_element = 53
    RULE_primary_expression = 54
    RULE_primary_expression_start = 55
    RULE_throwable_expression = 56
    RULE_throw_expression = 57
    RULE_member_access = 58
    RULE_bracket_expression = 59
    RULE_indexer_argument = 60
    RULE_predefined_type = 61
    RULE_expression_list = 62
    RULE_object_or_collection_initializer = 63
    RULE_object_initializer = 64
    RULE_member_initializer_list = 65
    RULE_member_initializer = 66
    RULE_initializer_value = 67
    RULE_collection_initializer = 68
    RULE_element_initializer = 69
    RULE_anonymous_object_initializer = 70
    RULE_member_declarator_list = 71
    RULE_member_declarator = 72
    RULE_unbound_type_name = 73
    RULE_generic_dimension_specifier = 74
    RULE_isType = 75
    RULE_isTypePatternArms = 76
    RULE_isTypePatternArm = 77
    RULE_lambda_expression = 78
    RULE_anonymous_function_signature = 79
    RULE_explicit_anonymous_function_parameter_list = 80
    RULE_explicit_anonymous_function_parameter = 81
    RULE_implicit_anonymous_function_parameter_list = 82
    RULE_anonymous_function_body = 83
    RULE_query_expression = 84
    RULE_from_clause = 85
    RULE_query_body = 86
    RULE_query_body_clause = 87
    RULE_let_clause = 88
    RULE_where_clause = 89
    RULE_combined_join_clause = 90
    RULE_orderby_clause = 91
    RULE_ordering = 92
    RULE_select_or_group_clause = 93
    RULE_query_continuation = 94
    RULE_statement = 95
    RULE_declarationStatement = 96
    RULE_local_function_declaration = 97
    RULE_local_function_header = 98
    RULE_local_function_modifiers = 99
    RULE_local_function_body = 100
    RULE_labeled_Statement = 101
    RULE_embedded_statement = 102
    RULE_empty_statement = 103
    RULE_if_statement = 104
    RULE_checked_statement = 105
    RULE_unchecked_statement = 106
    RULE_lock_statement = 107
    RULE_unmanaged_type = 108
    RULE_stackalloc_expression = 109
    RULE_stackalloc_initializer = 110
    RULE_stackalloc_initializer_element_list = 111
    RULE_stackalloc_element_initializer = 112
    RULE_using_statement = 113
    RULE_yield_statement = 114
    RULE_fixed_statement = 115
    RULE_unsafe_statement = 116
    RULE_try_statement = 117
    RULE_block = 118
    RULE_local_variable_declaration = 119
    RULE_unsafe_function_pointer = 120
    RULE_delegate_function_pointer = 121
    RULE_local_variable_type = 122
    RULE_local_variable_declarator = 123
    RULE_local_variable_initializer = 124
    RULE_local_constant_declaration = 125
    RULE_switch_section = 126
    RULE_switch_label = 127
    RULE_case_guard = 128
    RULE_statement_list = 129
    RULE_for_initializer = 130
    RULE_for_iterator = 131
    RULE_catch_clauses = 132
    RULE_specific_catch_clause = 133
    RULE_general_catch_clause = 134
    RULE_exception_filter = 135
    RULE_finally_clause = 136
    RULE_resource_acquisition = 137
    RULE_namespace_declaration = 138
    RULE_qualified_identifier = 139
    RULE_namespace_body = 140
    RULE_extern_alias_directives = 141
    RULE_extern_alias_directive = 142
    RULE_using_directives = 143
    RULE_using_directive = 144
    RULE_namespace_member_declarations = 145
    RULE_namespace_member_declaration = 146
    RULE_type_declaration = 147
    RULE_record_definition = 148
    RULE_record_base = 149
    RULE_record_body = 150
    RULE_record_parameters = 151
    RULE_record_parameter = 152
    RULE_qualified_alias_member = 153
    RULE_type_parameter_list = 154
    RULE_type_parameter = 155
    RULE_class_base = 156
    RULE_interface_type_list = 157
    RULE_type_parameter_constraints_clauses = 158
    RULE_type_parameter_constraints_clause = 159
    RULE_type_parameter_constraints = 160
    RULE_primary_constraint = 161
    RULE_pattern = 162
    RULE_positional_pattern = 163
    RULE_subpattern = 164
    RULE_rest_pattern = 165
    RULE_list_pattern = 166
    RULE_pattern_items = 167
    RULE_is_pattern = 168
    RULE_property_pattern = 169
    RULE_property_pattern_clause = 170
    RULE_relational_pattern = 171
    RULE_and_pattern = 172
    RULE_or_pattern = 173
    RULE_not_pattern = 174
    RULE_declaration_pattern = 175
    RULE_simple_designation = 176
    RULE_single_variable_designation = 177
    RULE_constant_pattern = 178
    RULE_var_pattern = 179
    RULE_designation = 180
    RULE_module_initializer_declaration = 181
    RULE_secondary_constraints = 182
    RULE_constructor_constraint = 183
    RULE_class_body = 184
    RULE_class_member_declarations = 185
    RULE_class_member_declaration = 186
    RULE_all_member_modifiers = 187
    RULE_all_member_modifier = 188
    RULE_common_member_declaration = 189
    RULE_typed_member_declaration = 190
    RULE_constant_declarators = 191
    RULE_constant_declarator = 192
    RULE_variable_declarators = 193
    RULE_variable_declarator = 194
    RULE_variable_initializer = 195
    RULE_return_type = 196
    RULE_member_name = 197
    RULE_method_body = 198
    RULE_formal_parameter_list = 199
    RULE_fixed_parameters = 200
    RULE_fixed_parameter = 201
    RULE_parameter_modifier = 202
    RULE_parameter_array = 203
    RULE_accessor_declarations = 204
    RULE_init_accessor_declaration = 205
    RULE_get_accessor_declaration = 206
    RULE_set_accessor_declaration = 207
    RULE_accessor_modifier = 208
    RULE_accessor_body = 209
    RULE_event_accessor_declarations = 210
    RULE_add_accessor_declaration = 211
    RULE_remove_accessor_declaration = 212
    RULE_overloadable_operator = 213
    RULE_conversion_operator_declarator = 214
    RULE_constructor_initializer = 215
    RULE_body = 216
    RULE_struct_interfaces = 217
    RULE_struct_body = 218
    RULE_struct_member_declaration = 219
    RULE_array_type = 220
    RULE_rank_specifier = 221
    RULE_array_initializer = 222
    RULE_variant_type_parameter_list = 223
    RULE_variant_type_parameter = 224
    RULE_variance_annotation = 225
    RULE_interface_base = 226
    RULE_interface_body = 227
    RULE_interface_member_declaration = 228
    RULE_interface_accessors = 229
    RULE_enum_base = 230
    RULE_enum_body = 231
    RULE_enum_member_declaration = 232
    RULE_global_attribute_section = 233
    RULE_global_attribute_target = 234
    RULE_attributes = 235
    RULE_attribute_section = 236
    RULE_attribute_target = 237
    RULE_attribute_list = 238
    RULE_attribute = 239
    RULE_attribute_argument = 240
    RULE_pointer_type = 241
    RULE_fixed_pointer_declarators = 242
    RULE_fixed_pointer_declarator = 243
    RULE_fixed_pointer_initializer = 244
    RULE_fixed_size_buffer_declarator = 245
    RULE_right_arrow = 246
    RULE_right_shift = 247
    RULE_right_shift_assignment = 248
    RULE_literal = 249
    RULE_utf8_string_literal = 250
    RULE_boolean_literal = 251
    RULE_string_literal = 252
    RULE_interpolated_regular_string = 253
    RULE_interpolated_verbatium_string = 254
    RULE_interpolated_regular_string_part = 255
    RULE_interpolated_verbatium_string_part = 256
    RULE_interpolated_string_expression = 257
    RULE_interpolation_minimum_width = 258
    RULE_format_string = 259
    RULE_constant_expression = 260
    RULE_keyword = 261
    RULE_class_definition = 262
    RULE_primary_constructor_parameters = 263
    RULE_class_modifier = 264
    RULE_struct_definition = 265
    RULE_struct_modifier = 266
    RULE_interface_definition = 267
    RULE_enum_definition = 268
    RULE_delegate_definition = 269
    RULE_event_declaration = 270
    RULE_field_declaration = 271
    RULE_property_declaration = 272
    RULE_constant_declaration = 273
    RULE_indexer_declaration = 274
    RULE_destructor_definition = 275
    RULE_constructor_declaration = 276
    RULE_method_declaration = 277
    RULE_method_header = 278
    RULE_ref_kind = 279
    RULE_ref_method_modifiers = 280
    RULE_ref_return_type = 281
    RULE_method_modifiers = 282
    RULE_method_modifier = 283
    RULE_ref_method_body = 284
    RULE_ref_method_modifier = 285
    RULE_method_member_name = 286
    RULE_operator_declaration = 287
    RULE_arg_declaration = 288
    RULE_method_invocation = 289
    RULE_object_creation_expression = 290
    RULE_target_typed_new = 291
    RULE_identifier = 292

    ruleNames =  [ "compilation_unit", "compilation_unit_element", "top_level_statements", 
                   "global_using_directives", "global_using_directive", 
                   "namespace_or_type_name", "type_", "function_pointer_type", 
                   "function_pointer_parameter_list", "base_type", "tuple_type", 
                   "deconstruction_expression", "deconstruction_tuple", 
                   "deconstruction_element", "tuple_element", "simple_type", 
                   "numeric_type", "integral_type", "floating_point_type", 
                   "default_value_expression", "explictly_typed_default", 
                   "default_literal", "variable_reference", "class_type", 
                   "type_argument_list", "argument_list", "argument", "argument_name", 
                   "expression", "with_expression", "non_assignment_expression", 
                   "assignment", "assignment_operator", "conditional_expression", 
                   "null_coalescing_expression", "conditional_or_expression", 
                   "conditional_and_expression", "inclusive_or_expression", 
                   "exclusive_or_expression", "and_expression", "equality_expression", 
                   "relational_expression", "shift_expression", "additive_expression", 
                   "multiplicative_expression", "switch_expression", "switch_expression_arms", 
                   "switch_expression_arm", "range_expression", "unary_expression", 
                   "cast_expression", "collection_expression", "collection_element_list", 
                   "collection_element", "primary_expression", "primary_expression_start", 
                   "throwable_expression", "throw_expression", "member_access", 
                   "bracket_expression", "indexer_argument", "predefined_type", 
                   "expression_list", "object_or_collection_initializer", 
                   "object_initializer", "member_initializer_list", "member_initializer", 
                   "initializer_value", "collection_initializer", "element_initializer", 
                   "anonymous_object_initializer", "member_declarator_list", 
                   "member_declarator", "unbound_type_name", "generic_dimension_specifier", 
                   "isType", "isTypePatternArms", "isTypePatternArm", "lambda_expression", 
                   "anonymous_function_signature", "explicit_anonymous_function_parameter_list", 
                   "explicit_anonymous_function_parameter", "implicit_anonymous_function_parameter_list", 
                   "anonymous_function_body", "query_expression", "from_clause", 
                   "query_body", "query_body_clause", "let_clause", "where_clause", 
                   "combined_join_clause", "orderby_clause", "ordering", 
                   "select_or_group_clause", "query_continuation", "statement", 
                   "declarationStatement", "local_function_declaration", 
                   "local_function_header", "local_function_modifiers", 
                   "local_function_body", "labeled_Statement", "embedded_statement", 
                   "empty_statement", "if_statement", "checked_statement", 
                   "unchecked_statement", "lock_statement", "unmanaged_type", 
                   "stackalloc_expression", "stackalloc_initializer", "stackalloc_initializer_element_list", 
                   "stackalloc_element_initializer", "using_statement", 
                   "yield_statement", "fixed_statement", "unsafe_statement", 
                   "try_statement", "block", "local_variable_declaration", 
                   "unsafe_function_pointer", "delegate_function_pointer", 
                   "local_variable_type", "local_variable_declarator", "local_variable_initializer", 
                   "local_constant_declaration", "switch_section", "switch_label", 
                   "case_guard", "statement_list", "for_initializer", "for_iterator", 
                   "catch_clauses", "specific_catch_clause", "general_catch_clause", 
                   "exception_filter", "finally_clause", "resource_acquisition", 
                   "namespace_declaration", "qualified_identifier", "namespace_body", 
                   "extern_alias_directives", "extern_alias_directive", 
                   "using_directives", "using_directive", "namespace_member_declarations", 
                   "namespace_member_declaration", "type_declaration", "record_definition", 
                   "record_base", "record_body", "record_parameters", "record_parameter", 
                   "qualified_alias_member", "type_parameter_list", "type_parameter", 
                   "class_base", "interface_type_list", "type_parameter_constraints_clauses", 
                   "type_parameter_constraints_clause", "type_parameter_constraints", 
                   "primary_constraint", "pattern", "positional_pattern", 
                   "subpattern", "rest_pattern", "list_pattern", "pattern_items", 
                   "is_pattern", "property_pattern", "property_pattern_clause", 
                   "relational_pattern", "and_pattern", "or_pattern", "not_pattern", 
                   "declaration_pattern", "simple_designation", "single_variable_designation", 
                   "constant_pattern", "var_pattern", "designation", "module_initializer_declaration", 
                   "secondary_constraints", "constructor_constraint", "class_body", 
                   "class_member_declarations", "class_member_declaration", 
                   "all_member_modifiers", "all_member_modifier", "common_member_declaration", 
                   "typed_member_declaration", "constant_declarators", "constant_declarator", 
                   "variable_declarators", "variable_declarator", "variable_initializer", 
                   "return_type", "member_name", "method_body", "formal_parameter_list", 
                   "fixed_parameters", "fixed_parameter", "parameter_modifier", 
                   "parameter_array", "accessor_declarations", "init_accessor_declaration", 
                   "get_accessor_declaration", "set_accessor_declaration", 
                   "accessor_modifier", "accessor_body", "event_accessor_declarations", 
                   "add_accessor_declaration", "remove_accessor_declaration", 
                   "overloadable_operator", "conversion_operator_declarator", 
                   "constructor_initializer", "body", "struct_interfaces", 
                   "struct_body", "struct_member_declaration", "array_type", 
                   "rank_specifier", "array_initializer", "variant_type_parameter_list", 
                   "variant_type_parameter", "variance_annotation", "interface_base", 
                   "interface_body", "interface_member_declaration", "interface_accessors", 
                   "enum_base", "enum_body", "enum_member_declaration", 
                   "global_attribute_section", "global_attribute_target", 
                   "attributes", "attribute_section", "attribute_target", 
                   "attribute_list", "attribute", "attribute_argument", 
                   "pointer_type", "fixed_pointer_declarators", "fixed_pointer_declarator", 
                   "fixed_pointer_initializer", "fixed_size_buffer_declarator", 
                   "right_arrow", "right_shift", "right_shift_assignment", 
                   "literal", "utf8_string_literal", "boolean_literal", 
                   "string_literal", "interpolated_regular_string", "interpolated_verbatium_string", 
                   "interpolated_regular_string_part", "interpolated_verbatium_string_part", 
                   "interpolated_string_expression", "interpolation_minimum_width", 
                   "format_string", "constant_expression", "keyword", "class_definition", 
                   "primary_constructor_parameters", "class_modifier", "struct_definition", 
                   "struct_modifier", "interface_definition", "enum_definition", 
                   "delegate_definition", "event_declaration", "field_declaration", 
                   "property_declaration", "constant_declaration", "indexer_declaration", 
                   "destructor_definition", "constructor_declaration", "method_declaration", 
                   "method_header", "ref_kind", "ref_method_modifiers", 
                   "ref_return_type", "method_modifiers", "method_modifier", 
                   "ref_method_body", "ref_method_modifier", "method_member_name", 
                   "operator_declaration", "arg_declaration", "method_invocation", 
                   "object_creation_expression", "target_typed_new", "identifier" ]

    EOF = Token.EOF
    BYTE_ORDER_MARK=1
    SINGLE_LINE_DOC_COMMENT=2
    EMPTY_DELIMITED_DOC_COMMENT=3
    DELIMITED_DOC_COMMENT=4
    SINGLE_LINE_COMMENT=5
    DELIMITED_COMMENT=6
    WHITESPACES=7
    SHARP=8
    ABSTRACT=9
    ADD=10
    AND=11
    ALIAS=12
    ARGLIST=13
    AS=14
    ASCENDING=15
    ASYNC=16
    AWAIT=17
    BASE=18
    BOOL=19
    BREAK=20
    BY=21
    BYTE=22
    CASE=23
    CATCH=24
    CHAR=25
    CHECKED=26
    CLASS=27
    CONST=28
    CONTINUE=29
    DECIMAL=30
    DEFAULT=31
    DELEGATE=32
    DESCENDING=33
    DO=34
    DOUBLE=35
    DYNAMIC=36
    ELSE=37
    ENUM=38
    EQUALS=39
    EVENT=40
    EXPLICIT=41
    EXTERN=42
    FALSE=43
    FINALLY=44
    FIXED=45
    FLOAT=46
    FILE=47
    FOR=48
    FOREACH=49
    FROM=50
    GET=51
    GOTO=52
    GLOBAL=53
    GROUP=54
    IF=55
    IMPLICIT=56
    IN=57
    INT=58
    INTERFACE=59
    INTERNAL=60
    INIT=61
    INTO=62
    IS=63
    JOIN=64
    LET=65
    LOCK=66
    LONG=67
    NAMEOF=68
    NAMESPACE=69
    NEW=70
    NOT=71
    NULL_=72
    OBJECT=73
    ON=74
    OR=75
    OPERATOR=76
    ORDERBY=77
    OUT=78
    OVERRIDE=79
    PARAMS=80
    PARTIAL=81
    PRIVATE=82
    PROTECTED=83
    PUBLIC=84
    READONLY=85
    REQUIRED=86
    REF=87
    REMOVE=88
    RETURN=89
    SBYTE=90
    SEALED=91
    SELECT=92
    SET=93
    SHORT=94
    SIZEOF=95
    STACKALLOC=96
    STATIC=97
    STRING=98
    STRUCT=99
    SWITCH=100
    THIS=101
    THROW=102
    TRUE=103
    TRY=104
    TYPEOF=105
    UTF8_SUFFIX=106
    UINT=107
    ULONG=108
    UNCHECKED=109
    UNMANAGED=110
    UNSAFE=111
    USHORT=112
    USING=113
    VAR=114
    VIRTUAL=115
    VOID=116
    VOLATILE=117
    WHEN=118
    WHERE=119
    WHILE=120
    YIELD=121
    RECORD=122
    WITH=123
    IDENTIFIER=124
    LITERAL_ACCESS=125
    INTEGER_LITERAL=126
    HEX_INTEGER_LITERAL=127
    BIN_INTEGER_LITERAL=128
    REAL_LITERAL=129
    CHARACTER_LITERAL=130
    REGULAR_STRING=131
    VERBATIUM_STRING=132
    INTERPOLATED_REGULAR_STRING_START=133
    INTERPOLATED_VERBATIUM_STRING_START=134
    RAW_STRING_LITERAL=135
    OPEN_BRACE=136
    CLOSE_BRACE=137
    OPEN_BRACKET=138
    CLOSE_BRACKET=139
    OPEN_PARENS=140
    CLOSE_PARENS=141
    DOT=142
    COMMA=143
    COLON=144
    SEMICOLON=145
    PLUS=146
    MINUS=147
    STAR=148
    DIV=149
    PERCENT=150
    AMP=151
    BITWISE_OR=152
    CARET=153
    BANG=154
    TILDE=155
    ASSIGNMENT=156
    LT=157
    GT=158
    INTERR=159
    DOUBLE_COLON=160
    OP_COALESCING=161
    OP_INC=162
    OP_DEC=163
    OP_AND=164
    OP_OR=165
    OP_PTR=166
    OP_EQ=167
    OP_NE=168
    OP_LE=169
    OP_GE=170
    OP_ADD_ASSIGNMENT=171
    OP_SUB_ASSIGNMENT=172
    OP_MULT_ASSIGNMENT=173
    OP_DIV_ASSIGNMENT=174
    OP_MOD_ASSIGNMENT=175
    OP_AND_ASSIGNMENT=176
    OP_OR_ASSIGNMENT=177
    OP_XOR_ASSIGNMENT=178
    OP_LEFT_SHIFT=179
    OP_LEFT_SHIFT_ASSIGNMENT=180
    OP_COALESCING_ASSIGNMENT=181
    OP_RANGE=182
    DOUBLE_CURLY_INSIDE=183
    OPEN_BRACE_INSIDE=184
    REGULAR_CHAR_INSIDE=185
    VERBATIUM_DOUBLE_QUOTE_INSIDE=186
    DOUBLE_QUOTE_INSIDE=187
    REGULAR_STRING_INSIDE=188
    VERBATIUM_INSIDE_STRING=189
    CLOSE_BRACE_INSIDE=190
    FORMAT_STRING=191
    DIRECTIVE_WHITESPACES=192
    DIGITS=193
    DEFINE=194
    UNDEF=195
    ELIF=196
    ENDIF=197
    LINE=198
    ERROR=199
    WARNING=200
    REGION=201
    ENDREGION=202
    PRAGMA=203
    NULLABLE=204
    DIRECTIVE_HIDDEN=205
    CONDITIONAL_SYMBOL=206
    DIRECTIVE_NEW_LINE=207
    TEXT=208
    DOUBLE_CURLY_CLOSE_INSIDE=209

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.2")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class Compilation_unitContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(CSharpParser.EOF, 0)

        def BYTE_ORDER_MARK(self):
            return self.getToken(CSharpParser.BYTE_ORDER_MARK, 0)

        def compilation_unit_element(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Compilation_unit_elementContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Compilation_unit_elementContext,i)


        def getRuleIndex(self):
            return CSharpParser.RULE_compilation_unit

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCompilation_unit" ):
                listener.enterCompilation_unit(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCompilation_unit" ):
                listener.exitCompilation_unit(self)




    def compilation_unit(self):

        localctx = CSharpParser.Compilation_unitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_compilation_unit)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 587
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==1:
                self.state = 586
                self.match(CSharpParser.BYTE_ORDER_MARK)


            self.state = 592
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & 6773396109915043328) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -576465150350022785) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & 18014450294330879) != 0):
                self.state = 589
                self.compilation_unit_element()
                self.state = 594
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 595
            self.match(CSharpParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Compilation_unit_elementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def extern_alias_directives(self):
            return self.getTypedRuleContext(CSharpParser.Extern_alias_directivesContext,0)


        def using_directives(self):
            return self.getTypedRuleContext(CSharpParser.Using_directivesContext,0)


        def global_attribute_section(self):
            return self.getTypedRuleContext(CSharpParser.Global_attribute_sectionContext,0)


        def top_level_statements(self):
            return self.getTypedRuleContext(CSharpParser.Top_level_statementsContext,0)


        def namespace_member_declarations(self):
            return self.getTypedRuleContext(CSharpParser.Namespace_member_declarationsContext,0)


        def global_using_directives(self):
            return self.getTypedRuleContext(CSharpParser.Global_using_directivesContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_compilation_unit_element

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCompilation_unit_element" ):
                listener.enterCompilation_unit_element(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCompilation_unit_element" ):
                listener.exitCompilation_unit_element(self)




    def compilation_unit_element(self):

        localctx = CSharpParser.Compilation_unit_elementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_compilation_unit_element)
        try:
            self.state = 603
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,2,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 597
                self.extern_alias_directives()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 598
                self.using_directives()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 599
                self.global_attribute_section()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 600
                self.top_level_statements()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 601
                self.namespace_member_declarations()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 602
                self.global_using_directives()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Top_level_statementsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.StatementContext)
            else:
                return self.getTypedRuleContext(CSharpParser.StatementContext,i)


        def type_declaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Type_declarationContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Type_declarationContext,i)


        def getRuleIndex(self):
            return CSharpParser.RULE_top_level_statements

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTop_level_statements" ):
                listener.enterTop_level_statements(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTop_level_statements" ):
                listener.exitTop_level_statements(self)




    def top_level_statements(self):

        localctx = CSharpParser.Top_level_statementsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_top_level_statements)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 607 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 607
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,3,self._ctx)
                    if la_ == 1:
                        self.state = 605
                        self.statement()
                        pass

                    elif la_ == 2:
                        self.state = 606
                        self.type_declaration()
                        pass



                else:
                    raise NoViableAltException(self)
                self.state = 609 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,4,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Global_using_directivesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def global_using_directive(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Global_using_directiveContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Global_using_directiveContext,i)


        def getRuleIndex(self):
            return CSharpParser.RULE_global_using_directives

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGlobal_using_directives" ):
                listener.enterGlobal_using_directives(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGlobal_using_directives" ):
                listener.exitGlobal_using_directives(self)




    def global_using_directives(self):

        localctx = CSharpParser.Global_using_directivesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_global_using_directives)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 612 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 611
                    self.global_using_directive()

                else:
                    raise NoViableAltException(self)
                self.state = 614 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,5,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Global_using_directiveContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GLOBAL(self):
            return self.getToken(CSharpParser.GLOBAL, 0)

        def USING(self):
            return self.getToken(CSharpParser.USING, 0)

        def identifier(self):
            return self.getTypedRuleContext(CSharpParser.IdentifierContext,0)


        def ASSIGNMENT(self):
            return self.getToken(CSharpParser.ASSIGNMENT, 0)

        def namespace_or_type_name(self):
            return self.getTypedRuleContext(CSharpParser.Namespace_or_type_nameContext,0)


        def SEMICOLON(self):
            return self.getToken(CSharpParser.SEMICOLON, 0)

        def STATIC(self):
            return self.getToken(CSharpParser.STATIC, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_global_using_directive

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGlobal_using_directive" ):
                listener.enterGlobal_using_directive(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGlobal_using_directive" ):
                listener.exitGlobal_using_directive(self)




    def global_using_directive(self):

        localctx = CSharpParser.Global_using_directiveContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_global_using_directive)
        try:
            self.state = 634
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,6,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 616
                self.match(CSharpParser.GLOBAL)
                self.state = 617
                self.match(CSharpParser.USING)
                self.state = 618
                self.identifier()
                self.state = 619
                self.match(CSharpParser.ASSIGNMENT)
                self.state = 620
                self.namespace_or_type_name()
                self.state = 621
                self.match(CSharpParser.SEMICOLON)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 623
                self.match(CSharpParser.GLOBAL)
                self.state = 624
                self.match(CSharpParser.USING)
                self.state = 625
                self.namespace_or_type_name()
                self.state = 626
                self.match(CSharpParser.SEMICOLON)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 628
                self.match(CSharpParser.GLOBAL)
                self.state = 629
                self.match(CSharpParser.USING)
                self.state = 630
                self.match(CSharpParser.STATIC)
                self.state = 631
                self.namespace_or_type_name()
                self.state = 632
                self.match(CSharpParser.SEMICOLON)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Namespace_or_type_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(CSharpParser.IdentifierContext,i)


        def qualified_alias_member(self):
            return self.getTypedRuleContext(CSharpParser.Qualified_alias_memberContext,0)


        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.DOT)
            else:
                return self.getToken(CSharpParser.DOT, i)

        def type_argument_list(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Type_argument_listContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Type_argument_listContext,i)


        def getRuleIndex(self):
            return CSharpParser.RULE_namespace_or_type_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNamespace_or_type_name" ):
                listener.enterNamespace_or_type_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNamespace_or_type_name" ):
                listener.exitNamespace_or_type_name(self)




    def namespace_or_type_name(self):

        localctx = CSharpParser.Namespace_or_type_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_namespace_or_type_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 641
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,8,self._ctx)
            if la_ == 1:
                self.state = 636
                self.identifier()
                self.state = 638
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,7,self._ctx)
                if la_ == 1:
                    self.state = 637
                    self.type_argument_list()


                pass

            elif la_ == 2:
                self.state = 640
                self.qualified_alias_member()
                pass


            self.state = 650
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,10,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 643
                    self.match(CSharpParser.DOT)
                    self.state = 644
                    self.identifier()
                    self.state = 646
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,9,self._ctx)
                    if la_ == 1:
                        self.state = 645
                        self.type_argument_list()

             
                self.state = 652
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,10,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Type_Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def base_type(self):
            return self.getTypedRuleContext(CSharpParser.Base_typeContext,0)


        def INTERR(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.INTERR)
            else:
                return self.getToken(CSharpParser.INTERR, i)

        def rank_specifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Rank_specifierContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Rank_specifierContext,i)


        def STAR(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.STAR)
            else:
                return self.getToken(CSharpParser.STAR, i)

        def function_pointer_type(self):
            return self.getTypedRuleContext(CSharpParser.Function_pointer_typeContext,0)


        def REF(self):
            return self.getToken(CSharpParser.REF, 0)

        def READONLY(self):
            return self.getToken(CSharpParser.READONLY, 0)

        def LT(self):
            return self.getToken(CSharpParser.LT, 0)

        def type_argument_list(self):
            return self.getTypedRuleContext(CSharpParser.Type_argument_listContext,0)


        def GT(self):
            return self.getToken(CSharpParser.GT, 0)

        def OPEN_BRACKET(self):
            return self.getToken(CSharpParser.OPEN_BRACKET, 0)

        def INTEGER_LITERAL(self):
            return self.getToken(CSharpParser.INTEGER_LITERAL, 0)

        def CLOSE_BRACKET(self):
            return self.getToken(CSharpParser.CLOSE_BRACKET, 0)

        def tuple_type(self):
            return self.getTypedRuleContext(CSharpParser.Tuple_typeContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_type_

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterType_" ):
                listener.enterType_(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitType_" ):
                listener.exitType_(self)




    def type_(self):

        localctx = CSharpParser.Type_Context(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_type_)
        self._la = 0 # Token type
        try:
            self.state = 688
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,18,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 653
                self.base_type()
                self.state = 659
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,12,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 657
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [159]:
                            self.state = 654
                            self.match(CSharpParser.INTERR)
                            pass
                        elif token in [138]:
                            self.state = 655
                            self.rank_specifier()
                            pass
                        elif token in [148]:
                            self.state = 656
                            self.match(CSharpParser.STAR)
                            pass
                        else:
                            raise NoViableAltException(self)
                 
                    self.state = 661
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,12,self._ctx)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 662
                self.function_pointer_type()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 664
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==87:
                    self.state = 663
                    self.match(CSharpParser.REF)


                self.state = 667
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==85:
                    self.state = 666
                    self.match(CSharpParser.READONLY)


                self.state = 669
                self.base_type()
                self.state = 674
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,15,self._ctx)
                if la_ == 1:
                    self.state = 670
                    self.match(CSharpParser.LT)
                    self.state = 671
                    self.type_argument_list()
                    self.state = 672
                    self.match(CSharpParser.GT)


                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 677
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==87:
                    self.state = 676
                    self.match(CSharpParser.REF)


                self.state = 680
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==85:
                    self.state = 679
                    self.match(CSharpParser.READONLY)


                self.state = 682
                self.base_type()
                self.state = 683
                self.match(CSharpParser.OPEN_BRACKET)
                self.state = 684
                self.match(CSharpParser.INTEGER_LITERAL)
                self.state = 685
                self.match(CSharpParser.CLOSE_BRACKET)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 687
                self.tuple_type()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Function_pointer_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DELEGATE(self):
            return self.getToken(CSharpParser.DELEGATE, 0)

        def STAR(self):
            return self.getToken(CSharpParser.STAR, 0)

        def LT(self):
            return self.getToken(CSharpParser.LT, 0)

        def function_pointer_parameter_list(self):
            return self.getTypedRuleContext(CSharpParser.Function_pointer_parameter_listContext,0)


        def GT(self):
            return self.getToken(CSharpParser.GT, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_function_pointer_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunction_pointer_type" ):
                listener.enterFunction_pointer_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunction_pointer_type" ):
                listener.exitFunction_pointer_type(self)




    def function_pointer_type(self):

        localctx = CSharpParser.Function_pointer_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_function_pointer_type)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 690
            self.match(CSharpParser.DELEGATE)
            self.state = 691
            self.match(CSharpParser.STAR)
            self.state = 692
            self.match(CSharpParser.LT)
            self.state = 693
            self.function_pointer_parameter_list()
            self.state = 694
            self.match(CSharpParser.GT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Function_pointer_parameter_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def type_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Type_Context)
            else:
                return self.getTypedRuleContext(CSharpParser.Type_Context,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.COMMA)
            else:
                return self.getToken(CSharpParser.COMMA, i)

        def getRuleIndex(self):
            return CSharpParser.RULE_function_pointer_parameter_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunction_pointer_parameter_list" ):
                listener.enterFunction_pointer_parameter_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunction_pointer_parameter_list" ):
                listener.exitFunction_pointer_parameter_list(self)




    def function_pointer_parameter_list(self):

        localctx = CSharpParser.Function_pointer_parameter_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_function_pointer_parameter_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 696
            self.type_()
            self.state = 701
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==143:
                self.state = 697
                self.match(CSharpParser.COMMA)
                self.state = 698
                self.type_()
                self.state = 703
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Base_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simple_type(self):
            return self.getTypedRuleContext(CSharpParser.Simple_typeContext,0)


        def class_type(self):
            return self.getTypedRuleContext(CSharpParser.Class_typeContext,0)


        def VOID(self):
            return self.getToken(CSharpParser.VOID, 0)

        def STAR(self):
            return self.getToken(CSharpParser.STAR, 0)

        def tuple_type(self):
            return self.getTypedRuleContext(CSharpParser.Tuple_typeContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_base_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBase_type" ):
                listener.enterBase_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBase_type" ):
                listener.exitBase_type(self)




    def base_type(self):

        localctx = CSharpParser.Base_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_base_type)
        try:
            self.state = 709
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,20,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 704
                self.simple_type()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 705
                self.class_type()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 706
                self.match(CSharpParser.VOID)
                self.state = 707
                self.match(CSharpParser.STAR)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 708
                self.tuple_type()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Tuple_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PARENS(self):
            return self.getToken(CSharpParser.OPEN_PARENS, 0)

        def tuple_element(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Tuple_elementContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Tuple_elementContext,i)


        def CLOSE_PARENS(self):
            return self.getToken(CSharpParser.CLOSE_PARENS, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.COMMA)
            else:
                return self.getToken(CSharpParser.COMMA, i)

        def deconstruction_expression(self):
            return self.getTypedRuleContext(CSharpParser.Deconstruction_expressionContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_tuple_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTuple_type" ):
                listener.enterTuple_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTuple_type" ):
                listener.exitTuple_type(self)




    def tuple_type(self):

        localctx = CSharpParser.Tuple_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_tuple_type)
        self._la = 0 # Token type
        try:
            self.state = 722
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,22,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 711
                self.match(CSharpParser.OPEN_PARENS)
                self.state = 712
                self.tuple_element()
                self.state = 715 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 713
                    self.match(CSharpParser.COMMA)
                    self.state = 714
                    self.tuple_element()
                    self.state = 717 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==143):
                        break

                self.state = 719
                self.match(CSharpParser.CLOSE_PARENS)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 721
                self.deconstruction_expression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Deconstruction_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def deconstruction_tuple(self):
            return self.getTypedRuleContext(CSharpParser.Deconstruction_tupleContext,0)


        def VAR(self):
            return self.getToken(CSharpParser.VAR, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_deconstruction_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeconstruction_expression" ):
                listener.enterDeconstruction_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeconstruction_expression" ):
                listener.exitDeconstruction_expression(self)




    def deconstruction_expression(self):

        localctx = CSharpParser.Deconstruction_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_deconstruction_expression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 725
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==114:
                self.state = 724
                self.match(CSharpParser.VAR)


            self.state = 727
            self.deconstruction_tuple()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Deconstruction_tupleContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PARENS(self):
            return self.getToken(CSharpParser.OPEN_PARENS, 0)

        def deconstruction_element(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Deconstruction_elementContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Deconstruction_elementContext,i)


        def CLOSE_PARENS(self):
            return self.getToken(CSharpParser.CLOSE_PARENS, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.COMMA)
            else:
                return self.getToken(CSharpParser.COMMA, i)

        def getRuleIndex(self):
            return CSharpParser.RULE_deconstruction_tuple

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeconstruction_tuple" ):
                listener.enterDeconstruction_tuple(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeconstruction_tuple" ):
                listener.exitDeconstruction_tuple(self)




    def deconstruction_tuple(self):

        localctx = CSharpParser.Deconstruction_tupleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_deconstruction_tuple)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 729
            self.match(CSharpParser.OPEN_PARENS)
            self.state = 730
            self.deconstruction_element()
            self.state = 733 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 731
                self.match(CSharpParser.COMMA)
                self.state = 732
                self.deconstruction_element()
                self.state = 735 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==143):
                    break

            self.state = 737
            self.match(CSharpParser.CLOSE_PARENS)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Deconstruction_elementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def deconstruction_tuple(self):
            return self.getTypedRuleContext(CSharpParser.Deconstruction_tupleContext,0)


        def identifier(self):
            return self.getTypedRuleContext(CSharpParser.IdentifierContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_deconstruction_element

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeconstruction_element" ):
                listener.enterDeconstruction_element(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeconstruction_element" ):
                listener.exitDeconstruction_element(self)




    def deconstruction_element(self):

        localctx = CSharpParser.Deconstruction_elementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_deconstruction_element)
        self._la = 0 # Token type
        try:
            self.state = 743
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [140]:
                self.enterOuterAlt(localctx, 1)
                self.state = 739
                self.deconstruction_tuple()
                pass
            elif token in [10, 12, 13, 15, 16, 17, 21, 33, 36, 39, 50, 51, 54, 57, 62, 64, 65, 68, 74, 77, 81, 88, 92, 93, 110, 114, 118, 119, 121, 124, 141, 143, 145]:
                self.enterOuterAlt(localctx, 2)
                self.state = 741
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 4633078743724962816) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 1352276157684392979) != 0):
                    self.state = 740
                    self.identifier()


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Tuple_elementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def type_(self):
            return self.getTypedRuleContext(CSharpParser.Type_Context,0)


        def identifier(self):
            return self.getTypedRuleContext(CSharpParser.IdentifierContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_tuple_element

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTuple_element" ):
                listener.enterTuple_element(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTuple_element" ):
                listener.exitTuple_element(self)




    def tuple_element(self):

        localctx = CSharpParser.Tuple_elementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_tuple_element)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 746
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,27,self._ctx)
            if la_ == 1:
                self.state = 745
                self.type_()


            self.state = 749
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 4633078743724962816) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 1352276157684392979) != 0):
                self.state = 748
                self.identifier()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Simple_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def numeric_type(self):
            return self.getTypedRuleContext(CSharpParser.Numeric_typeContext,0)


        def BOOL(self):
            return self.getToken(CSharpParser.BOOL, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_simple_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimple_type" ):
                listener.enterSimple_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimple_type" ):
                listener.exitSimple_type(self)




    def simple_type(self):

        localctx = CSharpParser.Simple_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_simple_type)
        try:
            self.state = 753
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [22, 25, 30, 35, 46, 58, 67, 90, 94, 107, 108, 112]:
                self.enterOuterAlt(localctx, 1)
                self.state = 751
                self.numeric_type()
                pass
            elif token in [19]:
                self.enterOuterAlt(localctx, 2)
                self.state = 752
                self.match(CSharpParser.BOOL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Numeric_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def integral_type(self):
            return self.getTypedRuleContext(CSharpParser.Integral_typeContext,0)


        def floating_point_type(self):
            return self.getTypedRuleContext(CSharpParser.Floating_point_typeContext,0)


        def DECIMAL(self):
            return self.getToken(CSharpParser.DECIMAL, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_numeric_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNumeric_type" ):
                listener.enterNumeric_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNumeric_type" ):
                listener.exitNumeric_type(self)




    def numeric_type(self):

        localctx = CSharpParser.Numeric_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_numeric_type)
        try:
            self.state = 758
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [22, 25, 58, 67, 90, 94, 107, 108, 112]:
                self.enterOuterAlt(localctx, 1)
                self.state = 755
                self.integral_type()
                pass
            elif token in [35, 46]:
                self.enterOuterAlt(localctx, 2)
                self.state = 756
                self.floating_point_type()
                pass
            elif token in [30]:
                self.enterOuterAlt(localctx, 3)
                self.state = 757
                self.match(CSharpParser.DECIMAL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Integral_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SBYTE(self):
            return self.getToken(CSharpParser.SBYTE, 0)

        def BYTE(self):
            return self.getToken(CSharpParser.BYTE, 0)

        def SHORT(self):
            return self.getToken(CSharpParser.SHORT, 0)

        def USHORT(self):
            return self.getToken(CSharpParser.USHORT, 0)

        def INT(self):
            return self.getToken(CSharpParser.INT, 0)

        def UINT(self):
            return self.getToken(CSharpParser.UINT, 0)

        def LONG(self):
            return self.getToken(CSharpParser.LONG, 0)

        def ULONG(self):
            return self.getToken(CSharpParser.ULONG, 0)

        def CHAR(self):
            return self.getToken(CSharpParser.CHAR, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_integral_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIntegral_type" ):
                listener.enterIntegral_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIntegral_type" ):
                listener.exitIntegral_type(self)




    def integral_type(self):

        localctx = CSharpParser.Integral_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_integral_type)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 760
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 288230376189460480) != 0) or ((((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & 38483049578497) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Floating_point_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FLOAT(self):
            return self.getToken(CSharpParser.FLOAT, 0)

        def DOUBLE(self):
            return self.getToken(CSharpParser.DOUBLE, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_floating_point_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFloating_point_type" ):
                listener.enterFloating_point_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFloating_point_type" ):
                listener.exitFloating_point_type(self)




    def floating_point_type(self):

        localctx = CSharpParser.Floating_point_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_floating_point_type)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 762
            _la = self._input.LA(1)
            if not(_la==35 or _la==46):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Default_value_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def explictly_typed_default(self):
            return self.getTypedRuleContext(CSharpParser.Explictly_typed_defaultContext,0)


        def default_literal(self):
            return self.getTypedRuleContext(CSharpParser.Default_literalContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_default_value_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDefault_value_expression" ):
                listener.enterDefault_value_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDefault_value_expression" ):
                listener.exitDefault_value_expression(self)




    def default_value_expression(self):

        localctx = CSharpParser.Default_value_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_default_value_expression)
        try:
            self.state = 766
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,31,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 764
                self.explictly_typed_default()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 765
                self.default_literal()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Explictly_typed_defaultContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DEFAULT(self):
            return self.getToken(CSharpParser.DEFAULT, 0)

        def OPEN_PARENS(self):
            return self.getToken(CSharpParser.OPEN_PARENS, 0)

        def type_(self):
            return self.getTypedRuleContext(CSharpParser.Type_Context,0)


        def CLOSE_PARENS(self):
            return self.getToken(CSharpParser.CLOSE_PARENS, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_explictly_typed_default

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExplictly_typed_default" ):
                listener.enterExplictly_typed_default(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExplictly_typed_default" ):
                listener.exitExplictly_typed_default(self)




    def explictly_typed_default(self):

        localctx = CSharpParser.Explictly_typed_defaultContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_explictly_typed_default)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 768
            self.match(CSharpParser.DEFAULT)
            self.state = 769
            self.match(CSharpParser.OPEN_PARENS)
            self.state = 770
            self.type_()
            self.state = 771
            self.match(CSharpParser.CLOSE_PARENS)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Default_literalContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DEFAULT(self):
            return self.getToken(CSharpParser.DEFAULT, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_default_literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDefault_literal" ):
                listener.enterDefault_literal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDefault_literal" ):
                listener.exitDefault_literal(self)




    def default_literal(self):

        localctx = CSharpParser.Default_literalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_default_literal)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 773
            self.match(CSharpParser.DEFAULT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Variable_referenceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(CSharpParser.ExpressionContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_variable_reference

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariable_reference" ):
                listener.enterVariable_reference(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariable_reference" ):
                listener.exitVariable_reference(self)




    def variable_reference(self):

        localctx = CSharpParser.Variable_referenceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_variable_reference)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 775
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Class_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def namespace_or_type_name(self):
            return self.getTypedRuleContext(CSharpParser.Namespace_or_type_nameContext,0)


        def OBJECT(self):
            return self.getToken(CSharpParser.OBJECT, 0)

        def DYNAMIC(self):
            return self.getToken(CSharpParser.DYNAMIC, 0)

        def STRING(self):
            return self.getToken(CSharpParser.STRING, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_class_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClass_type" ):
                listener.enterClass_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClass_type" ):
                listener.exitClass_type(self)




    def class_type(self):

        localctx = CSharpParser.Class_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_class_type)
        try:
            self.state = 781
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,32,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 777
                self.namespace_or_type_name()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 778
                self.match(CSharpParser.OBJECT)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 779
                self.match(CSharpParser.DYNAMIC)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 780
                self.match(CSharpParser.STRING)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Type_argument_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LT(self):
            return self.getToken(CSharpParser.LT, 0)

        def type_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Type_Context)
            else:
                return self.getTypedRuleContext(CSharpParser.Type_Context,i)


        def GT(self):
            return self.getToken(CSharpParser.GT, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.COMMA)
            else:
                return self.getToken(CSharpParser.COMMA, i)

        def getRuleIndex(self):
            return CSharpParser.RULE_type_argument_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterType_argument_list" ):
                listener.enterType_argument_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitType_argument_list" ):
                listener.exitType_argument_list(self)




    def type_argument_list(self):

        localctx = CSharpParser.Type_argument_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_type_argument_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 783
            self.match(CSharpParser.LT)
            self.state = 784
            self.type_()
            self.state = 789
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==143:
                self.state = 785
                self.match(CSharpParser.COMMA)
                self.state = 786
                self.type_()
                self.state = 791
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 792
            self.match(CSharpParser.GT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Argument_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def argument(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.ArgumentContext)
            else:
                return self.getTypedRuleContext(CSharpParser.ArgumentContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.COMMA)
            else:
                return self.getToken(CSharpParser.COMMA, i)

        def getRuleIndex(self):
            return CSharpParser.RULE_argument_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArgument_list" ):
                listener.enterArgument_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArgument_list" ):
                listener.exitArgument_list(self)




    def argument_list(self):

        localctx = CSharpParser.Argument_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_argument_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 794
            self.argument()
            self.state = 799
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==143:
                self.state = 795
                self.match(CSharpParser.COMMA)
                self.state = 796
                self.argument()
                self.state = 801
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArgumentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.refout = None # Token

        def expression(self):
            return self.getTypedRuleContext(CSharpParser.ExpressionContext,0)


        def argument_name(self):
            return self.getTypedRuleContext(CSharpParser.Argument_nameContext,0)


        def VAR(self):
            return self.getToken(CSharpParser.VAR, 0)

        def type_(self):
            return self.getTypedRuleContext(CSharpParser.Type_Context,0)


        def REF(self):
            return self.getToken(CSharpParser.REF, 0)

        def OUT(self):
            return self.getToken(CSharpParser.OUT, 0)

        def IN(self):
            return self.getToken(CSharpParser.IN, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_argument

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArgument" ):
                listener.enterArgument(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArgument" ):
                listener.exitArgument(self)




    def argument(self):

        localctx = CSharpParser.ArgumentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_argument)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 803
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,35,self._ctx)
            if la_ == 1:
                self.state = 802
                self.argument_name()


            self.state = 806
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,36,self._ctx)
            if la_ == 1:
                self.state = 805
                localctx.refout = self._input.LT(1)
                _la = self._input.LA(1)
                if not(((((_la - 57)) & ~0x3f) == 0 and ((1 << (_la - 57)) & 1075838977) != 0)):
                    localctx.refout = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 814
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,38,self._ctx)
            if la_ == 1:
                self.state = 808
                self.expression()
                pass

            elif la_ == 2:
                self.state = 811
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,37,self._ctx)
                if la_ == 1:
                    self.state = 809
                    self.match(CSharpParser.VAR)
                    pass

                elif la_ == 2:
                    self.state = 810
                    self.type_()
                    pass


                self.state = 813
                self.expression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Argument_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(CSharpParser.IdentifierContext,0)


        def COLON(self):
            return self.getToken(CSharpParser.COLON, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_argument_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArgument_name" ):
                listener.enterArgument_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArgument_name" ):
                listener.exitArgument_name(self)




    def argument_name(self):

        localctx = CSharpParser.Argument_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_argument_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 816
            self.identifier()
            self.state = 817
            self.match(CSharpParser.COLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assignment(self):
            return self.getTypedRuleContext(CSharpParser.AssignmentContext,0)


        def non_assignment_expression(self):
            return self.getTypedRuleContext(CSharpParser.Non_assignment_expressionContext,0)


        def REF(self):
            return self.getToken(CSharpParser.REF, 0)

        def lambda_expression(self):
            return self.getTypedRuleContext(CSharpParser.Lambda_expressionContext,0)


        def collection_expression(self):
            return self.getTypedRuleContext(CSharpParser.Collection_expressionContext,0)


        def method_invocation(self):
            return self.getTypedRuleContext(CSharpParser.Method_invocationContext,0)


        def throw_expression(self):
            return self.getTypedRuleContext(CSharpParser.Throw_expressionContext,0)


        def with_expression(self):
            return self.getTypedRuleContext(CSharpParser.With_expressionContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpression" ):
                listener.enterExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpression" ):
                listener.exitExpression(self)




    def expression(self):

        localctx = CSharpParser.ExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_expression)
        try:
            self.state = 828
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,39,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 819
                self.assignment()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 820
                self.non_assignment_expression()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 821
                self.match(CSharpParser.REF)
                self.state = 822
                self.non_assignment_expression()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 823
                self.lambda_expression()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 824
                self.collection_expression()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 825
                self.method_invocation()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 826
                self.throw_expression()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 827
                self.with_expression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class With_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def primary_expression(self):
            return self.getTypedRuleContext(CSharpParser.Primary_expressionContext,0)


        def WITH(self):
            return self.getToken(CSharpParser.WITH, 0)

        def OPEN_BRACE(self):
            return self.getToken(CSharpParser.OPEN_BRACE, 0)

        def member_initializer_list(self):
            return self.getTypedRuleContext(CSharpParser.Member_initializer_listContext,0)


        def CLOSE_BRACE(self):
            return self.getToken(CSharpParser.CLOSE_BRACE, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_with_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWith_expression" ):
                listener.enterWith_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWith_expression" ):
                listener.exitWith_expression(self)




    def with_expression(self):

        localctx = CSharpParser.With_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_with_expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 830
            self.primary_expression()
            self.state = 831
            self.match(CSharpParser.WITH)
            self.state = 832
            self.match(CSharpParser.OPEN_BRACE)
            self.state = 833
            self.member_initializer_list()
            self.state = 834
            self.match(CSharpParser.CLOSE_BRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Non_assignment_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def lambda_expression(self):
            return self.getTypedRuleContext(CSharpParser.Lambda_expressionContext,0)


        def query_expression(self):
            return self.getTypedRuleContext(CSharpParser.Query_expressionContext,0)


        def conditional_expression(self):
            return self.getTypedRuleContext(CSharpParser.Conditional_expressionContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_non_assignment_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNon_assignment_expression" ):
                listener.enterNon_assignment_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNon_assignment_expression" ):
                listener.exitNon_assignment_expression(self)




    def non_assignment_expression(self):

        localctx = CSharpParser.Non_assignment_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_non_assignment_expression)
        try:
            self.state = 839
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,40,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 836
                self.lambda_expression()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 837
                self.query_expression()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 838
                self.conditional_expression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssignmentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def unary_expression(self):
            return self.getTypedRuleContext(CSharpParser.Unary_expressionContext,0)


        def assignment_operator(self):
            return self.getTypedRuleContext(CSharpParser.Assignment_operatorContext,0)


        def expression(self):
            return self.getTypedRuleContext(CSharpParser.ExpressionContext,0)


        def OP_COALESCING_ASSIGNMENT(self):
            return self.getToken(CSharpParser.OP_COALESCING_ASSIGNMENT, 0)

        def throwable_expression(self):
            return self.getTypedRuleContext(CSharpParser.Throwable_expressionContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_assignment

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssignment" ):
                listener.enterAssignment(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssignment" ):
                listener.exitAssignment(self)




    def assignment(self):

        localctx = CSharpParser.AssignmentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_assignment)
        try:
            self.state = 849
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,41,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 841
                self.unary_expression()
                self.state = 842
                self.assignment_operator()
                self.state = 843
                self.expression()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 845
                self.unary_expression()
                self.state = 846
                self.match(CSharpParser.OP_COALESCING_ASSIGNMENT)
                self.state = 847
                self.throwable_expression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Assignment_operatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ASSIGNMENT(self):
            return self.getToken(CSharpParser.ASSIGNMENT, 0)

        def OP_ADD_ASSIGNMENT(self):
            return self.getToken(CSharpParser.OP_ADD_ASSIGNMENT, 0)

        def OP_SUB_ASSIGNMENT(self):
            return self.getToken(CSharpParser.OP_SUB_ASSIGNMENT, 0)

        def OP_MULT_ASSIGNMENT(self):
            return self.getToken(CSharpParser.OP_MULT_ASSIGNMENT, 0)

        def OP_DIV_ASSIGNMENT(self):
            return self.getToken(CSharpParser.OP_DIV_ASSIGNMENT, 0)

        def OP_MOD_ASSIGNMENT(self):
            return self.getToken(CSharpParser.OP_MOD_ASSIGNMENT, 0)

        def OP_AND_ASSIGNMENT(self):
            return self.getToken(CSharpParser.OP_AND_ASSIGNMENT, 0)

        def OP_OR_ASSIGNMENT(self):
            return self.getToken(CSharpParser.OP_OR_ASSIGNMENT, 0)

        def OP_XOR_ASSIGNMENT(self):
            return self.getToken(CSharpParser.OP_XOR_ASSIGNMENT, 0)

        def OP_LEFT_SHIFT_ASSIGNMENT(self):
            return self.getToken(CSharpParser.OP_LEFT_SHIFT_ASSIGNMENT, 0)

        def right_shift_assignment(self):
            return self.getTypedRuleContext(CSharpParser.Right_shift_assignmentContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_assignment_operator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssignment_operator" ):
                listener.enterAssignment_operator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssignment_operator" ):
                listener.exitAssignment_operator(self)




    def assignment_operator(self):

        localctx = CSharpParser.Assignment_operatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_assignment_operator)
        try:
            self.state = 862
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [156]:
                self.enterOuterAlt(localctx, 1)
                self.state = 851
                self.match(CSharpParser.ASSIGNMENT)
                pass
            elif token in [171]:
                self.enterOuterAlt(localctx, 2)
                self.state = 852
                self.match(CSharpParser.OP_ADD_ASSIGNMENT)
                pass
            elif token in [172]:
                self.enterOuterAlt(localctx, 3)
                self.state = 853
                self.match(CSharpParser.OP_SUB_ASSIGNMENT)
                pass
            elif token in [173]:
                self.enterOuterAlt(localctx, 4)
                self.state = 854
                self.match(CSharpParser.OP_MULT_ASSIGNMENT)
                pass
            elif token in [174]:
                self.enterOuterAlt(localctx, 5)
                self.state = 855
                self.match(CSharpParser.OP_DIV_ASSIGNMENT)
                pass
            elif token in [175]:
                self.enterOuterAlt(localctx, 6)
                self.state = 856
                self.match(CSharpParser.OP_MOD_ASSIGNMENT)
                pass
            elif token in [176]:
                self.enterOuterAlt(localctx, 7)
                self.state = 857
                self.match(CSharpParser.OP_AND_ASSIGNMENT)
                pass
            elif token in [177]:
                self.enterOuterAlt(localctx, 8)
                self.state = 858
                self.match(CSharpParser.OP_OR_ASSIGNMENT)
                pass
            elif token in [178]:
                self.enterOuterAlt(localctx, 9)
                self.state = 859
                self.match(CSharpParser.OP_XOR_ASSIGNMENT)
                pass
            elif token in [180]:
                self.enterOuterAlt(localctx, 10)
                self.state = 860
                self.match(CSharpParser.OP_LEFT_SHIFT_ASSIGNMENT)
                pass
            elif token in [158]:
                self.enterOuterAlt(localctx, 11)
                self.state = 861
                self.right_shift_assignment()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Conditional_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def null_coalescing_expression(self):
            return self.getTypedRuleContext(CSharpParser.Null_coalescing_expressionContext,0)


        def INTERR(self):
            return self.getToken(CSharpParser.INTERR, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(CSharpParser.ExpressionContext,i)


        def COLON(self):
            return self.getToken(CSharpParser.COLON, 0)

        def REF(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.REF)
            else:
                return self.getToken(CSharpParser.REF, i)

        def variable_reference(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Variable_referenceContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Variable_referenceContext,i)


        def getRuleIndex(self):
            return CSharpParser.RULE_conditional_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConditional_expression" ):
                listener.enterConditional_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConditional_expression" ):
                listener.exitConditional_expression(self)




    def conditional_expression(self):

        localctx = CSharpParser.Conditional_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_conditional_expression)
        try:
            self.state = 879
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,43,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 864
                self.null_coalescing_expression()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 865
                self.null_coalescing_expression()
                self.state = 866
                self.match(CSharpParser.INTERR)
                self.state = 867
                self.expression()
                self.state = 868
                self.match(CSharpParser.COLON)
                self.state = 869
                self.expression()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 871
                self.null_coalescing_expression()
                self.state = 872
                self.match(CSharpParser.INTERR)
                self.state = 873
                self.match(CSharpParser.REF)
                self.state = 874
                self.variable_reference()
                self.state = 875
                self.match(CSharpParser.COLON)
                self.state = 876
                self.match(CSharpParser.REF)
                self.state = 877
                self.variable_reference()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Null_coalescing_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def conditional_or_expression(self):
            return self.getTypedRuleContext(CSharpParser.Conditional_or_expressionContext,0)


        def OP_COALESCING(self):
            return self.getToken(CSharpParser.OP_COALESCING, 0)

        def null_coalescing_expression(self):
            return self.getTypedRuleContext(CSharpParser.Null_coalescing_expressionContext,0)


        def throw_expression(self):
            return self.getTypedRuleContext(CSharpParser.Throw_expressionContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_null_coalescing_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNull_coalescing_expression" ):
                listener.enterNull_coalescing_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNull_coalescing_expression" ):
                listener.exitNull_coalescing_expression(self)




    def null_coalescing_expression(self):

        localctx = CSharpParser.Null_coalescing_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_null_coalescing_expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 881
            self.conditional_or_expression()
            self.state = 887
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,45,self._ctx)
            if la_ == 1:
                self.state = 882
                self.match(CSharpParser.OP_COALESCING)
                self.state = 885
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [10, 12, 13, 15, 16, 17, 18, 19, 21, 22, 25, 26, 30, 31, 32, 33, 35, 36, 39, 43, 46, 50, 51, 54, 58, 62, 64, 65, 67, 68, 70, 72, 73, 74, 77, 81, 88, 90, 92, 93, 94, 95, 96, 98, 101, 103, 105, 107, 108, 109, 110, 112, 114, 118, 119, 121, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 138, 140, 146, 147, 148, 151, 153, 154, 155, 162, 163, 182]:
                    self.state = 883
                    self.null_coalescing_expression()
                    pass
                elif token in [102]:
                    self.state = 884
                    self.throw_expression()
                    pass
                else:
                    raise NoViableAltException(self)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Conditional_or_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def conditional_and_expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Conditional_and_expressionContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Conditional_and_expressionContext,i)


        def OP_OR(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.OP_OR)
            else:
                return self.getToken(CSharpParser.OP_OR, i)

        def getRuleIndex(self):
            return CSharpParser.RULE_conditional_or_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConditional_or_expression" ):
                listener.enterConditional_or_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConditional_or_expression" ):
                listener.exitConditional_or_expression(self)




    def conditional_or_expression(self):

        localctx = CSharpParser.Conditional_or_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_conditional_or_expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 889
            self.conditional_and_expression()
            self.state = 894
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,46,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 890
                    self.match(CSharpParser.OP_OR)
                    self.state = 891
                    self.conditional_and_expression() 
                self.state = 896
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,46,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Conditional_and_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def inclusive_or_expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Inclusive_or_expressionContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Inclusive_or_expressionContext,i)


        def OP_AND(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.OP_AND)
            else:
                return self.getToken(CSharpParser.OP_AND, i)

        def getRuleIndex(self):
            return CSharpParser.RULE_conditional_and_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConditional_and_expression" ):
                listener.enterConditional_and_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConditional_and_expression" ):
                listener.exitConditional_and_expression(self)




    def conditional_and_expression(self):

        localctx = CSharpParser.Conditional_and_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_conditional_and_expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 897
            self.inclusive_or_expression()
            self.state = 902
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,47,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 898
                    self.match(CSharpParser.OP_AND)
                    self.state = 899
                    self.inclusive_or_expression() 
                self.state = 904
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,47,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Inclusive_or_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def exclusive_or_expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Exclusive_or_expressionContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Exclusive_or_expressionContext,i)


        def BITWISE_OR(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.BITWISE_OR)
            else:
                return self.getToken(CSharpParser.BITWISE_OR, i)

        def getRuleIndex(self):
            return CSharpParser.RULE_inclusive_or_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInclusive_or_expression" ):
                listener.enterInclusive_or_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInclusive_or_expression" ):
                listener.exitInclusive_or_expression(self)




    def inclusive_or_expression(self):

        localctx = CSharpParser.Inclusive_or_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_inclusive_or_expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 905
            self.exclusive_or_expression()
            self.state = 910
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,48,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 906
                    self.match(CSharpParser.BITWISE_OR)
                    self.state = 907
                    self.exclusive_or_expression() 
                self.state = 912
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,48,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Exclusive_or_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def and_expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.And_expressionContext)
            else:
                return self.getTypedRuleContext(CSharpParser.And_expressionContext,i)


        def CARET(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.CARET)
            else:
                return self.getToken(CSharpParser.CARET, i)

        def getRuleIndex(self):
            return CSharpParser.RULE_exclusive_or_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExclusive_or_expression" ):
                listener.enterExclusive_or_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExclusive_or_expression" ):
                listener.exitExclusive_or_expression(self)




    def exclusive_or_expression(self):

        localctx = CSharpParser.Exclusive_or_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_exclusive_or_expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 913
            self.and_expression()
            self.state = 918
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,49,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 914
                    self.match(CSharpParser.CARET)
                    self.state = 915
                    self.and_expression() 
                self.state = 920
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,49,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class And_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def equality_expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Equality_expressionContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Equality_expressionContext,i)


        def AMP(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.AMP)
            else:
                return self.getToken(CSharpParser.AMP, i)

        def getRuleIndex(self):
            return CSharpParser.RULE_and_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnd_expression" ):
                listener.enterAnd_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnd_expression" ):
                listener.exitAnd_expression(self)




    def and_expression(self):

        localctx = CSharpParser.And_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_and_expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 921
            self.equality_expression()
            self.state = 926
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,50,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 922
                    self.match(CSharpParser.AMP)
                    self.state = 923
                    self.equality_expression() 
                self.state = 928
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,50,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Equality_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def relational_expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Relational_expressionContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Relational_expressionContext,i)


        def OP_EQ(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.OP_EQ)
            else:
                return self.getToken(CSharpParser.OP_EQ, i)

        def OP_NE(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.OP_NE)
            else:
                return self.getToken(CSharpParser.OP_NE, i)

        def getRuleIndex(self):
            return CSharpParser.RULE_equality_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEquality_expression" ):
                listener.enterEquality_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEquality_expression" ):
                listener.exitEquality_expression(self)




    def equality_expression(self):

        localctx = CSharpParser.Equality_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_equality_expression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 929
            self.relational_expression()
            self.state = 934
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,51,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 930
                    _la = self._input.LA(1)
                    if not(_la==167 or _la==168):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 931
                    self.relational_expression() 
                self.state = 936
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,51,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Relational_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def shift_expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Shift_expressionContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Shift_expressionContext,i)


        def IS(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.IS)
            else:
                return self.getToken(CSharpParser.IS, i)

        def isType(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.IsTypeContext)
            else:
                return self.getTypedRuleContext(CSharpParser.IsTypeContext,i)


        def AS(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.AS)
            else:
                return self.getToken(CSharpParser.AS, i)

        def pattern(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.PatternContext)
            else:
                return self.getTypedRuleContext(CSharpParser.PatternContext,i)


        def LT(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.LT)
            else:
                return self.getToken(CSharpParser.LT, i)

        def GT(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.GT)
            else:
                return self.getToken(CSharpParser.GT, i)

        def OP_LE(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.OP_LE)
            else:
                return self.getToken(CSharpParser.OP_LE, i)

        def OP_GE(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.OP_GE)
            else:
                return self.getToken(CSharpParser.OP_GE, i)

        def getRuleIndex(self):
            return CSharpParser.RULE_relational_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRelational_expression" ):
                listener.enterRelational_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRelational_expression" ):
                listener.exitRelational_expression(self)




    def relational_expression(self):

        localctx = CSharpParser.Relational_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_relational_expression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 937
            self.shift_expression()
            self.state = 948
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,53,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 946
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,52,self._ctx)
                    if la_ == 1:
                        self.state = 938
                        _la = self._input.LA(1)
                        if not(((((_la - 157)) & ~0x3f) == 0 and ((1 << (_la - 157)) & 12291) != 0)):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 939
                        self.shift_expression()
                        pass

                    elif la_ == 2:
                        self.state = 940
                        self.match(CSharpParser.IS)
                        self.state = 941
                        self.isType()
                        pass

                    elif la_ == 3:
                        self.state = 942
                        self.match(CSharpParser.AS)
                        self.state = 943
                        self.isType()
                        pass

                    elif la_ == 4:
                        self.state = 944
                        self.match(CSharpParser.IS)
                        self.state = 945
                        self.pattern()
                        pass

             
                self.state = 950
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,53,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Shift_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def additive_expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Additive_expressionContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Additive_expressionContext,i)


        def OP_LEFT_SHIFT(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.OP_LEFT_SHIFT)
            else:
                return self.getToken(CSharpParser.OP_LEFT_SHIFT, i)

        def right_shift(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Right_shiftContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Right_shiftContext,i)


        def getRuleIndex(self):
            return CSharpParser.RULE_shift_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShift_expression" ):
                listener.enterShift_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShift_expression" ):
                listener.exitShift_expression(self)




    def shift_expression(self):

        localctx = CSharpParser.Shift_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_shift_expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 951
            self.additive_expression()
            self.state = 959
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,55,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 954
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [179]:
                        self.state = 952
                        self.match(CSharpParser.OP_LEFT_SHIFT)
                        pass
                    elif token in [158]:
                        self.state = 953
                        self.right_shift()
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 956
                    self.additive_expression() 
                self.state = 961
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,55,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Additive_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def multiplicative_expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Multiplicative_expressionContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Multiplicative_expressionContext,i)


        def method_invocation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Method_invocationContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Method_invocationContext,i)


        def PLUS(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.PLUS)
            else:
                return self.getToken(CSharpParser.PLUS, i)

        def MINUS(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.MINUS)
            else:
                return self.getToken(CSharpParser.MINUS, i)

        def getRuleIndex(self):
            return CSharpParser.RULE_additive_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAdditive_expression" ):
                listener.enterAdditive_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAdditive_expression" ):
                listener.exitAdditive_expression(self)




    def additive_expression(self):

        localctx = CSharpParser.Additive_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_additive_expression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 964
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,56,self._ctx)
            if la_ == 1:
                self.state = 962
                self.multiplicative_expression()
                pass

            elif la_ == 2:
                self.state = 963
                self.method_invocation()
                pass


            self.state = 973
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==146 or _la==147:
                self.state = 966
                _la = self._input.LA(1)
                if not(_la==146 or _la==147):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 969
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,57,self._ctx)
                if la_ == 1:
                    self.state = 967
                    self.multiplicative_expression()
                    pass

                elif la_ == 2:
                    self.state = 968
                    self.method_invocation()
                    pass


                self.state = 975
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Multiplicative_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def switch_expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Switch_expressionContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Switch_expressionContext,i)


        def method_invocation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Method_invocationContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Method_invocationContext,i)


        def STAR(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.STAR)
            else:
                return self.getToken(CSharpParser.STAR, i)

        def DIV(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.DIV)
            else:
                return self.getToken(CSharpParser.DIV, i)

        def PERCENT(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.PERCENT)
            else:
                return self.getToken(CSharpParser.PERCENT, i)

        def getRuleIndex(self):
            return CSharpParser.RULE_multiplicative_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMultiplicative_expression" ):
                listener.enterMultiplicative_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMultiplicative_expression" ):
                listener.exitMultiplicative_expression(self)




    def multiplicative_expression(self):

        localctx = CSharpParser.Multiplicative_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_multiplicative_expression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 978
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,59,self._ctx)
            if la_ == 1:
                self.state = 976
                self.switch_expression()
                pass

            elif la_ == 2:
                self.state = 977
                self.method_invocation()
                pass


            self.state = 987
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 148)) & ~0x3f) == 0 and ((1 << (_la - 148)) & 7) != 0):
                self.state = 980
                _la = self._input.LA(1)
                if not(((((_la - 148)) & ~0x3f) == 0 and ((1 << (_la - 148)) & 7) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 983
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,60,self._ctx)
                if la_ == 1:
                    self.state = 981
                    self.switch_expression()
                    pass

                elif la_ == 2:
                    self.state = 982
                    self.method_invocation()
                    pass


                self.state = 989
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Switch_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def range_expression(self):
            return self.getTypedRuleContext(CSharpParser.Range_expressionContext,0)


        def SWITCH(self):
            return self.getToken(CSharpParser.SWITCH, 0)

        def OPEN_BRACE(self):
            return self.getToken(CSharpParser.OPEN_BRACE, 0)

        def CLOSE_BRACE(self):
            return self.getToken(CSharpParser.CLOSE_BRACE, 0)

        def switch_expression_arms(self):
            return self.getTypedRuleContext(CSharpParser.Switch_expression_armsContext,0)


        def COMMA(self):
            return self.getToken(CSharpParser.COMMA, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_switch_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSwitch_expression" ):
                listener.enterSwitch_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSwitch_expression" ):
                listener.exitSwitch_expression(self)




    def switch_expression(self):

        localctx = CSharpParser.Switch_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_switch_expression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 990
            self.range_expression()
            self.state = 1000
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==100:
                self.state = 991
                self.match(CSharpParser.SWITCH)
                self.state = 992
                self.match(CSharpParser.OPEN_BRACE)
                self.state = 997
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 4921388326695449600) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -948717009814542373) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & 18021049243014655) != 0):
                    self.state = 993
                    self.switch_expression_arms()
                    self.state = 995
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==143:
                        self.state = 994
                        self.match(CSharpParser.COMMA)




                self.state = 999
                self.match(CSharpParser.CLOSE_BRACE)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Switch_expression_armsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def switch_expression_arm(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Switch_expression_armContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Switch_expression_armContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.COMMA)
            else:
                return self.getToken(CSharpParser.COMMA, i)

        def getRuleIndex(self):
            return CSharpParser.RULE_switch_expression_arms

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSwitch_expression_arms" ):
                listener.enterSwitch_expression_arms(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSwitch_expression_arms" ):
                listener.exitSwitch_expression_arms(self)




    def switch_expression_arms(self):

        localctx = CSharpParser.Switch_expression_armsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_switch_expression_arms)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1002
            self.switch_expression_arm()
            self.state = 1007
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,65,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1003
                    self.match(CSharpParser.COMMA)
                    self.state = 1004
                    self.switch_expression_arm() 
                self.state = 1009
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,65,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Switch_expression_armContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pattern(self):
            return self.getTypedRuleContext(CSharpParser.PatternContext,0)


        def right_arrow(self):
            return self.getTypedRuleContext(CSharpParser.Right_arrowContext,0)


        def throwable_expression(self):
            return self.getTypedRuleContext(CSharpParser.Throwable_expressionContext,0)


        def case_guard(self):
            return self.getTypedRuleContext(CSharpParser.Case_guardContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_switch_expression_arm

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSwitch_expression_arm" ):
                listener.enterSwitch_expression_arm(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSwitch_expression_arm" ):
                listener.exitSwitch_expression_arm(self)




    def switch_expression_arm(self):

        localctx = CSharpParser.Switch_expression_armContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_switch_expression_arm)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1010
            self.pattern()
            self.state = 1012
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==118:
                self.state = 1011
                self.case_guard()


            self.state = 1014
            self.right_arrow()
            self.state = 1015
            self.throwable_expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Range_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def unary_expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Unary_expressionContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Unary_expressionContext,i)


        def OP_RANGE(self):
            return self.getToken(CSharpParser.OP_RANGE, 0)

        def method_invocation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Method_invocationContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Method_invocationContext,i)


        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.DOT)
            else:
                return self.getToken(CSharpParser.DOT, i)

        def getRuleIndex(self):
            return CSharpParser.RULE_range_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRange_expression" ):
                listener.enterRange_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRange_expression" ):
                listener.exitRange_expression(self)




    def range_expression(self):

        localctx = CSharpParser.Range_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_range_expression)
        self._la = 0 # Token type
        try:
            self.state = 1033
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,71,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1017
                self.unary_expression()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1019
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 4921388326695449600) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -953220892920240293) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & 51784717567) != 0):
                    self.state = 1018
                    self.unary_expression()


                self.state = 1021
                self.match(CSharpParser.OP_RANGE)
                self.state = 1023
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,68,self._ctx)
                if la_ == 1:
                    self.state = 1022
                    self.unary_expression()


                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1029 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 1025
                        self.method_invocation()
                        self.state = 1027
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==142:
                            self.state = 1026
                            self.match(CSharpParser.DOT)



                    else:
                        raise NoViableAltException(self)
                    self.state = 1031 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,70,self._ctx)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Unary_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def cast_expression(self):
            return self.getTypedRuleContext(CSharpParser.Cast_expressionContext,0)


        def primary_expression(self):
            return self.getTypedRuleContext(CSharpParser.Primary_expressionContext,0)


        def PLUS(self):
            return self.getToken(CSharpParser.PLUS, 0)

        def unary_expression(self):
            return self.getTypedRuleContext(CSharpParser.Unary_expressionContext,0)


        def MINUS(self):
            return self.getToken(CSharpParser.MINUS, 0)

        def BANG(self):
            return self.getToken(CSharpParser.BANG, 0)

        def TILDE(self):
            return self.getToken(CSharpParser.TILDE, 0)

        def OP_INC(self):
            return self.getToken(CSharpParser.OP_INC, 0)

        def OP_DEC(self):
            return self.getToken(CSharpParser.OP_DEC, 0)

        def AWAIT(self):
            return self.getToken(CSharpParser.AWAIT, 0)

        def AMP(self):
            return self.getToken(CSharpParser.AMP, 0)

        def STAR(self):
            return self.getToken(CSharpParser.STAR, 0)

        def CARET(self):
            return self.getToken(CSharpParser.CARET, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_unary_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnary_expression" ):
                listener.enterUnary_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnary_expression" ):
                listener.exitUnary_expression(self)




    def unary_expression(self):

        localctx = CSharpParser.Unary_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_unary_expression)
        try:
            self.state = 1057
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,72,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1035
                self.cast_expression()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1036
                self.primary_expression()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1037
                self.match(CSharpParser.PLUS)
                self.state = 1038
                self.unary_expression()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1039
                self.match(CSharpParser.MINUS)
                self.state = 1040
                self.unary_expression()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1041
                self.match(CSharpParser.BANG)
                self.state = 1042
                self.unary_expression()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1043
                self.match(CSharpParser.TILDE)
                self.state = 1044
                self.unary_expression()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1045
                self.match(CSharpParser.OP_INC)
                self.state = 1046
                self.unary_expression()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 1047
                self.match(CSharpParser.OP_DEC)
                self.state = 1048
                self.unary_expression()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 1049
                self.match(CSharpParser.AWAIT)
                self.state = 1050
                self.unary_expression()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 1051
                self.match(CSharpParser.AMP)
                self.state = 1052
                self.unary_expression()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 1053
                self.match(CSharpParser.STAR)
                self.state = 1054
                self.unary_expression()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 1055
                self.match(CSharpParser.CARET)
                self.state = 1056
                self.unary_expression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Cast_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PARENS(self):
            return self.getToken(CSharpParser.OPEN_PARENS, 0)

        def type_(self):
            return self.getTypedRuleContext(CSharpParser.Type_Context,0)


        def CLOSE_PARENS(self):
            return self.getToken(CSharpParser.CLOSE_PARENS, 0)

        def unary_expression(self):
            return self.getTypedRuleContext(CSharpParser.Unary_expressionContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_cast_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCast_expression" ):
                listener.enterCast_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCast_expression" ):
                listener.exitCast_expression(self)




    def cast_expression(self):

        localctx = CSharpParser.Cast_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_cast_expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1059
            self.match(CSharpParser.OPEN_PARENS)
            self.state = 1060
            self.type_()
            self.state = 1061
            self.match(CSharpParser.CLOSE_PARENS)
            self.state = 1062
            self.unary_expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Collection_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_BRACKET(self):
            return self.getToken(CSharpParser.OPEN_BRACKET, 0)

        def CLOSE_BRACKET(self):
            return self.getToken(CSharpParser.CLOSE_BRACKET, 0)

        def collection_element_list(self):
            return self.getTypedRuleContext(CSharpParser.Collection_element_listContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_collection_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCollection_expression" ):
                listener.enterCollection_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCollection_expression" ):
                listener.exitCollection_expression(self)




    def collection_expression(self):

        localctx = CSharpParser.Collection_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_collection_expression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1064
            self.match(CSharpParser.OPEN_BRACKET)
            self.state = 1066
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 4921388326695449600) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -953220609444010149) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & 18014450294199551) != 0):
                self.state = 1065
                self.collection_element_list()


            self.state = 1068
            self.match(CSharpParser.CLOSE_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Collection_element_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def collection_element(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Collection_elementContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Collection_elementContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.COMMA)
            else:
                return self.getToken(CSharpParser.COMMA, i)

        def getRuleIndex(self):
            return CSharpParser.RULE_collection_element_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCollection_element_list" ):
                listener.enterCollection_element_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCollection_element_list" ):
                listener.exitCollection_element_list(self)




    def collection_element_list(self):

        localctx = CSharpParser.Collection_element_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_collection_element_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1070
            self.collection_element()
            self.state = 1075
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==143:
                self.state = 1071
                self.match(CSharpParser.COMMA)
                self.state = 1072
                self.collection_element()
                self.state = 1077
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Collection_elementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(CSharpParser.ExpressionContext,0)


        def OP_RANGE(self):
            return self.getToken(CSharpParser.OP_RANGE, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_collection_element

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCollection_element" ):
                listener.enterCollection_element(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCollection_element" ):
                listener.exitCollection_element(self)




    def collection_element(self):

        localctx = CSharpParser.Collection_elementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_collection_element)
        try:
            self.state = 1081
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,75,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1078
                self.expression()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1079
                self.match(CSharpParser.OP_RANGE)
                self.state = 1080
                self.expression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Primary_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.pe = None # Primary_expression_startContext

        def primary_expression_start(self):
            return self.getTypedRuleContext(CSharpParser.Primary_expression_startContext,0)


        def BANG(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.BANG)
            else:
                return self.getToken(CSharpParser.BANG, i)

        def bracket_expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Bracket_expressionContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Bracket_expressionContext,i)


        def member_access(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Member_accessContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Member_accessContext,i)


        def method_invocation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Method_invocationContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Method_invocationContext,i)


        def OP_INC(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.OP_INC)
            else:
                return self.getToken(CSharpParser.OP_INC, i)

        def OP_DEC(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.OP_DEC)
            else:
                return self.getToken(CSharpParser.OP_DEC, i)

        def OP_PTR(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.OP_PTR)
            else:
                return self.getToken(CSharpParser.OP_PTR, i)

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(CSharpParser.IdentifierContext,i)


        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.DOT)
            else:
                return self.getToken(CSharpParser.DOT, i)

        def tuple_type(self):
            return self.getTypedRuleContext(CSharpParser.Tuple_typeContext,0)


        def default_value_expression(self):
            return self.getTypedRuleContext(CSharpParser.Default_value_expressionContext,0)


        def stackalloc_expression(self):
            return self.getTypedRuleContext(CSharpParser.Stackalloc_expressionContext,0)


        def collection_expression(self):
            return self.getTypedRuleContext(CSharpParser.Collection_expressionContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_primary_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrimary_expression" ):
                listener.enterPrimary_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrimary_expression" ):
                listener.exitPrimary_expression(self)




    def primary_expression(self):

        localctx = CSharpParser.Primary_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_primary_expression)
        try:
            self.state = 1128
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,85,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1083
                localctx.pe = self.primary_expression_start()
                self.state = 1085
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,76,self._ctx)
                if la_ == 1:
                    self.state = 1084
                    self.match(CSharpParser.BANG)


                self.state = 1090
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,77,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1087
                        self.bracket_expression() 
                    self.state = 1092
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,77,self._ctx)

                self.state = 1094
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,78,self._ctx)
                if la_ == 1:
                    self.state = 1093
                    self.match(CSharpParser.BANG)


                self.state = 1121
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,84,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1105
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [142, 159]:
                            self.state = 1096
                            self.member_access()
                            pass
                        elif token in [10, 12, 13, 15, 16, 17, 18, 19, 21, 22, 25, 26, 30, 31, 32, 33, 35, 36, 39, 43, 46, 50, 51, 54, 58, 62, 64, 65, 67, 68, 70, 72, 73, 74, 77, 81, 88, 90, 92, 93, 94, 95, 96, 98, 101, 103, 105, 107, 108, 109, 110, 112, 114, 118, 119, 121, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 138, 140]:
                            self.state = 1097
                            self.method_invocation()
                            self.state = 1099
                            self._errHandler.sync(self)
                            la_ = self._interp.adaptivePredict(self._input,79,self._ctx)
                            if la_ == 1:
                                self.state = 1098
                                self.match(CSharpParser.DOT)


                            pass
                        elif token in [162]:
                            self.state = 1101
                            self.match(CSharpParser.OP_INC)
                            pass
                        elif token in [163]:
                            self.state = 1102
                            self.match(CSharpParser.OP_DEC)
                            pass
                        elif token in [166]:
                            self.state = 1103
                            self.match(CSharpParser.OP_PTR)
                            self.state = 1104
                            self.identifier()
                            pass
                        else:
                            raise NoViableAltException(self)

                        self.state = 1108
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,81,self._ctx)
                        if la_ == 1:
                            self.state = 1107
                            self.match(CSharpParser.BANG)


                        self.state = 1113
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,82,self._ctx)
                        while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                            if _alt==1:
                                self.state = 1110
                                self.bracket_expression() 
                            self.state = 1115
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input,82,self._ctx)

                        self.state = 1117
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,83,self._ctx)
                        if la_ == 1:
                            self.state = 1116
                            self.match(CSharpParser.BANG)

                 
                    self.state = 1123
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,84,self._ctx)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1124
                self.tuple_type()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1125
                self.default_value_expression()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1126
                self.stackalloc_expression()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1127
                self.collection_expression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Primary_expression_startContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CSharpParser.RULE_primary_expression_start

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class LiteralAccessExpressionContext(Primary_expression_startContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CSharpParser.Primary_expression_startContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LITERAL_ACCESS(self):
            return self.getToken(CSharpParser.LITERAL_ACCESS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLiteralAccessExpression" ):
                listener.enterLiteralAccessExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLiteralAccessExpression" ):
                listener.exitLiteralAccessExpression(self)


    class DefaultValueExpressionContext(Primary_expression_startContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CSharpParser.Primary_expression_startContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DEFAULT(self):
            return self.getToken(CSharpParser.DEFAULT, 0)
        def OPEN_PARENS(self):
            return self.getToken(CSharpParser.OPEN_PARENS, 0)
        def type_(self):
            return self.getTypedRuleContext(CSharpParser.Type_Context,0)

        def CLOSE_PARENS(self):
            return self.getToken(CSharpParser.CLOSE_PARENS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDefaultValueExpression" ):
                listener.enterDefaultValueExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDefaultValueExpression" ):
                listener.exitDefaultValueExpression(self)


    class BaseAccessExpressionContext(Primary_expression_startContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CSharpParser.Primary_expression_startContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def BASE(self):
            return self.getToken(CSharpParser.BASE, 0)
        def DOT(self):
            return self.getToken(CSharpParser.DOT, 0)
        def identifier(self):
            return self.getTypedRuleContext(CSharpParser.IdentifierContext,0)

        def OPEN_BRACKET(self):
            return self.getToken(CSharpParser.OPEN_BRACKET, 0)
        def expression_list(self):
            return self.getTypedRuleContext(CSharpParser.Expression_listContext,0)

        def CLOSE_BRACKET(self):
            return self.getToken(CSharpParser.CLOSE_BRACKET, 0)
        def type_argument_list(self):
            return self.getTypedRuleContext(CSharpParser.Type_argument_listContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBaseAccessExpression" ):
                listener.enterBaseAccessExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBaseAccessExpression" ):
                listener.exitBaseAccessExpression(self)


    class SizeofExpressionContext(Primary_expression_startContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CSharpParser.Primary_expression_startContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SIZEOF(self):
            return self.getToken(CSharpParser.SIZEOF, 0)
        def OPEN_PARENS(self):
            return self.getToken(CSharpParser.OPEN_PARENS, 0)
        def type_(self):
            return self.getTypedRuleContext(CSharpParser.Type_Context,0)

        def CLOSE_PARENS(self):
            return self.getToken(CSharpParser.CLOSE_PARENS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSizeofExpression" ):
                listener.enterSizeofExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSizeofExpression" ):
                listener.exitSizeofExpression(self)


    class ParenthesisExpressionsContext(Primary_expression_startContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CSharpParser.Primary_expression_startContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def OPEN_PARENS(self):
            return self.getToken(CSharpParser.OPEN_PARENS, 0)
        def expression(self):
            return self.getTypedRuleContext(CSharpParser.ExpressionContext,0)

        def CLOSE_PARENS(self):
            return self.getToken(CSharpParser.CLOSE_PARENS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParenthesisExpressions" ):
                listener.enterParenthesisExpressions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParenthesisExpressions" ):
                listener.exitParenthesisExpressions(self)


    class TargetTypedNewExpressionContext(Primary_expression_startContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CSharpParser.Primary_expression_startContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def NEW(self):
            return self.getToken(CSharpParser.NEW, 0)
        def target_typed_new(self):
            return self.getTypedRuleContext(CSharpParser.Target_typed_newContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTargetTypedNewExpression" ):
                listener.enterTargetTypedNewExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTargetTypedNewExpression" ):
                listener.exitTargetTypedNewExpression(self)


    class ThisReferenceExpressionContext(Primary_expression_startContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CSharpParser.Primary_expression_startContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def THIS(self):
            return self.getToken(CSharpParser.THIS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterThisReferenceExpression" ):
                listener.enterThisReferenceExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitThisReferenceExpression" ):
                listener.exitThisReferenceExpression(self)


    class ObjectCreationExpressionContext(Primary_expression_startContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CSharpParser.Primary_expression_startContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def NEW(self):
            return self.getToken(CSharpParser.NEW, 0)
        def type_(self):
            return self.getTypedRuleContext(CSharpParser.Type_Context,0)

        def anonymous_object_initializer(self):
            return self.getTypedRuleContext(CSharpParser.Anonymous_object_initializerContext,0)

        def rank_specifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Rank_specifierContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Rank_specifierContext,i)

        def array_initializer(self):
            return self.getTypedRuleContext(CSharpParser.Array_initializerContext,0)

        def object_creation_expression(self):
            return self.getTypedRuleContext(CSharpParser.Object_creation_expressionContext,0)

        def object_or_collection_initializer(self):
            return self.getTypedRuleContext(CSharpParser.Object_or_collection_initializerContext,0)

        def OPEN_BRACKET(self):
            return self.getToken(CSharpParser.OPEN_BRACKET, 0)
        def expression_list(self):
            return self.getTypedRuleContext(CSharpParser.Expression_listContext,0)

        def CLOSE_BRACKET(self):
            return self.getToken(CSharpParser.CLOSE_BRACKET, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterObjectCreationExpression" ):
                listener.enterObjectCreationExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitObjectCreationExpression" ):
                listener.exitObjectCreationExpression(self)


    class AnonymousMethodExpressionContext(Primary_expression_startContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CSharpParser.Primary_expression_startContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DELEGATE(self):
            return self.getToken(CSharpParser.DELEGATE, 0)
        def block(self):
            return self.getTypedRuleContext(CSharpParser.BlockContext,0)

        def ASYNC(self):
            return self.getToken(CSharpParser.ASYNC, 0)
        def OPEN_PARENS(self):
            return self.getToken(CSharpParser.OPEN_PARENS, 0)
        def CLOSE_PARENS(self):
            return self.getToken(CSharpParser.CLOSE_PARENS, 0)
        def explicit_anonymous_function_parameter_list(self):
            return self.getTypedRuleContext(CSharpParser.Explicit_anonymous_function_parameter_listContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnonymousMethodExpression" ):
                listener.enterAnonymousMethodExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnonymousMethodExpression" ):
                listener.exitAnonymousMethodExpression(self)


    class TypeofExpressionContext(Primary_expression_startContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CSharpParser.Primary_expression_startContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def TYPEOF(self):
            return self.getToken(CSharpParser.TYPEOF, 0)
        def OPEN_PARENS(self):
            return self.getToken(CSharpParser.OPEN_PARENS, 0)
        def CLOSE_PARENS(self):
            return self.getToken(CSharpParser.CLOSE_PARENS, 0)
        def unbound_type_name(self):
            return self.getTypedRuleContext(CSharpParser.Unbound_type_nameContext,0)

        def type_(self):
            return self.getTypedRuleContext(CSharpParser.Type_Context,0)

        def VOID(self):
            return self.getToken(CSharpParser.VOID, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeofExpression" ):
                listener.enterTypeofExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeofExpression" ):
                listener.exitTypeofExpression(self)


    class TupleExpressionContext(Primary_expression_startContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CSharpParser.Primary_expression_startContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def OPEN_PARENS(self):
            return self.getToken(CSharpParser.OPEN_PARENS, 0)
        def argument(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.ArgumentContext)
            else:
                return self.getTypedRuleContext(CSharpParser.ArgumentContext,i)

        def CLOSE_PARENS(self):
            return self.getToken(CSharpParser.CLOSE_PARENS, 0)
        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.COMMA)
            else:
                return self.getToken(CSharpParser.COMMA, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTupleExpression" ):
                listener.enterTupleExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTupleExpression" ):
                listener.exitTupleExpression(self)


    class UncheckedExpressionContext(Primary_expression_startContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CSharpParser.Primary_expression_startContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def UNCHECKED(self):
            return self.getToken(CSharpParser.UNCHECKED, 0)
        def OPEN_PARENS(self):
            return self.getToken(CSharpParser.OPEN_PARENS, 0)
        def expression(self):
            return self.getTypedRuleContext(CSharpParser.ExpressionContext,0)

        def CLOSE_PARENS(self):
            return self.getToken(CSharpParser.CLOSE_PARENS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUncheckedExpression" ):
                listener.enterUncheckedExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUncheckedExpression" ):
                listener.exitUncheckedExpression(self)


    class SimpleNameExpressionContext(Primary_expression_startContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CSharpParser.Primary_expression_startContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def identifier(self):
            return self.getTypedRuleContext(CSharpParser.IdentifierContext,0)

        def type_argument_list(self):
            return self.getTypedRuleContext(CSharpParser.Type_argument_listContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleNameExpression" ):
                listener.enterSimpleNameExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleNameExpression" ):
                listener.exitSimpleNameExpression(self)


    class MemberAccessExpressionContext(Primary_expression_startContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CSharpParser.Primary_expression_startContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def predefined_type(self):
            return self.getTypedRuleContext(CSharpParser.Predefined_typeContext,0)

        def qualified_alias_member(self):
            return self.getTypedRuleContext(CSharpParser.Qualified_alias_memberContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMemberAccessExpression" ):
                listener.enterMemberAccessExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMemberAccessExpression" ):
                listener.exitMemberAccessExpression(self)


    class CheckedExpressionContext(Primary_expression_startContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CSharpParser.Primary_expression_startContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CHECKED(self):
            return self.getToken(CSharpParser.CHECKED, 0)
        def OPEN_PARENS(self):
            return self.getToken(CSharpParser.OPEN_PARENS, 0)
        def expression(self):
            return self.getTypedRuleContext(CSharpParser.ExpressionContext,0)

        def CLOSE_PARENS(self):
            return self.getToken(CSharpParser.CLOSE_PARENS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCheckedExpression" ):
                listener.enterCheckedExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCheckedExpression" ):
                listener.exitCheckedExpression(self)


    class LiteralExpressionContext(Primary_expression_startContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CSharpParser.Primary_expression_startContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def literal(self):
            return self.getTypedRuleContext(CSharpParser.LiteralContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLiteralExpression" ):
                listener.enterLiteralExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLiteralExpression" ):
                listener.exitLiteralExpression(self)


    class NameofExpressionContext(Primary_expression_startContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CSharpParser.Primary_expression_startContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def NAMEOF(self):
            return self.getToken(CSharpParser.NAMEOF, 0)
        def OPEN_PARENS(self):
            return self.getToken(CSharpParser.OPEN_PARENS, 0)
        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(CSharpParser.IdentifierContext,i)

        def CLOSE_PARENS(self):
            return self.getToken(CSharpParser.CLOSE_PARENS, 0)
        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.DOT)
            else:
                return self.getToken(CSharpParser.DOT, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNameofExpression" ):
                listener.enterNameofExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNameofExpression" ):
                listener.exitNameofExpression(self)



    def primary_expression_start(self):

        localctx = CSharpParser.Primary_expression_startContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_primary_expression_start)
        self._la = 0 # Token type
        try:
            self.state = 1253
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,101,self._ctx)
            if la_ == 1:
                localctx = CSharpParser.LiteralExpressionContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1130
                self.literal()
                pass

            elif la_ == 2:
                localctx = CSharpParser.SimpleNameExpressionContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1131
                self.identifier()
                self.state = 1133
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,86,self._ctx)
                if la_ == 1:
                    self.state = 1132
                    self.type_argument_list()


                pass

            elif la_ == 3:
                localctx = CSharpParser.ParenthesisExpressionsContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 1135
                self.match(CSharpParser.OPEN_PARENS)
                self.state = 1136
                self.expression()
                self.state = 1137
                self.match(CSharpParser.CLOSE_PARENS)
                pass

            elif la_ == 4:
                localctx = CSharpParser.MemberAccessExpressionContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 1139
                self.predefined_type()
                pass

            elif la_ == 5:
                localctx = CSharpParser.MemberAccessExpressionContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 1140
                self.qualified_alias_member()
                pass

            elif la_ == 6:
                localctx = CSharpParser.LiteralAccessExpressionContext(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 1141
                self.match(CSharpParser.LITERAL_ACCESS)
                pass

            elif la_ == 7:
                localctx = CSharpParser.ThisReferenceExpressionContext(self, localctx)
                self.enterOuterAlt(localctx, 7)
                self.state = 1142
                self.match(CSharpParser.THIS)
                pass

            elif la_ == 8:
                localctx = CSharpParser.BaseAccessExpressionContext(self, localctx)
                self.enterOuterAlt(localctx, 8)
                self.state = 1143
                self.match(CSharpParser.BASE)
                self.state = 1153
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [142]:
                    self.state = 1144
                    self.match(CSharpParser.DOT)
                    self.state = 1145
                    self.identifier()
                    self.state = 1147
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,87,self._ctx)
                    if la_ == 1:
                        self.state = 1146
                        self.type_argument_list()


                    pass
                elif token in [138]:
                    self.state = 1149
                    self.match(CSharpParser.OPEN_BRACKET)
                    self.state = 1150
                    self.expression_list()
                    self.state = 1151
                    self.match(CSharpParser.CLOSE_BRACKET)
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 9:
                localctx = CSharpParser.ObjectCreationExpressionContext(self, localctx)
                self.enterOuterAlt(localctx, 9)
                self.state = 1155
                self.match(CSharpParser.NEW)
                self.state = 1184
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,93,self._ctx)
                if la_ == 1:
                    self.state = 1156
                    self.type_()
                    self.state = 1178
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,92,self._ctx)
                    if la_ == 1:
                        self.state = 1157
                        self.object_creation_expression()
                        pass

                    elif la_ == 2:
                        self.state = 1158
                        self.object_or_collection_initializer()
                        pass

                    elif la_ == 3:
                        self.state = 1159
                        self.match(CSharpParser.OPEN_BRACKET)
                        self.state = 1160
                        self.expression_list()
                        self.state = 1161
                        self.match(CSharpParser.CLOSE_BRACKET)
                        self.state = 1165
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,89,self._ctx)
                        while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                            if _alt==1:
                                self.state = 1162
                                self.rank_specifier() 
                            self.state = 1167
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input,89,self._ctx)

                        self.state = 1169
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,90,self._ctx)
                        if la_ == 1:
                            self.state = 1168
                            self.array_initializer()


                        pass

                    elif la_ == 4:
                        self.state = 1172 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while True:
                            self.state = 1171
                            self.rank_specifier()
                            self.state = 1174 
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if not (_la==138):
                                break

                        self.state = 1176
                        self.array_initializer()
                        pass



                elif la_ == 2:
                    self.state = 1180
                    self.anonymous_object_initializer()

                elif la_ == 3:
                    self.state = 1181
                    self.rank_specifier()
                    self.state = 1182
                    self.array_initializer()


                pass

            elif la_ == 10:
                localctx = CSharpParser.TargetTypedNewExpressionContext(self, localctx)
                self.enterOuterAlt(localctx, 10)
                self.state = 1186
                self.match(CSharpParser.NEW)
                self.state = 1187
                self.target_typed_new()
                pass

            elif la_ == 11:
                localctx = CSharpParser.TupleExpressionContext(self, localctx)
                self.enterOuterAlt(localctx, 11)
                self.state = 1188
                self.match(CSharpParser.OPEN_PARENS)
                self.state = 1189
                self.argument()
                self.state = 1192 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 1190
                    self.match(CSharpParser.COMMA)
                    self.state = 1191
                    self.argument()
                    self.state = 1194 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==143):
                        break

                self.state = 1196
                self.match(CSharpParser.CLOSE_PARENS)
                pass

            elif la_ == 12:
                localctx = CSharpParser.TypeofExpressionContext(self, localctx)
                self.enterOuterAlt(localctx, 12)
                self.state = 1198
                self.match(CSharpParser.TYPEOF)
                self.state = 1199
                self.match(CSharpParser.OPEN_PARENS)
                self.state = 1203
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,95,self._ctx)
                if la_ == 1:
                    self.state = 1200
                    self.unbound_type_name()
                    pass

                elif la_ == 2:
                    self.state = 1201
                    self.type_()
                    pass

                elif la_ == 3:
                    self.state = 1202
                    self.match(CSharpParser.VOID)
                    pass


                self.state = 1205
                self.match(CSharpParser.CLOSE_PARENS)
                pass

            elif la_ == 13:
                localctx = CSharpParser.CheckedExpressionContext(self, localctx)
                self.enterOuterAlt(localctx, 13)
                self.state = 1206
                self.match(CSharpParser.CHECKED)
                self.state = 1207
                self.match(CSharpParser.OPEN_PARENS)
                self.state = 1208
                self.expression()
                self.state = 1209
                self.match(CSharpParser.CLOSE_PARENS)
                pass

            elif la_ == 14:
                localctx = CSharpParser.UncheckedExpressionContext(self, localctx)
                self.enterOuterAlt(localctx, 14)
                self.state = 1211
                self.match(CSharpParser.UNCHECKED)
                self.state = 1212
                self.match(CSharpParser.OPEN_PARENS)
                self.state = 1213
                self.expression()
                self.state = 1214
                self.match(CSharpParser.CLOSE_PARENS)
                pass

            elif la_ == 15:
                localctx = CSharpParser.DefaultValueExpressionContext(self, localctx)
                self.enterOuterAlt(localctx, 15)
                self.state = 1216
                self.match(CSharpParser.DEFAULT)
                self.state = 1221
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,96,self._ctx)
                if la_ == 1:
                    self.state = 1217
                    self.match(CSharpParser.OPEN_PARENS)
                    self.state = 1218
                    self.type_()
                    self.state = 1219
                    self.match(CSharpParser.CLOSE_PARENS)


                pass

            elif la_ == 16:
                localctx = CSharpParser.AnonymousMethodExpressionContext(self, localctx)
                self.enterOuterAlt(localctx, 16)
                self.state = 1224
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==16:
                    self.state = 1223
                    self.match(CSharpParser.ASYNC)


                self.state = 1226
                self.match(CSharpParser.DELEGATE)
                self.state = 1232
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==140:
                    self.state = 1227
                    self.match(CSharpParser.OPEN_PARENS)
                    self.state = 1229
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & 5065494716463428608) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 1357087638898763291) != 0) or _la==138 or _la==140:
                        self.state = 1228
                        self.explicit_anonymous_function_parameter_list()


                    self.state = 1231
                    self.match(CSharpParser.CLOSE_PARENS)


                self.state = 1234
                self.block()
                pass

            elif la_ == 17:
                localctx = CSharpParser.SizeofExpressionContext(self, localctx)
                self.enterOuterAlt(localctx, 17)
                self.state = 1235
                self.match(CSharpParser.SIZEOF)
                self.state = 1236
                self.match(CSharpParser.OPEN_PARENS)
                self.state = 1237
                self.type_()
                self.state = 1238
                self.match(CSharpParser.CLOSE_PARENS)
                pass

            elif la_ == 18:
                localctx = CSharpParser.NameofExpressionContext(self, localctx)
                self.enterOuterAlt(localctx, 18)
                self.state = 1240
                self.match(CSharpParser.NAMEOF)
                self.state = 1241
                self.match(CSharpParser.OPEN_PARENS)
                self.state = 1247
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,100,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1242
                        self.identifier()
                        self.state = 1243
                        self.match(CSharpParser.DOT) 
                    self.state = 1249
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,100,self._ctx)

                self.state = 1250
                self.identifier()
                self.state = 1251
                self.match(CSharpParser.CLOSE_PARENS)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Throwable_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(CSharpParser.ExpressionContext,0)


        def throw_expression(self):
            return self.getTypedRuleContext(CSharpParser.Throw_expressionContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_throwable_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterThrowable_expression" ):
                listener.enterThrowable_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitThrowable_expression" ):
                listener.exitThrowable_expression(self)




    def throwable_expression(self):

        localctx = CSharpParser.Throwable_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_throwable_expression)
        try:
            self.state = 1257
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,102,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1255
                self.expression()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1256
                self.throw_expression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Throw_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def THROW(self):
            return self.getToken(CSharpParser.THROW, 0)

        def expression(self):
            return self.getTypedRuleContext(CSharpParser.ExpressionContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_throw_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterThrow_expression" ):
                listener.enterThrow_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitThrow_expression" ):
                listener.exitThrow_expression(self)




    def throw_expression(self):

        localctx = CSharpParser.Throw_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_throw_expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1259
            self.match(CSharpParser.THROW)
            self.state = 1260
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Member_accessContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DOT(self):
            return self.getToken(CSharpParser.DOT, 0)

        def identifier(self):
            return self.getTypedRuleContext(CSharpParser.IdentifierContext,0)


        def INTERR(self):
            return self.getToken(CSharpParser.INTERR, 0)

        def type_argument_list(self):
            return self.getTypedRuleContext(CSharpParser.Type_argument_listContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_member_access

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMember_access" ):
                listener.enterMember_access(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMember_access" ):
                listener.exitMember_access(self)




    def member_access(self):

        localctx = CSharpParser.Member_accessContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_member_access)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1263
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==159:
                self.state = 1262
                self.match(CSharpParser.INTERR)


            self.state = 1265
            self.match(CSharpParser.DOT)
            self.state = 1266
            self.identifier()
            self.state = 1268
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,104,self._ctx)
            if la_ == 1:
                self.state = 1267
                self.type_argument_list()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Bracket_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_BRACKET(self):
            return self.getToken(CSharpParser.OPEN_BRACKET, 0)

        def indexer_argument(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Indexer_argumentContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Indexer_argumentContext,i)


        def CLOSE_BRACKET(self):
            return self.getToken(CSharpParser.CLOSE_BRACKET, 0)

        def INTERR(self):
            return self.getToken(CSharpParser.INTERR, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.COMMA)
            else:
                return self.getToken(CSharpParser.COMMA, i)

        def getRuleIndex(self):
            return CSharpParser.RULE_bracket_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBracket_expression" ):
                listener.enterBracket_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBracket_expression" ):
                listener.exitBracket_expression(self)




    def bracket_expression(self):

        localctx = CSharpParser.Bracket_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_bracket_expression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1271
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==159:
                self.state = 1270
                self.match(CSharpParser.INTERR)


            self.state = 1273
            self.match(CSharpParser.OPEN_BRACKET)
            self.state = 1274
            self.indexer_argument()
            self.state = 1279
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==143:
                self.state = 1275
                self.match(CSharpParser.COMMA)
                self.state = 1276
                self.indexer_argument()
                self.state = 1281
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1282
            self.match(CSharpParser.CLOSE_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Indexer_argumentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(CSharpParser.ExpressionContext,0)


        def identifier(self):
            return self.getTypedRuleContext(CSharpParser.IdentifierContext,0)


        def COLON(self):
            return self.getToken(CSharpParser.COLON, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_indexer_argument

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndexer_argument" ):
                listener.enterIndexer_argument(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndexer_argument" ):
                listener.exitIndexer_argument(self)




    def indexer_argument(self):

        localctx = CSharpParser.Indexer_argumentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_indexer_argument)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1287
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,107,self._ctx)
            if la_ == 1:
                self.state = 1284
                self.identifier()
                self.state = 1285
                self.match(CSharpParser.COLON)


            self.state = 1289
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Predefined_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BOOL(self):
            return self.getToken(CSharpParser.BOOL, 0)

        def BYTE(self):
            return self.getToken(CSharpParser.BYTE, 0)

        def CHAR(self):
            return self.getToken(CSharpParser.CHAR, 0)

        def DECIMAL(self):
            return self.getToken(CSharpParser.DECIMAL, 0)

        def DOUBLE(self):
            return self.getToken(CSharpParser.DOUBLE, 0)

        def FLOAT(self):
            return self.getToken(CSharpParser.FLOAT, 0)

        def INT(self):
            return self.getToken(CSharpParser.INT, 0)

        def LONG(self):
            return self.getToken(CSharpParser.LONG, 0)

        def OBJECT(self):
            return self.getToken(CSharpParser.OBJECT, 0)

        def SBYTE(self):
            return self.getToken(CSharpParser.SBYTE, 0)

        def SHORT(self):
            return self.getToken(CSharpParser.SHORT, 0)

        def STRING(self):
            return self.getToken(CSharpParser.STRING, 0)

        def UINT(self):
            return self.getToken(CSharpParser.UINT, 0)

        def ULONG(self):
            return self.getToken(CSharpParser.ULONG, 0)

        def USHORT(self):
            return self.getToken(CSharpParser.USHORT, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_predefined_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPredefined_type" ):
                listener.enterPredefined_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPredefined_type" ):
                listener.exitPredefined_type(self)




    def predefined_type(self):

        localctx = CSharpParser.Predefined_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_predefined_type)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1291
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 288300780367642624) != 0) or ((((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & 38485197062209) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Expression_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(CSharpParser.ExpressionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.COMMA)
            else:
                return self.getToken(CSharpParser.COMMA, i)

        def getRuleIndex(self):
            return CSharpParser.RULE_expression_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpression_list" ):
                listener.enterExpression_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpression_list" ):
                listener.exitExpression_list(self)




    def expression_list(self):

        localctx = CSharpParser.Expression_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_expression_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1293
            self.expression()
            self.state = 1298
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==143:
                self.state = 1294
                self.match(CSharpParser.COMMA)
                self.state = 1295
                self.expression()
                self.state = 1300
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Object_or_collection_initializerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def object_initializer(self):
            return self.getTypedRuleContext(CSharpParser.Object_initializerContext,0)


        def collection_initializer(self):
            return self.getTypedRuleContext(CSharpParser.Collection_initializerContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_object_or_collection_initializer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterObject_or_collection_initializer" ):
                listener.enterObject_or_collection_initializer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitObject_or_collection_initializer" ):
                listener.exitObject_or_collection_initializer(self)




    def object_or_collection_initializer(self):

        localctx = CSharpParser.Object_or_collection_initializerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_object_or_collection_initializer)
        try:
            self.state = 1303
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,109,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1301
                self.object_initializer()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1302
                self.collection_initializer()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Object_initializerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_BRACE(self):
            return self.getToken(CSharpParser.OPEN_BRACE, 0)

        def CLOSE_BRACE(self):
            return self.getToken(CSharpParser.CLOSE_BRACE, 0)

        def member_initializer_list(self):
            return self.getTypedRuleContext(CSharpParser.Member_initializer_listContext,0)


        def COMMA(self):
            return self.getToken(CSharpParser.COMMA, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_object_initializer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterObject_initializer" ):
                listener.enterObject_initializer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitObject_initializer" ):
                listener.exitObject_initializer(self)




    def object_initializer(self):

        localctx = CSharpParser.Object_initializerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_object_initializer)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1305
            self.match(CSharpParser.OPEN_BRACE)
            self.state = 1310
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 4633078743724962816) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 1352276157684392979) != 0) or _la==138:
                self.state = 1306
                self.member_initializer_list()
                self.state = 1308
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==143:
                    self.state = 1307
                    self.match(CSharpParser.COMMA)




            self.state = 1312
            self.match(CSharpParser.CLOSE_BRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Member_initializer_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def member_initializer(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Member_initializerContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Member_initializerContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.COMMA)
            else:
                return self.getToken(CSharpParser.COMMA, i)

        def getRuleIndex(self):
            return CSharpParser.RULE_member_initializer_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMember_initializer_list" ):
                listener.enterMember_initializer_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMember_initializer_list" ):
                listener.exitMember_initializer_list(self)




    def member_initializer_list(self):

        localctx = CSharpParser.Member_initializer_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_member_initializer_list)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1314
            self.member_initializer()
            self.state = 1319
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,112,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1315
                    self.match(CSharpParser.COMMA)
                    self.state = 1316
                    self.member_initializer() 
                self.state = 1321
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,112,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Member_initializerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ASSIGNMENT(self):
            return self.getToken(CSharpParser.ASSIGNMENT, 0)

        def initializer_value(self):
            return self.getTypedRuleContext(CSharpParser.Initializer_valueContext,0)


        def identifier(self):
            return self.getTypedRuleContext(CSharpParser.IdentifierContext,0)


        def OPEN_BRACKET(self):
            return self.getToken(CSharpParser.OPEN_BRACKET, 0)

        def expression(self):
            return self.getTypedRuleContext(CSharpParser.ExpressionContext,0)


        def CLOSE_BRACKET(self):
            return self.getToken(CSharpParser.CLOSE_BRACKET, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_member_initializer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMember_initializer" ):
                listener.enterMember_initializer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMember_initializer" ):
                listener.exitMember_initializer(self)




    def member_initializer(self):

        localctx = CSharpParser.Member_initializerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_member_initializer)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1327
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [10, 12, 13, 15, 16, 17, 21, 33, 36, 39, 50, 51, 54, 62, 64, 65, 68, 74, 77, 81, 88, 92, 93, 110, 114, 118, 119, 121, 124]:
                self.state = 1322
                self.identifier()
                pass
            elif token in [138]:
                self.state = 1323
                self.match(CSharpParser.OPEN_BRACKET)
                self.state = 1324
                self.expression()
                self.state = 1325
                self.match(CSharpParser.CLOSE_BRACKET)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 1329
            self.match(CSharpParser.ASSIGNMENT)
            self.state = 1330
            self.initializer_value()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Initializer_valueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(CSharpParser.ExpressionContext,0)


        def object_or_collection_initializer(self):
            return self.getTypedRuleContext(CSharpParser.Object_or_collection_initializerContext,0)


        def tuple_type(self):
            return self.getTypedRuleContext(CSharpParser.Tuple_typeContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_initializer_value

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInitializer_value" ):
                listener.enterInitializer_value(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInitializer_value" ):
                listener.exitInitializer_value(self)




    def initializer_value(self):

        localctx = CSharpParser.Initializer_valueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_initializer_value)
        try:
            self.state = 1335
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,114,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1332
                self.expression()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1333
                self.object_or_collection_initializer()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1334
                self.tuple_type()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Collection_initializerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_BRACE(self):
            return self.getToken(CSharpParser.OPEN_BRACE, 0)

        def element_initializer(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Element_initializerContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Element_initializerContext,i)


        def CLOSE_BRACE(self):
            return self.getToken(CSharpParser.CLOSE_BRACE, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.COMMA)
            else:
                return self.getToken(CSharpParser.COMMA, i)

        def getRuleIndex(self):
            return CSharpParser.RULE_collection_initializer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCollection_initializer" ):
                listener.enterCollection_initializer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCollection_initializer" ):
                listener.exitCollection_initializer(self)




    def collection_initializer(self):

        localctx = CSharpParser.Collection_initializerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_collection_initializer)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1337
            self.match(CSharpParser.OPEN_BRACE)
            self.state = 1338
            self.element_initializer()
            self.state = 1343
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,115,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1339
                    self.match(CSharpParser.COMMA)
                    self.state = 1340
                    self.element_initializer() 
                self.state = 1345
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,115,self._ctx)

            self.state = 1347
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==143:
                self.state = 1346
                self.match(CSharpParser.COMMA)


            self.state = 1349
            self.match(CSharpParser.CLOSE_BRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Element_initializerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def non_assignment_expression(self):
            return self.getTypedRuleContext(CSharpParser.Non_assignment_expressionContext,0)


        def OPEN_BRACE(self):
            return self.getToken(CSharpParser.OPEN_BRACE, 0)

        def expression_list(self):
            return self.getTypedRuleContext(CSharpParser.Expression_listContext,0)


        def CLOSE_BRACE(self):
            return self.getToken(CSharpParser.CLOSE_BRACE, 0)

        def expression(self):
            return self.getTypedRuleContext(CSharpParser.ExpressionContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_element_initializer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElement_initializer" ):
                listener.enterElement_initializer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElement_initializer" ):
                listener.exitElement_initializer(self)




    def element_initializer(self):

        localctx = CSharpParser.Element_initializerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_element_initializer)
        try:
            self.state = 1357
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,117,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1351
                self.non_assignment_expression()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1352
                self.match(CSharpParser.OPEN_BRACE)
                self.state = 1353
                self.expression_list()
                self.state = 1354
                self.match(CSharpParser.CLOSE_BRACE)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1356
                self.expression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Anonymous_object_initializerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_BRACE(self):
            return self.getToken(CSharpParser.OPEN_BRACE, 0)

        def CLOSE_BRACE(self):
            return self.getToken(CSharpParser.CLOSE_BRACE, 0)

        def member_declarator_list(self):
            return self.getTypedRuleContext(CSharpParser.Member_declarator_listContext,0)


        def COMMA(self):
            return self.getToken(CSharpParser.COMMA, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_anonymous_object_initializer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnonymous_object_initializer" ):
                listener.enterAnonymous_object_initializer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnonymous_object_initializer" ):
                listener.exitAnonymous_object_initializer(self)




    def anonymous_object_initializer(self):

        localctx = CSharpParser.Anonymous_object_initializerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_anonymous_object_initializer)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1359
            self.match(CSharpParser.OPEN_BRACE)
            self.state = 1364
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 4921388326695449600) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -953220892920240293) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & 5375) != 0):
                self.state = 1360
                self.member_declarator_list()
                self.state = 1362
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==143:
                    self.state = 1361
                    self.match(CSharpParser.COMMA)




            self.state = 1366
            self.match(CSharpParser.CLOSE_BRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Member_declarator_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def member_declarator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Member_declaratorContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Member_declaratorContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.COMMA)
            else:
                return self.getToken(CSharpParser.COMMA, i)

        def getRuleIndex(self):
            return CSharpParser.RULE_member_declarator_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMember_declarator_list" ):
                listener.enterMember_declarator_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMember_declarator_list" ):
                listener.exitMember_declarator_list(self)




    def member_declarator_list(self):

        localctx = CSharpParser.Member_declarator_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_member_declarator_list)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1368
            self.member_declarator()
            self.state = 1373
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,120,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1369
                    self.match(CSharpParser.COMMA)
                    self.state = 1370
                    self.member_declarator() 
                self.state = 1375
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,120,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Member_declaratorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def primary_expression(self):
            return self.getTypedRuleContext(CSharpParser.Primary_expressionContext,0)


        def identifier(self):
            return self.getTypedRuleContext(CSharpParser.IdentifierContext,0)


        def ASSIGNMENT(self):
            return self.getToken(CSharpParser.ASSIGNMENT, 0)

        def expression(self):
            return self.getTypedRuleContext(CSharpParser.ExpressionContext,0)


        def OPEN_BRACKET(self):
            return self.getToken(CSharpParser.OPEN_BRACKET, 0)

        def INTEGER_LITERAL(self):
            return self.getToken(CSharpParser.INTEGER_LITERAL, 0)

        def CLOSE_BRACKET(self):
            return self.getToken(CSharpParser.CLOSE_BRACKET, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_member_declarator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMember_declarator" ):
                listener.enterMember_declarator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMember_declarator" ):
                listener.exitMember_declarator(self)




    def member_declarator(self):

        localctx = CSharpParser.Member_declaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_member_declarator)
        self._la = 0 # Token type
        try:
            self.state = 1387
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,122,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1376
                self.primary_expression()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1377
                self.identifier()
                self.state = 1380
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==156:
                    self.state = 1378
                    self.match(CSharpParser.ASSIGNMENT)
                    self.state = 1379
                    self.expression()


                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1382
                self.identifier()
                self.state = 1383
                self.match(CSharpParser.OPEN_BRACKET)
                self.state = 1384
                self.match(CSharpParser.INTEGER_LITERAL)
                self.state = 1385
                self.match(CSharpParser.CLOSE_BRACKET)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Unbound_type_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(CSharpParser.IdentifierContext,i)


        def DOUBLE_COLON(self):
            return self.getToken(CSharpParser.DOUBLE_COLON, 0)

        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.DOT)
            else:
                return self.getToken(CSharpParser.DOT, i)

        def generic_dimension_specifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Generic_dimension_specifierContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Generic_dimension_specifierContext,i)


        def getRuleIndex(self):
            return CSharpParser.RULE_unbound_type_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnbound_type_name" ):
                listener.enterUnbound_type_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnbound_type_name" ):
                listener.exitUnbound_type_name(self)




    def unbound_type_name(self):

        localctx = CSharpParser.Unbound_type_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_unbound_type_name)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1389
            self.identifier()
            self.state = 1398
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [141, 142, 157]:
                self.state = 1391
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==157:
                    self.state = 1390
                    self.generic_dimension_specifier()


                pass
            elif token in [160]:
                self.state = 1393
                self.match(CSharpParser.DOUBLE_COLON)
                self.state = 1394
                self.identifier()
                self.state = 1396
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==157:
                    self.state = 1395
                    self.generic_dimension_specifier()


                pass
            else:
                raise NoViableAltException(self)

            self.state = 1407
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==142:
                self.state = 1400
                self.match(CSharpParser.DOT)
                self.state = 1401
                self.identifier()
                self.state = 1403
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==157:
                    self.state = 1402
                    self.generic_dimension_specifier()


                self.state = 1409
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Generic_dimension_specifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LT(self):
            return self.getToken(CSharpParser.LT, 0)

        def GT(self):
            return self.getToken(CSharpParser.GT, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.COMMA)
            else:
                return self.getToken(CSharpParser.COMMA, i)

        def getRuleIndex(self):
            return CSharpParser.RULE_generic_dimension_specifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGeneric_dimension_specifier" ):
                listener.enterGeneric_dimension_specifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGeneric_dimension_specifier" ):
                listener.exitGeneric_dimension_specifier(self)




    def generic_dimension_specifier(self):

        localctx = CSharpParser.Generic_dimension_specifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_generic_dimension_specifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1410
            self.match(CSharpParser.LT)
            self.state = 1414
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==143:
                self.state = 1411
                self.match(CSharpParser.COMMA)
                self.state = 1416
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1417
            self.match(CSharpParser.GT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IsTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def base_type(self):
            return self.getTypedRuleContext(CSharpParser.Base_typeContext,0)


        def rank_specifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Rank_specifierContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Rank_specifierContext,i)


        def STAR(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.STAR)
            else:
                return self.getToken(CSharpParser.STAR, i)

        def INTERR(self):
            return self.getToken(CSharpParser.INTERR, 0)

        def isTypePatternArms(self):
            return self.getTypedRuleContext(CSharpParser.IsTypePatternArmsContext,0)


        def identifier(self):
            return self.getTypedRuleContext(CSharpParser.IdentifierContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_isType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIsType" ):
                listener.enterIsType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIsType" ):
                listener.exitIsType(self)




    def isType(self):

        localctx = CSharpParser.IsTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_isType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1419
            self.base_type()
            self.state = 1424
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==138 or _la==148:
                self.state = 1422
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [138]:
                    self.state = 1420
                    self.rank_specifier()
                    pass
                elif token in [148]:
                    self.state = 1421
                    self.match(CSharpParser.STAR)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1426
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1428
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,131,self._ctx)
            if la_ == 1:
                self.state = 1427
                self.match(CSharpParser.INTERR)


            self.state = 1431
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==136:
                self.state = 1430
                self.isTypePatternArms()


            self.state = 1434
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,133,self._ctx)
            if la_ == 1:
                self.state = 1433
                self.identifier()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IsTypePatternArmsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_BRACE(self):
            return self.getToken(CSharpParser.OPEN_BRACE, 0)

        def isTypePatternArm(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.IsTypePatternArmContext)
            else:
                return self.getTypedRuleContext(CSharpParser.IsTypePatternArmContext,i)


        def CLOSE_BRACE(self):
            return self.getToken(CSharpParser.CLOSE_BRACE, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.COMMA)
            else:
                return self.getToken(CSharpParser.COMMA, i)

        def getRuleIndex(self):
            return CSharpParser.RULE_isTypePatternArms

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIsTypePatternArms" ):
                listener.enterIsTypePatternArms(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIsTypePatternArms" ):
                listener.exitIsTypePatternArms(self)




    def isTypePatternArms(self):

        localctx = CSharpParser.IsTypePatternArmsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_isTypePatternArms)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1436
            self.match(CSharpParser.OPEN_BRACE)
            self.state = 1437
            self.isTypePatternArm()
            self.state = 1442
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==143:
                self.state = 1438
                self.match(CSharpParser.COMMA)
                self.state = 1439
                self.isTypePatternArm()
                self.state = 1444
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1445
            self.match(CSharpParser.CLOSE_BRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IsTypePatternArmContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(CSharpParser.IdentifierContext,0)


        def COLON(self):
            return self.getToken(CSharpParser.COLON, 0)

        def expression(self):
            return self.getTypedRuleContext(CSharpParser.ExpressionContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_isTypePatternArm

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIsTypePatternArm" ):
                listener.enterIsTypePatternArm(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIsTypePatternArm" ):
                listener.exitIsTypePatternArm(self)




    def isTypePatternArm(self):

        localctx = CSharpParser.IsTypePatternArmContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_isTypePatternArm)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1447
            self.identifier()
            self.state = 1448
            self.match(CSharpParser.COLON)
            self.state = 1449
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Lambda_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def anonymous_function_signature(self):
            return self.getTypedRuleContext(CSharpParser.Anonymous_function_signatureContext,0)


        def right_arrow(self):
            return self.getTypedRuleContext(CSharpParser.Right_arrowContext,0)


        def anonymous_function_body(self):
            return self.getTypedRuleContext(CSharpParser.Anonymous_function_bodyContext,0)


        def attributes(self):
            return self.getTypedRuleContext(CSharpParser.AttributesContext,0)


        def ASYNC(self):
            return self.getToken(CSharpParser.ASYNC, 0)

        def STATIC(self):
            return self.getToken(CSharpParser.STATIC, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_lambda_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLambda_expression" ):
                listener.enterLambda_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLambda_expression" ):
                listener.exitLambda_expression(self)




    def lambda_expression(self):

        localctx = CSharpParser.Lambda_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_lambda_expression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1452
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==138:
                self.state = 1451
                self.attributes()


            self.state = 1455
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,136,self._ctx)
            if la_ == 1:
                self.state = 1454
                self.match(CSharpParser.ASYNC)


            self.state = 1458
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==97:
                self.state = 1457
                self.match(CSharpParser.STATIC)


            self.state = 1460
            self.anonymous_function_signature()
            self.state = 1461
            self.right_arrow()
            self.state = 1462
            self.anonymous_function_body()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Anonymous_function_signatureContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PARENS(self):
            return self.getToken(CSharpParser.OPEN_PARENS, 0)

        def CLOSE_PARENS(self):
            return self.getToken(CSharpParser.CLOSE_PARENS, 0)

        def explicit_anonymous_function_parameter_list(self):
            return self.getTypedRuleContext(CSharpParser.Explicit_anonymous_function_parameter_listContext,0)


        def implicit_anonymous_function_parameter_list(self):
            return self.getTypedRuleContext(CSharpParser.Implicit_anonymous_function_parameter_listContext,0)


        def identifier(self):
            return self.getTypedRuleContext(CSharpParser.IdentifierContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_anonymous_function_signature

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnonymous_function_signature" ):
                listener.enterAnonymous_function_signature(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnonymous_function_signature" ):
                listener.exitAnonymous_function_signature(self)




    def anonymous_function_signature(self):

        localctx = CSharpParser.Anonymous_function_signatureContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_anonymous_function_signature)
        try:
            self.state = 1475
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,138,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1464
                self.match(CSharpParser.OPEN_PARENS)
                self.state = 1465
                self.match(CSharpParser.CLOSE_PARENS)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1466
                self.match(CSharpParser.OPEN_PARENS)
                self.state = 1467
                self.explicit_anonymous_function_parameter_list()
                self.state = 1468
                self.match(CSharpParser.CLOSE_PARENS)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1470
                self.match(CSharpParser.OPEN_PARENS)
                self.state = 1471
                self.implicit_anonymous_function_parameter_list()
                self.state = 1472
                self.match(CSharpParser.CLOSE_PARENS)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1474
                self.identifier()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Explicit_anonymous_function_parameter_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def explicit_anonymous_function_parameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Explicit_anonymous_function_parameterContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Explicit_anonymous_function_parameterContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.COMMA)
            else:
                return self.getToken(CSharpParser.COMMA, i)

        def getRuleIndex(self):
            return CSharpParser.RULE_explicit_anonymous_function_parameter_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExplicit_anonymous_function_parameter_list" ):
                listener.enterExplicit_anonymous_function_parameter_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExplicit_anonymous_function_parameter_list" ):
                listener.exitExplicit_anonymous_function_parameter_list(self)




    def explicit_anonymous_function_parameter_list(self):

        localctx = CSharpParser.Explicit_anonymous_function_parameter_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_explicit_anonymous_function_parameter_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1477
            self.explicit_anonymous_function_parameter()
            self.state = 1482
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==143:
                self.state = 1478
                self.match(CSharpParser.COMMA)
                self.state = 1479
                self.explicit_anonymous_function_parameter()
                self.state = 1484
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Explicit_anonymous_function_parameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(CSharpParser.IdentifierContext,0)


        def attributes(self):
            return self.getTypedRuleContext(CSharpParser.AttributesContext,0)


        def REF(self):
            return self.getToken(CSharpParser.REF, 0)

        def OUT(self):
            return self.getToken(CSharpParser.OUT, 0)

        def IN(self):
            return self.getToken(CSharpParser.IN, 0)

        def READONLY(self):
            return self.getToken(CSharpParser.READONLY, 0)

        def type_(self):
            return self.getTypedRuleContext(CSharpParser.Type_Context,0)


        def ASSIGNMENT(self):
            return self.getToken(CSharpParser.ASSIGNMENT, 0)

        def expression(self):
            return self.getTypedRuleContext(CSharpParser.ExpressionContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_explicit_anonymous_function_parameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExplicit_anonymous_function_parameter" ):
                listener.enterExplicit_anonymous_function_parameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExplicit_anonymous_function_parameter" ):
                listener.exitExplicit_anonymous_function_parameter(self)




    def explicit_anonymous_function_parameter(self):

        localctx = CSharpParser.Explicit_anonymous_function_parameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_explicit_anonymous_function_parameter)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1486
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==138:
                self.state = 1485
                self.attributes()


            self.state = 1493
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,141,self._ctx)
            if la_ == 1:
                self.state = 1488
                self.match(CSharpParser.REF)

            elif la_ == 2:
                self.state = 1489
                self.match(CSharpParser.OUT)

            elif la_ == 3:
                self.state = 1490
                self.match(CSharpParser.IN)

            elif la_ == 4:
                self.state = 1491
                self.match(CSharpParser.REF)
                self.state = 1492
                self.match(CSharpParser.READONLY)


            self.state = 1496
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,142,self._ctx)
            if la_ == 1:
                self.state = 1495
                self.type_()


            self.state = 1498
            self.identifier()
            self.state = 1501
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==156:
                self.state = 1499
                self.match(CSharpParser.ASSIGNMENT)
                self.state = 1500
                self.expression()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Implicit_anonymous_function_parameter_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(CSharpParser.IdentifierContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.COMMA)
            else:
                return self.getToken(CSharpParser.COMMA, i)

        def getRuleIndex(self):
            return CSharpParser.RULE_implicit_anonymous_function_parameter_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImplicit_anonymous_function_parameter_list" ):
                listener.enterImplicit_anonymous_function_parameter_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImplicit_anonymous_function_parameter_list" ):
                listener.exitImplicit_anonymous_function_parameter_list(self)




    def implicit_anonymous_function_parameter_list(self):

        localctx = CSharpParser.Implicit_anonymous_function_parameter_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_implicit_anonymous_function_parameter_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1503
            self.identifier()
            self.state = 1508
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==143:
                self.state = 1504
                self.match(CSharpParser.COMMA)
                self.state = 1505
                self.identifier()
                self.state = 1510
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Anonymous_function_bodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def throwable_expression(self):
            return self.getTypedRuleContext(CSharpParser.Throwable_expressionContext,0)


        def block(self):
            return self.getTypedRuleContext(CSharpParser.BlockContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_anonymous_function_body

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnonymous_function_body" ):
                listener.enterAnonymous_function_body(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnonymous_function_body" ):
                listener.exitAnonymous_function_body(self)




    def anonymous_function_body(self):

        localctx = CSharpParser.Anonymous_function_bodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_anonymous_function_body)
        try:
            self.state = 1513
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [10, 12, 13, 15, 16, 17, 18, 19, 21, 22, 25, 26, 30, 31, 32, 33, 35, 36, 39, 43, 46, 50, 51, 54, 58, 62, 64, 65, 67, 68, 70, 72, 73, 74, 77, 81, 87, 88, 90, 92, 93, 94, 95, 96, 97, 98, 101, 102, 103, 105, 107, 108, 109, 110, 112, 114, 118, 119, 121, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 138, 140, 146, 147, 148, 151, 153, 154, 155, 162, 163, 182]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1511
                self.throwable_expression()
                pass
            elif token in [136]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1512
                self.block()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Query_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def from_clause(self):
            return self.getTypedRuleContext(CSharpParser.From_clauseContext,0)


        def query_body(self):
            return self.getTypedRuleContext(CSharpParser.Query_bodyContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_query_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuery_expression" ):
                listener.enterQuery_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuery_expression" ):
                listener.exitQuery_expression(self)




    def query_expression(self):

        localctx = CSharpParser.Query_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_query_expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1515
            self.from_clause()
            self.state = 1516
            self.query_body()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class From_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FROM(self):
            return self.getToken(CSharpParser.FROM, 0)

        def identifier(self):
            return self.getTypedRuleContext(CSharpParser.IdentifierContext,0)


        def IN(self):
            return self.getToken(CSharpParser.IN, 0)

        def expression(self):
            return self.getTypedRuleContext(CSharpParser.ExpressionContext,0)


        def type_(self):
            return self.getTypedRuleContext(CSharpParser.Type_Context,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_from_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFrom_clause" ):
                listener.enterFrom_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFrom_clause" ):
                listener.exitFrom_clause(self)




    def from_clause(self):

        localctx = CSharpParser.From_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_from_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1518
            self.match(CSharpParser.FROM)
            self.state = 1520
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,146,self._ctx)
            if la_ == 1:
                self.state = 1519
                self.type_()


            self.state = 1522
            self.identifier()
            self.state = 1523
            self.match(CSharpParser.IN)
            self.state = 1524
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Query_bodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def select_or_group_clause(self):
            return self.getTypedRuleContext(CSharpParser.Select_or_group_clauseContext,0)


        def query_body_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Query_body_clauseContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Query_body_clauseContext,i)


        def query_continuation(self):
            return self.getTypedRuleContext(CSharpParser.Query_continuationContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_query_body

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuery_body" ):
                listener.enterQuery_body(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuery_body" ):
                listener.exitQuery_body(self)




    def query_body(self):

        localctx = CSharpParser.Query_bodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_query_body)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1529
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==50 or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 36028797018972163) != 0):
                self.state = 1526
                self.query_body_clause()
                self.state = 1531
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1532
            self.select_or_group_clause()
            self.state = 1534
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,148,self._ctx)
            if la_ == 1:
                self.state = 1533
                self.query_continuation()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Query_body_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def from_clause(self):
            return self.getTypedRuleContext(CSharpParser.From_clauseContext,0)


        def let_clause(self):
            return self.getTypedRuleContext(CSharpParser.Let_clauseContext,0)


        def where_clause(self):
            return self.getTypedRuleContext(CSharpParser.Where_clauseContext,0)


        def combined_join_clause(self):
            return self.getTypedRuleContext(CSharpParser.Combined_join_clauseContext,0)


        def orderby_clause(self):
            return self.getTypedRuleContext(CSharpParser.Orderby_clauseContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_query_body_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuery_body_clause" ):
                listener.enterQuery_body_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuery_body_clause" ):
                listener.exitQuery_body_clause(self)




    def query_body_clause(self):

        localctx = CSharpParser.Query_body_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_query_body_clause)
        try:
            self.state = 1541
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [50]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1536
                self.from_clause()
                pass
            elif token in [65]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1537
                self.let_clause()
                pass
            elif token in [119]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1538
                self.where_clause()
                pass
            elif token in [64]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1539
                self.combined_join_clause()
                pass
            elif token in [77]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1540
                self.orderby_clause()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Let_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LET(self):
            return self.getToken(CSharpParser.LET, 0)

        def identifier(self):
            return self.getTypedRuleContext(CSharpParser.IdentifierContext,0)


        def ASSIGNMENT(self):
            return self.getToken(CSharpParser.ASSIGNMENT, 0)

        def expression(self):
            return self.getTypedRuleContext(CSharpParser.ExpressionContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_let_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLet_clause" ):
                listener.enterLet_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLet_clause" ):
                listener.exitLet_clause(self)




    def let_clause(self):

        localctx = CSharpParser.Let_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_let_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1543
            self.match(CSharpParser.LET)
            self.state = 1544
            self.identifier()
            self.state = 1545
            self.match(CSharpParser.ASSIGNMENT)
            self.state = 1546
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Where_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHERE(self):
            return self.getToken(CSharpParser.WHERE, 0)

        def expression(self):
            return self.getTypedRuleContext(CSharpParser.ExpressionContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_where_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhere_clause" ):
                listener.enterWhere_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhere_clause" ):
                listener.exitWhere_clause(self)




    def where_clause(self):

        localctx = CSharpParser.Where_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_where_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1548
            self.match(CSharpParser.WHERE)
            self.state = 1549
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Combined_join_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def JOIN(self):
            return self.getToken(CSharpParser.JOIN, 0)

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(CSharpParser.IdentifierContext,i)


        def IN(self):
            return self.getToken(CSharpParser.IN, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(CSharpParser.ExpressionContext,i)


        def ON(self):
            return self.getToken(CSharpParser.ON, 0)

        def EQUALS(self):
            return self.getToken(CSharpParser.EQUALS, 0)

        def type_(self):
            return self.getTypedRuleContext(CSharpParser.Type_Context,0)


        def INTO(self):
            return self.getToken(CSharpParser.INTO, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_combined_join_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCombined_join_clause" ):
                listener.enterCombined_join_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCombined_join_clause" ):
                listener.exitCombined_join_clause(self)




    def combined_join_clause(self):

        localctx = CSharpParser.Combined_join_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_combined_join_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1551
            self.match(CSharpParser.JOIN)
            self.state = 1553
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,150,self._ctx)
            if la_ == 1:
                self.state = 1552
                self.type_()


            self.state = 1555
            self.identifier()
            self.state = 1556
            self.match(CSharpParser.IN)
            self.state = 1557
            self.expression()
            self.state = 1558
            self.match(CSharpParser.ON)
            self.state = 1559
            self.expression()
            self.state = 1560
            self.match(CSharpParser.EQUALS)
            self.state = 1561
            self.expression()
            self.state = 1564
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==62:
                self.state = 1562
                self.match(CSharpParser.INTO)
                self.state = 1563
                self.identifier()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Orderby_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ORDERBY(self):
            return self.getToken(CSharpParser.ORDERBY, 0)

        def ordering(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.OrderingContext)
            else:
                return self.getTypedRuleContext(CSharpParser.OrderingContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.COMMA)
            else:
                return self.getToken(CSharpParser.COMMA, i)

        def getRuleIndex(self):
            return CSharpParser.RULE_orderby_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOrderby_clause" ):
                listener.enterOrderby_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOrderby_clause" ):
                listener.exitOrderby_clause(self)




    def orderby_clause(self):

        localctx = CSharpParser.Orderby_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 182, self.RULE_orderby_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1566
            self.match(CSharpParser.ORDERBY)
            self.state = 1567
            self.ordering()
            self.state = 1572
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==143:
                self.state = 1568
                self.match(CSharpParser.COMMA)
                self.state = 1569
                self.ordering()
                self.state = 1574
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OrderingContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.dir_ = None # Token

        def expression(self):
            return self.getTypedRuleContext(CSharpParser.ExpressionContext,0)


        def ASCENDING(self):
            return self.getToken(CSharpParser.ASCENDING, 0)

        def DESCENDING(self):
            return self.getToken(CSharpParser.DESCENDING, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_ordering

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOrdering" ):
                listener.enterOrdering(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOrdering" ):
                listener.exitOrdering(self)




    def ordering(self):

        localctx = CSharpParser.OrderingContext(self, self._ctx, self.state)
        self.enterRule(localctx, 184, self.RULE_ordering)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1575
            self.expression()
            self.state = 1577
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==15 or _la==33:
                self.state = 1576
                localctx.dir_ = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==15 or _la==33):
                    localctx.dir_ = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Select_or_group_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SELECT(self):
            return self.getToken(CSharpParser.SELECT, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(CSharpParser.ExpressionContext,i)


        def GROUP(self):
            return self.getToken(CSharpParser.GROUP, 0)

        def BY(self):
            return self.getToken(CSharpParser.BY, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_select_or_group_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelect_or_group_clause" ):
                listener.enterSelect_or_group_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelect_or_group_clause" ):
                listener.exitSelect_or_group_clause(self)




    def select_or_group_clause(self):

        localctx = CSharpParser.Select_or_group_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 186, self.RULE_select_or_group_clause)
        try:
            self.state = 1586
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [92]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1579
                self.match(CSharpParser.SELECT)
                self.state = 1580
                self.expression()
                pass
            elif token in [54]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1581
                self.match(CSharpParser.GROUP)
                self.state = 1582
                self.expression()
                self.state = 1583
                self.match(CSharpParser.BY)
                self.state = 1584
                self.expression()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Query_continuationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INTO(self):
            return self.getToken(CSharpParser.INTO, 0)

        def identifier(self):
            return self.getTypedRuleContext(CSharpParser.IdentifierContext,0)


        def query_body(self):
            return self.getTypedRuleContext(CSharpParser.Query_bodyContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_query_continuation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuery_continuation" ):
                listener.enterQuery_continuation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuery_continuation" ):
                listener.exitQuery_continuation(self)




    def query_continuation(self):

        localctx = CSharpParser.Query_continuationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 188, self.RULE_query_continuation)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1588
            self.match(CSharpParser.INTO)
            self.state = 1589
            self.identifier()
            self.state = 1590
            self.query_body()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def labeled_Statement(self):
            return self.getTypedRuleContext(CSharpParser.Labeled_StatementContext,0)


        def declarationStatement(self):
            return self.getTypedRuleContext(CSharpParser.DeclarationStatementContext,0)


        def embedded_statement(self):
            return self.getTypedRuleContext(CSharpParser.Embedded_statementContext,0)


        def method_invocation(self):
            return self.getTypedRuleContext(CSharpParser.Method_invocationContext,0)


        def type_declaration(self):
            return self.getTypedRuleContext(CSharpParser.Type_declarationContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatement" ):
                listener.enterStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatement" ):
                listener.exitStatement(self)




    def statement(self):

        localctx = CSharpParser.StatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 190, self.RULE_statement)
        try:
            self.state = 1597
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,155,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1592
                self.labeled_Statement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1593
                self.declarationStatement()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1594
                self.embedded_statement()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1595
                self.method_invocation()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1596
                self.type_declaration()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeclarationStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def local_variable_declaration(self):
            return self.getTypedRuleContext(CSharpParser.Local_variable_declarationContext,0)


        def SEMICOLON(self):
            return self.getToken(CSharpParser.SEMICOLON, 0)

        def local_constant_declaration(self):
            return self.getTypedRuleContext(CSharpParser.Local_constant_declarationContext,0)


        def local_function_declaration(self):
            return self.getTypedRuleContext(CSharpParser.Local_function_declarationContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_declarationStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclarationStatement" ):
                listener.enterDeclarationStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclarationStatement" ):
                listener.exitDeclarationStatement(self)




    def declarationStatement(self):

        localctx = CSharpParser.DeclarationStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 192, self.RULE_declarationStatement)
        try:
            self.state = 1606
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,156,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1599
                self.local_variable_declaration()
                self.state = 1600
                self.match(CSharpParser.SEMICOLON)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1602
                self.local_constant_declaration()
                self.state = 1603
                self.match(CSharpParser.SEMICOLON)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1605
                self.local_function_declaration()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Local_function_declarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def local_function_header(self):
            return self.getTypedRuleContext(CSharpParser.Local_function_headerContext,0)


        def local_function_body(self):
            return self.getTypedRuleContext(CSharpParser.Local_function_bodyContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_local_function_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLocal_function_declaration" ):
                listener.enterLocal_function_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLocal_function_declaration" ):
                listener.exitLocal_function_declaration(self)




    def local_function_declaration(self):

        localctx = CSharpParser.Local_function_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 194, self.RULE_local_function_declaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1608
            self.local_function_header()
            self.state = 1609
            self.local_function_body()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Local_function_headerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def return_type(self):
            return self.getTypedRuleContext(CSharpParser.Return_typeContext,0)


        def identifier(self):
            return self.getTypedRuleContext(CSharpParser.IdentifierContext,0)


        def OPEN_PARENS(self):
            return self.getToken(CSharpParser.OPEN_PARENS, 0)

        def CLOSE_PARENS(self):
            return self.getToken(CSharpParser.CLOSE_PARENS, 0)

        def local_function_modifiers(self):
            return self.getTypedRuleContext(CSharpParser.Local_function_modifiersContext,0)


        def type_parameter_list(self):
            return self.getTypedRuleContext(CSharpParser.Type_parameter_listContext,0)


        def formal_parameter_list(self):
            return self.getTypedRuleContext(CSharpParser.Formal_parameter_listContext,0)


        def type_parameter_constraints_clauses(self):
            return self.getTypedRuleContext(CSharpParser.Type_parameter_constraints_clausesContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_local_function_header

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLocal_function_header" ):
                listener.enterLocal_function_header(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLocal_function_header" ):
                listener.exitLocal_function_header(self)




    def local_function_header(self):

        localctx = CSharpParser.Local_function_headerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 196, self.RULE_local_function_header)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1612
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,157,self._ctx)
            if la_ == 1:
                self.state = 1611
                self.local_function_modifiers()


            self.state = 1614
            self.return_type()
            self.state = 1615
            self.identifier()
            self.state = 1617
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==157:
                self.state = 1616
                self.type_parameter_list()


            self.state = 1619
            self.match(CSharpParser.OPEN_PARENS)
            self.state = 1621
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 5065494716463428608) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 1357087776337782299) != 0) or _la==138 or _la==140:
                self.state = 1620
                self.formal_parameter_list()


            self.state = 1623
            self.match(CSharpParser.CLOSE_PARENS)
            self.state = 1625
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==119:
                self.state = 1624
                self.type_parameter_constraints_clauses()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Local_function_modifiersContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ASYNC(self):
            return self.getToken(CSharpParser.ASYNC, 0)

        def UNSAFE(self):
            return self.getToken(CSharpParser.UNSAFE, 0)

        def STATIC(self):
            return self.getToken(CSharpParser.STATIC, 0)

        def STRUCT(self):
            return self.getToken(CSharpParser.STRUCT, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_local_function_modifiers

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLocal_function_modifiers" ):
                listener.enterLocal_function_modifiers(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLocal_function_modifiers" ):
                listener.exitLocal_function_modifiers(self)




    def local_function_modifiers(self):

        localctx = CSharpParser.Local_function_modifiersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 198, self.RULE_local_function_modifiers)
        self._la = 0 # Token type
        try:
            self.state = 1637
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,163,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1627
                _la = self._input.LA(1)
                if not(_la==16 or _la==111):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1629
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==97:
                    self.state = 1628
                    self.match(CSharpParser.STATIC)


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1631
                self.match(CSharpParser.STATIC)
                self.state = 1633
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,162,self._ctx)
                if la_ == 1:
                    self.state = 1632
                    _la = self._input.LA(1)
                    if not(_la==16 or _la==111):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1635
                self.match(CSharpParser.UNSAFE)
                self.state = 1636
                self.match(CSharpParser.STRUCT)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Local_function_bodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def block(self):
            return self.getTypedRuleContext(CSharpParser.BlockContext,0)


        def right_arrow(self):
            return self.getTypedRuleContext(CSharpParser.Right_arrowContext,0)


        def throwable_expression(self):
            return self.getTypedRuleContext(CSharpParser.Throwable_expressionContext,0)


        def SEMICOLON(self):
            return self.getToken(CSharpParser.SEMICOLON, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_local_function_body

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLocal_function_body" ):
                listener.enterLocal_function_body(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLocal_function_body" ):
                listener.exitLocal_function_body(self)




    def local_function_body(self):

        localctx = CSharpParser.Local_function_bodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 200, self.RULE_local_function_body)
        try:
            self.state = 1644
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [136]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1639
                self.block()
                pass
            elif token in [156]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1640
                self.right_arrow()
                self.state = 1641
                self.throwable_expression()
                self.state = 1642
                self.match(CSharpParser.SEMICOLON)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Labeled_StatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(CSharpParser.IdentifierContext,0)


        def COLON(self):
            return self.getToken(CSharpParser.COLON, 0)

        def statement(self):
            return self.getTypedRuleContext(CSharpParser.StatementContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_labeled_Statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLabeled_Statement" ):
                listener.enterLabeled_Statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLabeled_Statement" ):
                listener.exitLabeled_Statement(self)




    def labeled_Statement(self):

        localctx = CSharpParser.Labeled_StatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 202, self.RULE_labeled_Statement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1646
            self.identifier()
            self.state = 1647
            self.match(CSharpParser.COLON)
            self.state = 1648
            self.statement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Embedded_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def block(self):
            return self.getTypedRuleContext(CSharpParser.BlockContext,0)


        def empty_statement(self):
            return self.getTypedRuleContext(CSharpParser.Empty_statementContext,0)


        def expression(self):
            return self.getTypedRuleContext(CSharpParser.ExpressionContext,0)


        def SEMICOLON(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.SEMICOLON)
            else:
                return self.getToken(CSharpParser.SEMICOLON, i)

        def if_statement(self):
            return self.getTypedRuleContext(CSharpParser.If_statementContext,0)


        def SWITCH(self):
            return self.getToken(CSharpParser.SWITCH, 0)

        def OPEN_PARENS(self):
            return self.getToken(CSharpParser.OPEN_PARENS, 0)

        def CLOSE_PARENS(self):
            return self.getToken(CSharpParser.CLOSE_PARENS, 0)

        def OPEN_BRACE(self):
            return self.getToken(CSharpParser.OPEN_BRACE, 0)

        def CLOSE_BRACE(self):
            return self.getToken(CSharpParser.CLOSE_BRACE, 0)

        def switch_section(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Switch_sectionContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Switch_sectionContext,i)


        def WHILE(self):
            return self.getToken(CSharpParser.WHILE, 0)

        def embedded_statement(self):
            return self.getTypedRuleContext(CSharpParser.Embedded_statementContext,0)


        def DO(self):
            return self.getToken(CSharpParser.DO, 0)

        def FOR(self):
            return self.getToken(CSharpParser.FOR, 0)

        def for_initializer(self):
            return self.getTypedRuleContext(CSharpParser.For_initializerContext,0)


        def for_iterator(self):
            return self.getTypedRuleContext(CSharpParser.For_iteratorContext,0)


        def FOREACH(self):
            return self.getToken(CSharpParser.FOREACH, 0)

        def local_variable_type(self):
            return self.getTypedRuleContext(CSharpParser.Local_variable_typeContext,0)


        def IN(self):
            return self.getToken(CSharpParser.IN, 0)

        def identifier(self):
            return self.getTypedRuleContext(CSharpParser.IdentifierContext,0)


        def deconstruction_element(self):
            return self.getTypedRuleContext(CSharpParser.Deconstruction_elementContext,0)


        def AWAIT(self):
            return self.getToken(CSharpParser.AWAIT, 0)

        def BREAK(self):
            return self.getToken(CSharpParser.BREAK, 0)

        def CONTINUE(self):
            return self.getToken(CSharpParser.CONTINUE, 0)

        def GOTO(self):
            return self.getToken(CSharpParser.GOTO, 0)

        def CASE(self):
            return self.getToken(CSharpParser.CASE, 0)

        def DEFAULT(self):
            return self.getToken(CSharpParser.DEFAULT, 0)

        def RETURN(self):
            return self.getToken(CSharpParser.RETURN, 0)

        def THROW(self):
            return self.getToken(CSharpParser.THROW, 0)

        def try_statement(self):
            return self.getTypedRuleContext(CSharpParser.Try_statementContext,0)


        def checked_statement(self):
            return self.getTypedRuleContext(CSharpParser.Checked_statementContext,0)


        def unchecked_statement(self):
            return self.getTypedRuleContext(CSharpParser.Unchecked_statementContext,0)


        def lock_statement(self):
            return self.getTypedRuleContext(CSharpParser.Lock_statementContext,0)


        def using_statement(self):
            return self.getTypedRuleContext(CSharpParser.Using_statementContext,0)


        def yield_statement(self):
            return self.getTypedRuleContext(CSharpParser.Yield_statementContext,0)


        def unsafe_statement(self):
            return self.getTypedRuleContext(CSharpParser.Unsafe_statementContext,0)


        def fixed_statement(self):
            return self.getTypedRuleContext(CSharpParser.Fixed_statementContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_embedded_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEmbedded_statement" ):
                listener.enterEmbedded_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEmbedded_statement" ):
                listener.exitEmbedded_statement(self)




    def embedded_statement(self):

        localctx = CSharpParser.Embedded_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 204, self.RULE_embedded_statement)
        self._la = 0 # Token type
        try:
            self.state = 1743
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,174,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1650
                self.block()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1651
                self.empty_statement()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1652
                self.expression()
                self.state = 1653
                self.match(CSharpParser.SEMICOLON)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1655
                self.if_statement()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1656
                self.match(CSharpParser.SWITCH)
                self.state = 1657
                self.match(CSharpParser.OPEN_PARENS)
                self.state = 1658
                self.expression()
                self.state = 1659
                self.match(CSharpParser.CLOSE_PARENS)
                self.state = 1660
                self.match(CSharpParser.OPEN_BRACE)
                self.state = 1664
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==23 or _la==31:
                    self.state = 1661
                    self.switch_section()
                    self.state = 1666
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1667
                self.match(CSharpParser.CLOSE_BRACE)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1669
                self.match(CSharpParser.WHILE)
                self.state = 1670
                self.match(CSharpParser.OPEN_PARENS)
                self.state = 1671
                self.expression()
                self.state = 1672
                self.match(CSharpParser.CLOSE_PARENS)
                self.state = 1673
                self.embedded_statement()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1675
                self.match(CSharpParser.DO)
                self.state = 1676
                self.embedded_statement()
                self.state = 1677
                self.match(CSharpParser.WHILE)
                self.state = 1678
                self.match(CSharpParser.OPEN_PARENS)
                self.state = 1679
                self.expression()
                self.state = 1680
                self.match(CSharpParser.CLOSE_PARENS)
                self.state = 1681
                self.match(CSharpParser.SEMICOLON)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 1683
                self.match(CSharpParser.FOR)
                self.state = 1684
                self.match(CSharpParser.OPEN_PARENS)
                self.state = 1686
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 4921423511067538432) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -948013322372765861) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & 18014450294199551) != 0):
                    self.state = 1685
                    self.for_initializer()


                self.state = 1688
                self.match(CSharpParser.SEMICOLON)
                self.state = 1690
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 4921388326695449600) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -953220609444010149) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & 18014450294199551) != 0):
                    self.state = 1689
                    self.expression()


                self.state = 1692
                self.match(CSharpParser.SEMICOLON)
                self.state = 1694
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 4921388326695449600) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -953220609444010149) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & 18014450294199551) != 0):
                    self.state = 1693
                    self.for_iterator()


                self.state = 1696
                self.match(CSharpParser.CLOSE_PARENS)
                self.state = 1697
                self.embedded_statement()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 1699
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==17:
                    self.state = 1698
                    self.match(CSharpParser.AWAIT)


                self.state = 1701
                self.match(CSharpParser.FOREACH)
                self.state = 1702
                self.match(CSharpParser.OPEN_PARENS)
                self.state = 1703
                self.local_variable_type()
                self.state = 1706
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,170,self._ctx)
                if la_ == 1:
                    self.state = 1704
                    self.identifier()
                    pass

                elif la_ == 2:
                    self.state = 1705
                    self.deconstruction_element()
                    pass


                self.state = 1708
                self.match(CSharpParser.IN)
                self.state = 1709
                self.expression()
                self.state = 1710
                self.match(CSharpParser.CLOSE_PARENS)
                self.state = 1711
                self.embedded_statement()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 1713
                self.match(CSharpParser.BREAK)
                self.state = 1714
                self.match(CSharpParser.SEMICOLON)
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 1715
                self.match(CSharpParser.CONTINUE)
                self.state = 1716
                self.match(CSharpParser.SEMICOLON)
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 1717
                self.match(CSharpParser.GOTO)
                self.state = 1722
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [10, 12, 13, 15, 16, 17, 21, 33, 36, 39, 50, 51, 54, 62, 64, 65, 68, 74, 77, 81, 88, 92, 93, 110, 114, 118, 119, 121, 124]:
                    self.state = 1718
                    self.identifier()
                    pass
                elif token in [23]:
                    self.state = 1719
                    self.match(CSharpParser.CASE)
                    self.state = 1720
                    self.expression()
                    pass
                elif token in [31]:
                    self.state = 1721
                    self.match(CSharpParser.DEFAULT)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1724
                self.match(CSharpParser.SEMICOLON)
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 1725
                self.match(CSharpParser.RETURN)
                self.state = 1727
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 4921388326695449600) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -953220609444010149) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & 18014450294199551) != 0):
                    self.state = 1726
                    self.expression()


                self.state = 1729
                self.match(CSharpParser.SEMICOLON)
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 1730
                self.match(CSharpParser.THROW)
                self.state = 1732
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 4921388326695449600) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -953220609444010149) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & 18014450294199551) != 0):
                    self.state = 1731
                    self.expression()


                self.state = 1734
                self.match(CSharpParser.SEMICOLON)
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 1735
                self.try_statement()
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 1736
                self.checked_statement()
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 1737
                self.unchecked_statement()
                pass

            elif la_ == 18:
                self.enterOuterAlt(localctx, 18)
                self.state = 1738
                self.lock_statement()
                pass

            elif la_ == 19:
                self.enterOuterAlt(localctx, 19)
                self.state = 1739
                self.using_statement()
                pass

            elif la_ == 20:
                self.enterOuterAlt(localctx, 20)
                self.state = 1740
                self.yield_statement()
                pass

            elif la_ == 21:
                self.enterOuterAlt(localctx, 21)
                self.state = 1741
                self.unsafe_statement()
                pass

            elif la_ == 22:
                self.enterOuterAlt(localctx, 22)
                self.state = 1742
                self.fixed_statement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Empty_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SEMICOLON(self):
            return self.getToken(CSharpParser.SEMICOLON, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_empty_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEmpty_statement" ):
                listener.enterEmpty_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEmpty_statement" ):
                listener.exitEmpty_statement(self)




    def empty_statement(self):

        localctx = CSharpParser.Empty_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 206, self.RULE_empty_statement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1745
            self.match(CSharpParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class If_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IF(self):
            return self.getToken(CSharpParser.IF, 0)

        def OPEN_PARENS(self):
            return self.getToken(CSharpParser.OPEN_PARENS, 0)

        def expression(self):
            return self.getTypedRuleContext(CSharpParser.ExpressionContext,0)


        def CLOSE_PARENS(self):
            return self.getToken(CSharpParser.CLOSE_PARENS, 0)

        def embedded_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Embedded_statementContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Embedded_statementContext,i)


        def BANG(self):
            return self.getToken(CSharpParser.BANG, 0)

        def ELSE(self):
            return self.getToken(CSharpParser.ELSE, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_if_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIf_statement" ):
                listener.enterIf_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIf_statement" ):
                listener.exitIf_statement(self)




    def if_statement(self):

        localctx = CSharpParser.If_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 208, self.RULE_if_statement)
        try:
            self.state = 1767
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,177,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1747
                self.match(CSharpParser.IF)
                self.state = 1748
                self.match(CSharpParser.OPEN_PARENS)
                self.state = 1750
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,175,self._ctx)
                if la_ == 1:
                    self.state = 1749
                    self.match(CSharpParser.BANG)


                self.state = 1752
                self.expression()
                self.state = 1753
                self.match(CSharpParser.CLOSE_PARENS)
                self.state = 1754
                self.embedded_statement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1756
                self.match(CSharpParser.IF)
                self.state = 1757
                self.match(CSharpParser.OPEN_PARENS)
                self.state = 1759
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,176,self._ctx)
                if la_ == 1:
                    self.state = 1758
                    self.match(CSharpParser.BANG)


                self.state = 1761
                self.expression()
                self.state = 1762
                self.match(CSharpParser.CLOSE_PARENS)
                self.state = 1763
                self.embedded_statement()
                self.state = 1764
                self.match(CSharpParser.ELSE)
                self.state = 1765
                self.embedded_statement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Checked_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CHECKED(self):
            return self.getToken(CSharpParser.CHECKED, 0)

        def block(self):
            return self.getTypedRuleContext(CSharpParser.BlockContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_checked_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterChecked_statement" ):
                listener.enterChecked_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitChecked_statement" ):
                listener.exitChecked_statement(self)




    def checked_statement(self):

        localctx = CSharpParser.Checked_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 210, self.RULE_checked_statement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1769
            self.match(CSharpParser.CHECKED)
            self.state = 1770
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Unchecked_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UNCHECKED(self):
            return self.getToken(CSharpParser.UNCHECKED, 0)

        def block(self):
            return self.getTypedRuleContext(CSharpParser.BlockContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_unchecked_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnchecked_statement" ):
                listener.enterUnchecked_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnchecked_statement" ):
                listener.exitUnchecked_statement(self)




    def unchecked_statement(self):

        localctx = CSharpParser.Unchecked_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 212, self.RULE_unchecked_statement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1772
            self.match(CSharpParser.UNCHECKED)
            self.state = 1773
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Lock_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LOCK(self):
            return self.getToken(CSharpParser.LOCK, 0)

        def OPEN_PARENS(self):
            return self.getToken(CSharpParser.OPEN_PARENS, 0)

        def expression(self):
            return self.getTypedRuleContext(CSharpParser.ExpressionContext,0)


        def CLOSE_PARENS(self):
            return self.getToken(CSharpParser.CLOSE_PARENS, 0)

        def embedded_statement(self):
            return self.getTypedRuleContext(CSharpParser.Embedded_statementContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_lock_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLock_statement" ):
                listener.enterLock_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLock_statement" ):
                listener.exitLock_statement(self)




    def lock_statement(self):

        localctx = CSharpParser.Lock_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 214, self.RULE_lock_statement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1775
            self.match(CSharpParser.LOCK)
            self.state = 1776
            self.match(CSharpParser.OPEN_PARENS)
            self.state = 1777
            self.expression()
            self.state = 1778
            self.match(CSharpParser.CLOSE_PARENS)
            self.state = 1779
            self.embedded_statement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Unmanaged_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def type_(self):
            return self.getTypedRuleContext(CSharpParser.Type_Context,0)


        def pointer_type(self):
            return self.getTypedRuleContext(CSharpParser.Pointer_typeContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_unmanaged_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnmanaged_type" ):
                listener.enterUnmanaged_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnmanaged_type" ):
                listener.exitUnmanaged_type(self)




    def unmanaged_type(self):

        localctx = CSharpParser.Unmanaged_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 216, self.RULE_unmanaged_type)
        try:
            self.state = 1783
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,178,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1781
                self.type_()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1782
                self.pointer_type()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Stackalloc_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STACKALLOC(self):
            return self.getToken(CSharpParser.STACKALLOC, 0)

        def type_(self):
            return self.getTypedRuleContext(CSharpParser.Type_Context,0)


        def OPEN_BRACKET(self):
            return self.getToken(CSharpParser.OPEN_BRACKET, 0)

        def expression(self):
            return self.getTypedRuleContext(CSharpParser.ExpressionContext,0)


        def CLOSE_BRACKET(self):
            return self.getToken(CSharpParser.CLOSE_BRACKET, 0)

        def stackalloc_initializer(self):
            return self.getTypedRuleContext(CSharpParser.Stackalloc_initializerContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_stackalloc_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStackalloc_expression" ):
                listener.enterStackalloc_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStackalloc_expression" ):
                listener.exitStackalloc_expression(self)




    def stackalloc_expression(self):

        localctx = CSharpParser.Stackalloc_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 218, self.RULE_stackalloc_expression)
        self._la = 0 # Token type
        try:
            self.state = 1801
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,181,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1785
                self.match(CSharpParser.STACKALLOC)
                self.state = 1786
                self.type_()
                self.state = 1787
                self.match(CSharpParser.OPEN_BRACKET)
                self.state = 1788
                self.expression()
                self.state = 1789
                self.match(CSharpParser.CLOSE_BRACKET)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1791
                self.match(CSharpParser.STACKALLOC)
                self.state = 1793
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 4921379528387572736) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 1357087638898746907) != 0) or _la==140:
                    self.state = 1792
                    self.type_()


                self.state = 1795
                self.match(CSharpParser.OPEN_BRACKET)
                self.state = 1797
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 4921388326695449600) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -953220609444010149) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & 18014450294199551) != 0):
                    self.state = 1796
                    self.expression()


                self.state = 1799
                self.match(CSharpParser.CLOSE_BRACKET)
                self.state = 1800
                self.stackalloc_initializer()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Stackalloc_initializerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_BRACE(self):
            return self.getToken(CSharpParser.OPEN_BRACE, 0)

        def stackalloc_initializer_element_list(self):
            return self.getTypedRuleContext(CSharpParser.Stackalloc_initializer_element_listContext,0)


        def CLOSE_BRACE(self):
            return self.getToken(CSharpParser.CLOSE_BRACE, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_stackalloc_initializer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStackalloc_initializer" ):
                listener.enterStackalloc_initializer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStackalloc_initializer" ):
                listener.exitStackalloc_initializer(self)




    def stackalloc_initializer(self):

        localctx = CSharpParser.Stackalloc_initializerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 220, self.RULE_stackalloc_initializer)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1803
            self.match(CSharpParser.OPEN_BRACE)
            self.state = 1804
            self.stackalloc_initializer_element_list()
            self.state = 1805
            self.match(CSharpParser.CLOSE_BRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Stackalloc_initializer_element_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def stackalloc_element_initializer(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Stackalloc_element_initializerContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Stackalloc_element_initializerContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.COMMA)
            else:
                return self.getToken(CSharpParser.COMMA, i)

        def getRuleIndex(self):
            return CSharpParser.RULE_stackalloc_initializer_element_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStackalloc_initializer_element_list" ):
                listener.enterStackalloc_initializer_element_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStackalloc_initializer_element_list" ):
                listener.exitStackalloc_initializer_element_list(self)




    def stackalloc_initializer_element_list(self):

        localctx = CSharpParser.Stackalloc_initializer_element_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 222, self.RULE_stackalloc_initializer_element_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1807
            self.stackalloc_element_initializer()
            self.state = 1812
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,182,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1808
                    self.match(CSharpParser.COMMA)
                    self.state = 1809
                    self.stackalloc_element_initializer() 
                self.state = 1814
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,182,self._ctx)

            self.state = 1816
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==143:
                self.state = 1815
                self.match(CSharpParser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Stackalloc_element_initializerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(CSharpParser.ExpressionContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_stackalloc_element_initializer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStackalloc_element_initializer" ):
                listener.enterStackalloc_element_initializer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStackalloc_element_initializer" ):
                listener.exitStackalloc_element_initializer(self)




    def stackalloc_element_initializer(self):

        localctx = CSharpParser.Stackalloc_element_initializerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 224, self.RULE_stackalloc_element_initializer)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1818
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Using_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def USING(self):
            return self.getToken(CSharpParser.USING, 0)

        def OPEN_PARENS(self):
            return self.getToken(CSharpParser.OPEN_PARENS, 0)

        def resource_acquisition(self):
            return self.getTypedRuleContext(CSharpParser.Resource_acquisitionContext,0)


        def CLOSE_PARENS(self):
            return self.getToken(CSharpParser.CLOSE_PARENS, 0)

        def embedded_statement(self):
            return self.getTypedRuleContext(CSharpParser.Embedded_statementContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_using_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUsing_statement" ):
                listener.enterUsing_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUsing_statement" ):
                listener.exitUsing_statement(self)




    def using_statement(self):

        localctx = CSharpParser.Using_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 226, self.RULE_using_statement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1820
            self.match(CSharpParser.USING)
            self.state = 1821
            self.match(CSharpParser.OPEN_PARENS)
            self.state = 1822
            self.resource_acquisition()
            self.state = 1823
            self.match(CSharpParser.CLOSE_PARENS)
            self.state = 1824
            self.embedded_statement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Yield_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def YIELD(self):
            return self.getToken(CSharpParser.YIELD, 0)

        def RETURN(self):
            return self.getToken(CSharpParser.RETURN, 0)

        def expression(self):
            return self.getTypedRuleContext(CSharpParser.ExpressionContext,0)


        def SEMICOLON(self):
            return self.getToken(CSharpParser.SEMICOLON, 0)

        def BREAK(self):
            return self.getToken(CSharpParser.BREAK, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_yield_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterYield_statement" ):
                listener.enterYield_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitYield_statement" ):
                listener.exitYield_statement(self)




    def yield_statement(self):

        localctx = CSharpParser.Yield_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 228, self.RULE_yield_statement)
        try:
            self.state = 1834
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,184,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1826
                self.match(CSharpParser.YIELD)
                self.state = 1827
                self.match(CSharpParser.RETURN)
                self.state = 1828
                self.expression()
                self.state = 1829
                self.match(CSharpParser.SEMICOLON)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1831
                self.match(CSharpParser.YIELD)
                self.state = 1832
                self.match(CSharpParser.BREAK)
                self.state = 1833
                self.match(CSharpParser.SEMICOLON)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Fixed_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FIXED(self):
            return self.getToken(CSharpParser.FIXED, 0)

        def OPEN_PARENS(self):
            return self.getToken(CSharpParser.OPEN_PARENS, 0)

        def pointer_type(self):
            return self.getTypedRuleContext(CSharpParser.Pointer_typeContext,0)


        def fixed_pointer_declarators(self):
            return self.getTypedRuleContext(CSharpParser.Fixed_pointer_declaratorsContext,0)


        def CLOSE_PARENS(self):
            return self.getToken(CSharpParser.CLOSE_PARENS, 0)

        def embedded_statement(self):
            return self.getTypedRuleContext(CSharpParser.Embedded_statementContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_fixed_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFixed_statement" ):
                listener.enterFixed_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFixed_statement" ):
                listener.exitFixed_statement(self)




    def fixed_statement(self):

        localctx = CSharpParser.Fixed_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 230, self.RULE_fixed_statement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1836
            self.match(CSharpParser.FIXED)
            self.state = 1837
            self.match(CSharpParser.OPEN_PARENS)
            self.state = 1838
            self.pointer_type()
            self.state = 1839
            self.fixed_pointer_declarators()
            self.state = 1840
            self.match(CSharpParser.CLOSE_PARENS)
            self.state = 1841
            self.embedded_statement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Unsafe_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UNSAFE(self):
            return self.getToken(CSharpParser.UNSAFE, 0)

        def block(self):
            return self.getTypedRuleContext(CSharpParser.BlockContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_unsafe_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnsafe_statement" ):
                listener.enterUnsafe_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnsafe_statement" ):
                listener.exitUnsafe_statement(self)




    def unsafe_statement(self):

        localctx = CSharpParser.Unsafe_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 232, self.RULE_unsafe_statement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1843
            self.match(CSharpParser.UNSAFE)
            self.state = 1844
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Try_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TRY(self):
            return self.getToken(CSharpParser.TRY, 0)

        def block(self):
            return self.getTypedRuleContext(CSharpParser.BlockContext,0)


        def catch_clauses(self):
            return self.getTypedRuleContext(CSharpParser.Catch_clausesContext,0)


        def finally_clause(self):
            return self.getTypedRuleContext(CSharpParser.Finally_clauseContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_try_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTry_statement" ):
                listener.enterTry_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTry_statement" ):
                listener.exitTry_statement(self)




    def try_statement(self):

        localctx = CSharpParser.Try_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 234, self.RULE_try_statement)
        self._la = 0 # Token type
        try:
            self.state = 1857
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,186,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1846
                self.match(CSharpParser.TRY)
                self.state = 1847
                self.block()
                self.state = 1848
                self.catch_clauses()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1850
                self.match(CSharpParser.TRY)
                self.state = 1851
                self.block()
                self.state = 1853
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==24:
                    self.state = 1852
                    self.catch_clauses()


                self.state = 1855
                self.finally_clause()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BlockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_BRACE(self):
            return self.getToken(CSharpParser.OPEN_BRACE, 0)

        def CLOSE_BRACE(self):
            return self.getToken(CSharpParser.CLOSE_BRACE, 0)

        def statement_list(self):
            return self.getTypedRuleContext(CSharpParser.Statement_listContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_block

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBlock" ):
                listener.enterBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBlock" ):
                listener.exitBlock(self)




    def block(self):

        localctx = CSharpParser.BlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 236, self.RULE_block)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1859
            self.match(CSharpParser.OPEN_BRACE)
            self.state = 1861
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 6692328018087491072) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -576465150354217121) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & 18014450294330879) != 0):
                self.state = 1860
                self.statement_list()


            self.state = 1863
            self.match(CSharpParser.CLOSE_BRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Local_variable_declarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def local_variable_type(self):
            return self.getTypedRuleContext(CSharpParser.Local_variable_typeContext,0)


        def local_variable_declarator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Local_variable_declaratorContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Local_variable_declaratorContext,i)


        def USING(self):
            return self.getToken(CSharpParser.USING, 0)

        def REF(self):
            return self.getToken(CSharpParser.REF, 0)

        def READONLY(self):
            return self.getToken(CSharpParser.READONLY, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.COMMA)
            else:
                return self.getToken(CSharpParser.COMMA, i)

        def FIXED(self):
            return self.getToken(CSharpParser.FIXED, 0)

        def pointer_type(self):
            return self.getTypedRuleContext(CSharpParser.Pointer_typeContext,0)


        def fixed_pointer_declarators(self):
            return self.getTypedRuleContext(CSharpParser.Fixed_pointer_declaratorsContext,0)


        def VAR(self):
            return self.getToken(CSharpParser.VAR, 0)

        def deconstruction_expression(self):
            return self.getTypedRuleContext(CSharpParser.Deconstruction_expressionContext,0)


        def ASSIGNMENT(self):
            return self.getToken(CSharpParser.ASSIGNMENT, 0)

        def expression(self):
            return self.getTypedRuleContext(CSharpParser.ExpressionContext,0)


        def unsafe_function_pointer(self):
            return self.getTypedRuleContext(CSharpParser.Unsafe_function_pointerContext,0)


        def type_(self):
            return self.getTypedRuleContext(CSharpParser.Type_Context,0)


        def identifier(self):
            return self.getTypedRuleContext(CSharpParser.IdentifierContext,0)


        def lambda_expression(self):
            return self.getTypedRuleContext(CSharpParser.Lambda_expressionContext,0)


        def attributes(self):
            return self.getTypedRuleContext(CSharpParser.AttributesContext,0)


        def method_invocation(self):
            return self.getTypedRuleContext(CSharpParser.Method_invocationContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_local_variable_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLocal_variable_declaration" ):
                listener.enterLocal_variable_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLocal_variable_declaration" ):
                listener.exitLocal_variable_declaration(self)




    def local_variable_declaration(self):

        localctx = CSharpParser.Local_variable_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 238, self.RULE_local_variable_declaration)
        self._la = 0 # Token type
        try:
            self.state = 1908
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,193,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1869
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,188,self._ctx)
                if la_ == 1:
                    self.state = 1865
                    self.match(CSharpParser.USING)

                elif la_ == 2:
                    self.state = 1866
                    self.match(CSharpParser.REF)

                elif la_ == 3:
                    self.state = 1867
                    self.match(CSharpParser.REF)
                    self.state = 1868
                    self.match(CSharpParser.READONLY)


                self.state = 1871
                self.local_variable_type()
                self.state = 1872
                self.local_variable_declarator()
                self.state = 1877
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==143:
                    self.state = 1873
                    self.match(CSharpParser.COMMA)
                    self.state = 1874
                    self.local_variable_declarator()
                    self.state = 1879
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1880
                self.match(CSharpParser.FIXED)
                self.state = 1881
                self.pointer_type()
                self.state = 1882
                self.fixed_pointer_declarators()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1884
                self.match(CSharpParser.VAR)
                self.state = 1885
                self.deconstruction_expression()
                self.state = 1886
                self.match(CSharpParser.ASSIGNMENT)
                self.state = 1887
                self.expression()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1889
                self.unsafe_function_pointer()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1891
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==138:
                    self.state = 1890
                    self.attributes()


                self.state = 1893
                self.type_()
                self.state = 1894
                self.identifier()
                self.state = 1895
                self.match(CSharpParser.ASSIGNMENT)
                self.state = 1896
                self.lambda_expression()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1899
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==138:
                    self.state = 1898
                    self.attributes()


                self.state = 1901
                self.type_()
                self.state = 1902
                self.identifier()
                self.state = 1903
                self.match(CSharpParser.ASSIGNMENT)
                self.state = 1906
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,192,self._ctx)
                if la_ == 1:
                    self.state = 1904
                    self.expression()
                    pass

                elif la_ == 2:
                    self.state = 1905
                    self.method_invocation()
                    pass


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Unsafe_function_pointerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UNSAFE(self):
            return self.getToken(CSharpParser.UNSAFE, 0)

        def OPEN_BRACE(self):
            return self.getToken(CSharpParser.OPEN_BRACE, 0)

        def delegate_function_pointer(self):
            return self.getTypedRuleContext(CSharpParser.Delegate_function_pointerContext,0)


        def CLOSE_BRACE(self):
            return self.getToken(CSharpParser.CLOSE_BRACE, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_unsafe_function_pointer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnsafe_function_pointer" ):
                listener.enterUnsafe_function_pointer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnsafe_function_pointer" ):
                listener.exitUnsafe_function_pointer(self)




    def unsafe_function_pointer(self):

        localctx = CSharpParser.Unsafe_function_pointerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 240, self.RULE_unsafe_function_pointer)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1910
            self.match(CSharpParser.UNSAFE)
            self.state = 1911
            self.match(CSharpParser.OPEN_BRACE)
            self.state = 1912
            self.delegate_function_pointer()
            self.state = 1913
            self.match(CSharpParser.CLOSE_BRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Delegate_function_pointerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DELEGATE(self):
            return self.getToken(CSharpParser.DELEGATE, 0)

        def STAR(self):
            return self.getToken(CSharpParser.STAR, 0)

        def LT(self):
            return self.getToken(CSharpParser.LT, 0)

        def function_pointer_parameter_list(self):
            return self.getTypedRuleContext(CSharpParser.Function_pointer_parameter_listContext,0)


        def GT(self):
            return self.getToken(CSharpParser.GT, 0)

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(CSharpParser.IdentifierContext,i)


        def ASSIGNMENT(self):
            return self.getToken(CSharpParser.ASSIGNMENT, 0)

        def AMP(self):
            return self.getToken(CSharpParser.AMP, 0)

        def SEMICOLON(self):
            return self.getToken(CSharpParser.SEMICOLON, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_delegate_function_pointer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDelegate_function_pointer" ):
                listener.enterDelegate_function_pointer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDelegate_function_pointer" ):
                listener.exitDelegate_function_pointer(self)




    def delegate_function_pointer(self):

        localctx = CSharpParser.Delegate_function_pointerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 242, self.RULE_delegate_function_pointer)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1915
            self.match(CSharpParser.DELEGATE)
            self.state = 1916
            self.match(CSharpParser.STAR)
            self.state = 1917
            self.match(CSharpParser.LT)
            self.state = 1918
            self.function_pointer_parameter_list()
            self.state = 1919
            self.match(CSharpParser.GT)
            self.state = 1920
            self.identifier()
            self.state = 1921
            self.match(CSharpParser.ASSIGNMENT)
            self.state = 1922
            self.match(CSharpParser.AMP)
            self.state = 1923
            self.identifier()
            self.state = 1924
            self.match(CSharpParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Local_variable_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VAR(self):
            return self.getToken(CSharpParser.VAR, 0)

        def type_(self):
            return self.getTypedRuleContext(CSharpParser.Type_Context,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_local_variable_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLocal_variable_type" ):
                listener.enterLocal_variable_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLocal_variable_type" ):
                listener.exitLocal_variable_type(self)




    def local_variable_type(self):

        localctx = CSharpParser.Local_variable_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 244, self.RULE_local_variable_type)
        try:
            self.state = 1928
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,194,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1926
                self.match(CSharpParser.VAR)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1927
                self.type_()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Local_variable_declaratorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(CSharpParser.IdentifierContext,0)


        def ASSIGNMENT(self):
            return self.getToken(CSharpParser.ASSIGNMENT, 0)

        def local_variable_initializer(self):
            return self.getTypedRuleContext(CSharpParser.Local_variable_initializerContext,0)


        def REF(self):
            return self.getToken(CSharpParser.REF, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_local_variable_declarator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLocal_variable_declarator" ):
                listener.enterLocal_variable_declarator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLocal_variable_declarator" ):
                listener.exitLocal_variable_declarator(self)




    def local_variable_declarator(self):

        localctx = CSharpParser.Local_variable_declaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 246, self.RULE_local_variable_declarator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1930
            self.identifier()
            self.state = 1936
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==156:
                self.state = 1931
                self.match(CSharpParser.ASSIGNMENT)
                self.state = 1933
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,195,self._ctx)
                if la_ == 1:
                    self.state = 1932
                    self.match(CSharpParser.REF)


                self.state = 1935
                self.local_variable_initializer()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Local_variable_initializerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(CSharpParser.ExpressionContext,0)


        def array_initializer(self):
            return self.getTypedRuleContext(CSharpParser.Array_initializerContext,0)


        def stackalloc_initializer(self):
            return self.getTypedRuleContext(CSharpParser.Stackalloc_initializerContext,0)


        def deconstruction_element(self):
            return self.getTypedRuleContext(CSharpParser.Deconstruction_elementContext,0)


        def lambda_expression(self):
            return self.getTypedRuleContext(CSharpParser.Lambda_expressionContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_local_variable_initializer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLocal_variable_initializer" ):
                listener.enterLocal_variable_initializer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLocal_variable_initializer" ):
                listener.exitLocal_variable_initializer(self)




    def local_variable_initializer(self):

        localctx = CSharpParser.Local_variable_initializerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 248, self.RULE_local_variable_initializer)
        try:
            self.state = 1943
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,197,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1938
                self.expression()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1939
                self.array_initializer()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1940
                self.stackalloc_initializer()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1941
                self.deconstruction_element()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1942
                self.lambda_expression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Local_constant_declarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CONST(self):
            return self.getToken(CSharpParser.CONST, 0)

        def type_(self):
            return self.getTypedRuleContext(CSharpParser.Type_Context,0)


        def constant_declarators(self):
            return self.getTypedRuleContext(CSharpParser.Constant_declaratorsContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_local_constant_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLocal_constant_declaration" ):
                listener.enterLocal_constant_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLocal_constant_declaration" ):
                listener.exitLocal_constant_declaration(self)




    def local_constant_declaration(self):

        localctx = CSharpParser.Local_constant_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 250, self.RULE_local_constant_declaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1945
            self.match(CSharpParser.CONST)
            self.state = 1946
            self.type_()
            self.state = 1947
            self.constant_declarators()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Switch_sectionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def statement_list(self):
            return self.getTypedRuleContext(CSharpParser.Statement_listContext,0)


        def switch_label(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Switch_labelContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Switch_labelContext,i)


        def getRuleIndex(self):
            return CSharpParser.RULE_switch_section

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSwitch_section" ):
                listener.enterSwitch_section(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSwitch_section" ):
                listener.exitSwitch_section(self)




    def switch_section(self):

        localctx = CSharpParser.Switch_sectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 252, self.RULE_switch_section)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1950 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 1949
                    self.switch_label()

                else:
                    raise NoViableAltException(self)
                self.state = 1952 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,198,self._ctx)

            self.state = 1954
            self.statement_list()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Switch_labelContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CASE(self):
            return self.getToken(CSharpParser.CASE, 0)

        def expression(self):
            return self.getTypedRuleContext(CSharpParser.ExpressionContext,0)


        def COLON(self):
            return self.getToken(CSharpParser.COLON, 0)

        def case_guard(self):
            return self.getTypedRuleContext(CSharpParser.Case_guardContext,0)


        def pattern(self):
            return self.getTypedRuleContext(CSharpParser.PatternContext,0)


        def DEFAULT(self):
            return self.getToken(CSharpParser.DEFAULT, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_switch_label

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSwitch_label" ):
                listener.enterSwitch_label(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSwitch_label" ):
                listener.exitSwitch_label(self)




    def switch_label(self):

        localctx = CSharpParser.Switch_labelContext(self, self._ctx, self.state)
        self.enterRule(localctx, 254, self.RULE_switch_label)
        self._la = 0 # Token type
        try:
            self.state = 1972
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,201,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1956
                self.match(CSharpParser.CASE)
                self.state = 1957
                self.expression()
                self.state = 1959
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==118:
                    self.state = 1958
                    self.case_guard()


                self.state = 1961
                self.match(CSharpParser.COLON)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1963
                self.match(CSharpParser.CASE)
                self.state = 1964
                self.pattern()
                self.state = 1966
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==118:
                    self.state = 1965
                    self.case_guard()


                self.state = 1968
                self.match(CSharpParser.COLON)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1970
                self.match(CSharpParser.DEFAULT)
                self.state = 1971
                self.match(CSharpParser.COLON)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Case_guardContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHEN(self):
            return self.getToken(CSharpParser.WHEN, 0)

        def expression(self):
            return self.getTypedRuleContext(CSharpParser.ExpressionContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_case_guard

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCase_guard" ):
                listener.enterCase_guard(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCase_guard" ):
                listener.exitCase_guard(self)




    def case_guard(self):

        localctx = CSharpParser.Case_guardContext(self, self._ctx, self.state)
        self.enterRule(localctx, 256, self.RULE_case_guard)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1974
            self.match(CSharpParser.WHEN)
            self.state = 1975
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Statement_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.StatementContext)
            else:
                return self.getTypedRuleContext(CSharpParser.StatementContext,i)


        def getRuleIndex(self):
            return CSharpParser.RULE_statement_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatement_list" ):
                listener.enterStatement_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatement_list" ):
                listener.exitStatement_list(self)




    def statement_list(self):

        localctx = CSharpParser.Statement_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 258, self.RULE_statement_list)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1978 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 1977
                    self.statement()

                else:
                    raise NoViableAltException(self)
                self.state = 1980 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,202,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class For_initializerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def local_variable_declaration(self):
            return self.getTypedRuleContext(CSharpParser.Local_variable_declarationContext,0)


        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(CSharpParser.ExpressionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.COMMA)
            else:
                return self.getToken(CSharpParser.COMMA, i)

        def getRuleIndex(self):
            return CSharpParser.RULE_for_initializer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFor_initializer" ):
                listener.enterFor_initializer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFor_initializer" ):
                listener.exitFor_initializer(self)




    def for_initializer(self):

        localctx = CSharpParser.For_initializerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 260, self.RULE_for_initializer)
        self._la = 0 # Token type
        try:
            self.state = 1991
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,204,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1982
                self.local_variable_declaration()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1983
                self.expression()
                self.state = 1988
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==143:
                    self.state = 1984
                    self.match(CSharpParser.COMMA)
                    self.state = 1985
                    self.expression()
                    self.state = 1990
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class For_iteratorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(CSharpParser.ExpressionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.COMMA)
            else:
                return self.getToken(CSharpParser.COMMA, i)

        def getRuleIndex(self):
            return CSharpParser.RULE_for_iterator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFor_iterator" ):
                listener.enterFor_iterator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFor_iterator" ):
                listener.exitFor_iterator(self)




    def for_iterator(self):

        localctx = CSharpParser.For_iteratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 262, self.RULE_for_iterator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1993
            self.expression()
            self.state = 1998
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==143:
                self.state = 1994
                self.match(CSharpParser.COMMA)
                self.state = 1995
                self.expression()
                self.state = 2000
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Catch_clausesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def specific_catch_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Specific_catch_clauseContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Specific_catch_clauseContext,i)


        def general_catch_clause(self):
            return self.getTypedRuleContext(CSharpParser.General_catch_clauseContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_catch_clauses

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCatch_clauses" ):
                listener.enterCatch_clauses(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCatch_clauses" ):
                listener.exitCatch_clauses(self)




    def catch_clauses(self):

        localctx = CSharpParser.Catch_clausesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 264, self.RULE_catch_clauses)
        self._la = 0 # Token type
        try:
            self.state = 2012
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,208,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2001
                self.specific_catch_clause()
                self.state = 2005
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,206,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2002
                        self.specific_catch_clause() 
                    self.state = 2007
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,206,self._ctx)

                self.state = 2009
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==24:
                    self.state = 2008
                    self.general_catch_clause()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2011
                self.general_catch_clause()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Specific_catch_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CATCH(self):
            return self.getToken(CSharpParser.CATCH, 0)

        def OPEN_PARENS(self):
            return self.getToken(CSharpParser.OPEN_PARENS, 0)

        def class_type(self):
            return self.getTypedRuleContext(CSharpParser.Class_typeContext,0)


        def CLOSE_PARENS(self):
            return self.getToken(CSharpParser.CLOSE_PARENS, 0)

        def block(self):
            return self.getTypedRuleContext(CSharpParser.BlockContext,0)


        def identifier(self):
            return self.getTypedRuleContext(CSharpParser.IdentifierContext,0)


        def exception_filter(self):
            return self.getTypedRuleContext(CSharpParser.Exception_filterContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_specific_catch_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSpecific_catch_clause" ):
                listener.enterSpecific_catch_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSpecific_catch_clause" ):
                listener.exitSpecific_catch_clause(self)




    def specific_catch_clause(self):

        localctx = CSharpParser.Specific_catch_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 266, self.RULE_specific_catch_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2014
            self.match(CSharpParser.CATCH)
            self.state = 2015
            self.match(CSharpParser.OPEN_PARENS)
            self.state = 2016
            self.class_type()
            self.state = 2018
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 4633078743724962816) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 1352276157684392979) != 0):
                self.state = 2017
                self.identifier()


            self.state = 2020
            self.match(CSharpParser.CLOSE_PARENS)
            self.state = 2022
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==118:
                self.state = 2021
                self.exception_filter()


            self.state = 2024
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class General_catch_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CATCH(self):
            return self.getToken(CSharpParser.CATCH, 0)

        def block(self):
            return self.getTypedRuleContext(CSharpParser.BlockContext,0)


        def exception_filter(self):
            return self.getTypedRuleContext(CSharpParser.Exception_filterContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_general_catch_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGeneral_catch_clause" ):
                listener.enterGeneral_catch_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGeneral_catch_clause" ):
                listener.exitGeneral_catch_clause(self)




    def general_catch_clause(self):

        localctx = CSharpParser.General_catch_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 268, self.RULE_general_catch_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2026
            self.match(CSharpParser.CATCH)
            self.state = 2028
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==118:
                self.state = 2027
                self.exception_filter()


            self.state = 2030
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Exception_filterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHEN(self):
            return self.getToken(CSharpParser.WHEN, 0)

        def OPEN_PARENS(self):
            return self.getToken(CSharpParser.OPEN_PARENS, 0)

        def expression(self):
            return self.getTypedRuleContext(CSharpParser.ExpressionContext,0)


        def CLOSE_PARENS(self):
            return self.getToken(CSharpParser.CLOSE_PARENS, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_exception_filter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterException_filter" ):
                listener.enterException_filter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitException_filter" ):
                listener.exitException_filter(self)




    def exception_filter(self):

        localctx = CSharpParser.Exception_filterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 270, self.RULE_exception_filter)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2032
            self.match(CSharpParser.WHEN)
            self.state = 2033
            self.match(CSharpParser.OPEN_PARENS)
            self.state = 2034
            self.expression()
            self.state = 2035
            self.match(CSharpParser.CLOSE_PARENS)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Finally_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FINALLY(self):
            return self.getToken(CSharpParser.FINALLY, 0)

        def block(self):
            return self.getTypedRuleContext(CSharpParser.BlockContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_finally_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFinally_clause" ):
                listener.enterFinally_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFinally_clause" ):
                listener.exitFinally_clause(self)




    def finally_clause(self):

        localctx = CSharpParser.Finally_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 272, self.RULE_finally_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2037
            self.match(CSharpParser.FINALLY)
            self.state = 2038
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Resource_acquisitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def local_variable_declaration(self):
            return self.getTypedRuleContext(CSharpParser.Local_variable_declarationContext,0)


        def expression(self):
            return self.getTypedRuleContext(CSharpParser.ExpressionContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_resource_acquisition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterResource_acquisition" ):
                listener.enterResource_acquisition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitResource_acquisition" ):
                listener.exitResource_acquisition(self)




    def resource_acquisition(self):

        localctx = CSharpParser.Resource_acquisitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 274, self.RULE_resource_acquisition)
        try:
            self.state = 2042
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,212,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2040
                self.local_variable_declaration()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2041
                self.expression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Namespace_declarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.qi = None # Qualified_identifierContext

        def NAMESPACE(self):
            return self.getToken(CSharpParser.NAMESPACE, 0)

        def namespace_body(self):
            return self.getTypedRuleContext(CSharpParser.Namespace_bodyContext,0)


        def qualified_identifier(self):
            return self.getTypedRuleContext(CSharpParser.Qualified_identifierContext,0)


        def SEMICOLON(self):
            return self.getToken(CSharpParser.SEMICOLON, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_namespace_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNamespace_declaration" ):
                listener.enterNamespace_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNamespace_declaration" ):
                listener.exitNamespace_declaration(self)




    def namespace_declaration(self):

        localctx = CSharpParser.Namespace_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 276, self.RULE_namespace_declaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2044
            self.match(CSharpParser.NAMESPACE)
            self.state = 2045
            localctx.qi = self.qualified_identifier()
            self.state = 2046
            self.namespace_body()
            self.state = 2048
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,213,self._ctx)
            if la_ == 1:
                self.state = 2047
                self.match(CSharpParser.SEMICOLON)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Qualified_identifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(CSharpParser.IdentifierContext,i)


        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.DOT)
            else:
                return self.getToken(CSharpParser.DOT, i)

        def getRuleIndex(self):
            return CSharpParser.RULE_qualified_identifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQualified_identifier" ):
                listener.enterQualified_identifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQualified_identifier" ):
                listener.exitQualified_identifier(self)




    def qualified_identifier(self):

        localctx = CSharpParser.Qualified_identifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 278, self.RULE_qualified_identifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2050
            self.identifier()
            self.state = 2055
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==142:
                self.state = 2051
                self.match(CSharpParser.DOT)
                self.state = 2052
                self.identifier()
                self.state = 2057
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Namespace_bodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_BRACE(self):
            return self.getToken(CSharpParser.OPEN_BRACE, 0)

        def CLOSE_BRACE(self):
            return self.getToken(CSharpParser.CLOSE_BRACE, 0)

        def extern_alias_directives(self):
            return self.getTypedRuleContext(CSharpParser.Extern_alias_directivesContext,0)


        def using_directives(self):
            return self.getTypedRuleContext(CSharpParser.Using_directivesContext,0)


        def namespace_member_declarations(self):
            return self.getTypedRuleContext(CSharpParser.Namespace_member_declarationsContext,0)


        def SEMICOLON(self):
            return self.getToken(CSharpParser.SEMICOLON, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_namespace_body

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNamespace_body" ):
                listener.enterNamespace_body(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNamespace_body" ):
                listener.exitNamespace_body(self)




    def namespace_body(self):

        localctx = CSharpParser.Namespace_bodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 280, self.RULE_namespace_body)
        self._la = 0 # Token type
        try:
            self.state = 2070
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [136]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2058
                self.match(CSharpParser.OPEN_BRACE)
                self.state = 2060
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,215,self._ctx)
                if la_ == 1:
                    self.state = 2059
                    self.extern_alias_directives()


                self.state = 2063
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==53 or _la==113:
                    self.state = 2062
                    self.using_directives()


                self.state = 2066
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 6722968088686081536) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 1656717794697193083) != 0) or _la==138 or _la==140:
                    self.state = 2065
                    self.namespace_member_declarations()


                self.state = 2068
                self.match(CSharpParser.CLOSE_BRACE)
                pass
            elif token in [145]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2069
                self.match(CSharpParser.SEMICOLON)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Extern_alias_directivesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def extern_alias_directive(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Extern_alias_directiveContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Extern_alias_directiveContext,i)


        def getRuleIndex(self):
            return CSharpParser.RULE_extern_alias_directives

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExtern_alias_directives" ):
                listener.enterExtern_alias_directives(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExtern_alias_directives" ):
                listener.exitExtern_alias_directives(self)




    def extern_alias_directives(self):

        localctx = CSharpParser.Extern_alias_directivesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 282, self.RULE_extern_alias_directives)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2073 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 2072
                    self.extern_alias_directive()

                else:
                    raise NoViableAltException(self)
                self.state = 2075 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,219,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Extern_alias_directiveContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXTERN(self):
            return self.getToken(CSharpParser.EXTERN, 0)

        def ALIAS(self):
            return self.getToken(CSharpParser.ALIAS, 0)

        def identifier(self):
            return self.getTypedRuleContext(CSharpParser.IdentifierContext,0)


        def SEMICOLON(self):
            return self.getToken(CSharpParser.SEMICOLON, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_extern_alias_directive

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExtern_alias_directive" ):
                listener.enterExtern_alias_directive(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExtern_alias_directive" ):
                listener.exitExtern_alias_directive(self)




    def extern_alias_directive(self):

        localctx = CSharpParser.Extern_alias_directiveContext(self, self._ctx, self.state)
        self.enterRule(localctx, 284, self.RULE_extern_alias_directive)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2077
            self.match(CSharpParser.EXTERN)
            self.state = 2078
            self.match(CSharpParser.ALIAS)
            self.state = 2079
            self.identifier()
            self.state = 2080
            self.match(CSharpParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Using_directivesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def using_directive(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Using_directiveContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Using_directiveContext,i)


        def getRuleIndex(self):
            return CSharpParser.RULE_using_directives

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUsing_directives" ):
                listener.enterUsing_directives(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUsing_directives" ):
                listener.exitUsing_directives(self)




    def using_directives(self):

        localctx = CSharpParser.Using_directivesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 286, self.RULE_using_directives)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2083 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 2082
                    self.using_directive()

                else:
                    raise NoViableAltException(self)
                self.state = 2085 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,220,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Using_directiveContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CSharpParser.RULE_using_directive

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class UsingAliasDirectiveContext(Using_directiveContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CSharpParser.Using_directiveContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def USING(self):
            return self.getToken(CSharpParser.USING, 0)
        def identifier(self):
            return self.getTypedRuleContext(CSharpParser.IdentifierContext,0)

        def ASSIGNMENT(self):
            return self.getToken(CSharpParser.ASSIGNMENT, 0)
        def SEMICOLON(self):
            return self.getToken(CSharpParser.SEMICOLON, 0)
        def namespace_or_type_name(self):
            return self.getTypedRuleContext(CSharpParser.Namespace_or_type_nameContext,0)

        def tuple_type(self):
            return self.getTypedRuleContext(CSharpParser.Tuple_typeContext,0)

        def GLOBAL(self):
            return self.getToken(CSharpParser.GLOBAL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUsingAliasDirective" ):
                listener.enterUsingAliasDirective(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUsingAliasDirective" ):
                listener.exitUsingAliasDirective(self)


    class UsingNamespaceDirectiveContext(Using_directiveContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CSharpParser.Using_directiveContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def USING(self):
            return self.getToken(CSharpParser.USING, 0)
        def namespace_or_type_name(self):
            return self.getTypedRuleContext(CSharpParser.Namespace_or_type_nameContext,0)

        def SEMICOLON(self):
            return self.getToken(CSharpParser.SEMICOLON, 0)
        def GLOBAL(self):
            return self.getToken(CSharpParser.GLOBAL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUsingNamespaceDirective" ):
                listener.enterUsingNamespaceDirective(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUsingNamespaceDirective" ):
                listener.exitUsingNamespaceDirective(self)


    class UsingStaticDirectiveContext(Using_directiveContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CSharpParser.Using_directiveContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def USING(self):
            return self.getToken(CSharpParser.USING, 0)
        def STATIC(self):
            return self.getToken(CSharpParser.STATIC, 0)
        def namespace_or_type_name(self):
            return self.getTypedRuleContext(CSharpParser.Namespace_or_type_nameContext,0)

        def SEMICOLON(self):
            return self.getToken(CSharpParser.SEMICOLON, 0)
        def GLOBAL(self):
            return self.getToken(CSharpParser.GLOBAL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUsingStaticDirective" ):
                listener.enterUsingStaticDirective(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUsingStaticDirective" ):
                listener.exitUsingStaticDirective(self)



    def using_directive(self):

        localctx = CSharpParser.Using_directiveContext(self, self._ctx, self.state)
        self.enterRule(localctx, 288, self.RULE_using_directive)
        self._la = 0 # Token type
        try:
            self.state = 2114
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,225,self._ctx)
            if la_ == 1:
                localctx = CSharpParser.UsingAliasDirectiveContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2088
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==53:
                    self.state = 2087
                    self.match(CSharpParser.GLOBAL)


                self.state = 2090
                self.match(CSharpParser.USING)
                self.state = 2091
                self.identifier()
                self.state = 2092
                self.match(CSharpParser.ASSIGNMENT)
                self.state = 2095
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,222,self._ctx)
                if la_ == 1:
                    self.state = 2093
                    self.namespace_or_type_name()
                    pass

                elif la_ == 2:
                    self.state = 2094
                    self.tuple_type()
                    pass


                self.state = 2097
                self.match(CSharpParser.SEMICOLON)
                pass

            elif la_ == 2:
                localctx = CSharpParser.UsingNamespaceDirectiveContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2100
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==53:
                    self.state = 2099
                    self.match(CSharpParser.GLOBAL)


                self.state = 2102
                self.match(CSharpParser.USING)
                self.state = 2103
                self.namespace_or_type_name()
                self.state = 2104
                self.match(CSharpParser.SEMICOLON)
                pass

            elif la_ == 3:
                localctx = CSharpParser.UsingStaticDirectiveContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 2107
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==53:
                    self.state = 2106
                    self.match(CSharpParser.GLOBAL)


                self.state = 2109
                self.match(CSharpParser.USING)
                self.state = 2110
                self.match(CSharpParser.STATIC)
                self.state = 2111
                self.namespace_or_type_name()
                self.state = 2112
                self.match(CSharpParser.SEMICOLON)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Namespace_member_declarationsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def namespace_member_declaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Namespace_member_declarationContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Namespace_member_declarationContext,i)


        def getRuleIndex(self):
            return CSharpParser.RULE_namespace_member_declarations

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNamespace_member_declarations" ):
                listener.enterNamespace_member_declarations(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNamespace_member_declarations" ):
                listener.exitNamespace_member_declarations(self)




    def namespace_member_declarations(self):

        localctx = CSharpParser.Namespace_member_declarationsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 290, self.RULE_namespace_member_declarations)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2117 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 2116
                    self.namespace_member_declaration()

                else:
                    raise NoViableAltException(self)
                self.state = 2119 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,226,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Namespace_member_declarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def namespace_declaration(self):
            return self.getTypedRuleContext(CSharpParser.Namespace_declarationContext,0)


        def type_declaration(self):
            return self.getTypedRuleContext(CSharpParser.Type_declarationContext,0)


        def module_initializer_declaration(self):
            return self.getTypedRuleContext(CSharpParser.Module_initializer_declarationContext,0)


        def common_member_declaration(self):
            return self.getTypedRuleContext(CSharpParser.Common_member_declarationContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_namespace_member_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNamespace_member_declaration" ):
                listener.enterNamespace_member_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNamespace_member_declaration" ):
                listener.exitNamespace_member_declaration(self)




    def namespace_member_declaration(self):

        localctx = CSharpParser.Namespace_member_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 292, self.RULE_namespace_member_declaration)
        try:
            self.state = 2125
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,227,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2121
                self.namespace_declaration()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2122
                self.type_declaration()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2123
                self.module_initializer_declaration()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2124
                self.common_member_declaration()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Type_declarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def class_definition(self):
            return self.getTypedRuleContext(CSharpParser.Class_definitionContext,0)


        def struct_definition(self):
            return self.getTypedRuleContext(CSharpParser.Struct_definitionContext,0)


        def interface_definition(self):
            return self.getTypedRuleContext(CSharpParser.Interface_definitionContext,0)


        def enum_definition(self):
            return self.getTypedRuleContext(CSharpParser.Enum_definitionContext,0)


        def delegate_definition(self):
            return self.getTypedRuleContext(CSharpParser.Delegate_definitionContext,0)


        def record_definition(self):
            return self.getTypedRuleContext(CSharpParser.Record_definitionContext,0)


        def attributes(self):
            return self.getTypedRuleContext(CSharpParser.AttributesContext,0)


        def all_member_modifiers(self):
            return self.getTypedRuleContext(CSharpParser.All_member_modifiersContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_type_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterType_declaration" ):
                listener.enterType_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitType_declaration" ):
                listener.exitType_declaration(self)




    def type_declaration(self):

        localctx = CSharpParser.Type_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 294, self.RULE_type_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2128
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==138:
                self.state = 2127
                self.attributes()


            self.state = 2131
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,229,self._ctx)
            if la_ == 1:
                self.state = 2130
                self.all_member_modifiers()


            self.state = 2139
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,230,self._ctx)
            if la_ == 1:
                self.state = 2133
                self.class_definition()
                pass

            elif la_ == 2:
                self.state = 2134
                self.struct_definition()
                pass

            elif la_ == 3:
                self.state = 2135
                self.interface_definition()
                pass

            elif la_ == 4:
                self.state = 2136
                self.enum_definition()
                pass

            elif la_ == 5:
                self.state = 2137
                self.delegate_definition()
                pass

            elif la_ == 6:
                self.state = 2138
                self.record_definition()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Record_definitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RECORD(self):
            return self.getToken(CSharpParser.RECORD, 0)

        def identifier(self):
            return self.getTypedRuleContext(CSharpParser.IdentifierContext,0)


        def OPEN_PARENS(self):
            return self.getToken(CSharpParser.OPEN_PARENS, 0)

        def CLOSE_PARENS(self):
            return self.getToken(CSharpParser.CLOSE_PARENS, 0)

        def record_body(self):
            return self.getTypedRuleContext(CSharpParser.Record_bodyContext,0)


        def STRUCT(self):
            return self.getToken(CSharpParser.STRUCT, 0)

        def type_parameter_list(self):
            return self.getTypedRuleContext(CSharpParser.Type_parameter_listContext,0)


        def record_base(self):
            return self.getTypedRuleContext(CSharpParser.Record_baseContext,0)


        def type_parameter_constraints_clauses(self):
            return self.getTypedRuleContext(CSharpParser.Type_parameter_constraints_clausesContext,0)


        def formal_parameter_list(self):
            return self.getTypedRuleContext(CSharpParser.Formal_parameter_listContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_record_definition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRecord_definition" ):
                listener.enterRecord_definition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRecord_definition" ):
                listener.exitRecord_definition(self)




    def record_definition(self):

        localctx = CSharpParser.Record_definitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 296, self.RULE_record_definition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2141
            self.match(CSharpParser.RECORD)
            self.state = 2143
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==99:
                self.state = 2142
                self.match(CSharpParser.STRUCT)


            self.state = 2145
            self.identifier()
            self.state = 2147
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==157:
                self.state = 2146
                self.type_parameter_list()


            self.state = 2150
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==144:
                self.state = 2149
                self.record_base()


            self.state = 2153
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==119:
                self.state = 2152
                self.type_parameter_constraints_clauses()


            self.state = 2155
            self.match(CSharpParser.OPEN_PARENS)
            self.state = 2157
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 5065494716463428608) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 1357087776337782299) != 0) or _la==138 or _la==140:
                self.state = 2156
                self.formal_parameter_list()


            self.state = 2159
            self.match(CSharpParser.CLOSE_PARENS)
            self.state = 2160
            self.record_body()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Record_baseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COLON(self):
            return self.getToken(CSharpParser.COLON, 0)

        def class_type(self):
            return self.getTypedRuleContext(CSharpParser.Class_typeContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.COMMA)
            else:
                return self.getToken(CSharpParser.COMMA, i)

        def namespace_or_type_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Namespace_or_type_nameContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Namespace_or_type_nameContext,i)


        def getRuleIndex(self):
            return CSharpParser.RULE_record_base

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRecord_base" ):
                listener.enterRecord_base(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRecord_base" ):
                listener.exitRecord_base(self)




    def record_base(self):

        localctx = CSharpParser.Record_baseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 298, self.RULE_record_base)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2162
            self.match(CSharpParser.COLON)
            self.state = 2163
            self.class_type()
            self.state = 2168
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==143:
                self.state = 2164
                self.match(CSharpParser.COMMA)
                self.state = 2165
                self.namespace_or_type_name()
                self.state = 2170
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Record_bodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_BRACE(self):
            return self.getToken(CSharpParser.OPEN_BRACE, 0)

        def CLOSE_BRACE(self):
            return self.getToken(CSharpParser.CLOSE_BRACE, 0)

        def class_member_declarations(self):
            return self.getTypedRuleContext(CSharpParser.Class_member_declarationsContext,0)


        def SEMICOLON(self):
            return self.getToken(CSharpParser.SEMICOLON, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_record_body

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRecord_body" ):
                listener.enterRecord_body(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRecord_body" ):
                listener.exitRecord_body(self)




    def record_body(self):

        localctx = CSharpParser.Record_bodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 300, self.RULE_record_body)
        self._la = 0 # Token type
        try:
            self.state = 2177
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [136]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2171
                self.match(CSharpParser.OPEN_BRACE)
                self.state = 2173
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 6722968088686081536) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 1656717794697193051) != 0) or ((((_la - 138)) & ~0x3f) == 0 and ((1 << (_la - 138)) & 131077) != 0):
                    self.state = 2172
                    self.class_member_declarations()


                self.state = 2175
                self.match(CSharpParser.CLOSE_BRACE)
                pass
            elif token in [145]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2176
                self.match(CSharpParser.SEMICOLON)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Record_parametersContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def record_parameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Record_parameterContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Record_parameterContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.COMMA)
            else:
                return self.getToken(CSharpParser.COMMA, i)

        def getRuleIndex(self):
            return CSharpParser.RULE_record_parameters

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRecord_parameters" ):
                listener.enterRecord_parameters(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRecord_parameters" ):
                listener.exitRecord_parameters(self)




    def record_parameters(self):

        localctx = CSharpParser.Record_parametersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 302, self.RULE_record_parameters)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2179
            self.record_parameter()
            self.state = 2184
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==143:
                self.state = 2180
                self.match(CSharpParser.COMMA)
                self.state = 2181
                self.record_parameter()
                self.state = 2186
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Record_parameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def type_(self):
            return self.getTypedRuleContext(CSharpParser.Type_Context,0)


        def identifier(self):
            return self.getTypedRuleContext(CSharpParser.IdentifierContext,0)


        def attributes(self):
            return self.getTypedRuleContext(CSharpParser.AttributesContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_record_parameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRecord_parameter" ):
                listener.enterRecord_parameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRecord_parameter" ):
                listener.exitRecord_parameter(self)




    def record_parameter(self):

        localctx = CSharpParser.Record_parameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 304, self.RULE_record_parameter)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2188
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==138:
                self.state = 2187
                self.attributes()


            self.state = 2190
            self.type_()
            self.state = 2191
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Qualified_alias_memberContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(CSharpParser.IdentifierContext,i)


        def DOUBLE_COLON(self):
            return self.getToken(CSharpParser.DOUBLE_COLON, 0)

        def type_argument_list(self):
            return self.getTypedRuleContext(CSharpParser.Type_argument_listContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_qualified_alias_member

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQualified_alias_member" ):
                listener.enterQualified_alias_member(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQualified_alias_member" ):
                listener.exitQualified_alias_member(self)




    def qualified_alias_member(self):

        localctx = CSharpParser.Qualified_alias_memberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 306, self.RULE_qualified_alias_member)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2193
            self.identifier()
            self.state = 2194
            self.match(CSharpParser.DOUBLE_COLON)
            self.state = 2195
            self.identifier()
            self.state = 2197
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,241,self._ctx)
            if la_ == 1:
                self.state = 2196
                self.type_argument_list()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Type_parameter_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LT(self):
            return self.getToken(CSharpParser.LT, 0)

        def type_parameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Type_parameterContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Type_parameterContext,i)


        def GT(self):
            return self.getToken(CSharpParser.GT, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.COMMA)
            else:
                return self.getToken(CSharpParser.COMMA, i)

        def getRuleIndex(self):
            return CSharpParser.RULE_type_parameter_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterType_parameter_list" ):
                listener.enterType_parameter_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitType_parameter_list" ):
                listener.exitType_parameter_list(self)




    def type_parameter_list(self):

        localctx = CSharpParser.Type_parameter_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 308, self.RULE_type_parameter_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2199
            self.match(CSharpParser.LT)
            self.state = 2200
            self.type_parameter()
            self.state = 2205
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==143:
                self.state = 2201
                self.match(CSharpParser.COMMA)
                self.state = 2202
                self.type_parameter()
                self.state = 2207
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2208
            self.match(CSharpParser.GT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Type_parameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(CSharpParser.IdentifierContext,0)


        def attributes(self):
            return self.getTypedRuleContext(CSharpParser.AttributesContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_type_parameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterType_parameter" ):
                listener.enterType_parameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitType_parameter" ):
                listener.exitType_parameter(self)




    def type_parameter(self):

        localctx = CSharpParser.Type_parameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 310, self.RULE_type_parameter)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2211
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==138:
                self.state = 2210
                self.attributes()


            self.state = 2213
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Class_baseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COLON(self):
            return self.getToken(CSharpParser.COLON, 0)

        def class_type(self):
            return self.getTypedRuleContext(CSharpParser.Class_typeContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.COMMA)
            else:
                return self.getToken(CSharpParser.COMMA, i)

        def namespace_or_type_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Namespace_or_type_nameContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Namespace_or_type_nameContext,i)


        def getRuleIndex(self):
            return CSharpParser.RULE_class_base

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClass_base" ):
                listener.enterClass_base(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClass_base" ):
                listener.exitClass_base(self)




    def class_base(self):

        localctx = CSharpParser.Class_baseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 312, self.RULE_class_base)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2215
            self.match(CSharpParser.COLON)
            self.state = 2216
            self.class_type()
            self.state = 2221
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==143:
                self.state = 2217
                self.match(CSharpParser.COMMA)
                self.state = 2218
                self.namespace_or_type_name()
                self.state = 2223
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Interface_type_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def namespace_or_type_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Namespace_or_type_nameContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Namespace_or_type_nameContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.COMMA)
            else:
                return self.getToken(CSharpParser.COMMA, i)

        def getRuleIndex(self):
            return CSharpParser.RULE_interface_type_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterface_type_list" ):
                listener.enterInterface_type_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterface_type_list" ):
                listener.exitInterface_type_list(self)




    def interface_type_list(self):

        localctx = CSharpParser.Interface_type_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 314, self.RULE_interface_type_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2224
            self.namespace_or_type_name()
            self.state = 2229
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==143:
                self.state = 2225
                self.match(CSharpParser.COMMA)
                self.state = 2226
                self.namespace_or_type_name()
                self.state = 2231
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Type_parameter_constraints_clausesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def type_parameter_constraints_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Type_parameter_constraints_clauseContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Type_parameter_constraints_clauseContext,i)


        def getRuleIndex(self):
            return CSharpParser.RULE_type_parameter_constraints_clauses

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterType_parameter_constraints_clauses" ):
                listener.enterType_parameter_constraints_clauses(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitType_parameter_constraints_clauses" ):
                listener.exitType_parameter_constraints_clauses(self)




    def type_parameter_constraints_clauses(self):

        localctx = CSharpParser.Type_parameter_constraints_clausesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 316, self.RULE_type_parameter_constraints_clauses)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2233 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 2232
                self.type_parameter_constraints_clause()
                self.state = 2235 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==119):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Type_parameter_constraints_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHERE(self):
            return self.getToken(CSharpParser.WHERE, 0)

        def identifier(self):
            return self.getTypedRuleContext(CSharpParser.IdentifierContext,0)


        def COLON(self):
            return self.getToken(CSharpParser.COLON, 0)

        def type_parameter_constraints(self):
            return self.getTypedRuleContext(CSharpParser.Type_parameter_constraintsContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_type_parameter_constraints_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterType_parameter_constraints_clause" ):
                listener.enterType_parameter_constraints_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitType_parameter_constraints_clause" ):
                listener.exitType_parameter_constraints_clause(self)




    def type_parameter_constraints_clause(self):

        localctx = CSharpParser.Type_parameter_constraints_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 318, self.RULE_type_parameter_constraints_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2237
            self.match(CSharpParser.WHERE)
            self.state = 2238
            self.identifier()
            self.state = 2239
            self.match(CSharpParser.COLON)
            self.state = 2240
            self.type_parameter_constraints()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Type_parameter_constraintsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def constructor_constraint(self):
            return self.getTypedRuleContext(CSharpParser.Constructor_constraintContext,0)


        def primary_constraint(self):
            return self.getTypedRuleContext(CSharpParser.Primary_constraintContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.COMMA)
            else:
                return self.getToken(CSharpParser.COMMA, i)

        def secondary_constraints(self):
            return self.getTypedRuleContext(CSharpParser.Secondary_constraintsContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_type_parameter_constraints

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterType_parameter_constraints" ):
                listener.enterType_parameter_constraints(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitType_parameter_constraints" ):
                listener.exitType_parameter_constraints(self)




    def type_parameter_constraints(self):

        localctx = CSharpParser.Type_parameter_constraintsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 320, self.RULE_type_parameter_constraints)
        self._la = 0 # Token type
        try:
            self.state = 2252
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [70]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2242
                self.constructor_constraint()
                pass
            elif token in [10, 12, 13, 15, 16, 17, 21, 27, 33, 36, 39, 50, 51, 54, 62, 64, 65, 68, 73, 74, 77, 81, 88, 92, 93, 98, 99, 110, 114, 118, 119, 121, 124]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2243
                self.primary_constraint()
                self.state = 2246
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,247,self._ctx)
                if la_ == 1:
                    self.state = 2244
                    self.match(CSharpParser.COMMA)
                    self.state = 2245
                    self.secondary_constraints()


                self.state = 2250
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==143:
                    self.state = 2248
                    self.match(CSharpParser.COMMA)
                    self.state = 2249
                    self.constructor_constraint()


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Primary_constraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def class_type(self):
            return self.getTypedRuleContext(CSharpParser.Class_typeContext,0)


        def CLASS(self):
            return self.getToken(CSharpParser.CLASS, 0)

        def INTERR(self):
            return self.getToken(CSharpParser.INTERR, 0)

        def STRUCT(self):
            return self.getToken(CSharpParser.STRUCT, 0)

        def UNMANAGED(self):
            return self.getToken(CSharpParser.UNMANAGED, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_primary_constraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrimary_constraint" ):
                listener.enterPrimary_constraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrimary_constraint" ):
                listener.exitPrimary_constraint(self)




    def primary_constraint(self):

        localctx = CSharpParser.Primary_constraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 322, self.RULE_primary_constraint)
        self._la = 0 # Token type
        try:
            self.state = 2261
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,251,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2254
                self.class_type()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2255
                self.match(CSharpParser.CLASS)
                self.state = 2257
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==159:
                    self.state = 2256
                    self.match(CSharpParser.INTERR)


                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2259
                self.match(CSharpParser.STRUCT)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2260
                self.match(CSharpParser.UNMANAGED)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PatternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declaration_pattern(self):
            return self.getTypedRuleContext(CSharpParser.Declaration_patternContext,0)


        def constant_pattern(self):
            return self.getTypedRuleContext(CSharpParser.Constant_patternContext,0)


        def var_pattern(self):
            return self.getTypedRuleContext(CSharpParser.Var_patternContext,0)


        def relational_pattern(self):
            return self.getTypedRuleContext(CSharpParser.Relational_patternContext,0)


        def and_pattern(self):
            return self.getTypedRuleContext(CSharpParser.And_patternContext,0)


        def or_pattern(self):
            return self.getTypedRuleContext(CSharpParser.Or_patternContext,0)


        def not_pattern(self):
            return self.getTypedRuleContext(CSharpParser.Not_patternContext,0)


        def expression(self):
            return self.getTypedRuleContext(CSharpParser.ExpressionContext,0)


        def is_pattern(self):
            return self.getTypedRuleContext(CSharpParser.Is_patternContext,0)


        def list_pattern(self):
            return self.getTypedRuleContext(CSharpParser.List_patternContext,0)


        def rest_pattern(self):
            return self.getTypedRuleContext(CSharpParser.Rest_patternContext,0)


        def positional_pattern(self):
            return self.getTypedRuleContext(CSharpParser.Positional_patternContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_pattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPattern" ):
                listener.enterPattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPattern" ):
                listener.exitPattern(self)




    def pattern(self):

        localctx = CSharpParser.PatternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 324, self.RULE_pattern)
        try:
            self.state = 2275
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,252,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2263
                self.declaration_pattern()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2264
                self.constant_pattern()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2265
                self.var_pattern()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2266
                self.relational_pattern()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 2267
                self.and_pattern()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 2268
                self.or_pattern()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 2269
                self.not_pattern()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 2270
                self.expression()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 2271
                self.is_pattern()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 2272
                self.list_pattern()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 2273
                self.rest_pattern()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 2274
                self.positional_pattern()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Positional_patternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PARENS(self):
            return self.getToken(CSharpParser.OPEN_PARENS, 0)

        def subpattern(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.SubpatternContext)
            else:
                return self.getTypedRuleContext(CSharpParser.SubpatternContext,i)


        def CLOSE_PARENS(self):
            return self.getToken(CSharpParser.CLOSE_PARENS, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.COMMA)
            else:
                return self.getToken(CSharpParser.COMMA, i)

        def getRuleIndex(self):
            return CSharpParser.RULE_positional_pattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPositional_pattern" ):
                listener.enterPositional_pattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPositional_pattern" ):
                listener.exitPositional_pattern(self)




    def positional_pattern(self):

        localctx = CSharpParser.Positional_patternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 326, self.RULE_positional_pattern)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2277
            self.match(CSharpParser.OPEN_PARENS)
            self.state = 2278
            self.subpattern()
            self.state = 2283
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==143:
                self.state = 2279
                self.match(CSharpParser.COMMA)
                self.state = 2280
                self.subpattern()
                self.state = 2285
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2286
            self.match(CSharpParser.CLOSE_PARENS)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SubpatternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pattern(self):
            return self.getTypedRuleContext(CSharpParser.PatternContext,0)


        def identifier(self):
            return self.getTypedRuleContext(CSharpParser.IdentifierContext,0)


        def COLON(self):
            return self.getToken(CSharpParser.COLON, 0)

        def OP_LE(self):
            return self.getToken(CSharpParser.OP_LE, 0)

        def expression(self):
            return self.getTypedRuleContext(CSharpParser.ExpressionContext,0)


        def OP_GE(self):
            return self.getToken(CSharpParser.OP_GE, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_subpattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubpattern" ):
                listener.enterSubpattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubpattern" ):
                listener.exitSubpattern(self)




    def subpattern(self):

        localctx = CSharpParser.SubpatternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 328, self.RULE_subpattern)
        try:
            self.state = 2297
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,254,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2288
                self.pattern()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2289
                self.identifier()
                self.state = 2290
                self.match(CSharpParser.COLON)
                self.state = 2291
                self.pattern()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2293
                self.match(CSharpParser.OP_LE)
                self.state = 2294
                self.expression()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2295
                self.match(CSharpParser.OP_GE)
                self.state = 2296
                self.expression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Rest_patternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OP_RANGE(self):
            return self.getToken(CSharpParser.OP_RANGE, 0)

        def type_(self):
            return self.getTypedRuleContext(CSharpParser.Type_Context,0)


        def expression(self):
            return self.getTypedRuleContext(CSharpParser.ExpressionContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_rest_pattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRest_pattern" ):
                listener.enterRest_pattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRest_pattern" ):
                listener.exitRest_pattern(self)




    def rest_pattern(self):

        localctx = CSharpParser.Rest_patternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 330, self.RULE_rest_pattern)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2299
            self.match(CSharpParser.OP_RANGE)
            self.state = 2301
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,255,self._ctx)
            if la_ == 1:
                self.state = 2300
                self.type_()


            self.state = 2304
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,256,self._ctx)
            if la_ == 1:
                self.state = 2303
                self.expression()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class List_patternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_BRACKET(self):
            return self.getToken(CSharpParser.OPEN_BRACKET, 0)

        def pattern_items(self):
            return self.getTypedRuleContext(CSharpParser.Pattern_itemsContext,0)


        def CLOSE_BRACKET(self):
            return self.getToken(CSharpParser.CLOSE_BRACKET, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_list_pattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterList_pattern" ):
                listener.enterList_pattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitList_pattern" ):
                listener.exitList_pattern(self)




    def list_pattern(self):

        localctx = CSharpParser.List_patternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 332, self.RULE_list_pattern)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2306
            self.match(CSharpParser.OPEN_BRACKET)
            self.state = 2307
            self.pattern_items()
            self.state = 2308
            self.match(CSharpParser.CLOSE_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pattern_itemsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pattern(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.PatternContext)
            else:
                return self.getTypedRuleContext(CSharpParser.PatternContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.COMMA)
            else:
                return self.getToken(CSharpParser.COMMA, i)

        def getRuleIndex(self):
            return CSharpParser.RULE_pattern_items

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPattern_items" ):
                listener.enterPattern_items(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPattern_items" ):
                listener.exitPattern_items(self)




    def pattern_items(self):

        localctx = CSharpParser.Pattern_itemsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 334, self.RULE_pattern_items)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2310
            self.pattern()
            self.state = 2315
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,257,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2311
                    self.match(CSharpParser.COMMA)
                    self.state = 2312
                    self.pattern() 
                self.state = 2317
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,257,self._ctx)

            self.state = 2319
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==143:
                self.state = 2318
                self.match(CSharpParser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Is_patternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def type_(self):
            return self.getTypedRuleContext(CSharpParser.Type_Context,0)


        def simple_designation(self):
            return self.getTypedRuleContext(CSharpParser.Simple_designationContext,0)


        def property_pattern(self):
            return self.getTypedRuleContext(CSharpParser.Property_patternContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_is_pattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIs_pattern" ):
                listener.enterIs_pattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIs_pattern" ):
                listener.exitIs_pattern(self)




    def is_pattern(self):

        localctx = CSharpParser.Is_patternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 336, self.RULE_is_pattern)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2322
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,259,self._ctx)
            if la_ == 1:
                self.state = 2321
                self.type_()


            self.state = 2325
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,260,self._ctx)
            if la_ == 1:
                self.state = 2324
                self.simple_designation()


            self.state = 2328
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==136:
                self.state = 2327
                self.property_pattern()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Property_patternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_BRACE(self):
            return self.getToken(CSharpParser.OPEN_BRACE, 0)

        def property_pattern_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Property_pattern_clauseContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Property_pattern_clauseContext,i)


        def CLOSE_BRACE(self):
            return self.getToken(CSharpParser.CLOSE_BRACE, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.COMMA)
            else:
                return self.getToken(CSharpParser.COMMA, i)

        def getRuleIndex(self):
            return CSharpParser.RULE_property_pattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProperty_pattern" ):
                listener.enterProperty_pattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProperty_pattern" ):
                listener.exitProperty_pattern(self)




    def property_pattern(self):

        localctx = CSharpParser.Property_patternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 338, self.RULE_property_pattern)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2330
            self.match(CSharpParser.OPEN_BRACE)
            self.state = 2331
            self.property_pattern_clause()
            self.state = 2336
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==143:
                self.state = 2332
                self.match(CSharpParser.COMMA)
                self.state = 2333
                self.property_pattern_clause()
                self.state = 2338
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2339
            self.match(CSharpParser.CLOSE_BRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Property_pattern_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(CSharpParser.IdentifierContext,0)


        def COLON(self):
            return self.getToken(CSharpParser.COLON, 0)

        def pattern(self):
            return self.getTypedRuleContext(CSharpParser.PatternContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_property_pattern_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProperty_pattern_clause" ):
                listener.enterProperty_pattern_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProperty_pattern_clause" ):
                listener.exitProperty_pattern_clause(self)




    def property_pattern_clause(self):

        localctx = CSharpParser.Property_pattern_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 340, self.RULE_property_pattern_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2341
            self.identifier()
            self.state = 2342
            self.match(CSharpParser.COLON)
            self.state = 2343
            self.pattern()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Relational_patternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LT(self):
            return self.getToken(CSharpParser.LT, 0)

        def expression(self):
            return self.getTypedRuleContext(CSharpParser.ExpressionContext,0)


        def OP_LE(self):
            return self.getToken(CSharpParser.OP_LE, 0)

        def GT(self):
            return self.getToken(CSharpParser.GT, 0)

        def OP_GE(self):
            return self.getToken(CSharpParser.OP_GE, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_relational_pattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRelational_pattern" ):
                listener.enterRelational_pattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRelational_pattern" ):
                listener.exitRelational_pattern(self)




    def relational_pattern(self):

        localctx = CSharpParser.Relational_patternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 342, self.RULE_relational_pattern)
        try:
            self.state = 2353
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [157]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2345
                self.match(CSharpParser.LT)
                self.state = 2346
                self.expression()
                pass
            elif token in [169]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2347
                self.match(CSharpParser.OP_LE)
                self.state = 2348
                self.expression()
                pass
            elif token in [158]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2349
                self.match(CSharpParser.GT)
                self.state = 2350
                self.expression()
                pass
            elif token in [170]:
                self.enterOuterAlt(localctx, 4)
                self.state = 2351
                self.match(CSharpParser.OP_GE)
                self.state = 2352
                self.expression()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class And_patternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def relational_pattern(self):
            return self.getTypedRuleContext(CSharpParser.Relational_patternContext,0)


        def AND(self):
            return self.getToken(CSharpParser.AND, 0)

        def pattern(self):
            return self.getTypedRuleContext(CSharpParser.PatternContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_and_pattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnd_pattern" ):
                listener.enterAnd_pattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnd_pattern" ):
                listener.exitAnd_pattern(self)




    def and_pattern(self):

        localctx = CSharpParser.And_patternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 344, self.RULE_and_pattern)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2355
            self.relational_pattern()
            self.state = 2356
            self.match(CSharpParser.AND)
            self.state = 2357
            self.pattern()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Or_patternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(CSharpParser.ExpressionContext,0)


        def OR(self):
            return self.getToken(CSharpParser.OR, 0)

        def pattern(self):
            return self.getTypedRuleContext(CSharpParser.PatternContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_or_pattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOr_pattern" ):
                listener.enterOr_pattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOr_pattern" ):
                listener.exitOr_pattern(self)




    def or_pattern(self):

        localctx = CSharpParser.Or_patternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 346, self.RULE_or_pattern)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2359
            self.expression()
            self.state = 2360
            self.match(CSharpParser.OR)
            self.state = 2361
            self.pattern()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Not_patternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NOT(self):
            return self.getToken(CSharpParser.NOT, 0)

        def pattern(self):
            return self.getTypedRuleContext(CSharpParser.PatternContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_not_pattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNot_pattern" ):
                listener.enterNot_pattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNot_pattern" ):
                listener.exitNot_pattern(self)




    def not_pattern(self):

        localctx = CSharpParser.Not_patternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 348, self.RULE_not_pattern)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2363
            self.match(CSharpParser.NOT)
            self.state = 2364
            self.pattern()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Declaration_patternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def type_(self):
            return self.getTypedRuleContext(CSharpParser.Type_Context,0)


        def simple_designation(self):
            return self.getTypedRuleContext(CSharpParser.Simple_designationContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_declaration_pattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclaration_pattern" ):
                listener.enterDeclaration_pattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclaration_pattern" ):
                listener.exitDeclaration_pattern(self)




    def declaration_pattern(self):

        localctx = CSharpParser.Declaration_patternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 350, self.RULE_declaration_pattern)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2366
            self.type_()
            self.state = 2367
            self.simple_designation()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Simple_designationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def single_variable_designation(self):
            return self.getTypedRuleContext(CSharpParser.Single_variable_designationContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_simple_designation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimple_designation" ):
                listener.enterSimple_designation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimple_designation" ):
                listener.exitSimple_designation(self)




    def simple_designation(self):

        localctx = CSharpParser.Simple_designationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 352, self.RULE_simple_designation)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2369
            self.single_variable_designation()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Single_variable_designationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(CSharpParser.IdentifierContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_single_variable_designation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSingle_variable_designation" ):
                listener.enterSingle_variable_designation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSingle_variable_designation" ):
                listener.exitSingle_variable_designation(self)




    def single_variable_designation(self):

        localctx = CSharpParser.Single_variable_designationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 354, self.RULE_single_variable_designation)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2371
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Constant_patternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def constant_expression(self):
            return self.getTypedRuleContext(CSharpParser.Constant_expressionContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_constant_pattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstant_pattern" ):
                listener.enterConstant_pattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstant_pattern" ):
                listener.exitConstant_pattern(self)




    def constant_pattern(self):

        localctx = CSharpParser.Constant_patternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 356, self.RULE_constant_pattern)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2373
            self.constant_expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Var_patternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VAR(self):
            return self.getToken(CSharpParser.VAR, 0)

        def designation(self):
            return self.getTypedRuleContext(CSharpParser.DesignationContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_var_pattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVar_pattern" ):
                listener.enterVar_pattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVar_pattern" ):
                listener.exitVar_pattern(self)




    def var_pattern(self):

        localctx = CSharpParser.Var_patternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 358, self.RULE_var_pattern)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2375
            self.match(CSharpParser.VAR)
            self.state = 2376
            self.designation()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DesignationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simple_designation(self):
            return self.getTypedRuleContext(CSharpParser.Simple_designationContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_designation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDesignation" ):
                listener.enterDesignation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDesignation" ):
                listener.exitDesignation(self)




    def designation(self):

        localctx = CSharpParser.DesignationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 360, self.RULE_designation)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2378
            self.simple_designation()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Module_initializer_declarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def attributes(self):
            return self.getTypedRuleContext(CSharpParser.AttributesContext,0)


        def STATIC(self):
            return self.getToken(CSharpParser.STATIC, 0)

        def VOID(self):
            return self.getToken(CSharpParser.VOID, 0)

        def identifier(self):
            return self.getTypedRuleContext(CSharpParser.IdentifierContext,0)


        def OPEN_PARENS(self):
            return self.getToken(CSharpParser.OPEN_PARENS, 0)

        def CLOSE_PARENS(self):
            return self.getToken(CSharpParser.CLOSE_PARENS, 0)

        def method_body(self):
            return self.getTypedRuleContext(CSharpParser.Method_bodyContext,0)


        def INTERNAL(self):
            return self.getToken(CSharpParser.INTERNAL, 0)

        def PUBLIC(self):
            return self.getToken(CSharpParser.PUBLIC, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_module_initializer_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModule_initializer_declaration" ):
                listener.enterModule_initializer_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModule_initializer_declaration" ):
                listener.exitModule_initializer_declaration(self)




    def module_initializer_declaration(self):

        localctx = CSharpParser.Module_initializer_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 362, self.RULE_module_initializer_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2380
            self.attributes()
            self.state = 2382
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==60:
                self.state = 2381
                self.match(CSharpParser.INTERNAL)


            self.state = 2385
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==84:
                self.state = 2384
                self.match(CSharpParser.PUBLIC)


            self.state = 2387
            self.match(CSharpParser.STATIC)
            self.state = 2388
            self.match(CSharpParser.VOID)
            self.state = 2389
            self.identifier()
            self.state = 2390
            self.match(CSharpParser.OPEN_PARENS)
            self.state = 2391
            self.match(CSharpParser.CLOSE_PARENS)
            self.state = 2392
            self.method_body()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Secondary_constraintsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def namespace_or_type_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Namespace_or_type_nameContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Namespace_or_type_nameContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.COMMA)
            else:
                return self.getToken(CSharpParser.COMMA, i)

        def getRuleIndex(self):
            return CSharpParser.RULE_secondary_constraints

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSecondary_constraints" ):
                listener.enterSecondary_constraints(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSecondary_constraints" ):
                listener.exitSecondary_constraints(self)




    def secondary_constraints(self):

        localctx = CSharpParser.Secondary_constraintsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 364, self.RULE_secondary_constraints)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2394
            self.namespace_or_type_name()
            self.state = 2399
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,266,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2395
                    self.match(CSharpParser.COMMA)
                    self.state = 2396
                    self.namespace_or_type_name() 
                self.state = 2401
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,266,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Constructor_constraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NEW(self):
            return self.getToken(CSharpParser.NEW, 0)

        def OPEN_PARENS(self):
            return self.getToken(CSharpParser.OPEN_PARENS, 0)

        def CLOSE_PARENS(self):
            return self.getToken(CSharpParser.CLOSE_PARENS, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_constructor_constraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstructor_constraint" ):
                listener.enterConstructor_constraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstructor_constraint" ):
                listener.exitConstructor_constraint(self)




    def constructor_constraint(self):

        localctx = CSharpParser.Constructor_constraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 366, self.RULE_constructor_constraint)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2402
            self.match(CSharpParser.NEW)
            self.state = 2403
            self.match(CSharpParser.OPEN_PARENS)
            self.state = 2404
            self.match(CSharpParser.CLOSE_PARENS)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Class_bodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_BRACE(self):
            return self.getToken(CSharpParser.OPEN_BRACE, 0)

        def CLOSE_BRACE(self):
            return self.getToken(CSharpParser.CLOSE_BRACE, 0)

        def class_member_declarations(self):
            return self.getTypedRuleContext(CSharpParser.Class_member_declarationsContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_class_body

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClass_body" ):
                listener.enterClass_body(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClass_body" ):
                listener.exitClass_body(self)




    def class_body(self):

        localctx = CSharpParser.Class_bodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 368, self.RULE_class_body)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2406
            self.match(CSharpParser.OPEN_BRACE)
            self.state = 2408
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 6722968088686081536) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 1656717794697193051) != 0) or ((((_la - 138)) & ~0x3f) == 0 and ((1 << (_la - 138)) & 131077) != 0):
                self.state = 2407
                self.class_member_declarations()


            self.state = 2410
            self.match(CSharpParser.CLOSE_BRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Class_member_declarationsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def class_member_declaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Class_member_declarationContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Class_member_declarationContext,i)


        def getRuleIndex(self):
            return CSharpParser.RULE_class_member_declarations

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClass_member_declarations" ):
                listener.enterClass_member_declarations(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClass_member_declarations" ):
                listener.exitClass_member_declarations(self)




    def class_member_declarations(self):

        localctx = CSharpParser.Class_member_declarationsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 370, self.RULE_class_member_declarations)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2413 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 2412
                self.class_member_declaration()
                self.state = 2415 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & 6722968088686081536) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 1656717794697193051) != 0) or ((((_la - 138)) & ~0x3f) == 0 and ((1 << (_la - 138)) & 131077) != 0)):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Class_member_declarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def common_member_declaration(self):
            return self.getTypedRuleContext(CSharpParser.Common_member_declarationContext,0)


        def destructor_definition(self):
            return self.getTypedRuleContext(CSharpParser.Destructor_definitionContext,0)


        def attributes(self):
            return self.getTypedRuleContext(CSharpParser.AttributesContext,0)


        def all_member_modifiers(self):
            return self.getTypedRuleContext(CSharpParser.All_member_modifiersContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_class_member_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClass_member_declaration" ):
                listener.enterClass_member_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClass_member_declaration" ):
                listener.exitClass_member_declaration(self)




    def class_member_declaration(self):

        localctx = CSharpParser.Class_member_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 372, self.RULE_class_member_declaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2418
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,269,self._ctx)
            if la_ == 1:
                self.state = 2417
                self.attributes()


            self.state = 2421
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,270,self._ctx)
            if la_ == 1:
                self.state = 2420
                self.all_member_modifiers()


            self.state = 2425
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [9, 10, 12, 13, 15, 16, 17, 19, 21, 22, 25, 27, 28, 30, 32, 33, 35, 36, 38, 39, 40, 41, 42, 46, 47, 50, 51, 54, 56, 58, 59, 60, 62, 64, 65, 67, 68, 70, 73, 74, 77, 79, 81, 82, 83, 84, 85, 86, 87, 88, 90, 91, 92, 93, 94, 97, 98, 99, 107, 108, 110, 111, 112, 114, 115, 116, 118, 119, 121, 122, 124, 138, 140]:
                self.state = 2423
                self.common_member_declaration()
                pass
            elif token in [155]:
                self.state = 2424
                self.destructor_definition()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class All_member_modifiersContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def all_member_modifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.All_member_modifierContext)
            else:
                return self.getTypedRuleContext(CSharpParser.All_member_modifierContext,i)


        def getRuleIndex(self):
            return CSharpParser.RULE_all_member_modifiers

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAll_member_modifiers" ):
                listener.enterAll_member_modifiers(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAll_member_modifiers" ):
                listener.exitAll_member_modifiers(self)




    def all_member_modifiers(self):

        localctx = CSharpParser.All_member_modifiersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 374, self.RULE_all_member_modifiers)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2428 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 2427
                    self.all_member_modifier()

                else:
                    raise NoViableAltException(self)
                self.state = 2430 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,272,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class All_member_modifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NEW(self):
            return self.getToken(CSharpParser.NEW, 0)

        def PUBLIC(self):
            return self.getToken(CSharpParser.PUBLIC, 0)

        def PROTECTED(self):
            return self.getToken(CSharpParser.PROTECTED, 0)

        def INTERNAL(self):
            return self.getToken(CSharpParser.INTERNAL, 0)

        def PRIVATE(self):
            return self.getToken(CSharpParser.PRIVATE, 0)

        def READONLY(self):
            return self.getToken(CSharpParser.READONLY, 0)

        def VOLATILE(self):
            return self.getToken(CSharpParser.VOLATILE, 0)

        def VIRTUAL(self):
            return self.getToken(CSharpParser.VIRTUAL, 0)

        def SEALED(self):
            return self.getToken(CSharpParser.SEALED, 0)

        def OVERRIDE(self):
            return self.getToken(CSharpParser.OVERRIDE, 0)

        def ABSTRACT(self):
            return self.getToken(CSharpParser.ABSTRACT, 0)

        def STATIC(self):
            return self.getToken(CSharpParser.STATIC, 0)

        def UNSAFE(self):
            return self.getToken(CSharpParser.UNSAFE, 0)

        def EXTERN(self):
            return self.getToken(CSharpParser.EXTERN, 0)

        def PARTIAL(self):
            return self.getToken(CSharpParser.PARTIAL, 0)

        def ASYNC(self):
            return self.getToken(CSharpParser.ASYNC, 0)

        def FILE(self):
            return self.getToken(CSharpParser.FILE, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_all_member_modifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAll_member_modifier" ):
                listener.enterAll_member_modifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAll_member_modifier" ):
                listener.exitAll_member_modifier(self)




    def all_member_modifier(self):

        localctx = CSharpParser.All_member_modifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 376, self.RULE_all_member_modifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2432
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 1153066640141779456) != 0) or ((((_la - 70)) & ~0x3f) == 0 and ((1 << (_la - 70)) & 178121020078593) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Common_member_declarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def constant_declaration(self):
            return self.getTypedRuleContext(CSharpParser.Constant_declarationContext,0)


        def typed_member_declaration(self):
            return self.getTypedRuleContext(CSharpParser.Typed_member_declarationContext,0)


        def event_declaration(self):
            return self.getTypedRuleContext(CSharpParser.Event_declarationContext,0)


        def conversion_operator_declarator(self):
            return self.getTypedRuleContext(CSharpParser.Conversion_operator_declaratorContext,0)


        def body(self):
            return self.getTypedRuleContext(CSharpParser.BodyContext,0)


        def right_arrow(self):
            return self.getTypedRuleContext(CSharpParser.Right_arrowContext,0)


        def throwable_expression(self):
            return self.getTypedRuleContext(CSharpParser.Throwable_expressionContext,0)


        def SEMICOLON(self):
            return self.getToken(CSharpParser.SEMICOLON, 0)

        def constructor_declaration(self):
            return self.getTypedRuleContext(CSharpParser.Constructor_declarationContext,0)


        def method_declaration(self):
            return self.getTypedRuleContext(CSharpParser.Method_declarationContext,0)


        def class_definition(self):
            return self.getTypedRuleContext(CSharpParser.Class_definitionContext,0)


        def struct_definition(self):
            return self.getTypedRuleContext(CSharpParser.Struct_definitionContext,0)


        def interface_definition(self):
            return self.getTypedRuleContext(CSharpParser.Interface_definitionContext,0)


        def enum_definition(self):
            return self.getTypedRuleContext(CSharpParser.Enum_definitionContext,0)


        def delegate_definition(self):
            return self.getTypedRuleContext(CSharpParser.Delegate_definitionContext,0)


        def record_definition(self):
            return self.getTypedRuleContext(CSharpParser.Record_definitionContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_common_member_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCommon_member_declaration" ):
                listener.enterCommon_member_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCommon_member_declaration" ):
                listener.exitCommon_member_declaration(self)




    def common_member_declaration(self):

        localctx = CSharpParser.Common_member_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 378, self.RULE_common_member_declaration)
        try:
            self.state = 2453
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,274,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2434
                self.constant_declaration()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2435
                self.typed_member_declaration()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2436
                self.event_declaration()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2437
                self.conversion_operator_declarator()
                self.state = 2443
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,273,self._ctx)
                if la_ == 1:
                    self.state = 2438
                    self.body()
                    pass

                elif la_ == 2:
                    self.state = 2439
                    self.right_arrow()
                    self.state = 2440
                    self.throwable_expression()
                    self.state = 2441
                    self.match(CSharpParser.SEMICOLON)
                    pass


                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 2445
                self.constructor_declaration()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 2446
                self.method_declaration()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 2447
                self.class_definition()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 2448
                self.struct_definition()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 2449
                self.interface_definition()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 2450
                self.enum_definition()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 2451
                self.delegate_definition()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 2452
                self.record_definition()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Typed_member_declarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def type_(self):
            return self.getTypedRuleContext(CSharpParser.Type_Context,0)


        def namespace_or_type_name(self):
            return self.getTypedRuleContext(CSharpParser.Namespace_or_type_nameContext,0)


        def DOT(self):
            return self.getToken(CSharpParser.DOT, 0)

        def indexer_declaration(self):
            return self.getTypedRuleContext(CSharpParser.Indexer_declarationContext,0)


        def method_declaration(self):
            return self.getTypedRuleContext(CSharpParser.Method_declarationContext,0)


        def property_declaration(self):
            return self.getTypedRuleContext(CSharpParser.Property_declarationContext,0)


        def operator_declaration(self):
            return self.getTypedRuleContext(CSharpParser.Operator_declarationContext,0)


        def field_declaration(self):
            return self.getTypedRuleContext(CSharpParser.Field_declarationContext,0)


        def REF(self):
            return self.getToken(CSharpParser.REF, 0)

        def READONLY(self):
            return self.getToken(CSharpParser.READONLY, 0)

        def REQUIRED(self):
            return self.getToken(CSharpParser.REQUIRED, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_typed_member_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTyped_member_declaration" ):
                listener.enterTyped_member_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTyped_member_declaration" ):
                listener.exitTyped_member_declaration(self)




    def typed_member_declaration(self):

        localctx = CSharpParser.Typed_member_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 380, self.RULE_typed_member_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2460
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,275,self._ctx)
            if la_ == 1:
                self.state = 2455
                self.match(CSharpParser.REF)

            elif la_ == 2:
                self.state = 2456
                self.match(CSharpParser.READONLY)
                self.state = 2457
                self.match(CSharpParser.REF)

            elif la_ == 3:
                self.state = 2458
                self.match(CSharpParser.REF)
                self.state = 2459
                self.match(CSharpParser.READONLY)


            self.state = 2463
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==86:
                self.state = 2462
                self.match(CSharpParser.REQUIRED)


            self.state = 2465
            self.type_()
            self.state = 2475
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,277,self._ctx)
            if la_ == 1:
                self.state = 2466
                self.namespace_or_type_name()
                self.state = 2467
                self.match(CSharpParser.DOT)
                self.state = 2468
                self.indexer_declaration()
                pass

            elif la_ == 2:
                self.state = 2470
                self.method_declaration()
                pass

            elif la_ == 3:
                self.state = 2471
                self.property_declaration()
                pass

            elif la_ == 4:
                self.state = 2472
                self.indexer_declaration()
                pass

            elif la_ == 5:
                self.state = 2473
                self.operator_declaration()
                pass

            elif la_ == 6:
                self.state = 2474
                self.field_declaration()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Constant_declaratorsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def constant_declarator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Constant_declaratorContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Constant_declaratorContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.COMMA)
            else:
                return self.getToken(CSharpParser.COMMA, i)

        def getRuleIndex(self):
            return CSharpParser.RULE_constant_declarators

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstant_declarators" ):
                listener.enterConstant_declarators(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstant_declarators" ):
                listener.exitConstant_declarators(self)




    def constant_declarators(self):

        localctx = CSharpParser.Constant_declaratorsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 382, self.RULE_constant_declarators)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2477
            self.constant_declarator()
            self.state = 2482
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==143:
                self.state = 2478
                self.match(CSharpParser.COMMA)
                self.state = 2479
                self.constant_declarator()
                self.state = 2484
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Constant_declaratorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(CSharpParser.IdentifierContext,0)


        def ASSIGNMENT(self):
            return self.getToken(CSharpParser.ASSIGNMENT, 0)

        def expression(self):
            return self.getTypedRuleContext(CSharpParser.ExpressionContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_constant_declarator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstant_declarator" ):
                listener.enterConstant_declarator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstant_declarator" ):
                listener.exitConstant_declarator(self)




    def constant_declarator(self):

        localctx = CSharpParser.Constant_declaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 384, self.RULE_constant_declarator)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2485
            self.identifier()
            self.state = 2486
            self.match(CSharpParser.ASSIGNMENT)
            self.state = 2487
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Variable_declaratorsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def variable_declarator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Variable_declaratorContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Variable_declaratorContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.COMMA)
            else:
                return self.getToken(CSharpParser.COMMA, i)

        def getRuleIndex(self):
            return CSharpParser.RULE_variable_declarators

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariable_declarators" ):
                listener.enterVariable_declarators(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariable_declarators" ):
                listener.exitVariable_declarators(self)




    def variable_declarators(self):

        localctx = CSharpParser.Variable_declaratorsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 386, self.RULE_variable_declarators)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2489
            self.variable_declarator()
            self.state = 2494
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==143:
                self.state = 2490
                self.match(CSharpParser.COMMA)
                self.state = 2491
                self.variable_declarator()
                self.state = 2496
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Variable_declaratorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(CSharpParser.IdentifierContext,0)


        def ASSIGNMENT(self):
            return self.getToken(CSharpParser.ASSIGNMENT, 0)

        def variable_initializer(self):
            return self.getTypedRuleContext(CSharpParser.Variable_initializerContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_variable_declarator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariable_declarator" ):
                listener.enterVariable_declarator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariable_declarator" ):
                listener.exitVariable_declarator(self)




    def variable_declarator(self):

        localctx = CSharpParser.Variable_declaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 388, self.RULE_variable_declarator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2497
            self.identifier()
            self.state = 2500
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==156:
                self.state = 2498
                self.match(CSharpParser.ASSIGNMENT)
                self.state = 2499
                self.variable_initializer()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Variable_initializerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(CSharpParser.ExpressionContext,0)


        def array_initializer(self):
            return self.getTypedRuleContext(CSharpParser.Array_initializerContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_variable_initializer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariable_initializer" ):
                listener.enterVariable_initializer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariable_initializer" ):
                listener.exitVariable_initializer(self)




    def variable_initializer(self):

        localctx = CSharpParser.Variable_initializerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 390, self.RULE_variable_initializer)
        try:
            self.state = 2504
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [10, 12, 13, 15, 16, 17, 18, 19, 21, 22, 25, 26, 30, 31, 32, 33, 35, 36, 39, 43, 46, 50, 51, 54, 58, 62, 64, 65, 67, 68, 70, 72, 73, 74, 77, 81, 87, 88, 90, 92, 93, 94, 95, 96, 97, 98, 101, 102, 103, 105, 107, 108, 109, 110, 112, 114, 118, 119, 121, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 138, 140, 146, 147, 148, 151, 153, 154, 155, 162, 163, 182]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2502
                self.expression()
                pass
            elif token in [136]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2503
                self.array_initializer()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Return_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def type_(self):
            return self.getTypedRuleContext(CSharpParser.Type_Context,0)


        def VOID(self):
            return self.getToken(CSharpParser.VOID, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_return_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReturn_type" ):
                listener.enterReturn_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReturn_type" ):
                listener.exitReturn_type(self)




    def return_type(self):

        localctx = CSharpParser.Return_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 392, self.RULE_return_type)
        try:
            self.state = 2508
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,282,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2506
                self.type_()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2507
                self.match(CSharpParser.VOID)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Member_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def namespace_or_type_name(self):
            return self.getTypedRuleContext(CSharpParser.Namespace_or_type_nameContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_member_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMember_name" ):
                listener.enterMember_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMember_name" ):
                listener.exitMember_name(self)




    def member_name(self):

        localctx = CSharpParser.Member_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 394, self.RULE_member_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2510
            self.namespace_or_type_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Method_bodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def block(self):
            return self.getTypedRuleContext(CSharpParser.BlockContext,0)


        def SEMICOLON(self):
            return self.getToken(CSharpParser.SEMICOLON, 0)

        def right_arrow(self):
            return self.getTypedRuleContext(CSharpParser.Right_arrowContext,0)


        def expression(self):
            return self.getTypedRuleContext(CSharpParser.ExpressionContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_method_body

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMethod_body" ):
                listener.enterMethod_body(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMethod_body" ):
                listener.exitMethod_body(self)




    def method_body(self):

        localctx = CSharpParser.Method_bodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 396, self.RULE_method_body)
        try:
            self.state = 2518
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [136]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2512
                self.block()
                pass
            elif token in [145]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2513
                self.match(CSharpParser.SEMICOLON)
                pass
            elif token in [156]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2514
                self.right_arrow()
                self.state = 2515
                self.expression()
                self.state = 2516
                self.match(CSharpParser.SEMICOLON)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Formal_parameter_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def parameter_array(self):
            return self.getTypedRuleContext(CSharpParser.Parameter_arrayContext,0)


        def fixed_parameters(self):
            return self.getTypedRuleContext(CSharpParser.Fixed_parametersContext,0)


        def COMMA(self):
            return self.getToken(CSharpParser.COMMA, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_formal_parameter_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFormal_parameter_list" ):
                listener.enterFormal_parameter_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFormal_parameter_list" ):
                listener.exitFormal_parameter_list(self)




    def formal_parameter_list(self):

        localctx = CSharpParser.Formal_parameter_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 398, self.RULE_formal_parameter_list)
        self._la = 0 # Token type
        try:
            self.state = 2526
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,285,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2520
                self.parameter_array()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2521
                self.fixed_parameters()
                self.state = 2524
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==143:
                    self.state = 2522
                    self.match(CSharpParser.COMMA)
                    self.state = 2523
                    self.parameter_array()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Fixed_parametersContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fixed_parameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Fixed_parameterContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Fixed_parameterContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.COMMA)
            else:
                return self.getToken(CSharpParser.COMMA, i)

        def getRuleIndex(self):
            return CSharpParser.RULE_fixed_parameters

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFixed_parameters" ):
                listener.enterFixed_parameters(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFixed_parameters" ):
                listener.exitFixed_parameters(self)




    def fixed_parameters(self):

        localctx = CSharpParser.Fixed_parametersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 400, self.RULE_fixed_parameters)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2528
            self.fixed_parameter()
            self.state = 2533
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,286,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2529
                    self.match(CSharpParser.COMMA)
                    self.state = 2530
                    self.fixed_parameter() 
                self.state = 2535
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,286,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Fixed_parameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def arg_declaration(self):
            return self.getTypedRuleContext(CSharpParser.Arg_declarationContext,0)


        def attributes(self):
            return self.getTypedRuleContext(CSharpParser.AttributesContext,0)


        def parameter_modifier(self):
            return self.getTypedRuleContext(CSharpParser.Parameter_modifierContext,0)


        def ARGLIST(self):
            return self.getToken(CSharpParser.ARGLIST, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_fixed_parameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFixed_parameter" ):
                listener.enterFixed_parameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFixed_parameter" ):
                listener.exitFixed_parameter(self)




    def fixed_parameter(self):

        localctx = CSharpParser.Fixed_parameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 402, self.RULE_fixed_parameter)
        self._la = 0 # Token type
        try:
            self.state = 2544
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,289,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2537
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==138:
                    self.state = 2536
                    self.attributes()


                self.state = 2540
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,288,self._ctx)
                if la_ == 1:
                    self.state = 2539
                    self.parameter_modifier()


                self.state = 2542
                self.arg_declaration()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2543
                self.match(CSharpParser.ARGLIST)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Parameter_modifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REF(self):
            return self.getToken(CSharpParser.REF, 0)

        def OUT(self):
            return self.getToken(CSharpParser.OUT, 0)

        def IN(self):
            return self.getToken(CSharpParser.IN, 0)

        def READONLY(self):
            return self.getToken(CSharpParser.READONLY, 0)

        def THIS(self):
            return self.getToken(CSharpParser.THIS, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_parameter_modifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParameter_modifier" ):
                listener.enterParameter_modifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParameter_modifier" ):
                listener.exitParameter_modifier(self)




    def parameter_modifier(self):

        localctx = CSharpParser.Parameter_modifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 404, self.RULE_parameter_modifier)
        try:
            self.state = 2556
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,290,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2546
                self.match(CSharpParser.REF)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2547
                self.match(CSharpParser.OUT)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2548
                self.match(CSharpParser.IN)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2549
                self.match(CSharpParser.REF)
                self.state = 2550
                self.match(CSharpParser.READONLY)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 2551
                self.match(CSharpParser.REF)
                self.state = 2552
                self.match(CSharpParser.THIS)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 2553
                self.match(CSharpParser.IN)
                self.state = 2554
                self.match(CSharpParser.THIS)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 2555
                self.match(CSharpParser.THIS)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Parameter_arrayContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PARAMS(self):
            return self.getToken(CSharpParser.PARAMS, 0)

        def array_type(self):
            return self.getTypedRuleContext(CSharpParser.Array_typeContext,0)


        def identifier(self):
            return self.getTypedRuleContext(CSharpParser.IdentifierContext,0)


        def attributes(self):
            return self.getTypedRuleContext(CSharpParser.AttributesContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_parameter_array

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParameter_array" ):
                listener.enterParameter_array(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParameter_array" ):
                listener.exitParameter_array(self)




    def parameter_array(self):

        localctx = CSharpParser.Parameter_arrayContext(self, self._ctx, self.state)
        self.enterRule(localctx, 406, self.RULE_parameter_array)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2559
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==138:
                self.state = 2558
                self.attributes()


            self.state = 2561
            self.match(CSharpParser.PARAMS)
            self.state = 2562
            self.array_type()
            self.state = 2563
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Accessor_declarationsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.attrs = None # AttributesContext
            self.mods = None # Accessor_modifierContext

        def GET(self):
            return self.getToken(CSharpParser.GET, 0)

        def accessor_body(self):
            return self.getTypedRuleContext(CSharpParser.Accessor_bodyContext,0)


        def SET(self):
            return self.getToken(CSharpParser.SET, 0)

        def INIT(self):
            return self.getToken(CSharpParser.INIT, 0)

        def attributes(self):
            return self.getTypedRuleContext(CSharpParser.AttributesContext,0)


        def accessor_modifier(self):
            return self.getTypedRuleContext(CSharpParser.Accessor_modifierContext,0)


        def set_accessor_declaration(self):
            return self.getTypedRuleContext(CSharpParser.Set_accessor_declarationContext,0)


        def get_accessor_declaration(self):
            return self.getTypedRuleContext(CSharpParser.Get_accessor_declarationContext,0)


        def init_accessor_declaration(self):
            return self.getTypedRuleContext(CSharpParser.Init_accessor_declarationContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_accessor_declarations

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAccessor_declarations" ):
                listener.enterAccessor_declarations(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAccessor_declarations" ):
                listener.exitAccessor_declarations(self)




    def accessor_declarations(self):

        localctx = CSharpParser.Accessor_declarationsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 408, self.RULE_accessor_declarations)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2566
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==138:
                self.state = 2565
                localctx.attrs = self.attributes()


            self.state = 2569
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 60)) & ~0x3f) == 0 and ((1 << (_la - 60)) & 113246209) != 0):
                self.state = 2568
                localctx.mods = self.accessor_modifier()


            self.state = 2591
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,298,self._ctx)
            if la_ == 1:
                self.state = 2571
                self.match(CSharpParser.GET)
                self.state = 2572
                self.accessor_body()
                self.state = 2574
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==60 or ((((_la - 82)) & ~0x3f) == 0 and ((1 << (_la - 82)) & 72057594037930011) != 0):
                    self.state = 2573
                    self.set_accessor_declaration()


                pass

            elif la_ == 2:
                self.state = 2576
                self.match(CSharpParser.SET)
                self.state = 2577
                self.accessor_body()
                self.state = 2579
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==51 or _la==60 or ((((_la - 82)) & ~0x3f) == 0 and ((1 << (_la - 82)) & 72057594037927963) != 0):
                    self.state = 2578
                    self.get_accessor_declaration()


                pass

            elif la_ == 3:
                self.state = 2581
                self.match(CSharpParser.GET)
                self.state = 2582
                self.accessor_body()
                self.state = 2584
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==61 or _la==138:
                    self.state = 2583
                    self.init_accessor_declaration()


                pass

            elif la_ == 4:
                self.state = 2586
                self.match(CSharpParser.INIT)
                self.state = 2587
                self.accessor_body()
                self.state = 2589
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==51 or _la==60 or ((((_la - 82)) & ~0x3f) == 0 and ((1 << (_la - 82)) & 72057594037927963) != 0):
                    self.state = 2588
                    self.get_accessor_declaration()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Init_accessor_declarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INIT(self):
            return self.getToken(CSharpParser.INIT, 0)

        def accessor_body(self):
            return self.getTypedRuleContext(CSharpParser.Accessor_bodyContext,0)


        def attributes(self):
            return self.getTypedRuleContext(CSharpParser.AttributesContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_init_accessor_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInit_accessor_declaration" ):
                listener.enterInit_accessor_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInit_accessor_declaration" ):
                listener.exitInit_accessor_declaration(self)




    def init_accessor_declaration(self):

        localctx = CSharpParser.Init_accessor_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 410, self.RULE_init_accessor_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2594
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==138:
                self.state = 2593
                self.attributes()


            self.state = 2596
            self.match(CSharpParser.INIT)
            self.state = 2597
            self.accessor_body()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Get_accessor_declarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GET(self):
            return self.getToken(CSharpParser.GET, 0)

        def accessor_body(self):
            return self.getTypedRuleContext(CSharpParser.Accessor_bodyContext,0)


        def attributes(self):
            return self.getTypedRuleContext(CSharpParser.AttributesContext,0)


        def accessor_modifier(self):
            return self.getTypedRuleContext(CSharpParser.Accessor_modifierContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_get_accessor_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGet_accessor_declaration" ):
                listener.enterGet_accessor_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGet_accessor_declaration" ):
                listener.exitGet_accessor_declaration(self)




    def get_accessor_declaration(self):

        localctx = CSharpParser.Get_accessor_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 412, self.RULE_get_accessor_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2600
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==138:
                self.state = 2599
                self.attributes()


            self.state = 2603
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 60)) & ~0x3f) == 0 and ((1 << (_la - 60)) & 113246209) != 0):
                self.state = 2602
                self.accessor_modifier()


            self.state = 2605
            self.match(CSharpParser.GET)
            self.state = 2606
            self.accessor_body()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Set_accessor_declarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SET(self):
            return self.getToken(CSharpParser.SET, 0)

        def accessor_body(self):
            return self.getTypedRuleContext(CSharpParser.Accessor_bodyContext,0)


        def attributes(self):
            return self.getTypedRuleContext(CSharpParser.AttributesContext,0)


        def accessor_modifier(self):
            return self.getTypedRuleContext(CSharpParser.Accessor_modifierContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_set_accessor_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSet_accessor_declaration" ):
                listener.enterSet_accessor_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSet_accessor_declaration" ):
                listener.exitSet_accessor_declaration(self)




    def set_accessor_declaration(self):

        localctx = CSharpParser.Set_accessor_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 414, self.RULE_set_accessor_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2609
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==138:
                self.state = 2608
                self.attributes()


            self.state = 2612
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 60)) & ~0x3f) == 0 and ((1 << (_la - 60)) & 113246209) != 0):
                self.state = 2611
                self.accessor_modifier()


            self.state = 2614
            self.match(CSharpParser.SET)
            self.state = 2615
            self.accessor_body()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Accessor_modifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PROTECTED(self):
            return self.getToken(CSharpParser.PROTECTED, 0)

        def INTERNAL(self):
            return self.getToken(CSharpParser.INTERNAL, 0)

        def PRIVATE(self):
            return self.getToken(CSharpParser.PRIVATE, 0)

        def READONLY(self):
            return self.getToken(CSharpParser.READONLY, 0)

        def REQUIRED(self):
            return self.getToken(CSharpParser.REQUIRED, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_accessor_modifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAccessor_modifier" ):
                listener.enterAccessor_modifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAccessor_modifier" ):
                listener.exitAccessor_modifier(self)




    def accessor_modifier(self):

        localctx = CSharpParser.Accessor_modifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 416, self.RULE_accessor_modifier)
        try:
            self.state = 2630
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,304,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2617
                self.match(CSharpParser.PROTECTED)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2618
                self.match(CSharpParser.INTERNAL)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2619
                self.match(CSharpParser.PRIVATE)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2620
                self.match(CSharpParser.PROTECTED)
                self.state = 2621
                self.match(CSharpParser.INTERNAL)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 2622
                self.match(CSharpParser.INTERNAL)
                self.state = 2623
                self.match(CSharpParser.PROTECTED)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 2624
                self.match(CSharpParser.PROTECTED)
                self.state = 2625
                self.match(CSharpParser.PRIVATE)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 2626
                self.match(CSharpParser.PRIVATE)
                self.state = 2627
                self.match(CSharpParser.PROTECTED)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 2628
                self.match(CSharpParser.READONLY)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 2629
                self.match(CSharpParser.REQUIRED)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Accessor_bodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def block(self):
            return self.getTypedRuleContext(CSharpParser.BlockContext,0)


        def right_arrow(self):
            return self.getTypedRuleContext(CSharpParser.Right_arrowContext,0)


        def expression(self):
            return self.getTypedRuleContext(CSharpParser.ExpressionContext,0)


        def SEMICOLON(self):
            return self.getToken(CSharpParser.SEMICOLON, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_accessor_body

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAccessor_body" ):
                listener.enterAccessor_body(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAccessor_body" ):
                listener.exitAccessor_body(self)




    def accessor_body(self):

        localctx = CSharpParser.Accessor_bodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 418, self.RULE_accessor_body)
        try:
            self.state = 2638
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [136]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2632
                self.block()
                pass
            elif token in [156]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2633
                self.right_arrow()
                self.state = 2634
                self.expression()
                self.state = 2635
                self.match(CSharpParser.SEMICOLON)
                pass
            elif token in [145]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2637
                self.match(CSharpParser.SEMICOLON)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Event_accessor_declarationsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ADD(self):
            return self.getToken(CSharpParser.ADD, 0)

        def block(self):
            return self.getTypedRuleContext(CSharpParser.BlockContext,0)


        def remove_accessor_declaration(self):
            return self.getTypedRuleContext(CSharpParser.Remove_accessor_declarationContext,0)


        def REMOVE(self):
            return self.getToken(CSharpParser.REMOVE, 0)

        def add_accessor_declaration(self):
            return self.getTypedRuleContext(CSharpParser.Add_accessor_declarationContext,0)


        def attributes(self):
            return self.getTypedRuleContext(CSharpParser.AttributesContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_event_accessor_declarations

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEvent_accessor_declarations" ):
                listener.enterEvent_accessor_declarations(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEvent_accessor_declarations" ):
                listener.exitEvent_accessor_declarations(self)




    def event_accessor_declarations(self):

        localctx = CSharpParser.Event_accessor_declarationsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 420, self.RULE_event_accessor_declarations)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2641
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==138:
                self.state = 2640
                self.attributes()


            self.state = 2651
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [10]:
                self.state = 2643
                self.match(CSharpParser.ADD)
                self.state = 2644
                self.block()
                self.state = 2645
                self.remove_accessor_declaration()
                pass
            elif token in [88]:
                self.state = 2647
                self.match(CSharpParser.REMOVE)
                self.state = 2648
                self.block()
                self.state = 2649
                self.add_accessor_declaration()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Add_accessor_declarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ADD(self):
            return self.getToken(CSharpParser.ADD, 0)

        def block(self):
            return self.getTypedRuleContext(CSharpParser.BlockContext,0)


        def attributes(self):
            return self.getTypedRuleContext(CSharpParser.AttributesContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_add_accessor_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAdd_accessor_declaration" ):
                listener.enterAdd_accessor_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAdd_accessor_declaration" ):
                listener.exitAdd_accessor_declaration(self)




    def add_accessor_declaration(self):

        localctx = CSharpParser.Add_accessor_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 422, self.RULE_add_accessor_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2654
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==138:
                self.state = 2653
                self.attributes()


            self.state = 2656
            self.match(CSharpParser.ADD)
            self.state = 2657
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Remove_accessor_declarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REMOVE(self):
            return self.getToken(CSharpParser.REMOVE, 0)

        def block(self):
            return self.getTypedRuleContext(CSharpParser.BlockContext,0)


        def attributes(self):
            return self.getTypedRuleContext(CSharpParser.AttributesContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_remove_accessor_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRemove_accessor_declaration" ):
                listener.enterRemove_accessor_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRemove_accessor_declaration" ):
                listener.exitRemove_accessor_declaration(self)




    def remove_accessor_declaration(self):

        localctx = CSharpParser.Remove_accessor_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 424, self.RULE_remove_accessor_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2660
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==138:
                self.state = 2659
                self.attributes()


            self.state = 2662
            self.match(CSharpParser.REMOVE)
            self.state = 2663
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Overloadable_operatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PLUS(self):
            return self.getToken(CSharpParser.PLUS, 0)

        def MINUS(self):
            return self.getToken(CSharpParser.MINUS, 0)

        def BANG(self):
            return self.getToken(CSharpParser.BANG, 0)

        def TILDE(self):
            return self.getToken(CSharpParser.TILDE, 0)

        def OP_INC(self):
            return self.getToken(CSharpParser.OP_INC, 0)

        def OP_DEC(self):
            return self.getToken(CSharpParser.OP_DEC, 0)

        def TRUE(self):
            return self.getToken(CSharpParser.TRUE, 0)

        def FALSE(self):
            return self.getToken(CSharpParser.FALSE, 0)

        def STAR(self):
            return self.getToken(CSharpParser.STAR, 0)

        def DIV(self):
            return self.getToken(CSharpParser.DIV, 0)

        def PERCENT(self):
            return self.getToken(CSharpParser.PERCENT, 0)

        def AMP(self):
            return self.getToken(CSharpParser.AMP, 0)

        def BITWISE_OR(self):
            return self.getToken(CSharpParser.BITWISE_OR, 0)

        def CARET(self):
            return self.getToken(CSharpParser.CARET, 0)

        def OP_LEFT_SHIFT(self):
            return self.getToken(CSharpParser.OP_LEFT_SHIFT, 0)

        def right_shift(self):
            return self.getTypedRuleContext(CSharpParser.Right_shiftContext,0)


        def OP_EQ(self):
            return self.getToken(CSharpParser.OP_EQ, 0)

        def OP_NE(self):
            return self.getToken(CSharpParser.OP_NE, 0)

        def GT(self):
            return self.getToken(CSharpParser.GT, 0)

        def LT(self):
            return self.getToken(CSharpParser.LT, 0)

        def OP_GE(self):
            return self.getToken(CSharpParser.OP_GE, 0)

        def OP_LE(self):
            return self.getToken(CSharpParser.OP_LE, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_overloadable_operator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOverloadable_operator" ):
                listener.enterOverloadable_operator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOverloadable_operator" ):
                listener.exitOverloadable_operator(self)




    def overloadable_operator(self):

        localctx = CSharpParser.Overloadable_operatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 426, self.RULE_overloadable_operator)
        try:
            self.state = 2687
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,310,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2665
                self.match(CSharpParser.PLUS)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2666
                self.match(CSharpParser.MINUS)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2667
                self.match(CSharpParser.BANG)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2668
                self.match(CSharpParser.TILDE)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 2669
                self.match(CSharpParser.OP_INC)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 2670
                self.match(CSharpParser.OP_DEC)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 2671
                self.match(CSharpParser.TRUE)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 2672
                self.match(CSharpParser.FALSE)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 2673
                self.match(CSharpParser.STAR)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 2674
                self.match(CSharpParser.DIV)
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 2675
                self.match(CSharpParser.PERCENT)
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 2676
                self.match(CSharpParser.AMP)
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 2677
                self.match(CSharpParser.BITWISE_OR)
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 2678
                self.match(CSharpParser.CARET)
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 2679
                self.match(CSharpParser.OP_LEFT_SHIFT)
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 2680
                self.right_shift()
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 2681
                self.match(CSharpParser.OP_EQ)
                pass

            elif la_ == 18:
                self.enterOuterAlt(localctx, 18)
                self.state = 2682
                self.match(CSharpParser.OP_NE)
                pass

            elif la_ == 19:
                self.enterOuterAlt(localctx, 19)
                self.state = 2683
                self.match(CSharpParser.GT)
                pass

            elif la_ == 20:
                self.enterOuterAlt(localctx, 20)
                self.state = 2684
                self.match(CSharpParser.LT)
                pass

            elif la_ == 21:
                self.enterOuterAlt(localctx, 21)
                self.state = 2685
                self.match(CSharpParser.OP_GE)
                pass

            elif la_ == 22:
                self.enterOuterAlt(localctx, 22)
                self.state = 2686
                self.match(CSharpParser.OP_LE)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Conversion_operator_declaratorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPERATOR(self):
            return self.getToken(CSharpParser.OPERATOR, 0)

        def type_(self):
            return self.getTypedRuleContext(CSharpParser.Type_Context,0)


        def OPEN_PARENS(self):
            return self.getToken(CSharpParser.OPEN_PARENS, 0)

        def arg_declaration(self):
            return self.getTypedRuleContext(CSharpParser.Arg_declarationContext,0)


        def CLOSE_PARENS(self):
            return self.getToken(CSharpParser.CLOSE_PARENS, 0)

        def IMPLICIT(self):
            return self.getToken(CSharpParser.IMPLICIT, 0)

        def EXPLICIT(self):
            return self.getToken(CSharpParser.EXPLICIT, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_conversion_operator_declarator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConversion_operator_declarator" ):
                listener.enterConversion_operator_declarator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConversion_operator_declarator" ):
                listener.exitConversion_operator_declarator(self)




    def conversion_operator_declarator(self):

        localctx = CSharpParser.Conversion_operator_declaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 428, self.RULE_conversion_operator_declarator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2689
            _la = self._input.LA(1)
            if not(_la==41 or _la==56):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 2690
            self.match(CSharpParser.OPERATOR)
            self.state = 2691
            self.type_()
            self.state = 2692
            self.match(CSharpParser.OPEN_PARENS)
            self.state = 2693
            self.arg_declaration()
            self.state = 2694
            self.match(CSharpParser.CLOSE_PARENS)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Constructor_initializerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COLON(self):
            return self.getToken(CSharpParser.COLON, 0)

        def OPEN_PARENS(self):
            return self.getToken(CSharpParser.OPEN_PARENS, 0)

        def CLOSE_PARENS(self):
            return self.getToken(CSharpParser.CLOSE_PARENS, 0)

        def BASE(self):
            return self.getToken(CSharpParser.BASE, 0)

        def THIS(self):
            return self.getToken(CSharpParser.THIS, 0)

        def argument_list(self):
            return self.getTypedRuleContext(CSharpParser.Argument_listContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_constructor_initializer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstructor_initializer" ):
                listener.enterConstructor_initializer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstructor_initializer" ):
                listener.exitConstructor_initializer(self)




    def constructor_initializer(self):

        localctx = CSharpParser.Constructor_initializerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 430, self.RULE_constructor_initializer)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2696
            self.match(CSharpParser.COLON)
            self.state = 2697
            _la = self._input.LA(1)
            if not(_la==18 or _la==101):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 2698
            self.match(CSharpParser.OPEN_PARENS)
            self.state = 2700
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 5065503514771305472) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -948717009814526117) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & 18014450294199551) != 0):
                self.state = 2699
                self.argument_list()


            self.state = 2702
            self.match(CSharpParser.CLOSE_PARENS)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def block(self):
            return self.getTypedRuleContext(CSharpParser.BlockContext,0)


        def SEMICOLON(self):
            return self.getToken(CSharpParser.SEMICOLON, 0)

        def right_arrow(self):
            return self.getTypedRuleContext(CSharpParser.Right_arrowContext,0)


        def expression(self):
            return self.getTypedRuleContext(CSharpParser.ExpressionContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_body

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBody" ):
                listener.enterBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBody" ):
                listener.exitBody(self)




    def body(self):

        localctx = CSharpParser.BodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 432, self.RULE_body)
        try:
            self.state = 2710
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [136]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2704
                self.block()
                pass
            elif token in [145]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2705
                self.match(CSharpParser.SEMICOLON)
                pass
            elif token in [156]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2706
                self.right_arrow()
                self.state = 2707
                self.expression()
                self.state = 2708
                self.match(CSharpParser.SEMICOLON)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Struct_interfacesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COLON(self):
            return self.getToken(CSharpParser.COLON, 0)

        def interface_type_list(self):
            return self.getTypedRuleContext(CSharpParser.Interface_type_listContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_struct_interfaces

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStruct_interfaces" ):
                listener.enterStruct_interfaces(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStruct_interfaces" ):
                listener.exitStruct_interfaces(self)




    def struct_interfaces(self):

        localctx = CSharpParser.Struct_interfacesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 434, self.RULE_struct_interfaces)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2712
            self.match(CSharpParser.COLON)
            self.state = 2713
            self.interface_type_list()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Struct_bodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_BRACE(self):
            return self.getToken(CSharpParser.OPEN_BRACE, 0)

        def CLOSE_BRACE(self):
            return self.getToken(CSharpParser.CLOSE_BRACE, 0)

        def struct_member_declaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Struct_member_declarationContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Struct_member_declarationContext,i)


        def SEMICOLON(self):
            return self.getToken(CSharpParser.SEMICOLON, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_struct_body

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStruct_body" ):
                listener.enterStruct_body(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStruct_body" ):
                listener.exitStruct_body(self)




    def struct_body(self):

        localctx = CSharpParser.Struct_bodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 436, self.RULE_struct_body)
        self._la = 0 # Token type
        try:
            self.state = 2724
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [136]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2715
                self.match(CSharpParser.OPEN_BRACE)
                self.state = 2719
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & 6723003273058170368) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 1656717794697193051) != 0) or _la==138 or _la==140:
                    self.state = 2716
                    self.struct_member_declaration()
                    self.state = 2721
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2722
                self.match(CSharpParser.CLOSE_BRACE)
                pass
            elif token in [145]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2723
                self.match(CSharpParser.SEMICOLON)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Struct_member_declarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def common_member_declaration(self):
            return self.getTypedRuleContext(CSharpParser.Common_member_declarationContext,0)


        def FIXED(self):
            return self.getToken(CSharpParser.FIXED, 0)

        def type_(self):
            return self.getTypedRuleContext(CSharpParser.Type_Context,0)


        def SEMICOLON(self):
            return self.getToken(CSharpParser.SEMICOLON, 0)

        def member_declarator(self):
            return self.getTypedRuleContext(CSharpParser.Member_declaratorContext,0)


        def attributes(self):
            return self.getTypedRuleContext(CSharpParser.AttributesContext,0)


        def all_member_modifiers(self):
            return self.getTypedRuleContext(CSharpParser.All_member_modifiersContext,0)


        def fixed_size_buffer_declarator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Fixed_size_buffer_declaratorContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Fixed_size_buffer_declaratorContext,i)


        def getRuleIndex(self):
            return CSharpParser.RULE_struct_member_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStruct_member_declaration" ):
                listener.enterStruct_member_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStruct_member_declaration" ):
                listener.exitStruct_member_declaration(self)




    def struct_member_declaration(self):

        localctx = CSharpParser.Struct_member_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 438, self.RULE_struct_member_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2727
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,315,self._ctx)
            if la_ == 1:
                self.state = 2726
                self.attributes()


            self.state = 2730
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,316,self._ctx)
            if la_ == 1:
                self.state = 2729
                self.all_member_modifiers()


            self.state = 2746
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,318,self._ctx)
            if la_ == 1:
                self.state = 2732
                self.common_member_declaration()
                pass

            elif la_ == 2:
                self.state = 2733
                self.match(CSharpParser.FIXED)
                self.state = 2734
                self.type_()
                self.state = 2736 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 2735
                    self.fixed_size_buffer_declarator()
                    self.state = 2738 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & 4633078743724962816) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 1352276157684392979) != 0)):
                        break

                self.state = 2740
                self.match(CSharpParser.SEMICOLON)
                pass

            elif la_ == 3:
                self.state = 2742
                self.type_()
                self.state = 2743
                self.member_declarator()
                self.state = 2744
                self.match(CSharpParser.SEMICOLON)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Array_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def base_type(self):
            return self.getTypedRuleContext(CSharpParser.Base_typeContext,0)


        def rank_specifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Rank_specifierContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Rank_specifierContext,i)


        def STAR(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.STAR)
            else:
                return self.getToken(CSharpParser.STAR, i)

        def INTERR(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.INTERR)
            else:
                return self.getToken(CSharpParser.INTERR, i)

        def getRuleIndex(self):
            return CSharpParser.RULE_array_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArray_type" ):
                listener.enterArray_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArray_type" ):
                listener.exitArray_type(self)




    def array_type(self):

        localctx = CSharpParser.Array_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 440, self.RULE_array_type)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2748
            self.base_type()
            self.state = 2756 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 2752
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==148 or _la==159:
                    self.state = 2749
                    _la = self._input.LA(1)
                    if not(_la==148 or _la==159):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 2754
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2755
                self.rank_specifier()
                self.state = 2758 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (((((_la - 138)) & ~0x3f) == 0 and ((1 << (_la - 138)) & 2098177) != 0)):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Rank_specifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_BRACKET(self):
            return self.getToken(CSharpParser.OPEN_BRACKET, 0)

        def CLOSE_BRACKET(self):
            return self.getToken(CSharpParser.CLOSE_BRACKET, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.COMMA)
            else:
                return self.getToken(CSharpParser.COMMA, i)

        def getRuleIndex(self):
            return CSharpParser.RULE_rank_specifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRank_specifier" ):
                listener.enterRank_specifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRank_specifier" ):
                listener.exitRank_specifier(self)




    def rank_specifier(self):

        localctx = CSharpParser.Rank_specifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 442, self.RULE_rank_specifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2760
            self.match(CSharpParser.OPEN_BRACKET)
            self.state = 2764
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==143:
                self.state = 2761
                self.match(CSharpParser.COMMA)
                self.state = 2766
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2767
            self.match(CSharpParser.CLOSE_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Array_initializerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_BRACE(self):
            return self.getToken(CSharpParser.OPEN_BRACE, 0)

        def CLOSE_BRACE(self):
            return self.getToken(CSharpParser.CLOSE_BRACE, 0)

        def variable_initializer(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Variable_initializerContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Variable_initializerContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.COMMA)
            else:
                return self.getToken(CSharpParser.COMMA, i)

        def getRuleIndex(self):
            return CSharpParser.RULE_array_initializer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArray_initializer" ):
                listener.enterArray_initializer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArray_initializer" ):
                listener.exitArray_initializer(self)




    def array_initializer(self):

        localctx = CSharpParser.Array_initializerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 444, self.RULE_array_initializer)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2769
            self.match(CSharpParser.OPEN_BRACE)
            self.state = 2781
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 4921388326695449600) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -953220609444010149) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & 18014450294199807) != 0):
                self.state = 2770
                self.variable_initializer()
                self.state = 2775
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,322,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2771
                        self.match(CSharpParser.COMMA)
                        self.state = 2772
                        self.variable_initializer() 
                    self.state = 2777
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,322,self._ctx)

                self.state = 2779
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==143:
                    self.state = 2778
                    self.match(CSharpParser.COMMA)




            self.state = 2783
            self.match(CSharpParser.CLOSE_BRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Variant_type_parameter_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LT(self):
            return self.getToken(CSharpParser.LT, 0)

        def variant_type_parameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Variant_type_parameterContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Variant_type_parameterContext,i)


        def GT(self):
            return self.getToken(CSharpParser.GT, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.COMMA)
            else:
                return self.getToken(CSharpParser.COMMA, i)

        def getRuleIndex(self):
            return CSharpParser.RULE_variant_type_parameter_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariant_type_parameter_list" ):
                listener.enterVariant_type_parameter_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariant_type_parameter_list" ):
                listener.exitVariant_type_parameter_list(self)




    def variant_type_parameter_list(self):

        localctx = CSharpParser.Variant_type_parameter_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 446, self.RULE_variant_type_parameter_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2785
            self.match(CSharpParser.LT)
            self.state = 2786
            self.variant_type_parameter()
            self.state = 2791
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==143:
                self.state = 2787
                self.match(CSharpParser.COMMA)
                self.state = 2788
                self.variant_type_parameter()
                self.state = 2793
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2794
            self.match(CSharpParser.GT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Variant_type_parameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(CSharpParser.IdentifierContext,0)


        def attributes(self):
            return self.getTypedRuleContext(CSharpParser.AttributesContext,0)


        def variance_annotation(self):
            return self.getTypedRuleContext(CSharpParser.Variance_annotationContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_variant_type_parameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariant_type_parameter" ):
                listener.enterVariant_type_parameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariant_type_parameter" ):
                listener.exitVariant_type_parameter(self)




    def variant_type_parameter(self):

        localctx = CSharpParser.Variant_type_parameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 448, self.RULE_variant_type_parameter)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2797
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==138:
                self.state = 2796
                self.attributes()


            self.state = 2800
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==57 or _la==78:
                self.state = 2799
                self.variance_annotation()


            self.state = 2802
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Variance_annotationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IN(self):
            return self.getToken(CSharpParser.IN, 0)

        def OUT(self):
            return self.getToken(CSharpParser.OUT, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_variance_annotation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariance_annotation" ):
                listener.enterVariance_annotation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariance_annotation" ):
                listener.exitVariance_annotation(self)




    def variance_annotation(self):

        localctx = CSharpParser.Variance_annotationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 450, self.RULE_variance_annotation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2804
            _la = self._input.LA(1)
            if not(_la==57 or _la==78):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Interface_baseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COLON(self):
            return self.getToken(CSharpParser.COLON, 0)

        def interface_type_list(self):
            return self.getTypedRuleContext(CSharpParser.Interface_type_listContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_interface_base

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterface_base" ):
                listener.enterInterface_base(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterface_base" ):
                listener.exitInterface_base(self)




    def interface_base(self):

        localctx = CSharpParser.Interface_baseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 452, self.RULE_interface_base)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2806
            self.match(CSharpParser.COLON)
            self.state = 2807
            self.interface_type_list()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Interface_bodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_BRACE(self):
            return self.getToken(CSharpParser.OPEN_BRACE, 0)

        def CLOSE_BRACE(self):
            return self.getToken(CSharpParser.CLOSE_BRACE, 0)

        def interface_member_declaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Interface_member_declarationContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Interface_member_declarationContext,i)


        def getRuleIndex(self):
            return CSharpParser.RULE_interface_body

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterface_body" ):
                listener.enterInterface_body(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterface_body" ):
                listener.exitInterface_body(self)




    def interface_body(self):

        localctx = CSharpParser.Interface_bodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 454, self.RULE_interface_body)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2809
            self.match(CSharpParser.OPEN_BRACE)
            self.state = 2813
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & 4921380627899200512) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 1357228376387102299) != 0) or _la==138 or _la==140:
                self.state = 2810
                self.interface_member_declaration()
                self.state = 2815
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2816
            self.match(CSharpParser.CLOSE_BRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Interface_member_declarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def type_(self):
            return self.getTypedRuleContext(CSharpParser.Type_Context,0)


        def VOID(self):
            return self.getToken(CSharpParser.VOID, 0)

        def identifier(self):
            return self.getTypedRuleContext(CSharpParser.IdentifierContext,0)


        def OPEN_PARENS(self):
            return self.getToken(CSharpParser.OPEN_PARENS, 0)

        def CLOSE_PARENS(self):
            return self.getToken(CSharpParser.CLOSE_PARENS, 0)

        def SEMICOLON(self):
            return self.getToken(CSharpParser.SEMICOLON, 0)

        def EVENT(self):
            return self.getToken(CSharpParser.EVENT, 0)

        def attributes(self):
            return self.getTypedRuleContext(CSharpParser.AttributesContext,0)


        def NEW(self):
            return self.getToken(CSharpParser.NEW, 0)

        def OPEN_BRACE(self):
            return self.getToken(CSharpParser.OPEN_BRACE, 0)

        def interface_accessors(self):
            return self.getTypedRuleContext(CSharpParser.Interface_accessorsContext,0)


        def CLOSE_BRACE(self):
            return self.getToken(CSharpParser.CLOSE_BRACE, 0)

        def THIS(self):
            return self.getToken(CSharpParser.THIS, 0)

        def OPEN_BRACKET(self):
            return self.getToken(CSharpParser.OPEN_BRACKET, 0)

        def formal_parameter_list(self):
            return self.getTypedRuleContext(CSharpParser.Formal_parameter_listContext,0)


        def CLOSE_BRACKET(self):
            return self.getToken(CSharpParser.CLOSE_BRACKET, 0)

        def UNSAFE(self):
            return self.getToken(CSharpParser.UNSAFE, 0)

        def REF(self):
            return self.getToken(CSharpParser.REF, 0)

        def READONLY(self):
            return self.getToken(CSharpParser.READONLY, 0)

        def type_parameter_list(self):
            return self.getTypedRuleContext(CSharpParser.Type_parameter_listContext,0)


        def type_parameter_constraints_clauses(self):
            return self.getTypedRuleContext(CSharpParser.Type_parameter_constraints_clausesContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_interface_member_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterface_member_declaration" ):
                listener.enterInterface_member_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterface_member_declaration" ):
                listener.exitInterface_member_declaration(self)




    def interface_member_declaration(self):

        localctx = CSharpParser.Interface_member_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 456, self.RULE_interface_member_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2819
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==138:
                self.state = 2818
                self.attributes()


            self.state = 2822
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==70:
                self.state = 2821
                self.match(CSharpParser.NEW)


            self.state = 2887
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,341,self._ctx)
            if la_ == 1:
                self.state = 2825
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==111:
                    self.state = 2824
                    self.match(CSharpParser.UNSAFE)


                self.state = 2832
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,332,self._ctx)
                if la_ == 1:
                    self.state = 2827
                    self.match(CSharpParser.REF)

                elif la_ == 2:
                    self.state = 2828
                    self.match(CSharpParser.REF)
                    self.state = 2829
                    self.match(CSharpParser.READONLY)

                elif la_ == 3:
                    self.state = 2830
                    self.match(CSharpParser.READONLY)
                    self.state = 2831
                    self.match(CSharpParser.REF)


                self.state = 2834
                self.type_()
                self.state = 2862
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,336,self._ctx)
                if la_ == 1:
                    self.state = 2835
                    self.identifier()
                    self.state = 2837
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==157:
                        self.state = 2836
                        self.type_parameter_list()


                    self.state = 2839
                    self.match(CSharpParser.OPEN_PARENS)
                    self.state = 2841
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & 5065494716463428608) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 1357087776337782299) != 0) or _la==138 or _la==140:
                        self.state = 2840
                        self.formal_parameter_list()


                    self.state = 2843
                    self.match(CSharpParser.CLOSE_PARENS)
                    self.state = 2845
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==119:
                        self.state = 2844
                        self.type_parameter_constraints_clauses()


                    self.state = 2847
                    self.match(CSharpParser.SEMICOLON)
                    pass

                elif la_ == 2:
                    self.state = 2849
                    self.identifier()
                    self.state = 2850
                    self.match(CSharpParser.OPEN_BRACE)
                    self.state = 2851
                    self.interface_accessors()
                    self.state = 2852
                    self.match(CSharpParser.CLOSE_BRACE)
                    pass

                elif la_ == 3:
                    self.state = 2854
                    self.match(CSharpParser.THIS)
                    self.state = 2855
                    self.match(CSharpParser.OPEN_BRACKET)
                    self.state = 2856
                    self.formal_parameter_list()
                    self.state = 2857
                    self.match(CSharpParser.CLOSE_BRACKET)
                    self.state = 2858
                    self.match(CSharpParser.OPEN_BRACE)
                    self.state = 2859
                    self.interface_accessors()
                    self.state = 2860
                    self.match(CSharpParser.CLOSE_BRACE)
                    pass


                pass

            elif la_ == 2:
                self.state = 2865
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==111:
                    self.state = 2864
                    self.match(CSharpParser.UNSAFE)


                self.state = 2867
                self.match(CSharpParser.VOID)
                self.state = 2868
                self.identifier()
                self.state = 2870
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==157:
                    self.state = 2869
                    self.type_parameter_list()


                self.state = 2872
                self.match(CSharpParser.OPEN_PARENS)
                self.state = 2874
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 5065494716463428608) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 1357087776337782299) != 0) or _la==138 or _la==140:
                    self.state = 2873
                    self.formal_parameter_list()


                self.state = 2876
                self.match(CSharpParser.CLOSE_PARENS)
                self.state = 2878
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==119:
                    self.state = 2877
                    self.type_parameter_constraints_clauses()


                self.state = 2880
                self.match(CSharpParser.SEMICOLON)
                pass

            elif la_ == 3:
                self.state = 2882
                self.match(CSharpParser.EVENT)
                self.state = 2883
                self.type_()
                self.state = 2884
                self.identifier()
                self.state = 2885
                self.match(CSharpParser.SEMICOLON)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Interface_accessorsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GET(self):
            return self.getToken(CSharpParser.GET, 0)

        def SEMICOLON(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.SEMICOLON)
            else:
                return self.getToken(CSharpParser.SEMICOLON, i)

        def SET(self):
            return self.getToken(CSharpParser.SET, 0)

        def attributes(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.AttributesContext)
            else:
                return self.getTypedRuleContext(CSharpParser.AttributesContext,i)


        def getRuleIndex(self):
            return CSharpParser.RULE_interface_accessors

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterface_accessors" ):
                listener.enterInterface_accessors(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterface_accessors" ):
                listener.exitInterface_accessors(self)




    def interface_accessors(self):

        localctx = CSharpParser.Interface_accessorsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 458, self.RULE_interface_accessors)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2890
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==138:
                self.state = 2889
                self.attributes()


            self.state = 2910
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [51]:
                self.state = 2892
                self.match(CSharpParser.GET)
                self.state = 2893
                self.match(CSharpParser.SEMICOLON)
                self.state = 2899
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==93 or _la==138:
                    self.state = 2895
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==138:
                        self.state = 2894
                        self.attributes()


                    self.state = 2897
                    self.match(CSharpParser.SET)
                    self.state = 2898
                    self.match(CSharpParser.SEMICOLON)


                pass
            elif token in [93]:
                self.state = 2901
                self.match(CSharpParser.SET)
                self.state = 2902
                self.match(CSharpParser.SEMICOLON)
                self.state = 2908
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==51 or _la==138:
                    self.state = 2904
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==138:
                        self.state = 2903
                        self.attributes()


                    self.state = 2906
                    self.match(CSharpParser.GET)
                    self.state = 2907
                    self.match(CSharpParser.SEMICOLON)


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Enum_baseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COLON(self):
            return self.getToken(CSharpParser.COLON, 0)

        def type_(self):
            return self.getTypedRuleContext(CSharpParser.Type_Context,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_enum_base

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnum_base" ):
                listener.enterEnum_base(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnum_base" ):
                listener.exitEnum_base(self)




    def enum_base(self):

        localctx = CSharpParser.Enum_baseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 460, self.RULE_enum_base)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2912
            self.match(CSharpParser.COLON)
            self.state = 2913
            self.type_()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Enum_bodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_BRACE(self):
            return self.getToken(CSharpParser.OPEN_BRACE, 0)

        def CLOSE_BRACE(self):
            return self.getToken(CSharpParser.CLOSE_BRACE, 0)

        def enum_member_declaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Enum_member_declarationContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Enum_member_declarationContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.COMMA)
            else:
                return self.getToken(CSharpParser.COMMA, i)

        def getRuleIndex(self):
            return CSharpParser.RULE_enum_body

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnum_body" ):
                listener.enterEnum_body(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnum_body" ):
                listener.exitEnum_body(self)




    def enum_body(self):

        localctx = CSharpParser.Enum_bodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 462, self.RULE_enum_body)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2915
            self.match(CSharpParser.OPEN_BRACE)
            self.state = 2927
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 4633078743724962816) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 1352276157684392979) != 0) or _la==138:
                self.state = 2916
                self.enum_member_declaration()
                self.state = 2921
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,348,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2917
                        self.match(CSharpParser.COMMA)
                        self.state = 2918
                        self.enum_member_declaration() 
                    self.state = 2923
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,348,self._ctx)

                self.state = 2925
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==143:
                    self.state = 2924
                    self.match(CSharpParser.COMMA)




            self.state = 2929
            self.match(CSharpParser.CLOSE_BRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Enum_member_declarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(CSharpParser.IdentifierContext,0)


        def attributes(self):
            return self.getTypedRuleContext(CSharpParser.AttributesContext,0)


        def ASSIGNMENT(self):
            return self.getToken(CSharpParser.ASSIGNMENT, 0)

        def expression(self):
            return self.getTypedRuleContext(CSharpParser.ExpressionContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_enum_member_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnum_member_declaration" ):
                listener.enterEnum_member_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnum_member_declaration" ):
                listener.exitEnum_member_declaration(self)




    def enum_member_declaration(self):

        localctx = CSharpParser.Enum_member_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 464, self.RULE_enum_member_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2932
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==138:
                self.state = 2931
                self.attributes()


            self.state = 2934
            self.identifier()
            self.state = 2937
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==156:
                self.state = 2935
                self.match(CSharpParser.ASSIGNMENT)
                self.state = 2936
                self.expression()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Global_attribute_sectionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_BRACKET(self):
            return self.getToken(CSharpParser.OPEN_BRACKET, 0)

        def global_attribute_target(self):
            return self.getTypedRuleContext(CSharpParser.Global_attribute_targetContext,0)


        def COLON(self):
            return self.getToken(CSharpParser.COLON, 0)

        def attribute_list(self):
            return self.getTypedRuleContext(CSharpParser.Attribute_listContext,0)


        def CLOSE_BRACKET(self):
            return self.getToken(CSharpParser.CLOSE_BRACKET, 0)

        def COMMA(self):
            return self.getToken(CSharpParser.COMMA, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_global_attribute_section

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGlobal_attribute_section" ):
                listener.enterGlobal_attribute_section(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGlobal_attribute_section" ):
                listener.exitGlobal_attribute_section(self)




    def global_attribute_section(self):

        localctx = CSharpParser.Global_attribute_sectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 466, self.RULE_global_attribute_section)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2939
            self.match(CSharpParser.OPEN_BRACKET)
            self.state = 2940
            self.global_attribute_target()
            self.state = 2941
            self.match(CSharpParser.COLON)
            self.state = 2942
            self.attribute_list()
            self.state = 2944
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==143:
                self.state = 2943
                self.match(CSharpParser.COMMA)


            self.state = 2946
            self.match(CSharpParser.CLOSE_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Global_attribute_targetContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def keyword(self):
            return self.getTypedRuleContext(CSharpParser.KeywordContext,0)


        def identifier(self):
            return self.getTypedRuleContext(CSharpParser.IdentifierContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_global_attribute_target

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGlobal_attribute_target" ):
                listener.enterGlobal_attribute_target(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGlobal_attribute_target" ):
                listener.exitGlobal_attribute_target(self)




    def global_attribute_target(self):

        localctx = CSharpParser.Global_attribute_targetContext(self, self._ctx, self.state)
        self.enterRule(localctx, 468, self.RULE_global_attribute_target)
        try:
            self.state = 2950
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,354,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2948
                self.keyword()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2949
                self.identifier()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AttributesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def attribute_section(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Attribute_sectionContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Attribute_sectionContext,i)


        def getRuleIndex(self):
            return CSharpParser.RULE_attributes

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttributes" ):
                listener.enterAttributes(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttributes" ):
                listener.exitAttributes(self)




    def attributes(self):

        localctx = CSharpParser.AttributesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 470, self.RULE_attributes)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2953 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 2952
                    self.attribute_section()

                else:
                    raise NoViableAltException(self)
                self.state = 2955 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,355,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Attribute_sectionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_BRACKET(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.OPEN_BRACKET)
            else:
                return self.getToken(CSharpParser.OPEN_BRACKET, i)

        def attribute_list(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Attribute_listContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Attribute_listContext,i)


        def CLOSE_BRACKET(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.CLOSE_BRACKET)
            else:
                return self.getToken(CSharpParser.CLOSE_BRACKET, i)

        def attribute_target(self):
            return self.getTypedRuleContext(CSharpParser.Attribute_targetContext,0)


        def COLON(self):
            return self.getToken(CSharpParser.COLON, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.COMMA)
            else:
                return self.getToken(CSharpParser.COMMA, i)

        def getRuleIndex(self):
            return CSharpParser.RULE_attribute_section

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttribute_section" ):
                listener.enterAttribute_section(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttribute_section" ):
                listener.exitAttribute_section(self)




    def attribute_section(self):

        localctx = CSharpParser.Attribute_sectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 472, self.RULE_attribute_section)
        self._la = 0 # Token type
        try:
            self.state = 2982
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,359,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2957
                self.match(CSharpParser.OPEN_BRACKET)
                self.state = 2961
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,356,self._ctx)
                if la_ == 1:
                    self.state = 2958
                    self.attribute_target()
                    self.state = 2959
                    self.match(CSharpParser.COLON)


                self.state = 2963
                self.attribute_list()
                self.state = 2965
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==143:
                    self.state = 2964
                    self.match(CSharpParser.COMMA)


                self.state = 2967
                self.match(CSharpParser.CLOSE_BRACKET)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2969
                self.match(CSharpParser.OPEN_BRACKET)
                self.state = 2970
                self.attribute_list()
                self.state = 2971
                self.match(CSharpParser.CLOSE_BRACKET)
                self.state = 2979
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==143:
                    self.state = 2972
                    self.match(CSharpParser.COMMA)
                    self.state = 2973
                    self.match(CSharpParser.OPEN_BRACKET)
                    self.state = 2974
                    self.attribute_list()
                    self.state = 2975
                    self.match(CSharpParser.CLOSE_BRACKET)
                    self.state = 2981
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Attribute_targetContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def keyword(self):
            return self.getTypedRuleContext(CSharpParser.KeywordContext,0)


        def identifier(self):
            return self.getTypedRuleContext(CSharpParser.IdentifierContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_attribute_target

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttribute_target" ):
                listener.enterAttribute_target(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttribute_target" ):
                listener.exitAttribute_target(self)




    def attribute_target(self):

        localctx = CSharpParser.Attribute_targetContext(self, self._ctx, self.state)
        self.enterRule(localctx, 474, self.RULE_attribute_target)
        try:
            self.state = 2986
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,360,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2984
                self.keyword()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2985
                self.identifier()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Attribute_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def attribute(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.AttributeContext)
            else:
                return self.getTypedRuleContext(CSharpParser.AttributeContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.COMMA)
            else:
                return self.getToken(CSharpParser.COMMA, i)

        def getRuleIndex(self):
            return CSharpParser.RULE_attribute_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttribute_list" ):
                listener.enterAttribute_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttribute_list" ):
                listener.exitAttribute_list(self)




    def attribute_list(self):

        localctx = CSharpParser.Attribute_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 476, self.RULE_attribute_list)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2988
            self.attribute()
            self.state = 2993
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,361,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2989
                    self.match(CSharpParser.COMMA)
                    self.state = 2990
                    self.attribute() 
                self.state = 2995
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,361,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AttributeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def namespace_or_type_name(self):
            return self.getTypedRuleContext(CSharpParser.Namespace_or_type_nameContext,0)


        def OPEN_PARENS(self):
            return self.getToken(CSharpParser.OPEN_PARENS, 0)

        def CLOSE_PARENS(self):
            return self.getToken(CSharpParser.CLOSE_PARENS, 0)

        def attribute_argument(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Attribute_argumentContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Attribute_argumentContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.COMMA)
            else:
                return self.getToken(CSharpParser.COMMA, i)

        def getRuleIndex(self):
            return CSharpParser.RULE_attribute

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttribute" ):
                listener.enterAttribute(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttribute" ):
                listener.exitAttribute(self)




    def attribute(self):

        localctx = CSharpParser.AttributeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 478, self.RULE_attribute)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2996
            self.namespace_or_type_name()
            self.state = 3009
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==140:
                self.state = 2997
                self.match(CSharpParser.OPEN_PARENS)
                self.state = 3006
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 4921388326695449600) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -953220609444010149) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & 18014450294199551) != 0):
                    self.state = 2998
                    self.attribute_argument()
                    self.state = 3003
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==143:
                        self.state = 2999
                        self.match(CSharpParser.COMMA)
                        self.state = 3000
                        self.attribute_argument()
                        self.state = 3005
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 3008
                self.match(CSharpParser.CLOSE_PARENS)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Attribute_argumentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(CSharpParser.ExpressionContext,0)


        def identifier(self):
            return self.getTypedRuleContext(CSharpParser.IdentifierContext,0)


        def COLON(self):
            return self.getToken(CSharpParser.COLON, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_attribute_argument

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttribute_argument" ):
                listener.enterAttribute_argument(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttribute_argument" ):
                listener.exitAttribute_argument(self)




    def attribute_argument(self):

        localctx = CSharpParser.Attribute_argumentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 480, self.RULE_attribute_argument)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3014
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,365,self._ctx)
            if la_ == 1:
                self.state = 3011
                self.identifier()
                self.state = 3012
                self.match(CSharpParser.COLON)


            self.state = 3016
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pointer_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STAR(self):
            return self.getToken(CSharpParser.STAR, 0)

        def simple_type(self):
            return self.getTypedRuleContext(CSharpParser.Simple_typeContext,0)


        def class_type(self):
            return self.getTypedRuleContext(CSharpParser.Class_typeContext,0)


        def rank_specifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Rank_specifierContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Rank_specifierContext,i)


        def INTERR(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.INTERR)
            else:
                return self.getToken(CSharpParser.INTERR, i)

        def VOID(self):
            return self.getToken(CSharpParser.VOID, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_pointer_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPointer_type" ):
                listener.enterPointer_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPointer_type" ):
                listener.exitPointer_type(self)




    def pointer_type(self):

        localctx = CSharpParser.Pointer_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 482, self.RULE_pointer_type)
        self._la = 0 # Token type
        try:
            self.state = 3033
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [10, 12, 13, 15, 16, 17, 19, 21, 22, 25, 30, 33, 35, 36, 39, 46, 50, 51, 54, 58, 62, 64, 65, 67, 68, 73, 74, 77, 81, 88, 90, 92, 93, 94, 98, 107, 108, 110, 112, 114, 118, 119, 121, 124]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3020
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [19, 22, 25, 30, 35, 46, 58, 67, 90, 94, 107, 108, 112]:
                    self.state = 3018
                    self.simple_type()
                    pass
                elif token in [10, 12, 13, 15, 16, 17, 21, 33, 36, 39, 50, 51, 54, 62, 64, 65, 68, 73, 74, 77, 81, 88, 92, 93, 98, 110, 114, 118, 119, 121, 124]:
                    self.state = 3019
                    self.class_type()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 3026
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==138 or _la==159:
                    self.state = 3024
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [138]:
                        self.state = 3022
                        self.rank_specifier()
                        pass
                    elif token in [159]:
                        self.state = 3023
                        self.match(CSharpParser.INTERR)
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 3028
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 3029
                self.match(CSharpParser.STAR)
                pass
            elif token in [116]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3031
                self.match(CSharpParser.VOID)
                self.state = 3032
                self.match(CSharpParser.STAR)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Fixed_pointer_declaratorsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fixed_pointer_declarator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Fixed_pointer_declaratorContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Fixed_pointer_declaratorContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.COMMA)
            else:
                return self.getToken(CSharpParser.COMMA, i)

        def getRuleIndex(self):
            return CSharpParser.RULE_fixed_pointer_declarators

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFixed_pointer_declarators" ):
                listener.enterFixed_pointer_declarators(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFixed_pointer_declarators" ):
                listener.exitFixed_pointer_declarators(self)




    def fixed_pointer_declarators(self):

        localctx = CSharpParser.Fixed_pointer_declaratorsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 484, self.RULE_fixed_pointer_declarators)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3035
            self.fixed_pointer_declarator()
            self.state = 3040
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==143:
                self.state = 3036
                self.match(CSharpParser.COMMA)
                self.state = 3037
                self.fixed_pointer_declarator()
                self.state = 3042
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Fixed_pointer_declaratorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(CSharpParser.IdentifierContext,0)


        def ASSIGNMENT(self):
            return self.getToken(CSharpParser.ASSIGNMENT, 0)

        def fixed_pointer_initializer(self):
            return self.getTypedRuleContext(CSharpParser.Fixed_pointer_initializerContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_fixed_pointer_declarator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFixed_pointer_declarator" ):
                listener.enterFixed_pointer_declarator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFixed_pointer_declarator" ):
                listener.exitFixed_pointer_declarator(self)




    def fixed_pointer_declarator(self):

        localctx = CSharpParser.Fixed_pointer_declaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 486, self.RULE_fixed_pointer_declarator)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3043
            self.identifier()
            self.state = 3044
            self.match(CSharpParser.ASSIGNMENT)
            self.state = 3045
            self.fixed_pointer_initializer()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Fixed_pointer_initializerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(CSharpParser.ExpressionContext,0)


        def AMP(self):
            return self.getToken(CSharpParser.AMP, 0)

        def stackalloc_initializer(self):
            return self.getTypedRuleContext(CSharpParser.Stackalloc_initializerContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_fixed_pointer_initializer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFixed_pointer_initializer" ):
                listener.enterFixed_pointer_initializer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFixed_pointer_initializer" ):
                listener.exitFixed_pointer_initializer(self)




    def fixed_pointer_initializer(self):

        localctx = CSharpParser.Fixed_pointer_initializerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 488, self.RULE_fixed_pointer_initializer)
        try:
            self.state = 3052
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [10, 12, 13, 15, 16, 17, 18, 19, 21, 22, 25, 26, 30, 31, 32, 33, 35, 36, 39, 43, 46, 50, 51, 54, 58, 62, 64, 65, 67, 68, 70, 72, 73, 74, 77, 81, 87, 88, 90, 92, 93, 94, 95, 96, 97, 98, 101, 102, 103, 105, 107, 108, 109, 110, 112, 114, 118, 119, 121, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 138, 140, 146, 147, 148, 151, 153, 154, 155, 162, 163, 182]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3048
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,371,self._ctx)
                if la_ == 1:
                    self.state = 3047
                    self.match(CSharpParser.AMP)


                self.state = 3050
                self.expression()
                pass
            elif token in [136]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3051
                self.stackalloc_initializer()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Fixed_size_buffer_declaratorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(CSharpParser.IdentifierContext,0)


        def OPEN_BRACKET(self):
            return self.getToken(CSharpParser.OPEN_BRACKET, 0)

        def expression(self):
            return self.getTypedRuleContext(CSharpParser.ExpressionContext,0)


        def CLOSE_BRACKET(self):
            return self.getToken(CSharpParser.CLOSE_BRACKET, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_fixed_size_buffer_declarator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFixed_size_buffer_declarator" ):
                listener.enterFixed_size_buffer_declarator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFixed_size_buffer_declarator" ):
                listener.exitFixed_size_buffer_declarator(self)




    def fixed_size_buffer_declarator(self):

        localctx = CSharpParser.Fixed_size_buffer_declaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 490, self.RULE_fixed_size_buffer_declarator)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3054
            self.identifier()
            self.state = 3055
            self.match(CSharpParser.OPEN_BRACKET)
            self.state = 3056
            self.expression()
            self.state = 3057
            self.match(CSharpParser.CLOSE_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Right_arrowContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.first = None # Token
            self.second = None # Token

        def ASSIGNMENT(self):
            return self.getToken(CSharpParser.ASSIGNMENT, 0)

        def GT(self):
            return self.getToken(CSharpParser.GT, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_right_arrow

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRight_arrow" ):
                listener.enterRight_arrow(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRight_arrow" ):
                listener.exitRight_arrow(self)




    def right_arrow(self):

        localctx = CSharpParser.Right_arrowContext(self, self._ctx, self.state)
        self.enterRule(localctx, 492, self.RULE_right_arrow)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3059
            localctx.first = self.match(CSharpParser.ASSIGNMENT)
            self.state = 3060
            localctx.second = self.match(CSharpParser.GT)
            self.state = 3061
            if not (0 if localctx.first is None else localctx.first.tokenIndex) + 1 == (0 if localctx.second is None else localctx.second.tokenIndex):
                from antlr4.error.Errors import FailedPredicateException
                raise FailedPredicateException(self, "$first.index + 1 == $second.index")
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Right_shiftContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.first = None # Token
            self.second = None # Token

        def GT(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.GT)
            else:
                return self.getToken(CSharpParser.GT, i)

        def getRuleIndex(self):
            return CSharpParser.RULE_right_shift

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRight_shift" ):
                listener.enterRight_shift(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRight_shift" ):
                listener.exitRight_shift(self)




    def right_shift(self):

        localctx = CSharpParser.Right_shiftContext(self, self._ctx, self.state)
        self.enterRule(localctx, 494, self.RULE_right_shift)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3063
            localctx.first = self.match(CSharpParser.GT)
            self.state = 3064
            localctx.second = self.match(CSharpParser.GT)
            self.state = 3065
            if not (0 if localctx.first is None else localctx.first.tokenIndex) + 1 == (0 if localctx.second is None else localctx.second.tokenIndex):
                from antlr4.error.Errors import FailedPredicateException
                raise FailedPredicateException(self, "$first.index + 1 == $second.index")
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Right_shift_assignmentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.first = None # Token
            self.second = None # Token

        def GT(self):
            return self.getToken(CSharpParser.GT, 0)

        def OP_GE(self):
            return self.getToken(CSharpParser.OP_GE, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_right_shift_assignment

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRight_shift_assignment" ):
                listener.enterRight_shift_assignment(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRight_shift_assignment" ):
                listener.exitRight_shift_assignment(self)




    def right_shift_assignment(self):

        localctx = CSharpParser.Right_shift_assignmentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 496, self.RULE_right_shift_assignment)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3067
            localctx.first = self.match(CSharpParser.GT)
            self.state = 3068
            localctx.second = self.match(CSharpParser.OP_GE)
            self.state = 3069
            if not (0 if localctx.first is None else localctx.first.tokenIndex) + 1 == (0 if localctx.second is None else localctx.second.tokenIndex):
                from antlr4.error.Errors import FailedPredicateException
                raise FailedPredicateException(self, "$first.index + 1 == $second.index")
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def boolean_literal(self):
            return self.getTypedRuleContext(CSharpParser.Boolean_literalContext,0)


        def string_literal(self):
            return self.getTypedRuleContext(CSharpParser.String_literalContext,0)


        def RAW_STRING_LITERAL(self):
            return self.getToken(CSharpParser.RAW_STRING_LITERAL, 0)

        def utf8_string_literal(self):
            return self.getTypedRuleContext(CSharpParser.Utf8_string_literalContext,0)


        def INTEGER_LITERAL(self):
            return self.getToken(CSharpParser.INTEGER_LITERAL, 0)

        def HEX_INTEGER_LITERAL(self):
            return self.getToken(CSharpParser.HEX_INTEGER_LITERAL, 0)

        def BIN_INTEGER_LITERAL(self):
            return self.getToken(CSharpParser.BIN_INTEGER_LITERAL, 0)

        def REAL_LITERAL(self):
            return self.getToken(CSharpParser.REAL_LITERAL, 0)

        def CHARACTER_LITERAL(self):
            return self.getToken(CSharpParser.CHARACTER_LITERAL, 0)

        def NULL_(self):
            return self.getToken(CSharpParser.NULL_, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLiteral" ):
                listener.enterLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLiteral" ):
                listener.exitLiteral(self)




    def literal(self):

        localctx = CSharpParser.LiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 498, self.RULE_literal)
        try:
            self.state = 3081
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,373,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3071
                self.boolean_literal()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3072
                self.string_literal()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 3073
                self.match(CSharpParser.RAW_STRING_LITERAL)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 3074
                self.utf8_string_literal()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 3075
                self.match(CSharpParser.INTEGER_LITERAL)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 3076
                self.match(CSharpParser.HEX_INTEGER_LITERAL)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 3077
                self.match(CSharpParser.BIN_INTEGER_LITERAL)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 3078
                self.match(CSharpParser.REAL_LITERAL)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 3079
                self.match(CSharpParser.CHARACTER_LITERAL)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 3080
                self.match(CSharpParser.NULL_)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Utf8_string_literalContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REGULAR_STRING(self):
            return self.getToken(CSharpParser.REGULAR_STRING, 0)

        def UTF8_SUFFIX(self):
            return self.getToken(CSharpParser.UTF8_SUFFIX, 0)

        def VERBATIUM_STRING(self):
            return self.getToken(CSharpParser.VERBATIUM_STRING, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_utf8_string_literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUtf8_string_literal" ):
                listener.enterUtf8_string_literal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUtf8_string_literal" ):
                listener.exitUtf8_string_literal(self)




    def utf8_string_literal(self):

        localctx = CSharpParser.Utf8_string_literalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 500, self.RULE_utf8_string_literal)
        try:
            self.state = 3087
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [131]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3083
                self.match(CSharpParser.REGULAR_STRING)
                self.state = 3084
                self.match(CSharpParser.UTF8_SUFFIX)
                pass
            elif token in [132]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3085
                self.match(CSharpParser.VERBATIUM_STRING)
                self.state = 3086
                self.match(CSharpParser.UTF8_SUFFIX)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Boolean_literalContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TRUE(self):
            return self.getToken(CSharpParser.TRUE, 0)

        def FALSE(self):
            return self.getToken(CSharpParser.FALSE, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_boolean_literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBoolean_literal" ):
                listener.enterBoolean_literal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBoolean_literal" ):
                listener.exitBoolean_literal(self)




    def boolean_literal(self):

        localctx = CSharpParser.Boolean_literalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 502, self.RULE_boolean_literal)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3089
            _la = self._input.LA(1)
            if not(_la==43 or _la==103):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class String_literalContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def interpolated_regular_string(self):
            return self.getTypedRuleContext(CSharpParser.Interpolated_regular_stringContext,0)


        def interpolated_verbatium_string(self):
            return self.getTypedRuleContext(CSharpParser.Interpolated_verbatium_stringContext,0)


        def REGULAR_STRING(self):
            return self.getToken(CSharpParser.REGULAR_STRING, 0)

        def VERBATIUM_STRING(self):
            return self.getToken(CSharpParser.VERBATIUM_STRING, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_string_literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterString_literal" ):
                listener.enterString_literal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitString_literal" ):
                listener.exitString_literal(self)




    def string_literal(self):

        localctx = CSharpParser.String_literalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 504, self.RULE_string_literal)
        try:
            self.state = 3095
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [133]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3091
                self.interpolated_regular_string()
                pass
            elif token in [134]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3092
                self.interpolated_verbatium_string()
                pass
            elif token in [131]:
                self.enterOuterAlt(localctx, 3)
                self.state = 3093
                self.match(CSharpParser.REGULAR_STRING)
                pass
            elif token in [132]:
                self.enterOuterAlt(localctx, 4)
                self.state = 3094
                self.match(CSharpParser.VERBATIUM_STRING)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Interpolated_regular_stringContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INTERPOLATED_REGULAR_STRING_START(self):
            return self.getToken(CSharpParser.INTERPOLATED_REGULAR_STRING_START, 0)

        def DOUBLE_QUOTE_INSIDE(self):
            return self.getToken(CSharpParser.DOUBLE_QUOTE_INSIDE, 0)

        def interpolated_regular_string_part(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Interpolated_regular_string_partContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Interpolated_regular_string_partContext,i)


        def getRuleIndex(self):
            return CSharpParser.RULE_interpolated_regular_string

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterpolated_regular_string" ):
                listener.enterInterpolated_regular_string(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterpolated_regular_string" ):
                listener.exitInterpolated_regular_string(self)




    def interpolated_regular_string(self):

        localctx = CSharpParser.Interpolated_regular_stringContext(self, self._ctx, self.state)
        self.enterRule(localctx, 506, self.RULE_interpolated_regular_string)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3097
            self.match(CSharpParser.INTERPOLATED_REGULAR_STRING_START)
            self.state = 3101
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,376,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 3098
                    self.interpolated_regular_string_part() 
                self.state = 3103
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,376,self._ctx)

            self.state = 3104
            self.match(CSharpParser.DOUBLE_QUOTE_INSIDE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Interpolated_verbatium_stringContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INTERPOLATED_VERBATIUM_STRING_START(self):
            return self.getToken(CSharpParser.INTERPOLATED_VERBATIUM_STRING_START, 0)

        def DOUBLE_QUOTE_INSIDE(self):
            return self.getToken(CSharpParser.DOUBLE_QUOTE_INSIDE, 0)

        def interpolated_verbatium_string_part(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Interpolated_verbatium_string_partContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Interpolated_verbatium_string_partContext,i)


        def getRuleIndex(self):
            return CSharpParser.RULE_interpolated_verbatium_string

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterpolated_verbatium_string" ):
                listener.enterInterpolated_verbatium_string(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterpolated_verbatium_string" ):
                listener.exitInterpolated_verbatium_string(self)




    def interpolated_verbatium_string(self):

        localctx = CSharpParser.Interpolated_verbatium_stringContext(self, self._ctx, self.state)
        self.enterRule(localctx, 508, self.RULE_interpolated_verbatium_string)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3106
            self.match(CSharpParser.INTERPOLATED_VERBATIUM_STRING_START)
            self.state = 3110
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 183)) & ~0x3f) == 0 and ((1 << (_la - 183)) & 75) != 0):
                self.state = 3107
                self.interpolated_verbatium_string_part()
                self.state = 3112
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 3113
            self.match(CSharpParser.DOUBLE_QUOTE_INSIDE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Interpolated_regular_string_partContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def interpolated_string_expression(self):
            return self.getTypedRuleContext(CSharpParser.Interpolated_string_expressionContext,0)


        def DOUBLE_CURLY_INSIDE(self):
            return self.getToken(CSharpParser.DOUBLE_CURLY_INSIDE, 0)

        def REGULAR_CHAR_INSIDE(self):
            return self.getToken(CSharpParser.REGULAR_CHAR_INSIDE, 0)

        def REGULAR_STRING_INSIDE(self):
            return self.getToken(CSharpParser.REGULAR_STRING_INSIDE, 0)

        def OPEN_BRACE_INSIDE(self):
            return self.getToken(CSharpParser.OPEN_BRACE_INSIDE, 0)

        def CLOSE_BRACE_INSIDE(self):
            return self.getToken(CSharpParser.CLOSE_BRACE_INSIDE, 0)

        def DOUBLE_QUOTE_INSIDE(self):
            return self.getToken(CSharpParser.DOUBLE_QUOTE_INSIDE, 0)

        def VERBATIUM_INSIDE_STRING(self):
            return self.getToken(CSharpParser.VERBATIUM_INSIDE_STRING, 0)

        def OPEN_BRACE(self):
            return self.getToken(CSharpParser.OPEN_BRACE, 0)

        def CLOSE_BRACE(self):
            return self.getToken(CSharpParser.CLOSE_BRACE, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_interpolated_regular_string_part

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterpolated_regular_string_part" ):
                listener.enterInterpolated_regular_string_part(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterpolated_regular_string_part" ):
                listener.exitInterpolated_regular_string_part(self)




    def interpolated_regular_string_part(self):

        localctx = CSharpParser.Interpolated_regular_string_partContext(self, self._ctx, self.state)
        self.enterRule(localctx, 510, self.RULE_interpolated_regular_string_part)
        try:
            self.state = 3125
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,378,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3115
                self.interpolated_string_expression()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3116
                self.match(CSharpParser.DOUBLE_CURLY_INSIDE)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 3117
                self.match(CSharpParser.REGULAR_CHAR_INSIDE)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 3118
                self.match(CSharpParser.REGULAR_STRING_INSIDE)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 3119
                self.match(CSharpParser.OPEN_BRACE_INSIDE)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 3120
                self.match(CSharpParser.CLOSE_BRACE_INSIDE)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 3121
                self.match(CSharpParser.DOUBLE_QUOTE_INSIDE)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 3122
                self.match(CSharpParser.VERBATIUM_INSIDE_STRING)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 3123
                self.match(CSharpParser.OPEN_BRACE)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 3124
                self.match(CSharpParser.CLOSE_BRACE)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Interpolated_verbatium_string_partContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def interpolated_string_expression(self):
            return self.getTypedRuleContext(CSharpParser.Interpolated_string_expressionContext,0)


        def DOUBLE_CURLY_INSIDE(self):
            return self.getToken(CSharpParser.DOUBLE_CURLY_INSIDE, 0)

        def VERBATIUM_DOUBLE_QUOTE_INSIDE(self):
            return self.getToken(CSharpParser.VERBATIUM_DOUBLE_QUOTE_INSIDE, 0)

        def VERBATIUM_INSIDE_STRING(self):
            return self.getToken(CSharpParser.VERBATIUM_INSIDE_STRING, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_interpolated_verbatium_string_part

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterpolated_verbatium_string_part" ):
                listener.enterInterpolated_verbatium_string_part(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterpolated_verbatium_string_part" ):
                listener.exitInterpolated_verbatium_string_part(self)




    def interpolated_verbatium_string_part(self):

        localctx = CSharpParser.Interpolated_verbatium_string_partContext(self, self._ctx, self.state)
        self.enterRule(localctx, 512, self.RULE_interpolated_verbatium_string_part)
        try:
            self.state = 3131
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [184]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3127
                self.interpolated_string_expression()
                pass
            elif token in [183]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3128
                self.match(CSharpParser.DOUBLE_CURLY_INSIDE)
                pass
            elif token in [186]:
                self.enterOuterAlt(localctx, 3)
                self.state = 3129
                self.match(CSharpParser.VERBATIUM_DOUBLE_QUOTE_INSIDE)
                pass
            elif token in [189]:
                self.enterOuterAlt(localctx, 4)
                self.state = 3130
                self.match(CSharpParser.VERBATIUM_INSIDE_STRING)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Interpolated_string_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_BRACE_INSIDE(self):
            return self.getToken(CSharpParser.OPEN_BRACE_INSIDE, 0)

        def expression(self):
            return self.getTypedRuleContext(CSharpParser.ExpressionContext,0)


        def CLOSE_BRACE_INSIDE(self):
            return self.getToken(CSharpParser.CLOSE_BRACE_INSIDE, 0)

        def COMMA(self):
            return self.getToken(CSharpParser.COMMA, 0)

        def interpolation_minimum_width(self):
            return self.getTypedRuleContext(CSharpParser.Interpolation_minimum_widthContext,0)


        def format_string(self):
            return self.getTypedRuleContext(CSharpParser.Format_stringContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_interpolated_string_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterpolated_string_expression" ):
                listener.enterInterpolated_string_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterpolated_string_expression" ):
                listener.exitInterpolated_string_expression(self)




    def interpolated_string_expression(self):

        localctx = CSharpParser.Interpolated_string_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 514, self.RULE_interpolated_string_expression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3133
            self.match(CSharpParser.OPEN_BRACE_INSIDE)
            self.state = 3134
            self.expression()
            self.state = 3137
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==143:
                self.state = 3135
                self.match(CSharpParser.COMMA)
                self.state = 3136
                self.interpolation_minimum_width()


            self.state = 3140
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==144:
                self.state = 3139
                self.format_string()


            self.state = 3142
            self.match(CSharpParser.CLOSE_BRACE_INSIDE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Interpolation_minimum_widthContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def constant_expression(self):
            return self.getTypedRuleContext(CSharpParser.Constant_expressionContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_interpolation_minimum_width

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterpolation_minimum_width" ):
                listener.enterInterpolation_minimum_width(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterpolation_minimum_width" ):
                listener.exitInterpolation_minimum_width(self)




    def interpolation_minimum_width(self):

        localctx = CSharpParser.Interpolation_minimum_widthContext(self, self._ctx, self.state)
        self.enterRule(localctx, 516, self.RULE_interpolation_minimum_width)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3144
            self.constant_expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Format_stringContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COLON(self):
            return self.getToken(CSharpParser.COLON, 0)

        def FORMAT_STRING(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.FORMAT_STRING)
            else:
                return self.getToken(CSharpParser.FORMAT_STRING, i)

        def getRuleIndex(self):
            return CSharpParser.RULE_format_string

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFormat_string" ):
                listener.enterFormat_string(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFormat_string" ):
                listener.exitFormat_string(self)




    def format_string(self):

        localctx = CSharpParser.Format_stringContext(self, self._ctx, self.state)
        self.enterRule(localctx, 518, self.RULE_format_string)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3146
            self.match(CSharpParser.COLON)
            self.state = 3148 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 3147
                self.match(CSharpParser.FORMAT_STRING)
                self.state = 3150 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==191):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Constant_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(CSharpParser.ExpressionContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_constant_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstant_expression" ):
                listener.enterConstant_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstant_expression" ):
                listener.exitConstant_expression(self)




    def constant_expression(self):

        localctx = CSharpParser.Constant_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 520, self.RULE_constant_expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3152
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class KeywordContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ABSTRACT(self):
            return self.getToken(CSharpParser.ABSTRACT, 0)

        def AS(self):
            return self.getToken(CSharpParser.AS, 0)

        def BASE(self):
            return self.getToken(CSharpParser.BASE, 0)

        def BOOL(self):
            return self.getToken(CSharpParser.BOOL, 0)

        def BREAK(self):
            return self.getToken(CSharpParser.BREAK, 0)

        def BYTE(self):
            return self.getToken(CSharpParser.BYTE, 0)

        def CASE(self):
            return self.getToken(CSharpParser.CASE, 0)

        def CATCH(self):
            return self.getToken(CSharpParser.CATCH, 0)

        def CHAR(self):
            return self.getToken(CSharpParser.CHAR, 0)

        def CHECKED(self):
            return self.getToken(CSharpParser.CHECKED, 0)

        def CLASS(self):
            return self.getToken(CSharpParser.CLASS, 0)

        def CONST(self):
            return self.getToken(CSharpParser.CONST, 0)

        def CONTINUE(self):
            return self.getToken(CSharpParser.CONTINUE, 0)

        def DECIMAL(self):
            return self.getToken(CSharpParser.DECIMAL, 0)

        def DEFAULT(self):
            return self.getToken(CSharpParser.DEFAULT, 0)

        def DELEGATE(self):
            return self.getToken(CSharpParser.DELEGATE, 0)

        def DO(self):
            return self.getToken(CSharpParser.DO, 0)

        def DOUBLE(self):
            return self.getToken(CSharpParser.DOUBLE, 0)

        def ELSE(self):
            return self.getToken(CSharpParser.ELSE, 0)

        def ENUM(self):
            return self.getToken(CSharpParser.ENUM, 0)

        def EVENT(self):
            return self.getToken(CSharpParser.EVENT, 0)

        def EXPLICIT(self):
            return self.getToken(CSharpParser.EXPLICIT, 0)

        def EXTERN(self):
            return self.getToken(CSharpParser.EXTERN, 0)

        def FALSE(self):
            return self.getToken(CSharpParser.FALSE, 0)

        def FINALLY(self):
            return self.getToken(CSharpParser.FINALLY, 0)

        def FIXED(self):
            return self.getToken(CSharpParser.FIXED, 0)

        def FLOAT(self):
            return self.getToken(CSharpParser.FLOAT, 0)

        def FOR(self):
            return self.getToken(CSharpParser.FOR, 0)

        def FOREACH(self):
            return self.getToken(CSharpParser.FOREACH, 0)

        def GOTO(self):
            return self.getToken(CSharpParser.GOTO, 0)

        def IF(self):
            return self.getToken(CSharpParser.IF, 0)

        def IMPLICIT(self):
            return self.getToken(CSharpParser.IMPLICIT, 0)

        def IN(self):
            return self.getToken(CSharpParser.IN, 0)

        def INT(self):
            return self.getToken(CSharpParser.INT, 0)

        def INTERFACE(self):
            return self.getToken(CSharpParser.INTERFACE, 0)

        def INTERNAL(self):
            return self.getToken(CSharpParser.INTERNAL, 0)

        def IS(self):
            return self.getToken(CSharpParser.IS, 0)

        def LOCK(self):
            return self.getToken(CSharpParser.LOCK, 0)

        def LONG(self):
            return self.getToken(CSharpParser.LONG, 0)

        def NAMESPACE(self):
            return self.getToken(CSharpParser.NAMESPACE, 0)

        def NEW(self):
            return self.getToken(CSharpParser.NEW, 0)

        def NULL_(self):
            return self.getToken(CSharpParser.NULL_, 0)

        def OBJECT(self):
            return self.getToken(CSharpParser.OBJECT, 0)

        def OPERATOR(self):
            return self.getToken(CSharpParser.OPERATOR, 0)

        def OUT(self):
            return self.getToken(CSharpParser.OUT, 0)

        def OVERRIDE(self):
            return self.getToken(CSharpParser.OVERRIDE, 0)

        def PARAMS(self):
            return self.getToken(CSharpParser.PARAMS, 0)

        def PRIVATE(self):
            return self.getToken(CSharpParser.PRIVATE, 0)

        def PROTECTED(self):
            return self.getToken(CSharpParser.PROTECTED, 0)

        def PUBLIC(self):
            return self.getToken(CSharpParser.PUBLIC, 0)

        def READONLY(self):
            return self.getToken(CSharpParser.READONLY, 0)

        def REF(self):
            return self.getToken(CSharpParser.REF, 0)

        def RETURN(self):
            return self.getToken(CSharpParser.RETURN, 0)

        def SBYTE(self):
            return self.getToken(CSharpParser.SBYTE, 0)

        def SEALED(self):
            return self.getToken(CSharpParser.SEALED, 0)

        def SHORT(self):
            return self.getToken(CSharpParser.SHORT, 0)

        def SIZEOF(self):
            return self.getToken(CSharpParser.SIZEOF, 0)

        def STACKALLOC(self):
            return self.getToken(CSharpParser.STACKALLOC, 0)

        def STATIC(self):
            return self.getToken(CSharpParser.STATIC, 0)

        def STRING(self):
            return self.getToken(CSharpParser.STRING, 0)

        def STRUCT(self):
            return self.getToken(CSharpParser.STRUCT, 0)

        def SWITCH(self):
            return self.getToken(CSharpParser.SWITCH, 0)

        def THIS(self):
            return self.getToken(CSharpParser.THIS, 0)

        def THROW(self):
            return self.getToken(CSharpParser.THROW, 0)

        def TRUE(self):
            return self.getToken(CSharpParser.TRUE, 0)

        def TRY(self):
            return self.getToken(CSharpParser.TRY, 0)

        def TYPEOF(self):
            return self.getToken(CSharpParser.TYPEOF, 0)

        def UINT(self):
            return self.getToken(CSharpParser.UINT, 0)

        def ULONG(self):
            return self.getToken(CSharpParser.ULONG, 0)

        def UNCHECKED(self):
            return self.getToken(CSharpParser.UNCHECKED, 0)

        def UNMANAGED(self):
            return self.getToken(CSharpParser.UNMANAGED, 0)

        def UNSAFE(self):
            return self.getToken(CSharpParser.UNSAFE, 0)

        def USHORT(self):
            return self.getToken(CSharpParser.USHORT, 0)

        def USING(self):
            return self.getToken(CSharpParser.USING, 0)

        def VIRTUAL(self):
            return self.getToken(CSharpParser.VIRTUAL, 0)

        def VOID(self):
            return self.getToken(CSharpParser.VOID, 0)

        def VOLATILE(self):
            return self.getToken(CSharpParser.VOLATILE, 0)

        def WHILE(self):
            return self.getToken(CSharpParser.WHILE, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_keyword

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterKeyword" ):
                listener.enterKeyword(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitKeyword" ):
                listener.exitKeyword(self)




    def keyword(self):

        localctx = CSharpParser.KeywordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 522, self.RULE_keyword)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3154
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & -6948069689681755648) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & 22235423441908955) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Class_definitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CLASS(self):
            return self.getToken(CSharpParser.CLASS, 0)

        def identifier(self):
            return self.getTypedRuleContext(CSharpParser.IdentifierContext,0)


        def class_body(self):
            return self.getTypedRuleContext(CSharpParser.Class_bodyContext,0)


        def class_modifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Class_modifierContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Class_modifierContext,i)


        def PARTIAL(self):
            return self.getToken(CSharpParser.PARTIAL, 0)

        def type_parameter_list(self):
            return self.getTypedRuleContext(CSharpParser.Type_parameter_listContext,0)


        def primary_constructor_parameters(self):
            return self.getTypedRuleContext(CSharpParser.Primary_constructor_parametersContext,0)


        def class_base(self):
            return self.getTypedRuleContext(CSharpParser.Class_baseContext,0)


        def type_parameter_constraints_clauses(self):
            return self.getTypedRuleContext(CSharpParser.Type_parameter_constraints_clausesContext,0)


        def SEMICOLON(self):
            return self.getToken(CSharpParser.SEMICOLON, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_class_definition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClass_definition" ):
                listener.enterClass_definition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClass_definition" ):
                listener.exitClass_definition(self)




    def class_definition(self):

        localctx = CSharpParser.Class_definitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 524, self.RULE_class_definition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3159
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & 1153062242095202816) != 0) or ((((_la - 70)) & ~0x3f) == 0 and ((1 << (_la - 70)) & 2199159599105) != 0):
                self.state = 3156
                self.class_modifier()
                self.state = 3161
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 3163
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==81:
                self.state = 3162
                self.match(CSharpParser.PARTIAL)


            self.state = 3165
            self.match(CSharpParser.CLASS)
            self.state = 3166
            self.identifier()
            self.state = 3168
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==157:
                self.state = 3167
                self.type_parameter_list()


            self.state = 3171
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==140:
                self.state = 3170
                self.primary_constructor_parameters()


            self.state = 3174
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==144:
                self.state = 3173
                self.class_base()


            self.state = 3177
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==119:
                self.state = 3176
                self.type_parameter_constraints_clauses()


            self.state = 3179
            self.class_body()
            self.state = 3181
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,389,self._ctx)
            if la_ == 1:
                self.state = 3180
                self.match(CSharpParser.SEMICOLON)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Primary_constructor_parametersContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PARENS(self):
            return self.getToken(CSharpParser.OPEN_PARENS, 0)

        def CLOSE_PARENS(self):
            return self.getToken(CSharpParser.CLOSE_PARENS, 0)

        def formal_parameter_list(self):
            return self.getTypedRuleContext(CSharpParser.Formal_parameter_listContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_primary_constructor_parameters

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrimary_constructor_parameters" ):
                listener.enterPrimary_constructor_parameters(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrimary_constructor_parameters" ):
                listener.exitPrimary_constructor_parameters(self)




    def primary_constructor_parameters(self):

        localctx = CSharpParser.Primary_constructor_parametersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 526, self.RULE_primary_constructor_parameters)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3183
            self.match(CSharpParser.OPEN_PARENS)
            self.state = 3185
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 5065494716463428608) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 1357087776337782299) != 0) or _la==138 or _la==140:
                self.state = 3184
                self.formal_parameter_list()


            self.state = 3187
            self.match(CSharpParser.CLOSE_PARENS)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Class_modifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NEW(self):
            return self.getToken(CSharpParser.NEW, 0)

        def PUBLIC(self):
            return self.getToken(CSharpParser.PUBLIC, 0)

        def PROTECTED(self):
            return self.getToken(CSharpParser.PROTECTED, 0)

        def INTERNAL(self):
            return self.getToken(CSharpParser.INTERNAL, 0)

        def PRIVATE(self):
            return self.getToken(CSharpParser.PRIVATE, 0)

        def ABSTRACT(self):
            return self.getToken(CSharpParser.ABSTRACT, 0)

        def SEALED(self):
            return self.getToken(CSharpParser.SEALED, 0)

        def STATIC(self):
            return self.getToken(CSharpParser.STATIC, 0)

        def UNSAFE(self):
            return self.getToken(CSharpParser.UNSAFE, 0)

        def FILE(self):
            return self.getToken(CSharpParser.FILE, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_class_modifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClass_modifier" ):
                listener.enterClass_modifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClass_modifier" ):
                listener.exitClass_modifier(self)




    def class_modifier(self):

        localctx = CSharpParser.Class_modifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 528, self.RULE_class_modifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3189
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 1153062242095202816) != 0) or ((((_la - 70)) & ~0x3f) == 0 and ((1 << (_la - 70)) & 2199159599105) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Struct_definitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STRUCT(self):
            return self.getToken(CSharpParser.STRUCT, 0)

        def identifier(self):
            return self.getTypedRuleContext(CSharpParser.IdentifierContext,0)


        def struct_body(self):
            return self.getTypedRuleContext(CSharpParser.Struct_bodyContext,0)


        def struct_modifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Struct_modifierContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Struct_modifierContext,i)


        def REF(self):
            return self.getToken(CSharpParser.REF, 0)

        def PARTIAL(self):
            return self.getToken(CSharpParser.PARTIAL, 0)

        def RECORD(self):
            return self.getToken(CSharpParser.RECORD, 0)

        def READONLY(self):
            return self.getToken(CSharpParser.READONLY, 0)

        def type_parameter_list(self):
            return self.getTypedRuleContext(CSharpParser.Type_parameter_listContext,0)


        def struct_interfaces(self):
            return self.getTypedRuleContext(CSharpParser.Struct_interfacesContext,0)


        def type_parameter_constraints_clauses(self):
            return self.getTypedRuleContext(CSharpParser.Type_parameter_constraints_clausesContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_struct_definition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStruct_definition" ):
                listener.enterStruct_definition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStruct_definition" ):
                listener.exitStruct_definition(self)




    def struct_definition(self):

        localctx = CSharpParser.Struct_definitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 530, self.RULE_struct_definition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3194
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,391,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 3191
                    self.struct_modifier() 
                self.state = 3196
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,391,self._ctx)

            self.state = 3198
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==87:
                self.state = 3197
                self.match(CSharpParser.REF)


            self.state = 3201
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==81:
                self.state = 3200
                self.match(CSharpParser.PARTIAL)


            self.state = 3206
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [122]:
                self.state = 3203
                self.match(CSharpParser.RECORD)
                pass
            elif token in [85]:
                self.state = 3204
                self.match(CSharpParser.READONLY)
                self.state = 3205
                self.match(CSharpParser.RECORD)
                pass
            elif token in [99]:
                pass
            else:
                pass
            self.state = 3208
            self.match(CSharpParser.STRUCT)
            self.state = 3209
            self.identifier()
            self.state = 3211
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==157:
                self.state = 3210
                self.type_parameter_list()


            self.state = 3214
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==144:
                self.state = 3213
                self.struct_interfaces()


            self.state = 3217
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==119:
                self.state = 3216
                self.type_parameter_constraints_clauses()


            self.state = 3219
            self.struct_body()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Struct_modifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NEW(self):
            return self.getToken(CSharpParser.NEW, 0)

        def PUBLIC(self):
            return self.getToken(CSharpParser.PUBLIC, 0)

        def PROTECTED(self):
            return self.getToken(CSharpParser.PROTECTED, 0)

        def INTERNAL(self):
            return self.getToken(CSharpParser.INTERNAL, 0)

        def PRIVATE(self):
            return self.getToken(CSharpParser.PRIVATE, 0)

        def READONLY(self):
            return self.getToken(CSharpParser.READONLY, 0)

        def UNSAFE(self):
            return self.getToken(CSharpParser.UNSAFE, 0)

        def FILE(self):
            return self.getToken(CSharpParser.FILE, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_struct_modifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStruct_modifier" ):
                listener.enterStruct_modifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStruct_modifier" ):
                listener.exitStruct_modifier(self)




    def struct_modifier(self):

        localctx = CSharpParser.Struct_modifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 532, self.RULE_struct_modifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3221
            _la = self._input.LA(1)
            if not(_la==47 or _la==60 or ((((_la - 70)) & ~0x3f) == 0 and ((1 << (_la - 70)) & 2199023316993) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Interface_definitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INTERFACE(self):
            return self.getToken(CSharpParser.INTERFACE, 0)

        def identifier(self):
            return self.getTypedRuleContext(CSharpParser.IdentifierContext,0)


        def class_body(self):
            return self.getTypedRuleContext(CSharpParser.Class_bodyContext,0)


        def variant_type_parameter_list(self):
            return self.getTypedRuleContext(CSharpParser.Variant_type_parameter_listContext,0)


        def interface_base(self):
            return self.getTypedRuleContext(CSharpParser.Interface_baseContext,0)


        def type_parameter_constraints_clauses(self):
            return self.getTypedRuleContext(CSharpParser.Type_parameter_constraints_clausesContext,0)


        def SEMICOLON(self):
            return self.getToken(CSharpParser.SEMICOLON, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_interface_definition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterface_definition" ):
                listener.enterInterface_definition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterface_definition" ):
                listener.exitInterface_definition(self)




    def interface_definition(self):

        localctx = CSharpParser.Interface_definitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 534, self.RULE_interface_definition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3223
            self.match(CSharpParser.INTERFACE)
            self.state = 3224
            self.identifier()
            self.state = 3226
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==157:
                self.state = 3225
                self.variant_type_parameter_list()


            self.state = 3229
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==144:
                self.state = 3228
                self.interface_base()


            self.state = 3232
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==119:
                self.state = 3231
                self.type_parameter_constraints_clauses()


            self.state = 3234
            self.class_body()
            self.state = 3236
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,401,self._ctx)
            if la_ == 1:
                self.state = 3235
                self.match(CSharpParser.SEMICOLON)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Enum_definitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ENUM(self):
            return self.getToken(CSharpParser.ENUM, 0)

        def identifier(self):
            return self.getTypedRuleContext(CSharpParser.IdentifierContext,0)


        def enum_body(self):
            return self.getTypedRuleContext(CSharpParser.Enum_bodyContext,0)


        def enum_base(self):
            return self.getTypedRuleContext(CSharpParser.Enum_baseContext,0)


        def SEMICOLON(self):
            return self.getToken(CSharpParser.SEMICOLON, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_enum_definition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnum_definition" ):
                listener.enterEnum_definition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnum_definition" ):
                listener.exitEnum_definition(self)




    def enum_definition(self):

        localctx = CSharpParser.Enum_definitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 536, self.RULE_enum_definition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3238
            self.match(CSharpParser.ENUM)
            self.state = 3239
            self.identifier()
            self.state = 3241
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==144:
                self.state = 3240
                self.enum_base()


            self.state = 3243
            self.enum_body()
            self.state = 3245
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,403,self._ctx)
            if la_ == 1:
                self.state = 3244
                self.match(CSharpParser.SEMICOLON)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Delegate_definitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DELEGATE(self):
            return self.getToken(CSharpParser.DELEGATE, 0)

        def return_type(self):
            return self.getTypedRuleContext(CSharpParser.Return_typeContext,0)


        def identifier(self):
            return self.getTypedRuleContext(CSharpParser.IdentifierContext,0)


        def OPEN_PARENS(self):
            return self.getToken(CSharpParser.OPEN_PARENS, 0)

        def CLOSE_PARENS(self):
            return self.getToken(CSharpParser.CLOSE_PARENS, 0)

        def SEMICOLON(self):
            return self.getToken(CSharpParser.SEMICOLON, 0)

        def variant_type_parameter_list(self):
            return self.getTypedRuleContext(CSharpParser.Variant_type_parameter_listContext,0)


        def formal_parameter_list(self):
            return self.getTypedRuleContext(CSharpParser.Formal_parameter_listContext,0)


        def type_parameter_constraints_clauses(self):
            return self.getTypedRuleContext(CSharpParser.Type_parameter_constraints_clausesContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_delegate_definition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDelegate_definition" ):
                listener.enterDelegate_definition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDelegate_definition" ):
                listener.exitDelegate_definition(self)




    def delegate_definition(self):

        localctx = CSharpParser.Delegate_definitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 538, self.RULE_delegate_definition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3247
            self.match(CSharpParser.DELEGATE)
            self.state = 3248
            self.return_type()
            self.state = 3249
            self.identifier()
            self.state = 3251
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==157:
                self.state = 3250
                self.variant_type_parameter_list()


            self.state = 3253
            self.match(CSharpParser.OPEN_PARENS)
            self.state = 3255
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 5065494716463428608) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 1357087776337782299) != 0) or _la==138 or _la==140:
                self.state = 3254
                self.formal_parameter_list()


            self.state = 3257
            self.match(CSharpParser.CLOSE_PARENS)
            self.state = 3259
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==119:
                self.state = 3258
                self.type_parameter_constraints_clauses()


            self.state = 3261
            self.match(CSharpParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Event_declarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EVENT(self):
            return self.getToken(CSharpParser.EVENT, 0)

        def type_(self):
            return self.getTypedRuleContext(CSharpParser.Type_Context,0)


        def variable_declarators(self):
            return self.getTypedRuleContext(CSharpParser.Variable_declaratorsContext,0)


        def SEMICOLON(self):
            return self.getToken(CSharpParser.SEMICOLON, 0)

        def member_name(self):
            return self.getTypedRuleContext(CSharpParser.Member_nameContext,0)


        def OPEN_BRACE(self):
            return self.getToken(CSharpParser.OPEN_BRACE, 0)

        def event_accessor_declarations(self):
            return self.getTypedRuleContext(CSharpParser.Event_accessor_declarationsContext,0)


        def CLOSE_BRACE(self):
            return self.getToken(CSharpParser.CLOSE_BRACE, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_event_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEvent_declaration" ):
                listener.enterEvent_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEvent_declaration" ):
                listener.exitEvent_declaration(self)




    def event_declaration(self):

        localctx = CSharpParser.Event_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 540, self.RULE_event_declaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3263
            self.match(CSharpParser.EVENT)
            self.state = 3264
            self.type_()
            self.state = 3273
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,407,self._ctx)
            if la_ == 1:
                self.state = 3265
                self.variable_declarators()
                self.state = 3266
                self.match(CSharpParser.SEMICOLON)
                pass

            elif la_ == 2:
                self.state = 3268
                self.member_name()
                self.state = 3269
                self.match(CSharpParser.OPEN_BRACE)
                self.state = 3270
                self.event_accessor_declarations()
                self.state = 3271
                self.match(CSharpParser.CLOSE_BRACE)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Field_declarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def variable_declarators(self):
            return self.getTypedRuleContext(CSharpParser.Variable_declaratorsContext,0)


        def SEMICOLON(self):
            return self.getToken(CSharpParser.SEMICOLON, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_field_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterField_declaration" ):
                listener.enterField_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitField_declaration" ):
                listener.exitField_declaration(self)




    def field_declaration(self):

        localctx = CSharpParser.Field_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 542, self.RULE_field_declaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3275
            self.variable_declarators()
            self.state = 3276
            self.match(CSharpParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Property_declarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def member_name(self):
            return self.getTypedRuleContext(CSharpParser.Member_nameContext,0)


        def OPEN_BRACE(self):
            return self.getToken(CSharpParser.OPEN_BRACE, 0)

        def accessor_declarations(self):
            return self.getTypedRuleContext(CSharpParser.Accessor_declarationsContext,0)


        def CLOSE_BRACE(self):
            return self.getToken(CSharpParser.CLOSE_BRACE, 0)

        def right_arrow(self):
            return self.getTypedRuleContext(CSharpParser.Right_arrowContext,0)


        def throwable_expression(self):
            return self.getTypedRuleContext(CSharpParser.Throwable_expressionContext,0)


        def SEMICOLON(self):
            return self.getToken(CSharpParser.SEMICOLON, 0)

        def ASSIGNMENT(self):
            return self.getToken(CSharpParser.ASSIGNMENT, 0)

        def variable_initializer(self):
            return self.getTypedRuleContext(CSharpParser.Variable_initializerContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_property_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProperty_declaration" ):
                listener.enterProperty_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProperty_declaration" ):
                listener.exitProperty_declaration(self)




    def property_declaration(self):

        localctx = CSharpParser.Property_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 544, self.RULE_property_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3278
            self.member_name()
            self.state = 3292
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [136]:
                self.state = 3279
                self.match(CSharpParser.OPEN_BRACE)
                self.state = 3280
                self.accessor_declarations()
                self.state = 3281
                self.match(CSharpParser.CLOSE_BRACE)
                self.state = 3286
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==156:
                    self.state = 3282
                    self.match(CSharpParser.ASSIGNMENT)
                    self.state = 3283
                    self.variable_initializer()
                    self.state = 3284
                    self.match(CSharpParser.SEMICOLON)


                pass
            elif token in [156]:
                self.state = 3288
                self.right_arrow()
                self.state = 3289
                self.throwable_expression()
                self.state = 3290
                self.match(CSharpParser.SEMICOLON)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Constant_declarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CONST(self):
            return self.getToken(CSharpParser.CONST, 0)

        def type_(self):
            return self.getTypedRuleContext(CSharpParser.Type_Context,0)


        def constant_declarators(self):
            return self.getTypedRuleContext(CSharpParser.Constant_declaratorsContext,0)


        def SEMICOLON(self):
            return self.getToken(CSharpParser.SEMICOLON, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_constant_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstant_declaration" ):
                listener.enterConstant_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstant_declaration" ):
                listener.exitConstant_declaration(self)




    def constant_declaration(self):

        localctx = CSharpParser.Constant_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 546, self.RULE_constant_declaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3294
            self.match(CSharpParser.CONST)
            self.state = 3295
            self.type_()
            self.state = 3296
            self.constant_declarators()
            self.state = 3297
            self.match(CSharpParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Indexer_declarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def THIS(self):
            return self.getToken(CSharpParser.THIS, 0)

        def OPEN_BRACKET(self):
            return self.getToken(CSharpParser.OPEN_BRACKET, 0)

        def formal_parameter_list(self):
            return self.getTypedRuleContext(CSharpParser.Formal_parameter_listContext,0)


        def CLOSE_BRACKET(self):
            return self.getToken(CSharpParser.CLOSE_BRACKET, 0)

        def OPEN_BRACE(self):
            return self.getToken(CSharpParser.OPEN_BRACE, 0)

        def accessor_declarations(self):
            return self.getTypedRuleContext(CSharpParser.Accessor_declarationsContext,0)


        def CLOSE_BRACE(self):
            return self.getToken(CSharpParser.CLOSE_BRACE, 0)

        def right_arrow(self):
            return self.getTypedRuleContext(CSharpParser.Right_arrowContext,0)


        def throwable_expression(self):
            return self.getTypedRuleContext(CSharpParser.Throwable_expressionContext,0)


        def SEMICOLON(self):
            return self.getToken(CSharpParser.SEMICOLON, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_indexer_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndexer_declaration" ):
                listener.enterIndexer_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndexer_declaration" ):
                listener.exitIndexer_declaration(self)




    def indexer_declaration(self):

        localctx = CSharpParser.Indexer_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 548, self.RULE_indexer_declaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3299
            self.match(CSharpParser.THIS)
            self.state = 3300
            self.match(CSharpParser.OPEN_BRACKET)
            self.state = 3301
            self.formal_parameter_list()
            self.state = 3302
            self.match(CSharpParser.CLOSE_BRACKET)
            self.state = 3311
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [136]:
                self.state = 3303
                self.match(CSharpParser.OPEN_BRACE)
                self.state = 3304
                self.accessor_declarations()
                self.state = 3305
                self.match(CSharpParser.CLOSE_BRACE)
                pass
            elif token in [156]:
                self.state = 3307
                self.right_arrow()
                self.state = 3308
                self.throwable_expression()
                self.state = 3309
                self.match(CSharpParser.SEMICOLON)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Destructor_definitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TILDE(self):
            return self.getToken(CSharpParser.TILDE, 0)

        def identifier(self):
            return self.getTypedRuleContext(CSharpParser.IdentifierContext,0)


        def OPEN_PARENS(self):
            return self.getToken(CSharpParser.OPEN_PARENS, 0)

        def CLOSE_PARENS(self):
            return self.getToken(CSharpParser.CLOSE_PARENS, 0)

        def body(self):
            return self.getTypedRuleContext(CSharpParser.BodyContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_destructor_definition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDestructor_definition" ):
                listener.enterDestructor_definition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDestructor_definition" ):
                listener.exitDestructor_definition(self)




    def destructor_definition(self):

        localctx = CSharpParser.Destructor_definitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 550, self.RULE_destructor_definition)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3313
            self.match(CSharpParser.TILDE)
            self.state = 3314
            self.identifier()
            self.state = 3315
            self.match(CSharpParser.OPEN_PARENS)
            self.state = 3316
            self.match(CSharpParser.CLOSE_PARENS)
            self.state = 3317
            self.body()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Constructor_declarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(CSharpParser.IdentifierContext,0)


        def OPEN_PARENS(self):
            return self.getToken(CSharpParser.OPEN_PARENS, 0)

        def CLOSE_PARENS(self):
            return self.getToken(CSharpParser.CLOSE_PARENS, 0)

        def body(self):
            return self.getTypedRuleContext(CSharpParser.BodyContext,0)


        def formal_parameter_list(self):
            return self.getTypedRuleContext(CSharpParser.Formal_parameter_listContext,0)


        def constructor_initializer(self):
            return self.getTypedRuleContext(CSharpParser.Constructor_initializerContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_constructor_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstructor_declaration" ):
                listener.enterConstructor_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstructor_declaration" ):
                listener.exitConstructor_declaration(self)




    def constructor_declaration(self):

        localctx = CSharpParser.Constructor_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 552, self.RULE_constructor_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3319
            self.identifier()
            self.state = 3320
            self.match(CSharpParser.OPEN_PARENS)
            self.state = 3322
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 5065494716463428608) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 1357087776337782299) != 0) or _la==138 or _la==140:
                self.state = 3321
                self.formal_parameter_list()


            self.state = 3324
            self.match(CSharpParser.CLOSE_PARENS)
            self.state = 3326
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==144:
                self.state = 3325
                self.constructor_initializer()


            self.state = 3328
            self.body()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Method_declarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def method_modifiers(self):
            return self.getTypedRuleContext(CSharpParser.Method_modifiersContext,0)


        def return_type(self):
            return self.getTypedRuleContext(CSharpParser.Return_typeContext,0)


        def method_header(self):
            return self.getTypedRuleContext(CSharpParser.Method_headerContext,0)


        def method_body(self):
            return self.getTypedRuleContext(CSharpParser.Method_bodyContext,0)


        def attributes(self):
            return self.getTypedRuleContext(CSharpParser.AttributesContext,0)


        def PUBLIC(self):
            return self.getToken(CSharpParser.PUBLIC, 0)

        def ref_method_modifiers(self):
            return self.getTypedRuleContext(CSharpParser.Ref_method_modifiersContext,0)


        def ref_kind(self):
            return self.getTypedRuleContext(CSharpParser.Ref_kindContext,0)


        def ref_return_type(self):
            return self.getTypedRuleContext(CSharpParser.Ref_return_typeContext,0)


        def ref_method_body(self):
            return self.getTypedRuleContext(CSharpParser.Ref_method_bodyContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_method_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMethod_declaration" ):
                listener.enterMethod_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMethod_declaration" ):
                listener.exitMethod_declaration(self)




    def method_declaration(self):

        localctx = CSharpParser.Method_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 554, self.RULE_method_declaration)
        self._la = 0 # Token type
        try:
            self.state = 3350
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,416,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3331
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==138:
                    self.state = 3330
                    self.attributes()


                self.state = 3333
                self.method_modifiers()
                self.state = 3335
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==84:
                    self.state = 3334
                    self.match(CSharpParser.PUBLIC)


                self.state = 3337
                self.return_type()
                self.state = 3338
                self.method_header()
                self.state = 3339
                self.method_body()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3342
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==138:
                    self.state = 3341
                    self.attributes()


                self.state = 3344
                self.ref_method_modifiers()
                self.state = 3345
                self.ref_kind()
                self.state = 3346
                self.ref_return_type()
                self.state = 3347
                self.method_header()
                self.state = 3348
                self.ref_method_body()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Method_headerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def method_member_name(self):
            return self.getTypedRuleContext(CSharpParser.Method_member_nameContext,0)


        def OPEN_PARENS(self):
            return self.getToken(CSharpParser.OPEN_PARENS, 0)

        def CLOSE_PARENS(self):
            return self.getToken(CSharpParser.CLOSE_PARENS, 0)

        def formal_parameter_list(self):
            return self.getTypedRuleContext(CSharpParser.Formal_parameter_listContext,0)


        def type_parameter_list(self):
            return self.getTypedRuleContext(CSharpParser.Type_parameter_listContext,0)


        def type_parameter_constraints_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Type_parameter_constraints_clauseContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Type_parameter_constraints_clauseContext,i)


        def getRuleIndex(self):
            return CSharpParser.RULE_method_header

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMethod_header" ):
                listener.enterMethod_header(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMethod_header" ):
                listener.exitMethod_header(self)




    def method_header(self):

        localctx = CSharpParser.Method_headerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 556, self.RULE_method_header)
        self._la = 0 # Token type
        try:
            self.state = 3372
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,420,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3352
                self.method_member_name()
                self.state = 3353
                self.match(CSharpParser.OPEN_PARENS)
                self.state = 3355
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 5065494716463428608) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 1357087776337782299) != 0) or _la==138 or _la==140:
                    self.state = 3354
                    self.formal_parameter_list()


                self.state = 3357
                self.match(CSharpParser.CLOSE_PARENS)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3359
                self.method_member_name()
                self.state = 3360
                self.type_parameter_list()
                self.state = 3361
                self.match(CSharpParser.OPEN_PARENS)
                self.state = 3363
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 5065494716463428608) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 1357087776337782299) != 0) or _la==138 or _la==140:
                    self.state = 3362
                    self.formal_parameter_list()


                self.state = 3365
                self.match(CSharpParser.CLOSE_PARENS)
                self.state = 3369
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==119:
                    self.state = 3366
                    self.type_parameter_constraints_clause()
                    self.state = 3371
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Ref_kindContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REF(self):
            return self.getToken(CSharpParser.REF, 0)

        def READONLY(self):
            return self.getToken(CSharpParser.READONLY, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_ref_kind

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRef_kind" ):
                listener.enterRef_kind(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRef_kind" ):
                listener.exitRef_kind(self)




    def ref_kind(self):

        localctx = CSharpParser.Ref_kindContext(self, self._ctx, self.state)
        self.enterRule(localctx, 558, self.RULE_ref_kind)
        try:
            self.state = 3377
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,421,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3374
                self.match(CSharpParser.REF)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3375
                self.match(CSharpParser.REF)
                self.state = 3376
                self.match(CSharpParser.READONLY)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Ref_method_modifiersContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ref_method_modifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Ref_method_modifierContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Ref_method_modifierContext,i)


        def getRuleIndex(self):
            return CSharpParser.RULE_ref_method_modifiers

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRef_method_modifiers" ):
                listener.enterRef_method_modifiers(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRef_method_modifiers" ):
                listener.exitRef_method_modifiers(self)




    def ref_method_modifiers(self):

        localctx = CSharpParser.Ref_method_modifiersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 560, self.RULE_ref_method_modifiers)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3382
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & 1152925902653358592) != 0) or ((((_la - 70)) & ~0x3f) == 0 and ((1 << (_la - 70)) & 37383531688449) != 0):
                self.state = 3379
                self.ref_method_modifier()
                self.state = 3384
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Ref_return_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def type_(self):
            return self.getTypedRuleContext(CSharpParser.Type_Context,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_ref_return_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRef_return_type" ):
                listener.enterRef_return_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRef_return_type" ):
                listener.exitRef_return_type(self)




    def ref_return_type(self):

        localctx = CSharpParser.Ref_return_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 562, self.RULE_ref_return_type)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3385
            self.type_()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Method_modifiersContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def method_modifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Method_modifierContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Method_modifierContext,i)


        def PARTIAL(self):
            return self.getToken(CSharpParser.PARTIAL, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_method_modifiers

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMethod_modifiers" ):
                listener.enterMethod_modifiers(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMethod_modifiers" ):
                listener.exitMethod_modifiers(self)




    def method_modifiers(self):

        localctx = CSharpParser.Method_modifiersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 564, self.RULE_method_modifiers)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3390
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,423,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 3387
                    self.method_modifier() 
                self.state = 3392
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,423,self._ctx)

            self.state = 3394
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,424,self._ctx)
            if la_ == 1:
                self.state = 3393
                self.match(CSharpParser.PARTIAL)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Method_modifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ref_method_modifier(self):
            return self.getTypedRuleContext(CSharpParser.Ref_method_modifierContext,0)


        def ASYNC(self):
            return self.getToken(CSharpParser.ASYNC, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_method_modifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMethod_modifier" ):
                listener.enterMethod_modifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMethod_modifier" ):
                listener.exitMethod_modifier(self)




    def method_modifier(self):

        localctx = CSharpParser.Method_modifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 566, self.RULE_method_modifier)
        try:
            self.state = 3398
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [9, 42, 60, 70, 79, 82, 83, 84, 91, 97, 111, 115]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3396
                self.ref_method_modifier()
                pass
            elif token in [16]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3397
                self.match(CSharpParser.ASYNC)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Ref_method_bodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def block(self):
            return self.getTypedRuleContext(CSharpParser.BlockContext,0)


        def right_arrow(self):
            return self.getTypedRuleContext(CSharpParser.Right_arrowContext,0)


        def REF(self):
            return self.getToken(CSharpParser.REF, 0)

        def variable_reference(self):
            return self.getTypedRuleContext(CSharpParser.Variable_referenceContext,0)


        def SEMICOLON(self):
            return self.getToken(CSharpParser.SEMICOLON, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_ref_method_body

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRef_method_body" ):
                listener.enterRef_method_body(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRef_method_body" ):
                listener.exitRef_method_body(self)




    def ref_method_body(self):

        localctx = CSharpParser.Ref_method_bodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 568, self.RULE_ref_method_body)
        try:
            self.state = 3407
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [136]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3400
                self.block()
                pass
            elif token in [156]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3401
                self.right_arrow()
                self.state = 3402
                self.match(CSharpParser.REF)
                self.state = 3403
                self.variable_reference()
                self.state = 3404
                self.match(CSharpParser.SEMICOLON)
                pass
            elif token in [145]:
                self.enterOuterAlt(localctx, 3)
                self.state = 3406
                self.match(CSharpParser.SEMICOLON)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Ref_method_modifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NEW(self):
            return self.getToken(CSharpParser.NEW, 0)

        def PUBLIC(self):
            return self.getToken(CSharpParser.PUBLIC, 0)

        def PROTECTED(self):
            return self.getToken(CSharpParser.PROTECTED, 0)

        def INTERNAL(self):
            return self.getToken(CSharpParser.INTERNAL, 0)

        def PRIVATE(self):
            return self.getToken(CSharpParser.PRIVATE, 0)

        def STATIC(self):
            return self.getToken(CSharpParser.STATIC, 0)

        def VIRTUAL(self):
            return self.getToken(CSharpParser.VIRTUAL, 0)

        def SEALED(self):
            return self.getToken(CSharpParser.SEALED, 0)

        def OVERRIDE(self):
            return self.getToken(CSharpParser.OVERRIDE, 0)

        def ABSTRACT(self):
            return self.getToken(CSharpParser.ABSTRACT, 0)

        def EXTERN(self):
            return self.getToken(CSharpParser.EXTERN, 0)

        def UNSAFE(self):
            return self.getToken(CSharpParser.UNSAFE, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_ref_method_modifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRef_method_modifier" ):
                listener.enterRef_method_modifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRef_method_modifier" ):
                listener.exitRef_method_modifier(self)




    def ref_method_modifier(self):

        localctx = CSharpParser.Ref_method_modifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 570, self.RULE_ref_method_modifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3409
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 1152925902653358592) != 0) or ((((_la - 70)) & ~0x3f) == 0 and ((1 << (_la - 70)) & 37383531688449) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Method_member_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(CSharpParser.IdentifierContext,i)


        def DOUBLE_COLON(self):
            return self.getToken(CSharpParser.DOUBLE_COLON, 0)

        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.DOT)
            else:
                return self.getToken(CSharpParser.DOT, i)

        def type_argument_list(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Type_argument_listContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Type_argument_listContext,i)


        def getRuleIndex(self):
            return CSharpParser.RULE_method_member_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMethod_member_name" ):
                listener.enterMethod_member_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMethod_member_name" ):
                listener.exitMethod_member_name(self)




    def method_member_name(self):

        localctx = CSharpParser.Method_member_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 572, self.RULE_method_member_name)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3416
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,427,self._ctx)
            if la_ == 1:
                self.state = 3411
                self.identifier()
                pass

            elif la_ == 2:
                self.state = 3412
                self.identifier()
                self.state = 3413
                self.match(CSharpParser.DOUBLE_COLON)
                self.state = 3414
                self.identifier()
                pass


            self.state = 3425
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,429,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 3419
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==157:
                        self.state = 3418
                        self.type_argument_list()


                    self.state = 3421
                    self.match(CSharpParser.DOT)
                    self.state = 3422
                    self.identifier() 
                self.state = 3427
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,429,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Operator_declarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPERATOR(self):
            return self.getToken(CSharpParser.OPERATOR, 0)

        def overloadable_operator(self):
            return self.getTypedRuleContext(CSharpParser.Overloadable_operatorContext,0)


        def OPEN_PARENS(self):
            return self.getToken(CSharpParser.OPEN_PARENS, 0)

        def arg_declaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Arg_declarationContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Arg_declarationContext,i)


        def CLOSE_PARENS(self):
            return self.getToken(CSharpParser.CLOSE_PARENS, 0)

        def body(self):
            return self.getTypedRuleContext(CSharpParser.BodyContext,0)


        def right_arrow(self):
            return self.getTypedRuleContext(CSharpParser.Right_arrowContext,0)


        def throwable_expression(self):
            return self.getTypedRuleContext(CSharpParser.Throwable_expressionContext,0)


        def SEMICOLON(self):
            return self.getToken(CSharpParser.SEMICOLON, 0)

        def IN(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.IN)
            else:
                return self.getToken(CSharpParser.IN, i)

        def COMMA(self):
            return self.getToken(CSharpParser.COMMA, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_operator_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOperator_declaration" ):
                listener.enterOperator_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOperator_declaration" ):
                listener.exitOperator_declaration(self)




    def operator_declaration(self):

        localctx = CSharpParser.Operator_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 574, self.RULE_operator_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3428
            self.match(CSharpParser.OPERATOR)
            self.state = 3429
            self.overloadable_operator()
            self.state = 3430
            self.match(CSharpParser.OPEN_PARENS)
            self.state = 3432
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==57:
                self.state = 3431
                self.match(CSharpParser.IN)


            self.state = 3434
            self.arg_declaration()
            self.state = 3440
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==143:
                self.state = 3435
                self.match(CSharpParser.COMMA)
                self.state = 3437
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==57:
                    self.state = 3436
                    self.match(CSharpParser.IN)


                self.state = 3439
                self.arg_declaration()


            self.state = 3442
            self.match(CSharpParser.CLOSE_PARENS)
            self.state = 3448
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,433,self._ctx)
            if la_ == 1:
                self.state = 3443
                self.body()
                pass

            elif la_ == 2:
                self.state = 3444
                self.right_arrow()
                self.state = 3445
                self.throwable_expression()
                self.state = 3446
                self.match(CSharpParser.SEMICOLON)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Arg_declarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def type_(self):
            return self.getTypedRuleContext(CSharpParser.Type_Context,0)


        def identifier(self):
            return self.getTypedRuleContext(CSharpParser.IdentifierContext,0)


        def ASSIGNMENT(self):
            return self.getToken(CSharpParser.ASSIGNMENT, 0)

        def expression(self):
            return self.getTypedRuleContext(CSharpParser.ExpressionContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_arg_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArg_declaration" ):
                listener.enterArg_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArg_declaration" ):
                listener.exitArg_declaration(self)




    def arg_declaration(self):

        localctx = CSharpParser.Arg_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 576, self.RULE_arg_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3450
            self.type_()
            self.state = 3451
            self.identifier()
            self.state = 3454
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==156:
                self.state = 3452
                self.match(CSharpParser.ASSIGNMENT)
                self.state = 3453
                self.expression()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Method_invocationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def primary_expression(self):
            return self.getTypedRuleContext(CSharpParser.Primary_expressionContext,0)


        def OPEN_PARENS(self):
            return self.getToken(CSharpParser.OPEN_PARENS, 0)

        def CLOSE_PARENS(self):
            return self.getToken(CSharpParser.CLOSE_PARENS, 0)

        def argument_list(self):
            return self.getTypedRuleContext(CSharpParser.Argument_listContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_method_invocation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMethod_invocation" ):
                listener.enterMethod_invocation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMethod_invocation" ):
                listener.exitMethod_invocation(self)




    def method_invocation(self):

        localctx = CSharpParser.Method_invocationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 578, self.RULE_method_invocation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3456
            self.primary_expression()
            self.state = 3462
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,436,self._ctx)
            if la_ == 1:
                self.state = 3457
                self.match(CSharpParser.OPEN_PARENS)
                self.state = 3459
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 5065503514771305472) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -948717009814526117) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & 18014450294199551) != 0):
                    self.state = 3458
                    self.argument_list()


                self.state = 3461
                self.match(CSharpParser.CLOSE_PARENS)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Object_creation_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PARENS(self):
            return self.getToken(CSharpParser.OPEN_PARENS, 0)

        def CLOSE_PARENS(self):
            return self.getToken(CSharpParser.CLOSE_PARENS, 0)

        def argument_list(self):
            return self.getTypedRuleContext(CSharpParser.Argument_listContext,0)


        def object_or_collection_initializer(self):
            return self.getTypedRuleContext(CSharpParser.Object_or_collection_initializerContext,0)


        def target_typed_new(self):
            return self.getTypedRuleContext(CSharpParser.Target_typed_newContext,0)


        def OPEN_BRACKET(self):
            return self.getToken(CSharpParser.OPEN_BRACKET, 0)

        def expression_list(self):
            return self.getTypedRuleContext(CSharpParser.Expression_listContext,0)


        def CLOSE_BRACKET(self):
            return self.getToken(CSharpParser.CLOSE_BRACKET, 0)

        def rank_specifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Rank_specifierContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Rank_specifierContext,i)


        def array_initializer(self):
            return self.getTypedRuleContext(CSharpParser.Array_initializerContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_object_creation_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterObject_creation_expression" ):
                listener.enterObject_creation_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitObject_creation_expression" ):
                listener.exitObject_creation_expression(self)




    def object_creation_expression(self):

        localctx = CSharpParser.Object_creation_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 580, self.RULE_object_creation_expression)
        self._la = 0 # Token type
        try:
            self.state = 3486
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,441,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3464
                self.match(CSharpParser.OPEN_PARENS)
                self.state = 3466
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 5065503514771305472) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -948717009814526117) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & 18014450294199551) != 0):
                    self.state = 3465
                    self.argument_list()


                self.state = 3468
                self.match(CSharpParser.CLOSE_PARENS)
                self.state = 3470
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,438,self._ctx)
                if la_ == 1:
                    self.state = 3469
                    self.object_or_collection_initializer()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3472
                self.object_or_collection_initializer()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 3473
                self.target_typed_new()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 3474
                self.match(CSharpParser.OPEN_BRACKET)
                self.state = 3475
                self.expression_list()
                self.state = 3476
                self.match(CSharpParser.CLOSE_BRACKET)
                self.state = 3480
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,439,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 3477
                        self.rank_specifier() 
                    self.state = 3482
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,439,self._ctx)

                self.state = 3484
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,440,self._ctx)
                if la_ == 1:
                    self.state = 3483
                    self.array_initializer()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Target_typed_newContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PARENS(self):
            return self.getToken(CSharpParser.OPEN_PARENS, 0)

        def CLOSE_PARENS(self):
            return self.getToken(CSharpParser.CLOSE_PARENS, 0)

        def argument_list(self):
            return self.getTypedRuleContext(CSharpParser.Argument_listContext,0)


        def object_or_collection_initializer(self):
            return self.getTypedRuleContext(CSharpParser.Object_or_collection_initializerContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_target_typed_new

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTarget_typed_new" ):
                listener.enterTarget_typed_new(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTarget_typed_new" ):
                listener.exitTarget_typed_new(self)




    def target_typed_new(self):

        localctx = CSharpParser.Target_typed_newContext(self, self._ctx, self.state)
        self.enterRule(localctx, 582, self.RULE_target_typed_new)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3488
            self.match(CSharpParser.OPEN_PARENS)
            self.state = 3490
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 5065503514771305472) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -948717009814526117) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & 18014450294199551) != 0):
                self.state = 3489
                self.argument_list()


            self.state = 3492
            self.match(CSharpParser.CLOSE_PARENS)
            self.state = 3494
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,443,self._ctx)
            if la_ == 1:
                self.state = 3493
                self.object_or_collection_initializer()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self):
            return self.getToken(CSharpParser.IDENTIFIER, 0)

        def ADD(self):
            return self.getToken(CSharpParser.ADD, 0)

        def ALIAS(self):
            return self.getToken(CSharpParser.ALIAS, 0)

        def ARGLIST(self):
            return self.getToken(CSharpParser.ARGLIST, 0)

        def ASCENDING(self):
            return self.getToken(CSharpParser.ASCENDING, 0)

        def ASYNC(self):
            return self.getToken(CSharpParser.ASYNC, 0)

        def AWAIT(self):
            return self.getToken(CSharpParser.AWAIT, 0)

        def BY(self):
            return self.getToken(CSharpParser.BY, 0)

        def DESCENDING(self):
            return self.getToken(CSharpParser.DESCENDING, 0)

        def DYNAMIC(self):
            return self.getToken(CSharpParser.DYNAMIC, 0)

        def EQUALS(self):
            return self.getToken(CSharpParser.EQUALS, 0)

        def FROM(self):
            return self.getToken(CSharpParser.FROM, 0)

        def GET(self):
            return self.getToken(CSharpParser.GET, 0)

        def GROUP(self):
            return self.getToken(CSharpParser.GROUP, 0)

        def INTO(self):
            return self.getToken(CSharpParser.INTO, 0)

        def JOIN(self):
            return self.getToken(CSharpParser.JOIN, 0)

        def LET(self):
            return self.getToken(CSharpParser.LET, 0)

        def NAMEOF(self):
            return self.getToken(CSharpParser.NAMEOF, 0)

        def ON(self):
            return self.getToken(CSharpParser.ON, 0)

        def ORDERBY(self):
            return self.getToken(CSharpParser.ORDERBY, 0)

        def PARTIAL(self):
            return self.getToken(CSharpParser.PARTIAL, 0)

        def REMOVE(self):
            return self.getToken(CSharpParser.REMOVE, 0)

        def SELECT(self):
            return self.getToken(CSharpParser.SELECT, 0)

        def SET(self):
            return self.getToken(CSharpParser.SET, 0)

        def UNMANAGED(self):
            return self.getToken(CSharpParser.UNMANAGED, 0)

        def VAR(self):
            return self.getToken(CSharpParser.VAR, 0)

        def WHEN(self):
            return self.getToken(CSharpParser.WHEN, 0)

        def WHERE(self):
            return self.getToken(CSharpParser.WHERE, 0)

        def YIELD(self):
            return self.getToken(CSharpParser.YIELD, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_identifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentifier" ):
                listener.enterIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentifier" ):
                listener.exitIdentifier(self)




    def identifier(self):

        localctx = CSharpParser.IdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 584, self.RULE_identifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3496
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 4633078743724962816) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 1352276157684392979) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[246] = self.right_arrow_sempred
        self._predicates[247] = self.right_shift_sempred
        self._predicates[248] = self.right_shift_assignment_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def right_arrow_sempred(self, localctx:Right_arrowContext, predIndex:int):
            if predIndex == 0:
                return (0 if localctx.first is None else localctx.first.tokenIndex) + 1 == (0 if localctx.second is None else localctx.second.tokenIndex)
         

    def right_shift_sempred(self, localctx:Right_shiftContext, predIndex:int):
            if predIndex == 1:
                return (0 if localctx.first is None else localctx.first.tokenIndex) + 1 == (0 if localctx.second is None else localctx.second.tokenIndex)
         

    def right_shift_assignment_sempred(self, localctx:Right_shift_assignmentContext, predIndex:int):
            if predIndex == 2:
                return (0 if localctx.first is None else localctx.first.tokenIndex) + 1 == (0 if localctx.second is None else localctx.second.tokenIndex)
         





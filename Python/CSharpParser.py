# Generated from CSharpParser.g4 by ANTLR 4.13.2
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO

if "." in __name__:
    from .CSharpParserBase import CSharpParserBase
else:
    from CSharpParserBase import CSharpParserBase

def serializedATN():
    return [
        4,1,198,2713,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,
        7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,
        13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
        20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,
        26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,
        33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,
        39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,
        46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,
        52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,2,
        59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,65,7,
        65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,2,71,7,71,2,
        72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,78,7,
        78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,2,
        85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,
        91,2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,
        98,7,98,2,99,7,99,2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,
        2,104,7,104,2,105,7,105,2,106,7,106,2,107,7,107,2,108,7,108,2,109,
        7,109,2,110,7,110,2,111,7,111,2,112,7,112,2,113,7,113,2,114,7,114,
        2,115,7,115,2,116,7,116,2,117,7,117,2,118,7,118,2,119,7,119,2,120,
        7,120,2,121,7,121,2,122,7,122,2,123,7,123,2,124,7,124,2,125,7,125,
        2,126,7,126,2,127,7,127,2,128,7,128,2,129,7,129,2,130,7,130,2,131,
        7,131,2,132,7,132,2,133,7,133,2,134,7,134,2,135,7,135,2,136,7,136,
        2,137,7,137,2,138,7,138,2,139,7,139,2,140,7,140,2,141,7,141,2,142,
        7,142,2,143,7,143,2,144,7,144,2,145,7,145,2,146,7,146,2,147,7,147,
        2,148,7,148,2,149,7,149,2,150,7,150,2,151,7,151,2,152,7,152,2,153,
        7,153,2,154,7,154,2,155,7,155,2,156,7,156,2,157,7,157,2,158,7,158,
        2,159,7,159,2,160,7,160,2,161,7,161,2,162,7,162,2,163,7,163,2,164,
        7,164,2,165,7,165,2,166,7,166,2,167,7,167,2,168,7,168,2,169,7,169,
        2,170,7,170,2,171,7,171,2,172,7,172,2,173,7,173,2,174,7,174,2,175,
        7,175,2,176,7,176,2,177,7,177,2,178,7,178,2,179,7,179,2,180,7,180,
        2,181,7,181,2,182,7,182,2,183,7,183,2,184,7,184,2,185,7,185,2,186,
        7,186,2,187,7,187,2,188,7,188,2,189,7,189,2,190,7,190,2,191,7,191,
        2,192,7,192,2,193,7,193,2,194,7,194,2,195,7,195,2,196,7,196,2,197,
        7,197,2,198,7,198,2,199,7,199,2,200,7,200,2,201,7,201,2,202,7,202,
        2,203,7,203,2,204,7,204,2,205,7,205,2,206,7,206,2,207,7,207,2,208,
        7,208,2,209,7,209,2,210,7,210,2,211,7,211,2,212,7,212,2,213,7,213,
        2,214,7,214,2,215,7,215,2,216,7,216,2,217,7,217,2,218,7,218,2,219,
        7,219,2,220,7,220,2,221,7,221,2,222,7,222,2,223,7,223,2,224,7,224,
        1,0,3,0,452,8,0,1,0,3,0,455,8,0,1,0,3,0,458,8,0,1,0,5,0,461,8,0,
        10,0,12,0,464,9,0,1,0,3,0,467,8,0,1,0,1,0,1,1,1,1,3,1,473,8,1,1,
        1,3,1,476,8,1,1,1,1,1,1,1,3,1,481,8,1,5,1,483,8,1,10,1,12,1,486,
        9,1,1,2,1,2,1,2,1,2,5,2,492,8,2,10,2,12,2,495,9,2,1,3,1,3,1,3,1,
        3,1,3,3,3,502,8,3,1,4,1,4,1,4,1,4,4,4,508,8,4,11,4,12,4,509,1,4,
        1,4,1,4,3,4,515,8,4,1,5,3,5,518,8,5,1,5,1,5,1,6,1,6,1,6,1,6,4,6,
        526,8,6,11,6,12,6,527,1,6,1,6,1,7,1,7,3,7,534,8,7,3,7,536,8,7,1,
        8,1,8,3,8,540,8,8,1,9,1,9,3,9,544,8,9,1,10,1,10,1,10,3,10,549,8,
        10,1,11,1,11,1,12,1,12,1,13,1,13,1,13,1,13,3,13,559,8,13,1,14,1,
        14,1,14,1,14,5,14,565,8,14,10,14,12,14,568,9,14,1,14,1,14,1,15,1,
        15,1,15,5,15,575,8,15,10,15,12,15,578,9,15,1,16,1,16,1,16,3,16,583,
        8,16,1,16,3,16,586,8,16,1,16,1,16,1,16,3,16,591,8,16,1,16,3,16,594,
        8,16,1,17,1,17,1,17,1,17,3,17,600,8,17,1,18,1,18,1,18,3,18,605,8,
        18,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,3,19,615,8,19,1,20,1,
        20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,3,20,628,8,20,1,
        21,1,21,1,21,1,21,1,21,1,21,3,21,636,8,21,1,22,1,22,1,22,1,22,3,
        22,642,8,22,3,22,644,8,22,1,23,1,23,1,23,5,23,649,8,23,10,23,12,
        23,652,9,23,1,24,1,24,1,24,5,24,657,8,24,10,24,12,24,660,9,24,1,
        25,1,25,1,25,5,25,665,8,25,10,25,12,25,668,9,25,1,26,1,26,1,26,5,
        26,673,8,26,10,26,12,26,676,9,26,1,27,1,27,1,27,5,27,681,8,27,10,
        27,12,27,684,9,27,1,28,1,28,1,28,5,28,689,8,28,10,28,12,28,692,9,
        28,1,29,1,29,1,29,1,29,1,29,1,29,1,29,5,29,701,8,29,10,29,12,29,
        704,9,29,1,30,1,30,1,30,3,30,709,8,30,1,30,5,30,712,8,30,10,30,12,
        30,715,9,30,1,31,1,31,1,31,5,31,720,8,31,10,31,12,31,723,9,31,1,
        32,1,32,1,32,5,32,728,8,32,10,32,12,32,731,9,32,1,33,1,33,1,33,1,
        33,1,33,3,33,738,8,33,3,33,740,8,33,1,33,3,33,743,8,33,1,34,1,34,
        1,34,5,34,748,8,34,10,34,12,34,751,9,34,1,35,1,35,3,35,755,8,35,
        1,35,1,35,1,35,1,36,1,36,3,36,762,8,36,1,36,1,36,3,36,766,8,36,3,
        36,768,8,36,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,
        37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,3,37,792,
        8,37,1,38,1,38,1,38,1,38,1,38,1,39,1,39,3,39,801,8,39,1,39,5,39,
        804,8,39,10,39,12,39,807,9,39,1,39,3,39,810,8,39,1,39,1,39,1,39,
        1,39,1,39,1,39,3,39,818,8,39,1,39,3,39,821,8,39,1,39,5,39,824,8,
        39,10,39,12,39,827,9,39,1,39,3,39,830,8,39,5,39,832,8,39,10,39,12,
        39,835,9,39,1,39,3,39,838,8,39,1,40,1,40,1,40,3,40,843,8,40,1,40,
        1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,3,40,857,
        8,40,1,40,1,40,1,40,1,40,3,40,863,8,40,1,40,1,40,1,40,1,40,1,40,
        1,40,1,40,1,40,5,40,873,8,40,10,40,12,40,876,9,40,1,40,3,40,879,
        8,40,1,40,4,40,882,8,40,11,40,12,40,883,1,40,1,40,3,40,888,8,40,
        1,40,1,40,1,40,1,40,3,40,894,8,40,1,40,1,40,1,40,1,40,4,40,900,8,
        40,11,40,12,40,901,1,40,1,40,1,40,1,40,1,40,1,40,1,40,3,40,911,8,
        40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,
        40,1,40,1,40,1,40,3,40,929,8,40,1,40,3,40,932,8,40,1,40,1,40,1,40,
        3,40,937,8,40,1,40,3,40,940,8,40,1,40,1,40,1,40,1,40,1,40,1,40,1,
        40,1,40,1,40,1,40,1,40,5,40,953,8,40,10,40,12,40,956,9,40,1,40,1,
        40,1,40,3,40,961,8,40,1,41,1,41,3,41,965,8,41,1,42,1,42,1,42,1,43,
        3,43,971,8,43,1,43,1,43,1,43,3,43,976,8,43,1,44,3,44,979,8,44,1,
        44,1,44,1,44,1,44,5,44,985,8,44,10,44,12,44,988,9,44,1,44,1,44,1,
        45,1,45,1,45,3,45,995,8,45,1,45,1,45,1,46,1,46,1,47,1,47,1,47,5,
        47,1004,8,47,10,47,12,47,1007,9,47,1,48,1,48,3,48,1011,8,48,1,49,
        1,49,1,49,3,49,1016,8,49,3,49,1018,8,49,1,49,1,49,1,50,1,50,1,50,
        5,50,1025,8,50,10,50,12,50,1028,9,50,1,51,1,51,1,51,1,51,1,51,3,
        51,1035,8,51,1,51,1,51,1,51,1,52,1,52,1,52,3,52,1043,8,52,1,53,1,
        53,1,53,1,53,5,53,1049,8,53,10,53,12,53,1052,9,53,1,53,3,53,1055,
        8,53,1,53,1,53,1,54,1,54,1,54,1,54,1,54,3,54,1064,8,54,1,55,1,55,
        1,55,3,55,1069,8,55,3,55,1071,8,55,1,55,1,55,1,56,1,56,1,56,5,56,
        1078,8,56,10,56,12,56,1081,9,56,1,57,1,57,1,57,1,57,1,57,3,57,1088,
        8,57,1,58,1,58,3,58,1092,8,58,1,58,1,58,1,58,3,58,1097,8,58,3,58,
        1099,8,58,1,58,1,58,1,58,3,58,1104,8,58,5,58,1106,8,58,10,58,12,
        58,1109,9,58,1,59,1,59,5,59,1113,8,59,10,59,12,59,1116,9,59,1,59,
        1,59,1,60,1,60,1,60,5,60,1123,8,60,10,60,12,60,1126,9,60,1,60,3,
        60,1129,8,60,1,60,3,60,1132,8,60,1,60,3,60,1135,8,60,1,61,1,61,1,
        61,1,61,5,61,1141,8,61,10,61,12,61,1144,9,61,1,61,1,61,1,62,1,62,
        1,62,1,62,1,63,3,63,1153,8,63,1,63,1,63,1,63,1,63,1,64,1,64,1,64,
        1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,3,64,1170,8,64,1,65,1,65,
        1,65,5,65,1175,8,65,10,65,12,65,1178,9,65,1,66,3,66,1181,8,66,1,
        66,1,66,1,66,1,67,1,67,1,67,5,67,1189,8,67,10,67,12,67,1192,9,67,
        1,68,1,68,3,68,1196,8,68,1,69,1,69,1,69,1,70,1,70,3,70,1203,8,70,
        1,70,1,70,1,70,1,70,1,71,5,71,1210,8,71,10,71,12,71,1213,9,71,1,
        71,1,71,3,71,1217,8,71,1,72,1,72,1,72,1,72,1,72,3,72,1224,8,72,1,
        73,1,73,1,73,1,73,1,73,1,74,1,74,1,74,1,75,1,75,3,75,1236,8,75,1,
        75,1,75,1,75,1,75,1,75,1,75,1,75,1,75,1,75,3,75,1247,8,75,1,76,1,
        76,1,76,1,76,5,76,1253,8,76,10,76,12,76,1256,9,76,1,77,1,77,3,77,
        1260,8,77,1,78,1,78,1,78,1,78,1,78,1,78,1,78,3,78,1269,8,78,1,79,
        1,79,1,79,1,79,1,80,1,80,1,80,3,80,1278,8,80,1,81,1,81,1,81,1,81,
        1,81,1,81,1,81,3,81,1287,8,81,1,82,1,82,1,82,1,83,3,83,1293,8,83,
        1,83,1,83,1,83,3,83,1298,8,83,1,83,1,83,3,83,1302,8,83,1,83,1,83,
        3,83,1306,8,83,1,84,1,84,3,84,1310,8,84,1,84,1,84,3,84,1314,8,84,
        1,85,1,85,1,85,1,85,1,85,3,85,1321,8,85,1,86,1,86,1,86,1,86,1,87,
        1,87,3,87,1329,8,87,1,88,1,88,1,88,1,88,1,88,1,88,1,88,1,88,1,88,
        1,88,1,88,3,88,1342,8,88,1,88,1,88,1,88,1,88,1,88,1,88,5,88,1350,
        8,88,10,88,12,88,1353,9,88,1,88,1,88,1,88,1,88,1,88,1,88,1,88,1,
        88,1,88,1,88,1,88,1,88,1,88,1,88,1,88,1,88,1,88,1,88,1,88,3,88,1374,
        8,88,1,88,1,88,3,88,1378,8,88,1,88,1,88,3,88,1382,8,88,1,88,1,88,
        1,88,3,88,1387,8,88,1,88,1,88,1,88,1,88,1,88,3,88,1394,8,88,1,88,
        1,88,1,88,1,88,1,88,1,88,1,88,1,88,1,88,1,88,1,88,1,88,1,88,1,88,
        3,88,1410,8,88,1,88,1,88,1,88,3,88,1415,8,88,1,88,1,88,1,88,3,88,
        1420,8,88,1,88,1,88,1,88,1,88,1,88,3,88,1427,8,88,1,88,3,88,1430,
        8,88,1,88,1,88,1,88,1,88,1,88,1,88,1,88,1,88,1,88,1,88,1,88,1,88,
        1,88,1,88,1,88,1,88,1,88,1,88,1,88,1,88,3,88,1452,8,88,1,88,1,88,
        1,88,1,88,1,88,1,88,1,88,1,88,1,88,1,88,3,88,1464,8,88,1,89,1,89,
        3,89,1468,8,89,1,89,1,89,1,90,1,90,1,90,1,90,3,90,1476,8,90,1,90,
        1,90,1,90,1,90,5,90,1482,8,90,10,90,12,90,1485,9,90,1,90,1,90,1,
        90,1,90,1,90,1,90,1,90,1,90,1,90,3,90,1496,8,90,1,91,1,91,3,91,1500,
        8,91,1,92,1,92,1,92,3,92,1505,8,92,1,92,3,92,1508,8,92,1,93,1,93,
        1,93,1,93,3,93,1514,8,93,1,94,1,94,1,94,1,94,1,95,1,95,3,95,1522,
        8,95,1,96,4,96,1525,8,96,11,96,12,96,1526,1,96,1,96,1,97,1,97,1,
        97,3,97,1534,8,97,1,97,1,97,1,97,1,97,3,97,1540,8,97,1,98,1,98,1,
        98,1,99,4,99,1546,8,99,11,99,12,99,1547,1,100,1,100,1,100,1,100,
        5,100,1554,8,100,10,100,12,100,1557,9,100,3,100,1559,8,100,1,101,
        1,101,1,101,5,101,1564,8,101,10,101,12,101,1567,9,101,1,102,1,102,
        5,102,1571,8,102,10,102,12,102,1574,9,102,1,102,3,102,1577,8,102,
        1,102,3,102,1580,8,102,1,103,1,103,1,103,1,103,3,103,1586,8,103,
        1,103,1,103,3,103,1590,8,103,1,103,1,103,1,104,1,104,3,104,1596,
        8,104,1,104,1,104,1,105,1,105,1,105,1,105,1,105,1,106,1,106,1,106,
        1,107,1,107,3,107,1610,8,107,1,108,1,108,1,108,1,108,3,108,1616,
        8,108,1,109,1,109,1,109,5,109,1621,8,109,10,109,12,109,1624,9,109,
        1,110,1,110,3,110,1628,8,110,1,110,3,110,1631,8,110,1,110,3,110,
        1634,8,110,1,110,1,110,1,111,4,111,1639,8,111,11,111,12,111,1640,
        1,112,1,112,1,112,1,112,1,112,1,113,4,113,1649,8,113,11,113,12,113,
        1650,1,114,1,114,1,114,1,114,1,114,1,114,1,114,1,114,1,114,1,114,
        1,114,1,114,1,114,1,114,1,114,3,114,1668,8,114,1,115,4,115,1671,
        8,115,11,115,12,115,1672,1,116,1,116,3,116,1677,8,116,1,117,3,117,
        1680,8,117,1,117,3,117,1683,8,117,1,117,1,117,1,117,1,117,1,117,
        3,117,1690,8,117,1,118,1,118,1,118,1,118,3,118,1696,8,118,1,119,
        1,119,1,119,1,119,5,119,1702,8,119,10,119,12,119,1705,9,119,1,119,
        1,119,1,120,3,120,1710,8,120,1,120,1,120,1,121,1,121,1,121,1,121,
        5,121,1718,8,121,10,121,12,121,1721,9,121,1,122,1,122,1,122,5,122,
        1726,8,122,10,122,12,122,1729,9,122,1,123,4,123,1732,8,123,11,123,
        12,123,1733,1,124,1,124,1,124,1,124,1,124,1,125,1,125,1,125,1,125,
        3,125,1745,8,125,1,125,1,125,3,125,1749,8,125,3,125,1751,8,125,1,
        126,1,126,1,126,3,126,1756,8,126,1,126,1,126,3,126,1760,8,126,1,
        127,1,127,1,127,5,127,1765,8,127,10,127,12,127,1768,9,127,1,128,
        1,128,1,128,1,128,1,129,1,129,3,129,1776,8,129,1,129,1,129,1,130,
        4,130,1781,8,130,11,130,12,130,1782,1,131,3,131,1786,8,131,1,131,
        3,131,1789,8,131,1,131,1,131,3,131,1793,8,131,1,132,4,132,1796,8,
        132,11,132,12,132,1797,1,133,1,133,1,134,1,134,1,134,1,134,1,134,
        1,134,1,134,1,134,1,134,3,134,1811,8,134,1,134,1,134,1,134,1,134,
        1,134,1,134,1,134,1,134,3,134,1821,8,134,1,135,1,135,1,135,1,135,
        1,135,3,135,1828,8,135,1,135,1,135,1,135,1,135,1,135,1,135,1,135,
        1,135,1,135,1,135,3,135,1840,8,135,1,136,1,136,1,136,5,136,1845,
        8,136,10,136,12,136,1848,9,136,1,137,1,137,1,137,1,137,1,138,1,138,
        1,138,5,138,1857,8,138,10,138,12,138,1860,9,138,1,139,1,139,1,139,
        3,139,1865,8,139,1,140,1,140,3,140,1869,8,140,1,141,1,141,3,141,
        1873,8,141,1,142,1,142,1,143,1,143,1,143,1,143,1,143,1,143,3,143,
        1883,8,143,1,144,1,144,1,144,1,144,3,144,1889,8,144,3,144,1891,8,
        144,1,145,1,145,1,145,5,145,1896,8,145,10,145,12,145,1899,9,145,
        1,146,3,146,1902,8,146,1,146,3,146,1905,8,146,1,146,1,146,3,146,
        1909,8,146,1,147,1,147,1,147,1,147,1,147,1,147,1,147,1,147,3,147,
        1919,8,147,1,148,3,148,1922,8,148,1,148,1,148,1,148,1,148,1,149,
        3,149,1929,8,149,1,149,3,149,1932,8,149,1,149,1,149,1,149,3,149,
        1937,8,149,1,149,1,149,1,149,3,149,1942,8,149,3,149,1944,8,149,1,
        150,3,150,1947,8,150,1,150,3,150,1950,8,150,1,150,1,150,1,150,1,
        151,3,151,1956,8,151,1,151,3,151,1959,8,151,1,151,1,151,1,151,1,
        152,1,152,1,152,1,152,1,152,1,152,1,152,3,152,1971,8,152,1,153,1,
        153,3,153,1975,8,153,1,154,3,154,1978,8,154,1,154,1,154,1,154,1,
        154,1,154,1,154,1,154,1,154,3,154,1988,8,154,1,155,3,155,1991,8,
        155,1,155,1,155,1,155,1,156,3,156,1997,8,156,1,156,1,156,1,156,1,
        157,1,157,1,157,1,157,1,157,1,157,1,157,1,157,1,157,1,157,1,157,
        1,157,1,157,1,157,1,157,1,157,1,157,1,157,1,157,1,157,1,157,1,157,
        3,157,2024,8,157,1,158,1,158,1,158,1,158,1,158,1,158,1,158,1,159,
        1,159,1,159,1,159,3,159,2037,8,159,1,159,1,159,1,160,1,160,1,160,
        1,160,1,160,1,160,3,160,2047,8,160,1,161,1,161,1,161,1,162,1,162,
        5,162,2054,8,162,10,162,12,162,2057,9,162,1,162,1,162,1,163,3,163,
        2062,8,163,1,163,3,163,2065,8,163,1,163,1,163,1,163,1,163,4,163,
        2071,8,163,11,163,12,163,2072,1,163,1,163,3,163,2077,8,163,1,164,
        1,164,5,164,2081,8,164,10,164,12,164,2084,9,164,1,164,4,164,2087,
        8,164,11,164,12,164,2088,1,165,1,165,5,165,2093,8,165,10,165,12,
        165,2096,9,165,1,165,1,165,1,166,1,166,1,166,1,166,5,166,2104,8,
        166,10,166,12,166,2107,9,166,1,166,3,166,2110,8,166,3,166,2112,8,
        166,1,166,1,166,1,167,1,167,1,167,1,167,5,167,2120,8,167,10,167,
        12,167,2123,9,167,1,167,1,167,1,168,3,168,2128,8,168,1,168,3,168,
        2131,8,168,1,168,1,168,1,169,1,169,1,170,1,170,1,170,1,171,1,171,
        5,171,2142,8,171,10,171,12,171,2145,9,171,1,171,1,171,1,172,3,172,
        2150,8,172,1,172,3,172,2153,8,172,1,172,3,172,2156,8,172,1,172,1,
        172,1,172,1,172,1,172,3,172,2163,8,172,1,172,1,172,1,172,3,172,2168,
        8,172,1,172,1,172,3,172,2172,8,172,1,172,1,172,3,172,2176,8,172,
        1,172,1,172,1,172,1,172,1,172,1,172,1,172,1,172,1,172,1,172,1,172,
        1,172,1,172,1,172,1,172,3,172,2193,8,172,1,172,3,172,2196,8,172,
        1,172,1,172,1,172,3,172,2201,8,172,1,172,1,172,3,172,2205,8,172,
        1,172,1,172,3,172,2209,8,172,1,172,1,172,1,172,1,172,1,172,1,172,
        1,172,3,172,2218,8,172,1,173,3,173,2221,8,173,1,173,1,173,1,173,
        3,173,2226,8,173,1,173,1,173,3,173,2230,8,173,1,173,1,173,1,173,
        3,173,2235,8,173,1,173,1,173,3,173,2239,8,173,3,173,2241,8,173,1,
        174,1,174,1,174,1,175,1,175,1,175,1,175,5,175,2250,8,175,10,175,
        12,175,2253,9,175,1,175,3,175,2256,8,175,3,175,2258,8,175,1,175,
        1,175,1,176,3,176,2263,8,176,1,176,1,176,1,176,3,176,2268,8,176,
        1,177,1,177,1,177,1,177,1,177,3,177,2275,8,177,1,177,1,177,1,178,
        1,178,3,178,2281,8,178,1,179,4,179,2284,8,179,11,179,12,179,2285,
        1,180,1,180,1,180,1,180,3,180,2292,8,180,1,180,1,180,3,180,2296,
        8,180,1,180,1,180,1,181,1,181,3,181,2302,8,181,1,182,1,182,1,182,
        5,182,2307,8,182,10,182,12,182,2310,9,182,1,183,1,183,1,183,1,183,
        1,183,5,183,2317,8,183,10,183,12,183,2320,9,183,3,183,2322,8,183,
        1,183,3,183,2325,8,183,1,184,1,184,1,184,3,184,2330,8,184,1,184,
        1,184,1,185,1,185,3,185,2336,8,185,1,185,1,185,5,185,2340,8,185,
        10,185,12,185,2343,9,185,1,185,1,185,1,185,1,185,3,185,2349,8,185,
        1,186,1,186,1,186,5,186,2354,8,186,10,186,12,186,2357,9,186,1,187,
        1,187,1,187,1,187,1,188,3,188,2364,8,188,1,188,1,188,3,188,2368,
        8,188,1,189,1,189,1,189,1,189,1,189,1,190,1,190,1,190,1,190,1,190,
        1,190,1,190,1,190,3,190,2383,8,190,1,190,1,190,3,190,2387,8,190,
        1,190,1,190,1,190,1,190,1,190,5,190,2394,8,190,10,190,12,190,2397,
        9,190,1,190,3,190,2400,8,190,1,190,1,190,3,190,2404,8,190,1,191,
        1,191,1,191,1,191,1,192,1,192,1,192,1,192,1,193,1,193,1,193,1,193,
        1,194,1,194,1,194,1,194,1,194,1,194,1,194,1,194,3,194,2426,8,194,
        1,195,1,195,1,196,1,196,1,196,1,196,3,196,2434,8,196,1,197,1,197,
        5,197,2438,8,197,10,197,12,197,2441,9,197,1,197,1,197,1,198,1,198,
        5,198,2447,8,198,10,198,12,198,2450,9,198,1,198,1,198,1,199,1,199,
        1,199,1,199,1,199,1,199,1,199,1,199,3,199,2462,8,199,1,200,1,200,
        1,200,1,200,3,200,2468,8,200,1,201,1,201,1,201,1,201,3,201,2474,
        8,201,1,201,3,201,2477,8,201,1,201,1,201,1,202,1,202,1,203,1,203,
        4,203,2485,8,203,11,203,12,203,2486,1,204,1,204,1,205,1,205,1,206,
        1,206,1,206,3,206,2496,8,206,1,206,3,206,2499,8,206,1,206,3,206,
        2502,8,206,1,206,1,206,3,206,2506,8,206,1,207,3,207,2509,8,207,1,
        207,1,207,1,207,3,207,2514,8,207,1,207,3,207,2517,8,207,1,207,3,
        207,2520,8,207,1,207,1,207,3,207,2524,8,207,1,208,1,208,1,208,3,
        208,2529,8,208,1,208,3,208,2532,8,208,1,208,3,208,2535,8,208,1,208,
        1,208,3,208,2539,8,208,1,209,1,209,1,209,3,209,2544,8,209,1,209,
        1,209,3,209,2548,8,209,1,210,1,210,1,210,1,210,3,210,2554,8,210,
        1,210,1,210,3,210,2558,8,210,1,210,1,210,3,210,2562,8,210,1,210,
        1,210,1,211,1,211,1,211,1,211,1,211,1,211,1,211,1,211,1,211,1,211,
        3,211,2576,8,211,1,212,1,212,1,212,1,213,1,213,1,213,1,213,1,213,
        1,213,1,213,1,213,3,213,2589,8,213,1,213,1,213,1,213,1,213,3,213,
        2595,8,213,1,214,1,214,1,214,1,214,1,214,1,215,1,215,1,215,1,215,
        1,215,1,215,1,215,1,215,1,215,1,215,1,215,1,215,3,215,2614,8,215,
        1,216,1,216,1,216,1,216,1,216,1,216,1,217,1,217,1,217,3,217,2625,
        8,217,1,217,1,217,3,217,2629,8,217,1,217,1,217,1,218,1,218,3,218,
        2635,8,218,1,218,1,218,3,218,2639,8,218,1,218,1,218,3,218,2643,8,
        218,1,218,1,218,1,218,1,218,1,218,3,218,2650,8,218,1,219,1,219,1,
        219,1,219,1,219,3,219,2657,8,219,1,219,3,219,2660,8,219,1,219,1,
        219,5,219,2664,8,219,10,219,12,219,2667,9,219,1,220,1,220,1,220,
        1,220,3,220,2673,8,220,1,220,1,220,1,220,3,220,2678,8,220,1,220,
        3,220,2681,8,220,1,220,1,220,1,220,1,220,1,220,1,220,3,220,2689,
        8,220,1,221,1,221,1,221,1,221,3,221,2695,8,221,1,222,1,222,3,222,
        2699,8,222,1,222,1,222,1,223,1,223,3,223,2705,8,223,1,223,1,223,
        3,223,2709,8,223,1,224,1,224,1,224,0,0,225,0,2,4,6,8,10,12,14,16,
        18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,
        62,64,66,68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,98,100,102,
        104,106,108,110,112,114,116,118,120,122,124,126,128,130,132,134,
        136,138,140,142,144,146,148,150,152,154,156,158,160,162,164,166,
        168,170,172,174,176,178,180,182,184,186,188,190,192,194,196,198,
        200,202,204,206,208,210,212,214,216,218,220,222,224,226,228,230,
        232,234,236,238,240,242,244,246,248,250,252,254,256,258,260,262,
        264,266,268,270,272,274,276,278,280,282,284,286,288,290,292,294,
        296,298,300,302,304,306,308,310,312,314,316,318,320,322,324,326,
        328,330,332,334,336,338,340,342,344,346,348,350,352,354,356,358,
        360,362,364,366,368,370,372,374,376,378,380,382,384,386,388,390,
        392,394,396,398,400,402,404,406,408,410,412,414,416,418,420,422,
        424,426,428,430,432,434,436,438,440,442,444,446,448,0,19,8,0,21,
        21,24,24,55,55,63,63,83,83,87,87,99,100,104,104,2,0,34,34,45,45,
        3,0,54,54,72,72,80,80,1,0,156,157,2,0,146,147,158,159,1,0,135,136,
        1,0,137,139,14,0,18,18,21,21,24,24,29,29,34,34,45,45,55,55,63,63,
        68,68,83,83,87,87,91,91,99,100,104,104,2,0,14,14,32,32,2,0,15,15,
        103,103,12,0,9,9,15,15,41,41,57,57,66,66,73,73,75,79,84,84,90,90,
        103,103,107,107,109,109,2,0,40,40,53,53,2,0,17,17,94,94,2,0,137,
        137,148,148,2,0,54,54,72,72,2,0,42,42,96,96,19,0,9,9,13,13,17,19,
        21,31,33,34,36,37,39,47,50,50,52,57,59,59,62,63,65,68,70,70,72,74,
        76,80,82,84,87,105,107,109,112,112,1,0,79,80,20,0,10,12,14,16,20,
        20,32,32,35,35,38,38,48,49,51,51,58,58,60,61,64,64,69,69,71,71,75,
        75,81,81,85,86,102,102,106,106,110,111,113,114,2993,0,451,1,0,0,
        0,2,475,1,0,0,0,4,487,1,0,0,0,6,501,1,0,0,0,8,514,1,0,0,0,10,517,
        1,0,0,0,12,521,1,0,0,0,14,535,1,0,0,0,16,537,1,0,0,0,18,543,1,0,
        0,0,20,548,1,0,0,0,22,550,1,0,0,0,24,552,1,0,0,0,26,558,1,0,0,0,
        28,560,1,0,0,0,30,571,1,0,0,0,32,582,1,0,0,0,34,599,1,0,0,0,36,604,
        1,0,0,0,38,614,1,0,0,0,40,627,1,0,0,0,42,629,1,0,0,0,44,637,1,0,
        0,0,46,645,1,0,0,0,48,653,1,0,0,0,50,661,1,0,0,0,52,669,1,0,0,0,
        54,677,1,0,0,0,56,685,1,0,0,0,58,693,1,0,0,0,60,705,1,0,0,0,62,716,
        1,0,0,0,64,724,1,0,0,0,66,732,1,0,0,0,68,744,1,0,0,0,70,752,1,0,
        0,0,72,767,1,0,0,0,74,791,1,0,0,0,76,793,1,0,0,0,78,837,1,0,0,0,
        80,960,1,0,0,0,82,964,1,0,0,0,84,966,1,0,0,0,86,970,1,0,0,0,88,978,
        1,0,0,0,90,994,1,0,0,0,92,998,1,0,0,0,94,1000,1,0,0,0,96,1010,1,
        0,0,0,98,1012,1,0,0,0,100,1021,1,0,0,0,102,1034,1,0,0,0,104,1042,
        1,0,0,0,106,1044,1,0,0,0,108,1063,1,0,0,0,110,1065,1,0,0,0,112,1074,
        1,0,0,0,114,1087,1,0,0,0,116,1089,1,0,0,0,118,1110,1,0,0,0,120,1119,
        1,0,0,0,122,1136,1,0,0,0,124,1147,1,0,0,0,126,1152,1,0,0,0,128,1169,
        1,0,0,0,130,1171,1,0,0,0,132,1180,1,0,0,0,134,1185,1,0,0,0,136,1195,
        1,0,0,0,138,1197,1,0,0,0,140,1200,1,0,0,0,142,1211,1,0,0,0,144,1223,
        1,0,0,0,146,1225,1,0,0,0,148,1230,1,0,0,0,150,1233,1,0,0,0,152,1248,
        1,0,0,0,154,1257,1,0,0,0,156,1268,1,0,0,0,158,1270,1,0,0,0,160,1277,
        1,0,0,0,162,1286,1,0,0,0,164,1288,1,0,0,0,166,1292,1,0,0,0,168,1313,
        1,0,0,0,170,1320,1,0,0,0,172,1322,1,0,0,0,174,1328,1,0,0,0,176,1463,
        1,0,0,0,178,1465,1,0,0,0,180,1495,1,0,0,0,182,1499,1,0,0,0,184,1501,
        1,0,0,0,186,1513,1,0,0,0,188,1515,1,0,0,0,190,1521,1,0,0,0,192,1524,
        1,0,0,0,194,1539,1,0,0,0,196,1541,1,0,0,0,198,1545,1,0,0,0,200,1558,
        1,0,0,0,202,1560,1,0,0,0,204,1579,1,0,0,0,206,1581,1,0,0,0,208,1593,
        1,0,0,0,210,1599,1,0,0,0,212,1604,1,0,0,0,214,1609,1,0,0,0,216,1611,
        1,0,0,0,218,1617,1,0,0,0,220,1625,1,0,0,0,222,1638,1,0,0,0,224,1642,
        1,0,0,0,226,1648,1,0,0,0,228,1667,1,0,0,0,230,1670,1,0,0,0,232,1676,
        1,0,0,0,234,1679,1,0,0,0,236,1691,1,0,0,0,238,1697,1,0,0,0,240,1709,
        1,0,0,0,242,1713,1,0,0,0,244,1722,1,0,0,0,246,1731,1,0,0,0,248,1735,
        1,0,0,0,250,1750,1,0,0,0,252,1759,1,0,0,0,254,1761,1,0,0,0,256,1769,
        1,0,0,0,258,1773,1,0,0,0,260,1780,1,0,0,0,262,1785,1,0,0,0,264,1795,
        1,0,0,0,266,1799,1,0,0,0,268,1820,1,0,0,0,270,1827,1,0,0,0,272,1841,
        1,0,0,0,274,1849,1,0,0,0,276,1853,1,0,0,0,278,1861,1,0,0,0,280,1868,
        1,0,0,0,282,1872,1,0,0,0,284,1874,1,0,0,0,286,1882,1,0,0,0,288,1890,
        1,0,0,0,290,1892,1,0,0,0,292,1908,1,0,0,0,294,1918,1,0,0,0,296,1921,
        1,0,0,0,298,1928,1,0,0,0,300,1946,1,0,0,0,302,1955,1,0,0,0,304,1970,
        1,0,0,0,306,1974,1,0,0,0,308,1977,1,0,0,0,310,1990,1,0,0,0,312,1996,
        1,0,0,0,314,2023,1,0,0,0,316,2025,1,0,0,0,318,2032,1,0,0,0,320,2046,
        1,0,0,0,322,2048,1,0,0,0,324,2051,1,0,0,0,326,2061,1,0,0,0,328,2078,
        1,0,0,0,330,2090,1,0,0,0,332,2099,1,0,0,0,334,2115,1,0,0,0,336,2127,
        1,0,0,0,338,2134,1,0,0,0,340,2136,1,0,0,0,342,2139,1,0,0,0,344,2149,
        1,0,0,0,346,2220,1,0,0,0,348,2242,1,0,0,0,350,2245,1,0,0,0,352,2262,
        1,0,0,0,354,2269,1,0,0,0,356,2280,1,0,0,0,358,2283,1,0,0,0,360,2287,
        1,0,0,0,362,2301,1,0,0,0,364,2303,1,0,0,0,366,2311,1,0,0,0,368,2329,
        1,0,0,0,370,2348,1,0,0,0,372,2350,1,0,0,0,374,2358,1,0,0,0,376,2367,
        1,0,0,0,378,2369,1,0,0,0,380,2403,1,0,0,0,382,2405,1,0,0,0,384,2409,
        1,0,0,0,386,2413,1,0,0,0,388,2425,1,0,0,0,390,2427,1,0,0,0,392,2433,
        1,0,0,0,394,2435,1,0,0,0,396,2444,1,0,0,0,398,2461,1,0,0,0,400,2467,
        1,0,0,0,402,2469,1,0,0,0,404,2480,1,0,0,0,406,2482,1,0,0,0,408,2488,
        1,0,0,0,410,2490,1,0,0,0,412,2492,1,0,0,0,414,2508,1,0,0,0,416,2525,
        1,0,0,0,418,2540,1,0,0,0,420,2549,1,0,0,0,422,2565,1,0,0,0,424,2577,
        1,0,0,0,426,2580,1,0,0,0,428,2596,1,0,0,0,430,2601,1,0,0,0,432,2615,
        1,0,0,0,434,2621,1,0,0,0,436,2632,1,0,0,0,438,2656,1,0,0,0,440,2668,
        1,0,0,0,442,2690,1,0,0,0,444,2696,1,0,0,0,446,2702,1,0,0,0,448,2710,
        1,0,0,0,450,452,5,1,0,0,451,450,1,0,0,0,451,452,1,0,0,0,452,454,
        1,0,0,0,453,455,3,222,111,0,454,453,1,0,0,0,454,455,1,0,0,0,455,
        457,1,0,0,0,456,458,3,226,113,0,457,456,1,0,0,0,457,458,1,0,0,0,
        458,462,1,0,0,0,459,461,3,354,177,0,460,459,1,0,0,0,461,464,1,0,
        0,0,462,460,1,0,0,0,462,463,1,0,0,0,463,466,1,0,0,0,464,462,1,0,
        0,0,465,467,3,230,115,0,466,465,1,0,0,0,466,467,1,0,0,0,467,468,
        1,0,0,0,468,469,5,0,0,1,469,1,1,0,0,0,470,472,3,448,224,0,471,473,
        3,28,14,0,472,471,1,0,0,0,472,473,1,0,0,0,473,476,1,0,0,0,474,476,
        3,236,118,0,475,470,1,0,0,0,475,474,1,0,0,0,476,484,1,0,0,0,477,
        478,5,131,0,0,478,480,3,448,224,0,479,481,3,28,14,0,480,479,1,0,
        0,0,480,481,1,0,0,0,481,483,1,0,0,0,482,477,1,0,0,0,483,486,1,0,
        0,0,484,482,1,0,0,0,484,485,1,0,0,0,485,3,1,0,0,0,486,484,1,0,0,
        0,487,493,3,6,3,0,488,492,5,148,0,0,489,492,3,330,165,0,490,492,
        5,137,0,0,491,488,1,0,0,0,491,489,1,0,0,0,491,490,1,0,0,0,492,495,
        1,0,0,0,493,491,1,0,0,0,493,494,1,0,0,0,494,5,1,0,0,0,495,493,1,
        0,0,0,496,502,3,18,9,0,497,502,3,26,13,0,498,499,5,108,0,0,499,502,
        5,137,0,0,500,502,3,8,4,0,501,496,1,0,0,0,501,497,1,0,0,0,501,498,
        1,0,0,0,501,500,1,0,0,0,502,7,1,0,0,0,503,504,5,129,0,0,504,507,
        3,16,8,0,505,506,5,132,0,0,506,508,3,16,8,0,507,505,1,0,0,0,508,
        509,1,0,0,0,509,507,1,0,0,0,509,510,1,0,0,0,510,511,1,0,0,0,511,
        512,5,130,0,0,512,515,1,0,0,0,513,515,3,10,5,0,514,503,1,0,0,0,514,
        513,1,0,0,0,515,9,1,0,0,0,516,518,5,106,0,0,517,516,1,0,0,0,517,
        518,1,0,0,0,518,519,1,0,0,0,519,520,3,12,6,0,520,11,1,0,0,0,521,
        522,5,129,0,0,522,525,3,14,7,0,523,524,5,132,0,0,524,526,3,14,7,
        0,525,523,1,0,0,0,526,527,1,0,0,0,527,525,1,0,0,0,527,528,1,0,0,
        0,528,529,1,0,0,0,529,530,5,130,0,0,530,13,1,0,0,0,531,536,3,12,
        6,0,532,534,3,448,224,0,533,532,1,0,0,0,533,534,1,0,0,0,534,536,
        1,0,0,0,535,531,1,0,0,0,535,533,1,0,0,0,536,15,1,0,0,0,537,539,3,
        4,2,0,538,540,3,448,224,0,539,538,1,0,0,0,539,540,1,0,0,0,540,17,
        1,0,0,0,541,544,3,20,10,0,542,544,5,18,0,0,543,541,1,0,0,0,543,542,
        1,0,0,0,544,19,1,0,0,0,545,549,3,22,11,0,546,549,3,24,12,0,547,549,
        5,29,0,0,548,545,1,0,0,0,548,546,1,0,0,0,548,547,1,0,0,0,549,21,
        1,0,0,0,550,551,7,0,0,0,551,23,1,0,0,0,552,553,7,1,0,0,553,25,1,
        0,0,0,554,559,3,2,1,0,555,559,5,68,0,0,556,559,5,35,0,0,557,559,
        5,91,0,0,558,554,1,0,0,0,558,555,1,0,0,0,558,556,1,0,0,0,558,557,
        1,0,0,0,559,27,1,0,0,0,560,561,5,146,0,0,561,566,3,4,2,0,562,563,
        5,132,0,0,563,565,3,4,2,0,564,562,1,0,0,0,565,568,1,0,0,0,566,564,
        1,0,0,0,566,567,1,0,0,0,567,569,1,0,0,0,568,566,1,0,0,0,569,570,
        5,147,0,0,570,29,1,0,0,0,571,576,3,32,16,0,572,573,5,132,0,0,573,
        575,3,32,16,0,574,572,1,0,0,0,575,578,1,0,0,0,576,574,1,0,0,0,576,
        577,1,0,0,0,577,31,1,0,0,0,578,576,1,0,0,0,579,580,3,448,224,0,580,
        581,5,133,0,0,581,583,1,0,0,0,582,579,1,0,0,0,582,583,1,0,0,0,583,
        585,1,0,0,0,584,586,7,2,0,0,585,584,1,0,0,0,585,586,1,0,0,0,586,
        593,1,0,0,0,587,594,3,34,17,0,588,591,5,106,0,0,589,591,3,4,2,0,
        590,588,1,0,0,0,590,589,1,0,0,0,591,592,1,0,0,0,592,594,3,34,17,
        0,593,587,1,0,0,0,593,590,1,0,0,0,594,33,1,0,0,0,595,600,3,38,19,
        0,596,600,3,36,18,0,597,598,5,80,0,0,598,600,3,36,18,0,599,595,1,
        0,0,0,599,596,1,0,0,0,599,597,1,0,0,0,600,35,1,0,0,0,601,605,3,126,
        63,0,602,605,3,138,69,0,603,605,3,42,21,0,604,601,1,0,0,0,604,602,
        1,0,0,0,604,603,1,0,0,0,605,37,1,0,0,0,606,607,3,74,37,0,607,608,
        3,40,20,0,608,609,3,34,17,0,609,615,1,0,0,0,610,611,3,74,37,0,611,
        612,5,170,0,0,612,613,3,82,41,0,613,615,1,0,0,0,614,606,1,0,0,0,
        614,610,1,0,0,0,615,39,1,0,0,0,616,628,5,145,0,0,617,628,5,160,0,
        0,618,628,5,161,0,0,619,628,5,162,0,0,620,628,5,163,0,0,621,628,
        5,164,0,0,622,628,5,165,0,0,623,628,5,166,0,0,624,628,5,167,0,0,
        625,628,5,169,0,0,626,628,3,386,193,0,627,616,1,0,0,0,627,617,1,
        0,0,0,627,618,1,0,0,0,627,619,1,0,0,0,627,620,1,0,0,0,627,621,1,
        0,0,0,627,622,1,0,0,0,627,623,1,0,0,0,627,624,1,0,0,0,627,625,1,
        0,0,0,627,626,1,0,0,0,628,41,1,0,0,0,629,635,3,44,22,0,630,631,5,
        148,0,0,631,632,3,82,41,0,632,633,5,133,0,0,633,634,3,82,41,0,634,
        636,1,0,0,0,635,630,1,0,0,0,635,636,1,0,0,0,636,43,1,0,0,0,637,643,
        3,46,23,0,638,641,5,150,0,0,639,642,3,44,22,0,640,642,3,84,42,0,
        641,639,1,0,0,0,641,640,1,0,0,0,642,644,1,0,0,0,643,638,1,0,0,0,
        643,644,1,0,0,0,644,45,1,0,0,0,645,650,3,48,24,0,646,647,5,154,0,
        0,647,649,3,48,24,0,648,646,1,0,0,0,649,652,1,0,0,0,650,648,1,0,
        0,0,650,651,1,0,0,0,651,47,1,0,0,0,652,650,1,0,0,0,653,658,3,50,
        25,0,654,655,5,153,0,0,655,657,3,50,25,0,656,654,1,0,0,0,657,660,
        1,0,0,0,658,656,1,0,0,0,658,659,1,0,0,0,659,49,1,0,0,0,660,658,1,
        0,0,0,661,666,3,52,26,0,662,663,5,141,0,0,663,665,3,52,26,0,664,
        662,1,0,0,0,665,668,1,0,0,0,666,664,1,0,0,0,666,667,1,0,0,0,667,
        51,1,0,0,0,668,666,1,0,0,0,669,674,3,54,27,0,670,671,5,142,0,0,671,
        673,3,54,27,0,672,670,1,0,0,0,673,676,1,0,0,0,674,672,1,0,0,0,674,
        675,1,0,0,0,675,53,1,0,0,0,676,674,1,0,0,0,677,682,3,56,28,0,678,
        679,5,140,0,0,679,681,3,56,28,0,680,678,1,0,0,0,681,684,1,0,0,0,
        682,680,1,0,0,0,682,683,1,0,0,0,683,55,1,0,0,0,684,682,1,0,0,0,685,
        690,3,58,29,0,686,687,7,3,0,0,687,689,3,58,29,0,688,686,1,0,0,0,
        689,692,1,0,0,0,690,688,1,0,0,0,690,691,1,0,0,0,691,57,1,0,0,0,692,
        690,1,0,0,0,693,702,3,60,30,0,694,695,7,4,0,0,695,701,3,60,30,0,
        696,697,5,59,0,0,697,701,3,120,60,0,698,699,5,13,0,0,699,701,3,4,
        2,0,700,694,1,0,0,0,700,696,1,0,0,0,700,698,1,0,0,0,701,704,1,0,
        0,0,702,700,1,0,0,0,702,703,1,0,0,0,703,59,1,0,0,0,704,702,1,0,0,
        0,705,713,3,62,31,0,706,709,5,168,0,0,707,709,3,384,192,0,708,706,
        1,0,0,0,708,707,1,0,0,0,709,710,1,0,0,0,710,712,3,62,31,0,711,708,
        1,0,0,0,712,715,1,0,0,0,713,711,1,0,0,0,713,714,1,0,0,0,714,61,1,
        0,0,0,715,713,1,0,0,0,716,721,3,64,32,0,717,718,7,5,0,0,718,720,
        3,64,32,0,719,717,1,0,0,0,720,723,1,0,0,0,721,719,1,0,0,0,721,722,
        1,0,0,0,722,63,1,0,0,0,723,721,1,0,0,0,724,729,3,66,33,0,725,726,
        7,6,0,0,726,728,3,66,33,0,727,725,1,0,0,0,728,731,1,0,0,0,729,727,
        1,0,0,0,729,730,1,0,0,0,730,65,1,0,0,0,731,729,1,0,0,0,732,742,3,
        72,36,0,733,734,5,93,0,0,734,739,5,125,0,0,735,737,3,68,34,0,736,
        738,5,132,0,0,737,736,1,0,0,0,737,738,1,0,0,0,738,740,1,0,0,0,739,
        735,1,0,0,0,739,740,1,0,0,0,740,741,1,0,0,0,741,743,5,126,0,0,742,
        733,1,0,0,0,742,743,1,0,0,0,743,67,1,0,0,0,744,749,3,70,35,0,745,
        746,5,132,0,0,746,748,3,70,35,0,747,745,1,0,0,0,748,751,1,0,0,0,
        749,747,1,0,0,0,749,750,1,0,0,0,750,69,1,0,0,0,751,749,1,0,0,0,752,
        754,3,34,17,0,753,755,3,196,98,0,754,753,1,0,0,0,754,755,1,0,0,0,
        755,756,1,0,0,0,756,757,3,382,191,0,757,758,3,82,41,0,758,71,1,0,
        0,0,759,768,3,74,37,0,760,762,3,74,37,0,761,760,1,0,0,0,761,762,
        1,0,0,0,762,763,1,0,0,0,763,765,5,171,0,0,764,766,3,74,37,0,765,
        764,1,0,0,0,765,766,1,0,0,0,766,768,1,0,0,0,767,759,1,0,0,0,767,
        761,1,0,0,0,768,73,1,0,0,0,769,792,3,76,38,0,770,792,3,78,39,0,771,
        772,5,135,0,0,772,792,3,74,37,0,773,774,5,136,0,0,774,792,3,74,37,
        0,775,776,5,143,0,0,776,792,3,74,37,0,777,778,5,144,0,0,778,792,
        3,74,37,0,779,780,5,151,0,0,780,792,3,74,37,0,781,782,5,152,0,0,
        782,792,3,74,37,0,783,784,5,16,0,0,784,792,3,74,37,0,785,786,5,140,
        0,0,786,792,3,74,37,0,787,788,5,137,0,0,788,792,3,74,37,0,789,790,
        5,142,0,0,790,792,3,74,37,0,791,769,1,0,0,0,791,770,1,0,0,0,791,
        771,1,0,0,0,791,773,1,0,0,0,791,775,1,0,0,0,791,777,1,0,0,0,791,
        779,1,0,0,0,791,781,1,0,0,0,791,783,1,0,0,0,791,785,1,0,0,0,791,
        787,1,0,0,0,791,789,1,0,0,0,792,75,1,0,0,0,793,794,5,129,0,0,794,
        795,3,4,2,0,795,796,5,130,0,0,796,797,3,74,37,0,797,77,1,0,0,0,798,
        800,3,80,40,0,799,801,5,143,0,0,800,799,1,0,0,0,800,801,1,0,0,0,
        801,805,1,0,0,0,802,804,3,88,44,0,803,802,1,0,0,0,804,807,1,0,0,
        0,805,803,1,0,0,0,805,806,1,0,0,0,806,809,1,0,0,0,807,805,1,0,0,
        0,808,810,5,143,0,0,809,808,1,0,0,0,809,810,1,0,0,0,810,833,1,0,
        0,0,811,818,3,86,43,0,812,818,3,444,222,0,813,818,5,151,0,0,814,
        818,5,152,0,0,815,816,5,155,0,0,816,818,3,448,224,0,817,811,1,0,
        0,0,817,812,1,0,0,0,817,813,1,0,0,0,817,814,1,0,0,0,817,815,1,0,
        0,0,818,820,1,0,0,0,819,821,5,143,0,0,820,819,1,0,0,0,820,821,1,
        0,0,0,821,825,1,0,0,0,822,824,3,88,44,0,823,822,1,0,0,0,824,827,
        1,0,0,0,825,823,1,0,0,0,825,826,1,0,0,0,826,829,1,0,0,0,827,825,
        1,0,0,0,828,830,5,143,0,0,829,828,1,0,0,0,829,830,1,0,0,0,830,832,
        1,0,0,0,831,817,1,0,0,0,832,835,1,0,0,0,833,831,1,0,0,0,833,834,
        1,0,0,0,834,838,1,0,0,0,835,833,1,0,0,0,836,838,3,8,4,0,837,798,
        1,0,0,0,837,836,1,0,0,0,838,79,1,0,0,0,839,961,3,388,194,0,840,842,
        3,448,224,0,841,843,3,28,14,0,842,841,1,0,0,0,842,843,1,0,0,0,843,
        961,1,0,0,0,844,845,5,129,0,0,845,846,3,34,17,0,846,847,5,130,0,
        0,847,961,1,0,0,0,848,961,3,92,46,0,849,961,3,236,118,0,850,961,
        5,115,0,0,851,961,5,94,0,0,852,862,5,17,0,0,853,854,5,131,0,0,854,
        856,3,448,224,0,855,857,3,28,14,0,856,855,1,0,0,0,856,857,1,0,0,
        0,857,863,1,0,0,0,858,859,5,127,0,0,859,860,3,94,47,0,860,861,5,
        128,0,0,861,863,1,0,0,0,862,853,1,0,0,0,862,858,1,0,0,0,863,961,
        1,0,0,0,864,893,5,66,0,0,865,887,3,4,2,0,866,888,3,446,223,0,867,
        888,3,96,48,0,868,869,5,127,0,0,869,870,3,94,47,0,870,874,5,128,
        0,0,871,873,3,330,165,0,872,871,1,0,0,0,873,876,1,0,0,0,874,872,
        1,0,0,0,874,875,1,0,0,0,875,878,1,0,0,0,876,874,1,0,0,0,877,879,
        3,332,166,0,878,877,1,0,0,0,878,879,1,0,0,0,879,888,1,0,0,0,880,
        882,3,330,165,0,881,880,1,0,0,0,882,883,1,0,0,0,883,881,1,0,0,0,
        883,884,1,0,0,0,884,885,1,0,0,0,885,886,3,332,166,0,886,888,1,0,
        0,0,887,866,1,0,0,0,887,867,1,0,0,0,887,868,1,0,0,0,887,881,1,0,
        0,0,888,894,1,0,0,0,889,894,3,110,55,0,890,891,3,330,165,0,891,892,
        3,332,166,0,892,894,1,0,0,0,893,865,1,0,0,0,893,889,1,0,0,0,893,
        890,1,0,0,0,893,894,1,0,0,0,894,961,1,0,0,0,895,896,5,129,0,0,896,
        899,3,32,16,0,897,898,5,132,0,0,898,900,3,32,16,0,899,897,1,0,0,
        0,900,901,1,0,0,0,901,899,1,0,0,0,901,902,1,0,0,0,902,903,1,0,0,
        0,903,904,5,130,0,0,904,961,1,0,0,0,905,906,5,98,0,0,906,910,5,129,
        0,0,907,911,3,116,58,0,908,911,3,4,2,0,909,911,5,108,0,0,910,907,
        1,0,0,0,910,908,1,0,0,0,910,909,1,0,0,0,911,912,1,0,0,0,912,961,
        5,130,0,0,913,914,5,25,0,0,914,915,5,129,0,0,915,916,3,34,17,0,916,
        917,5,130,0,0,917,961,1,0,0,0,918,919,5,101,0,0,919,920,5,129,0,
        0,920,921,3,34,17,0,921,922,5,130,0,0,922,961,1,0,0,0,923,928,5,
        30,0,0,924,925,5,129,0,0,925,926,3,4,2,0,926,927,5,130,0,0,927,929,
        1,0,0,0,928,924,1,0,0,0,928,929,1,0,0,0,929,961,1,0,0,0,930,932,
        5,15,0,0,931,930,1,0,0,0,931,932,1,0,0,0,932,933,1,0,0,0,933,939,
        5,31,0,0,934,936,5,129,0,0,935,937,3,130,65,0,936,935,1,0,0,0,936,
        937,1,0,0,0,937,938,1,0,0,0,938,940,5,130,0,0,939,934,1,0,0,0,939,
        940,1,0,0,0,940,941,1,0,0,0,941,961,3,178,89,0,942,943,5,88,0,0,
        943,944,5,129,0,0,944,945,3,4,2,0,945,946,5,130,0,0,946,961,1,0,
        0,0,947,948,5,64,0,0,948,954,5,129,0,0,949,950,3,448,224,0,950,951,
        5,131,0,0,951,953,1,0,0,0,952,949,1,0,0,0,953,956,1,0,0,0,954,952,
        1,0,0,0,954,955,1,0,0,0,955,957,1,0,0,0,956,954,1,0,0,0,957,958,
        3,448,224,0,958,959,5,130,0,0,959,961,1,0,0,0,960,839,1,0,0,0,960,
        840,1,0,0,0,960,844,1,0,0,0,960,848,1,0,0,0,960,849,1,0,0,0,960,
        850,1,0,0,0,960,851,1,0,0,0,960,852,1,0,0,0,960,864,1,0,0,0,960,
        895,1,0,0,0,960,905,1,0,0,0,960,913,1,0,0,0,960,918,1,0,0,0,960,
        923,1,0,0,0,960,931,1,0,0,0,960,942,1,0,0,0,960,947,1,0,0,0,961,
        81,1,0,0,0,962,965,3,34,17,0,963,965,3,84,42,0,964,962,1,0,0,0,964,
        963,1,0,0,0,965,83,1,0,0,0,966,967,5,95,0,0,967,968,3,34,17,0,968,
        85,1,0,0,0,969,971,5,148,0,0,970,969,1,0,0,0,970,971,1,0,0,0,971,
        972,1,0,0,0,972,973,5,131,0,0,973,975,3,448,224,0,974,976,3,28,14,
        0,975,974,1,0,0,0,975,976,1,0,0,0,976,87,1,0,0,0,977,979,5,148,0,
        0,978,977,1,0,0,0,978,979,1,0,0,0,979,980,1,0,0,0,980,981,5,127,
        0,0,981,986,3,90,45,0,982,983,5,132,0,0,983,985,3,90,45,0,984,982,
        1,0,0,0,985,988,1,0,0,0,986,984,1,0,0,0,986,987,1,0,0,0,987,989,
        1,0,0,0,988,986,1,0,0,0,989,990,5,128,0,0,990,89,1,0,0,0,991,992,
        3,448,224,0,992,993,5,133,0,0,993,995,1,0,0,0,994,991,1,0,0,0,994,
        995,1,0,0,0,995,996,1,0,0,0,996,997,3,34,17,0,997,91,1,0,0,0,998,
        999,7,7,0,0,999,93,1,0,0,0,1000,1005,3,34,17,0,1001,1002,5,132,0,
        0,1002,1004,3,34,17,0,1003,1001,1,0,0,0,1004,1007,1,0,0,0,1005,1003,
        1,0,0,0,1005,1006,1,0,0,0,1006,95,1,0,0,0,1007,1005,1,0,0,0,1008,
        1011,3,98,49,0,1009,1011,3,106,53,0,1010,1008,1,0,0,0,1010,1009,
        1,0,0,0,1011,97,1,0,0,0,1012,1017,5,125,0,0,1013,1015,3,100,50,0,
        1014,1016,5,132,0,0,1015,1014,1,0,0,0,1015,1016,1,0,0,0,1016,1018,
        1,0,0,0,1017,1013,1,0,0,0,1017,1018,1,0,0,0,1018,1019,1,0,0,0,1019,
        1020,5,126,0,0,1020,99,1,0,0,0,1021,1026,3,102,51,0,1022,1023,5,
        132,0,0,1023,1025,3,102,51,0,1024,1022,1,0,0,0,1025,1028,1,0,0,0,
        1026,1024,1,0,0,0,1026,1027,1,0,0,0,1027,101,1,0,0,0,1028,1026,1,
        0,0,0,1029,1035,3,448,224,0,1030,1031,5,127,0,0,1031,1032,3,34,17,
        0,1032,1033,5,128,0,0,1033,1035,1,0,0,0,1034,1029,1,0,0,0,1034,1030,
        1,0,0,0,1035,1036,1,0,0,0,1036,1037,5,145,0,0,1037,1038,3,104,52,
        0,1038,103,1,0,0,0,1039,1043,3,34,17,0,1040,1043,3,96,48,0,1041,
        1043,3,8,4,0,1042,1039,1,0,0,0,1042,1040,1,0,0,0,1042,1041,1,0,0,
        0,1043,105,1,0,0,0,1044,1045,5,125,0,0,1045,1050,3,108,54,0,1046,
        1047,5,132,0,0,1047,1049,3,108,54,0,1048,1046,1,0,0,0,1049,1052,
        1,0,0,0,1050,1048,1,0,0,0,1050,1051,1,0,0,0,1051,1054,1,0,0,0,1052,
        1050,1,0,0,0,1053,1055,5,132,0,0,1054,1053,1,0,0,0,1054,1055,1,0,
        0,0,1055,1056,1,0,0,0,1056,1057,5,126,0,0,1057,107,1,0,0,0,1058,
        1064,3,36,18,0,1059,1060,5,125,0,0,1060,1061,3,94,47,0,1061,1062,
        5,126,0,0,1062,1064,1,0,0,0,1063,1058,1,0,0,0,1063,1059,1,0,0,0,
        1064,109,1,0,0,0,1065,1070,5,125,0,0,1066,1068,3,112,56,0,1067,1069,
        5,132,0,0,1068,1067,1,0,0,0,1068,1069,1,0,0,0,1069,1071,1,0,0,0,
        1070,1066,1,0,0,0,1070,1071,1,0,0,0,1071,1072,1,0,0,0,1072,1073,
        5,126,0,0,1073,111,1,0,0,0,1074,1079,3,114,57,0,1075,1076,5,132,
        0,0,1076,1078,3,114,57,0,1077,1075,1,0,0,0,1078,1081,1,0,0,0,1079,
        1077,1,0,0,0,1079,1080,1,0,0,0,1080,113,1,0,0,0,1081,1079,1,0,0,
        0,1082,1088,3,78,39,0,1083,1084,3,448,224,0,1084,1085,5,145,0,0,
        1085,1086,3,34,17,0,1086,1088,1,0,0,0,1087,1082,1,0,0,0,1087,1083,
        1,0,0,0,1088,115,1,0,0,0,1089,1098,3,448,224,0,1090,1092,3,118,59,
        0,1091,1090,1,0,0,0,1091,1092,1,0,0,0,1092,1099,1,0,0,0,1093,1094,
        5,149,0,0,1094,1096,3,448,224,0,1095,1097,3,118,59,0,1096,1095,1,
        0,0,0,1096,1097,1,0,0,0,1097,1099,1,0,0,0,1098,1091,1,0,0,0,1098,
        1093,1,0,0,0,1099,1107,1,0,0,0,1100,1101,5,131,0,0,1101,1103,3,448,
        224,0,1102,1104,3,118,59,0,1103,1102,1,0,0,0,1103,1104,1,0,0,0,1104,
        1106,1,0,0,0,1105,1100,1,0,0,0,1106,1109,1,0,0,0,1107,1105,1,0,0,
        0,1107,1108,1,0,0,0,1108,117,1,0,0,0,1109,1107,1,0,0,0,1110,1114,
        5,146,0,0,1111,1113,5,132,0,0,1112,1111,1,0,0,0,1113,1116,1,0,0,
        0,1114,1112,1,0,0,0,1114,1115,1,0,0,0,1115,1117,1,0,0,0,1116,1114,
        1,0,0,0,1117,1118,5,147,0,0,1118,119,1,0,0,0,1119,1124,3,6,3,0,1120,
        1123,3,330,165,0,1121,1123,5,137,0,0,1122,1120,1,0,0,0,1122,1121,
        1,0,0,0,1123,1126,1,0,0,0,1124,1122,1,0,0,0,1124,1125,1,0,0,0,1125,
        1128,1,0,0,0,1126,1124,1,0,0,0,1127,1129,5,148,0,0,1128,1127,1,0,
        0,0,1128,1129,1,0,0,0,1129,1131,1,0,0,0,1130,1132,3,122,61,0,1131,
        1130,1,0,0,0,1131,1132,1,0,0,0,1132,1134,1,0,0,0,1133,1135,3,448,
        224,0,1134,1133,1,0,0,0,1134,1135,1,0,0,0,1135,121,1,0,0,0,1136,
        1137,5,125,0,0,1137,1142,3,124,62,0,1138,1139,5,132,0,0,1139,1141,
        3,124,62,0,1140,1138,1,0,0,0,1141,1144,1,0,0,0,1142,1140,1,0,0,0,
        1142,1143,1,0,0,0,1143,1145,1,0,0,0,1144,1142,1,0,0,0,1145,1146,
        5,126,0,0,1146,123,1,0,0,0,1147,1148,3,448,224,0,1148,1149,5,133,
        0,0,1149,1150,3,34,17,0,1150,125,1,0,0,0,1151,1153,5,15,0,0,1152,
        1151,1,0,0,0,1152,1153,1,0,0,0,1153,1154,1,0,0,0,1154,1155,3,128,
        64,0,1155,1156,3,382,191,0,1156,1157,3,136,68,0,1157,127,1,0,0,0,
        1158,1159,5,129,0,0,1159,1170,5,130,0,0,1160,1161,5,129,0,0,1161,
        1162,3,130,65,0,1162,1163,5,130,0,0,1163,1170,1,0,0,0,1164,1165,
        5,129,0,0,1165,1166,3,134,67,0,1166,1167,5,130,0,0,1167,1170,1,0,
        0,0,1168,1170,3,448,224,0,1169,1158,1,0,0,0,1169,1160,1,0,0,0,1169,
        1164,1,0,0,0,1169,1168,1,0,0,0,1170,129,1,0,0,0,1171,1176,3,132,
        66,0,1172,1173,5,132,0,0,1173,1175,3,132,66,0,1174,1172,1,0,0,0,
        1175,1178,1,0,0,0,1176,1174,1,0,0,0,1176,1177,1,0,0,0,1177,131,1,
        0,0,0,1178,1176,1,0,0,0,1179,1181,7,2,0,0,1180,1179,1,0,0,0,1180,
        1181,1,0,0,0,1181,1182,1,0,0,0,1182,1183,3,4,2,0,1183,1184,3,448,
        224,0,1184,133,1,0,0,0,1185,1190,3,448,224,0,1186,1187,5,132,0,0,
        1187,1189,3,448,224,0,1188,1186,1,0,0,0,1189,1192,1,0,0,0,1190,1188,
        1,0,0,0,1190,1191,1,0,0,0,1191,135,1,0,0,0,1192,1190,1,0,0,0,1193,
        1196,3,82,41,0,1194,1196,3,178,89,0,1195,1193,1,0,0,0,1195,1194,
        1,0,0,0,1196,137,1,0,0,0,1197,1198,3,140,70,0,1198,1199,3,142,71,
        0,1199,139,1,0,0,0,1200,1202,5,48,0,0,1201,1203,3,4,2,0,1202,1201,
        1,0,0,0,1202,1203,1,0,0,0,1203,1204,1,0,0,0,1204,1205,3,448,224,
        0,1205,1206,5,54,0,0,1206,1207,3,34,17,0,1207,141,1,0,0,0,1208,1210,
        3,144,72,0,1209,1208,1,0,0,0,1210,1213,1,0,0,0,1211,1209,1,0,0,0,
        1211,1212,1,0,0,0,1212,1214,1,0,0,0,1213,1211,1,0,0,0,1214,1216,
        3,156,78,0,1215,1217,3,158,79,0,1216,1215,1,0,0,0,1216,1217,1,0,
        0,0,1217,143,1,0,0,0,1218,1224,3,140,70,0,1219,1224,3,146,73,0,1220,
        1224,3,148,74,0,1221,1224,3,150,75,0,1222,1224,3,152,76,0,1223,1218,
        1,0,0,0,1223,1219,1,0,0,0,1223,1220,1,0,0,0,1223,1221,1,0,0,0,1223,
        1222,1,0,0,0,1224,145,1,0,0,0,1225,1226,5,61,0,0,1226,1227,3,448,
        224,0,1227,1228,5,145,0,0,1228,1229,3,34,17,0,1229,147,1,0,0,0,1230,
        1231,5,111,0,0,1231,1232,3,34,17,0,1232,149,1,0,0,0,1233,1235,5,
        60,0,0,1234,1236,3,4,2,0,1235,1234,1,0,0,0,1235,1236,1,0,0,0,1236,
        1237,1,0,0,0,1237,1238,3,448,224,0,1238,1239,5,54,0,0,1239,1240,
        3,34,17,0,1240,1241,5,69,0,0,1241,1242,3,34,17,0,1242,1243,5,38,
        0,0,1243,1246,3,34,17,0,1244,1245,5,58,0,0,1245,1247,3,448,224,0,
        1246,1244,1,0,0,0,1246,1247,1,0,0,0,1247,151,1,0,0,0,1248,1249,5,
        71,0,0,1249,1254,3,154,77,0,1250,1251,5,132,0,0,1251,1253,3,154,
        77,0,1252,1250,1,0,0,0,1253,1256,1,0,0,0,1254,1252,1,0,0,0,1254,
        1255,1,0,0,0,1255,153,1,0,0,0,1256,1254,1,0,0,0,1257,1259,3,34,17,
        0,1258,1260,7,8,0,0,1259,1258,1,0,0,0,1259,1260,1,0,0,0,1260,155,
        1,0,0,0,1261,1262,5,85,0,0,1262,1269,3,34,17,0,1263,1264,5,51,0,
        0,1264,1265,3,34,17,0,1265,1266,5,20,0,0,1266,1267,3,34,17,0,1267,
        1269,1,0,0,0,1268,1261,1,0,0,0,1268,1263,1,0,0,0,1269,157,1,0,0,
        0,1270,1271,5,58,0,0,1271,1272,3,448,224,0,1272,1273,3,142,71,0,
        1273,159,1,0,0,0,1274,1278,3,172,86,0,1275,1278,3,162,81,0,1276,
        1278,3,174,87,0,1277,1274,1,0,0,0,1277,1275,1,0,0,0,1277,1276,1,
        0,0,0,1278,161,1,0,0,0,1279,1280,3,180,90,0,1280,1281,5,134,0,0,
        1281,1287,1,0,0,0,1282,1283,3,188,94,0,1283,1284,5,134,0,0,1284,
        1287,1,0,0,0,1285,1287,3,164,82,0,1286,1279,1,0,0,0,1286,1282,1,
        0,0,0,1286,1285,1,0,0,0,1287,163,1,0,0,0,1288,1289,3,166,83,0,1289,
        1290,3,170,85,0,1290,165,1,0,0,0,1291,1293,3,168,84,0,1292,1291,
        1,0,0,0,1292,1293,1,0,0,0,1293,1294,1,0,0,0,1294,1295,3,282,141,
        0,1295,1297,3,448,224,0,1296,1298,3,238,119,0,1297,1296,1,0,0,0,
        1297,1298,1,0,0,0,1298,1299,1,0,0,0,1299,1301,5,129,0,0,1300,1302,
        3,288,144,0,1301,1300,1,0,0,0,1301,1302,1,0,0,0,1302,1303,1,0,0,
        0,1303,1305,5,130,0,0,1304,1306,3,246,123,0,1305,1304,1,0,0,0,1305,
        1306,1,0,0,0,1306,167,1,0,0,0,1307,1309,7,9,0,0,1308,1310,5,90,0,
        0,1309,1308,1,0,0,0,1309,1310,1,0,0,0,1310,1314,1,0,0,0,1311,1312,
        5,90,0,0,1312,1314,7,9,0,0,1313,1307,1,0,0,0,1313,1311,1,0,0,0,1314,
        169,1,0,0,0,1315,1321,3,178,89,0,1316,1317,3,382,191,0,1317,1318,
        3,82,41,0,1318,1319,5,134,0,0,1319,1321,1,0,0,0,1320,1315,1,0,0,
        0,1320,1316,1,0,0,0,1321,171,1,0,0,0,1322,1323,3,448,224,0,1323,
        1324,5,133,0,0,1324,1325,3,160,80,0,1325,173,1,0,0,0,1326,1329,3,
        178,89,0,1327,1329,3,176,88,0,1328,1326,1,0,0,0,1328,1327,1,0,0,
        0,1329,175,1,0,0,0,1330,1464,5,134,0,0,1331,1332,3,34,17,0,1332,
        1333,5,134,0,0,1333,1464,1,0,0,0,1334,1335,5,52,0,0,1335,1336,5,
        129,0,0,1336,1337,3,34,17,0,1337,1338,5,130,0,0,1338,1341,3,190,
        95,0,1339,1340,5,36,0,0,1340,1342,3,190,95,0,1341,1339,1,0,0,0,1341,
        1342,1,0,0,0,1342,1464,1,0,0,0,1343,1344,5,93,0,0,1344,1345,5,129,
        0,0,1345,1346,3,34,17,0,1346,1347,5,130,0,0,1347,1351,5,125,0,0,
        1348,1350,3,192,96,0,1349,1348,1,0,0,0,1350,1353,1,0,0,0,1351,1349,
        1,0,0,0,1351,1352,1,0,0,0,1352,1354,1,0,0,0,1353,1351,1,0,0,0,1354,
        1355,5,126,0,0,1355,1464,1,0,0,0,1356,1357,5,112,0,0,1357,1358,5,
        129,0,0,1358,1359,3,34,17,0,1359,1360,5,130,0,0,1360,1361,3,174,
        87,0,1361,1464,1,0,0,0,1362,1363,5,33,0,0,1363,1364,3,174,87,0,1364,
        1365,5,112,0,0,1365,1366,5,129,0,0,1366,1367,3,34,17,0,1367,1368,
        5,130,0,0,1368,1369,5,134,0,0,1369,1464,1,0,0,0,1370,1371,5,46,0,
        0,1371,1373,5,129,0,0,1372,1374,3,200,100,0,1373,1372,1,0,0,0,1373,
        1374,1,0,0,0,1374,1375,1,0,0,0,1375,1377,5,134,0,0,1376,1378,3,34,
        17,0,1377,1376,1,0,0,0,1377,1378,1,0,0,0,1378,1379,1,0,0,0,1379,
        1381,5,134,0,0,1380,1382,3,202,101,0,1381,1380,1,0,0,0,1381,1382,
        1,0,0,0,1382,1383,1,0,0,0,1383,1384,5,130,0,0,1384,1464,3,174,87,
        0,1385,1387,5,16,0,0,1386,1385,1,0,0,0,1386,1387,1,0,0,0,1387,1388,
        1,0,0,0,1388,1389,5,47,0,0,1389,1390,5,129,0,0,1390,1393,3,182,91,
        0,1391,1394,3,448,224,0,1392,1394,3,14,7,0,1393,1391,1,0,0,0,1393,
        1392,1,0,0,0,1394,1395,1,0,0,0,1395,1396,5,54,0,0,1396,1397,3,34,
        17,0,1397,1398,5,130,0,0,1398,1399,3,174,87,0,1399,1464,1,0,0,0,
        1400,1401,5,19,0,0,1401,1464,5,134,0,0,1402,1403,5,28,0,0,1403,1464,
        5,134,0,0,1404,1409,5,50,0,0,1405,1410,3,448,224,0,1406,1407,5,22,
        0,0,1407,1410,3,34,17,0,1408,1410,5,30,0,0,1409,1405,1,0,0,0,1409,
        1406,1,0,0,0,1409,1408,1,0,0,0,1410,1411,1,0,0,0,1411,1464,5,134,
        0,0,1412,1414,5,82,0,0,1413,1415,3,34,17,0,1414,1413,1,0,0,0,1414,
        1415,1,0,0,0,1415,1416,1,0,0,0,1416,1464,5,134,0,0,1417,1419,5,95,
        0,0,1418,1420,3,34,17,0,1419,1418,1,0,0,0,1419,1420,1,0,0,0,1420,
        1421,1,0,0,0,1421,1464,5,134,0,0,1422,1423,5,97,0,0,1423,1429,3,
        178,89,0,1424,1426,3,204,102,0,1425,1427,3,212,106,0,1426,1425,1,
        0,0,0,1426,1427,1,0,0,0,1427,1430,1,0,0,0,1428,1430,3,212,106,0,
        1429,1424,1,0,0,0,1429,1428,1,0,0,0,1430,1464,1,0,0,0,1431,1432,
        5,25,0,0,1432,1464,3,178,89,0,1433,1434,5,101,0,0,1434,1464,3,178,
        89,0,1435,1436,5,62,0,0,1436,1437,5,129,0,0,1437,1438,3,34,17,0,
        1438,1439,5,130,0,0,1439,1440,3,174,87,0,1440,1464,1,0,0,0,1441,
        1442,5,105,0,0,1442,1443,5,129,0,0,1443,1444,3,214,107,0,1444,1445,
        5,130,0,0,1445,1446,3,174,87,0,1446,1464,1,0,0,0,1447,1451,5,113,
        0,0,1448,1449,5,82,0,0,1449,1452,3,34,17,0,1450,1452,5,19,0,0,1451,
        1448,1,0,0,0,1451,1450,1,0,0,0,1452,1453,1,0,0,0,1453,1464,5,134,
        0,0,1454,1455,5,103,0,0,1455,1464,3,178,89,0,1456,1457,5,44,0,0,
        1457,1458,5,129,0,0,1458,1459,3,370,185,0,1459,1460,3,372,186,0,
        1460,1461,5,130,0,0,1461,1462,3,174,87,0,1462,1464,1,0,0,0,1463,
        1330,1,0,0,0,1463,1331,1,0,0,0,1463,1334,1,0,0,0,1463,1343,1,0,0,
        0,1463,1356,1,0,0,0,1463,1362,1,0,0,0,1463,1370,1,0,0,0,1463,1386,
        1,0,0,0,1463,1400,1,0,0,0,1463,1402,1,0,0,0,1463,1404,1,0,0,0,1463,
        1412,1,0,0,0,1463,1417,1,0,0,0,1463,1422,1,0,0,0,1463,1431,1,0,0,
        0,1463,1433,1,0,0,0,1463,1435,1,0,0,0,1463,1441,1,0,0,0,1463,1447,
        1,0,0,0,1463,1454,1,0,0,0,1463,1456,1,0,0,0,1464,177,1,0,0,0,1465,
        1467,5,125,0,0,1466,1468,3,198,99,0,1467,1466,1,0,0,0,1467,1468,
        1,0,0,0,1468,1469,1,0,0,0,1469,1470,5,126,0,0,1470,179,1,0,0,0,1471,
        1476,5,105,0,0,1472,1476,5,80,0,0,1473,1474,5,80,0,0,1474,1476,5,
        79,0,0,1475,1471,1,0,0,0,1475,1472,1,0,0,0,1475,1473,1,0,0,0,1475,
        1476,1,0,0,0,1476,1477,1,0,0,0,1477,1478,3,182,91,0,1478,1483,3,
        184,92,0,1479,1480,5,132,0,0,1480,1482,3,184,92,0,1481,1479,1,0,
        0,0,1482,1485,1,0,0,0,1483,1481,1,0,0,0,1483,1484,1,0,0,0,1484,1496,
        1,0,0,0,1485,1483,1,0,0,0,1486,1487,5,44,0,0,1487,1488,3,370,185,
        0,1488,1489,3,372,186,0,1489,1496,1,0,0,0,1490,1491,5,106,0,0,1491,
        1492,3,10,5,0,1492,1493,5,145,0,0,1493,1494,3,34,17,0,1494,1496,
        1,0,0,0,1495,1475,1,0,0,0,1495,1486,1,0,0,0,1495,1490,1,0,0,0,1496,
        181,1,0,0,0,1497,1500,5,106,0,0,1498,1500,3,4,2,0,1499,1497,1,0,
        0,0,1499,1498,1,0,0,0,1500,183,1,0,0,0,1501,1507,3,448,224,0,1502,
        1504,5,145,0,0,1503,1505,5,80,0,0,1504,1503,1,0,0,0,1504,1505,1,
        0,0,0,1505,1506,1,0,0,0,1506,1508,3,186,93,0,1507,1502,1,0,0,0,1507,
        1508,1,0,0,0,1508,185,1,0,0,0,1509,1514,3,34,17,0,1510,1514,3,332,
        166,0,1511,1514,3,380,190,0,1512,1514,3,14,7,0,1513,1509,1,0,0,0,
        1513,1510,1,0,0,0,1513,1511,1,0,0,0,1513,1512,1,0,0,0,1514,187,1,
        0,0,0,1515,1516,5,27,0,0,1516,1517,3,4,2,0,1517,1518,3,272,136,0,
        1518,189,1,0,0,0,1519,1522,3,178,89,0,1520,1522,3,176,88,0,1521,
        1519,1,0,0,0,1521,1520,1,0,0,0,1522,191,1,0,0,0,1523,1525,3,194,
        97,0,1524,1523,1,0,0,0,1525,1526,1,0,0,0,1526,1524,1,0,0,0,1526,
        1527,1,0,0,0,1527,1528,1,0,0,0,1528,1529,3,198,99,0,1529,193,1,0,
        0,0,1530,1531,5,22,0,0,1531,1533,3,34,17,0,1532,1534,3,196,98,0,
        1533,1532,1,0,0,0,1533,1534,1,0,0,0,1534,1535,1,0,0,0,1535,1536,
        5,133,0,0,1536,1540,1,0,0,0,1537,1538,5,30,0,0,1538,1540,5,133,0,
        0,1539,1530,1,0,0,0,1539,1537,1,0,0,0,1540,195,1,0,0,0,1541,1542,
        5,110,0,0,1542,1543,3,34,17,0,1543,197,1,0,0,0,1544,1546,3,160,80,
        0,1545,1544,1,0,0,0,1546,1547,1,0,0,0,1547,1545,1,0,0,0,1547,1548,
        1,0,0,0,1548,199,1,0,0,0,1549,1559,3,180,90,0,1550,1555,3,34,17,
        0,1551,1552,5,132,0,0,1552,1554,3,34,17,0,1553,1551,1,0,0,0,1554,
        1557,1,0,0,0,1555,1553,1,0,0,0,1555,1556,1,0,0,0,1556,1559,1,0,0,
        0,1557,1555,1,0,0,0,1558,1549,1,0,0,0,1558,1550,1,0,0,0,1559,201,
        1,0,0,0,1560,1565,3,34,17,0,1561,1562,5,132,0,0,1562,1564,3,34,17,
        0,1563,1561,1,0,0,0,1564,1567,1,0,0,0,1565,1563,1,0,0,0,1565,1566,
        1,0,0,0,1566,203,1,0,0,0,1567,1565,1,0,0,0,1568,1572,3,206,103,0,
        1569,1571,3,206,103,0,1570,1569,1,0,0,0,1571,1574,1,0,0,0,1572,1570,
        1,0,0,0,1572,1573,1,0,0,0,1573,1576,1,0,0,0,1574,1572,1,0,0,0,1575,
        1577,3,208,104,0,1576,1575,1,0,0,0,1576,1577,1,0,0,0,1577,1580,1,
        0,0,0,1578,1580,3,208,104,0,1579,1568,1,0,0,0,1579,1578,1,0,0,0,
        1580,205,1,0,0,0,1581,1582,5,23,0,0,1582,1583,5,129,0,0,1583,1585,
        3,26,13,0,1584,1586,3,448,224,0,1585,1584,1,0,0,0,1585,1586,1,0,
        0,0,1586,1587,1,0,0,0,1587,1589,5,130,0,0,1588,1590,3,210,105,0,
        1589,1588,1,0,0,0,1589,1590,1,0,0,0,1590,1591,1,0,0,0,1591,1592,
        3,178,89,0,1592,207,1,0,0,0,1593,1595,5,23,0,0,1594,1596,3,210,105,
        0,1595,1594,1,0,0,0,1595,1596,1,0,0,0,1596,1597,1,0,0,0,1597,1598,
        3,178,89,0,1598,209,1,0,0,0,1599,1600,5,110,0,0,1600,1601,5,129,
        0,0,1601,1602,3,34,17,0,1602,1603,5,130,0,0,1603,211,1,0,0,0,1604,
        1605,5,43,0,0,1605,1606,3,178,89,0,1606,213,1,0,0,0,1607,1610,3,
        180,90,0,1608,1610,3,34,17,0,1609,1607,1,0,0,0,1609,1608,1,0,0,0,
        1610,215,1,0,0,0,1611,1612,5,65,0,0,1612,1613,3,218,109,0,1613,1615,
        3,220,110,0,1614,1616,5,134,0,0,1615,1614,1,0,0,0,1615,1616,1,0,
        0,0,1616,217,1,0,0,0,1617,1622,3,448,224,0,1618,1619,5,131,0,0,1619,
        1621,3,448,224,0,1620,1618,1,0,0,0,1621,1624,1,0,0,0,1622,1620,1,
        0,0,0,1622,1623,1,0,0,0,1623,219,1,0,0,0,1624,1622,1,0,0,0,1625,
        1627,5,125,0,0,1626,1628,3,222,111,0,1627,1626,1,0,0,0,1627,1628,
        1,0,0,0,1628,1630,1,0,0,0,1629,1631,3,226,113,0,1630,1629,1,0,0,
        0,1630,1631,1,0,0,0,1631,1633,1,0,0,0,1632,1634,3,230,115,0,1633,
        1632,1,0,0,0,1633,1634,1,0,0,0,1634,1635,1,0,0,0,1635,1636,5,126,
        0,0,1636,221,1,0,0,0,1637,1639,3,224,112,0,1638,1637,1,0,0,0,1639,
        1640,1,0,0,0,1640,1638,1,0,0,0,1640,1641,1,0,0,0,1641,223,1,0,0,
        0,1642,1643,5,41,0,0,1643,1644,5,11,0,0,1644,1645,3,448,224,0,1645,
        1646,5,134,0,0,1646,225,1,0,0,0,1647,1649,3,228,114,0,1648,1647,
        1,0,0,0,1649,1650,1,0,0,0,1650,1648,1,0,0,0,1650,1651,1,0,0,0,1651,
        227,1,0,0,0,1652,1653,5,105,0,0,1653,1654,3,448,224,0,1654,1655,
        5,145,0,0,1655,1656,3,2,1,0,1656,1657,5,134,0,0,1657,1668,1,0,0,
        0,1658,1659,5,105,0,0,1659,1660,3,2,1,0,1660,1661,5,134,0,0,1661,
        1668,1,0,0,0,1662,1663,5,105,0,0,1663,1664,5,90,0,0,1664,1665,3,
        2,1,0,1665,1666,5,134,0,0,1666,1668,1,0,0,0,1667,1652,1,0,0,0,1667,
        1658,1,0,0,0,1667,1662,1,0,0,0,1668,229,1,0,0,0,1669,1671,3,232,
        116,0,1670,1669,1,0,0,0,1671,1672,1,0,0,0,1672,1670,1,0,0,0,1672,
        1673,1,0,0,0,1673,231,1,0,0,0,1674,1677,3,216,108,0,1675,1677,3,
        234,117,0,1676,1674,1,0,0,0,1676,1675,1,0,0,0,1677,233,1,0,0,0,1678,
        1680,3,358,179,0,1679,1678,1,0,0,0,1679,1680,1,0,0,0,1680,1682,1,
        0,0,0,1681,1683,3,264,132,0,1682,1681,1,0,0,0,1682,1683,1,0,0,0,
        1683,1689,1,0,0,0,1684,1690,3,412,206,0,1685,1690,3,414,207,0,1686,
        1690,3,416,208,0,1687,1690,3,418,209,0,1688,1690,3,420,210,0,1689,
        1684,1,0,0,0,1689,1685,1,0,0,0,1689,1686,1,0,0,0,1689,1687,1,0,0,
        0,1689,1688,1,0,0,0,1690,235,1,0,0,0,1691,1692,3,448,224,0,1692,
        1693,5,149,0,0,1693,1695,3,448,224,0,1694,1696,3,28,14,0,1695,1694,
        1,0,0,0,1695,1696,1,0,0,0,1696,237,1,0,0,0,1697,1698,5,146,0,0,1698,
        1703,3,240,120,0,1699,1700,5,132,0,0,1700,1702,3,240,120,0,1701,
        1699,1,0,0,0,1702,1705,1,0,0,0,1703,1701,1,0,0,0,1703,1704,1,0,0,
        0,1704,1706,1,0,0,0,1705,1703,1,0,0,0,1706,1707,5,147,0,0,1707,239,
        1,0,0,0,1708,1710,3,358,179,0,1709,1708,1,0,0,0,1709,1710,1,0,0,
        0,1710,1711,1,0,0,0,1711,1712,3,448,224,0,1712,241,1,0,0,0,1713,
        1714,5,133,0,0,1714,1719,3,26,13,0,1715,1716,5,132,0,0,1716,1718,
        3,2,1,0,1717,1715,1,0,0,0,1718,1721,1,0,0,0,1719,1717,1,0,0,0,1719,
        1720,1,0,0,0,1720,243,1,0,0,0,1721,1719,1,0,0,0,1722,1727,3,2,1,
        0,1723,1724,5,132,0,0,1724,1726,3,2,1,0,1725,1723,1,0,0,0,1726,1729,
        1,0,0,0,1727,1725,1,0,0,0,1727,1728,1,0,0,0,1728,245,1,0,0,0,1729,
        1727,1,0,0,0,1730,1732,3,248,124,0,1731,1730,1,0,0,0,1732,1733,1,
        0,0,0,1733,1731,1,0,0,0,1733,1734,1,0,0,0,1734,247,1,0,0,0,1735,
        1736,5,111,0,0,1736,1737,3,448,224,0,1737,1738,5,133,0,0,1738,1739,
        3,250,125,0,1739,249,1,0,0,0,1740,1751,3,256,128,0,1741,1744,3,252,
        126,0,1742,1743,5,132,0,0,1743,1745,3,254,127,0,1744,1742,1,0,0,
        0,1744,1745,1,0,0,0,1745,1748,1,0,0,0,1746,1747,5,132,0,0,1747,1749,
        3,256,128,0,1748,1746,1,0,0,0,1748,1749,1,0,0,0,1749,1751,1,0,0,
        0,1750,1740,1,0,0,0,1750,1741,1,0,0,0,1751,251,1,0,0,0,1752,1760,
        3,26,13,0,1753,1755,5,26,0,0,1754,1756,5,148,0,0,1755,1754,1,0,0,
        0,1755,1756,1,0,0,0,1756,1760,1,0,0,0,1757,1760,5,92,0,0,1758,1760,
        5,102,0,0,1759,1752,1,0,0,0,1759,1753,1,0,0,0,1759,1757,1,0,0,0,
        1759,1758,1,0,0,0,1760,253,1,0,0,0,1761,1766,3,2,1,0,1762,1763,5,
        132,0,0,1763,1765,3,2,1,0,1764,1762,1,0,0,0,1765,1768,1,0,0,0,1766,
        1764,1,0,0,0,1766,1767,1,0,0,0,1767,255,1,0,0,0,1768,1766,1,0,0,
        0,1769,1770,5,66,0,0,1770,1771,5,129,0,0,1771,1772,5,130,0,0,1772,
        257,1,0,0,0,1773,1775,5,125,0,0,1774,1776,3,260,130,0,1775,1774,
        1,0,0,0,1775,1776,1,0,0,0,1776,1777,1,0,0,0,1777,1778,5,126,0,0,
        1778,259,1,0,0,0,1779,1781,3,262,131,0,1780,1779,1,0,0,0,1781,1782,
        1,0,0,0,1782,1780,1,0,0,0,1782,1783,1,0,0,0,1783,261,1,0,0,0,1784,
        1786,3,358,179,0,1785,1784,1,0,0,0,1785,1786,1,0,0,0,1786,1788,1,
        0,0,0,1787,1789,3,264,132,0,1788,1787,1,0,0,0,1788,1789,1,0,0,0,
        1789,1792,1,0,0,0,1790,1793,3,268,134,0,1791,1793,3,432,216,0,1792,
        1790,1,0,0,0,1792,1791,1,0,0,0,1793,263,1,0,0,0,1794,1796,3,266,
        133,0,1795,1794,1,0,0,0,1796,1797,1,0,0,0,1797,1795,1,0,0,0,1797,
        1798,1,0,0,0,1798,265,1,0,0,0,1799,1800,7,10,0,0,1800,267,1,0,0,
        0,1801,1821,3,428,214,0,1802,1821,3,270,135,0,1803,1821,3,422,211,
        0,1804,1810,3,316,158,0,1805,1811,3,320,160,0,1806,1807,3,382,191,
        0,1807,1808,3,82,41,0,1808,1809,5,134,0,0,1809,1811,1,0,0,0,1810,
        1805,1,0,0,0,1810,1806,1,0,0,0,1811,1821,1,0,0,0,1812,1821,3,434,
        217,0,1813,1814,5,108,0,0,1814,1821,3,436,218,0,1815,1821,3,412,
        206,0,1816,1821,3,414,207,0,1817,1821,3,416,208,0,1818,1821,3,418,
        209,0,1819,1821,3,420,210,0,1820,1801,1,0,0,0,1820,1802,1,0,0,0,
        1820,1803,1,0,0,0,1820,1804,1,0,0,0,1820,1812,1,0,0,0,1820,1813,
        1,0,0,0,1820,1815,1,0,0,0,1820,1816,1,0,0,0,1820,1817,1,0,0,0,1820,
        1818,1,0,0,0,1820,1819,1,0,0,0,1821,269,1,0,0,0,1822,1828,5,80,0,
        0,1823,1824,5,79,0,0,1824,1828,5,80,0,0,1825,1826,5,80,0,0,1826,
        1828,5,79,0,0,1827,1822,1,0,0,0,1827,1823,1,0,0,0,1827,1825,1,0,
        0,0,1827,1828,1,0,0,0,1828,1829,1,0,0,0,1829,1839,3,4,2,0,1830,1831,
        3,2,1,0,1831,1832,5,131,0,0,1832,1833,3,430,215,0,1833,1840,1,0,
        0,0,1834,1840,3,436,218,0,1835,1840,3,426,213,0,1836,1840,3,430,
        215,0,1837,1840,3,440,220,0,1838,1840,3,424,212,0,1839,1830,1,0,
        0,0,1839,1834,1,0,0,0,1839,1835,1,0,0,0,1839,1836,1,0,0,0,1839,1837,
        1,0,0,0,1839,1838,1,0,0,0,1840,271,1,0,0,0,1841,1846,3,274,137,0,
        1842,1843,5,132,0,0,1843,1845,3,274,137,0,1844,1842,1,0,0,0,1845,
        1848,1,0,0,0,1846,1844,1,0,0,0,1846,1847,1,0,0,0,1847,273,1,0,0,
        0,1848,1846,1,0,0,0,1849,1850,3,448,224,0,1850,1851,5,145,0,0,1851,
        1852,3,34,17,0,1852,275,1,0,0,0,1853,1858,3,278,139,0,1854,1855,
        5,132,0,0,1855,1857,3,278,139,0,1856,1854,1,0,0,0,1857,1860,1,0,
        0,0,1858,1856,1,0,0,0,1858,1859,1,0,0,0,1859,277,1,0,0,0,1860,1858,
        1,0,0,0,1861,1864,3,448,224,0,1862,1863,5,145,0,0,1863,1865,3,280,
        140,0,1864,1862,1,0,0,0,1864,1865,1,0,0,0,1865,279,1,0,0,0,1866,
        1869,3,34,17,0,1867,1869,3,332,166,0,1868,1866,1,0,0,0,1868,1867,
        1,0,0,0,1869,281,1,0,0,0,1870,1873,3,4,2,0,1871,1873,5,108,0,0,1872,
        1870,1,0,0,0,1872,1871,1,0,0,0,1873,283,1,0,0,0,1874,1875,3,2,1,
        0,1875,285,1,0,0,0,1876,1883,3,178,89,0,1877,1883,5,134,0,0,1878,
        1879,3,382,191,0,1879,1880,3,34,17,0,1880,1881,5,134,0,0,1881,1883,
        1,0,0,0,1882,1876,1,0,0,0,1882,1877,1,0,0,0,1882,1878,1,0,0,0,1883,
        287,1,0,0,0,1884,1891,3,296,148,0,1885,1888,3,290,145,0,1886,1887,
        5,132,0,0,1887,1889,3,296,148,0,1888,1886,1,0,0,0,1888,1889,1,0,
        0,0,1889,1891,1,0,0,0,1890,1884,1,0,0,0,1890,1885,1,0,0,0,1891,289,
        1,0,0,0,1892,1897,3,292,146,0,1893,1894,5,132,0,0,1894,1896,3,292,
        146,0,1895,1893,1,0,0,0,1896,1899,1,0,0,0,1897,1895,1,0,0,0,1897,
        1898,1,0,0,0,1898,291,1,0,0,0,1899,1897,1,0,0,0,1900,1902,3,358,
        179,0,1901,1900,1,0,0,0,1901,1902,1,0,0,0,1902,1904,1,0,0,0,1903,
        1905,3,294,147,0,1904,1903,1,0,0,0,1904,1905,1,0,0,0,1905,1906,1,
        0,0,0,1906,1909,3,442,221,0,1907,1909,5,12,0,0,1908,1901,1,0,0,0,
        1908,1907,1,0,0,0,1909,293,1,0,0,0,1910,1919,5,80,0,0,1911,1919,
        5,72,0,0,1912,1919,5,54,0,0,1913,1914,5,80,0,0,1914,1919,5,94,0,
        0,1915,1916,5,54,0,0,1916,1919,5,94,0,0,1917,1919,5,94,0,0,1918,
        1910,1,0,0,0,1918,1911,1,0,0,0,1918,1912,1,0,0,0,1918,1913,1,0,0,
        0,1918,1915,1,0,0,0,1918,1917,1,0,0,0,1919,295,1,0,0,0,1920,1922,
        3,358,179,0,1921,1920,1,0,0,0,1921,1922,1,0,0,0,1922,1923,1,0,0,
        0,1923,1924,5,74,0,0,1924,1925,3,328,164,0,1925,1926,3,448,224,0,
        1926,297,1,0,0,0,1927,1929,3,358,179,0,1928,1927,1,0,0,0,1928,1929,
        1,0,0,0,1929,1931,1,0,0,0,1930,1932,3,304,152,0,1931,1930,1,0,0,
        0,1931,1932,1,0,0,0,1932,1943,1,0,0,0,1933,1934,5,49,0,0,1934,1936,
        3,306,153,0,1935,1937,3,302,151,0,1936,1935,1,0,0,0,1936,1937,1,
        0,0,0,1937,1944,1,0,0,0,1938,1939,5,86,0,0,1939,1941,3,306,153,0,
        1940,1942,3,300,150,0,1941,1940,1,0,0,0,1941,1942,1,0,0,0,1942,1944,
        1,0,0,0,1943,1933,1,0,0,0,1943,1938,1,0,0,0,1944,299,1,0,0,0,1945,
        1947,3,358,179,0,1946,1945,1,0,0,0,1946,1947,1,0,0,0,1947,1949,1,
        0,0,0,1948,1950,3,304,152,0,1949,1948,1,0,0,0,1949,1950,1,0,0,0,
        1950,1951,1,0,0,0,1951,1952,5,49,0,0,1952,1953,3,306,153,0,1953,
        301,1,0,0,0,1954,1956,3,358,179,0,1955,1954,1,0,0,0,1955,1956,1,
        0,0,0,1956,1958,1,0,0,0,1957,1959,3,304,152,0,1958,1957,1,0,0,0,
        1958,1959,1,0,0,0,1959,1960,1,0,0,0,1960,1961,5,86,0,0,1961,1962,
        3,306,153,0,1962,303,1,0,0,0,1963,1971,5,77,0,0,1964,1971,5,57,0,
        0,1965,1971,5,76,0,0,1966,1967,5,77,0,0,1967,1971,5,57,0,0,1968,
        1969,5,57,0,0,1969,1971,5,77,0,0,1970,1963,1,0,0,0,1970,1964,1,0,
        0,0,1970,1965,1,0,0,0,1970,1966,1,0,0,0,1970,1968,1,0,0,0,1971,305,
        1,0,0,0,1972,1975,3,178,89,0,1973,1975,5,134,0,0,1974,1972,1,0,0,
        0,1974,1973,1,0,0,0,1975,307,1,0,0,0,1976,1978,3,358,179,0,1977,
        1976,1,0,0,0,1977,1978,1,0,0,0,1978,1987,1,0,0,0,1979,1980,5,10,
        0,0,1980,1981,3,178,89,0,1981,1982,3,312,156,0,1982,1988,1,0,0,0,
        1983,1984,5,81,0,0,1984,1985,3,178,89,0,1985,1986,3,310,155,0,1986,
        1988,1,0,0,0,1987,1979,1,0,0,0,1987,1983,1,0,0,0,1988,309,1,0,0,
        0,1989,1991,3,358,179,0,1990,1989,1,0,0,0,1990,1991,1,0,0,0,1991,
        1992,1,0,0,0,1992,1993,5,10,0,0,1993,1994,3,178,89,0,1994,311,1,
        0,0,0,1995,1997,3,358,179,0,1996,1995,1,0,0,0,1996,1997,1,0,0,0,
        1997,1998,1,0,0,0,1998,1999,5,81,0,0,1999,2000,3,178,89,0,2000,313,
        1,0,0,0,2001,2024,5,135,0,0,2002,2024,5,136,0,0,2003,2024,5,143,
        0,0,2004,2024,5,144,0,0,2005,2024,5,151,0,0,2006,2024,5,152,0,0,
        2007,2024,5,96,0,0,2008,2024,5,42,0,0,2009,2024,5,137,0,0,2010,2024,
        5,138,0,0,2011,2024,5,139,0,0,2012,2024,5,140,0,0,2013,2024,5,141,
        0,0,2014,2024,5,142,0,0,2015,2024,5,168,0,0,2016,2024,3,384,192,
        0,2017,2024,5,156,0,0,2018,2024,5,157,0,0,2019,2024,5,147,0,0,2020,
        2024,5,146,0,0,2021,2024,5,159,0,0,2022,2024,5,158,0,0,2023,2001,
        1,0,0,0,2023,2002,1,0,0,0,2023,2003,1,0,0,0,2023,2004,1,0,0,0,2023,
        2005,1,0,0,0,2023,2006,1,0,0,0,2023,2007,1,0,0,0,2023,2008,1,0,0,
        0,2023,2009,1,0,0,0,2023,2010,1,0,0,0,2023,2011,1,0,0,0,2023,2012,
        1,0,0,0,2023,2013,1,0,0,0,2023,2014,1,0,0,0,2023,2015,1,0,0,0,2023,
        2016,1,0,0,0,2023,2017,1,0,0,0,2023,2018,1,0,0,0,2023,2019,1,0,0,
        0,2023,2020,1,0,0,0,2023,2021,1,0,0,0,2023,2022,1,0,0,0,2024,315,
        1,0,0,0,2025,2026,7,11,0,0,2026,2027,5,70,0,0,2027,2028,3,4,2,0,
        2028,2029,5,129,0,0,2029,2030,3,442,221,0,2030,2031,5,130,0,0,2031,
        317,1,0,0,0,2032,2033,5,133,0,0,2033,2034,7,12,0,0,2034,2036,5,129,
        0,0,2035,2037,3,30,15,0,2036,2035,1,0,0,0,2036,2037,1,0,0,0,2037,
        2038,1,0,0,0,2038,2039,5,130,0,0,2039,319,1,0,0,0,2040,2047,3,178,
        89,0,2041,2047,5,134,0,0,2042,2043,3,382,191,0,2043,2044,3,34,17,
        0,2044,2045,5,134,0,0,2045,2047,1,0,0,0,2046,2040,1,0,0,0,2046,2041,
        1,0,0,0,2046,2042,1,0,0,0,2047,321,1,0,0,0,2048,2049,5,133,0,0,2049,
        2050,3,244,122,0,2050,323,1,0,0,0,2051,2055,5,125,0,0,2052,2054,
        3,326,163,0,2053,2052,1,0,0,0,2054,2057,1,0,0,0,2055,2053,1,0,0,
        0,2055,2056,1,0,0,0,2056,2058,1,0,0,0,2057,2055,1,0,0,0,2058,2059,
        5,126,0,0,2059,325,1,0,0,0,2060,2062,3,358,179,0,2061,2060,1,0,0,
        0,2061,2062,1,0,0,0,2062,2064,1,0,0,0,2063,2065,3,264,132,0,2064,
        2063,1,0,0,0,2064,2065,1,0,0,0,2065,2076,1,0,0,0,2066,2077,3,268,
        134,0,2067,2068,5,44,0,0,2068,2070,3,4,2,0,2069,2071,3,378,189,0,
        2070,2069,1,0,0,0,2071,2072,1,0,0,0,2072,2070,1,0,0,0,2072,2073,
        1,0,0,0,2073,2074,1,0,0,0,2074,2075,5,134,0,0,2075,2077,1,0,0,0,
        2076,2066,1,0,0,0,2076,2067,1,0,0,0,2077,327,1,0,0,0,2078,2086,3,
        6,3,0,2079,2081,7,13,0,0,2080,2079,1,0,0,0,2081,2084,1,0,0,0,2082,
        2080,1,0,0,0,2082,2083,1,0,0,0,2083,2085,1,0,0,0,2084,2082,1,0,0,
        0,2085,2087,3,330,165,0,2086,2082,1,0,0,0,2087,2088,1,0,0,0,2088,
        2086,1,0,0,0,2088,2089,1,0,0,0,2089,329,1,0,0,0,2090,2094,5,127,
        0,0,2091,2093,5,132,0,0,2092,2091,1,0,0,0,2093,2096,1,0,0,0,2094,
        2092,1,0,0,0,2094,2095,1,0,0,0,2095,2097,1,0,0,0,2096,2094,1,0,0,
        0,2097,2098,5,128,0,0,2098,331,1,0,0,0,2099,2111,5,125,0,0,2100,
        2105,3,280,140,0,2101,2102,5,132,0,0,2102,2104,3,280,140,0,2103,
        2101,1,0,0,0,2104,2107,1,0,0,0,2105,2103,1,0,0,0,2105,2106,1,0,0,
        0,2106,2109,1,0,0,0,2107,2105,1,0,0,0,2108,2110,5,132,0,0,2109,2108,
        1,0,0,0,2109,2110,1,0,0,0,2110,2112,1,0,0,0,2111,2100,1,0,0,0,2111,
        2112,1,0,0,0,2112,2113,1,0,0,0,2113,2114,5,126,0,0,2114,333,1,0,
        0,0,2115,2116,5,146,0,0,2116,2121,3,336,168,0,2117,2118,5,132,0,
        0,2118,2120,3,336,168,0,2119,2117,1,0,0,0,2120,2123,1,0,0,0,2121,
        2119,1,0,0,0,2121,2122,1,0,0,0,2122,2124,1,0,0,0,2123,2121,1,0,0,
        0,2124,2125,5,147,0,0,2125,335,1,0,0,0,2126,2128,3,358,179,0,2127,
        2126,1,0,0,0,2127,2128,1,0,0,0,2128,2130,1,0,0,0,2129,2131,3,338,
        169,0,2130,2129,1,0,0,0,2130,2131,1,0,0,0,2131,2132,1,0,0,0,2132,
        2133,3,448,224,0,2133,337,1,0,0,0,2134,2135,7,14,0,0,2135,339,1,
        0,0,0,2136,2137,5,133,0,0,2137,2138,3,244,122,0,2138,341,1,0,0,0,
        2139,2143,5,125,0,0,2140,2142,3,344,172,0,2141,2140,1,0,0,0,2142,
        2145,1,0,0,0,2143,2141,1,0,0,0,2143,2144,1,0,0,0,2144,2146,1,0,0,
        0,2145,2143,1,0,0,0,2146,2147,5,126,0,0,2147,343,1,0,0,0,2148,2150,
        3,358,179,0,2149,2148,1,0,0,0,2149,2150,1,0,0,0,2150,2152,1,0,0,
        0,2151,2153,5,66,0,0,2152,2151,1,0,0,0,2152,2153,1,0,0,0,2153,2217,
        1,0,0,0,2154,2156,5,103,0,0,2155,2154,1,0,0,0,2155,2156,1,0,0,0,
        2156,2162,1,0,0,0,2157,2163,5,80,0,0,2158,2159,5,80,0,0,2159,2163,
        5,79,0,0,2160,2161,5,79,0,0,2161,2163,5,80,0,0,2162,2157,1,0,0,0,
        2162,2158,1,0,0,0,2162,2160,1,0,0,0,2162,2163,1,0,0,0,2163,2164,
        1,0,0,0,2164,2192,3,4,2,0,2165,2167,3,448,224,0,2166,2168,3,238,
        119,0,2167,2166,1,0,0,0,2167,2168,1,0,0,0,2168,2169,1,0,0,0,2169,
        2171,5,129,0,0,2170,2172,3,288,144,0,2171,2170,1,0,0,0,2171,2172,
        1,0,0,0,2172,2173,1,0,0,0,2173,2175,5,130,0,0,2174,2176,3,246,123,
        0,2175,2174,1,0,0,0,2175,2176,1,0,0,0,2176,2177,1,0,0,0,2177,2178,
        5,134,0,0,2178,2193,1,0,0,0,2179,2180,3,448,224,0,2180,2181,5,125,
        0,0,2181,2182,3,346,173,0,2182,2183,5,126,0,0,2183,2193,1,0,0,0,
        2184,2185,5,94,0,0,2185,2186,5,127,0,0,2186,2187,3,288,144,0,2187,
        2188,5,128,0,0,2188,2189,5,125,0,0,2189,2190,3,346,173,0,2190,2191,
        5,126,0,0,2191,2193,1,0,0,0,2192,2165,1,0,0,0,2192,2179,1,0,0,0,
        2192,2184,1,0,0,0,2193,2218,1,0,0,0,2194,2196,5,103,0,0,2195,2194,
        1,0,0,0,2195,2196,1,0,0,0,2196,2197,1,0,0,0,2197,2198,5,108,0,0,
        2198,2200,3,448,224,0,2199,2201,3,238,119,0,2200,2199,1,0,0,0,2200,
        2201,1,0,0,0,2201,2202,1,0,0,0,2202,2204,5,129,0,0,2203,2205,3,288,
        144,0,2204,2203,1,0,0,0,2204,2205,1,0,0,0,2205,2206,1,0,0,0,2206,
        2208,5,130,0,0,2207,2209,3,246,123,0,2208,2207,1,0,0,0,2208,2209,
        1,0,0,0,2209,2210,1,0,0,0,2210,2211,5,134,0,0,2211,2218,1,0,0,0,
        2212,2213,5,39,0,0,2213,2214,3,4,2,0,2214,2215,3,448,224,0,2215,
        2216,5,134,0,0,2216,2218,1,0,0,0,2217,2155,1,0,0,0,2217,2195,1,0,
        0,0,2217,2212,1,0,0,0,2218,345,1,0,0,0,2219,2221,3,358,179,0,2220,
        2219,1,0,0,0,2220,2221,1,0,0,0,2221,2240,1,0,0,0,2222,2223,5,49,
        0,0,2223,2229,5,134,0,0,2224,2226,3,358,179,0,2225,2224,1,0,0,0,
        2225,2226,1,0,0,0,2226,2227,1,0,0,0,2227,2228,5,86,0,0,2228,2230,
        5,134,0,0,2229,2225,1,0,0,0,2229,2230,1,0,0,0,2230,2241,1,0,0,0,
        2231,2232,5,86,0,0,2232,2238,5,134,0,0,2233,2235,3,358,179,0,2234,
        2233,1,0,0,0,2234,2235,1,0,0,0,2235,2236,1,0,0,0,2236,2237,5,49,
        0,0,2237,2239,5,134,0,0,2238,2234,1,0,0,0,2238,2239,1,0,0,0,2239,
        2241,1,0,0,0,2240,2222,1,0,0,0,2240,2231,1,0,0,0,2241,347,1,0,0,
        0,2242,2243,5,133,0,0,2243,2244,3,4,2,0,2244,349,1,0,0,0,2245,2257,
        5,125,0,0,2246,2251,3,352,176,0,2247,2248,5,132,0,0,2248,2250,3,
        352,176,0,2249,2247,1,0,0,0,2250,2253,1,0,0,0,2251,2249,1,0,0,0,
        2251,2252,1,0,0,0,2252,2255,1,0,0,0,2253,2251,1,0,0,0,2254,2256,
        5,132,0,0,2255,2254,1,0,0,0,2255,2256,1,0,0,0,2256,2258,1,0,0,0,
        2257,2246,1,0,0,0,2257,2258,1,0,0,0,2258,2259,1,0,0,0,2259,2260,
        5,126,0,0,2260,351,1,0,0,0,2261,2263,3,358,179,0,2262,2261,1,0,0,
        0,2262,2263,1,0,0,0,2263,2264,1,0,0,0,2264,2267,3,448,224,0,2265,
        2266,5,145,0,0,2266,2268,3,34,17,0,2267,2265,1,0,0,0,2267,2268,1,
        0,0,0,2268,353,1,0,0,0,2269,2270,5,127,0,0,2270,2271,3,356,178,0,
        2271,2272,5,133,0,0,2272,2274,3,364,182,0,2273,2275,5,132,0,0,2274,
        2273,1,0,0,0,2274,2275,1,0,0,0,2275,2276,1,0,0,0,2276,2277,5,128,
        0,0,2277,355,1,0,0,0,2278,2281,3,410,205,0,2279,2281,3,448,224,0,
        2280,2278,1,0,0,0,2280,2279,1,0,0,0,2281,357,1,0,0,0,2282,2284,3,
        360,180,0,2283,2282,1,0,0,0,2284,2285,1,0,0,0,2285,2283,1,0,0,0,
        2285,2286,1,0,0,0,2286,359,1,0,0,0,2287,2291,5,127,0,0,2288,2289,
        3,362,181,0,2289,2290,5,133,0,0,2290,2292,1,0,0,0,2291,2288,1,0,
        0,0,2291,2292,1,0,0,0,2292,2293,1,0,0,0,2293,2295,3,364,182,0,2294,
        2296,5,132,0,0,2295,2294,1,0,0,0,2295,2296,1,0,0,0,2296,2297,1,0,
        0,0,2297,2298,5,128,0,0,2298,361,1,0,0,0,2299,2302,3,410,205,0,2300,
        2302,3,448,224,0,2301,2299,1,0,0,0,2301,2300,1,0,0,0,2302,363,1,
        0,0,0,2303,2308,3,366,183,0,2304,2305,5,132,0,0,2305,2307,3,366,
        183,0,2306,2304,1,0,0,0,2307,2310,1,0,0,0,2308,2306,1,0,0,0,2308,
        2309,1,0,0,0,2309,365,1,0,0,0,2310,2308,1,0,0,0,2311,2324,3,2,1,
        0,2312,2321,5,129,0,0,2313,2318,3,368,184,0,2314,2315,5,132,0,0,
        2315,2317,3,368,184,0,2316,2314,1,0,0,0,2317,2320,1,0,0,0,2318,2316,
        1,0,0,0,2318,2319,1,0,0,0,2319,2322,1,0,0,0,2320,2318,1,0,0,0,2321,
        2313,1,0,0,0,2321,2322,1,0,0,0,2322,2323,1,0,0,0,2323,2325,5,130,
        0,0,2324,2312,1,0,0,0,2324,2325,1,0,0,0,2325,367,1,0,0,0,2326,2327,
        3,448,224,0,2327,2328,5,133,0,0,2328,2330,1,0,0,0,2329,2326,1,0,
        0,0,2329,2330,1,0,0,0,2330,2331,1,0,0,0,2331,2332,3,34,17,0,2332,
        369,1,0,0,0,2333,2336,3,18,9,0,2334,2336,3,26,13,0,2335,2333,1,0,
        0,0,2335,2334,1,0,0,0,2336,2341,1,0,0,0,2337,2340,3,330,165,0,2338,
        2340,5,148,0,0,2339,2337,1,0,0,0,2339,2338,1,0,0,0,2340,2343,1,0,
        0,0,2341,2339,1,0,0,0,2341,2342,1,0,0,0,2342,2344,1,0,0,0,2343,2341,
        1,0,0,0,2344,2345,5,137,0,0,2345,2349,1,0,0,0,2346,2347,5,108,0,
        0,2347,2349,5,137,0,0,2348,2335,1,0,0,0,2348,2346,1,0,0,0,2349,371,
        1,0,0,0,2350,2355,3,374,187,0,2351,2352,5,132,0,0,2352,2354,3,374,
        187,0,2353,2351,1,0,0,0,2354,2357,1,0,0,0,2355,2353,1,0,0,0,2355,
        2356,1,0,0,0,2356,373,1,0,0,0,2357,2355,1,0,0,0,2358,2359,3,448,
        224,0,2359,2360,5,145,0,0,2360,2361,3,376,188,0,2361,375,1,0,0,0,
        2362,2364,5,140,0,0,2363,2362,1,0,0,0,2363,2364,1,0,0,0,2364,2365,
        1,0,0,0,2365,2368,3,34,17,0,2366,2368,3,380,190,0,2367,2363,1,0,
        0,0,2367,2366,1,0,0,0,2368,377,1,0,0,0,2369,2370,3,448,224,0,2370,
        2371,5,127,0,0,2371,2372,3,34,17,0,2372,2373,5,128,0,0,2373,379,
        1,0,0,0,2374,2375,5,89,0,0,2375,2376,3,4,2,0,2376,2377,5,127,0,0,
        2377,2378,3,34,17,0,2378,2379,5,128,0,0,2379,2404,1,0,0,0,2380,2382,
        5,89,0,0,2381,2383,3,4,2,0,2382,2381,1,0,0,0,2382,2383,1,0,0,0,2383,
        2384,1,0,0,0,2384,2386,5,127,0,0,2385,2387,3,34,17,0,2386,2385,1,
        0,0,0,2386,2387,1,0,0,0,2387,2388,1,0,0,0,2388,2389,5,128,0,0,2389,
        2390,5,125,0,0,2390,2395,3,34,17,0,2391,2392,5,132,0,0,2392,2394,
        3,34,17,0,2393,2391,1,0,0,0,2394,2397,1,0,0,0,2395,2393,1,0,0,0,
        2395,2396,1,0,0,0,2396,2399,1,0,0,0,2397,2395,1,0,0,0,2398,2400,
        5,132,0,0,2399,2398,1,0,0,0,2399,2400,1,0,0,0,2400,2401,1,0,0,0,
        2401,2402,5,126,0,0,2402,2404,1,0,0,0,2403,2374,1,0,0,0,2403,2380,
        1,0,0,0,2404,381,1,0,0,0,2405,2406,5,145,0,0,2406,2407,5,147,0,0,
        2407,2408,4,191,0,1,2408,383,1,0,0,0,2409,2410,5,147,0,0,2410,2411,
        5,147,0,0,2411,2412,4,192,1,1,2412,385,1,0,0,0,2413,2414,5,147,0,
        0,2414,2415,5,159,0,0,2415,2416,4,193,2,1,2416,387,1,0,0,0,2417,
        2426,3,390,195,0,2418,2426,3,392,196,0,2419,2426,5,116,0,0,2420,
        2426,5,117,0,0,2421,2426,5,118,0,0,2422,2426,5,119,0,0,2423,2426,
        5,120,0,0,2424,2426,5,67,0,0,2425,2417,1,0,0,0,2425,2418,1,0,0,0,
        2425,2419,1,0,0,0,2425,2420,1,0,0,0,2425,2421,1,0,0,0,2425,2422,
        1,0,0,0,2425,2423,1,0,0,0,2425,2424,1,0,0,0,2426,389,1,0,0,0,2427,
        2428,7,15,0,0,2428,391,1,0,0,0,2429,2434,3,394,197,0,2430,2434,3,
        396,198,0,2431,2434,5,121,0,0,2432,2434,5,122,0,0,2433,2429,1,0,
        0,0,2433,2430,1,0,0,0,2433,2431,1,0,0,0,2433,2432,1,0,0,0,2434,393,
        1,0,0,0,2435,2439,5,123,0,0,2436,2438,3,398,199,0,2437,2436,1,0,
        0,0,2438,2441,1,0,0,0,2439,2437,1,0,0,0,2439,2440,1,0,0,0,2440,2442,
        1,0,0,0,2441,2439,1,0,0,0,2442,2443,5,176,0,0,2443,395,1,0,0,0,2444,
        2448,5,124,0,0,2445,2447,3,400,200,0,2446,2445,1,0,0,0,2447,2450,
        1,0,0,0,2448,2446,1,0,0,0,2448,2449,1,0,0,0,2449,2451,1,0,0,0,2450,
        2448,1,0,0,0,2451,2452,5,176,0,0,2452,397,1,0,0,0,2453,2462,3,402,
        201,0,2454,2462,5,172,0,0,2455,2462,5,174,0,0,2456,2462,5,177,0,
        0,2457,2462,5,173,0,0,2458,2462,5,179,0,0,2459,2462,5,176,0,0,2460,
        2462,5,178,0,0,2461,2453,1,0,0,0,2461,2454,1,0,0,0,2461,2455,1,0,
        0,0,2461,2456,1,0,0,0,2461,2457,1,0,0,0,2461,2458,1,0,0,0,2461,2459,
        1,0,0,0,2461,2460,1,0,0,0,2462,399,1,0,0,0,2463,2468,3,402,201,0,
        2464,2468,5,172,0,0,2465,2468,5,175,0,0,2466,2468,5,178,0,0,2467,
        2463,1,0,0,0,2467,2464,1,0,0,0,2467,2465,1,0,0,0,2467,2466,1,0,0,
        0,2468,401,1,0,0,0,2469,2470,5,125,0,0,2470,2473,3,34,17,0,2471,
        2472,5,132,0,0,2472,2474,3,404,202,0,2473,2471,1,0,0,0,2473,2474,
        1,0,0,0,2474,2476,1,0,0,0,2475,2477,3,406,203,0,2476,2475,1,0,0,
        0,2476,2477,1,0,0,0,2477,2478,1,0,0,0,2478,2479,5,126,0,0,2479,403,
        1,0,0,0,2480,2481,3,408,204,0,2481,405,1,0,0,0,2482,2484,5,133,0,
        0,2483,2485,5,180,0,0,2484,2483,1,0,0,0,2485,2486,1,0,0,0,2486,2484,
        1,0,0,0,2486,2487,1,0,0,0,2487,407,1,0,0,0,2488,2489,3,34,17,0,2489,
        409,1,0,0,0,2490,2491,7,16,0,0,2491,411,1,0,0,0,2492,2493,5,26,0,
        0,2493,2495,3,448,224,0,2494,2496,3,238,119,0,2495,2494,1,0,0,0,
        2495,2496,1,0,0,0,2496,2498,1,0,0,0,2497,2499,3,242,121,0,2498,2497,
        1,0,0,0,2498,2499,1,0,0,0,2499,2501,1,0,0,0,2500,2502,3,246,123,
        0,2501,2500,1,0,0,0,2501,2502,1,0,0,0,2502,2503,1,0,0,0,2503,2505,
        3,258,129,0,2504,2506,5,134,0,0,2505,2504,1,0,0,0,2505,2506,1,0,
        0,0,2506,413,1,0,0,0,2507,2509,7,17,0,0,2508,2507,1,0,0,0,2508,2509,
        1,0,0,0,2509,2510,1,0,0,0,2510,2511,5,92,0,0,2511,2513,3,448,224,
        0,2512,2514,3,238,119,0,2513,2512,1,0,0,0,2513,2514,1,0,0,0,2514,
        2516,1,0,0,0,2515,2517,3,322,161,0,2516,2515,1,0,0,0,2516,2517,1,
        0,0,0,2517,2519,1,0,0,0,2518,2520,3,246,123,0,2519,2518,1,0,0,0,
        2519,2520,1,0,0,0,2520,2521,1,0,0,0,2521,2523,3,324,162,0,2522,2524,
        5,134,0,0,2523,2522,1,0,0,0,2523,2524,1,0,0,0,2524,415,1,0,0,0,2525,
        2526,5,56,0,0,2526,2528,3,448,224,0,2527,2529,3,334,167,0,2528,2527,
        1,0,0,0,2528,2529,1,0,0,0,2529,2531,1,0,0,0,2530,2532,3,340,170,
        0,2531,2530,1,0,0,0,2531,2532,1,0,0,0,2532,2534,1,0,0,0,2533,2535,
        3,246,123,0,2534,2533,1,0,0,0,2534,2535,1,0,0,0,2535,2536,1,0,0,
        0,2536,2538,3,258,129,0,2537,2539,5,134,0,0,2538,2537,1,0,0,0,2538,
        2539,1,0,0,0,2539,417,1,0,0,0,2540,2541,5,37,0,0,2541,2543,3,448,
        224,0,2542,2544,3,348,174,0,2543,2542,1,0,0,0,2543,2544,1,0,0,0,
        2544,2545,1,0,0,0,2545,2547,3,350,175,0,2546,2548,5,134,0,0,2547,
        2546,1,0,0,0,2547,2548,1,0,0,0,2548,419,1,0,0,0,2549,2550,5,31,0,
        0,2550,2551,3,282,141,0,2551,2553,3,448,224,0,2552,2554,3,334,167,
        0,2553,2552,1,0,0,0,2553,2554,1,0,0,0,2554,2555,1,0,0,0,2555,2557,
        5,129,0,0,2556,2558,3,288,144,0,2557,2556,1,0,0,0,2557,2558,1,0,
        0,0,2558,2559,1,0,0,0,2559,2561,5,130,0,0,2560,2562,3,246,123,0,
        2561,2560,1,0,0,0,2561,2562,1,0,0,0,2562,2563,1,0,0,0,2563,2564,
        5,134,0,0,2564,421,1,0,0,0,2565,2566,5,39,0,0,2566,2575,3,4,2,0,
        2567,2568,3,276,138,0,2568,2569,5,134,0,0,2569,2576,1,0,0,0,2570,
        2571,3,284,142,0,2571,2572,5,125,0,0,2572,2573,3,308,154,0,2573,
        2574,5,126,0,0,2574,2576,1,0,0,0,2575,2567,1,0,0,0,2575,2570,1,0,
        0,0,2576,423,1,0,0,0,2577,2578,3,276,138,0,2578,2579,5,134,0,0,2579,
        425,1,0,0,0,2580,2594,3,284,142,0,2581,2582,5,125,0,0,2582,2583,
        3,298,149,0,2583,2588,5,126,0,0,2584,2585,5,145,0,0,2585,2586,3,
        280,140,0,2586,2587,5,134,0,0,2587,2589,1,0,0,0,2588,2584,1,0,0,
        0,2588,2589,1,0,0,0,2589,2595,1,0,0,0,2590,2591,3,382,191,0,2591,
        2592,3,82,41,0,2592,2593,5,134,0,0,2593,2595,1,0,0,0,2594,2581,1,
        0,0,0,2594,2590,1,0,0,0,2595,427,1,0,0,0,2596,2597,5,27,0,0,2597,
        2598,3,4,2,0,2598,2599,3,272,136,0,2599,2600,5,134,0,0,2600,429,
        1,0,0,0,2601,2602,5,94,0,0,2602,2603,5,127,0,0,2603,2604,3,288,144,
        0,2604,2613,5,128,0,0,2605,2606,5,125,0,0,2606,2607,3,298,149,0,
        2607,2608,5,126,0,0,2608,2614,1,0,0,0,2609,2610,3,382,191,0,2610,
        2611,3,82,41,0,2611,2612,5,134,0,0,2612,2614,1,0,0,0,2613,2605,1,
        0,0,0,2613,2609,1,0,0,0,2614,431,1,0,0,0,2615,2616,5,144,0,0,2616,
        2617,3,448,224,0,2617,2618,5,129,0,0,2618,2619,5,130,0,0,2619,2620,
        3,320,160,0,2620,433,1,0,0,0,2621,2622,3,448,224,0,2622,2624,5,129,
        0,0,2623,2625,3,288,144,0,2624,2623,1,0,0,0,2624,2625,1,0,0,0,2625,
        2626,1,0,0,0,2626,2628,5,130,0,0,2627,2629,3,318,159,0,2628,2627,
        1,0,0,0,2628,2629,1,0,0,0,2629,2630,1,0,0,0,2630,2631,3,320,160,
        0,2631,435,1,0,0,0,2632,2634,3,438,219,0,2633,2635,3,238,119,0,2634,
        2633,1,0,0,0,2634,2635,1,0,0,0,2635,2636,1,0,0,0,2636,2638,5,129,
        0,0,2637,2639,3,288,144,0,2638,2637,1,0,0,0,2638,2639,1,0,0,0,2639,
        2640,1,0,0,0,2640,2642,5,130,0,0,2641,2643,3,246,123,0,2642,2641,
        1,0,0,0,2642,2643,1,0,0,0,2643,2649,1,0,0,0,2644,2650,3,286,143,
        0,2645,2646,3,382,191,0,2646,2647,3,82,41,0,2647,2648,5,134,0,0,
        2648,2650,1,0,0,0,2649,2644,1,0,0,0,2649,2645,1,0,0,0,2650,437,1,
        0,0,0,2651,2657,3,448,224,0,2652,2653,3,448,224,0,2653,2654,5,149,
        0,0,2654,2655,3,448,224,0,2655,2657,1,0,0,0,2656,2651,1,0,0,0,2656,
        2652,1,0,0,0,2657,2665,1,0,0,0,2658,2660,3,28,14,0,2659,2658,1,0,
        0,0,2659,2660,1,0,0,0,2660,2661,1,0,0,0,2661,2662,5,131,0,0,2662,
        2664,3,448,224,0,2663,2659,1,0,0,0,2664,2667,1,0,0,0,2665,2663,1,
        0,0,0,2665,2666,1,0,0,0,2666,439,1,0,0,0,2667,2665,1,0,0,0,2668,
        2669,5,70,0,0,2669,2670,3,314,157,0,2670,2672,5,129,0,0,2671,2673,
        5,54,0,0,2672,2671,1,0,0,0,2672,2673,1,0,0,0,2673,2674,1,0,0,0,2674,
        2680,3,442,221,0,2675,2677,5,132,0,0,2676,2678,5,54,0,0,2677,2676,
        1,0,0,0,2677,2678,1,0,0,0,2678,2679,1,0,0,0,2679,2681,3,442,221,
        0,2680,2675,1,0,0,0,2680,2681,1,0,0,0,2681,2682,1,0,0,0,2682,2688,
        5,130,0,0,2683,2689,3,320,160,0,2684,2685,3,382,191,0,2685,2686,
        3,82,41,0,2686,2687,5,134,0,0,2687,2689,1,0,0,0,2688,2683,1,0,0,
        0,2688,2684,1,0,0,0,2689,441,1,0,0,0,2690,2691,3,4,2,0,2691,2694,
        3,448,224,0,2692,2693,5,145,0,0,2693,2695,3,34,17,0,2694,2692,1,
        0,0,0,2694,2695,1,0,0,0,2695,443,1,0,0,0,2696,2698,5,129,0,0,2697,
        2699,3,30,15,0,2698,2697,1,0,0,0,2698,2699,1,0,0,0,2699,2700,1,0,
        0,0,2700,2701,5,130,0,0,2701,445,1,0,0,0,2702,2704,5,129,0,0,2703,
        2705,3,30,15,0,2704,2703,1,0,0,0,2704,2705,1,0,0,0,2705,2706,1,0,
        0,0,2706,2708,5,130,0,0,2707,2709,3,96,48,0,2708,2707,1,0,0,0,2708,
        2709,1,0,0,0,2709,447,1,0,0,0,2710,2711,7,18,0,0,2711,449,1,0,0,
        0,352,451,454,457,462,466,472,475,480,484,491,493,501,509,514,517,
        527,533,535,539,543,548,558,566,576,582,585,590,593,599,604,614,
        627,635,641,643,650,658,666,674,682,690,700,702,708,713,721,729,
        737,739,742,749,754,761,765,767,791,800,805,809,817,820,825,829,
        833,837,842,856,862,874,878,883,887,893,901,910,928,931,936,939,
        954,960,964,970,975,978,986,994,1005,1010,1015,1017,1026,1034,1042,
        1050,1054,1063,1068,1070,1079,1087,1091,1096,1098,1103,1107,1114,
        1122,1124,1128,1131,1134,1142,1152,1169,1176,1180,1190,1195,1202,
        1211,1216,1223,1235,1246,1254,1259,1268,1277,1286,1292,1297,1301,
        1305,1309,1313,1320,1328,1341,1351,1373,1377,1381,1386,1393,1409,
        1414,1419,1426,1429,1451,1463,1467,1475,1483,1495,1499,1504,1507,
        1513,1521,1526,1533,1539,1547,1555,1558,1565,1572,1576,1579,1585,
        1589,1595,1609,1615,1622,1627,1630,1633,1640,1650,1667,1672,1676,
        1679,1682,1689,1695,1703,1709,1719,1727,1733,1744,1748,1750,1755,
        1759,1766,1775,1782,1785,1788,1792,1797,1810,1820,1827,1839,1846,
        1858,1864,1868,1872,1882,1888,1890,1897,1901,1904,1908,1918,1921,
        1928,1931,1936,1941,1943,1946,1949,1955,1958,1970,1974,1977,1987,
        1990,1996,2023,2036,2046,2055,2061,2064,2072,2076,2082,2088,2094,
        2105,2109,2111,2121,2127,2130,2143,2149,2152,2155,2162,2167,2171,
        2175,2192,2195,2200,2204,2208,2217,2220,2225,2229,2234,2238,2240,
        2251,2255,2257,2262,2267,2274,2280,2285,2291,2295,2301,2308,2318,
        2321,2324,2329,2335,2339,2341,2348,2355,2363,2367,2382,2386,2395,
        2399,2403,2425,2433,2439,2448,2461,2467,2473,2476,2486,2495,2498,
        2501,2505,2508,2513,2516,2519,2523,2528,2531,2534,2538,2543,2547,
        2553,2557,2561,2575,2588,2594,2613,2624,2628,2634,2638,2642,2649,
        2656,2659,2665,2672,2677,2680,2688,2694,2698,2704,2708
    ]

class CSharpParser ( CSharpParserBase ):

    grammarFileName = "CSharpParser.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "'\\u00EF\\u00BB\\u00BF'", "<INVALID>", 
                     "'/***/'", "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "'#'", "'abstract'", "'add'", "'alias'", "'__arglist'", 
                     "'as'", "'ascending'", "'async'", "'await'", "'base'", 
                     "'bool'", "'break'", "'by'", "'byte'", "'case'", "'catch'", 
                     "'char'", "'checked'", "'class'", "'const'", "'continue'", 
                     "'decimal'", "'default'", "'delegate'", "'descending'", 
                     "'do'", "'double'", "'dynamic'", "'else'", "'enum'", 
                     "'equals'", "'event'", "'explicit'", "'extern'", "'false'", 
                     "'finally'", "'fixed'", "'float'", "'for'", "'foreach'", 
                     "'from'", "'get'", "'goto'", "'group'", "'if'", "'implicit'", 
                     "'in'", "'int'", "'interface'", "'internal'", "'into'", 
                     "'is'", "'join'", "'let'", "'lock'", "'long'", "'nameof'", 
                     "'namespace'", "'new'", "'null'", "'object'", "'on'", 
                     "'operator'", "'orderby'", "'out'", "'override'", "'params'", 
                     "'partial'", "'private'", "'protected'", "'public'", 
                     "'readonly'", "'ref'", "'remove'", "'return'", "'sbyte'", 
                     "'sealed'", "'select'", "'set'", "'short'", "'sizeof'", 
                     "'stackalloc'", "'static'", "'string'", "'struct'", 
                     "'switch'", "'this'", "'throw'", "'true'", "'try'", 
                     "'typeof'", "'uint'", "'ulong'", "'unchecked'", "'unmanaged'", 
                     "'unsafe'", "'ushort'", "'using'", "'var'", "'virtual'", 
                     "'void'", "'volatile'", "'when'", "'where'", "'while'", 
                     "'yield'", "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "'{'", "'}'", 
                     "'['", "']'", "'('", "')'", "'.'", "','", "':'", "';'", 
                     "'+'", "'-'", "'*'", "'/'", "'%'", "'&'", "'|'", "'^'", 
                     "'!'", "'~'", "'='", "'<'", "'>'", "'?'", "'::'", "'??'", 
                     "'++'", "'--'", "'&&'", "'||'", "'->'", "'=='", "'!='", 
                     "'<='", "'>='", "'+='", "'-='", "'*='", "'/='", "'%='", 
                     "'&='", "'|='", "'^='", "'<<'", "'<<='", "'??='", "'..'", 
                     "'{{'", "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "'define'", "'undef'", "'elif'", 
                     "'endif'", "'line'", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "'hidden'", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "'}}'" ]

    symbolicNames = [ "<INVALID>", "BYTE_ORDER_MARK", "SINGLE_LINE_DOC_COMMENT", 
                      "EMPTY_DELIMITED_DOC_COMMENT", "DELIMITED_DOC_COMMENT", 
                      "SINGLE_LINE_COMMENT", "DELIMITED_COMMENT", "WHITESPACES", 
                      "SHARP", "ABSTRACT", "ADD", "ALIAS", "ARGLIST", "AS", 
                      "ASCENDING", "ASYNC", "AWAIT", "BASE", "BOOL", "BREAK", 
                      "BY", "BYTE", "CASE", "CATCH", "CHAR", "CHECKED", 
                      "CLASS", "CONST", "CONTINUE", "DECIMAL", "DEFAULT", 
                      "DELEGATE", "DESCENDING", "DO", "DOUBLE", "DYNAMIC", 
                      "ELSE", "ENUM", "EQUALS", "EVENT", "EXPLICIT", "EXTERN", 
                      "FALSE", "FINALLY", "FIXED", "FLOAT", "FOR", "FOREACH", 
                      "FROM", "GET", "GOTO", "GROUP", "IF", "IMPLICIT", 
                      "IN", "INT", "INTERFACE", "INTERNAL", "INTO", "IS", 
                      "JOIN", "LET", "LOCK", "LONG", "NAMEOF", "NAMESPACE", 
                      "NEW", "NULL_", "OBJECT", "ON", "OPERATOR", "ORDERBY", 
                      "OUT", "OVERRIDE", "PARAMS", "PARTIAL", "PRIVATE", 
                      "PROTECTED", "PUBLIC", "READONLY", "REF", "REMOVE", 
                      "RETURN", "SBYTE", "SEALED", "SELECT", "SET", "SHORT", 
                      "SIZEOF", "STACKALLOC", "STATIC", "STRING", "STRUCT", 
                      "SWITCH", "THIS", "THROW", "TRUE", "TRY", "TYPEOF", 
                      "UINT", "ULONG", "UNCHECKED", "UNMANAGED", "UNSAFE", 
                      "USHORT", "USING", "VAR", "VIRTUAL", "VOID", "VOLATILE", 
                      "WHEN", "WHERE", "WHILE", "YIELD", "IDENTIFIER", "LITERAL_ACCESS", 
                      "INTEGER_LITERAL", "HEX_INTEGER_LITERAL", "BIN_INTEGER_LITERAL", 
                      "REAL_LITERAL", "CHARACTER_LITERAL", "REGULAR_STRING", 
                      "VERBATIUM_STRING", "INTERPOLATED_REGULAR_STRING_START", 
                      "INTERPOLATED_VERBATIUM_STRING_START", "OPEN_BRACE", 
                      "CLOSE_BRACE", "OPEN_BRACKET", "CLOSE_BRACKET", "OPEN_PARENS", 
                      "CLOSE_PARENS", "DOT", "COMMA", "COLON", "SEMICOLON", 
                      "PLUS", "MINUS", "STAR", "DIV", "PERCENT", "AMP", 
                      "BITWISE_OR", "CARET", "BANG", "TILDE", "ASSIGNMENT", 
                      "LT", "GT", "INTERR", "DOUBLE_COLON", "OP_COALESCING", 
                      "OP_INC", "OP_DEC", "OP_AND", "OP_OR", "OP_PTR", "OP_EQ", 
                      "OP_NE", "OP_LE", "OP_GE", "OP_ADD_ASSIGNMENT", "OP_SUB_ASSIGNMENT", 
                      "OP_MULT_ASSIGNMENT", "OP_DIV_ASSIGNMENT", "OP_MOD_ASSIGNMENT", 
                      "OP_AND_ASSIGNMENT", "OP_OR_ASSIGNMENT", "OP_XOR_ASSIGNMENT", 
                      "OP_LEFT_SHIFT", "OP_LEFT_SHIFT_ASSIGNMENT", "OP_COALESCING_ASSIGNMENT", 
                      "OP_RANGE", "DOUBLE_CURLY_INSIDE", "OPEN_BRACE_INSIDE", 
                      "REGULAR_CHAR_INSIDE", "VERBATIUM_DOUBLE_QUOTE_INSIDE", 
                      "DOUBLE_QUOTE_INSIDE", "REGULAR_STRING_INSIDE", "VERBATIUM_INSIDE_STRING", 
                      "CLOSE_BRACE_INSIDE", "FORMAT_STRING", "DIRECTIVE_WHITESPACES", 
                      "DIGITS", "DEFINE", "UNDEF", "ELIF", "ENDIF", "LINE", 
                      "ERROR", "WARNING", "REGION", "ENDREGION", "PRAGMA", 
                      "NULLABLE", "DIRECTIVE_HIDDEN", "CONDITIONAL_SYMBOL", 
                      "DIRECTIVE_NEW_LINE", "TEXT", "DOUBLE_CURLY_CLOSE_INSIDE" ]

    RULE_compilation_unit = 0
    RULE_namespace_or_type_name = 1
    RULE_type_ = 2
    RULE_base_type = 3
    RULE_tuple_type = 4
    RULE_deconstruction_expression = 5
    RULE_deconstruction_tuple = 6
    RULE_deconstruction_element = 7
    RULE_tuple_element = 8
    RULE_simple_type = 9
    RULE_numeric_type = 10
    RULE_integral_type = 11
    RULE_floating_point_type = 12
    RULE_class_type = 13
    RULE_type_argument_list = 14
    RULE_argument_list = 15
    RULE_argument = 16
    RULE_expression = 17
    RULE_non_assignment_expression = 18
    RULE_assignment = 19
    RULE_assignment_operator = 20
    RULE_conditional_expression = 21
    RULE_null_coalescing_expression = 22
    RULE_conditional_or_expression = 23
    RULE_conditional_and_expression = 24
    RULE_inclusive_or_expression = 25
    RULE_exclusive_or_expression = 26
    RULE_and_expression = 27
    RULE_equality_expression = 28
    RULE_relational_expression = 29
    RULE_shift_expression = 30
    RULE_additive_expression = 31
    RULE_multiplicative_expression = 32
    RULE_switch_expression = 33
    RULE_switch_expression_arms = 34
    RULE_switch_expression_arm = 35
    RULE_range_expression = 36
    RULE_unary_expression = 37
    RULE_cast_expression = 38
    RULE_primary_expression = 39
    RULE_primary_expression_start = 40
    RULE_throwable_expression = 41
    RULE_throw_expression = 42
    RULE_member_access = 43
    RULE_bracket_expression = 44
    RULE_indexer_argument = 45
    RULE_predefined_type = 46
    RULE_expression_list = 47
    RULE_object_or_collection_initializer = 48
    RULE_object_initializer = 49
    RULE_member_initializer_list = 50
    RULE_member_initializer = 51
    RULE_initializer_value = 52
    RULE_collection_initializer = 53
    RULE_element_initializer = 54
    RULE_anonymous_object_initializer = 55
    RULE_member_declarator_list = 56
    RULE_member_declarator = 57
    RULE_unbound_type_name = 58
    RULE_generic_dimension_specifier = 59
    RULE_isType = 60
    RULE_isTypePatternArms = 61
    RULE_isTypePatternArm = 62
    RULE_lambda_expression = 63
    RULE_anonymous_function_signature = 64
    RULE_explicit_anonymous_function_parameter_list = 65
    RULE_explicit_anonymous_function_parameter = 66
    RULE_implicit_anonymous_function_parameter_list = 67
    RULE_anonymous_function_body = 68
    RULE_query_expression = 69
    RULE_from_clause = 70
    RULE_query_body = 71
    RULE_query_body_clause = 72
    RULE_let_clause = 73
    RULE_where_clause = 74
    RULE_combined_join_clause = 75
    RULE_orderby_clause = 76
    RULE_ordering = 77
    RULE_select_or_group_clause = 78
    RULE_query_continuation = 79
    RULE_statement = 80
    RULE_declarationStatement = 81
    RULE_local_function_declaration = 82
    RULE_local_function_header = 83
    RULE_local_function_modifiers = 84
    RULE_local_function_body = 85
    RULE_labeled_Statement = 86
    RULE_embedded_statement = 87
    RULE_simple_embedded_statement = 88
    RULE_block = 89
    RULE_local_variable_declaration = 90
    RULE_local_variable_type = 91
    RULE_local_variable_declarator = 92
    RULE_local_variable_initializer = 93
    RULE_local_constant_declaration = 94
    RULE_if_body = 95
    RULE_switch_section = 96
    RULE_switch_label = 97
    RULE_case_guard = 98
    RULE_statement_list = 99
    RULE_for_initializer = 100
    RULE_for_iterator = 101
    RULE_catch_clauses = 102
    RULE_specific_catch_clause = 103
    RULE_general_catch_clause = 104
    RULE_exception_filter = 105
    RULE_finally_clause = 106
    RULE_resource_acquisition = 107
    RULE_namespace_declaration = 108
    RULE_qualified_identifier = 109
    RULE_namespace_body = 110
    RULE_extern_alias_directives = 111
    RULE_extern_alias_directive = 112
    RULE_using_directives = 113
    RULE_using_directive = 114
    RULE_namespace_member_declarations = 115
    RULE_namespace_member_declaration = 116
    RULE_type_declaration = 117
    RULE_qualified_alias_member = 118
    RULE_type_parameter_list = 119
    RULE_type_parameter = 120
    RULE_class_base = 121
    RULE_interface_type_list = 122
    RULE_type_parameter_constraints_clauses = 123
    RULE_type_parameter_constraints_clause = 124
    RULE_type_parameter_constraints = 125
    RULE_primary_constraint = 126
    RULE_secondary_constraints = 127
    RULE_constructor_constraint = 128
    RULE_class_body = 129
    RULE_class_member_declarations = 130
    RULE_class_member_declaration = 131
    RULE_all_member_modifiers = 132
    RULE_all_member_modifier = 133
    RULE_common_member_declaration = 134
    RULE_typed_member_declaration = 135
    RULE_constant_declarators = 136
    RULE_constant_declarator = 137
    RULE_variable_declarators = 138
    RULE_variable_declarator = 139
    RULE_variable_initializer = 140
    RULE_return_type = 141
    RULE_member_name = 142
    RULE_method_body = 143
    RULE_formal_parameter_list = 144
    RULE_fixed_parameters = 145
    RULE_fixed_parameter = 146
    RULE_parameter_modifier = 147
    RULE_parameter_array = 148
    RULE_accessor_declarations = 149
    RULE_get_accessor_declaration = 150
    RULE_set_accessor_declaration = 151
    RULE_accessor_modifier = 152
    RULE_accessor_body = 153
    RULE_event_accessor_declarations = 154
    RULE_add_accessor_declaration = 155
    RULE_remove_accessor_declaration = 156
    RULE_overloadable_operator = 157
    RULE_conversion_operator_declarator = 158
    RULE_constructor_initializer = 159
    RULE_body = 160
    RULE_struct_interfaces = 161
    RULE_struct_body = 162
    RULE_struct_member_declaration = 163
    RULE_array_type = 164
    RULE_rank_specifier = 165
    RULE_array_initializer = 166
    RULE_variant_type_parameter_list = 167
    RULE_variant_type_parameter = 168
    RULE_variance_annotation = 169
    RULE_interface_base = 170
    RULE_interface_body = 171
    RULE_interface_member_declaration = 172
    RULE_interface_accessors = 173
    RULE_enum_base = 174
    RULE_enum_body = 175
    RULE_enum_member_declaration = 176
    RULE_global_attribute_section = 177
    RULE_global_attribute_target = 178
    RULE_attributes = 179
    RULE_attribute_section = 180
    RULE_attribute_target = 181
    RULE_attribute_list = 182
    RULE_attribute = 183
    RULE_attribute_argument = 184
    RULE_pointer_type = 185
    RULE_fixed_pointer_declarators = 186
    RULE_fixed_pointer_declarator = 187
    RULE_fixed_pointer_initializer = 188
    RULE_fixed_size_buffer_declarator = 189
    RULE_stackalloc_initializer = 190
    RULE_right_arrow = 191
    RULE_right_shift = 192
    RULE_right_shift_assignment = 193
    RULE_literal = 194
    RULE_boolean_literal = 195
    RULE_string_literal = 196
    RULE_interpolated_regular_string = 197
    RULE_interpolated_verbatium_string = 198
    RULE_interpolated_regular_string_part = 199
    RULE_interpolated_verbatium_string_part = 200
    RULE_interpolated_string_expression = 201
    RULE_interpolation_minimum_width = 202
    RULE_format_string = 203
    RULE_constant_expression = 204
    RULE_keyword = 205
    RULE_class_definition = 206
    RULE_struct_definition = 207
    RULE_interface_definition = 208
    RULE_enum_definition = 209
    RULE_delegate_definition = 210
    RULE_event_declaration = 211
    RULE_field_declaration = 212
    RULE_property_declaration = 213
    RULE_constant_declaration = 214
    RULE_indexer_declaration = 215
    RULE_destructor_definition = 216
    RULE_constructor_declaration = 217
    RULE_method_declaration = 218
    RULE_method_member_name = 219
    RULE_operator_declaration = 220
    RULE_arg_declaration = 221
    RULE_method_invocation = 222
    RULE_object_creation_expression = 223
    RULE_identifier = 224

    ruleNames =  [ "compilation_unit", "namespace_or_type_name", "type_", 
                   "base_type", "tuple_type", "deconstruction_expression", 
                   "deconstruction_tuple", "deconstruction_element", "tuple_element", 
                   "simple_type", "numeric_type", "integral_type", "floating_point_type", 
                   "class_type", "type_argument_list", "argument_list", 
                   "argument", "expression", "non_assignment_expression", 
                   "assignment", "assignment_operator", "conditional_expression", 
                   "null_coalescing_expression", "conditional_or_expression", 
                   "conditional_and_expression", "inclusive_or_expression", 
                   "exclusive_or_expression", "and_expression", "equality_expression", 
                   "relational_expression", "shift_expression", "additive_expression", 
                   "multiplicative_expression", "switch_expression", "switch_expression_arms", 
                   "switch_expression_arm", "range_expression", "unary_expression", 
                   "cast_expression", "primary_expression", "primary_expression_start", 
                   "throwable_expression", "throw_expression", "member_access", 
                   "bracket_expression", "indexer_argument", "predefined_type", 
                   "expression_list", "object_or_collection_initializer", 
                   "object_initializer", "member_initializer_list", "member_initializer", 
                   "initializer_value", "collection_initializer", "element_initializer", 
                   "anonymous_object_initializer", "member_declarator_list", 
                   "member_declarator", "unbound_type_name", "generic_dimension_specifier", 
                   "isType", "isTypePatternArms", "isTypePatternArm", "lambda_expression", 
                   "anonymous_function_signature", "explicit_anonymous_function_parameter_list", 
                   "explicit_anonymous_function_parameter", "implicit_anonymous_function_parameter_list", 
                   "anonymous_function_body", "query_expression", "from_clause", 
                   "query_body", "query_body_clause", "let_clause", "where_clause", 
                   "combined_join_clause", "orderby_clause", "ordering", 
                   "select_or_group_clause", "query_continuation", "statement", 
                   "declarationStatement", "local_function_declaration", 
                   "local_function_header", "local_function_modifiers", 
                   "local_function_body", "labeled_Statement", "embedded_statement", 
                   "simple_embedded_statement", "block", "local_variable_declaration", 
                   "local_variable_type", "local_variable_declarator", "local_variable_initializer", 
                   "local_constant_declaration", "if_body", "switch_section", 
                   "switch_label", "case_guard", "statement_list", "for_initializer", 
                   "for_iterator", "catch_clauses", "specific_catch_clause", 
                   "general_catch_clause", "exception_filter", "finally_clause", 
                   "resource_acquisition", "namespace_declaration", "qualified_identifier", 
                   "namespace_body", "extern_alias_directives", "extern_alias_directive", 
                   "using_directives", "using_directive", "namespace_member_declarations", 
                   "namespace_member_declaration", "type_declaration", "qualified_alias_member", 
                   "type_parameter_list", "type_parameter", "class_base", 
                   "interface_type_list", "type_parameter_constraints_clauses", 
                   "type_parameter_constraints_clause", "type_parameter_constraints", 
                   "primary_constraint", "secondary_constraints", "constructor_constraint", 
                   "class_body", "class_member_declarations", "class_member_declaration", 
                   "all_member_modifiers", "all_member_modifier", "common_member_declaration", 
                   "typed_member_declaration", "constant_declarators", "constant_declarator", 
                   "variable_declarators", "variable_declarator", "variable_initializer", 
                   "return_type", "member_name", "method_body", "formal_parameter_list", 
                   "fixed_parameters", "fixed_parameter", "parameter_modifier", 
                   "parameter_array", "accessor_declarations", "get_accessor_declaration", 
                   "set_accessor_declaration", "accessor_modifier", "accessor_body", 
                   "event_accessor_declarations", "add_accessor_declaration", 
                   "remove_accessor_declaration", "overloadable_operator", 
                   "conversion_operator_declarator", "constructor_initializer", 
                   "body", "struct_interfaces", "struct_body", "struct_member_declaration", 
                   "array_type", "rank_specifier", "array_initializer", 
                   "variant_type_parameter_list", "variant_type_parameter", 
                   "variance_annotation", "interface_base", "interface_body", 
                   "interface_member_declaration", "interface_accessors", 
                   "enum_base", "enum_body", "enum_member_declaration", 
                   "global_attribute_section", "global_attribute_target", 
                   "attributes", "attribute_section", "attribute_target", 
                   "attribute_list", "attribute", "attribute_argument", 
                   "pointer_type", "fixed_pointer_declarators", "fixed_pointer_declarator", 
                   "fixed_pointer_initializer", "fixed_size_buffer_declarator", 
                   "stackalloc_initializer", "right_arrow", "right_shift", 
                   "right_shift_assignment", "literal", "boolean_literal", 
                   "string_literal", "interpolated_regular_string", "interpolated_verbatium_string", 
                   "interpolated_regular_string_part", "interpolated_verbatium_string_part", 
                   "interpolated_string_expression", "interpolation_minimum_width", 
                   "format_string", "constant_expression", "keyword", "class_definition", 
                   "struct_definition", "interface_definition", "enum_definition", 
                   "delegate_definition", "event_declaration", "field_declaration", 
                   "property_declaration", "constant_declaration", "indexer_declaration", 
                   "destructor_definition", "constructor_declaration", "method_declaration", 
                   "method_member_name", "operator_declaration", "arg_declaration", 
                   "method_invocation", "object_creation_expression", "identifier" ]

    EOF = Token.EOF
    BYTE_ORDER_MARK=1
    SINGLE_LINE_DOC_COMMENT=2
    EMPTY_DELIMITED_DOC_COMMENT=3
    DELIMITED_DOC_COMMENT=4
    SINGLE_LINE_COMMENT=5
    DELIMITED_COMMENT=6
    WHITESPACES=7
    SHARP=8
    ABSTRACT=9
    ADD=10
    ALIAS=11
    ARGLIST=12
    AS=13
    ASCENDING=14
    ASYNC=15
    AWAIT=16
    BASE=17
    BOOL=18
    BREAK=19
    BY=20
    BYTE=21
    CASE=22
    CATCH=23
    CHAR=24
    CHECKED=25
    CLASS=26
    CONST=27
    CONTINUE=28
    DECIMAL=29
    DEFAULT=30
    DELEGATE=31
    DESCENDING=32
    DO=33
    DOUBLE=34
    DYNAMIC=35
    ELSE=36
    ENUM=37
    EQUALS=38
    EVENT=39
    EXPLICIT=40
    EXTERN=41
    FALSE=42
    FINALLY=43
    FIXED=44
    FLOAT=45
    FOR=46
    FOREACH=47
    FROM=48
    GET=49
    GOTO=50
    GROUP=51
    IF=52
    IMPLICIT=53
    IN=54
    INT=55
    INTERFACE=56
    INTERNAL=57
    INTO=58
    IS=59
    JOIN=60
    LET=61
    LOCK=62
    LONG=63
    NAMEOF=64
    NAMESPACE=65
    NEW=66
    NULL_=67
    OBJECT=68
    ON=69
    OPERATOR=70
    ORDERBY=71
    OUT=72
    OVERRIDE=73
    PARAMS=74
    PARTIAL=75
    PRIVATE=76
    PROTECTED=77
    PUBLIC=78
    READONLY=79
    REF=80
    REMOVE=81
    RETURN=82
    SBYTE=83
    SEALED=84
    SELECT=85
    SET=86
    SHORT=87
    SIZEOF=88
    STACKALLOC=89
    STATIC=90
    STRING=91
    STRUCT=92
    SWITCH=93
    THIS=94
    THROW=95
    TRUE=96
    TRY=97
    TYPEOF=98
    UINT=99
    ULONG=100
    UNCHECKED=101
    UNMANAGED=102
    UNSAFE=103
    USHORT=104
    USING=105
    VAR=106
    VIRTUAL=107
    VOID=108
    VOLATILE=109
    WHEN=110
    WHERE=111
    WHILE=112
    YIELD=113
    IDENTIFIER=114
    LITERAL_ACCESS=115
    INTEGER_LITERAL=116
    HEX_INTEGER_LITERAL=117
    BIN_INTEGER_LITERAL=118
    REAL_LITERAL=119
    CHARACTER_LITERAL=120
    REGULAR_STRING=121
    VERBATIUM_STRING=122
    INTERPOLATED_REGULAR_STRING_START=123
    INTERPOLATED_VERBATIUM_STRING_START=124
    OPEN_BRACE=125
    CLOSE_BRACE=126
    OPEN_BRACKET=127
    CLOSE_BRACKET=128
    OPEN_PARENS=129
    CLOSE_PARENS=130
    DOT=131
    COMMA=132
    COLON=133
    SEMICOLON=134
    PLUS=135
    MINUS=136
    STAR=137
    DIV=138
    PERCENT=139
    AMP=140
    BITWISE_OR=141
    CARET=142
    BANG=143
    TILDE=144
    ASSIGNMENT=145
    LT=146
    GT=147
    INTERR=148
    DOUBLE_COLON=149
    OP_COALESCING=150
    OP_INC=151
    OP_DEC=152
    OP_AND=153
    OP_OR=154
    OP_PTR=155
    OP_EQ=156
    OP_NE=157
    OP_LE=158
    OP_GE=159
    OP_ADD_ASSIGNMENT=160
    OP_SUB_ASSIGNMENT=161
    OP_MULT_ASSIGNMENT=162
    OP_DIV_ASSIGNMENT=163
    OP_MOD_ASSIGNMENT=164
    OP_AND_ASSIGNMENT=165
    OP_OR_ASSIGNMENT=166
    OP_XOR_ASSIGNMENT=167
    OP_LEFT_SHIFT=168
    OP_LEFT_SHIFT_ASSIGNMENT=169
    OP_COALESCING_ASSIGNMENT=170
    OP_RANGE=171
    DOUBLE_CURLY_INSIDE=172
    OPEN_BRACE_INSIDE=173
    REGULAR_CHAR_INSIDE=174
    VERBATIUM_DOUBLE_QUOTE_INSIDE=175
    DOUBLE_QUOTE_INSIDE=176
    REGULAR_STRING_INSIDE=177
    VERBATIUM_INSIDE_STRING=178
    CLOSE_BRACE_INSIDE=179
    FORMAT_STRING=180
    DIRECTIVE_WHITESPACES=181
    DIGITS=182
    DEFINE=183
    UNDEF=184
    ELIF=185
    ENDIF=186
    LINE=187
    ERROR=188
    WARNING=189
    REGION=190
    ENDREGION=191
    PRAGMA=192
    NULLABLE=193
    DIRECTIVE_HIDDEN=194
    CONDITIONAL_SYMBOL=195
    DIRECTIVE_NEW_LINE=196
    TEXT=197
    DOUBLE_CURLY_CLOSE_INSIDE=198

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.2")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class Compilation_unitContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(CSharpParser.EOF, 0)

        def BYTE_ORDER_MARK(self):
            return self.getToken(CSharpParser.BYTE_ORDER_MARK, 0)

        def extern_alias_directives(self):
            return self.getTypedRuleContext(CSharpParser.Extern_alias_directivesContext,0)


        def using_directives(self):
            return self.getTypedRuleContext(CSharpParser.Using_directivesContext,0)


        def global_attribute_section(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Global_attribute_sectionContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Global_attribute_sectionContext,i)


        def namespace_member_declarations(self):
            return self.getTypedRuleContext(CSharpParser.Namespace_member_declarationsContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_compilation_unit

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCompilation_unit" ):
                listener.enterCompilation_unit(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCompilation_unit" ):
                listener.exitCompilation_unit(self)




    def compilation_unit(self):

        localctx = CSharpParser.Compilation_unitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_compilation_unit)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 451
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==1:
                self.state = 450
                self.match(CSharpParser.BYTE_ORDER_MARK)


            self.state = 454
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1,self._ctx)
            if la_ == 1:
                self.state = 453
                self.extern_alias_directives()


            self.state = 457
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==105:
                self.state = 456
                self.using_directives()


            self.state = 462
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,3,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 459
                    self.global_attribute_section() 
                self.state = 464
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,3,self._ctx)

            self.state = 466
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 216175120790618624) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & 4611708283706211587) != 0):
                self.state = 465
                self.namespace_member_declarations()


            self.state = 468
            self.match(CSharpParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Namespace_or_type_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(CSharpParser.IdentifierContext,i)


        def qualified_alias_member(self):
            return self.getTypedRuleContext(CSharpParser.Qualified_alias_memberContext,0)


        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.DOT)
            else:
                return self.getToken(CSharpParser.DOT, i)

        def type_argument_list(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Type_argument_listContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Type_argument_listContext,i)


        def getRuleIndex(self):
            return CSharpParser.RULE_namespace_or_type_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNamespace_or_type_name" ):
                listener.enterNamespace_or_type_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNamespace_or_type_name" ):
                listener.exitNamespace_or_type_name(self)




    def namespace_or_type_name(self):

        localctx = CSharpParser.Namespace_or_type_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_namespace_or_type_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 475
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,6,self._ctx)
            if la_ == 1:
                self.state = 470
                self.identifier()
                self.state = 472
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,5,self._ctx)
                if la_ == 1:
                    self.state = 471
                    self.type_argument_list()


                pass

            elif la_ == 2:
                self.state = 474
                self.qualified_alias_member()
                pass


            self.state = 484
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,8,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 477
                    self.match(CSharpParser.DOT)
                    self.state = 478
                    self.identifier()
                    self.state = 480
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,7,self._ctx)
                    if la_ == 1:
                        self.state = 479
                        self.type_argument_list()

             
                self.state = 486
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,8,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Type_Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def base_type(self):
            return self.getTypedRuleContext(CSharpParser.Base_typeContext,0)


        def INTERR(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.INTERR)
            else:
                return self.getToken(CSharpParser.INTERR, i)

        def rank_specifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Rank_specifierContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Rank_specifierContext,i)


        def STAR(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.STAR)
            else:
                return self.getToken(CSharpParser.STAR, i)

        def getRuleIndex(self):
            return CSharpParser.RULE_type_

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterType_" ):
                listener.enterType_(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitType_" ):
                listener.exitType_(self)




    def type_(self):

        localctx = CSharpParser.Type_Context(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_type_)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 487
            self.base_type()
            self.state = 493
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,10,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 491
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [148]:
                        self.state = 488
                        self.match(CSharpParser.INTERR)
                        pass
                    elif token in [127]:
                        self.state = 489
                        self.rank_specifier()
                        pass
                    elif token in [137]:
                        self.state = 490
                        self.match(CSharpParser.STAR)
                        pass
                    else:
                        raise NoViableAltException(self)
             
                self.state = 495
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,10,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Base_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simple_type(self):
            return self.getTypedRuleContext(CSharpParser.Simple_typeContext,0)


        def class_type(self):
            return self.getTypedRuleContext(CSharpParser.Class_typeContext,0)


        def VOID(self):
            return self.getToken(CSharpParser.VOID, 0)

        def STAR(self):
            return self.getToken(CSharpParser.STAR, 0)

        def tuple_type(self):
            return self.getTypedRuleContext(CSharpParser.Tuple_typeContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_base_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBase_type" ):
                listener.enterBase_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBase_type" ):
                listener.exitBase_type(self)




    def base_type(self):

        localctx = CSharpParser.Base_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_base_type)
        try:
            self.state = 501
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,11,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 496
                self.simple_type()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 497
                self.class_type()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 498
                self.match(CSharpParser.VOID)
                self.state = 499
                self.match(CSharpParser.STAR)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 500
                self.tuple_type()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Tuple_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PARENS(self):
            return self.getToken(CSharpParser.OPEN_PARENS, 0)

        def tuple_element(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Tuple_elementContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Tuple_elementContext,i)


        def CLOSE_PARENS(self):
            return self.getToken(CSharpParser.CLOSE_PARENS, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.COMMA)
            else:
                return self.getToken(CSharpParser.COMMA, i)

        def deconstruction_expression(self):
            return self.getTypedRuleContext(CSharpParser.Deconstruction_expressionContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_tuple_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTuple_type" ):
                listener.enterTuple_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTuple_type" ):
                listener.exitTuple_type(self)




    def tuple_type(self):

        localctx = CSharpParser.Tuple_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_tuple_type)
        self._la = 0 # Token type
        try:
            self.state = 514
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,13,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 503
                self.match(CSharpParser.OPEN_PARENS)
                self.state = 504
                self.tuple_element()
                self.state = 507 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 505
                    self.match(CSharpParser.COMMA)
                    self.state = 506
                    self.tuple_element()
                    self.state = 509 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==132):
                        break

                self.state = 511
                self.match(CSharpParser.CLOSE_PARENS)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 513
                self.deconstruction_expression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Deconstruction_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def deconstruction_tuple(self):
            return self.getTypedRuleContext(CSharpParser.Deconstruction_tupleContext,0)


        def VAR(self):
            return self.getToken(CSharpParser.VAR, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_deconstruction_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeconstruction_expression" ):
                listener.enterDeconstruction_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeconstruction_expression" ):
                listener.exitDeconstruction_expression(self)




    def deconstruction_expression(self):

        localctx = CSharpParser.Deconstruction_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_deconstruction_expression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 517
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==106:
                self.state = 516
                self.match(CSharpParser.VAR)


            self.state = 519
            self.deconstruction_tuple()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Deconstruction_tupleContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PARENS(self):
            return self.getToken(CSharpParser.OPEN_PARENS, 0)

        def deconstruction_element(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Deconstruction_elementContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Deconstruction_elementContext,i)


        def CLOSE_PARENS(self):
            return self.getToken(CSharpParser.CLOSE_PARENS, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.COMMA)
            else:
                return self.getToken(CSharpParser.COMMA, i)

        def getRuleIndex(self):
            return CSharpParser.RULE_deconstruction_tuple

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeconstruction_tuple" ):
                listener.enterDeconstruction_tuple(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeconstruction_tuple" ):
                listener.exitDeconstruction_tuple(self)




    def deconstruction_tuple(self):

        localctx = CSharpParser.Deconstruction_tupleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_deconstruction_tuple)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 521
            self.match(CSharpParser.OPEN_PARENS)
            self.state = 522
            self.deconstruction_element()
            self.state = 525 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 523
                self.match(CSharpParser.COMMA)
                self.state = 524
                self.deconstruction_element()
                self.state = 527 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==132):
                    break

            self.state = 529
            self.match(CSharpParser.CLOSE_PARENS)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Deconstruction_elementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def deconstruction_tuple(self):
            return self.getTypedRuleContext(CSharpParser.Deconstruction_tupleContext,0)


        def identifier(self):
            return self.getTypedRuleContext(CSharpParser.IdentifierContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_deconstruction_element

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeconstruction_element" ):
                listener.enterDeconstruction_element(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeconstruction_element" ):
                listener.exitDeconstruction_element(self)




    def deconstruction_element(self):

        localctx = CSharpParser.Deconstruction_elementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_deconstruction_element)
        self._la = 0 # Token type
        try:
            self.state = 535
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [129]:
                self.enterOuterAlt(localctx, 1)
                self.state = 531
                self.deconstruction_tuple()
                pass
            elif token in [10, 11, 12, 14, 15, 16, 20, 32, 35, 38, 48, 49, 51, 54, 58, 60, 61, 64, 69, 71, 75, 81, 85, 86, 102, 106, 110, 111, 113, 114, 130, 132, 134]:
                self.enterOuterAlt(localctx, 2)
                self.state = 533
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 3750091428249852928) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 1904629023639713) != 0):
                    self.state = 532
                    self.identifier()


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Tuple_elementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def type_(self):
            return self.getTypedRuleContext(CSharpParser.Type_Context,0)


        def identifier(self):
            return self.getTypedRuleContext(CSharpParser.IdentifierContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_tuple_element

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTuple_element" ):
                listener.enterTuple_element(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTuple_element" ):
                listener.exitTuple_element(self)




    def tuple_element(self):

        localctx = CSharpParser.Tuple_elementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_tuple_element)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 537
            self.type_()
            self.state = 539
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 3750091428249852928) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 1904629023639713) != 0):
                self.state = 538
                self.identifier()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Simple_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def numeric_type(self):
            return self.getTypedRuleContext(CSharpParser.Numeric_typeContext,0)


        def BOOL(self):
            return self.getToken(CSharpParser.BOOL, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_simple_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimple_type" ):
                listener.enterSimple_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimple_type" ):
                listener.exitSimple_type(self)




    def simple_type(self):

        localctx = CSharpParser.Simple_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_simple_type)
        try:
            self.state = 543
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [21, 24, 29, 34, 45, 55, 63, 83, 87, 99, 100, 104]:
                self.enterOuterAlt(localctx, 1)
                self.state = 541
                self.numeric_type()
                pass
            elif token in [18]:
                self.enterOuterAlt(localctx, 2)
                self.state = 542
                self.match(CSharpParser.BOOL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Numeric_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def integral_type(self):
            return self.getTypedRuleContext(CSharpParser.Integral_typeContext,0)


        def floating_point_type(self):
            return self.getTypedRuleContext(CSharpParser.Floating_point_typeContext,0)


        def DECIMAL(self):
            return self.getToken(CSharpParser.DECIMAL, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_numeric_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNumeric_type" ):
                listener.enterNumeric_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNumeric_type" ):
                listener.exitNumeric_type(self)




    def numeric_type(self):

        localctx = CSharpParser.Numeric_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_numeric_type)
        try:
            self.state = 548
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [21, 24, 55, 63, 83, 87, 99, 100, 104]:
                self.enterOuterAlt(localctx, 1)
                self.state = 545
                self.integral_type()
                pass
            elif token in [34, 45]:
                self.enterOuterAlt(localctx, 2)
                self.state = 546
                self.floating_point_type()
                pass
            elif token in [29]:
                self.enterOuterAlt(localctx, 3)
                self.state = 547
                self.match(CSharpParser.DECIMAL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Integral_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SBYTE(self):
            return self.getToken(CSharpParser.SBYTE, 0)

        def BYTE(self):
            return self.getToken(CSharpParser.BYTE, 0)

        def SHORT(self):
            return self.getToken(CSharpParser.SHORT, 0)

        def USHORT(self):
            return self.getToken(CSharpParser.USHORT, 0)

        def INT(self):
            return self.getToken(CSharpParser.INT, 0)

        def UINT(self):
            return self.getToken(CSharpParser.UINT, 0)

        def LONG(self):
            return self.getToken(CSharpParser.LONG, 0)

        def ULONG(self):
            return self.getToken(CSharpParser.ULONG, 0)

        def CHAR(self):
            return self.getToken(CSharpParser.CHAR, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_integral_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIntegral_type" ):
                listener.enterIntegral_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIntegral_type" ):
                listener.exitIntegral_type(self)




    def integral_type(self):

        localctx = CSharpParser.Integral_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_integral_type)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 550
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & -9187343239816937472) != 0) or ((((_la - 83)) & ~0x3f) == 0 and ((1 << (_la - 83)) & 2293777) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Floating_point_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FLOAT(self):
            return self.getToken(CSharpParser.FLOAT, 0)

        def DOUBLE(self):
            return self.getToken(CSharpParser.DOUBLE, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_floating_point_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFloating_point_type" ):
                listener.enterFloating_point_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFloating_point_type" ):
                listener.exitFloating_point_type(self)




    def floating_point_type(self):

        localctx = CSharpParser.Floating_point_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_floating_point_type)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 552
            _la = self._input.LA(1)
            if not(_la==34 or _la==45):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Class_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def namespace_or_type_name(self):
            return self.getTypedRuleContext(CSharpParser.Namespace_or_type_nameContext,0)


        def OBJECT(self):
            return self.getToken(CSharpParser.OBJECT, 0)

        def DYNAMIC(self):
            return self.getToken(CSharpParser.DYNAMIC, 0)

        def STRING(self):
            return self.getToken(CSharpParser.STRING, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_class_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClass_type" ):
                listener.enterClass_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClass_type" ):
                listener.exitClass_type(self)




    def class_type(self):

        localctx = CSharpParser.Class_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_class_type)
        try:
            self.state = 558
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,21,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 554
                self.namespace_or_type_name()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 555
                self.match(CSharpParser.OBJECT)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 556
                self.match(CSharpParser.DYNAMIC)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 557
                self.match(CSharpParser.STRING)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Type_argument_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LT(self):
            return self.getToken(CSharpParser.LT, 0)

        def type_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Type_Context)
            else:
                return self.getTypedRuleContext(CSharpParser.Type_Context,i)


        def GT(self):
            return self.getToken(CSharpParser.GT, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.COMMA)
            else:
                return self.getToken(CSharpParser.COMMA, i)

        def getRuleIndex(self):
            return CSharpParser.RULE_type_argument_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterType_argument_list" ):
                listener.enterType_argument_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitType_argument_list" ):
                listener.exitType_argument_list(self)




    def type_argument_list(self):

        localctx = CSharpParser.Type_argument_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_type_argument_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 560
            self.match(CSharpParser.LT)
            self.state = 561
            self.type_()
            self.state = 566
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==132:
                self.state = 562
                self.match(CSharpParser.COMMA)
                self.state = 563
                self.type_()
                self.state = 568
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 569
            self.match(CSharpParser.GT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Argument_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def argument(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.ArgumentContext)
            else:
                return self.getTypedRuleContext(CSharpParser.ArgumentContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.COMMA)
            else:
                return self.getToken(CSharpParser.COMMA, i)

        def getRuleIndex(self):
            return CSharpParser.RULE_argument_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArgument_list" ):
                listener.enterArgument_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArgument_list" ):
                listener.exitArgument_list(self)




    def argument_list(self):

        localctx = CSharpParser.Argument_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_argument_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 571
            self.argument()
            self.state = 576
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==132:
                self.state = 572
                self.match(CSharpParser.COMMA)
                self.state = 573
                self.argument()
                self.state = 578
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArgumentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.refout = None # Token

        def expression(self):
            return self.getTypedRuleContext(CSharpParser.ExpressionContext,0)


        def identifier(self):
            return self.getTypedRuleContext(CSharpParser.IdentifierContext,0)


        def COLON(self):
            return self.getToken(CSharpParser.COLON, 0)

        def VAR(self):
            return self.getToken(CSharpParser.VAR, 0)

        def type_(self):
            return self.getTypedRuleContext(CSharpParser.Type_Context,0)


        def REF(self):
            return self.getToken(CSharpParser.REF, 0)

        def OUT(self):
            return self.getToken(CSharpParser.OUT, 0)

        def IN(self):
            return self.getToken(CSharpParser.IN, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_argument

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArgument" ):
                listener.enterArgument(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArgument" ):
                listener.exitArgument(self)




    def argument(self):

        localctx = CSharpParser.ArgumentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_argument)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 582
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,24,self._ctx)
            if la_ == 1:
                self.state = 579
                self.identifier()
                self.state = 580
                self.match(CSharpParser.COLON)


            self.state = 585
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,25,self._ctx)
            if la_ == 1:
                self.state = 584
                localctx.refout = self._input.LT(1)
                _la = self._input.LA(1)
                if not(((((_la - 54)) & ~0x3f) == 0 and ((1 << (_la - 54)) & 67371009) != 0)):
                    localctx.refout = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 593
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,27,self._ctx)
            if la_ == 1:
                self.state = 587
                self.expression()
                pass

            elif la_ == 2:
                self.state = 590
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,26,self._ctx)
                if la_ == 1:
                    self.state = 588
                    self.match(CSharpParser.VAR)
                    pass

                elif la_ == 2:
                    self.state = 589
                    self.type_()
                    pass


                self.state = 592
                self.expression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assignment(self):
            return self.getTypedRuleContext(CSharpParser.AssignmentContext,0)


        def non_assignment_expression(self):
            return self.getTypedRuleContext(CSharpParser.Non_assignment_expressionContext,0)


        def REF(self):
            return self.getToken(CSharpParser.REF, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpression" ):
                listener.enterExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpression" ):
                listener.exitExpression(self)




    def expression(self):

        localctx = CSharpParser.ExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_expression)
        try:
            self.state = 599
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,28,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 595
                self.assignment()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 596
                self.non_assignment_expression()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 597
                self.match(CSharpParser.REF)
                self.state = 598
                self.non_assignment_expression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Non_assignment_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def lambda_expression(self):
            return self.getTypedRuleContext(CSharpParser.Lambda_expressionContext,0)


        def query_expression(self):
            return self.getTypedRuleContext(CSharpParser.Query_expressionContext,0)


        def conditional_expression(self):
            return self.getTypedRuleContext(CSharpParser.Conditional_expressionContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_non_assignment_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNon_assignment_expression" ):
                listener.enterNon_assignment_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNon_assignment_expression" ):
                listener.exitNon_assignment_expression(self)




    def non_assignment_expression(self):

        localctx = CSharpParser.Non_assignment_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_non_assignment_expression)
        try:
            self.state = 604
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,29,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 601
                self.lambda_expression()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 602
                self.query_expression()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 603
                self.conditional_expression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssignmentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def unary_expression(self):
            return self.getTypedRuleContext(CSharpParser.Unary_expressionContext,0)


        def assignment_operator(self):
            return self.getTypedRuleContext(CSharpParser.Assignment_operatorContext,0)


        def expression(self):
            return self.getTypedRuleContext(CSharpParser.ExpressionContext,0)


        def OP_COALESCING_ASSIGNMENT(self):
            return self.getToken(CSharpParser.OP_COALESCING_ASSIGNMENT, 0)

        def throwable_expression(self):
            return self.getTypedRuleContext(CSharpParser.Throwable_expressionContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_assignment

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssignment" ):
                listener.enterAssignment(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssignment" ):
                listener.exitAssignment(self)




    def assignment(self):

        localctx = CSharpParser.AssignmentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_assignment)
        try:
            self.state = 614
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,30,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 606
                self.unary_expression()
                self.state = 607
                self.assignment_operator()
                self.state = 608
                self.expression()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 610
                self.unary_expression()
                self.state = 611
                self.match(CSharpParser.OP_COALESCING_ASSIGNMENT)
                self.state = 612
                self.throwable_expression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Assignment_operatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ASSIGNMENT(self):
            return self.getToken(CSharpParser.ASSIGNMENT, 0)

        def OP_ADD_ASSIGNMENT(self):
            return self.getToken(CSharpParser.OP_ADD_ASSIGNMENT, 0)

        def OP_SUB_ASSIGNMENT(self):
            return self.getToken(CSharpParser.OP_SUB_ASSIGNMENT, 0)

        def OP_MULT_ASSIGNMENT(self):
            return self.getToken(CSharpParser.OP_MULT_ASSIGNMENT, 0)

        def OP_DIV_ASSIGNMENT(self):
            return self.getToken(CSharpParser.OP_DIV_ASSIGNMENT, 0)

        def OP_MOD_ASSIGNMENT(self):
            return self.getToken(CSharpParser.OP_MOD_ASSIGNMENT, 0)

        def OP_AND_ASSIGNMENT(self):
            return self.getToken(CSharpParser.OP_AND_ASSIGNMENT, 0)

        def OP_OR_ASSIGNMENT(self):
            return self.getToken(CSharpParser.OP_OR_ASSIGNMENT, 0)

        def OP_XOR_ASSIGNMENT(self):
            return self.getToken(CSharpParser.OP_XOR_ASSIGNMENT, 0)

        def OP_LEFT_SHIFT_ASSIGNMENT(self):
            return self.getToken(CSharpParser.OP_LEFT_SHIFT_ASSIGNMENT, 0)

        def right_shift_assignment(self):
            return self.getTypedRuleContext(CSharpParser.Right_shift_assignmentContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_assignment_operator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssignment_operator" ):
                listener.enterAssignment_operator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssignment_operator" ):
                listener.exitAssignment_operator(self)




    def assignment_operator(self):

        localctx = CSharpParser.Assignment_operatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_assignment_operator)
        try:
            self.state = 627
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [145]:
                self.enterOuterAlt(localctx, 1)
                self.state = 616
                self.match(CSharpParser.ASSIGNMENT)
                pass
            elif token in [160]:
                self.enterOuterAlt(localctx, 2)
                self.state = 617
                self.match(CSharpParser.OP_ADD_ASSIGNMENT)
                pass
            elif token in [161]:
                self.enterOuterAlt(localctx, 3)
                self.state = 618
                self.match(CSharpParser.OP_SUB_ASSIGNMENT)
                pass
            elif token in [162]:
                self.enterOuterAlt(localctx, 4)
                self.state = 619
                self.match(CSharpParser.OP_MULT_ASSIGNMENT)
                pass
            elif token in [163]:
                self.enterOuterAlt(localctx, 5)
                self.state = 620
                self.match(CSharpParser.OP_DIV_ASSIGNMENT)
                pass
            elif token in [164]:
                self.enterOuterAlt(localctx, 6)
                self.state = 621
                self.match(CSharpParser.OP_MOD_ASSIGNMENT)
                pass
            elif token in [165]:
                self.enterOuterAlt(localctx, 7)
                self.state = 622
                self.match(CSharpParser.OP_AND_ASSIGNMENT)
                pass
            elif token in [166]:
                self.enterOuterAlt(localctx, 8)
                self.state = 623
                self.match(CSharpParser.OP_OR_ASSIGNMENT)
                pass
            elif token in [167]:
                self.enterOuterAlt(localctx, 9)
                self.state = 624
                self.match(CSharpParser.OP_XOR_ASSIGNMENT)
                pass
            elif token in [169]:
                self.enterOuterAlt(localctx, 10)
                self.state = 625
                self.match(CSharpParser.OP_LEFT_SHIFT_ASSIGNMENT)
                pass
            elif token in [147]:
                self.enterOuterAlt(localctx, 11)
                self.state = 626
                self.right_shift_assignment()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Conditional_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def null_coalescing_expression(self):
            return self.getTypedRuleContext(CSharpParser.Null_coalescing_expressionContext,0)


        def INTERR(self):
            return self.getToken(CSharpParser.INTERR, 0)

        def throwable_expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Throwable_expressionContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Throwable_expressionContext,i)


        def COLON(self):
            return self.getToken(CSharpParser.COLON, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_conditional_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConditional_expression" ):
                listener.enterConditional_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConditional_expression" ):
                listener.exitConditional_expression(self)




    def conditional_expression(self):

        localctx = CSharpParser.Conditional_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_conditional_expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 629
            self.null_coalescing_expression()
            self.state = 635
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,32,self._ctx)
            if la_ == 1:
                self.state = 630
                self.match(CSharpParser.INTERR)
                self.state = 631
                self.throwable_expression()
                self.state = 632
                self.match(CSharpParser.COLON)
                self.state = 633
                self.throwable_expression()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Null_coalescing_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def conditional_or_expression(self):
            return self.getTypedRuleContext(CSharpParser.Conditional_or_expressionContext,0)


        def OP_COALESCING(self):
            return self.getToken(CSharpParser.OP_COALESCING, 0)

        def null_coalescing_expression(self):
            return self.getTypedRuleContext(CSharpParser.Null_coalescing_expressionContext,0)


        def throw_expression(self):
            return self.getTypedRuleContext(CSharpParser.Throw_expressionContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_null_coalescing_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNull_coalescing_expression" ):
                listener.enterNull_coalescing_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNull_coalescing_expression" ):
                listener.exitNull_coalescing_expression(self)




    def null_coalescing_expression(self):

        localctx = CSharpParser.Null_coalescing_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_null_coalescing_expression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 637
            self.conditional_or_expression()
            self.state = 643
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==150:
                self.state = 638
                self.match(CSharpParser.OP_COALESCING)
                self.state = 641
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [10, 11, 12, 14, 15, 16, 17, 18, 20, 21, 24, 25, 29, 30, 31, 32, 34, 35, 38, 42, 45, 48, 49, 51, 55, 58, 60, 61, 63, 64, 66, 67, 68, 69, 71, 75, 81, 83, 85, 86, 87, 88, 91, 94, 96, 98, 99, 100, 101, 102, 104, 106, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 129, 135, 136, 137, 140, 142, 143, 144, 151, 152, 171]:
                    self.state = 639
                    self.null_coalescing_expression()
                    pass
                elif token in [95]:
                    self.state = 640
                    self.throw_expression()
                    pass
                else:
                    raise NoViableAltException(self)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Conditional_or_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def conditional_and_expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Conditional_and_expressionContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Conditional_and_expressionContext,i)


        def OP_OR(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.OP_OR)
            else:
                return self.getToken(CSharpParser.OP_OR, i)

        def getRuleIndex(self):
            return CSharpParser.RULE_conditional_or_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConditional_or_expression" ):
                listener.enterConditional_or_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConditional_or_expression" ):
                listener.exitConditional_or_expression(self)




    def conditional_or_expression(self):

        localctx = CSharpParser.Conditional_or_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_conditional_or_expression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 645
            self.conditional_and_expression()
            self.state = 650
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==154:
                self.state = 646
                self.match(CSharpParser.OP_OR)
                self.state = 647
                self.conditional_and_expression()
                self.state = 652
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Conditional_and_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def inclusive_or_expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Inclusive_or_expressionContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Inclusive_or_expressionContext,i)


        def OP_AND(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.OP_AND)
            else:
                return self.getToken(CSharpParser.OP_AND, i)

        def getRuleIndex(self):
            return CSharpParser.RULE_conditional_and_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConditional_and_expression" ):
                listener.enterConditional_and_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConditional_and_expression" ):
                listener.exitConditional_and_expression(self)




    def conditional_and_expression(self):

        localctx = CSharpParser.Conditional_and_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_conditional_and_expression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 653
            self.inclusive_or_expression()
            self.state = 658
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==153:
                self.state = 654
                self.match(CSharpParser.OP_AND)
                self.state = 655
                self.inclusive_or_expression()
                self.state = 660
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Inclusive_or_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def exclusive_or_expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Exclusive_or_expressionContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Exclusive_or_expressionContext,i)


        def BITWISE_OR(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.BITWISE_OR)
            else:
                return self.getToken(CSharpParser.BITWISE_OR, i)

        def getRuleIndex(self):
            return CSharpParser.RULE_inclusive_or_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInclusive_or_expression" ):
                listener.enterInclusive_or_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInclusive_or_expression" ):
                listener.exitInclusive_or_expression(self)




    def inclusive_or_expression(self):

        localctx = CSharpParser.Inclusive_or_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_inclusive_or_expression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 661
            self.exclusive_or_expression()
            self.state = 666
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==141:
                self.state = 662
                self.match(CSharpParser.BITWISE_OR)
                self.state = 663
                self.exclusive_or_expression()
                self.state = 668
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Exclusive_or_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def and_expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.And_expressionContext)
            else:
                return self.getTypedRuleContext(CSharpParser.And_expressionContext,i)


        def CARET(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.CARET)
            else:
                return self.getToken(CSharpParser.CARET, i)

        def getRuleIndex(self):
            return CSharpParser.RULE_exclusive_or_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExclusive_or_expression" ):
                listener.enterExclusive_or_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExclusive_or_expression" ):
                listener.exitExclusive_or_expression(self)




    def exclusive_or_expression(self):

        localctx = CSharpParser.Exclusive_or_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_exclusive_or_expression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 669
            self.and_expression()
            self.state = 674
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==142:
                self.state = 670
                self.match(CSharpParser.CARET)
                self.state = 671
                self.and_expression()
                self.state = 676
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class And_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def equality_expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Equality_expressionContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Equality_expressionContext,i)


        def AMP(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.AMP)
            else:
                return self.getToken(CSharpParser.AMP, i)

        def getRuleIndex(self):
            return CSharpParser.RULE_and_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnd_expression" ):
                listener.enterAnd_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnd_expression" ):
                listener.exitAnd_expression(self)




    def and_expression(self):

        localctx = CSharpParser.And_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_and_expression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 677
            self.equality_expression()
            self.state = 682
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==140:
                self.state = 678
                self.match(CSharpParser.AMP)
                self.state = 679
                self.equality_expression()
                self.state = 684
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Equality_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def relational_expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Relational_expressionContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Relational_expressionContext,i)


        def OP_EQ(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.OP_EQ)
            else:
                return self.getToken(CSharpParser.OP_EQ, i)

        def OP_NE(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.OP_NE)
            else:
                return self.getToken(CSharpParser.OP_NE, i)

        def getRuleIndex(self):
            return CSharpParser.RULE_equality_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEquality_expression" ):
                listener.enterEquality_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEquality_expression" ):
                listener.exitEquality_expression(self)




    def equality_expression(self):

        localctx = CSharpParser.Equality_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_equality_expression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 685
            self.relational_expression()
            self.state = 690
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==156 or _la==157:
                self.state = 686
                _la = self._input.LA(1)
                if not(_la==156 or _la==157):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 687
                self.relational_expression()
                self.state = 692
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Relational_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def shift_expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Shift_expressionContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Shift_expressionContext,i)


        def IS(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.IS)
            else:
                return self.getToken(CSharpParser.IS, i)

        def isType(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.IsTypeContext)
            else:
                return self.getTypedRuleContext(CSharpParser.IsTypeContext,i)


        def AS(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.AS)
            else:
                return self.getToken(CSharpParser.AS, i)

        def type_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Type_Context)
            else:
                return self.getTypedRuleContext(CSharpParser.Type_Context,i)


        def LT(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.LT)
            else:
                return self.getToken(CSharpParser.LT, i)

        def GT(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.GT)
            else:
                return self.getToken(CSharpParser.GT, i)

        def OP_LE(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.OP_LE)
            else:
                return self.getToken(CSharpParser.OP_LE, i)

        def OP_GE(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.OP_GE)
            else:
                return self.getToken(CSharpParser.OP_GE, i)

        def getRuleIndex(self):
            return CSharpParser.RULE_relational_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRelational_expression" ):
                listener.enterRelational_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRelational_expression" ):
                listener.exitRelational_expression(self)




    def relational_expression(self):

        localctx = CSharpParser.Relational_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_relational_expression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 693
            self.shift_expression()
            self.state = 702
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==13 or _la==59 or ((((_la - 146)) & ~0x3f) == 0 and ((1 << (_la - 146)) & 12291) != 0):
                self.state = 700
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [146, 147, 158, 159]:
                    self.state = 694
                    _la = self._input.LA(1)
                    if not(((((_la - 146)) & ~0x3f) == 0 and ((1 << (_la - 146)) & 12291) != 0)):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 695
                    self.shift_expression()
                    pass
                elif token in [59]:
                    self.state = 696
                    self.match(CSharpParser.IS)
                    self.state = 697
                    self.isType()
                    pass
                elif token in [13]:
                    self.state = 698
                    self.match(CSharpParser.AS)
                    self.state = 699
                    self.type_()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 704
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Shift_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def additive_expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Additive_expressionContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Additive_expressionContext,i)


        def OP_LEFT_SHIFT(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.OP_LEFT_SHIFT)
            else:
                return self.getToken(CSharpParser.OP_LEFT_SHIFT, i)

        def right_shift(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Right_shiftContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Right_shiftContext,i)


        def getRuleIndex(self):
            return CSharpParser.RULE_shift_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShift_expression" ):
                listener.enterShift_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShift_expression" ):
                listener.exitShift_expression(self)




    def shift_expression(self):

        localctx = CSharpParser.Shift_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_shift_expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 705
            self.additive_expression()
            self.state = 713
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,44,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 708
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [168]:
                        self.state = 706
                        self.match(CSharpParser.OP_LEFT_SHIFT)
                        pass
                    elif token in [147]:
                        self.state = 707
                        self.right_shift()
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 710
                    self.additive_expression() 
                self.state = 715
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,44,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Additive_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def multiplicative_expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Multiplicative_expressionContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Multiplicative_expressionContext,i)


        def PLUS(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.PLUS)
            else:
                return self.getToken(CSharpParser.PLUS, i)

        def MINUS(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.MINUS)
            else:
                return self.getToken(CSharpParser.MINUS, i)

        def getRuleIndex(self):
            return CSharpParser.RULE_additive_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAdditive_expression" ):
                listener.enterAdditive_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAdditive_expression" ):
                listener.exitAdditive_expression(self)




    def additive_expression(self):

        localctx = CSharpParser.Additive_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_additive_expression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 716
            self.multiplicative_expression()
            self.state = 721
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==135 or _la==136:
                self.state = 717
                _la = self._input.LA(1)
                if not(_la==135 or _la==136):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 718
                self.multiplicative_expression()
                self.state = 723
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Multiplicative_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def switch_expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Switch_expressionContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Switch_expressionContext,i)


        def STAR(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.STAR)
            else:
                return self.getToken(CSharpParser.STAR, i)

        def DIV(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.DIV)
            else:
                return self.getToken(CSharpParser.DIV, i)

        def PERCENT(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.PERCENT)
            else:
                return self.getToken(CSharpParser.PERCENT, i)

        def getRuleIndex(self):
            return CSharpParser.RULE_multiplicative_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMultiplicative_expression" ):
                listener.enterMultiplicative_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMultiplicative_expression" ):
                listener.exitMultiplicative_expression(self)




    def multiplicative_expression(self):

        localctx = CSharpParser.Multiplicative_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_multiplicative_expression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 724
            self.switch_expression()
            self.state = 729
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 137)) & ~0x3f) == 0 and ((1 << (_la - 137)) & 7) != 0):
                self.state = 725
                _la = self._input.LA(1)
                if not(((((_la - 137)) & ~0x3f) == 0 and ((1 << (_la - 137)) & 7) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 726
                self.switch_expression()
                self.state = 731
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Switch_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def range_expression(self):
            return self.getTypedRuleContext(CSharpParser.Range_expressionContext,0)


        def SWITCH(self):
            return self.getToken(CSharpParser.SWITCH, 0)

        def OPEN_BRACE(self):
            return self.getToken(CSharpParser.OPEN_BRACE, 0)

        def CLOSE_BRACE(self):
            return self.getToken(CSharpParser.CLOSE_BRACE, 0)

        def switch_expression_arms(self):
            return self.getTypedRuleContext(CSharpParser.Switch_expression_armsContext,0)


        def COMMA(self):
            return self.getToken(CSharpParser.COMMA, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_switch_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSwitch_expression" ):
                listener.enterSwitch_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSwitch_expression" ):
                listener.exitSwitch_expression(self)




    def switch_expression(self):

        localctx = CSharpParser.Switch_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_switch_expression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 732
            self.range_expression()
            self.state = 742
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==93:
                self.state = 733
                self.match(CSharpParser.SWITCH)
                self.state = 734
                self.match(CSharpParser.OPEN_BRACE)
                self.state = 739
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -5437212208176571392) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 2305497201161996477) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & 4398059153857) != 0):
                    self.state = 735
                    self.switch_expression_arms()
                    self.state = 737
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==132:
                        self.state = 736
                        self.match(CSharpParser.COMMA)




                self.state = 741
                self.match(CSharpParser.CLOSE_BRACE)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Switch_expression_armsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def switch_expression_arm(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Switch_expression_armContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Switch_expression_armContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.COMMA)
            else:
                return self.getToken(CSharpParser.COMMA, i)

        def getRuleIndex(self):
            return CSharpParser.RULE_switch_expression_arms

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSwitch_expression_arms" ):
                listener.enterSwitch_expression_arms(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSwitch_expression_arms" ):
                listener.exitSwitch_expression_arms(self)




    def switch_expression_arms(self):

        localctx = CSharpParser.Switch_expression_armsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_switch_expression_arms)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 744
            self.switch_expression_arm()
            self.state = 749
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,50,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 745
                    self.match(CSharpParser.COMMA)
                    self.state = 746
                    self.switch_expression_arm() 
                self.state = 751
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,50,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Switch_expression_armContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(CSharpParser.ExpressionContext,0)


        def right_arrow(self):
            return self.getTypedRuleContext(CSharpParser.Right_arrowContext,0)


        def throwable_expression(self):
            return self.getTypedRuleContext(CSharpParser.Throwable_expressionContext,0)


        def case_guard(self):
            return self.getTypedRuleContext(CSharpParser.Case_guardContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_switch_expression_arm

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSwitch_expression_arm" ):
                listener.enterSwitch_expression_arm(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSwitch_expression_arm" ):
                listener.exitSwitch_expression_arm(self)




    def switch_expression_arm(self):

        localctx = CSharpParser.Switch_expression_armContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_switch_expression_arm)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 752
            self.expression()
            self.state = 754
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==110:
                self.state = 753
                self.case_guard()


            self.state = 756
            self.right_arrow()
            self.state = 757
            self.throwable_expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Range_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def unary_expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Unary_expressionContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Unary_expressionContext,i)


        def OP_RANGE(self):
            return self.getToken(CSharpParser.OP_RANGE, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_range_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRange_expression" ):
                listener.enterRange_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRange_expression" ):
                listener.exitRange_expression(self)




    def range_expression(self):

        localctx = CSharpParser.Range_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_range_expression)
        self._la = 0 # Token type
        try:
            self.state = 767
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,54,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 759
                self.unary_expression()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 761
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -5437212208176571392) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 2305497201161930941) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & 12642753) != 0):
                    self.state = 760
                    self.unary_expression()


                self.state = 763
                self.match(CSharpParser.OP_RANGE)
                self.state = 765
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,53,self._ctx)
                if la_ == 1:
                    self.state = 764
                    self.unary_expression()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Unary_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def cast_expression(self):
            return self.getTypedRuleContext(CSharpParser.Cast_expressionContext,0)


        def primary_expression(self):
            return self.getTypedRuleContext(CSharpParser.Primary_expressionContext,0)


        def PLUS(self):
            return self.getToken(CSharpParser.PLUS, 0)

        def unary_expression(self):
            return self.getTypedRuleContext(CSharpParser.Unary_expressionContext,0)


        def MINUS(self):
            return self.getToken(CSharpParser.MINUS, 0)

        def BANG(self):
            return self.getToken(CSharpParser.BANG, 0)

        def TILDE(self):
            return self.getToken(CSharpParser.TILDE, 0)

        def OP_INC(self):
            return self.getToken(CSharpParser.OP_INC, 0)

        def OP_DEC(self):
            return self.getToken(CSharpParser.OP_DEC, 0)

        def AWAIT(self):
            return self.getToken(CSharpParser.AWAIT, 0)

        def AMP(self):
            return self.getToken(CSharpParser.AMP, 0)

        def STAR(self):
            return self.getToken(CSharpParser.STAR, 0)

        def CARET(self):
            return self.getToken(CSharpParser.CARET, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_unary_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnary_expression" ):
                listener.enterUnary_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnary_expression" ):
                listener.exitUnary_expression(self)




    def unary_expression(self):

        localctx = CSharpParser.Unary_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_unary_expression)
        try:
            self.state = 791
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,55,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 769
                self.cast_expression()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 770
                self.primary_expression()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 771
                self.match(CSharpParser.PLUS)
                self.state = 772
                self.unary_expression()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 773
                self.match(CSharpParser.MINUS)
                self.state = 774
                self.unary_expression()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 775
                self.match(CSharpParser.BANG)
                self.state = 776
                self.unary_expression()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 777
                self.match(CSharpParser.TILDE)
                self.state = 778
                self.unary_expression()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 779
                self.match(CSharpParser.OP_INC)
                self.state = 780
                self.unary_expression()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 781
                self.match(CSharpParser.OP_DEC)
                self.state = 782
                self.unary_expression()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 783
                self.match(CSharpParser.AWAIT)
                self.state = 784
                self.unary_expression()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 785
                self.match(CSharpParser.AMP)
                self.state = 786
                self.unary_expression()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 787
                self.match(CSharpParser.STAR)
                self.state = 788
                self.unary_expression()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 789
                self.match(CSharpParser.CARET)
                self.state = 790
                self.unary_expression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Cast_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PARENS(self):
            return self.getToken(CSharpParser.OPEN_PARENS, 0)

        def type_(self):
            return self.getTypedRuleContext(CSharpParser.Type_Context,0)


        def CLOSE_PARENS(self):
            return self.getToken(CSharpParser.CLOSE_PARENS, 0)

        def unary_expression(self):
            return self.getTypedRuleContext(CSharpParser.Unary_expressionContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_cast_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCast_expression" ):
                listener.enterCast_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCast_expression" ):
                listener.exitCast_expression(self)




    def cast_expression(self):

        localctx = CSharpParser.Cast_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_cast_expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 793
            self.match(CSharpParser.OPEN_PARENS)
            self.state = 794
            self.type_()
            self.state = 795
            self.match(CSharpParser.CLOSE_PARENS)
            self.state = 796
            self.unary_expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Primary_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.pe = None # Primary_expression_startContext

        def primary_expression_start(self):
            return self.getTypedRuleContext(CSharpParser.Primary_expression_startContext,0)


        def BANG(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.BANG)
            else:
                return self.getToken(CSharpParser.BANG, i)

        def bracket_expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Bracket_expressionContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Bracket_expressionContext,i)


        def member_access(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Member_accessContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Member_accessContext,i)


        def method_invocation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Method_invocationContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Method_invocationContext,i)


        def OP_INC(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.OP_INC)
            else:
                return self.getToken(CSharpParser.OP_INC, i)

        def OP_DEC(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.OP_DEC)
            else:
                return self.getToken(CSharpParser.OP_DEC, i)

        def OP_PTR(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.OP_PTR)
            else:
                return self.getToken(CSharpParser.OP_PTR, i)

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(CSharpParser.IdentifierContext,i)


        def tuple_type(self):
            return self.getTypedRuleContext(CSharpParser.Tuple_typeContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_primary_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrimary_expression" ):
                listener.enterPrimary_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrimary_expression" ):
                listener.exitPrimary_expression(self)




    def primary_expression(self):

        localctx = CSharpParser.Primary_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_primary_expression)
        self._la = 0 # Token type
        try:
            self.state = 837
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,64,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 798
                localctx.pe = self.primary_expression_start()
                self.state = 800
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,56,self._ctx)
                if la_ == 1:
                    self.state = 799
                    self.match(CSharpParser.BANG)


                self.state = 805
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,57,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 802
                        self.bracket_expression() 
                    self.state = 807
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,57,self._ctx)

                self.state = 809
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==143:
                    self.state = 808
                    self.match(CSharpParser.BANG)


                self.state = 833
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,63,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 817
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [131, 148]:
                            self.state = 811
                            self.member_access()
                            pass
                        elif token in [129]:
                            self.state = 812
                            self.method_invocation()
                            pass
                        elif token in [151]:
                            self.state = 813
                            self.match(CSharpParser.OP_INC)
                            pass
                        elif token in [152]:
                            self.state = 814
                            self.match(CSharpParser.OP_DEC)
                            pass
                        elif token in [155]:
                            self.state = 815
                            self.match(CSharpParser.OP_PTR)
                            self.state = 816
                            self.identifier()
                            pass
                        else:
                            raise NoViableAltException(self)

                        self.state = 820
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,60,self._ctx)
                        if la_ == 1:
                            self.state = 819
                            self.match(CSharpParser.BANG)


                        self.state = 825
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,61,self._ctx)
                        while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                            if _alt==1:
                                self.state = 822
                                self.bracket_expression() 
                            self.state = 827
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input,61,self._ctx)

                        self.state = 829
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==143:
                            self.state = 828
                            self.match(CSharpParser.BANG)

                 
                    self.state = 835
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,63,self._ctx)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 836
                self.tuple_type()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Primary_expression_startContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CSharpParser.RULE_primary_expression_start

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class LiteralAccessExpressionContext(Primary_expression_startContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CSharpParser.Primary_expression_startContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LITERAL_ACCESS(self):
            return self.getToken(CSharpParser.LITERAL_ACCESS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLiteralAccessExpression" ):
                listener.enterLiteralAccessExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLiteralAccessExpression" ):
                listener.exitLiteralAccessExpression(self)


    class DefaultValueExpressionContext(Primary_expression_startContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CSharpParser.Primary_expression_startContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DEFAULT(self):
            return self.getToken(CSharpParser.DEFAULT, 0)
        def OPEN_PARENS(self):
            return self.getToken(CSharpParser.OPEN_PARENS, 0)
        def type_(self):
            return self.getTypedRuleContext(CSharpParser.Type_Context,0)

        def CLOSE_PARENS(self):
            return self.getToken(CSharpParser.CLOSE_PARENS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDefaultValueExpression" ):
                listener.enterDefaultValueExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDefaultValueExpression" ):
                listener.exitDefaultValueExpression(self)


    class BaseAccessExpressionContext(Primary_expression_startContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CSharpParser.Primary_expression_startContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def BASE(self):
            return self.getToken(CSharpParser.BASE, 0)
        def DOT(self):
            return self.getToken(CSharpParser.DOT, 0)
        def identifier(self):
            return self.getTypedRuleContext(CSharpParser.IdentifierContext,0)

        def OPEN_BRACKET(self):
            return self.getToken(CSharpParser.OPEN_BRACKET, 0)
        def expression_list(self):
            return self.getTypedRuleContext(CSharpParser.Expression_listContext,0)

        def CLOSE_BRACKET(self):
            return self.getToken(CSharpParser.CLOSE_BRACKET, 0)
        def type_argument_list(self):
            return self.getTypedRuleContext(CSharpParser.Type_argument_listContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBaseAccessExpression" ):
                listener.enterBaseAccessExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBaseAccessExpression" ):
                listener.exitBaseAccessExpression(self)


    class SizeofExpressionContext(Primary_expression_startContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CSharpParser.Primary_expression_startContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SIZEOF(self):
            return self.getToken(CSharpParser.SIZEOF, 0)
        def OPEN_PARENS(self):
            return self.getToken(CSharpParser.OPEN_PARENS, 0)
        def type_(self):
            return self.getTypedRuleContext(CSharpParser.Type_Context,0)

        def CLOSE_PARENS(self):
            return self.getToken(CSharpParser.CLOSE_PARENS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSizeofExpression" ):
                listener.enterSizeofExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSizeofExpression" ):
                listener.exitSizeofExpression(self)


    class ParenthesisExpressionsContext(Primary_expression_startContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CSharpParser.Primary_expression_startContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def OPEN_PARENS(self):
            return self.getToken(CSharpParser.OPEN_PARENS, 0)
        def expression(self):
            return self.getTypedRuleContext(CSharpParser.ExpressionContext,0)

        def CLOSE_PARENS(self):
            return self.getToken(CSharpParser.CLOSE_PARENS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParenthesisExpressions" ):
                listener.enterParenthesisExpressions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParenthesisExpressions" ):
                listener.exitParenthesisExpressions(self)


    class ThisReferenceExpressionContext(Primary_expression_startContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CSharpParser.Primary_expression_startContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def THIS(self):
            return self.getToken(CSharpParser.THIS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterThisReferenceExpression" ):
                listener.enterThisReferenceExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitThisReferenceExpression" ):
                listener.exitThisReferenceExpression(self)


    class ObjectCreationExpressionContext(Primary_expression_startContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CSharpParser.Primary_expression_startContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def NEW(self):
            return self.getToken(CSharpParser.NEW, 0)
        def type_(self):
            return self.getTypedRuleContext(CSharpParser.Type_Context,0)

        def anonymous_object_initializer(self):
            return self.getTypedRuleContext(CSharpParser.Anonymous_object_initializerContext,0)

        def rank_specifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Rank_specifierContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Rank_specifierContext,i)

        def array_initializer(self):
            return self.getTypedRuleContext(CSharpParser.Array_initializerContext,0)

        def object_creation_expression(self):
            return self.getTypedRuleContext(CSharpParser.Object_creation_expressionContext,0)

        def object_or_collection_initializer(self):
            return self.getTypedRuleContext(CSharpParser.Object_or_collection_initializerContext,0)

        def OPEN_BRACKET(self):
            return self.getToken(CSharpParser.OPEN_BRACKET, 0)
        def expression_list(self):
            return self.getTypedRuleContext(CSharpParser.Expression_listContext,0)

        def CLOSE_BRACKET(self):
            return self.getToken(CSharpParser.CLOSE_BRACKET, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterObjectCreationExpression" ):
                listener.enterObjectCreationExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitObjectCreationExpression" ):
                listener.exitObjectCreationExpression(self)


    class AnonymousMethodExpressionContext(Primary_expression_startContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CSharpParser.Primary_expression_startContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DELEGATE(self):
            return self.getToken(CSharpParser.DELEGATE, 0)
        def block(self):
            return self.getTypedRuleContext(CSharpParser.BlockContext,0)

        def ASYNC(self):
            return self.getToken(CSharpParser.ASYNC, 0)
        def OPEN_PARENS(self):
            return self.getToken(CSharpParser.OPEN_PARENS, 0)
        def CLOSE_PARENS(self):
            return self.getToken(CSharpParser.CLOSE_PARENS, 0)
        def explicit_anonymous_function_parameter_list(self):
            return self.getTypedRuleContext(CSharpParser.Explicit_anonymous_function_parameter_listContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnonymousMethodExpression" ):
                listener.enterAnonymousMethodExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnonymousMethodExpression" ):
                listener.exitAnonymousMethodExpression(self)


    class TypeofExpressionContext(Primary_expression_startContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CSharpParser.Primary_expression_startContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def TYPEOF(self):
            return self.getToken(CSharpParser.TYPEOF, 0)
        def OPEN_PARENS(self):
            return self.getToken(CSharpParser.OPEN_PARENS, 0)
        def CLOSE_PARENS(self):
            return self.getToken(CSharpParser.CLOSE_PARENS, 0)
        def unbound_type_name(self):
            return self.getTypedRuleContext(CSharpParser.Unbound_type_nameContext,0)

        def type_(self):
            return self.getTypedRuleContext(CSharpParser.Type_Context,0)

        def VOID(self):
            return self.getToken(CSharpParser.VOID, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeofExpression" ):
                listener.enterTypeofExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeofExpression" ):
                listener.exitTypeofExpression(self)


    class TupleExpressionContext(Primary_expression_startContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CSharpParser.Primary_expression_startContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def OPEN_PARENS(self):
            return self.getToken(CSharpParser.OPEN_PARENS, 0)
        def argument(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.ArgumentContext)
            else:
                return self.getTypedRuleContext(CSharpParser.ArgumentContext,i)

        def CLOSE_PARENS(self):
            return self.getToken(CSharpParser.CLOSE_PARENS, 0)
        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.COMMA)
            else:
                return self.getToken(CSharpParser.COMMA, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTupleExpression" ):
                listener.enterTupleExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTupleExpression" ):
                listener.exitTupleExpression(self)


    class UncheckedExpressionContext(Primary_expression_startContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CSharpParser.Primary_expression_startContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def UNCHECKED(self):
            return self.getToken(CSharpParser.UNCHECKED, 0)
        def OPEN_PARENS(self):
            return self.getToken(CSharpParser.OPEN_PARENS, 0)
        def expression(self):
            return self.getTypedRuleContext(CSharpParser.ExpressionContext,0)

        def CLOSE_PARENS(self):
            return self.getToken(CSharpParser.CLOSE_PARENS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUncheckedExpression" ):
                listener.enterUncheckedExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUncheckedExpression" ):
                listener.exitUncheckedExpression(self)


    class SimpleNameExpressionContext(Primary_expression_startContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CSharpParser.Primary_expression_startContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def identifier(self):
            return self.getTypedRuleContext(CSharpParser.IdentifierContext,0)

        def type_argument_list(self):
            return self.getTypedRuleContext(CSharpParser.Type_argument_listContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleNameExpression" ):
                listener.enterSimpleNameExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleNameExpression" ):
                listener.exitSimpleNameExpression(self)


    class MemberAccessExpressionContext(Primary_expression_startContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CSharpParser.Primary_expression_startContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def predefined_type(self):
            return self.getTypedRuleContext(CSharpParser.Predefined_typeContext,0)

        def qualified_alias_member(self):
            return self.getTypedRuleContext(CSharpParser.Qualified_alias_memberContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMemberAccessExpression" ):
                listener.enterMemberAccessExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMemberAccessExpression" ):
                listener.exitMemberAccessExpression(self)


    class CheckedExpressionContext(Primary_expression_startContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CSharpParser.Primary_expression_startContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CHECKED(self):
            return self.getToken(CSharpParser.CHECKED, 0)
        def OPEN_PARENS(self):
            return self.getToken(CSharpParser.OPEN_PARENS, 0)
        def expression(self):
            return self.getTypedRuleContext(CSharpParser.ExpressionContext,0)

        def CLOSE_PARENS(self):
            return self.getToken(CSharpParser.CLOSE_PARENS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCheckedExpression" ):
                listener.enterCheckedExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCheckedExpression" ):
                listener.exitCheckedExpression(self)


    class LiteralExpressionContext(Primary_expression_startContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CSharpParser.Primary_expression_startContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def literal(self):
            return self.getTypedRuleContext(CSharpParser.LiteralContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLiteralExpression" ):
                listener.enterLiteralExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLiteralExpression" ):
                listener.exitLiteralExpression(self)


    class NameofExpressionContext(Primary_expression_startContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CSharpParser.Primary_expression_startContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def NAMEOF(self):
            return self.getToken(CSharpParser.NAMEOF, 0)
        def OPEN_PARENS(self):
            return self.getToken(CSharpParser.OPEN_PARENS, 0)
        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(CSharpParser.IdentifierContext,i)

        def CLOSE_PARENS(self):
            return self.getToken(CSharpParser.CLOSE_PARENS, 0)
        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.DOT)
            else:
                return self.getToken(CSharpParser.DOT, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNameofExpression" ):
                listener.enterNameofExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNameofExpression" ):
                listener.exitNameofExpression(self)



    def primary_expression_start(self):

        localctx = CSharpParser.Primary_expression_startContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_primary_expression_start)
        self._la = 0 # Token type
        try:
            self.state = 960
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,80,self._ctx)
            if la_ == 1:
                localctx = CSharpParser.LiteralExpressionContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 839
                self.literal()
                pass

            elif la_ == 2:
                localctx = CSharpParser.SimpleNameExpressionContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 840
                self.identifier()
                self.state = 842
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,65,self._ctx)
                if la_ == 1:
                    self.state = 841
                    self.type_argument_list()


                pass

            elif la_ == 3:
                localctx = CSharpParser.ParenthesisExpressionsContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 844
                self.match(CSharpParser.OPEN_PARENS)
                self.state = 845
                self.expression()
                self.state = 846
                self.match(CSharpParser.CLOSE_PARENS)
                pass

            elif la_ == 4:
                localctx = CSharpParser.MemberAccessExpressionContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 848
                self.predefined_type()
                pass

            elif la_ == 5:
                localctx = CSharpParser.MemberAccessExpressionContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 849
                self.qualified_alias_member()
                pass

            elif la_ == 6:
                localctx = CSharpParser.LiteralAccessExpressionContext(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 850
                self.match(CSharpParser.LITERAL_ACCESS)
                pass

            elif la_ == 7:
                localctx = CSharpParser.ThisReferenceExpressionContext(self, localctx)
                self.enterOuterAlt(localctx, 7)
                self.state = 851
                self.match(CSharpParser.THIS)
                pass

            elif la_ == 8:
                localctx = CSharpParser.BaseAccessExpressionContext(self, localctx)
                self.enterOuterAlt(localctx, 8)
                self.state = 852
                self.match(CSharpParser.BASE)
                self.state = 862
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [131]:
                    self.state = 853
                    self.match(CSharpParser.DOT)
                    self.state = 854
                    self.identifier()
                    self.state = 856
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,66,self._ctx)
                    if la_ == 1:
                        self.state = 855
                        self.type_argument_list()


                    pass
                elif token in [127]:
                    self.state = 858
                    self.match(CSharpParser.OPEN_BRACKET)
                    self.state = 859
                    self.expression_list()
                    self.state = 860
                    self.match(CSharpParser.CLOSE_BRACKET)
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 9:
                localctx = CSharpParser.ObjectCreationExpressionContext(self, localctx)
                self.enterOuterAlt(localctx, 9)
                self.state = 864
                self.match(CSharpParser.NEW)
                self.state = 893
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,72,self._ctx)
                if la_ == 1:
                    self.state = 865
                    self.type_()
                    self.state = 887
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,71,self._ctx)
                    if la_ == 1:
                        self.state = 866
                        self.object_creation_expression()
                        pass

                    elif la_ == 2:
                        self.state = 867
                        self.object_or_collection_initializer()
                        pass

                    elif la_ == 3:
                        self.state = 868
                        self.match(CSharpParser.OPEN_BRACKET)
                        self.state = 869
                        self.expression_list()
                        self.state = 870
                        self.match(CSharpParser.CLOSE_BRACKET)
                        self.state = 874
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,68,self._ctx)
                        while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                            if _alt==1:
                                self.state = 871
                                self.rank_specifier() 
                            self.state = 876
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input,68,self._ctx)

                        self.state = 878
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==125:
                            self.state = 877
                            self.array_initializer()


                        pass

                    elif la_ == 4:
                        self.state = 881 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while True:
                            self.state = 880
                            self.rank_specifier()
                            self.state = 883 
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if not (_la==127):
                                break

                        self.state = 885
                        self.array_initializer()
                        pass



                elif la_ == 2:
                    self.state = 889
                    self.anonymous_object_initializer()

                elif la_ == 3:
                    self.state = 890
                    self.rank_specifier()
                    self.state = 891
                    self.array_initializer()


                pass

            elif la_ == 10:
                localctx = CSharpParser.TupleExpressionContext(self, localctx)
                self.enterOuterAlt(localctx, 10)
                self.state = 895
                self.match(CSharpParser.OPEN_PARENS)
                self.state = 896
                self.argument()
                self.state = 899 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 897
                    self.match(CSharpParser.COMMA)
                    self.state = 898
                    self.argument()
                    self.state = 901 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==132):
                        break

                self.state = 903
                self.match(CSharpParser.CLOSE_PARENS)
                pass

            elif la_ == 11:
                localctx = CSharpParser.TypeofExpressionContext(self, localctx)
                self.enterOuterAlt(localctx, 11)
                self.state = 905
                self.match(CSharpParser.TYPEOF)
                self.state = 906
                self.match(CSharpParser.OPEN_PARENS)
                self.state = 910
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,74,self._ctx)
                if la_ == 1:
                    self.state = 907
                    self.unbound_type_name()
                    pass

                elif la_ == 2:
                    self.state = 908
                    self.type_()
                    pass

                elif la_ == 3:
                    self.state = 909
                    self.match(CSharpParser.VOID)
                    pass


                self.state = 912
                self.match(CSharpParser.CLOSE_PARENS)
                pass

            elif la_ == 12:
                localctx = CSharpParser.CheckedExpressionContext(self, localctx)
                self.enterOuterAlt(localctx, 12)
                self.state = 913
                self.match(CSharpParser.CHECKED)
                self.state = 914
                self.match(CSharpParser.OPEN_PARENS)
                self.state = 915
                self.expression()
                self.state = 916
                self.match(CSharpParser.CLOSE_PARENS)
                pass

            elif la_ == 13:
                localctx = CSharpParser.UncheckedExpressionContext(self, localctx)
                self.enterOuterAlt(localctx, 13)
                self.state = 918
                self.match(CSharpParser.UNCHECKED)
                self.state = 919
                self.match(CSharpParser.OPEN_PARENS)
                self.state = 920
                self.expression()
                self.state = 921
                self.match(CSharpParser.CLOSE_PARENS)
                pass

            elif la_ == 14:
                localctx = CSharpParser.DefaultValueExpressionContext(self, localctx)
                self.enterOuterAlt(localctx, 14)
                self.state = 923
                self.match(CSharpParser.DEFAULT)
                self.state = 928
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,75,self._ctx)
                if la_ == 1:
                    self.state = 924
                    self.match(CSharpParser.OPEN_PARENS)
                    self.state = 925
                    self.type_()
                    self.state = 926
                    self.match(CSharpParser.CLOSE_PARENS)


                pass

            elif la_ == 15:
                localctx = CSharpParser.AnonymousMethodExpressionContext(self, localctx)
                self.enterOuterAlt(localctx, 15)
                self.state = 931
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==15:
                    self.state = 930
                    self.match(CSharpParser.ASYNC)


                self.state = 933
                self.match(CSharpParser.DELEGATE)
                self.state = 939
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==129:
                    self.state = 934
                    self.match(CSharpParser.OPEN_PARENS)
                    self.state = 936
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if ((((_la - 10)) & ~0x3f) == 0 and ((1 << (_la - 10)) & 7812956763456032119) != 0) or ((((_la - 75)) & ~0x3f) == 0 and ((1 << (_la - 75)) & 18015337681329505) != 0):
                        self.state = 935
                        self.explicit_anonymous_function_parameter_list()


                    self.state = 938
                    self.match(CSharpParser.CLOSE_PARENS)


                self.state = 941
                self.block()
                pass

            elif la_ == 16:
                localctx = CSharpParser.SizeofExpressionContext(self, localctx)
                self.enterOuterAlt(localctx, 16)
                self.state = 942
                self.match(CSharpParser.SIZEOF)
                self.state = 943
                self.match(CSharpParser.OPEN_PARENS)
                self.state = 944
                self.type_()
                self.state = 945
                self.match(CSharpParser.CLOSE_PARENS)
                pass

            elif la_ == 17:
                localctx = CSharpParser.NameofExpressionContext(self, localctx)
                self.enterOuterAlt(localctx, 17)
                self.state = 947
                self.match(CSharpParser.NAMEOF)
                self.state = 948
                self.match(CSharpParser.OPEN_PARENS)
                self.state = 954
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,79,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 949
                        self.identifier()
                        self.state = 950
                        self.match(CSharpParser.DOT) 
                    self.state = 956
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,79,self._ctx)

                self.state = 957
                self.identifier()
                self.state = 958
                self.match(CSharpParser.CLOSE_PARENS)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Throwable_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(CSharpParser.ExpressionContext,0)


        def throw_expression(self):
            return self.getTypedRuleContext(CSharpParser.Throw_expressionContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_throwable_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterThrowable_expression" ):
                listener.enterThrowable_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitThrowable_expression" ):
                listener.exitThrowable_expression(self)




    def throwable_expression(self):

        localctx = CSharpParser.Throwable_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_throwable_expression)
        try:
            self.state = 964
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [10, 11, 12, 14, 15, 16, 17, 18, 20, 21, 24, 25, 29, 30, 31, 32, 34, 35, 38, 42, 45, 48, 49, 51, 55, 58, 60, 61, 63, 64, 66, 67, 68, 69, 71, 75, 80, 81, 83, 85, 86, 87, 88, 91, 94, 96, 98, 99, 100, 101, 102, 104, 106, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 129, 135, 136, 137, 140, 142, 143, 144, 151, 152, 171]:
                self.enterOuterAlt(localctx, 1)
                self.state = 962
                self.expression()
                pass
            elif token in [95]:
                self.enterOuterAlt(localctx, 2)
                self.state = 963
                self.throw_expression()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Throw_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def THROW(self):
            return self.getToken(CSharpParser.THROW, 0)

        def expression(self):
            return self.getTypedRuleContext(CSharpParser.ExpressionContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_throw_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterThrow_expression" ):
                listener.enterThrow_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitThrow_expression" ):
                listener.exitThrow_expression(self)




    def throw_expression(self):

        localctx = CSharpParser.Throw_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_throw_expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 966
            self.match(CSharpParser.THROW)
            self.state = 967
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Member_accessContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DOT(self):
            return self.getToken(CSharpParser.DOT, 0)

        def identifier(self):
            return self.getTypedRuleContext(CSharpParser.IdentifierContext,0)


        def INTERR(self):
            return self.getToken(CSharpParser.INTERR, 0)

        def type_argument_list(self):
            return self.getTypedRuleContext(CSharpParser.Type_argument_listContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_member_access

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMember_access" ):
                listener.enterMember_access(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMember_access" ):
                listener.exitMember_access(self)




    def member_access(self):

        localctx = CSharpParser.Member_accessContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_member_access)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 970
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==148:
                self.state = 969
                self.match(CSharpParser.INTERR)


            self.state = 972
            self.match(CSharpParser.DOT)
            self.state = 973
            self.identifier()
            self.state = 975
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,83,self._ctx)
            if la_ == 1:
                self.state = 974
                self.type_argument_list()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Bracket_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_BRACKET(self):
            return self.getToken(CSharpParser.OPEN_BRACKET, 0)

        def indexer_argument(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Indexer_argumentContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Indexer_argumentContext,i)


        def CLOSE_BRACKET(self):
            return self.getToken(CSharpParser.CLOSE_BRACKET, 0)

        def INTERR(self):
            return self.getToken(CSharpParser.INTERR, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.COMMA)
            else:
                return self.getToken(CSharpParser.COMMA, i)

        def getRuleIndex(self):
            return CSharpParser.RULE_bracket_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBracket_expression" ):
                listener.enterBracket_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBracket_expression" ):
                listener.exitBracket_expression(self)




    def bracket_expression(self):

        localctx = CSharpParser.Bracket_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_bracket_expression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 978
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==148:
                self.state = 977
                self.match(CSharpParser.INTERR)


            self.state = 980
            self.match(CSharpParser.OPEN_BRACKET)
            self.state = 981
            self.indexer_argument()
            self.state = 986
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==132:
                self.state = 982
                self.match(CSharpParser.COMMA)
                self.state = 983
                self.indexer_argument()
                self.state = 988
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 989
            self.match(CSharpParser.CLOSE_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Indexer_argumentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(CSharpParser.ExpressionContext,0)


        def identifier(self):
            return self.getTypedRuleContext(CSharpParser.IdentifierContext,0)


        def COLON(self):
            return self.getToken(CSharpParser.COLON, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_indexer_argument

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndexer_argument" ):
                listener.enterIndexer_argument(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndexer_argument" ):
                listener.exitIndexer_argument(self)




    def indexer_argument(self):

        localctx = CSharpParser.Indexer_argumentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_indexer_argument)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 994
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,86,self._ctx)
            if la_ == 1:
                self.state = 991
                self.identifier()
                self.state = 992
                self.match(CSharpParser.COLON)


            self.state = 996
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Predefined_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BOOL(self):
            return self.getToken(CSharpParser.BOOL, 0)

        def BYTE(self):
            return self.getToken(CSharpParser.BYTE, 0)

        def CHAR(self):
            return self.getToken(CSharpParser.CHAR, 0)

        def DECIMAL(self):
            return self.getToken(CSharpParser.DECIMAL, 0)

        def DOUBLE(self):
            return self.getToken(CSharpParser.DOUBLE, 0)

        def FLOAT(self):
            return self.getToken(CSharpParser.FLOAT, 0)

        def INT(self):
            return self.getToken(CSharpParser.INT, 0)

        def LONG(self):
            return self.getToken(CSharpParser.LONG, 0)

        def OBJECT(self):
            return self.getToken(CSharpParser.OBJECT, 0)

        def SBYTE(self):
            return self.getToken(CSharpParser.SBYTE, 0)

        def SHORT(self):
            return self.getToken(CSharpParser.SHORT, 0)

        def STRING(self):
            return self.getToken(CSharpParser.STRING, 0)

        def UINT(self):
            return self.getToken(CSharpParser.UINT, 0)

        def ULONG(self):
            return self.getToken(CSharpParser.ULONG, 0)

        def USHORT(self):
            return self.getToken(CSharpParser.USHORT, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_predefined_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPredefined_type" ):
                listener.enterPredefined_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPredefined_type" ):
                listener.exitPredefined_type(self)




    def predefined_type(self):

        localctx = CSharpParser.Predefined_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_predefined_type)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 998
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & -9187308037727846400) != 0) or ((((_la - 68)) & ~0x3f) == 0 and ((1 << (_la - 68)) & 75170873345) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Expression_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(CSharpParser.ExpressionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.COMMA)
            else:
                return self.getToken(CSharpParser.COMMA, i)

        def getRuleIndex(self):
            return CSharpParser.RULE_expression_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpression_list" ):
                listener.enterExpression_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpression_list" ):
                listener.exitExpression_list(self)




    def expression_list(self):

        localctx = CSharpParser.Expression_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_expression_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1000
            self.expression()
            self.state = 1005
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==132:
                self.state = 1001
                self.match(CSharpParser.COMMA)
                self.state = 1002
                self.expression()
                self.state = 1007
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Object_or_collection_initializerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def object_initializer(self):
            return self.getTypedRuleContext(CSharpParser.Object_initializerContext,0)


        def collection_initializer(self):
            return self.getTypedRuleContext(CSharpParser.Collection_initializerContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_object_or_collection_initializer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterObject_or_collection_initializer" ):
                listener.enterObject_or_collection_initializer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitObject_or_collection_initializer" ):
                listener.exitObject_or_collection_initializer(self)




    def object_or_collection_initializer(self):

        localctx = CSharpParser.Object_or_collection_initializerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_object_or_collection_initializer)
        try:
            self.state = 1010
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,88,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1008
                self.object_initializer()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1009
                self.collection_initializer()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Object_initializerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_BRACE(self):
            return self.getToken(CSharpParser.OPEN_BRACE, 0)

        def CLOSE_BRACE(self):
            return self.getToken(CSharpParser.CLOSE_BRACE, 0)

        def member_initializer_list(self):
            return self.getTypedRuleContext(CSharpParser.Member_initializer_listContext,0)


        def COMMA(self):
            return self.getToken(CSharpParser.COMMA, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_object_initializer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterObject_initializer" ):
                listener.enterObject_initializer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitObject_initializer" ):
                listener.exitObject_initializer(self)




    def object_initializer(self):

        localctx = CSharpParser.Object_initializerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_object_initializer)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1012
            self.match(CSharpParser.OPEN_BRACE)
            self.state = 1017
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 3750091428249852928) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -9221467407831136095) != 0):
                self.state = 1013
                self.member_initializer_list()
                self.state = 1015
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==132:
                    self.state = 1014
                    self.match(CSharpParser.COMMA)




            self.state = 1019
            self.match(CSharpParser.CLOSE_BRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Member_initializer_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def member_initializer(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Member_initializerContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Member_initializerContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.COMMA)
            else:
                return self.getToken(CSharpParser.COMMA, i)

        def getRuleIndex(self):
            return CSharpParser.RULE_member_initializer_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMember_initializer_list" ):
                listener.enterMember_initializer_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMember_initializer_list" ):
                listener.exitMember_initializer_list(self)




    def member_initializer_list(self):

        localctx = CSharpParser.Member_initializer_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_member_initializer_list)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1021
            self.member_initializer()
            self.state = 1026
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,91,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1022
                    self.match(CSharpParser.COMMA)
                    self.state = 1023
                    self.member_initializer() 
                self.state = 1028
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,91,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Member_initializerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ASSIGNMENT(self):
            return self.getToken(CSharpParser.ASSIGNMENT, 0)

        def initializer_value(self):
            return self.getTypedRuleContext(CSharpParser.Initializer_valueContext,0)


        def identifier(self):
            return self.getTypedRuleContext(CSharpParser.IdentifierContext,0)


        def OPEN_BRACKET(self):
            return self.getToken(CSharpParser.OPEN_BRACKET, 0)

        def expression(self):
            return self.getTypedRuleContext(CSharpParser.ExpressionContext,0)


        def CLOSE_BRACKET(self):
            return self.getToken(CSharpParser.CLOSE_BRACKET, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_member_initializer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMember_initializer" ):
                listener.enterMember_initializer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMember_initializer" ):
                listener.exitMember_initializer(self)




    def member_initializer(self):

        localctx = CSharpParser.Member_initializerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_member_initializer)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1034
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [10, 11, 12, 14, 15, 16, 20, 32, 35, 38, 48, 49, 51, 58, 60, 61, 64, 69, 71, 75, 81, 85, 86, 102, 106, 110, 111, 113, 114]:
                self.state = 1029
                self.identifier()
                pass
            elif token in [127]:
                self.state = 1030
                self.match(CSharpParser.OPEN_BRACKET)
                self.state = 1031
                self.expression()
                self.state = 1032
                self.match(CSharpParser.CLOSE_BRACKET)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 1036
            self.match(CSharpParser.ASSIGNMENT)
            self.state = 1037
            self.initializer_value()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Initializer_valueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(CSharpParser.ExpressionContext,0)


        def object_or_collection_initializer(self):
            return self.getTypedRuleContext(CSharpParser.Object_or_collection_initializerContext,0)


        def tuple_type(self):
            return self.getTypedRuleContext(CSharpParser.Tuple_typeContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_initializer_value

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInitializer_value" ):
                listener.enterInitializer_value(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInitializer_value" ):
                listener.exitInitializer_value(self)




    def initializer_value(self):

        localctx = CSharpParser.Initializer_valueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_initializer_value)
        try:
            self.state = 1042
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,93,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1039
                self.expression()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1040
                self.object_or_collection_initializer()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1041
                self.tuple_type()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Collection_initializerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_BRACE(self):
            return self.getToken(CSharpParser.OPEN_BRACE, 0)

        def element_initializer(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Element_initializerContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Element_initializerContext,i)


        def CLOSE_BRACE(self):
            return self.getToken(CSharpParser.CLOSE_BRACE, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.COMMA)
            else:
                return self.getToken(CSharpParser.COMMA, i)

        def getRuleIndex(self):
            return CSharpParser.RULE_collection_initializer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCollection_initializer" ):
                listener.enterCollection_initializer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCollection_initializer" ):
                listener.exitCollection_initializer(self)




    def collection_initializer(self):

        localctx = CSharpParser.Collection_initializerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_collection_initializer)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1044
            self.match(CSharpParser.OPEN_BRACE)
            self.state = 1045
            self.element_initializer()
            self.state = 1050
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,94,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1046
                    self.match(CSharpParser.COMMA)
                    self.state = 1047
                    self.element_initializer() 
                self.state = 1052
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,94,self._ctx)

            self.state = 1054
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==132:
                self.state = 1053
                self.match(CSharpParser.COMMA)


            self.state = 1056
            self.match(CSharpParser.CLOSE_BRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Element_initializerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def non_assignment_expression(self):
            return self.getTypedRuleContext(CSharpParser.Non_assignment_expressionContext,0)


        def OPEN_BRACE(self):
            return self.getToken(CSharpParser.OPEN_BRACE, 0)

        def expression_list(self):
            return self.getTypedRuleContext(CSharpParser.Expression_listContext,0)


        def CLOSE_BRACE(self):
            return self.getToken(CSharpParser.CLOSE_BRACE, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_element_initializer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElement_initializer" ):
                listener.enterElement_initializer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElement_initializer" ):
                listener.exitElement_initializer(self)




    def element_initializer(self):

        localctx = CSharpParser.Element_initializerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_element_initializer)
        try:
            self.state = 1063
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [10, 11, 12, 14, 15, 16, 17, 18, 20, 21, 24, 25, 29, 30, 31, 32, 34, 35, 38, 42, 45, 48, 49, 51, 55, 58, 60, 61, 63, 64, 66, 67, 68, 69, 71, 75, 81, 83, 85, 86, 87, 88, 91, 94, 96, 98, 99, 100, 101, 102, 104, 106, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 129, 135, 136, 137, 140, 142, 143, 144, 151, 152, 171]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1058
                self.non_assignment_expression()
                pass
            elif token in [125]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1059
                self.match(CSharpParser.OPEN_BRACE)
                self.state = 1060
                self.expression_list()
                self.state = 1061
                self.match(CSharpParser.CLOSE_BRACE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Anonymous_object_initializerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_BRACE(self):
            return self.getToken(CSharpParser.OPEN_BRACE, 0)

        def CLOSE_BRACE(self):
            return self.getToken(CSharpParser.CLOSE_BRACE, 0)

        def member_declarator_list(self):
            return self.getTypedRuleContext(CSharpParser.Member_declarator_listContext,0)


        def COMMA(self):
            return self.getToken(CSharpParser.COMMA, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_anonymous_object_initializer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnonymous_object_initializer" ):
                listener.enterAnonymous_object_initializer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnonymous_object_initializer" ):
                listener.exitAnonymous_object_initializer(self)




    def anonymous_object_initializer(self):

        localctx = CSharpParser.Anonymous_object_initializerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_anonymous_object_initializer)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1065
            self.match(CSharpParser.OPEN_BRACE)
            self.state = 1070
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 10)) & ~0x3f) == 0 and ((1 << (_la - 10)) & 3417425939254529527) != 0) or ((((_la - 75)) & ~0x3f) == 0 and ((1 << (_la - 75)) & 19140129564736833) != 0):
                self.state = 1066
                self.member_declarator_list()
                self.state = 1068
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==132:
                    self.state = 1067
                    self.match(CSharpParser.COMMA)




            self.state = 1072
            self.match(CSharpParser.CLOSE_BRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Member_declarator_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def member_declarator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Member_declaratorContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Member_declaratorContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.COMMA)
            else:
                return self.getToken(CSharpParser.COMMA, i)

        def getRuleIndex(self):
            return CSharpParser.RULE_member_declarator_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMember_declarator_list" ):
                listener.enterMember_declarator_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMember_declarator_list" ):
                listener.exitMember_declarator_list(self)




    def member_declarator_list(self):

        localctx = CSharpParser.Member_declarator_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_member_declarator_list)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1074
            self.member_declarator()
            self.state = 1079
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,99,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1075
                    self.match(CSharpParser.COMMA)
                    self.state = 1076
                    self.member_declarator() 
                self.state = 1081
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,99,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Member_declaratorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def primary_expression(self):
            return self.getTypedRuleContext(CSharpParser.Primary_expressionContext,0)


        def identifier(self):
            return self.getTypedRuleContext(CSharpParser.IdentifierContext,0)


        def ASSIGNMENT(self):
            return self.getToken(CSharpParser.ASSIGNMENT, 0)

        def expression(self):
            return self.getTypedRuleContext(CSharpParser.ExpressionContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_member_declarator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMember_declarator" ):
                listener.enterMember_declarator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMember_declarator" ):
                listener.exitMember_declarator(self)




    def member_declarator(self):

        localctx = CSharpParser.Member_declaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_member_declarator)
        try:
            self.state = 1087
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,100,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1082
                self.primary_expression()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1083
                self.identifier()
                self.state = 1084
                self.match(CSharpParser.ASSIGNMENT)
                self.state = 1085
                self.expression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Unbound_type_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(CSharpParser.IdentifierContext,i)


        def DOUBLE_COLON(self):
            return self.getToken(CSharpParser.DOUBLE_COLON, 0)

        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.DOT)
            else:
                return self.getToken(CSharpParser.DOT, i)

        def generic_dimension_specifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Generic_dimension_specifierContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Generic_dimension_specifierContext,i)


        def getRuleIndex(self):
            return CSharpParser.RULE_unbound_type_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnbound_type_name" ):
                listener.enterUnbound_type_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnbound_type_name" ):
                listener.exitUnbound_type_name(self)




    def unbound_type_name(self):

        localctx = CSharpParser.Unbound_type_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_unbound_type_name)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1089
            self.identifier()
            self.state = 1098
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [130, 131, 146]:
                self.state = 1091
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==146:
                    self.state = 1090
                    self.generic_dimension_specifier()


                pass
            elif token in [149]:
                self.state = 1093
                self.match(CSharpParser.DOUBLE_COLON)
                self.state = 1094
                self.identifier()
                self.state = 1096
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==146:
                    self.state = 1095
                    self.generic_dimension_specifier()


                pass
            else:
                raise NoViableAltException(self)

            self.state = 1107
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==131:
                self.state = 1100
                self.match(CSharpParser.DOT)
                self.state = 1101
                self.identifier()
                self.state = 1103
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==146:
                    self.state = 1102
                    self.generic_dimension_specifier()


                self.state = 1109
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Generic_dimension_specifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LT(self):
            return self.getToken(CSharpParser.LT, 0)

        def GT(self):
            return self.getToken(CSharpParser.GT, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.COMMA)
            else:
                return self.getToken(CSharpParser.COMMA, i)

        def getRuleIndex(self):
            return CSharpParser.RULE_generic_dimension_specifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGeneric_dimension_specifier" ):
                listener.enterGeneric_dimension_specifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGeneric_dimension_specifier" ):
                listener.exitGeneric_dimension_specifier(self)




    def generic_dimension_specifier(self):

        localctx = CSharpParser.Generic_dimension_specifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_generic_dimension_specifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1110
            self.match(CSharpParser.LT)
            self.state = 1114
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==132:
                self.state = 1111
                self.match(CSharpParser.COMMA)
                self.state = 1116
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1117
            self.match(CSharpParser.GT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IsTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def base_type(self):
            return self.getTypedRuleContext(CSharpParser.Base_typeContext,0)


        def rank_specifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Rank_specifierContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Rank_specifierContext,i)


        def STAR(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.STAR)
            else:
                return self.getToken(CSharpParser.STAR, i)

        def INTERR(self):
            return self.getToken(CSharpParser.INTERR, 0)

        def isTypePatternArms(self):
            return self.getTypedRuleContext(CSharpParser.IsTypePatternArmsContext,0)


        def identifier(self):
            return self.getTypedRuleContext(CSharpParser.IdentifierContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_isType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIsType" ):
                listener.enterIsType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIsType" ):
                listener.exitIsType(self)




    def isType(self):

        localctx = CSharpParser.IsTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_isType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1119
            self.base_type()
            self.state = 1124
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==127 or _la==137:
                self.state = 1122
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [127]:
                    self.state = 1120
                    self.rank_specifier()
                    pass
                elif token in [137]:
                    self.state = 1121
                    self.match(CSharpParser.STAR)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1126
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1128
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,109,self._ctx)
            if la_ == 1:
                self.state = 1127
                self.match(CSharpParser.INTERR)


            self.state = 1131
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==125:
                self.state = 1130
                self.isTypePatternArms()


            self.state = 1134
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,111,self._ctx)
            if la_ == 1:
                self.state = 1133
                self.identifier()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IsTypePatternArmsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_BRACE(self):
            return self.getToken(CSharpParser.OPEN_BRACE, 0)

        def isTypePatternArm(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.IsTypePatternArmContext)
            else:
                return self.getTypedRuleContext(CSharpParser.IsTypePatternArmContext,i)


        def CLOSE_BRACE(self):
            return self.getToken(CSharpParser.CLOSE_BRACE, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.COMMA)
            else:
                return self.getToken(CSharpParser.COMMA, i)

        def getRuleIndex(self):
            return CSharpParser.RULE_isTypePatternArms

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIsTypePatternArms" ):
                listener.enterIsTypePatternArms(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIsTypePatternArms" ):
                listener.exitIsTypePatternArms(self)




    def isTypePatternArms(self):

        localctx = CSharpParser.IsTypePatternArmsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_isTypePatternArms)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1136
            self.match(CSharpParser.OPEN_BRACE)
            self.state = 1137
            self.isTypePatternArm()
            self.state = 1142
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==132:
                self.state = 1138
                self.match(CSharpParser.COMMA)
                self.state = 1139
                self.isTypePatternArm()
                self.state = 1144
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1145
            self.match(CSharpParser.CLOSE_BRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IsTypePatternArmContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(CSharpParser.IdentifierContext,0)


        def COLON(self):
            return self.getToken(CSharpParser.COLON, 0)

        def expression(self):
            return self.getTypedRuleContext(CSharpParser.ExpressionContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_isTypePatternArm

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIsTypePatternArm" ):
                listener.enterIsTypePatternArm(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIsTypePatternArm" ):
                listener.exitIsTypePatternArm(self)




    def isTypePatternArm(self):

        localctx = CSharpParser.IsTypePatternArmContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_isTypePatternArm)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1147
            self.identifier()
            self.state = 1148
            self.match(CSharpParser.COLON)
            self.state = 1149
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Lambda_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def anonymous_function_signature(self):
            return self.getTypedRuleContext(CSharpParser.Anonymous_function_signatureContext,0)


        def right_arrow(self):
            return self.getTypedRuleContext(CSharpParser.Right_arrowContext,0)


        def anonymous_function_body(self):
            return self.getTypedRuleContext(CSharpParser.Anonymous_function_bodyContext,0)


        def ASYNC(self):
            return self.getToken(CSharpParser.ASYNC, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_lambda_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLambda_expression" ):
                listener.enterLambda_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLambda_expression" ):
                listener.exitLambda_expression(self)




    def lambda_expression(self):

        localctx = CSharpParser.Lambda_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_lambda_expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1152
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,113,self._ctx)
            if la_ == 1:
                self.state = 1151
                self.match(CSharpParser.ASYNC)


            self.state = 1154
            self.anonymous_function_signature()
            self.state = 1155
            self.right_arrow()
            self.state = 1156
            self.anonymous_function_body()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Anonymous_function_signatureContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PARENS(self):
            return self.getToken(CSharpParser.OPEN_PARENS, 0)

        def CLOSE_PARENS(self):
            return self.getToken(CSharpParser.CLOSE_PARENS, 0)

        def explicit_anonymous_function_parameter_list(self):
            return self.getTypedRuleContext(CSharpParser.Explicit_anonymous_function_parameter_listContext,0)


        def implicit_anonymous_function_parameter_list(self):
            return self.getTypedRuleContext(CSharpParser.Implicit_anonymous_function_parameter_listContext,0)


        def identifier(self):
            return self.getTypedRuleContext(CSharpParser.IdentifierContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_anonymous_function_signature

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnonymous_function_signature" ):
                listener.enterAnonymous_function_signature(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnonymous_function_signature" ):
                listener.exitAnonymous_function_signature(self)




    def anonymous_function_signature(self):

        localctx = CSharpParser.Anonymous_function_signatureContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_anonymous_function_signature)
        try:
            self.state = 1169
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,114,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1158
                self.match(CSharpParser.OPEN_PARENS)
                self.state = 1159
                self.match(CSharpParser.CLOSE_PARENS)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1160
                self.match(CSharpParser.OPEN_PARENS)
                self.state = 1161
                self.explicit_anonymous_function_parameter_list()
                self.state = 1162
                self.match(CSharpParser.CLOSE_PARENS)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1164
                self.match(CSharpParser.OPEN_PARENS)
                self.state = 1165
                self.implicit_anonymous_function_parameter_list()
                self.state = 1166
                self.match(CSharpParser.CLOSE_PARENS)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1168
                self.identifier()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Explicit_anonymous_function_parameter_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def explicit_anonymous_function_parameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Explicit_anonymous_function_parameterContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Explicit_anonymous_function_parameterContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.COMMA)
            else:
                return self.getToken(CSharpParser.COMMA, i)

        def getRuleIndex(self):
            return CSharpParser.RULE_explicit_anonymous_function_parameter_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExplicit_anonymous_function_parameter_list" ):
                listener.enterExplicit_anonymous_function_parameter_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExplicit_anonymous_function_parameter_list" ):
                listener.exitExplicit_anonymous_function_parameter_list(self)




    def explicit_anonymous_function_parameter_list(self):

        localctx = CSharpParser.Explicit_anonymous_function_parameter_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_explicit_anonymous_function_parameter_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1171
            self.explicit_anonymous_function_parameter()
            self.state = 1176
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==132:
                self.state = 1172
                self.match(CSharpParser.COMMA)
                self.state = 1173
                self.explicit_anonymous_function_parameter()
                self.state = 1178
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Explicit_anonymous_function_parameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.refout = None # Token

        def type_(self):
            return self.getTypedRuleContext(CSharpParser.Type_Context,0)


        def identifier(self):
            return self.getTypedRuleContext(CSharpParser.IdentifierContext,0)


        def REF(self):
            return self.getToken(CSharpParser.REF, 0)

        def OUT(self):
            return self.getToken(CSharpParser.OUT, 0)

        def IN(self):
            return self.getToken(CSharpParser.IN, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_explicit_anonymous_function_parameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExplicit_anonymous_function_parameter" ):
                listener.enterExplicit_anonymous_function_parameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExplicit_anonymous_function_parameter" ):
                listener.exitExplicit_anonymous_function_parameter(self)




    def explicit_anonymous_function_parameter(self):

        localctx = CSharpParser.Explicit_anonymous_function_parameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_explicit_anonymous_function_parameter)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1180
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 54)) & ~0x3f) == 0 and ((1 << (_la - 54)) & 67371009) != 0):
                self.state = 1179
                localctx.refout = self._input.LT(1)
                _la = self._input.LA(1)
                if not(((((_la - 54)) & ~0x3f) == 0 and ((1 << (_la - 54)) & 67371009) != 0)):
                    localctx.refout = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 1182
            self.type_()
            self.state = 1183
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Implicit_anonymous_function_parameter_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(CSharpParser.IdentifierContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.COMMA)
            else:
                return self.getToken(CSharpParser.COMMA, i)

        def getRuleIndex(self):
            return CSharpParser.RULE_implicit_anonymous_function_parameter_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImplicit_anonymous_function_parameter_list" ):
                listener.enterImplicit_anonymous_function_parameter_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImplicit_anonymous_function_parameter_list" ):
                listener.exitImplicit_anonymous_function_parameter_list(self)




    def implicit_anonymous_function_parameter_list(self):

        localctx = CSharpParser.Implicit_anonymous_function_parameter_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_implicit_anonymous_function_parameter_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1185
            self.identifier()
            self.state = 1190
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==132:
                self.state = 1186
                self.match(CSharpParser.COMMA)
                self.state = 1187
                self.identifier()
                self.state = 1192
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Anonymous_function_bodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def throwable_expression(self):
            return self.getTypedRuleContext(CSharpParser.Throwable_expressionContext,0)


        def block(self):
            return self.getTypedRuleContext(CSharpParser.BlockContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_anonymous_function_body

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnonymous_function_body" ):
                listener.enterAnonymous_function_body(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnonymous_function_body" ):
                listener.exitAnonymous_function_body(self)




    def anonymous_function_body(self):

        localctx = CSharpParser.Anonymous_function_bodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_anonymous_function_body)
        try:
            self.state = 1195
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [10, 11, 12, 14, 15, 16, 17, 18, 20, 21, 24, 25, 29, 30, 31, 32, 34, 35, 38, 42, 45, 48, 49, 51, 55, 58, 60, 61, 63, 64, 66, 67, 68, 69, 71, 75, 80, 81, 83, 85, 86, 87, 88, 91, 94, 95, 96, 98, 99, 100, 101, 102, 104, 106, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 129, 135, 136, 137, 140, 142, 143, 144, 151, 152, 171]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1193
                self.throwable_expression()
                pass
            elif token in [125]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1194
                self.block()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Query_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def from_clause(self):
            return self.getTypedRuleContext(CSharpParser.From_clauseContext,0)


        def query_body(self):
            return self.getTypedRuleContext(CSharpParser.Query_bodyContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_query_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuery_expression" ):
                listener.enterQuery_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuery_expression" ):
                listener.exitQuery_expression(self)




    def query_expression(self):

        localctx = CSharpParser.Query_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_query_expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1197
            self.from_clause()
            self.state = 1198
            self.query_body()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class From_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FROM(self):
            return self.getToken(CSharpParser.FROM, 0)

        def identifier(self):
            return self.getTypedRuleContext(CSharpParser.IdentifierContext,0)


        def IN(self):
            return self.getToken(CSharpParser.IN, 0)

        def expression(self):
            return self.getTypedRuleContext(CSharpParser.ExpressionContext,0)


        def type_(self):
            return self.getTypedRuleContext(CSharpParser.Type_Context,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_from_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFrom_clause" ):
                listener.enterFrom_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFrom_clause" ):
                listener.exitFrom_clause(self)




    def from_clause(self):

        localctx = CSharpParser.From_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_from_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1200
            self.match(CSharpParser.FROM)
            self.state = 1202
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,119,self._ctx)
            if la_ == 1:
                self.state = 1201
                self.type_()


            self.state = 1204
            self.identifier()
            self.state = 1205
            self.match(CSharpParser.IN)
            self.state = 1206
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Query_bodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def select_or_group_clause(self):
            return self.getTypedRuleContext(CSharpParser.Select_or_group_clauseContext,0)


        def query_body_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Query_body_clauseContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Query_body_clauseContext,i)


        def query_continuation(self):
            return self.getTypedRuleContext(CSharpParser.Query_continuationContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_query_body

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuery_body" ):
                listener.enterQuery_body(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuery_body" ):
                listener.exitQuery_body(self)




    def query_body(self):

        localctx = CSharpParser.Query_bodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_query_body)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1211
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 48)) & ~0x3f) == 0 and ((1 << (_la - 48)) & -9223372036846374911) != 0):
                self.state = 1208
                self.query_body_clause()
                self.state = 1213
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1214
            self.select_or_group_clause()
            self.state = 1216
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,121,self._ctx)
            if la_ == 1:
                self.state = 1215
                self.query_continuation()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Query_body_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def from_clause(self):
            return self.getTypedRuleContext(CSharpParser.From_clauseContext,0)


        def let_clause(self):
            return self.getTypedRuleContext(CSharpParser.Let_clauseContext,0)


        def where_clause(self):
            return self.getTypedRuleContext(CSharpParser.Where_clauseContext,0)


        def combined_join_clause(self):
            return self.getTypedRuleContext(CSharpParser.Combined_join_clauseContext,0)


        def orderby_clause(self):
            return self.getTypedRuleContext(CSharpParser.Orderby_clauseContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_query_body_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuery_body_clause" ):
                listener.enterQuery_body_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuery_body_clause" ):
                listener.exitQuery_body_clause(self)




    def query_body_clause(self):

        localctx = CSharpParser.Query_body_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_query_body_clause)
        try:
            self.state = 1223
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [48]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1218
                self.from_clause()
                pass
            elif token in [61]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1219
                self.let_clause()
                pass
            elif token in [111]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1220
                self.where_clause()
                pass
            elif token in [60]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1221
                self.combined_join_clause()
                pass
            elif token in [71]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1222
                self.orderby_clause()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Let_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LET(self):
            return self.getToken(CSharpParser.LET, 0)

        def identifier(self):
            return self.getTypedRuleContext(CSharpParser.IdentifierContext,0)


        def ASSIGNMENT(self):
            return self.getToken(CSharpParser.ASSIGNMENT, 0)

        def expression(self):
            return self.getTypedRuleContext(CSharpParser.ExpressionContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_let_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLet_clause" ):
                listener.enterLet_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLet_clause" ):
                listener.exitLet_clause(self)




    def let_clause(self):

        localctx = CSharpParser.Let_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_let_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1225
            self.match(CSharpParser.LET)
            self.state = 1226
            self.identifier()
            self.state = 1227
            self.match(CSharpParser.ASSIGNMENT)
            self.state = 1228
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Where_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHERE(self):
            return self.getToken(CSharpParser.WHERE, 0)

        def expression(self):
            return self.getTypedRuleContext(CSharpParser.ExpressionContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_where_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhere_clause" ):
                listener.enterWhere_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhere_clause" ):
                listener.exitWhere_clause(self)




    def where_clause(self):

        localctx = CSharpParser.Where_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_where_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1230
            self.match(CSharpParser.WHERE)
            self.state = 1231
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Combined_join_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def JOIN(self):
            return self.getToken(CSharpParser.JOIN, 0)

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(CSharpParser.IdentifierContext,i)


        def IN(self):
            return self.getToken(CSharpParser.IN, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(CSharpParser.ExpressionContext,i)


        def ON(self):
            return self.getToken(CSharpParser.ON, 0)

        def EQUALS(self):
            return self.getToken(CSharpParser.EQUALS, 0)

        def type_(self):
            return self.getTypedRuleContext(CSharpParser.Type_Context,0)


        def INTO(self):
            return self.getToken(CSharpParser.INTO, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_combined_join_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCombined_join_clause" ):
                listener.enterCombined_join_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCombined_join_clause" ):
                listener.exitCombined_join_clause(self)




    def combined_join_clause(self):

        localctx = CSharpParser.Combined_join_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_combined_join_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1233
            self.match(CSharpParser.JOIN)
            self.state = 1235
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,123,self._ctx)
            if la_ == 1:
                self.state = 1234
                self.type_()


            self.state = 1237
            self.identifier()
            self.state = 1238
            self.match(CSharpParser.IN)
            self.state = 1239
            self.expression()
            self.state = 1240
            self.match(CSharpParser.ON)
            self.state = 1241
            self.expression()
            self.state = 1242
            self.match(CSharpParser.EQUALS)
            self.state = 1243
            self.expression()
            self.state = 1246
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==58:
                self.state = 1244
                self.match(CSharpParser.INTO)
                self.state = 1245
                self.identifier()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Orderby_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ORDERBY(self):
            return self.getToken(CSharpParser.ORDERBY, 0)

        def ordering(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.OrderingContext)
            else:
                return self.getTypedRuleContext(CSharpParser.OrderingContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.COMMA)
            else:
                return self.getToken(CSharpParser.COMMA, i)

        def getRuleIndex(self):
            return CSharpParser.RULE_orderby_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOrderby_clause" ):
                listener.enterOrderby_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOrderby_clause" ):
                listener.exitOrderby_clause(self)




    def orderby_clause(self):

        localctx = CSharpParser.Orderby_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_orderby_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1248
            self.match(CSharpParser.ORDERBY)
            self.state = 1249
            self.ordering()
            self.state = 1254
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==132:
                self.state = 1250
                self.match(CSharpParser.COMMA)
                self.state = 1251
                self.ordering()
                self.state = 1256
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OrderingContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.dir_ = None # Token

        def expression(self):
            return self.getTypedRuleContext(CSharpParser.ExpressionContext,0)


        def ASCENDING(self):
            return self.getToken(CSharpParser.ASCENDING, 0)

        def DESCENDING(self):
            return self.getToken(CSharpParser.DESCENDING, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_ordering

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOrdering" ):
                listener.enterOrdering(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOrdering" ):
                listener.exitOrdering(self)




    def ordering(self):

        localctx = CSharpParser.OrderingContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_ordering)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1257
            self.expression()
            self.state = 1259
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==14 or _la==32:
                self.state = 1258
                localctx.dir_ = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==14 or _la==32):
                    localctx.dir_ = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Select_or_group_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SELECT(self):
            return self.getToken(CSharpParser.SELECT, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(CSharpParser.ExpressionContext,i)


        def GROUP(self):
            return self.getToken(CSharpParser.GROUP, 0)

        def BY(self):
            return self.getToken(CSharpParser.BY, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_select_or_group_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelect_or_group_clause" ):
                listener.enterSelect_or_group_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelect_or_group_clause" ):
                listener.exitSelect_or_group_clause(self)




    def select_or_group_clause(self):

        localctx = CSharpParser.Select_or_group_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_select_or_group_clause)
        try:
            self.state = 1268
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [85]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1261
                self.match(CSharpParser.SELECT)
                self.state = 1262
                self.expression()
                pass
            elif token in [51]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1263
                self.match(CSharpParser.GROUP)
                self.state = 1264
                self.expression()
                self.state = 1265
                self.match(CSharpParser.BY)
                self.state = 1266
                self.expression()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Query_continuationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INTO(self):
            return self.getToken(CSharpParser.INTO, 0)

        def identifier(self):
            return self.getTypedRuleContext(CSharpParser.IdentifierContext,0)


        def query_body(self):
            return self.getTypedRuleContext(CSharpParser.Query_bodyContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_query_continuation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuery_continuation" ):
                listener.enterQuery_continuation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuery_continuation" ):
                listener.exitQuery_continuation(self)




    def query_continuation(self):

        localctx = CSharpParser.Query_continuationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_query_continuation)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1270
            self.match(CSharpParser.INTO)
            self.state = 1271
            self.identifier()
            self.state = 1272
            self.query_body()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def labeled_Statement(self):
            return self.getTypedRuleContext(CSharpParser.Labeled_StatementContext,0)


        def declarationStatement(self):
            return self.getTypedRuleContext(CSharpParser.DeclarationStatementContext,0)


        def embedded_statement(self):
            return self.getTypedRuleContext(CSharpParser.Embedded_statementContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatement" ):
                listener.enterStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatement" ):
                listener.exitStatement(self)




    def statement(self):

        localctx = CSharpParser.StatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_statement)
        try:
            self.state = 1277
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,128,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1274
                self.labeled_Statement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1275
                self.declarationStatement()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1276
                self.embedded_statement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeclarationStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def local_variable_declaration(self):
            return self.getTypedRuleContext(CSharpParser.Local_variable_declarationContext,0)


        def SEMICOLON(self):
            return self.getToken(CSharpParser.SEMICOLON, 0)

        def local_constant_declaration(self):
            return self.getTypedRuleContext(CSharpParser.Local_constant_declarationContext,0)


        def local_function_declaration(self):
            return self.getTypedRuleContext(CSharpParser.Local_function_declarationContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_declarationStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclarationStatement" ):
                listener.enterDeclarationStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclarationStatement" ):
                listener.exitDeclarationStatement(self)




    def declarationStatement(self):

        localctx = CSharpParser.DeclarationStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_declarationStatement)
        try:
            self.state = 1286
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,129,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1279
                self.local_variable_declaration()
                self.state = 1280
                self.match(CSharpParser.SEMICOLON)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1282
                self.local_constant_declaration()
                self.state = 1283
                self.match(CSharpParser.SEMICOLON)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1285
                self.local_function_declaration()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Local_function_declarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def local_function_header(self):
            return self.getTypedRuleContext(CSharpParser.Local_function_headerContext,0)


        def local_function_body(self):
            return self.getTypedRuleContext(CSharpParser.Local_function_bodyContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_local_function_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLocal_function_declaration" ):
                listener.enterLocal_function_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLocal_function_declaration" ):
                listener.exitLocal_function_declaration(self)




    def local_function_declaration(self):

        localctx = CSharpParser.Local_function_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_local_function_declaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1288
            self.local_function_header()
            self.state = 1289
            self.local_function_body()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Local_function_headerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def return_type(self):
            return self.getTypedRuleContext(CSharpParser.Return_typeContext,0)


        def identifier(self):
            return self.getTypedRuleContext(CSharpParser.IdentifierContext,0)


        def OPEN_PARENS(self):
            return self.getToken(CSharpParser.OPEN_PARENS, 0)

        def CLOSE_PARENS(self):
            return self.getToken(CSharpParser.CLOSE_PARENS, 0)

        def local_function_modifiers(self):
            return self.getTypedRuleContext(CSharpParser.Local_function_modifiersContext,0)


        def type_parameter_list(self):
            return self.getTypedRuleContext(CSharpParser.Type_parameter_listContext,0)


        def formal_parameter_list(self):
            return self.getTypedRuleContext(CSharpParser.Formal_parameter_listContext,0)


        def type_parameter_constraints_clauses(self):
            return self.getTypedRuleContext(CSharpParser.Type_parameter_constraints_clausesContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_local_function_header

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLocal_function_header" ):
                listener.enterLocal_function_header(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLocal_function_header" ):
                listener.exitLocal_function_header(self)




    def local_function_header(self):

        localctx = CSharpParser.Local_function_headerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_local_function_header)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1292
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,130,self._ctx)
            if la_ == 1:
                self.state = 1291
                self.local_function_modifiers()


            self.state = 1294
            self.return_type()
            self.state = 1295
            self.identifier()
            self.state = 1297
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==146:
                self.state = 1296
                self.type_parameter_list()


            self.state = 1299
            self.match(CSharpParser.OPEN_PARENS)
            self.state = 1301
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 10)) & ~0x3f) == 0 and ((1 << (_la - 10)) & 7812956763456032119) != 0) or ((((_la - 74)) & ~0x3f) == 0 and ((1 << (_la - 74)) & 45037874618448579) != 0):
                self.state = 1300
                self.formal_parameter_list()


            self.state = 1303
            self.match(CSharpParser.CLOSE_PARENS)
            self.state = 1305
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==111:
                self.state = 1304
                self.type_parameter_constraints_clauses()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Local_function_modifiersContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ASYNC(self):
            return self.getToken(CSharpParser.ASYNC, 0)

        def UNSAFE(self):
            return self.getToken(CSharpParser.UNSAFE, 0)

        def STATIC(self):
            return self.getToken(CSharpParser.STATIC, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_local_function_modifiers

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLocal_function_modifiers" ):
                listener.enterLocal_function_modifiers(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLocal_function_modifiers" ):
                listener.exitLocal_function_modifiers(self)




    def local_function_modifiers(self):

        localctx = CSharpParser.Local_function_modifiersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_local_function_modifiers)
        self._la = 0 # Token type
        try:
            self.state = 1313
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [15, 103]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1307
                _la = self._input.LA(1)
                if not(_la==15 or _la==103):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1309
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==90:
                    self.state = 1308
                    self.match(CSharpParser.STATIC)


                pass
            elif token in [90]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1311
                self.match(CSharpParser.STATIC)
                self.state = 1312
                _la = self._input.LA(1)
                if not(_la==15 or _la==103):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Local_function_bodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def block(self):
            return self.getTypedRuleContext(CSharpParser.BlockContext,0)


        def right_arrow(self):
            return self.getTypedRuleContext(CSharpParser.Right_arrowContext,0)


        def throwable_expression(self):
            return self.getTypedRuleContext(CSharpParser.Throwable_expressionContext,0)


        def SEMICOLON(self):
            return self.getToken(CSharpParser.SEMICOLON, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_local_function_body

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLocal_function_body" ):
                listener.enterLocal_function_body(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLocal_function_body" ):
                listener.exitLocal_function_body(self)




    def local_function_body(self):

        localctx = CSharpParser.Local_function_bodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_local_function_body)
        try:
            self.state = 1320
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [125]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1315
                self.block()
                pass
            elif token in [145]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1316
                self.right_arrow()
                self.state = 1317
                self.throwable_expression()
                self.state = 1318
                self.match(CSharpParser.SEMICOLON)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Labeled_StatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(CSharpParser.IdentifierContext,0)


        def COLON(self):
            return self.getToken(CSharpParser.COLON, 0)

        def statement(self):
            return self.getTypedRuleContext(CSharpParser.StatementContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_labeled_Statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLabeled_Statement" ):
                listener.enterLabeled_Statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLabeled_Statement" ):
                listener.exitLabeled_Statement(self)




    def labeled_Statement(self):

        localctx = CSharpParser.Labeled_StatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_labeled_Statement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1322
            self.identifier()
            self.state = 1323
            self.match(CSharpParser.COLON)
            self.state = 1324
            self.statement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Embedded_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def block(self):
            return self.getTypedRuleContext(CSharpParser.BlockContext,0)


        def simple_embedded_statement(self):
            return self.getTypedRuleContext(CSharpParser.Simple_embedded_statementContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_embedded_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEmbedded_statement" ):
                listener.enterEmbedded_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEmbedded_statement" ):
                listener.exitEmbedded_statement(self)




    def embedded_statement(self):

        localctx = CSharpParser.Embedded_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_embedded_statement)
        try:
            self.state = 1328
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [125]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1326
                self.block()
                pass
            elif token in [10, 11, 12, 14, 15, 16, 17, 18, 19, 20, 21, 24, 25, 28, 29, 30, 31, 32, 33, 34, 35, 38, 42, 44, 45, 46, 47, 48, 49, 50, 51, 52, 55, 58, 60, 61, 62, 63, 64, 66, 67, 68, 69, 71, 75, 80, 81, 82, 83, 85, 86, 87, 88, 91, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 129, 134, 135, 136, 137, 140, 142, 143, 144, 151, 152, 171]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1327
                self.simple_embedded_statement()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Simple_embedded_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CSharpParser.RULE_simple_embedded_statement

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class TryStatementContext(Simple_embedded_statementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CSharpParser.Simple_embedded_statementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def TRY(self):
            return self.getToken(CSharpParser.TRY, 0)
        def block(self):
            return self.getTypedRuleContext(CSharpParser.BlockContext,0)

        def catch_clauses(self):
            return self.getTypedRuleContext(CSharpParser.Catch_clausesContext,0)

        def finally_clause(self):
            return self.getTypedRuleContext(CSharpParser.Finally_clauseContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTryStatement" ):
                listener.enterTryStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTryStatement" ):
                listener.exitTryStatement(self)


    class CheckedStatementContext(Simple_embedded_statementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CSharpParser.Simple_embedded_statementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CHECKED(self):
            return self.getToken(CSharpParser.CHECKED, 0)
        def block(self):
            return self.getTypedRuleContext(CSharpParser.BlockContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCheckedStatement" ):
                listener.enterCheckedStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCheckedStatement" ):
                listener.exitCheckedStatement(self)


    class ThrowStatementContext(Simple_embedded_statementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CSharpParser.Simple_embedded_statementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def THROW(self):
            return self.getToken(CSharpParser.THROW, 0)
        def SEMICOLON(self):
            return self.getToken(CSharpParser.SEMICOLON, 0)
        def expression(self):
            return self.getTypedRuleContext(CSharpParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterThrowStatement" ):
                listener.enterThrowStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitThrowStatement" ):
                listener.exitThrowStatement(self)


    class TheEmptyStatementContext(Simple_embedded_statementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CSharpParser.Simple_embedded_statementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SEMICOLON(self):
            return self.getToken(CSharpParser.SEMICOLON, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTheEmptyStatement" ):
                listener.enterTheEmptyStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTheEmptyStatement" ):
                listener.exitTheEmptyStatement(self)


    class UnsafeStatementContext(Simple_embedded_statementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CSharpParser.Simple_embedded_statementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def UNSAFE(self):
            return self.getToken(CSharpParser.UNSAFE, 0)
        def block(self):
            return self.getTypedRuleContext(CSharpParser.BlockContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnsafeStatement" ):
                listener.enterUnsafeStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnsafeStatement" ):
                listener.exitUnsafeStatement(self)


    class ForStatementContext(Simple_embedded_statementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CSharpParser.Simple_embedded_statementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def FOR(self):
            return self.getToken(CSharpParser.FOR, 0)
        def OPEN_PARENS(self):
            return self.getToken(CSharpParser.OPEN_PARENS, 0)
        def SEMICOLON(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.SEMICOLON)
            else:
                return self.getToken(CSharpParser.SEMICOLON, i)
        def CLOSE_PARENS(self):
            return self.getToken(CSharpParser.CLOSE_PARENS, 0)
        def embedded_statement(self):
            return self.getTypedRuleContext(CSharpParser.Embedded_statementContext,0)

        def for_initializer(self):
            return self.getTypedRuleContext(CSharpParser.For_initializerContext,0)

        def expression(self):
            return self.getTypedRuleContext(CSharpParser.ExpressionContext,0)

        def for_iterator(self):
            return self.getTypedRuleContext(CSharpParser.For_iteratorContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForStatement" ):
                listener.enterForStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForStatement" ):
                listener.exitForStatement(self)


    class BreakStatementContext(Simple_embedded_statementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CSharpParser.Simple_embedded_statementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def BREAK(self):
            return self.getToken(CSharpParser.BREAK, 0)
        def SEMICOLON(self):
            return self.getToken(CSharpParser.SEMICOLON, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBreakStatement" ):
                listener.enterBreakStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBreakStatement" ):
                listener.exitBreakStatement(self)


    class IfStatementContext(Simple_embedded_statementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CSharpParser.Simple_embedded_statementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def IF(self):
            return self.getToken(CSharpParser.IF, 0)
        def OPEN_PARENS(self):
            return self.getToken(CSharpParser.OPEN_PARENS, 0)
        def expression(self):
            return self.getTypedRuleContext(CSharpParser.ExpressionContext,0)

        def CLOSE_PARENS(self):
            return self.getToken(CSharpParser.CLOSE_PARENS, 0)
        def if_body(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.If_bodyContext)
            else:
                return self.getTypedRuleContext(CSharpParser.If_bodyContext,i)

        def ELSE(self):
            return self.getToken(CSharpParser.ELSE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIfStatement" ):
                listener.enterIfStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIfStatement" ):
                listener.exitIfStatement(self)


    class ReturnStatementContext(Simple_embedded_statementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CSharpParser.Simple_embedded_statementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def RETURN(self):
            return self.getToken(CSharpParser.RETURN, 0)
        def SEMICOLON(self):
            return self.getToken(CSharpParser.SEMICOLON, 0)
        def expression(self):
            return self.getTypedRuleContext(CSharpParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReturnStatement" ):
                listener.enterReturnStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReturnStatement" ):
                listener.exitReturnStatement(self)


    class GotoStatementContext(Simple_embedded_statementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CSharpParser.Simple_embedded_statementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def GOTO(self):
            return self.getToken(CSharpParser.GOTO, 0)
        def SEMICOLON(self):
            return self.getToken(CSharpParser.SEMICOLON, 0)
        def identifier(self):
            return self.getTypedRuleContext(CSharpParser.IdentifierContext,0)

        def CASE(self):
            return self.getToken(CSharpParser.CASE, 0)
        def expression(self):
            return self.getTypedRuleContext(CSharpParser.ExpressionContext,0)

        def DEFAULT(self):
            return self.getToken(CSharpParser.DEFAULT, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGotoStatement" ):
                listener.enterGotoStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGotoStatement" ):
                listener.exitGotoStatement(self)


    class SwitchStatementContext(Simple_embedded_statementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CSharpParser.Simple_embedded_statementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SWITCH(self):
            return self.getToken(CSharpParser.SWITCH, 0)
        def OPEN_PARENS(self):
            return self.getToken(CSharpParser.OPEN_PARENS, 0)
        def expression(self):
            return self.getTypedRuleContext(CSharpParser.ExpressionContext,0)

        def CLOSE_PARENS(self):
            return self.getToken(CSharpParser.CLOSE_PARENS, 0)
        def OPEN_BRACE(self):
            return self.getToken(CSharpParser.OPEN_BRACE, 0)
        def CLOSE_BRACE(self):
            return self.getToken(CSharpParser.CLOSE_BRACE, 0)
        def switch_section(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Switch_sectionContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Switch_sectionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSwitchStatement" ):
                listener.enterSwitchStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSwitchStatement" ):
                listener.exitSwitchStatement(self)


    class FixedStatementContext(Simple_embedded_statementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CSharpParser.Simple_embedded_statementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def FIXED(self):
            return self.getToken(CSharpParser.FIXED, 0)
        def OPEN_PARENS(self):
            return self.getToken(CSharpParser.OPEN_PARENS, 0)
        def pointer_type(self):
            return self.getTypedRuleContext(CSharpParser.Pointer_typeContext,0)

        def fixed_pointer_declarators(self):
            return self.getTypedRuleContext(CSharpParser.Fixed_pointer_declaratorsContext,0)

        def CLOSE_PARENS(self):
            return self.getToken(CSharpParser.CLOSE_PARENS, 0)
        def embedded_statement(self):
            return self.getTypedRuleContext(CSharpParser.Embedded_statementContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFixedStatement" ):
                listener.enterFixedStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFixedStatement" ):
                listener.exitFixedStatement(self)


    class WhileStatementContext(Simple_embedded_statementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CSharpParser.Simple_embedded_statementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def WHILE(self):
            return self.getToken(CSharpParser.WHILE, 0)
        def OPEN_PARENS(self):
            return self.getToken(CSharpParser.OPEN_PARENS, 0)
        def expression(self):
            return self.getTypedRuleContext(CSharpParser.ExpressionContext,0)

        def CLOSE_PARENS(self):
            return self.getToken(CSharpParser.CLOSE_PARENS, 0)
        def embedded_statement(self):
            return self.getTypedRuleContext(CSharpParser.Embedded_statementContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhileStatement" ):
                listener.enterWhileStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhileStatement" ):
                listener.exitWhileStatement(self)


    class DoStatementContext(Simple_embedded_statementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CSharpParser.Simple_embedded_statementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DO(self):
            return self.getToken(CSharpParser.DO, 0)
        def embedded_statement(self):
            return self.getTypedRuleContext(CSharpParser.Embedded_statementContext,0)

        def WHILE(self):
            return self.getToken(CSharpParser.WHILE, 0)
        def OPEN_PARENS(self):
            return self.getToken(CSharpParser.OPEN_PARENS, 0)
        def expression(self):
            return self.getTypedRuleContext(CSharpParser.ExpressionContext,0)

        def CLOSE_PARENS(self):
            return self.getToken(CSharpParser.CLOSE_PARENS, 0)
        def SEMICOLON(self):
            return self.getToken(CSharpParser.SEMICOLON, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDoStatement" ):
                listener.enterDoStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDoStatement" ):
                listener.exitDoStatement(self)


    class ForeachStatementContext(Simple_embedded_statementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CSharpParser.Simple_embedded_statementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def FOREACH(self):
            return self.getToken(CSharpParser.FOREACH, 0)
        def OPEN_PARENS(self):
            return self.getToken(CSharpParser.OPEN_PARENS, 0)
        def local_variable_type(self):
            return self.getTypedRuleContext(CSharpParser.Local_variable_typeContext,0)

        def IN(self):
            return self.getToken(CSharpParser.IN, 0)
        def expression(self):
            return self.getTypedRuleContext(CSharpParser.ExpressionContext,0)

        def CLOSE_PARENS(self):
            return self.getToken(CSharpParser.CLOSE_PARENS, 0)
        def embedded_statement(self):
            return self.getTypedRuleContext(CSharpParser.Embedded_statementContext,0)

        def identifier(self):
            return self.getTypedRuleContext(CSharpParser.IdentifierContext,0)

        def deconstruction_element(self):
            return self.getTypedRuleContext(CSharpParser.Deconstruction_elementContext,0)

        def AWAIT(self):
            return self.getToken(CSharpParser.AWAIT, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForeachStatement" ):
                listener.enterForeachStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForeachStatement" ):
                listener.exitForeachStatement(self)


    class UncheckedStatementContext(Simple_embedded_statementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CSharpParser.Simple_embedded_statementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def UNCHECKED(self):
            return self.getToken(CSharpParser.UNCHECKED, 0)
        def block(self):
            return self.getTypedRuleContext(CSharpParser.BlockContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUncheckedStatement" ):
                listener.enterUncheckedStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUncheckedStatement" ):
                listener.exitUncheckedStatement(self)


    class ExpressionStatementContext(Simple_embedded_statementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CSharpParser.Simple_embedded_statementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self):
            return self.getTypedRuleContext(CSharpParser.ExpressionContext,0)

        def SEMICOLON(self):
            return self.getToken(CSharpParser.SEMICOLON, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpressionStatement" ):
                listener.enterExpressionStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpressionStatement" ):
                listener.exitExpressionStatement(self)


    class ContinueStatementContext(Simple_embedded_statementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CSharpParser.Simple_embedded_statementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CONTINUE(self):
            return self.getToken(CSharpParser.CONTINUE, 0)
        def SEMICOLON(self):
            return self.getToken(CSharpParser.SEMICOLON, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterContinueStatement" ):
                listener.enterContinueStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitContinueStatement" ):
                listener.exitContinueStatement(self)


    class UsingStatementContext(Simple_embedded_statementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CSharpParser.Simple_embedded_statementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def USING(self):
            return self.getToken(CSharpParser.USING, 0)
        def OPEN_PARENS(self):
            return self.getToken(CSharpParser.OPEN_PARENS, 0)
        def resource_acquisition(self):
            return self.getTypedRuleContext(CSharpParser.Resource_acquisitionContext,0)

        def CLOSE_PARENS(self):
            return self.getToken(CSharpParser.CLOSE_PARENS, 0)
        def embedded_statement(self):
            return self.getTypedRuleContext(CSharpParser.Embedded_statementContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUsingStatement" ):
                listener.enterUsingStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUsingStatement" ):
                listener.exitUsingStatement(self)


    class LockStatementContext(Simple_embedded_statementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CSharpParser.Simple_embedded_statementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LOCK(self):
            return self.getToken(CSharpParser.LOCK, 0)
        def OPEN_PARENS(self):
            return self.getToken(CSharpParser.OPEN_PARENS, 0)
        def expression(self):
            return self.getTypedRuleContext(CSharpParser.ExpressionContext,0)

        def CLOSE_PARENS(self):
            return self.getToken(CSharpParser.CLOSE_PARENS, 0)
        def embedded_statement(self):
            return self.getTypedRuleContext(CSharpParser.Embedded_statementContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLockStatement" ):
                listener.enterLockStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLockStatement" ):
                listener.exitLockStatement(self)


    class YieldStatementContext(Simple_embedded_statementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CSharpParser.Simple_embedded_statementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def YIELD(self):
            return self.getToken(CSharpParser.YIELD, 0)
        def SEMICOLON(self):
            return self.getToken(CSharpParser.SEMICOLON, 0)
        def RETURN(self):
            return self.getToken(CSharpParser.RETURN, 0)
        def expression(self):
            return self.getTypedRuleContext(CSharpParser.ExpressionContext,0)

        def BREAK(self):
            return self.getToken(CSharpParser.BREAK, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterYieldStatement" ):
                listener.enterYieldStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitYieldStatement" ):
                listener.exitYieldStatement(self)



    def simple_embedded_statement(self):

        localctx = CSharpParser.Simple_embedded_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_simple_embedded_statement)
        self._la = 0 # Token type
        try:
            self.state = 1463
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,151,self._ctx)
            if la_ == 1:
                localctx = CSharpParser.TheEmptyStatementContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1330
                self.match(CSharpParser.SEMICOLON)
                pass

            elif la_ == 2:
                localctx = CSharpParser.ExpressionStatementContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1331
                self.expression()
                self.state = 1332
                self.match(CSharpParser.SEMICOLON)
                pass

            elif la_ == 3:
                localctx = CSharpParser.IfStatementContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 1334
                self.match(CSharpParser.IF)
                self.state = 1335
                self.match(CSharpParser.OPEN_PARENS)
                self.state = 1336
                self.expression()
                self.state = 1337
                self.match(CSharpParser.CLOSE_PARENS)
                self.state = 1338
                self.if_body()
                self.state = 1341
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,138,self._ctx)
                if la_ == 1:
                    self.state = 1339
                    self.match(CSharpParser.ELSE)
                    self.state = 1340
                    self.if_body()


                pass

            elif la_ == 4:
                localctx = CSharpParser.SwitchStatementContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 1343
                self.match(CSharpParser.SWITCH)
                self.state = 1344
                self.match(CSharpParser.OPEN_PARENS)
                self.state = 1345
                self.expression()
                self.state = 1346
                self.match(CSharpParser.CLOSE_PARENS)
                self.state = 1347
                self.match(CSharpParser.OPEN_BRACE)
                self.state = 1351
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==22 or _la==30:
                    self.state = 1348
                    self.switch_section()
                    self.state = 1353
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1354
                self.match(CSharpParser.CLOSE_BRACE)
                pass

            elif la_ == 5:
                localctx = CSharpParser.WhileStatementContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 1356
                self.match(CSharpParser.WHILE)
                self.state = 1357
                self.match(CSharpParser.OPEN_PARENS)
                self.state = 1358
                self.expression()
                self.state = 1359
                self.match(CSharpParser.CLOSE_PARENS)
                self.state = 1360
                self.embedded_statement()
                pass

            elif la_ == 6:
                localctx = CSharpParser.DoStatementContext(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 1362
                self.match(CSharpParser.DO)
                self.state = 1363
                self.embedded_statement()
                self.state = 1364
                self.match(CSharpParser.WHILE)
                self.state = 1365
                self.match(CSharpParser.OPEN_PARENS)
                self.state = 1366
                self.expression()
                self.state = 1367
                self.match(CSharpParser.CLOSE_PARENS)
                self.state = 1368
                self.match(CSharpParser.SEMICOLON)
                pass

            elif la_ == 7:
                localctx = CSharpParser.ForStatementContext(self, localctx)
                self.enterOuterAlt(localctx, 7)
                self.state = 1370
                self.match(CSharpParser.FOR)
                self.state = 1371
                self.match(CSharpParser.OPEN_PARENS)
                self.state = 1373
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -5437194615990526976) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 2305516992371296445) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & 4398059153857) != 0):
                    self.state = 1372
                    self.for_initializer()


                self.state = 1375
                self.match(CSharpParser.SEMICOLON)
                self.state = 1377
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -5437212208176571392) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 2305497201161996477) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & 4398059153857) != 0):
                    self.state = 1376
                    self.expression()


                self.state = 1379
                self.match(CSharpParser.SEMICOLON)
                self.state = 1381
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -5437212208176571392) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 2305497201161996477) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & 4398059153857) != 0):
                    self.state = 1380
                    self.for_iterator()


                self.state = 1383
                self.match(CSharpParser.CLOSE_PARENS)
                self.state = 1384
                self.embedded_statement()
                pass

            elif la_ == 8:
                localctx = CSharpParser.ForeachStatementContext(self, localctx)
                self.enterOuterAlt(localctx, 8)
                self.state = 1386
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==16:
                    self.state = 1385
                    self.match(CSharpParser.AWAIT)


                self.state = 1388
                self.match(CSharpParser.FOREACH)
                self.state = 1389
                self.match(CSharpParser.OPEN_PARENS)
                self.state = 1390
                self.local_variable_type()
                self.state = 1393
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,144,self._ctx)
                if la_ == 1:
                    self.state = 1391
                    self.identifier()
                    pass

                elif la_ == 2:
                    self.state = 1392
                    self.deconstruction_element()
                    pass


                self.state = 1395
                self.match(CSharpParser.IN)
                self.state = 1396
                self.expression()
                self.state = 1397
                self.match(CSharpParser.CLOSE_PARENS)
                self.state = 1398
                self.embedded_statement()
                pass

            elif la_ == 9:
                localctx = CSharpParser.BreakStatementContext(self, localctx)
                self.enterOuterAlt(localctx, 9)
                self.state = 1400
                self.match(CSharpParser.BREAK)
                self.state = 1401
                self.match(CSharpParser.SEMICOLON)
                pass

            elif la_ == 10:
                localctx = CSharpParser.ContinueStatementContext(self, localctx)
                self.enterOuterAlt(localctx, 10)
                self.state = 1402
                self.match(CSharpParser.CONTINUE)
                self.state = 1403
                self.match(CSharpParser.SEMICOLON)
                pass

            elif la_ == 11:
                localctx = CSharpParser.GotoStatementContext(self, localctx)
                self.enterOuterAlt(localctx, 11)
                self.state = 1404
                self.match(CSharpParser.GOTO)
                self.state = 1409
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [10, 11, 12, 14, 15, 16, 20, 32, 35, 38, 48, 49, 51, 58, 60, 61, 64, 69, 71, 75, 81, 85, 86, 102, 106, 110, 111, 113, 114]:
                    self.state = 1405
                    self.identifier()
                    pass
                elif token in [22]:
                    self.state = 1406
                    self.match(CSharpParser.CASE)
                    self.state = 1407
                    self.expression()
                    pass
                elif token in [30]:
                    self.state = 1408
                    self.match(CSharpParser.DEFAULT)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1411
                self.match(CSharpParser.SEMICOLON)
                pass

            elif la_ == 12:
                localctx = CSharpParser.ReturnStatementContext(self, localctx)
                self.enterOuterAlt(localctx, 12)
                self.state = 1412
                self.match(CSharpParser.RETURN)
                self.state = 1414
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -5437212208176571392) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 2305497201161996477) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & 4398059153857) != 0):
                    self.state = 1413
                    self.expression()


                self.state = 1416
                self.match(CSharpParser.SEMICOLON)
                pass

            elif la_ == 13:
                localctx = CSharpParser.ThrowStatementContext(self, localctx)
                self.enterOuterAlt(localctx, 13)
                self.state = 1417
                self.match(CSharpParser.THROW)
                self.state = 1419
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -5437212208176571392) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 2305497201161996477) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & 4398059153857) != 0):
                    self.state = 1418
                    self.expression()


                self.state = 1421
                self.match(CSharpParser.SEMICOLON)
                pass

            elif la_ == 14:
                localctx = CSharpParser.TryStatementContext(self, localctx)
                self.enterOuterAlt(localctx, 14)
                self.state = 1422
                self.match(CSharpParser.TRY)
                self.state = 1423
                self.block()
                self.state = 1429
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [23]:
                    self.state = 1424
                    self.catch_clauses()
                    self.state = 1426
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==43:
                        self.state = 1425
                        self.finally_clause()


                    pass
                elif token in [43]:
                    self.state = 1428
                    self.finally_clause()
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 15:
                localctx = CSharpParser.CheckedStatementContext(self, localctx)
                self.enterOuterAlt(localctx, 15)
                self.state = 1431
                self.match(CSharpParser.CHECKED)
                self.state = 1432
                self.block()
                pass

            elif la_ == 16:
                localctx = CSharpParser.UncheckedStatementContext(self, localctx)
                self.enterOuterAlt(localctx, 16)
                self.state = 1433
                self.match(CSharpParser.UNCHECKED)
                self.state = 1434
                self.block()
                pass

            elif la_ == 17:
                localctx = CSharpParser.LockStatementContext(self, localctx)
                self.enterOuterAlt(localctx, 17)
                self.state = 1435
                self.match(CSharpParser.LOCK)
                self.state = 1436
                self.match(CSharpParser.OPEN_PARENS)
                self.state = 1437
                self.expression()
                self.state = 1438
                self.match(CSharpParser.CLOSE_PARENS)
                self.state = 1439
                self.embedded_statement()
                pass

            elif la_ == 18:
                localctx = CSharpParser.UsingStatementContext(self, localctx)
                self.enterOuterAlt(localctx, 18)
                self.state = 1441
                self.match(CSharpParser.USING)
                self.state = 1442
                self.match(CSharpParser.OPEN_PARENS)
                self.state = 1443
                self.resource_acquisition()
                self.state = 1444
                self.match(CSharpParser.CLOSE_PARENS)
                self.state = 1445
                self.embedded_statement()
                pass

            elif la_ == 19:
                localctx = CSharpParser.YieldStatementContext(self, localctx)
                self.enterOuterAlt(localctx, 19)
                self.state = 1447
                self.match(CSharpParser.YIELD)
                self.state = 1451
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [82]:
                    self.state = 1448
                    self.match(CSharpParser.RETURN)
                    self.state = 1449
                    self.expression()
                    pass
                elif token in [19]:
                    self.state = 1450
                    self.match(CSharpParser.BREAK)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1453
                self.match(CSharpParser.SEMICOLON)
                pass

            elif la_ == 20:
                localctx = CSharpParser.UnsafeStatementContext(self, localctx)
                self.enterOuterAlt(localctx, 20)
                self.state = 1454
                self.match(CSharpParser.UNSAFE)
                self.state = 1455
                self.block()
                pass

            elif la_ == 21:
                localctx = CSharpParser.FixedStatementContext(self, localctx)
                self.enterOuterAlt(localctx, 21)
                self.state = 1456
                self.match(CSharpParser.FIXED)
                self.state = 1457
                self.match(CSharpParser.OPEN_PARENS)
                self.state = 1458
                self.pointer_type()
                self.state = 1459
                self.fixed_pointer_declarators()
                self.state = 1460
                self.match(CSharpParser.CLOSE_PARENS)
                self.state = 1461
                self.embedded_statement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BlockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_BRACE(self):
            return self.getToken(CSharpParser.OPEN_BRACE, 0)

        def CLOSE_BRACE(self):
            return self.getToken(CSharpParser.CLOSE_BRACE, 0)

        def statement_list(self):
            return self.getTypedRuleContext(CSharpParser.Statement_listContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_block

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBlock" ):
                listener.enterBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBlock" ):
                listener.exitBlock(self)




    def block(self):

        localctx = CSharpParser.BlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_block)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1465
            self.match(CSharpParser.OPEN_BRACE)
            self.state = 1467
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & -819667982803280896) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 4611642037659175101) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & 4398059153889) != 0):
                self.state = 1466
                self.statement_list()


            self.state = 1469
            self.match(CSharpParser.CLOSE_BRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Local_variable_declarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def local_variable_type(self):
            return self.getTypedRuleContext(CSharpParser.Local_variable_typeContext,0)


        def local_variable_declarator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Local_variable_declaratorContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Local_variable_declaratorContext,i)


        def USING(self):
            return self.getToken(CSharpParser.USING, 0)

        def REF(self):
            return self.getToken(CSharpParser.REF, 0)

        def READONLY(self):
            return self.getToken(CSharpParser.READONLY, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.COMMA)
            else:
                return self.getToken(CSharpParser.COMMA, i)

        def FIXED(self):
            return self.getToken(CSharpParser.FIXED, 0)

        def pointer_type(self):
            return self.getTypedRuleContext(CSharpParser.Pointer_typeContext,0)


        def fixed_pointer_declarators(self):
            return self.getTypedRuleContext(CSharpParser.Fixed_pointer_declaratorsContext,0)


        def VAR(self):
            return self.getToken(CSharpParser.VAR, 0)

        def deconstruction_expression(self):
            return self.getTypedRuleContext(CSharpParser.Deconstruction_expressionContext,0)


        def ASSIGNMENT(self):
            return self.getToken(CSharpParser.ASSIGNMENT, 0)

        def expression(self):
            return self.getTypedRuleContext(CSharpParser.ExpressionContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_local_variable_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLocal_variable_declaration" ):
                listener.enterLocal_variable_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLocal_variable_declaration" ):
                listener.exitLocal_variable_declaration(self)




    def local_variable_declaration(self):

        localctx = CSharpParser.Local_variable_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_local_variable_declaration)
        self._la = 0 # Token type
        try:
            self.state = 1495
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,155,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1475
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,153,self._ctx)
                if la_ == 1:
                    self.state = 1471
                    self.match(CSharpParser.USING)

                elif la_ == 2:
                    self.state = 1472
                    self.match(CSharpParser.REF)

                elif la_ == 3:
                    self.state = 1473
                    self.match(CSharpParser.REF)
                    self.state = 1474
                    self.match(CSharpParser.READONLY)


                self.state = 1477
                self.local_variable_type()
                self.state = 1478
                self.local_variable_declarator()
                self.state = 1483
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==132:
                    self.state = 1479
                    self.match(CSharpParser.COMMA)
                    self.state = 1480
                    self.local_variable_declarator()
                    self.state = 1485
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1486
                self.match(CSharpParser.FIXED)
                self.state = 1487
                self.pointer_type()
                self.state = 1488
                self.fixed_pointer_declarators()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1490
                self.match(CSharpParser.VAR)
                self.state = 1491
                self.deconstruction_expression()
                self.state = 1492
                self.match(CSharpParser.ASSIGNMENT)
                self.state = 1493
                self.expression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Local_variable_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VAR(self):
            return self.getToken(CSharpParser.VAR, 0)

        def type_(self):
            return self.getTypedRuleContext(CSharpParser.Type_Context,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_local_variable_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLocal_variable_type" ):
                listener.enterLocal_variable_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLocal_variable_type" ):
                listener.exitLocal_variable_type(self)




    def local_variable_type(self):

        localctx = CSharpParser.Local_variable_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 182, self.RULE_local_variable_type)
        try:
            self.state = 1499
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,156,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1497
                self.match(CSharpParser.VAR)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1498
                self.type_()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Local_variable_declaratorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(CSharpParser.IdentifierContext,0)


        def ASSIGNMENT(self):
            return self.getToken(CSharpParser.ASSIGNMENT, 0)

        def local_variable_initializer(self):
            return self.getTypedRuleContext(CSharpParser.Local_variable_initializerContext,0)


        def REF(self):
            return self.getToken(CSharpParser.REF, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_local_variable_declarator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLocal_variable_declarator" ):
                listener.enterLocal_variable_declarator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLocal_variable_declarator" ):
                listener.exitLocal_variable_declarator(self)




    def local_variable_declarator(self):

        localctx = CSharpParser.Local_variable_declaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 184, self.RULE_local_variable_declarator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1501
            self.identifier()
            self.state = 1507
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==145:
                self.state = 1502
                self.match(CSharpParser.ASSIGNMENT)
                self.state = 1504
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,157,self._ctx)
                if la_ == 1:
                    self.state = 1503
                    self.match(CSharpParser.REF)


                self.state = 1506
                self.local_variable_initializer()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Local_variable_initializerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(CSharpParser.ExpressionContext,0)


        def array_initializer(self):
            return self.getTypedRuleContext(CSharpParser.Array_initializerContext,0)


        def stackalloc_initializer(self):
            return self.getTypedRuleContext(CSharpParser.Stackalloc_initializerContext,0)


        def deconstruction_element(self):
            return self.getTypedRuleContext(CSharpParser.Deconstruction_elementContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_local_variable_initializer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLocal_variable_initializer" ):
                listener.enterLocal_variable_initializer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLocal_variable_initializer" ):
                listener.exitLocal_variable_initializer(self)




    def local_variable_initializer(self):

        localctx = CSharpParser.Local_variable_initializerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 186, self.RULE_local_variable_initializer)
        try:
            self.state = 1513
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,159,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1509
                self.expression()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1510
                self.array_initializer()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1511
                self.stackalloc_initializer()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1512
                self.deconstruction_element()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Local_constant_declarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CONST(self):
            return self.getToken(CSharpParser.CONST, 0)

        def type_(self):
            return self.getTypedRuleContext(CSharpParser.Type_Context,0)


        def constant_declarators(self):
            return self.getTypedRuleContext(CSharpParser.Constant_declaratorsContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_local_constant_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLocal_constant_declaration" ):
                listener.enterLocal_constant_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLocal_constant_declaration" ):
                listener.exitLocal_constant_declaration(self)




    def local_constant_declaration(self):

        localctx = CSharpParser.Local_constant_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 188, self.RULE_local_constant_declaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1515
            self.match(CSharpParser.CONST)
            self.state = 1516
            self.type_()
            self.state = 1517
            self.constant_declarators()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class If_bodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def block(self):
            return self.getTypedRuleContext(CSharpParser.BlockContext,0)


        def simple_embedded_statement(self):
            return self.getTypedRuleContext(CSharpParser.Simple_embedded_statementContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_if_body

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIf_body" ):
                listener.enterIf_body(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIf_body" ):
                listener.exitIf_body(self)




    def if_body(self):

        localctx = CSharpParser.If_bodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 190, self.RULE_if_body)
        try:
            self.state = 1521
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [125]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1519
                self.block()
                pass
            elif token in [10, 11, 12, 14, 15, 16, 17, 18, 19, 20, 21, 24, 25, 28, 29, 30, 31, 32, 33, 34, 35, 38, 42, 44, 45, 46, 47, 48, 49, 50, 51, 52, 55, 58, 60, 61, 62, 63, 64, 66, 67, 68, 69, 71, 75, 80, 81, 82, 83, 85, 86, 87, 88, 91, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 129, 134, 135, 136, 137, 140, 142, 143, 144, 151, 152, 171]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1520
                self.simple_embedded_statement()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Switch_sectionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def statement_list(self):
            return self.getTypedRuleContext(CSharpParser.Statement_listContext,0)


        def switch_label(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Switch_labelContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Switch_labelContext,i)


        def getRuleIndex(self):
            return CSharpParser.RULE_switch_section

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSwitch_section" ):
                listener.enterSwitch_section(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSwitch_section" ):
                listener.exitSwitch_section(self)




    def switch_section(self):

        localctx = CSharpParser.Switch_sectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 192, self.RULE_switch_section)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1524 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 1523
                    self.switch_label()

                else:
                    raise NoViableAltException(self)
                self.state = 1526 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,161,self._ctx)

            self.state = 1528
            self.statement_list()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Switch_labelContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CASE(self):
            return self.getToken(CSharpParser.CASE, 0)

        def expression(self):
            return self.getTypedRuleContext(CSharpParser.ExpressionContext,0)


        def COLON(self):
            return self.getToken(CSharpParser.COLON, 0)

        def case_guard(self):
            return self.getTypedRuleContext(CSharpParser.Case_guardContext,0)


        def DEFAULT(self):
            return self.getToken(CSharpParser.DEFAULT, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_switch_label

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSwitch_label" ):
                listener.enterSwitch_label(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSwitch_label" ):
                listener.exitSwitch_label(self)




    def switch_label(self):

        localctx = CSharpParser.Switch_labelContext(self, self._ctx, self.state)
        self.enterRule(localctx, 194, self.RULE_switch_label)
        self._la = 0 # Token type
        try:
            self.state = 1539
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [22]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1530
                self.match(CSharpParser.CASE)
                self.state = 1531
                self.expression()
                self.state = 1533
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==110:
                    self.state = 1532
                    self.case_guard()


                self.state = 1535
                self.match(CSharpParser.COLON)
                pass
            elif token in [30]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1537
                self.match(CSharpParser.DEFAULT)
                self.state = 1538
                self.match(CSharpParser.COLON)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Case_guardContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHEN(self):
            return self.getToken(CSharpParser.WHEN, 0)

        def expression(self):
            return self.getTypedRuleContext(CSharpParser.ExpressionContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_case_guard

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCase_guard" ):
                listener.enterCase_guard(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCase_guard" ):
                listener.exitCase_guard(self)




    def case_guard(self):

        localctx = CSharpParser.Case_guardContext(self, self._ctx, self.state)
        self.enterRule(localctx, 196, self.RULE_case_guard)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1541
            self.match(CSharpParser.WHEN)
            self.state = 1542
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Statement_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.StatementContext)
            else:
                return self.getTypedRuleContext(CSharpParser.StatementContext,i)


        def getRuleIndex(self):
            return CSharpParser.RULE_statement_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatement_list" ):
                listener.enterStatement_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatement_list" ):
                listener.exitStatement_list(self)




    def statement_list(self):

        localctx = CSharpParser.Statement_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 198, self.RULE_statement_list)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1545 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 1544
                    self.statement()

                else:
                    raise NoViableAltException(self)
                self.state = 1547 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,164,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class For_initializerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def local_variable_declaration(self):
            return self.getTypedRuleContext(CSharpParser.Local_variable_declarationContext,0)


        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(CSharpParser.ExpressionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.COMMA)
            else:
                return self.getToken(CSharpParser.COMMA, i)

        def getRuleIndex(self):
            return CSharpParser.RULE_for_initializer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFor_initializer" ):
                listener.enterFor_initializer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFor_initializer" ):
                listener.exitFor_initializer(self)




    def for_initializer(self):

        localctx = CSharpParser.For_initializerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 200, self.RULE_for_initializer)
        self._la = 0 # Token type
        try:
            self.state = 1558
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,166,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1549
                self.local_variable_declaration()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1550
                self.expression()
                self.state = 1555
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==132:
                    self.state = 1551
                    self.match(CSharpParser.COMMA)
                    self.state = 1552
                    self.expression()
                    self.state = 1557
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class For_iteratorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(CSharpParser.ExpressionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.COMMA)
            else:
                return self.getToken(CSharpParser.COMMA, i)

        def getRuleIndex(self):
            return CSharpParser.RULE_for_iterator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFor_iterator" ):
                listener.enterFor_iterator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFor_iterator" ):
                listener.exitFor_iterator(self)




    def for_iterator(self):

        localctx = CSharpParser.For_iteratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 202, self.RULE_for_iterator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1560
            self.expression()
            self.state = 1565
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==132:
                self.state = 1561
                self.match(CSharpParser.COMMA)
                self.state = 1562
                self.expression()
                self.state = 1567
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Catch_clausesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def specific_catch_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Specific_catch_clauseContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Specific_catch_clauseContext,i)


        def general_catch_clause(self):
            return self.getTypedRuleContext(CSharpParser.General_catch_clauseContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_catch_clauses

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCatch_clauses" ):
                listener.enterCatch_clauses(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCatch_clauses" ):
                listener.exitCatch_clauses(self)




    def catch_clauses(self):

        localctx = CSharpParser.Catch_clausesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 204, self.RULE_catch_clauses)
        self._la = 0 # Token type
        try:
            self.state = 1579
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,170,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1568
                self.specific_catch_clause()
                self.state = 1572
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,168,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1569
                        self.specific_catch_clause() 
                    self.state = 1574
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,168,self._ctx)

                self.state = 1576
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==23:
                    self.state = 1575
                    self.general_catch_clause()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1578
                self.general_catch_clause()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Specific_catch_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CATCH(self):
            return self.getToken(CSharpParser.CATCH, 0)

        def OPEN_PARENS(self):
            return self.getToken(CSharpParser.OPEN_PARENS, 0)

        def class_type(self):
            return self.getTypedRuleContext(CSharpParser.Class_typeContext,0)


        def CLOSE_PARENS(self):
            return self.getToken(CSharpParser.CLOSE_PARENS, 0)

        def block(self):
            return self.getTypedRuleContext(CSharpParser.BlockContext,0)


        def identifier(self):
            return self.getTypedRuleContext(CSharpParser.IdentifierContext,0)


        def exception_filter(self):
            return self.getTypedRuleContext(CSharpParser.Exception_filterContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_specific_catch_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSpecific_catch_clause" ):
                listener.enterSpecific_catch_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSpecific_catch_clause" ):
                listener.exitSpecific_catch_clause(self)




    def specific_catch_clause(self):

        localctx = CSharpParser.Specific_catch_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 206, self.RULE_specific_catch_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1581
            self.match(CSharpParser.CATCH)
            self.state = 1582
            self.match(CSharpParser.OPEN_PARENS)
            self.state = 1583
            self.class_type()
            self.state = 1585
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 3750091428249852928) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 1904629023639713) != 0):
                self.state = 1584
                self.identifier()


            self.state = 1587
            self.match(CSharpParser.CLOSE_PARENS)
            self.state = 1589
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==110:
                self.state = 1588
                self.exception_filter()


            self.state = 1591
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class General_catch_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CATCH(self):
            return self.getToken(CSharpParser.CATCH, 0)

        def block(self):
            return self.getTypedRuleContext(CSharpParser.BlockContext,0)


        def exception_filter(self):
            return self.getTypedRuleContext(CSharpParser.Exception_filterContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_general_catch_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGeneral_catch_clause" ):
                listener.enterGeneral_catch_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGeneral_catch_clause" ):
                listener.exitGeneral_catch_clause(self)




    def general_catch_clause(self):

        localctx = CSharpParser.General_catch_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 208, self.RULE_general_catch_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1593
            self.match(CSharpParser.CATCH)
            self.state = 1595
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==110:
                self.state = 1594
                self.exception_filter()


            self.state = 1597
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Exception_filterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHEN(self):
            return self.getToken(CSharpParser.WHEN, 0)

        def OPEN_PARENS(self):
            return self.getToken(CSharpParser.OPEN_PARENS, 0)

        def expression(self):
            return self.getTypedRuleContext(CSharpParser.ExpressionContext,0)


        def CLOSE_PARENS(self):
            return self.getToken(CSharpParser.CLOSE_PARENS, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_exception_filter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterException_filter" ):
                listener.enterException_filter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitException_filter" ):
                listener.exitException_filter(self)




    def exception_filter(self):

        localctx = CSharpParser.Exception_filterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 210, self.RULE_exception_filter)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1599
            self.match(CSharpParser.WHEN)
            self.state = 1600
            self.match(CSharpParser.OPEN_PARENS)
            self.state = 1601
            self.expression()
            self.state = 1602
            self.match(CSharpParser.CLOSE_PARENS)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Finally_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FINALLY(self):
            return self.getToken(CSharpParser.FINALLY, 0)

        def block(self):
            return self.getTypedRuleContext(CSharpParser.BlockContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_finally_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFinally_clause" ):
                listener.enterFinally_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFinally_clause" ):
                listener.exitFinally_clause(self)




    def finally_clause(self):

        localctx = CSharpParser.Finally_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 212, self.RULE_finally_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1604
            self.match(CSharpParser.FINALLY)
            self.state = 1605
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Resource_acquisitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def local_variable_declaration(self):
            return self.getTypedRuleContext(CSharpParser.Local_variable_declarationContext,0)


        def expression(self):
            return self.getTypedRuleContext(CSharpParser.ExpressionContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_resource_acquisition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterResource_acquisition" ):
                listener.enterResource_acquisition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitResource_acquisition" ):
                listener.exitResource_acquisition(self)




    def resource_acquisition(self):

        localctx = CSharpParser.Resource_acquisitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 214, self.RULE_resource_acquisition)
        try:
            self.state = 1609
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,174,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1607
                self.local_variable_declaration()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1608
                self.expression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Namespace_declarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.qi = None # Qualified_identifierContext

        def NAMESPACE(self):
            return self.getToken(CSharpParser.NAMESPACE, 0)

        def namespace_body(self):
            return self.getTypedRuleContext(CSharpParser.Namespace_bodyContext,0)


        def qualified_identifier(self):
            return self.getTypedRuleContext(CSharpParser.Qualified_identifierContext,0)


        def SEMICOLON(self):
            return self.getToken(CSharpParser.SEMICOLON, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_namespace_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNamespace_declaration" ):
                listener.enterNamespace_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNamespace_declaration" ):
                listener.exitNamespace_declaration(self)




    def namespace_declaration(self):

        localctx = CSharpParser.Namespace_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 216, self.RULE_namespace_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1611
            self.match(CSharpParser.NAMESPACE)
            self.state = 1612
            localctx.qi = self.qualified_identifier()
            self.state = 1613
            self.namespace_body()
            self.state = 1615
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==134:
                self.state = 1614
                self.match(CSharpParser.SEMICOLON)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Qualified_identifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(CSharpParser.IdentifierContext,i)


        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.DOT)
            else:
                return self.getToken(CSharpParser.DOT, i)

        def getRuleIndex(self):
            return CSharpParser.RULE_qualified_identifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQualified_identifier" ):
                listener.enterQualified_identifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQualified_identifier" ):
                listener.exitQualified_identifier(self)




    def qualified_identifier(self):

        localctx = CSharpParser.Qualified_identifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 218, self.RULE_qualified_identifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1617
            self.identifier()
            self.state = 1622
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==131:
                self.state = 1618
                self.match(CSharpParser.DOT)
                self.state = 1619
                self.identifier()
                self.state = 1624
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Namespace_bodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_BRACE(self):
            return self.getToken(CSharpParser.OPEN_BRACE, 0)

        def CLOSE_BRACE(self):
            return self.getToken(CSharpParser.CLOSE_BRACE, 0)

        def extern_alias_directives(self):
            return self.getTypedRuleContext(CSharpParser.Extern_alias_directivesContext,0)


        def using_directives(self):
            return self.getTypedRuleContext(CSharpParser.Using_directivesContext,0)


        def namespace_member_declarations(self):
            return self.getTypedRuleContext(CSharpParser.Namespace_member_declarationsContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_namespace_body

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNamespace_body" ):
                listener.enterNamespace_body(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNamespace_body" ):
                listener.exitNamespace_body(self)




    def namespace_body(self):

        localctx = CSharpParser.Namespace_bodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 220, self.RULE_namespace_body)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1625
            self.match(CSharpParser.OPEN_BRACE)
            self.state = 1627
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,177,self._ctx)
            if la_ == 1:
                self.state = 1626
                self.extern_alias_directives()


            self.state = 1630
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==105:
                self.state = 1629
                self.using_directives()


            self.state = 1633
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 216175120790618624) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & 4611708283706211587) != 0):
                self.state = 1632
                self.namespace_member_declarations()


            self.state = 1635
            self.match(CSharpParser.CLOSE_BRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Extern_alias_directivesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def extern_alias_directive(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Extern_alias_directiveContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Extern_alias_directiveContext,i)


        def getRuleIndex(self):
            return CSharpParser.RULE_extern_alias_directives

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExtern_alias_directives" ):
                listener.enterExtern_alias_directives(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExtern_alias_directives" ):
                listener.exitExtern_alias_directives(self)




    def extern_alias_directives(self):

        localctx = CSharpParser.Extern_alias_directivesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 222, self.RULE_extern_alias_directives)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1638 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 1637
                    self.extern_alias_directive()

                else:
                    raise NoViableAltException(self)
                self.state = 1640 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,180,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Extern_alias_directiveContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXTERN(self):
            return self.getToken(CSharpParser.EXTERN, 0)

        def ALIAS(self):
            return self.getToken(CSharpParser.ALIAS, 0)

        def identifier(self):
            return self.getTypedRuleContext(CSharpParser.IdentifierContext,0)


        def SEMICOLON(self):
            return self.getToken(CSharpParser.SEMICOLON, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_extern_alias_directive

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExtern_alias_directive" ):
                listener.enterExtern_alias_directive(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExtern_alias_directive" ):
                listener.exitExtern_alias_directive(self)




    def extern_alias_directive(self):

        localctx = CSharpParser.Extern_alias_directiveContext(self, self._ctx, self.state)
        self.enterRule(localctx, 224, self.RULE_extern_alias_directive)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1642
            self.match(CSharpParser.EXTERN)
            self.state = 1643
            self.match(CSharpParser.ALIAS)
            self.state = 1644
            self.identifier()
            self.state = 1645
            self.match(CSharpParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Using_directivesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def using_directive(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Using_directiveContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Using_directiveContext,i)


        def getRuleIndex(self):
            return CSharpParser.RULE_using_directives

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUsing_directives" ):
                listener.enterUsing_directives(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUsing_directives" ):
                listener.exitUsing_directives(self)




    def using_directives(self):

        localctx = CSharpParser.Using_directivesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 226, self.RULE_using_directives)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1648 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1647
                self.using_directive()
                self.state = 1650 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==105):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Using_directiveContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CSharpParser.RULE_using_directive

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class UsingAliasDirectiveContext(Using_directiveContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CSharpParser.Using_directiveContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def USING(self):
            return self.getToken(CSharpParser.USING, 0)
        def identifier(self):
            return self.getTypedRuleContext(CSharpParser.IdentifierContext,0)

        def ASSIGNMENT(self):
            return self.getToken(CSharpParser.ASSIGNMENT, 0)
        def namespace_or_type_name(self):
            return self.getTypedRuleContext(CSharpParser.Namespace_or_type_nameContext,0)

        def SEMICOLON(self):
            return self.getToken(CSharpParser.SEMICOLON, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUsingAliasDirective" ):
                listener.enterUsingAliasDirective(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUsingAliasDirective" ):
                listener.exitUsingAliasDirective(self)


    class UsingNamespaceDirectiveContext(Using_directiveContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CSharpParser.Using_directiveContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def USING(self):
            return self.getToken(CSharpParser.USING, 0)
        def namespace_or_type_name(self):
            return self.getTypedRuleContext(CSharpParser.Namespace_or_type_nameContext,0)

        def SEMICOLON(self):
            return self.getToken(CSharpParser.SEMICOLON, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUsingNamespaceDirective" ):
                listener.enterUsingNamespaceDirective(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUsingNamespaceDirective" ):
                listener.exitUsingNamespaceDirective(self)


    class UsingStaticDirectiveContext(Using_directiveContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CSharpParser.Using_directiveContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def USING(self):
            return self.getToken(CSharpParser.USING, 0)
        def STATIC(self):
            return self.getToken(CSharpParser.STATIC, 0)
        def namespace_or_type_name(self):
            return self.getTypedRuleContext(CSharpParser.Namespace_or_type_nameContext,0)

        def SEMICOLON(self):
            return self.getToken(CSharpParser.SEMICOLON, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUsingStaticDirective" ):
                listener.enterUsingStaticDirective(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUsingStaticDirective" ):
                listener.exitUsingStaticDirective(self)



    def using_directive(self):

        localctx = CSharpParser.Using_directiveContext(self, self._ctx, self.state)
        self.enterRule(localctx, 228, self.RULE_using_directive)
        try:
            self.state = 1667
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,182,self._ctx)
            if la_ == 1:
                localctx = CSharpParser.UsingAliasDirectiveContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1652
                self.match(CSharpParser.USING)
                self.state = 1653
                self.identifier()
                self.state = 1654
                self.match(CSharpParser.ASSIGNMENT)
                self.state = 1655
                self.namespace_or_type_name()
                self.state = 1656
                self.match(CSharpParser.SEMICOLON)
                pass

            elif la_ == 2:
                localctx = CSharpParser.UsingNamespaceDirectiveContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1658
                self.match(CSharpParser.USING)
                self.state = 1659
                self.namespace_or_type_name()
                self.state = 1660
                self.match(CSharpParser.SEMICOLON)
                pass

            elif la_ == 3:
                localctx = CSharpParser.UsingStaticDirectiveContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 1662
                self.match(CSharpParser.USING)
                self.state = 1663
                self.match(CSharpParser.STATIC)
                self.state = 1664
                self.namespace_or_type_name()
                self.state = 1665
                self.match(CSharpParser.SEMICOLON)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Namespace_member_declarationsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def namespace_member_declaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Namespace_member_declarationContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Namespace_member_declarationContext,i)


        def getRuleIndex(self):
            return CSharpParser.RULE_namespace_member_declarations

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNamespace_member_declarations" ):
                listener.enterNamespace_member_declarations(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNamespace_member_declarations" ):
                listener.exitNamespace_member_declarations(self)




    def namespace_member_declarations(self):

        localctx = CSharpParser.Namespace_member_declarationsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 230, self.RULE_namespace_member_declarations)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1670 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1669
                self.namespace_member_declaration()
                self.state = 1672 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & 216175120790618624) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & 4611708283706211587) != 0)):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Namespace_member_declarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def namespace_declaration(self):
            return self.getTypedRuleContext(CSharpParser.Namespace_declarationContext,0)


        def type_declaration(self):
            return self.getTypedRuleContext(CSharpParser.Type_declarationContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_namespace_member_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNamespace_member_declaration" ):
                listener.enterNamespace_member_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNamespace_member_declaration" ):
                listener.exitNamespace_member_declaration(self)




    def namespace_member_declaration(self):

        localctx = CSharpParser.Namespace_member_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 232, self.RULE_namespace_member_declaration)
        try:
            self.state = 1676
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [65]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1674
                self.namespace_declaration()
                pass
            elif token in [9, 15, 26, 31, 37, 41, 56, 57, 66, 73, 75, 76, 77, 78, 79, 80, 84, 90, 92, 103, 107, 109, 127]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1675
                self.type_declaration()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Type_declarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def class_definition(self):
            return self.getTypedRuleContext(CSharpParser.Class_definitionContext,0)


        def struct_definition(self):
            return self.getTypedRuleContext(CSharpParser.Struct_definitionContext,0)


        def interface_definition(self):
            return self.getTypedRuleContext(CSharpParser.Interface_definitionContext,0)


        def enum_definition(self):
            return self.getTypedRuleContext(CSharpParser.Enum_definitionContext,0)


        def delegate_definition(self):
            return self.getTypedRuleContext(CSharpParser.Delegate_definitionContext,0)


        def attributes(self):
            return self.getTypedRuleContext(CSharpParser.AttributesContext,0)


        def all_member_modifiers(self):
            return self.getTypedRuleContext(CSharpParser.All_member_modifiersContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_type_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterType_declaration" ):
                listener.enterType_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitType_declaration" ):
                listener.exitType_declaration(self)




    def type_declaration(self):

        localctx = CSharpParser.Type_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 234, self.RULE_type_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1679
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==127:
                self.state = 1678
                self.attributes()


            self.state = 1682
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,186,self._ctx)
            if la_ == 1:
                self.state = 1681
                self.all_member_modifiers()


            self.state = 1689
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [26]:
                self.state = 1684
                self.class_definition()
                pass
            elif token in [79, 80, 92]:
                self.state = 1685
                self.struct_definition()
                pass
            elif token in [56]:
                self.state = 1686
                self.interface_definition()
                pass
            elif token in [37]:
                self.state = 1687
                self.enum_definition()
                pass
            elif token in [31]:
                self.state = 1688
                self.delegate_definition()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Qualified_alias_memberContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(CSharpParser.IdentifierContext,i)


        def DOUBLE_COLON(self):
            return self.getToken(CSharpParser.DOUBLE_COLON, 0)

        def type_argument_list(self):
            return self.getTypedRuleContext(CSharpParser.Type_argument_listContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_qualified_alias_member

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQualified_alias_member" ):
                listener.enterQualified_alias_member(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQualified_alias_member" ):
                listener.exitQualified_alias_member(self)




    def qualified_alias_member(self):

        localctx = CSharpParser.Qualified_alias_memberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 236, self.RULE_qualified_alias_member)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1691
            self.identifier()
            self.state = 1692
            self.match(CSharpParser.DOUBLE_COLON)
            self.state = 1693
            self.identifier()
            self.state = 1695
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,188,self._ctx)
            if la_ == 1:
                self.state = 1694
                self.type_argument_list()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Type_parameter_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LT(self):
            return self.getToken(CSharpParser.LT, 0)

        def type_parameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Type_parameterContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Type_parameterContext,i)


        def GT(self):
            return self.getToken(CSharpParser.GT, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.COMMA)
            else:
                return self.getToken(CSharpParser.COMMA, i)

        def getRuleIndex(self):
            return CSharpParser.RULE_type_parameter_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterType_parameter_list" ):
                listener.enterType_parameter_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitType_parameter_list" ):
                listener.exitType_parameter_list(self)




    def type_parameter_list(self):

        localctx = CSharpParser.Type_parameter_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 238, self.RULE_type_parameter_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1697
            self.match(CSharpParser.LT)
            self.state = 1698
            self.type_parameter()
            self.state = 1703
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==132:
                self.state = 1699
                self.match(CSharpParser.COMMA)
                self.state = 1700
                self.type_parameter()
                self.state = 1705
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1706
            self.match(CSharpParser.GT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Type_parameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(CSharpParser.IdentifierContext,0)


        def attributes(self):
            return self.getTypedRuleContext(CSharpParser.AttributesContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_type_parameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterType_parameter" ):
                listener.enterType_parameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitType_parameter" ):
                listener.exitType_parameter(self)




    def type_parameter(self):

        localctx = CSharpParser.Type_parameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 240, self.RULE_type_parameter)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1709
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==127:
                self.state = 1708
                self.attributes()


            self.state = 1711
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Class_baseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COLON(self):
            return self.getToken(CSharpParser.COLON, 0)

        def class_type(self):
            return self.getTypedRuleContext(CSharpParser.Class_typeContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.COMMA)
            else:
                return self.getToken(CSharpParser.COMMA, i)

        def namespace_or_type_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Namespace_or_type_nameContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Namespace_or_type_nameContext,i)


        def getRuleIndex(self):
            return CSharpParser.RULE_class_base

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClass_base" ):
                listener.enterClass_base(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClass_base" ):
                listener.exitClass_base(self)




    def class_base(self):

        localctx = CSharpParser.Class_baseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 242, self.RULE_class_base)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1713
            self.match(CSharpParser.COLON)
            self.state = 1714
            self.class_type()
            self.state = 1719
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==132:
                self.state = 1715
                self.match(CSharpParser.COMMA)
                self.state = 1716
                self.namespace_or_type_name()
                self.state = 1721
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Interface_type_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def namespace_or_type_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Namespace_or_type_nameContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Namespace_or_type_nameContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.COMMA)
            else:
                return self.getToken(CSharpParser.COMMA, i)

        def getRuleIndex(self):
            return CSharpParser.RULE_interface_type_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterface_type_list" ):
                listener.enterInterface_type_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterface_type_list" ):
                listener.exitInterface_type_list(self)




    def interface_type_list(self):

        localctx = CSharpParser.Interface_type_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 244, self.RULE_interface_type_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1722
            self.namespace_or_type_name()
            self.state = 1727
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==132:
                self.state = 1723
                self.match(CSharpParser.COMMA)
                self.state = 1724
                self.namespace_or_type_name()
                self.state = 1729
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Type_parameter_constraints_clausesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def type_parameter_constraints_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Type_parameter_constraints_clauseContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Type_parameter_constraints_clauseContext,i)


        def getRuleIndex(self):
            return CSharpParser.RULE_type_parameter_constraints_clauses

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterType_parameter_constraints_clauses" ):
                listener.enterType_parameter_constraints_clauses(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitType_parameter_constraints_clauses" ):
                listener.exitType_parameter_constraints_clauses(self)




    def type_parameter_constraints_clauses(self):

        localctx = CSharpParser.Type_parameter_constraints_clausesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 246, self.RULE_type_parameter_constraints_clauses)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1731 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1730
                self.type_parameter_constraints_clause()
                self.state = 1733 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==111):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Type_parameter_constraints_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHERE(self):
            return self.getToken(CSharpParser.WHERE, 0)

        def identifier(self):
            return self.getTypedRuleContext(CSharpParser.IdentifierContext,0)


        def COLON(self):
            return self.getToken(CSharpParser.COLON, 0)

        def type_parameter_constraints(self):
            return self.getTypedRuleContext(CSharpParser.Type_parameter_constraintsContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_type_parameter_constraints_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterType_parameter_constraints_clause" ):
                listener.enterType_parameter_constraints_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitType_parameter_constraints_clause" ):
                listener.exitType_parameter_constraints_clause(self)




    def type_parameter_constraints_clause(self):

        localctx = CSharpParser.Type_parameter_constraints_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 248, self.RULE_type_parameter_constraints_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1735
            self.match(CSharpParser.WHERE)
            self.state = 1736
            self.identifier()
            self.state = 1737
            self.match(CSharpParser.COLON)
            self.state = 1738
            self.type_parameter_constraints()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Type_parameter_constraintsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def constructor_constraint(self):
            return self.getTypedRuleContext(CSharpParser.Constructor_constraintContext,0)


        def primary_constraint(self):
            return self.getTypedRuleContext(CSharpParser.Primary_constraintContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.COMMA)
            else:
                return self.getToken(CSharpParser.COMMA, i)

        def secondary_constraints(self):
            return self.getTypedRuleContext(CSharpParser.Secondary_constraintsContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_type_parameter_constraints

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterType_parameter_constraints" ):
                listener.enterType_parameter_constraints(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitType_parameter_constraints" ):
                listener.exitType_parameter_constraints(self)




    def type_parameter_constraints(self):

        localctx = CSharpParser.Type_parameter_constraintsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 250, self.RULE_type_parameter_constraints)
        self._la = 0 # Token type
        try:
            self.state = 1750
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [66]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1740
                self.constructor_constraint()
                pass
            elif token in [10, 11, 12, 14, 15, 16, 20, 26, 32, 35, 38, 48, 49, 51, 58, 60, 61, 64, 68, 69, 71, 75, 81, 85, 86, 91, 92, 102, 106, 110, 111, 113, 114]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1741
                self.primary_constraint()
                self.state = 1744
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,194,self._ctx)
                if la_ == 1:
                    self.state = 1742
                    self.match(CSharpParser.COMMA)
                    self.state = 1743
                    self.secondary_constraints()


                self.state = 1748
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==132:
                    self.state = 1746
                    self.match(CSharpParser.COMMA)
                    self.state = 1747
                    self.constructor_constraint()


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Primary_constraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def class_type(self):
            return self.getTypedRuleContext(CSharpParser.Class_typeContext,0)


        def CLASS(self):
            return self.getToken(CSharpParser.CLASS, 0)

        def INTERR(self):
            return self.getToken(CSharpParser.INTERR, 0)

        def STRUCT(self):
            return self.getToken(CSharpParser.STRUCT, 0)

        def UNMANAGED(self):
            return self.getToken(CSharpParser.UNMANAGED, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_primary_constraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrimary_constraint" ):
                listener.enterPrimary_constraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrimary_constraint" ):
                listener.exitPrimary_constraint(self)




    def primary_constraint(self):

        localctx = CSharpParser.Primary_constraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 252, self.RULE_primary_constraint)
        self._la = 0 # Token type
        try:
            self.state = 1759
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,198,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1752
                self.class_type()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1753
                self.match(CSharpParser.CLASS)
                self.state = 1755
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==148:
                    self.state = 1754
                    self.match(CSharpParser.INTERR)


                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1757
                self.match(CSharpParser.STRUCT)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1758
                self.match(CSharpParser.UNMANAGED)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Secondary_constraintsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def namespace_or_type_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Namespace_or_type_nameContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Namespace_or_type_nameContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.COMMA)
            else:
                return self.getToken(CSharpParser.COMMA, i)

        def getRuleIndex(self):
            return CSharpParser.RULE_secondary_constraints

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSecondary_constraints" ):
                listener.enterSecondary_constraints(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSecondary_constraints" ):
                listener.exitSecondary_constraints(self)




    def secondary_constraints(self):

        localctx = CSharpParser.Secondary_constraintsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 254, self.RULE_secondary_constraints)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1761
            self.namespace_or_type_name()
            self.state = 1766
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,199,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1762
                    self.match(CSharpParser.COMMA)
                    self.state = 1763
                    self.namespace_or_type_name() 
                self.state = 1768
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,199,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Constructor_constraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NEW(self):
            return self.getToken(CSharpParser.NEW, 0)

        def OPEN_PARENS(self):
            return self.getToken(CSharpParser.OPEN_PARENS, 0)

        def CLOSE_PARENS(self):
            return self.getToken(CSharpParser.CLOSE_PARENS, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_constructor_constraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstructor_constraint" ):
                listener.enterConstructor_constraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstructor_constraint" ):
                listener.exitConstructor_constraint(self)




    def constructor_constraint(self):

        localctx = CSharpParser.Constructor_constraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 256, self.RULE_constructor_constraint)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1769
            self.match(CSharpParser.NEW)
            self.state = 1770
            self.match(CSharpParser.OPEN_PARENS)
            self.state = 1771
            self.match(CSharpParser.CLOSE_PARENS)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Class_bodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_BRACE(self):
            return self.getToken(CSharpParser.OPEN_BRACE, 0)

        def CLOSE_BRACE(self):
            return self.getToken(CSharpParser.CLOSE_BRACE, 0)

        def class_member_declarations(self):
            return self.getTypedRuleContext(CSharpParser.Class_member_declarationsContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_class_body

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClass_body" ):
                listener.enterClass_body(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClass_body" ):
                listener.exitClass_body(self)




    def class_body(self):

        localctx = CSharpParser.Class_bodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 258, self.RULE_class_body)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1773
            self.match(CSharpParser.OPEN_BRACE)
            self.state = 1775
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & -5212032640031007232) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -9221404082353472843) != 0) or _la==129 or _la==144:
                self.state = 1774
                self.class_member_declarations()


            self.state = 1777
            self.match(CSharpParser.CLOSE_BRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Class_member_declarationsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def class_member_declaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Class_member_declarationContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Class_member_declarationContext,i)


        def getRuleIndex(self):
            return CSharpParser.RULE_class_member_declarations

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClass_member_declarations" ):
                listener.enterClass_member_declarations(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClass_member_declarations" ):
                listener.exitClass_member_declarations(self)




    def class_member_declarations(self):

        localctx = CSharpParser.Class_member_declarationsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 260, self.RULE_class_member_declarations)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1780 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1779
                self.class_member_declaration()
                self.state = 1782 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & -5212032640031007232) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -9221404082353472843) != 0) or _la==129 or _la==144):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Class_member_declarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def common_member_declaration(self):
            return self.getTypedRuleContext(CSharpParser.Common_member_declarationContext,0)


        def destructor_definition(self):
            return self.getTypedRuleContext(CSharpParser.Destructor_definitionContext,0)


        def attributes(self):
            return self.getTypedRuleContext(CSharpParser.AttributesContext,0)


        def all_member_modifiers(self):
            return self.getTypedRuleContext(CSharpParser.All_member_modifiersContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_class_member_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClass_member_declaration" ):
                listener.enterClass_member_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClass_member_declaration" ):
                listener.exitClass_member_declaration(self)




    def class_member_declaration(self):

        localctx = CSharpParser.Class_member_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 262, self.RULE_class_member_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1785
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==127:
                self.state = 1784
                self.attributes()


            self.state = 1788
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,203,self._ctx)
            if la_ == 1:
                self.state = 1787
                self.all_member_modifiers()


            self.state = 1792
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [10, 11, 12, 14, 15, 16, 18, 20, 21, 24, 26, 27, 29, 31, 32, 34, 35, 37, 38, 39, 40, 45, 48, 49, 51, 53, 55, 56, 58, 60, 61, 63, 64, 68, 69, 71, 75, 79, 80, 81, 83, 85, 86, 87, 91, 92, 99, 100, 102, 104, 106, 108, 110, 111, 113, 114, 129]:
                self.state = 1790
                self.common_member_declaration()
                pass
            elif token in [144]:
                self.state = 1791
                self.destructor_definition()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class All_member_modifiersContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def all_member_modifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.All_member_modifierContext)
            else:
                return self.getTypedRuleContext(CSharpParser.All_member_modifierContext,i)


        def getRuleIndex(self):
            return CSharpParser.RULE_all_member_modifiers

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAll_member_modifiers" ):
                listener.enterAll_member_modifiers(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAll_member_modifiers" ):
                listener.exitAll_member_modifiers(self)




    def all_member_modifiers(self):

        localctx = CSharpParser.All_member_modifiersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 264, self.RULE_all_member_modifiers)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1795 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 1794
                    self.all_member_modifier()

                else:
                    raise NoViableAltException(self)
                self.state = 1797 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,205,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class All_member_modifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NEW(self):
            return self.getToken(CSharpParser.NEW, 0)

        def PUBLIC(self):
            return self.getToken(CSharpParser.PUBLIC, 0)

        def PROTECTED(self):
            return self.getToken(CSharpParser.PROTECTED, 0)

        def INTERNAL(self):
            return self.getToken(CSharpParser.INTERNAL, 0)

        def PRIVATE(self):
            return self.getToken(CSharpParser.PRIVATE, 0)

        def READONLY(self):
            return self.getToken(CSharpParser.READONLY, 0)

        def VOLATILE(self):
            return self.getToken(CSharpParser.VOLATILE, 0)

        def VIRTUAL(self):
            return self.getToken(CSharpParser.VIRTUAL, 0)

        def SEALED(self):
            return self.getToken(CSharpParser.SEALED, 0)

        def OVERRIDE(self):
            return self.getToken(CSharpParser.OVERRIDE, 0)

        def ABSTRACT(self):
            return self.getToken(CSharpParser.ABSTRACT, 0)

        def STATIC(self):
            return self.getToken(CSharpParser.STATIC, 0)

        def UNSAFE(self):
            return self.getToken(CSharpParser.UNSAFE, 0)

        def EXTERN(self):
            return self.getToken(CSharpParser.EXTERN, 0)

        def PARTIAL(self):
            return self.getToken(CSharpParser.PARTIAL, 0)

        def ASYNC(self):
            return self.getToken(CSharpParser.ASYNC, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_all_member_modifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAll_member_modifier" ):
                listener.enterAll_member_modifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAll_member_modifier" ):
                listener.exitAll_member_modifier(self)




    def all_member_modifier(self):

        localctx = CSharpParser.All_member_modifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 266, self.RULE_all_member_modifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1799
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 144117387099144704) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & 11132572286593) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Common_member_declarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def constant_declaration(self):
            return self.getTypedRuleContext(CSharpParser.Constant_declarationContext,0)


        def typed_member_declaration(self):
            return self.getTypedRuleContext(CSharpParser.Typed_member_declarationContext,0)


        def event_declaration(self):
            return self.getTypedRuleContext(CSharpParser.Event_declarationContext,0)


        def conversion_operator_declarator(self):
            return self.getTypedRuleContext(CSharpParser.Conversion_operator_declaratorContext,0)


        def body(self):
            return self.getTypedRuleContext(CSharpParser.BodyContext,0)


        def right_arrow(self):
            return self.getTypedRuleContext(CSharpParser.Right_arrowContext,0)


        def throwable_expression(self):
            return self.getTypedRuleContext(CSharpParser.Throwable_expressionContext,0)


        def SEMICOLON(self):
            return self.getToken(CSharpParser.SEMICOLON, 0)

        def constructor_declaration(self):
            return self.getTypedRuleContext(CSharpParser.Constructor_declarationContext,0)


        def VOID(self):
            return self.getToken(CSharpParser.VOID, 0)

        def method_declaration(self):
            return self.getTypedRuleContext(CSharpParser.Method_declarationContext,0)


        def class_definition(self):
            return self.getTypedRuleContext(CSharpParser.Class_definitionContext,0)


        def struct_definition(self):
            return self.getTypedRuleContext(CSharpParser.Struct_definitionContext,0)


        def interface_definition(self):
            return self.getTypedRuleContext(CSharpParser.Interface_definitionContext,0)


        def enum_definition(self):
            return self.getTypedRuleContext(CSharpParser.Enum_definitionContext,0)


        def delegate_definition(self):
            return self.getTypedRuleContext(CSharpParser.Delegate_definitionContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_common_member_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCommon_member_declaration" ):
                listener.enterCommon_member_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCommon_member_declaration" ):
                listener.exitCommon_member_declaration(self)




    def common_member_declaration(self):

        localctx = CSharpParser.Common_member_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 268, self.RULE_common_member_declaration)
        try:
            self.state = 1820
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,207,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1801
                self.constant_declaration()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1802
                self.typed_member_declaration()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1803
                self.event_declaration()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1804
                self.conversion_operator_declarator()
                self.state = 1810
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,206,self._ctx)
                if la_ == 1:
                    self.state = 1805
                    self.body()
                    pass

                elif la_ == 2:
                    self.state = 1806
                    self.right_arrow()
                    self.state = 1807
                    self.throwable_expression()
                    self.state = 1808
                    self.match(CSharpParser.SEMICOLON)
                    pass


                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1812
                self.constructor_declaration()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1813
                self.match(CSharpParser.VOID)
                self.state = 1814
                self.method_declaration()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1815
                self.class_definition()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 1816
                self.struct_definition()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 1817
                self.interface_definition()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 1818
                self.enum_definition()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 1819
                self.delegate_definition()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Typed_member_declarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def type_(self):
            return self.getTypedRuleContext(CSharpParser.Type_Context,0)


        def namespace_or_type_name(self):
            return self.getTypedRuleContext(CSharpParser.Namespace_or_type_nameContext,0)


        def DOT(self):
            return self.getToken(CSharpParser.DOT, 0)

        def indexer_declaration(self):
            return self.getTypedRuleContext(CSharpParser.Indexer_declarationContext,0)


        def method_declaration(self):
            return self.getTypedRuleContext(CSharpParser.Method_declarationContext,0)


        def property_declaration(self):
            return self.getTypedRuleContext(CSharpParser.Property_declarationContext,0)


        def operator_declaration(self):
            return self.getTypedRuleContext(CSharpParser.Operator_declarationContext,0)


        def field_declaration(self):
            return self.getTypedRuleContext(CSharpParser.Field_declarationContext,0)


        def REF(self):
            return self.getToken(CSharpParser.REF, 0)

        def READONLY(self):
            return self.getToken(CSharpParser.READONLY, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_typed_member_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTyped_member_declaration" ):
                listener.enterTyped_member_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTyped_member_declaration" ):
                listener.exitTyped_member_declaration(self)




    def typed_member_declaration(self):

        localctx = CSharpParser.Typed_member_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 270, self.RULE_typed_member_declaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1827
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,208,self._ctx)
            if la_ == 1:
                self.state = 1822
                self.match(CSharpParser.REF)

            elif la_ == 2:
                self.state = 1823
                self.match(CSharpParser.READONLY)
                self.state = 1824
                self.match(CSharpParser.REF)

            elif la_ == 3:
                self.state = 1825
                self.match(CSharpParser.REF)
                self.state = 1826
                self.match(CSharpParser.READONLY)


            self.state = 1829
            self.type_()
            self.state = 1839
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,209,self._ctx)
            if la_ == 1:
                self.state = 1830
                self.namespace_or_type_name()
                self.state = 1831
                self.match(CSharpParser.DOT)
                self.state = 1832
                self.indexer_declaration()
                pass

            elif la_ == 2:
                self.state = 1834
                self.method_declaration()
                pass

            elif la_ == 3:
                self.state = 1835
                self.property_declaration()
                pass

            elif la_ == 4:
                self.state = 1836
                self.indexer_declaration()
                pass

            elif la_ == 5:
                self.state = 1837
                self.operator_declaration()
                pass

            elif la_ == 6:
                self.state = 1838
                self.field_declaration()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Constant_declaratorsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def constant_declarator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Constant_declaratorContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Constant_declaratorContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.COMMA)
            else:
                return self.getToken(CSharpParser.COMMA, i)

        def getRuleIndex(self):
            return CSharpParser.RULE_constant_declarators

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstant_declarators" ):
                listener.enterConstant_declarators(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstant_declarators" ):
                listener.exitConstant_declarators(self)




    def constant_declarators(self):

        localctx = CSharpParser.Constant_declaratorsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 272, self.RULE_constant_declarators)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1841
            self.constant_declarator()
            self.state = 1846
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==132:
                self.state = 1842
                self.match(CSharpParser.COMMA)
                self.state = 1843
                self.constant_declarator()
                self.state = 1848
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Constant_declaratorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(CSharpParser.IdentifierContext,0)


        def ASSIGNMENT(self):
            return self.getToken(CSharpParser.ASSIGNMENT, 0)

        def expression(self):
            return self.getTypedRuleContext(CSharpParser.ExpressionContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_constant_declarator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstant_declarator" ):
                listener.enterConstant_declarator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstant_declarator" ):
                listener.exitConstant_declarator(self)




    def constant_declarator(self):

        localctx = CSharpParser.Constant_declaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 274, self.RULE_constant_declarator)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1849
            self.identifier()
            self.state = 1850
            self.match(CSharpParser.ASSIGNMENT)
            self.state = 1851
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Variable_declaratorsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def variable_declarator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Variable_declaratorContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Variable_declaratorContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.COMMA)
            else:
                return self.getToken(CSharpParser.COMMA, i)

        def getRuleIndex(self):
            return CSharpParser.RULE_variable_declarators

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariable_declarators" ):
                listener.enterVariable_declarators(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariable_declarators" ):
                listener.exitVariable_declarators(self)




    def variable_declarators(self):

        localctx = CSharpParser.Variable_declaratorsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 276, self.RULE_variable_declarators)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1853
            self.variable_declarator()
            self.state = 1858
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==132:
                self.state = 1854
                self.match(CSharpParser.COMMA)
                self.state = 1855
                self.variable_declarator()
                self.state = 1860
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Variable_declaratorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(CSharpParser.IdentifierContext,0)


        def ASSIGNMENT(self):
            return self.getToken(CSharpParser.ASSIGNMENT, 0)

        def variable_initializer(self):
            return self.getTypedRuleContext(CSharpParser.Variable_initializerContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_variable_declarator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariable_declarator" ):
                listener.enterVariable_declarator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariable_declarator" ):
                listener.exitVariable_declarator(self)




    def variable_declarator(self):

        localctx = CSharpParser.Variable_declaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 278, self.RULE_variable_declarator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1861
            self.identifier()
            self.state = 1864
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==145:
                self.state = 1862
                self.match(CSharpParser.ASSIGNMENT)
                self.state = 1863
                self.variable_initializer()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Variable_initializerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(CSharpParser.ExpressionContext,0)


        def array_initializer(self):
            return self.getTypedRuleContext(CSharpParser.Array_initializerContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_variable_initializer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariable_initializer" ):
                listener.enterVariable_initializer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariable_initializer" ):
                listener.exitVariable_initializer(self)




    def variable_initializer(self):

        localctx = CSharpParser.Variable_initializerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 280, self.RULE_variable_initializer)
        try:
            self.state = 1868
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [10, 11, 12, 14, 15, 16, 17, 18, 20, 21, 24, 25, 29, 30, 31, 32, 34, 35, 38, 42, 45, 48, 49, 51, 55, 58, 60, 61, 63, 64, 66, 67, 68, 69, 71, 75, 80, 81, 83, 85, 86, 87, 88, 91, 94, 96, 98, 99, 100, 101, 102, 104, 106, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 129, 135, 136, 137, 140, 142, 143, 144, 151, 152, 171]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1866
                self.expression()
                pass
            elif token in [125]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1867
                self.array_initializer()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Return_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def type_(self):
            return self.getTypedRuleContext(CSharpParser.Type_Context,0)


        def VOID(self):
            return self.getToken(CSharpParser.VOID, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_return_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReturn_type" ):
                listener.enterReturn_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReturn_type" ):
                listener.exitReturn_type(self)




    def return_type(self):

        localctx = CSharpParser.Return_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 282, self.RULE_return_type)
        try:
            self.state = 1872
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,214,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1870
                self.type_()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1871
                self.match(CSharpParser.VOID)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Member_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def namespace_or_type_name(self):
            return self.getTypedRuleContext(CSharpParser.Namespace_or_type_nameContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_member_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMember_name" ):
                listener.enterMember_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMember_name" ):
                listener.exitMember_name(self)




    def member_name(self):

        localctx = CSharpParser.Member_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 284, self.RULE_member_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1874
            self.namespace_or_type_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Method_bodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def block(self):
            return self.getTypedRuleContext(CSharpParser.BlockContext,0)


        def SEMICOLON(self):
            return self.getToken(CSharpParser.SEMICOLON, 0)

        def right_arrow(self):
            return self.getTypedRuleContext(CSharpParser.Right_arrowContext,0)


        def expression(self):
            return self.getTypedRuleContext(CSharpParser.ExpressionContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_method_body

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMethod_body" ):
                listener.enterMethod_body(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMethod_body" ):
                listener.exitMethod_body(self)




    def method_body(self):

        localctx = CSharpParser.Method_bodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 286, self.RULE_method_body)
        try:
            self.state = 1882
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [125]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1876
                self.block()
                pass
            elif token in [134]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1877
                self.match(CSharpParser.SEMICOLON)
                pass
            elif token in [145]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1878
                self.right_arrow()
                self.state = 1879
                self.expression()
                self.state = 1880
                self.match(CSharpParser.SEMICOLON)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Formal_parameter_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def parameter_array(self):
            return self.getTypedRuleContext(CSharpParser.Parameter_arrayContext,0)


        def fixed_parameters(self):
            return self.getTypedRuleContext(CSharpParser.Fixed_parametersContext,0)


        def COMMA(self):
            return self.getToken(CSharpParser.COMMA, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_formal_parameter_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFormal_parameter_list" ):
                listener.enterFormal_parameter_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFormal_parameter_list" ):
                listener.exitFormal_parameter_list(self)




    def formal_parameter_list(self):

        localctx = CSharpParser.Formal_parameter_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 288, self.RULE_formal_parameter_list)
        self._la = 0 # Token type
        try:
            self.state = 1890
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,217,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1884
                self.parameter_array()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1885
                self.fixed_parameters()
                self.state = 1888
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==132:
                    self.state = 1886
                    self.match(CSharpParser.COMMA)
                    self.state = 1887
                    self.parameter_array()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Fixed_parametersContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fixed_parameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Fixed_parameterContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Fixed_parameterContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.COMMA)
            else:
                return self.getToken(CSharpParser.COMMA, i)

        def getRuleIndex(self):
            return CSharpParser.RULE_fixed_parameters

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFixed_parameters" ):
                listener.enterFixed_parameters(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFixed_parameters" ):
                listener.exitFixed_parameters(self)




    def fixed_parameters(self):

        localctx = CSharpParser.Fixed_parametersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 290, self.RULE_fixed_parameters)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1892
            self.fixed_parameter()
            self.state = 1897
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,218,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1893
                    self.match(CSharpParser.COMMA)
                    self.state = 1894
                    self.fixed_parameter() 
                self.state = 1899
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,218,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Fixed_parameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def arg_declaration(self):
            return self.getTypedRuleContext(CSharpParser.Arg_declarationContext,0)


        def attributes(self):
            return self.getTypedRuleContext(CSharpParser.AttributesContext,0)


        def parameter_modifier(self):
            return self.getTypedRuleContext(CSharpParser.Parameter_modifierContext,0)


        def ARGLIST(self):
            return self.getToken(CSharpParser.ARGLIST, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_fixed_parameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFixed_parameter" ):
                listener.enterFixed_parameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFixed_parameter" ):
                listener.exitFixed_parameter(self)




    def fixed_parameter(self):

        localctx = CSharpParser.Fixed_parameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 292, self.RULE_fixed_parameter)
        self._la = 0 # Token type
        try:
            self.state = 1908
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,221,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1901
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==127:
                    self.state = 1900
                    self.attributes()


                self.state = 1904
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 54)) & ~0x3f) == 0 and ((1 << (_la - 54)) & 1099578998785) != 0):
                    self.state = 1903
                    self.parameter_modifier()


                self.state = 1906
                self.arg_declaration()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1907
                self.match(CSharpParser.ARGLIST)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Parameter_modifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REF(self):
            return self.getToken(CSharpParser.REF, 0)

        def OUT(self):
            return self.getToken(CSharpParser.OUT, 0)

        def IN(self):
            return self.getToken(CSharpParser.IN, 0)

        def THIS(self):
            return self.getToken(CSharpParser.THIS, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_parameter_modifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParameter_modifier" ):
                listener.enterParameter_modifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParameter_modifier" ):
                listener.exitParameter_modifier(self)




    def parameter_modifier(self):

        localctx = CSharpParser.Parameter_modifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 294, self.RULE_parameter_modifier)
        try:
            self.state = 1918
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,222,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1910
                self.match(CSharpParser.REF)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1911
                self.match(CSharpParser.OUT)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1912
                self.match(CSharpParser.IN)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1913
                self.match(CSharpParser.REF)
                self.state = 1914
                self.match(CSharpParser.THIS)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1915
                self.match(CSharpParser.IN)
                self.state = 1916
                self.match(CSharpParser.THIS)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1917
                self.match(CSharpParser.THIS)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Parameter_arrayContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PARAMS(self):
            return self.getToken(CSharpParser.PARAMS, 0)

        def array_type(self):
            return self.getTypedRuleContext(CSharpParser.Array_typeContext,0)


        def identifier(self):
            return self.getTypedRuleContext(CSharpParser.IdentifierContext,0)


        def attributes(self):
            return self.getTypedRuleContext(CSharpParser.AttributesContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_parameter_array

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParameter_array" ):
                listener.enterParameter_array(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParameter_array" ):
                listener.exitParameter_array(self)




    def parameter_array(self):

        localctx = CSharpParser.Parameter_arrayContext(self, self._ctx, self.state)
        self.enterRule(localctx, 296, self.RULE_parameter_array)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1921
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==127:
                self.state = 1920
                self.attributes()


            self.state = 1923
            self.match(CSharpParser.PARAMS)
            self.state = 1924
            self.array_type()
            self.state = 1925
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Accessor_declarationsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.attrs = None # AttributesContext
            self.mods = None # Accessor_modifierContext

        def GET(self):
            return self.getToken(CSharpParser.GET, 0)

        def accessor_body(self):
            return self.getTypedRuleContext(CSharpParser.Accessor_bodyContext,0)


        def SET(self):
            return self.getToken(CSharpParser.SET, 0)

        def attributes(self):
            return self.getTypedRuleContext(CSharpParser.AttributesContext,0)


        def accessor_modifier(self):
            return self.getTypedRuleContext(CSharpParser.Accessor_modifierContext,0)


        def set_accessor_declaration(self):
            return self.getTypedRuleContext(CSharpParser.Set_accessor_declarationContext,0)


        def get_accessor_declaration(self):
            return self.getTypedRuleContext(CSharpParser.Get_accessor_declarationContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_accessor_declarations

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAccessor_declarations" ):
                listener.enterAccessor_declarations(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAccessor_declarations" ):
                listener.exitAccessor_declarations(self)




    def accessor_declarations(self):

        localctx = CSharpParser.Accessor_declarationsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 298, self.RULE_accessor_declarations)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1928
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==127:
                self.state = 1927
                localctx.attrs = self.attributes()


            self.state = 1931
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 57)) & ~0x3f) == 0 and ((1 << (_la - 57)) & 1572865) != 0):
                self.state = 1930
                localctx.mods = self.accessor_modifier()


            self.state = 1943
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [49]:
                self.state = 1933
                self.match(CSharpParser.GET)
                self.state = 1934
                self.accessor_body()
                self.state = 1936
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==57 or ((((_la - 76)) & ~0x3f) == 0 and ((1 << (_la - 76)) & 2251799813686275) != 0):
                    self.state = 1935
                    self.set_accessor_declaration()


                pass
            elif token in [86]:
                self.state = 1938
                self.match(CSharpParser.SET)
                self.state = 1939
                self.accessor_body()
                self.state = 1941
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==49 or _la==57 or ((((_la - 76)) & ~0x3f) == 0 and ((1 << (_la - 76)) & 2251799813685251) != 0):
                    self.state = 1940
                    self.get_accessor_declaration()


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Get_accessor_declarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GET(self):
            return self.getToken(CSharpParser.GET, 0)

        def accessor_body(self):
            return self.getTypedRuleContext(CSharpParser.Accessor_bodyContext,0)


        def attributes(self):
            return self.getTypedRuleContext(CSharpParser.AttributesContext,0)


        def accessor_modifier(self):
            return self.getTypedRuleContext(CSharpParser.Accessor_modifierContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_get_accessor_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGet_accessor_declaration" ):
                listener.enterGet_accessor_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGet_accessor_declaration" ):
                listener.exitGet_accessor_declaration(self)




    def get_accessor_declaration(self):

        localctx = CSharpParser.Get_accessor_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 300, self.RULE_get_accessor_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1946
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==127:
                self.state = 1945
                self.attributes()


            self.state = 1949
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 57)) & ~0x3f) == 0 and ((1 << (_la - 57)) & 1572865) != 0):
                self.state = 1948
                self.accessor_modifier()


            self.state = 1951
            self.match(CSharpParser.GET)
            self.state = 1952
            self.accessor_body()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Set_accessor_declarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SET(self):
            return self.getToken(CSharpParser.SET, 0)

        def accessor_body(self):
            return self.getTypedRuleContext(CSharpParser.Accessor_bodyContext,0)


        def attributes(self):
            return self.getTypedRuleContext(CSharpParser.AttributesContext,0)


        def accessor_modifier(self):
            return self.getTypedRuleContext(CSharpParser.Accessor_modifierContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_set_accessor_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSet_accessor_declaration" ):
                listener.enterSet_accessor_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSet_accessor_declaration" ):
                listener.exitSet_accessor_declaration(self)




    def set_accessor_declaration(self):

        localctx = CSharpParser.Set_accessor_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 302, self.RULE_set_accessor_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1955
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==127:
                self.state = 1954
                self.attributes()


            self.state = 1958
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 57)) & ~0x3f) == 0 and ((1 << (_la - 57)) & 1572865) != 0):
                self.state = 1957
                self.accessor_modifier()


            self.state = 1960
            self.match(CSharpParser.SET)
            self.state = 1961
            self.accessor_body()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Accessor_modifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PROTECTED(self):
            return self.getToken(CSharpParser.PROTECTED, 0)

        def INTERNAL(self):
            return self.getToken(CSharpParser.INTERNAL, 0)

        def PRIVATE(self):
            return self.getToken(CSharpParser.PRIVATE, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_accessor_modifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAccessor_modifier" ):
                listener.enterAccessor_modifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAccessor_modifier" ):
                listener.exitAccessor_modifier(self)




    def accessor_modifier(self):

        localctx = CSharpParser.Accessor_modifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 304, self.RULE_accessor_modifier)
        try:
            self.state = 1970
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,233,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1963
                self.match(CSharpParser.PROTECTED)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1964
                self.match(CSharpParser.INTERNAL)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1965
                self.match(CSharpParser.PRIVATE)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1966
                self.match(CSharpParser.PROTECTED)
                self.state = 1967
                self.match(CSharpParser.INTERNAL)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1968
                self.match(CSharpParser.INTERNAL)
                self.state = 1969
                self.match(CSharpParser.PROTECTED)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Accessor_bodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def block(self):
            return self.getTypedRuleContext(CSharpParser.BlockContext,0)


        def SEMICOLON(self):
            return self.getToken(CSharpParser.SEMICOLON, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_accessor_body

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAccessor_body" ):
                listener.enterAccessor_body(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAccessor_body" ):
                listener.exitAccessor_body(self)




    def accessor_body(self):

        localctx = CSharpParser.Accessor_bodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 306, self.RULE_accessor_body)
        try:
            self.state = 1974
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [125]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1972
                self.block()
                pass
            elif token in [134]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1973
                self.match(CSharpParser.SEMICOLON)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Event_accessor_declarationsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ADD(self):
            return self.getToken(CSharpParser.ADD, 0)

        def block(self):
            return self.getTypedRuleContext(CSharpParser.BlockContext,0)


        def remove_accessor_declaration(self):
            return self.getTypedRuleContext(CSharpParser.Remove_accessor_declarationContext,0)


        def REMOVE(self):
            return self.getToken(CSharpParser.REMOVE, 0)

        def add_accessor_declaration(self):
            return self.getTypedRuleContext(CSharpParser.Add_accessor_declarationContext,0)


        def attributes(self):
            return self.getTypedRuleContext(CSharpParser.AttributesContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_event_accessor_declarations

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEvent_accessor_declarations" ):
                listener.enterEvent_accessor_declarations(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEvent_accessor_declarations" ):
                listener.exitEvent_accessor_declarations(self)




    def event_accessor_declarations(self):

        localctx = CSharpParser.Event_accessor_declarationsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 308, self.RULE_event_accessor_declarations)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1977
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==127:
                self.state = 1976
                self.attributes()


            self.state = 1987
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [10]:
                self.state = 1979
                self.match(CSharpParser.ADD)
                self.state = 1980
                self.block()
                self.state = 1981
                self.remove_accessor_declaration()
                pass
            elif token in [81]:
                self.state = 1983
                self.match(CSharpParser.REMOVE)
                self.state = 1984
                self.block()
                self.state = 1985
                self.add_accessor_declaration()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Add_accessor_declarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ADD(self):
            return self.getToken(CSharpParser.ADD, 0)

        def block(self):
            return self.getTypedRuleContext(CSharpParser.BlockContext,0)


        def attributes(self):
            return self.getTypedRuleContext(CSharpParser.AttributesContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_add_accessor_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAdd_accessor_declaration" ):
                listener.enterAdd_accessor_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAdd_accessor_declaration" ):
                listener.exitAdd_accessor_declaration(self)




    def add_accessor_declaration(self):

        localctx = CSharpParser.Add_accessor_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 310, self.RULE_add_accessor_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1990
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==127:
                self.state = 1989
                self.attributes()


            self.state = 1992
            self.match(CSharpParser.ADD)
            self.state = 1993
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Remove_accessor_declarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REMOVE(self):
            return self.getToken(CSharpParser.REMOVE, 0)

        def block(self):
            return self.getTypedRuleContext(CSharpParser.BlockContext,0)


        def attributes(self):
            return self.getTypedRuleContext(CSharpParser.AttributesContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_remove_accessor_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRemove_accessor_declaration" ):
                listener.enterRemove_accessor_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRemove_accessor_declaration" ):
                listener.exitRemove_accessor_declaration(self)




    def remove_accessor_declaration(self):

        localctx = CSharpParser.Remove_accessor_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 312, self.RULE_remove_accessor_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1996
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==127:
                self.state = 1995
                self.attributes()


            self.state = 1998
            self.match(CSharpParser.REMOVE)
            self.state = 1999
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Overloadable_operatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PLUS(self):
            return self.getToken(CSharpParser.PLUS, 0)

        def MINUS(self):
            return self.getToken(CSharpParser.MINUS, 0)

        def BANG(self):
            return self.getToken(CSharpParser.BANG, 0)

        def TILDE(self):
            return self.getToken(CSharpParser.TILDE, 0)

        def OP_INC(self):
            return self.getToken(CSharpParser.OP_INC, 0)

        def OP_DEC(self):
            return self.getToken(CSharpParser.OP_DEC, 0)

        def TRUE(self):
            return self.getToken(CSharpParser.TRUE, 0)

        def FALSE(self):
            return self.getToken(CSharpParser.FALSE, 0)

        def STAR(self):
            return self.getToken(CSharpParser.STAR, 0)

        def DIV(self):
            return self.getToken(CSharpParser.DIV, 0)

        def PERCENT(self):
            return self.getToken(CSharpParser.PERCENT, 0)

        def AMP(self):
            return self.getToken(CSharpParser.AMP, 0)

        def BITWISE_OR(self):
            return self.getToken(CSharpParser.BITWISE_OR, 0)

        def CARET(self):
            return self.getToken(CSharpParser.CARET, 0)

        def OP_LEFT_SHIFT(self):
            return self.getToken(CSharpParser.OP_LEFT_SHIFT, 0)

        def right_shift(self):
            return self.getTypedRuleContext(CSharpParser.Right_shiftContext,0)


        def OP_EQ(self):
            return self.getToken(CSharpParser.OP_EQ, 0)

        def OP_NE(self):
            return self.getToken(CSharpParser.OP_NE, 0)

        def GT(self):
            return self.getToken(CSharpParser.GT, 0)

        def LT(self):
            return self.getToken(CSharpParser.LT, 0)

        def OP_GE(self):
            return self.getToken(CSharpParser.OP_GE, 0)

        def OP_LE(self):
            return self.getToken(CSharpParser.OP_LE, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_overloadable_operator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOverloadable_operator" ):
                listener.enterOverloadable_operator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOverloadable_operator" ):
                listener.exitOverloadable_operator(self)




    def overloadable_operator(self):

        localctx = CSharpParser.Overloadable_operatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 314, self.RULE_overloadable_operator)
        try:
            self.state = 2023
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,239,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2001
                self.match(CSharpParser.PLUS)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2002
                self.match(CSharpParser.MINUS)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2003
                self.match(CSharpParser.BANG)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2004
                self.match(CSharpParser.TILDE)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 2005
                self.match(CSharpParser.OP_INC)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 2006
                self.match(CSharpParser.OP_DEC)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 2007
                self.match(CSharpParser.TRUE)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 2008
                self.match(CSharpParser.FALSE)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 2009
                self.match(CSharpParser.STAR)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 2010
                self.match(CSharpParser.DIV)
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 2011
                self.match(CSharpParser.PERCENT)
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 2012
                self.match(CSharpParser.AMP)
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 2013
                self.match(CSharpParser.BITWISE_OR)
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 2014
                self.match(CSharpParser.CARET)
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 2015
                self.match(CSharpParser.OP_LEFT_SHIFT)
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 2016
                self.right_shift()
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 2017
                self.match(CSharpParser.OP_EQ)
                pass

            elif la_ == 18:
                self.enterOuterAlt(localctx, 18)
                self.state = 2018
                self.match(CSharpParser.OP_NE)
                pass

            elif la_ == 19:
                self.enterOuterAlt(localctx, 19)
                self.state = 2019
                self.match(CSharpParser.GT)
                pass

            elif la_ == 20:
                self.enterOuterAlt(localctx, 20)
                self.state = 2020
                self.match(CSharpParser.LT)
                pass

            elif la_ == 21:
                self.enterOuterAlt(localctx, 21)
                self.state = 2021
                self.match(CSharpParser.OP_GE)
                pass

            elif la_ == 22:
                self.enterOuterAlt(localctx, 22)
                self.state = 2022
                self.match(CSharpParser.OP_LE)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Conversion_operator_declaratorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPERATOR(self):
            return self.getToken(CSharpParser.OPERATOR, 0)

        def type_(self):
            return self.getTypedRuleContext(CSharpParser.Type_Context,0)


        def OPEN_PARENS(self):
            return self.getToken(CSharpParser.OPEN_PARENS, 0)

        def arg_declaration(self):
            return self.getTypedRuleContext(CSharpParser.Arg_declarationContext,0)


        def CLOSE_PARENS(self):
            return self.getToken(CSharpParser.CLOSE_PARENS, 0)

        def IMPLICIT(self):
            return self.getToken(CSharpParser.IMPLICIT, 0)

        def EXPLICIT(self):
            return self.getToken(CSharpParser.EXPLICIT, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_conversion_operator_declarator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConversion_operator_declarator" ):
                listener.enterConversion_operator_declarator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConversion_operator_declarator" ):
                listener.exitConversion_operator_declarator(self)




    def conversion_operator_declarator(self):

        localctx = CSharpParser.Conversion_operator_declaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 316, self.RULE_conversion_operator_declarator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2025
            _la = self._input.LA(1)
            if not(_la==40 or _la==53):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 2026
            self.match(CSharpParser.OPERATOR)
            self.state = 2027
            self.type_()
            self.state = 2028
            self.match(CSharpParser.OPEN_PARENS)
            self.state = 2029
            self.arg_declaration()
            self.state = 2030
            self.match(CSharpParser.CLOSE_PARENS)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Constructor_initializerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COLON(self):
            return self.getToken(CSharpParser.COLON, 0)

        def OPEN_PARENS(self):
            return self.getToken(CSharpParser.OPEN_PARENS, 0)

        def CLOSE_PARENS(self):
            return self.getToken(CSharpParser.CLOSE_PARENS, 0)

        def BASE(self):
            return self.getToken(CSharpParser.BASE, 0)

        def THIS(self):
            return self.getToken(CSharpParser.THIS, 0)

        def argument_list(self):
            return self.getTypedRuleContext(CSharpParser.Argument_listContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_constructor_initializer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstructor_initializer" ):
                listener.enterConstructor_initializer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstructor_initializer" ):
                listener.exitConstructor_initializer(self)




    def constructor_initializer(self):

        localctx = CSharpParser.Constructor_initializerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 318, self.RULE_constructor_initializer)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2032
            self.match(CSharpParser.COLON)
            self.state = 2033
            _la = self._input.LA(1)
            if not(_la==17 or _la==94):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 2034
            self.match(CSharpParser.OPEN_PARENS)
            self.state = 2036
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & -5419197809667089408) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 2305514793348041149) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & 4398059153857) != 0):
                self.state = 2035
                self.argument_list()


            self.state = 2038
            self.match(CSharpParser.CLOSE_PARENS)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def block(self):
            return self.getTypedRuleContext(CSharpParser.BlockContext,0)


        def SEMICOLON(self):
            return self.getToken(CSharpParser.SEMICOLON, 0)

        def right_arrow(self):
            return self.getTypedRuleContext(CSharpParser.Right_arrowContext,0)


        def expression(self):
            return self.getTypedRuleContext(CSharpParser.ExpressionContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_body

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBody" ):
                listener.enterBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBody" ):
                listener.exitBody(self)




    def body(self):

        localctx = CSharpParser.BodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 320, self.RULE_body)
        try:
            self.state = 2046
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [125]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2040
                self.block()
                pass
            elif token in [134]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2041
                self.match(CSharpParser.SEMICOLON)
                pass
            elif token in [145]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2042
                self.right_arrow()
                self.state = 2043
                self.expression()
                self.state = 2044
                self.match(CSharpParser.SEMICOLON)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Struct_interfacesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COLON(self):
            return self.getToken(CSharpParser.COLON, 0)

        def interface_type_list(self):
            return self.getTypedRuleContext(CSharpParser.Interface_type_listContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_struct_interfaces

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStruct_interfaces" ):
                listener.enterStruct_interfaces(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStruct_interfaces" ):
                listener.exitStruct_interfaces(self)




    def struct_interfaces(self):

        localctx = CSharpParser.Struct_interfacesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 322, self.RULE_struct_interfaces)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2048
            self.match(CSharpParser.COLON)
            self.state = 2049
            self.interface_type_list()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Struct_bodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_BRACE(self):
            return self.getToken(CSharpParser.OPEN_BRACE, 0)

        def CLOSE_BRACE(self):
            return self.getToken(CSharpParser.CLOSE_BRACE, 0)

        def struct_member_declaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Struct_member_declarationContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Struct_member_declarationContext,i)


        def getRuleIndex(self):
            return CSharpParser.RULE_struct_body

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStruct_body" ):
                listener.enterStruct_body(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStruct_body" ):
                listener.exitStruct_body(self)




    def struct_body(self):

        localctx = CSharpParser.Struct_bodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 324, self.RULE_struct_body)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2051
            self.match(CSharpParser.OPEN_BRACE)
            self.state = 2055
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 9)) & ~0x3f) == 0 and ((1 << (_la - 9)) & 6547061340561119983) != 0) or ((((_la - 73)) & ~0x3f) == 0 and ((1 << (_la - 73)) & 90075836208545277) != 0):
                self.state = 2052
                self.struct_member_declaration()
                self.state = 2057
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2058
            self.match(CSharpParser.CLOSE_BRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Struct_member_declarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def common_member_declaration(self):
            return self.getTypedRuleContext(CSharpParser.Common_member_declarationContext,0)


        def FIXED(self):
            return self.getToken(CSharpParser.FIXED, 0)

        def type_(self):
            return self.getTypedRuleContext(CSharpParser.Type_Context,0)


        def SEMICOLON(self):
            return self.getToken(CSharpParser.SEMICOLON, 0)

        def attributes(self):
            return self.getTypedRuleContext(CSharpParser.AttributesContext,0)


        def all_member_modifiers(self):
            return self.getTypedRuleContext(CSharpParser.All_member_modifiersContext,0)


        def fixed_size_buffer_declarator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Fixed_size_buffer_declaratorContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Fixed_size_buffer_declaratorContext,i)


        def getRuleIndex(self):
            return CSharpParser.RULE_struct_member_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStruct_member_declaration" ):
                listener.enterStruct_member_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStruct_member_declaration" ):
                listener.exitStruct_member_declaration(self)




    def struct_member_declaration(self):

        localctx = CSharpParser.Struct_member_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 326, self.RULE_struct_member_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2061
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==127:
                self.state = 2060
                self.attributes()


            self.state = 2064
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,244,self._ctx)
            if la_ == 1:
                self.state = 2063
                self.all_member_modifiers()


            self.state = 2076
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [10, 11, 12, 14, 15, 16, 18, 20, 21, 24, 26, 27, 29, 31, 32, 34, 35, 37, 38, 39, 40, 45, 48, 49, 51, 53, 55, 56, 58, 60, 61, 63, 64, 68, 69, 71, 75, 79, 80, 81, 83, 85, 86, 87, 91, 92, 99, 100, 102, 104, 106, 108, 110, 111, 113, 114, 129]:
                self.state = 2066
                self.common_member_declaration()
                pass
            elif token in [44]:
                self.state = 2067
                self.match(CSharpParser.FIXED)
                self.state = 2068
                self.type_()
                self.state = 2070 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 2069
                    self.fixed_size_buffer_declarator()
                    self.state = 2072 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & 3750091428249852928) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 1904629023639713) != 0)):
                        break

                self.state = 2074
                self.match(CSharpParser.SEMICOLON)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Array_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def base_type(self):
            return self.getTypedRuleContext(CSharpParser.Base_typeContext,0)


        def rank_specifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Rank_specifierContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Rank_specifierContext,i)


        def STAR(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.STAR)
            else:
                return self.getToken(CSharpParser.STAR, i)

        def INTERR(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.INTERR)
            else:
                return self.getToken(CSharpParser.INTERR, i)

        def getRuleIndex(self):
            return CSharpParser.RULE_array_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArray_type" ):
                listener.enterArray_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArray_type" ):
                listener.exitArray_type(self)




    def array_type(self):

        localctx = CSharpParser.Array_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 328, self.RULE_array_type)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2078
            self.base_type()
            self.state = 2086 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 2082
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==137 or _la==148:
                    self.state = 2079
                    _la = self._input.LA(1)
                    if not(_la==137 or _la==148):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 2084
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2085
                self.rank_specifier()
                self.state = 2088 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (((((_la - 127)) & ~0x3f) == 0 and ((1 << (_la - 127)) & 2098177) != 0)):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Rank_specifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_BRACKET(self):
            return self.getToken(CSharpParser.OPEN_BRACKET, 0)

        def CLOSE_BRACKET(self):
            return self.getToken(CSharpParser.CLOSE_BRACKET, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.COMMA)
            else:
                return self.getToken(CSharpParser.COMMA, i)

        def getRuleIndex(self):
            return CSharpParser.RULE_rank_specifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRank_specifier" ):
                listener.enterRank_specifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRank_specifier" ):
                listener.exitRank_specifier(self)




    def rank_specifier(self):

        localctx = CSharpParser.Rank_specifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 330, self.RULE_rank_specifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2090
            self.match(CSharpParser.OPEN_BRACKET)
            self.state = 2094
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==132:
                self.state = 2091
                self.match(CSharpParser.COMMA)
                self.state = 2096
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2097
            self.match(CSharpParser.CLOSE_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Array_initializerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_BRACE(self):
            return self.getToken(CSharpParser.OPEN_BRACE, 0)

        def CLOSE_BRACE(self):
            return self.getToken(CSharpParser.CLOSE_BRACE, 0)

        def variable_initializer(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Variable_initializerContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Variable_initializerContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.COMMA)
            else:
                return self.getToken(CSharpParser.COMMA, i)

        def getRuleIndex(self):
            return CSharpParser.RULE_array_initializer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArray_initializer" ):
                listener.enterArray_initializer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArray_initializer" ):
                listener.exitArray_initializer(self)




    def array_initializer(self):

        localctx = CSharpParser.Array_initializerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 332, self.RULE_array_initializer)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2099
            self.match(CSharpParser.OPEN_BRACE)
            self.state = 2111
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & -5437212208176571392) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 4611340210375690429) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & 4398059153857) != 0):
                self.state = 2100
                self.variable_initializer()
                self.state = 2105
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,250,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2101
                        self.match(CSharpParser.COMMA)
                        self.state = 2102
                        self.variable_initializer() 
                    self.state = 2107
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,250,self._ctx)

                self.state = 2109
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==132:
                    self.state = 2108
                    self.match(CSharpParser.COMMA)




            self.state = 2113
            self.match(CSharpParser.CLOSE_BRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Variant_type_parameter_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LT(self):
            return self.getToken(CSharpParser.LT, 0)

        def variant_type_parameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Variant_type_parameterContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Variant_type_parameterContext,i)


        def GT(self):
            return self.getToken(CSharpParser.GT, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.COMMA)
            else:
                return self.getToken(CSharpParser.COMMA, i)

        def getRuleIndex(self):
            return CSharpParser.RULE_variant_type_parameter_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariant_type_parameter_list" ):
                listener.enterVariant_type_parameter_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariant_type_parameter_list" ):
                listener.exitVariant_type_parameter_list(self)




    def variant_type_parameter_list(self):

        localctx = CSharpParser.Variant_type_parameter_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 334, self.RULE_variant_type_parameter_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2115
            self.match(CSharpParser.LT)
            self.state = 2116
            self.variant_type_parameter()
            self.state = 2121
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==132:
                self.state = 2117
                self.match(CSharpParser.COMMA)
                self.state = 2118
                self.variant_type_parameter()
                self.state = 2123
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2124
            self.match(CSharpParser.GT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Variant_type_parameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(CSharpParser.IdentifierContext,0)


        def attributes(self):
            return self.getTypedRuleContext(CSharpParser.AttributesContext,0)


        def variance_annotation(self):
            return self.getTypedRuleContext(CSharpParser.Variance_annotationContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_variant_type_parameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariant_type_parameter" ):
                listener.enterVariant_type_parameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariant_type_parameter" ):
                listener.exitVariant_type_parameter(self)




    def variant_type_parameter(self):

        localctx = CSharpParser.Variant_type_parameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 336, self.RULE_variant_type_parameter)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2127
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==127:
                self.state = 2126
                self.attributes()


            self.state = 2130
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==54 or _la==72:
                self.state = 2129
                self.variance_annotation()


            self.state = 2132
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Variance_annotationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IN(self):
            return self.getToken(CSharpParser.IN, 0)

        def OUT(self):
            return self.getToken(CSharpParser.OUT, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_variance_annotation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariance_annotation" ):
                listener.enterVariance_annotation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariance_annotation" ):
                listener.exitVariance_annotation(self)




    def variance_annotation(self):

        localctx = CSharpParser.Variance_annotationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 338, self.RULE_variance_annotation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2134
            _la = self._input.LA(1)
            if not(_la==54 or _la==72):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Interface_baseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COLON(self):
            return self.getToken(CSharpParser.COLON, 0)

        def interface_type_list(self):
            return self.getTypedRuleContext(CSharpParser.Interface_type_listContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_interface_base

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterface_base" ):
                listener.enterInterface_base(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterface_base" ):
                listener.exitInterface_base(self)




    def interface_base(self):

        localctx = CSharpParser.Interface_baseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 340, self.RULE_interface_base)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2136
            self.match(CSharpParser.COLON)
            self.state = 2137
            self.interface_type_list()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Interface_bodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_BRACE(self):
            return self.getToken(CSharpParser.OPEN_BRACE, 0)

        def CLOSE_BRACE(self):
            return self.getToken(CSharpParser.CLOSE_BRACE, 0)

        def interface_member_declaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Interface_member_declarationContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Interface_member_declarationContext,i)


        def getRuleIndex(self):
            return CSharpParser.RULE_interface_body

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterface_body" ):
                listener.enterInterface_body(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterface_body" ):
                listener.exitInterface_body(self)




    def interface_body(self):

        localctx = CSharpParser.Interface_bodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 342, self.RULE_interface_body)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2139
            self.match(CSharpParser.OPEN_BRACE)
            self.state = 2143
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 10)) & ~0x3f) == 0 and ((1 << (_la - 10)) & 3273310747417398647) != 0) or ((((_la - 75)) & ~0x3f) == 0 and ((1 << (_la - 75)) & 22518937577135473) != 0):
                self.state = 2140
                self.interface_member_declaration()
                self.state = 2145
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2146
            self.match(CSharpParser.CLOSE_BRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Interface_member_declarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def type_(self):
            return self.getTypedRuleContext(CSharpParser.Type_Context,0)


        def VOID(self):
            return self.getToken(CSharpParser.VOID, 0)

        def identifier(self):
            return self.getTypedRuleContext(CSharpParser.IdentifierContext,0)


        def OPEN_PARENS(self):
            return self.getToken(CSharpParser.OPEN_PARENS, 0)

        def CLOSE_PARENS(self):
            return self.getToken(CSharpParser.CLOSE_PARENS, 0)

        def SEMICOLON(self):
            return self.getToken(CSharpParser.SEMICOLON, 0)

        def EVENT(self):
            return self.getToken(CSharpParser.EVENT, 0)

        def attributes(self):
            return self.getTypedRuleContext(CSharpParser.AttributesContext,0)


        def NEW(self):
            return self.getToken(CSharpParser.NEW, 0)

        def OPEN_BRACE(self):
            return self.getToken(CSharpParser.OPEN_BRACE, 0)

        def interface_accessors(self):
            return self.getTypedRuleContext(CSharpParser.Interface_accessorsContext,0)


        def CLOSE_BRACE(self):
            return self.getToken(CSharpParser.CLOSE_BRACE, 0)

        def THIS(self):
            return self.getToken(CSharpParser.THIS, 0)

        def OPEN_BRACKET(self):
            return self.getToken(CSharpParser.OPEN_BRACKET, 0)

        def formal_parameter_list(self):
            return self.getTypedRuleContext(CSharpParser.Formal_parameter_listContext,0)


        def CLOSE_BRACKET(self):
            return self.getToken(CSharpParser.CLOSE_BRACKET, 0)

        def UNSAFE(self):
            return self.getToken(CSharpParser.UNSAFE, 0)

        def REF(self):
            return self.getToken(CSharpParser.REF, 0)

        def READONLY(self):
            return self.getToken(CSharpParser.READONLY, 0)

        def type_parameter_list(self):
            return self.getTypedRuleContext(CSharpParser.Type_parameter_listContext,0)


        def type_parameter_constraints_clauses(self):
            return self.getTypedRuleContext(CSharpParser.Type_parameter_constraints_clausesContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_interface_member_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterface_member_declaration" ):
                listener.enterInterface_member_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterface_member_declaration" ):
                listener.exitInterface_member_declaration(self)




    def interface_member_declaration(self):

        localctx = CSharpParser.Interface_member_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 344, self.RULE_interface_member_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2149
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==127:
                self.state = 2148
                self.attributes()


            self.state = 2152
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==66:
                self.state = 2151
                self.match(CSharpParser.NEW)


            self.state = 2217
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,269,self._ctx)
            if la_ == 1:
                self.state = 2155
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==103:
                    self.state = 2154
                    self.match(CSharpParser.UNSAFE)


                self.state = 2162
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,260,self._ctx)
                if la_ == 1:
                    self.state = 2157
                    self.match(CSharpParser.REF)

                elif la_ == 2:
                    self.state = 2158
                    self.match(CSharpParser.REF)
                    self.state = 2159
                    self.match(CSharpParser.READONLY)

                elif la_ == 3:
                    self.state = 2160
                    self.match(CSharpParser.READONLY)
                    self.state = 2161
                    self.match(CSharpParser.REF)


                self.state = 2164
                self.type_()
                self.state = 2192
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,264,self._ctx)
                if la_ == 1:
                    self.state = 2165
                    self.identifier()
                    self.state = 2167
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==146:
                        self.state = 2166
                        self.type_parameter_list()


                    self.state = 2169
                    self.match(CSharpParser.OPEN_PARENS)
                    self.state = 2171
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if ((((_la - 10)) & ~0x3f) == 0 and ((1 << (_la - 10)) & 7812956763456032119) != 0) or ((((_la - 74)) & ~0x3f) == 0 and ((1 << (_la - 74)) & 45037874618448579) != 0):
                        self.state = 2170
                        self.formal_parameter_list()


                    self.state = 2173
                    self.match(CSharpParser.CLOSE_PARENS)
                    self.state = 2175
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==111:
                        self.state = 2174
                        self.type_parameter_constraints_clauses()


                    self.state = 2177
                    self.match(CSharpParser.SEMICOLON)
                    pass

                elif la_ == 2:
                    self.state = 2179
                    self.identifier()
                    self.state = 2180
                    self.match(CSharpParser.OPEN_BRACE)
                    self.state = 2181
                    self.interface_accessors()
                    self.state = 2182
                    self.match(CSharpParser.CLOSE_BRACE)
                    pass

                elif la_ == 3:
                    self.state = 2184
                    self.match(CSharpParser.THIS)
                    self.state = 2185
                    self.match(CSharpParser.OPEN_BRACKET)
                    self.state = 2186
                    self.formal_parameter_list()
                    self.state = 2187
                    self.match(CSharpParser.CLOSE_BRACKET)
                    self.state = 2188
                    self.match(CSharpParser.OPEN_BRACE)
                    self.state = 2189
                    self.interface_accessors()
                    self.state = 2190
                    self.match(CSharpParser.CLOSE_BRACE)
                    pass


                pass

            elif la_ == 2:
                self.state = 2195
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==103:
                    self.state = 2194
                    self.match(CSharpParser.UNSAFE)


                self.state = 2197
                self.match(CSharpParser.VOID)
                self.state = 2198
                self.identifier()
                self.state = 2200
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==146:
                    self.state = 2199
                    self.type_parameter_list()


                self.state = 2202
                self.match(CSharpParser.OPEN_PARENS)
                self.state = 2204
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 10)) & ~0x3f) == 0 and ((1 << (_la - 10)) & 7812956763456032119) != 0) or ((((_la - 74)) & ~0x3f) == 0 and ((1 << (_la - 74)) & 45037874618448579) != 0):
                    self.state = 2203
                    self.formal_parameter_list()


                self.state = 2206
                self.match(CSharpParser.CLOSE_PARENS)
                self.state = 2208
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==111:
                    self.state = 2207
                    self.type_parameter_constraints_clauses()


                self.state = 2210
                self.match(CSharpParser.SEMICOLON)
                pass

            elif la_ == 3:
                self.state = 2212
                self.match(CSharpParser.EVENT)
                self.state = 2213
                self.type_()
                self.state = 2214
                self.identifier()
                self.state = 2215
                self.match(CSharpParser.SEMICOLON)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Interface_accessorsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GET(self):
            return self.getToken(CSharpParser.GET, 0)

        def SEMICOLON(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.SEMICOLON)
            else:
                return self.getToken(CSharpParser.SEMICOLON, i)

        def SET(self):
            return self.getToken(CSharpParser.SET, 0)

        def attributes(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.AttributesContext)
            else:
                return self.getTypedRuleContext(CSharpParser.AttributesContext,i)


        def getRuleIndex(self):
            return CSharpParser.RULE_interface_accessors

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterface_accessors" ):
                listener.enterInterface_accessors(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterface_accessors" ):
                listener.exitInterface_accessors(self)




    def interface_accessors(self):

        localctx = CSharpParser.Interface_accessorsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 346, self.RULE_interface_accessors)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2220
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==127:
                self.state = 2219
                self.attributes()


            self.state = 2240
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [49]:
                self.state = 2222
                self.match(CSharpParser.GET)
                self.state = 2223
                self.match(CSharpParser.SEMICOLON)
                self.state = 2229
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==86 or _la==127:
                    self.state = 2225
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==127:
                        self.state = 2224
                        self.attributes()


                    self.state = 2227
                    self.match(CSharpParser.SET)
                    self.state = 2228
                    self.match(CSharpParser.SEMICOLON)


                pass
            elif token in [86]:
                self.state = 2231
                self.match(CSharpParser.SET)
                self.state = 2232
                self.match(CSharpParser.SEMICOLON)
                self.state = 2238
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==49 or _la==127:
                    self.state = 2234
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==127:
                        self.state = 2233
                        self.attributes()


                    self.state = 2236
                    self.match(CSharpParser.GET)
                    self.state = 2237
                    self.match(CSharpParser.SEMICOLON)


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Enum_baseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COLON(self):
            return self.getToken(CSharpParser.COLON, 0)

        def type_(self):
            return self.getTypedRuleContext(CSharpParser.Type_Context,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_enum_base

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnum_base" ):
                listener.enterEnum_base(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnum_base" ):
                listener.exitEnum_base(self)




    def enum_base(self):

        localctx = CSharpParser.Enum_baseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 348, self.RULE_enum_base)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2242
            self.match(CSharpParser.COLON)
            self.state = 2243
            self.type_()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Enum_bodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_BRACE(self):
            return self.getToken(CSharpParser.OPEN_BRACE, 0)

        def CLOSE_BRACE(self):
            return self.getToken(CSharpParser.CLOSE_BRACE, 0)

        def enum_member_declaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Enum_member_declarationContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Enum_member_declarationContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.COMMA)
            else:
                return self.getToken(CSharpParser.COMMA, i)

        def getRuleIndex(self):
            return CSharpParser.RULE_enum_body

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnum_body" ):
                listener.enterEnum_body(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnum_body" ):
                listener.exitEnum_body(self)




    def enum_body(self):

        localctx = CSharpParser.Enum_bodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 350, self.RULE_enum_body)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2245
            self.match(CSharpParser.OPEN_BRACE)
            self.state = 2257
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 3750091428249852928) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -9221467407831136095) != 0):
                self.state = 2246
                self.enum_member_declaration()
                self.state = 2251
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,276,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2247
                        self.match(CSharpParser.COMMA)
                        self.state = 2248
                        self.enum_member_declaration() 
                    self.state = 2253
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,276,self._ctx)

                self.state = 2255
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==132:
                    self.state = 2254
                    self.match(CSharpParser.COMMA)




            self.state = 2259
            self.match(CSharpParser.CLOSE_BRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Enum_member_declarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(CSharpParser.IdentifierContext,0)


        def attributes(self):
            return self.getTypedRuleContext(CSharpParser.AttributesContext,0)


        def ASSIGNMENT(self):
            return self.getToken(CSharpParser.ASSIGNMENT, 0)

        def expression(self):
            return self.getTypedRuleContext(CSharpParser.ExpressionContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_enum_member_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnum_member_declaration" ):
                listener.enterEnum_member_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnum_member_declaration" ):
                listener.exitEnum_member_declaration(self)




    def enum_member_declaration(self):

        localctx = CSharpParser.Enum_member_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 352, self.RULE_enum_member_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2262
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==127:
                self.state = 2261
                self.attributes()


            self.state = 2264
            self.identifier()
            self.state = 2267
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==145:
                self.state = 2265
                self.match(CSharpParser.ASSIGNMENT)
                self.state = 2266
                self.expression()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Global_attribute_sectionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_BRACKET(self):
            return self.getToken(CSharpParser.OPEN_BRACKET, 0)

        def global_attribute_target(self):
            return self.getTypedRuleContext(CSharpParser.Global_attribute_targetContext,0)


        def COLON(self):
            return self.getToken(CSharpParser.COLON, 0)

        def attribute_list(self):
            return self.getTypedRuleContext(CSharpParser.Attribute_listContext,0)


        def CLOSE_BRACKET(self):
            return self.getToken(CSharpParser.CLOSE_BRACKET, 0)

        def COMMA(self):
            return self.getToken(CSharpParser.COMMA, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_global_attribute_section

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGlobal_attribute_section" ):
                listener.enterGlobal_attribute_section(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGlobal_attribute_section" ):
                listener.exitGlobal_attribute_section(self)




    def global_attribute_section(self):

        localctx = CSharpParser.Global_attribute_sectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 354, self.RULE_global_attribute_section)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2269
            self.match(CSharpParser.OPEN_BRACKET)
            self.state = 2270
            self.global_attribute_target()
            self.state = 2271
            self.match(CSharpParser.COLON)
            self.state = 2272
            self.attribute_list()
            self.state = 2274
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==132:
                self.state = 2273
                self.match(CSharpParser.COMMA)


            self.state = 2276
            self.match(CSharpParser.CLOSE_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Global_attribute_targetContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def keyword(self):
            return self.getTypedRuleContext(CSharpParser.KeywordContext,0)


        def identifier(self):
            return self.getTypedRuleContext(CSharpParser.IdentifierContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_global_attribute_target

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGlobal_attribute_target" ):
                listener.enterGlobal_attribute_target(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGlobal_attribute_target" ):
                listener.exitGlobal_attribute_target(self)




    def global_attribute_target(self):

        localctx = CSharpParser.Global_attribute_targetContext(self, self._ctx, self.state)
        self.enterRule(localctx, 356, self.RULE_global_attribute_target)
        try:
            self.state = 2280
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,282,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2278
                self.keyword()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2279
                self.identifier()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AttributesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def attribute_section(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Attribute_sectionContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Attribute_sectionContext,i)


        def getRuleIndex(self):
            return CSharpParser.RULE_attributes

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttributes" ):
                listener.enterAttributes(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttributes" ):
                listener.exitAttributes(self)




    def attributes(self):

        localctx = CSharpParser.AttributesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 358, self.RULE_attributes)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2283 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 2282
                self.attribute_section()
                self.state = 2285 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==127):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Attribute_sectionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_BRACKET(self):
            return self.getToken(CSharpParser.OPEN_BRACKET, 0)

        def attribute_list(self):
            return self.getTypedRuleContext(CSharpParser.Attribute_listContext,0)


        def CLOSE_BRACKET(self):
            return self.getToken(CSharpParser.CLOSE_BRACKET, 0)

        def attribute_target(self):
            return self.getTypedRuleContext(CSharpParser.Attribute_targetContext,0)


        def COLON(self):
            return self.getToken(CSharpParser.COLON, 0)

        def COMMA(self):
            return self.getToken(CSharpParser.COMMA, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_attribute_section

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttribute_section" ):
                listener.enterAttribute_section(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttribute_section" ):
                listener.exitAttribute_section(self)




    def attribute_section(self):

        localctx = CSharpParser.Attribute_sectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 360, self.RULE_attribute_section)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2287
            self.match(CSharpParser.OPEN_BRACKET)
            self.state = 2291
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,284,self._ctx)
            if la_ == 1:
                self.state = 2288
                self.attribute_target()
                self.state = 2289
                self.match(CSharpParser.COLON)


            self.state = 2293
            self.attribute_list()
            self.state = 2295
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==132:
                self.state = 2294
                self.match(CSharpParser.COMMA)


            self.state = 2297
            self.match(CSharpParser.CLOSE_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Attribute_targetContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def keyword(self):
            return self.getTypedRuleContext(CSharpParser.KeywordContext,0)


        def identifier(self):
            return self.getTypedRuleContext(CSharpParser.IdentifierContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_attribute_target

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttribute_target" ):
                listener.enterAttribute_target(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttribute_target" ):
                listener.exitAttribute_target(self)




    def attribute_target(self):

        localctx = CSharpParser.Attribute_targetContext(self, self._ctx, self.state)
        self.enterRule(localctx, 362, self.RULE_attribute_target)
        try:
            self.state = 2301
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,286,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2299
                self.keyword()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2300
                self.identifier()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Attribute_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def attribute(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.AttributeContext)
            else:
                return self.getTypedRuleContext(CSharpParser.AttributeContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.COMMA)
            else:
                return self.getToken(CSharpParser.COMMA, i)

        def getRuleIndex(self):
            return CSharpParser.RULE_attribute_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttribute_list" ):
                listener.enterAttribute_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttribute_list" ):
                listener.exitAttribute_list(self)




    def attribute_list(self):

        localctx = CSharpParser.Attribute_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 364, self.RULE_attribute_list)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2303
            self.attribute()
            self.state = 2308
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,287,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2304
                    self.match(CSharpParser.COMMA)
                    self.state = 2305
                    self.attribute() 
                self.state = 2310
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,287,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AttributeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def namespace_or_type_name(self):
            return self.getTypedRuleContext(CSharpParser.Namespace_or_type_nameContext,0)


        def OPEN_PARENS(self):
            return self.getToken(CSharpParser.OPEN_PARENS, 0)

        def CLOSE_PARENS(self):
            return self.getToken(CSharpParser.CLOSE_PARENS, 0)

        def attribute_argument(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Attribute_argumentContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Attribute_argumentContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.COMMA)
            else:
                return self.getToken(CSharpParser.COMMA, i)

        def getRuleIndex(self):
            return CSharpParser.RULE_attribute

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttribute" ):
                listener.enterAttribute(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttribute" ):
                listener.exitAttribute(self)




    def attribute(self):

        localctx = CSharpParser.AttributeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 366, self.RULE_attribute)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2311
            self.namespace_or_type_name()
            self.state = 2324
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==129:
                self.state = 2312
                self.match(CSharpParser.OPEN_PARENS)
                self.state = 2321
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -5437212208176571392) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 2305497201161996477) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & 4398059153857) != 0):
                    self.state = 2313
                    self.attribute_argument()
                    self.state = 2318
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==132:
                        self.state = 2314
                        self.match(CSharpParser.COMMA)
                        self.state = 2315
                        self.attribute_argument()
                        self.state = 2320
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 2323
                self.match(CSharpParser.CLOSE_PARENS)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Attribute_argumentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(CSharpParser.ExpressionContext,0)


        def identifier(self):
            return self.getTypedRuleContext(CSharpParser.IdentifierContext,0)


        def COLON(self):
            return self.getToken(CSharpParser.COLON, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_attribute_argument

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttribute_argument" ):
                listener.enterAttribute_argument(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttribute_argument" ):
                listener.exitAttribute_argument(self)




    def attribute_argument(self):

        localctx = CSharpParser.Attribute_argumentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 368, self.RULE_attribute_argument)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2329
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,291,self._ctx)
            if la_ == 1:
                self.state = 2326
                self.identifier()
                self.state = 2327
                self.match(CSharpParser.COLON)


            self.state = 2331
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pointer_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STAR(self):
            return self.getToken(CSharpParser.STAR, 0)

        def simple_type(self):
            return self.getTypedRuleContext(CSharpParser.Simple_typeContext,0)


        def class_type(self):
            return self.getTypedRuleContext(CSharpParser.Class_typeContext,0)


        def rank_specifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Rank_specifierContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Rank_specifierContext,i)


        def INTERR(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.INTERR)
            else:
                return self.getToken(CSharpParser.INTERR, i)

        def VOID(self):
            return self.getToken(CSharpParser.VOID, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_pointer_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPointer_type" ):
                listener.enterPointer_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPointer_type" ):
                listener.exitPointer_type(self)




    def pointer_type(self):

        localctx = CSharpParser.Pointer_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 370, self.RULE_pointer_type)
        self._la = 0 # Token type
        try:
            self.state = 2348
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [10, 11, 12, 14, 15, 16, 18, 20, 21, 24, 29, 32, 34, 35, 38, 45, 48, 49, 51, 55, 58, 60, 61, 63, 64, 68, 69, 71, 75, 81, 83, 85, 86, 87, 91, 99, 100, 102, 104, 106, 110, 111, 113, 114]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2335
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [18, 21, 24, 29, 34, 45, 55, 63, 83, 87, 99, 100, 104]:
                    self.state = 2333
                    self.simple_type()
                    pass
                elif token in [10, 11, 12, 14, 15, 16, 20, 32, 35, 38, 48, 49, 51, 58, 60, 61, 64, 68, 69, 71, 75, 81, 85, 86, 91, 102, 106, 110, 111, 113, 114]:
                    self.state = 2334
                    self.class_type()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 2341
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==127 or _la==148:
                    self.state = 2339
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [127]:
                        self.state = 2337
                        self.rank_specifier()
                        pass
                    elif token in [148]:
                        self.state = 2338
                        self.match(CSharpParser.INTERR)
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 2343
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2344
                self.match(CSharpParser.STAR)
                pass
            elif token in [108]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2346
                self.match(CSharpParser.VOID)
                self.state = 2347
                self.match(CSharpParser.STAR)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Fixed_pointer_declaratorsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fixed_pointer_declarator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Fixed_pointer_declaratorContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Fixed_pointer_declaratorContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.COMMA)
            else:
                return self.getToken(CSharpParser.COMMA, i)

        def getRuleIndex(self):
            return CSharpParser.RULE_fixed_pointer_declarators

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFixed_pointer_declarators" ):
                listener.enterFixed_pointer_declarators(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFixed_pointer_declarators" ):
                listener.exitFixed_pointer_declarators(self)




    def fixed_pointer_declarators(self):

        localctx = CSharpParser.Fixed_pointer_declaratorsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 372, self.RULE_fixed_pointer_declarators)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2350
            self.fixed_pointer_declarator()
            self.state = 2355
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==132:
                self.state = 2351
                self.match(CSharpParser.COMMA)
                self.state = 2352
                self.fixed_pointer_declarator()
                self.state = 2357
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Fixed_pointer_declaratorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(CSharpParser.IdentifierContext,0)


        def ASSIGNMENT(self):
            return self.getToken(CSharpParser.ASSIGNMENT, 0)

        def fixed_pointer_initializer(self):
            return self.getTypedRuleContext(CSharpParser.Fixed_pointer_initializerContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_fixed_pointer_declarator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFixed_pointer_declarator" ):
                listener.enterFixed_pointer_declarator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFixed_pointer_declarator" ):
                listener.exitFixed_pointer_declarator(self)




    def fixed_pointer_declarator(self):

        localctx = CSharpParser.Fixed_pointer_declaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 374, self.RULE_fixed_pointer_declarator)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2358
            self.identifier()
            self.state = 2359
            self.match(CSharpParser.ASSIGNMENT)
            self.state = 2360
            self.fixed_pointer_initializer()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Fixed_pointer_initializerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(CSharpParser.ExpressionContext,0)


        def AMP(self):
            return self.getToken(CSharpParser.AMP, 0)

        def stackalloc_initializer(self):
            return self.getTypedRuleContext(CSharpParser.Stackalloc_initializerContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_fixed_pointer_initializer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFixed_pointer_initializer" ):
                listener.enterFixed_pointer_initializer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFixed_pointer_initializer" ):
                listener.exitFixed_pointer_initializer(self)




    def fixed_pointer_initializer(self):

        localctx = CSharpParser.Fixed_pointer_initializerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 376, self.RULE_fixed_pointer_initializer)
        try:
            self.state = 2367
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [10, 11, 12, 14, 15, 16, 17, 18, 20, 21, 24, 25, 29, 30, 31, 32, 34, 35, 38, 42, 45, 48, 49, 51, 55, 58, 60, 61, 63, 64, 66, 67, 68, 69, 71, 75, 80, 81, 83, 85, 86, 87, 88, 91, 94, 96, 98, 99, 100, 101, 102, 104, 106, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 129, 135, 136, 137, 140, 142, 143, 144, 151, 152, 171]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2363
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,297,self._ctx)
                if la_ == 1:
                    self.state = 2362
                    self.match(CSharpParser.AMP)


                self.state = 2365
                self.expression()
                pass
            elif token in [89]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2366
                self.stackalloc_initializer()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Fixed_size_buffer_declaratorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(CSharpParser.IdentifierContext,0)


        def OPEN_BRACKET(self):
            return self.getToken(CSharpParser.OPEN_BRACKET, 0)

        def expression(self):
            return self.getTypedRuleContext(CSharpParser.ExpressionContext,0)


        def CLOSE_BRACKET(self):
            return self.getToken(CSharpParser.CLOSE_BRACKET, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_fixed_size_buffer_declarator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFixed_size_buffer_declarator" ):
                listener.enterFixed_size_buffer_declarator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFixed_size_buffer_declarator" ):
                listener.exitFixed_size_buffer_declarator(self)




    def fixed_size_buffer_declarator(self):

        localctx = CSharpParser.Fixed_size_buffer_declaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 378, self.RULE_fixed_size_buffer_declarator)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2369
            self.identifier()
            self.state = 2370
            self.match(CSharpParser.OPEN_BRACKET)
            self.state = 2371
            self.expression()
            self.state = 2372
            self.match(CSharpParser.CLOSE_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Stackalloc_initializerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STACKALLOC(self):
            return self.getToken(CSharpParser.STACKALLOC, 0)

        def type_(self):
            return self.getTypedRuleContext(CSharpParser.Type_Context,0)


        def OPEN_BRACKET(self):
            return self.getToken(CSharpParser.OPEN_BRACKET, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(CSharpParser.ExpressionContext,i)


        def CLOSE_BRACKET(self):
            return self.getToken(CSharpParser.CLOSE_BRACKET, 0)

        def OPEN_BRACE(self):
            return self.getToken(CSharpParser.OPEN_BRACE, 0)

        def CLOSE_BRACE(self):
            return self.getToken(CSharpParser.CLOSE_BRACE, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.COMMA)
            else:
                return self.getToken(CSharpParser.COMMA, i)

        def getRuleIndex(self):
            return CSharpParser.RULE_stackalloc_initializer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStackalloc_initializer" ):
                listener.enterStackalloc_initializer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStackalloc_initializer" ):
                listener.exitStackalloc_initializer(self)




    def stackalloc_initializer(self):

        localctx = CSharpParser.Stackalloc_initializerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 380, self.RULE_stackalloc_initializer)
        self._la = 0 # Token type
        try:
            self.state = 2403
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,303,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2374
                self.match(CSharpParser.STACKALLOC)
                self.state = 2375
                self.type_()
                self.state = 2376
                self.match(CSharpParser.OPEN_BRACKET)
                self.state = 2377
                self.expression()
                self.state = 2378
                self.match(CSharpParser.CLOSE_BRACKET)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2380
                self.match(CSharpParser.STACKALLOC)
                self.state = 2382
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 10)) & ~0x3f) == 0 and ((1 << (_la - 10)) & 3201253152842599799) != 0) or ((((_la - 75)) & ~0x3f) == 0 and ((1 << (_la - 75)) & 18015337681329473) != 0):
                    self.state = 2381
                    self.type_()


                self.state = 2384
                self.match(CSharpParser.OPEN_BRACKET)
                self.state = 2386
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -5437212208176571392) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 2305497201161996477) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & 4398059153857) != 0):
                    self.state = 2385
                    self.expression()


                self.state = 2388
                self.match(CSharpParser.CLOSE_BRACKET)
                self.state = 2389
                self.match(CSharpParser.OPEN_BRACE)
                self.state = 2390
                self.expression()
                self.state = 2395
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,301,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2391
                        self.match(CSharpParser.COMMA)
                        self.state = 2392
                        self.expression() 
                    self.state = 2397
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,301,self._ctx)

                self.state = 2399
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==132:
                    self.state = 2398
                    self.match(CSharpParser.COMMA)


                self.state = 2401
                self.match(CSharpParser.CLOSE_BRACE)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Right_arrowContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.first = None # Token
            self.second = None # Token

        def ASSIGNMENT(self):
            return self.getToken(CSharpParser.ASSIGNMENT, 0)

        def GT(self):
            return self.getToken(CSharpParser.GT, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_right_arrow

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRight_arrow" ):
                listener.enterRight_arrow(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRight_arrow" ):
                listener.exitRight_arrow(self)




    def right_arrow(self):

        localctx = CSharpParser.Right_arrowContext(self, self._ctx, self.state)
        self.enterRule(localctx, 382, self.RULE_right_arrow)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2405
            localctx.first = self.match(CSharpParser.ASSIGNMENT)
            self.state = 2406
            localctx.second = self.match(CSharpParser.GT)
            self.state = 2407
            if not (0 if localctx.first is None else localctx.first.tokenIndex) + 1 == (0 if localctx.second is None else localctx.second.tokenIndex):
                from antlr4.error.Errors import FailedPredicateException
                raise FailedPredicateException(self, "$first.index + 1 == $second.index")
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Right_shiftContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.first = None # Token
            self.second = None # Token

        def GT(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.GT)
            else:
                return self.getToken(CSharpParser.GT, i)

        def getRuleIndex(self):
            return CSharpParser.RULE_right_shift

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRight_shift" ):
                listener.enterRight_shift(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRight_shift" ):
                listener.exitRight_shift(self)




    def right_shift(self):

        localctx = CSharpParser.Right_shiftContext(self, self._ctx, self.state)
        self.enterRule(localctx, 384, self.RULE_right_shift)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2409
            localctx.first = self.match(CSharpParser.GT)
            self.state = 2410
            localctx.second = self.match(CSharpParser.GT)
            self.state = 2411
            if not (0 if localctx.first is None else localctx.first.tokenIndex) + 1 == (0 if localctx.second is None else localctx.second.tokenIndex):
                from antlr4.error.Errors import FailedPredicateException
                raise FailedPredicateException(self, "$first.index + 1 == $second.index")
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Right_shift_assignmentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.first = None # Token
            self.second = None # Token

        def GT(self):
            return self.getToken(CSharpParser.GT, 0)

        def OP_GE(self):
            return self.getToken(CSharpParser.OP_GE, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_right_shift_assignment

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRight_shift_assignment" ):
                listener.enterRight_shift_assignment(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRight_shift_assignment" ):
                listener.exitRight_shift_assignment(self)




    def right_shift_assignment(self):

        localctx = CSharpParser.Right_shift_assignmentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 386, self.RULE_right_shift_assignment)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2413
            localctx.first = self.match(CSharpParser.GT)
            self.state = 2414
            localctx.second = self.match(CSharpParser.OP_GE)
            self.state = 2415
            if not (0 if localctx.first is None else localctx.first.tokenIndex) + 1 == (0 if localctx.second is None else localctx.second.tokenIndex):
                from antlr4.error.Errors import FailedPredicateException
                raise FailedPredicateException(self, "$first.index + 1 == $second.index")
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def boolean_literal(self):
            return self.getTypedRuleContext(CSharpParser.Boolean_literalContext,0)


        def string_literal(self):
            return self.getTypedRuleContext(CSharpParser.String_literalContext,0)


        def INTEGER_LITERAL(self):
            return self.getToken(CSharpParser.INTEGER_LITERAL, 0)

        def HEX_INTEGER_LITERAL(self):
            return self.getToken(CSharpParser.HEX_INTEGER_LITERAL, 0)

        def BIN_INTEGER_LITERAL(self):
            return self.getToken(CSharpParser.BIN_INTEGER_LITERAL, 0)

        def REAL_LITERAL(self):
            return self.getToken(CSharpParser.REAL_LITERAL, 0)

        def CHARACTER_LITERAL(self):
            return self.getToken(CSharpParser.CHARACTER_LITERAL, 0)

        def NULL_(self):
            return self.getToken(CSharpParser.NULL_, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLiteral" ):
                listener.enterLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLiteral" ):
                listener.exitLiteral(self)




    def literal(self):

        localctx = CSharpParser.LiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 388, self.RULE_literal)
        try:
            self.state = 2425
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [42, 96]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2417
                self.boolean_literal()
                pass
            elif token in [121, 122, 123, 124]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2418
                self.string_literal()
                pass
            elif token in [116]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2419
                self.match(CSharpParser.INTEGER_LITERAL)
                pass
            elif token in [117]:
                self.enterOuterAlt(localctx, 4)
                self.state = 2420
                self.match(CSharpParser.HEX_INTEGER_LITERAL)
                pass
            elif token in [118]:
                self.enterOuterAlt(localctx, 5)
                self.state = 2421
                self.match(CSharpParser.BIN_INTEGER_LITERAL)
                pass
            elif token in [119]:
                self.enterOuterAlt(localctx, 6)
                self.state = 2422
                self.match(CSharpParser.REAL_LITERAL)
                pass
            elif token in [120]:
                self.enterOuterAlt(localctx, 7)
                self.state = 2423
                self.match(CSharpParser.CHARACTER_LITERAL)
                pass
            elif token in [67]:
                self.enterOuterAlt(localctx, 8)
                self.state = 2424
                self.match(CSharpParser.NULL_)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Boolean_literalContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TRUE(self):
            return self.getToken(CSharpParser.TRUE, 0)

        def FALSE(self):
            return self.getToken(CSharpParser.FALSE, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_boolean_literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBoolean_literal" ):
                listener.enterBoolean_literal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBoolean_literal" ):
                listener.exitBoolean_literal(self)




    def boolean_literal(self):

        localctx = CSharpParser.Boolean_literalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 390, self.RULE_boolean_literal)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2427
            _la = self._input.LA(1)
            if not(_la==42 or _la==96):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class String_literalContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def interpolated_regular_string(self):
            return self.getTypedRuleContext(CSharpParser.Interpolated_regular_stringContext,0)


        def interpolated_verbatium_string(self):
            return self.getTypedRuleContext(CSharpParser.Interpolated_verbatium_stringContext,0)


        def REGULAR_STRING(self):
            return self.getToken(CSharpParser.REGULAR_STRING, 0)

        def VERBATIUM_STRING(self):
            return self.getToken(CSharpParser.VERBATIUM_STRING, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_string_literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterString_literal" ):
                listener.enterString_literal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitString_literal" ):
                listener.exitString_literal(self)




    def string_literal(self):

        localctx = CSharpParser.String_literalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 392, self.RULE_string_literal)
        try:
            self.state = 2433
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [123]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2429
                self.interpolated_regular_string()
                pass
            elif token in [124]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2430
                self.interpolated_verbatium_string()
                pass
            elif token in [121]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2431
                self.match(CSharpParser.REGULAR_STRING)
                pass
            elif token in [122]:
                self.enterOuterAlt(localctx, 4)
                self.state = 2432
                self.match(CSharpParser.VERBATIUM_STRING)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Interpolated_regular_stringContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INTERPOLATED_REGULAR_STRING_START(self):
            return self.getToken(CSharpParser.INTERPOLATED_REGULAR_STRING_START, 0)

        def DOUBLE_QUOTE_INSIDE(self):
            return self.getToken(CSharpParser.DOUBLE_QUOTE_INSIDE, 0)

        def interpolated_regular_string_part(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Interpolated_regular_string_partContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Interpolated_regular_string_partContext,i)


        def getRuleIndex(self):
            return CSharpParser.RULE_interpolated_regular_string

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterpolated_regular_string" ):
                listener.enterInterpolated_regular_string(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterpolated_regular_string" ):
                listener.exitInterpolated_regular_string(self)




    def interpolated_regular_string(self):

        localctx = CSharpParser.Interpolated_regular_stringContext(self, self._ctx, self.state)
        self.enterRule(localctx, 394, self.RULE_interpolated_regular_string)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2435
            self.match(CSharpParser.INTERPOLATED_REGULAR_STRING_START)
            self.state = 2439
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,306,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2436
                    self.interpolated_regular_string_part() 
                self.state = 2441
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,306,self._ctx)

            self.state = 2442
            self.match(CSharpParser.DOUBLE_QUOTE_INSIDE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Interpolated_verbatium_stringContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INTERPOLATED_VERBATIUM_STRING_START(self):
            return self.getToken(CSharpParser.INTERPOLATED_VERBATIUM_STRING_START, 0)

        def DOUBLE_QUOTE_INSIDE(self):
            return self.getToken(CSharpParser.DOUBLE_QUOTE_INSIDE, 0)

        def interpolated_verbatium_string_part(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Interpolated_verbatium_string_partContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Interpolated_verbatium_string_partContext,i)


        def getRuleIndex(self):
            return CSharpParser.RULE_interpolated_verbatium_string

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterpolated_verbatium_string" ):
                listener.enterInterpolated_verbatium_string(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterpolated_verbatium_string" ):
                listener.exitInterpolated_verbatium_string(self)




    def interpolated_verbatium_string(self):

        localctx = CSharpParser.Interpolated_verbatium_stringContext(self, self._ctx, self.state)
        self.enterRule(localctx, 396, self.RULE_interpolated_verbatium_string)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2444
            self.match(CSharpParser.INTERPOLATED_VERBATIUM_STRING_START)
            self.state = 2448
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 125)) & ~0x3f) == 0 and ((1 << (_la - 125)) & 10273836649938945) != 0):
                self.state = 2445
                self.interpolated_verbatium_string_part()
                self.state = 2450
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2451
            self.match(CSharpParser.DOUBLE_QUOTE_INSIDE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Interpolated_regular_string_partContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def interpolated_string_expression(self):
            return self.getTypedRuleContext(CSharpParser.Interpolated_string_expressionContext,0)


        def DOUBLE_CURLY_INSIDE(self):
            return self.getToken(CSharpParser.DOUBLE_CURLY_INSIDE, 0)

        def REGULAR_CHAR_INSIDE(self):
            return self.getToken(CSharpParser.REGULAR_CHAR_INSIDE, 0)

        def REGULAR_STRING_INSIDE(self):
            return self.getToken(CSharpParser.REGULAR_STRING_INSIDE, 0)

        def OPEN_BRACE_INSIDE(self):
            return self.getToken(CSharpParser.OPEN_BRACE_INSIDE, 0)

        def CLOSE_BRACE_INSIDE(self):
            return self.getToken(CSharpParser.CLOSE_BRACE_INSIDE, 0)

        def DOUBLE_QUOTE_INSIDE(self):
            return self.getToken(CSharpParser.DOUBLE_QUOTE_INSIDE, 0)

        def VERBATIUM_INSIDE_STRING(self):
            return self.getToken(CSharpParser.VERBATIUM_INSIDE_STRING, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_interpolated_regular_string_part

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterpolated_regular_string_part" ):
                listener.enterInterpolated_regular_string_part(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterpolated_regular_string_part" ):
                listener.exitInterpolated_regular_string_part(self)




    def interpolated_regular_string_part(self):

        localctx = CSharpParser.Interpolated_regular_string_partContext(self, self._ctx, self.state)
        self.enterRule(localctx, 398, self.RULE_interpolated_regular_string_part)
        try:
            self.state = 2461
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [125]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2453
                self.interpolated_string_expression()
                pass
            elif token in [172]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2454
                self.match(CSharpParser.DOUBLE_CURLY_INSIDE)
                pass
            elif token in [174]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2455
                self.match(CSharpParser.REGULAR_CHAR_INSIDE)
                pass
            elif token in [177]:
                self.enterOuterAlt(localctx, 4)
                self.state = 2456
                self.match(CSharpParser.REGULAR_STRING_INSIDE)
                pass
            elif token in [173]:
                self.enterOuterAlt(localctx, 5)
                self.state = 2457
                self.match(CSharpParser.OPEN_BRACE_INSIDE)
                pass
            elif token in [179]:
                self.enterOuterAlt(localctx, 6)
                self.state = 2458
                self.match(CSharpParser.CLOSE_BRACE_INSIDE)
                pass
            elif token in [176]:
                self.enterOuterAlt(localctx, 7)
                self.state = 2459
                self.match(CSharpParser.DOUBLE_QUOTE_INSIDE)
                pass
            elif token in [178]:
                self.enterOuterAlt(localctx, 8)
                self.state = 2460
                self.match(CSharpParser.VERBATIUM_INSIDE_STRING)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Interpolated_verbatium_string_partContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def interpolated_string_expression(self):
            return self.getTypedRuleContext(CSharpParser.Interpolated_string_expressionContext,0)


        def DOUBLE_CURLY_INSIDE(self):
            return self.getToken(CSharpParser.DOUBLE_CURLY_INSIDE, 0)

        def VERBATIUM_DOUBLE_QUOTE_INSIDE(self):
            return self.getToken(CSharpParser.VERBATIUM_DOUBLE_QUOTE_INSIDE, 0)

        def VERBATIUM_INSIDE_STRING(self):
            return self.getToken(CSharpParser.VERBATIUM_INSIDE_STRING, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_interpolated_verbatium_string_part

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterpolated_verbatium_string_part" ):
                listener.enterInterpolated_verbatium_string_part(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterpolated_verbatium_string_part" ):
                listener.exitInterpolated_verbatium_string_part(self)




    def interpolated_verbatium_string_part(self):

        localctx = CSharpParser.Interpolated_verbatium_string_partContext(self, self._ctx, self.state)
        self.enterRule(localctx, 400, self.RULE_interpolated_verbatium_string_part)
        try:
            self.state = 2467
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [125]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2463
                self.interpolated_string_expression()
                pass
            elif token in [172]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2464
                self.match(CSharpParser.DOUBLE_CURLY_INSIDE)
                pass
            elif token in [175]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2465
                self.match(CSharpParser.VERBATIUM_DOUBLE_QUOTE_INSIDE)
                pass
            elif token in [178]:
                self.enterOuterAlt(localctx, 4)
                self.state = 2466
                self.match(CSharpParser.VERBATIUM_INSIDE_STRING)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Interpolated_string_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_BRACE(self):
            return self.getToken(CSharpParser.OPEN_BRACE, 0)

        def expression(self):
            return self.getTypedRuleContext(CSharpParser.ExpressionContext,0)


        def CLOSE_BRACE(self):
            return self.getToken(CSharpParser.CLOSE_BRACE, 0)

        def COMMA(self):
            return self.getToken(CSharpParser.COMMA, 0)

        def interpolation_minimum_width(self):
            return self.getTypedRuleContext(CSharpParser.Interpolation_minimum_widthContext,0)


        def format_string(self):
            return self.getTypedRuleContext(CSharpParser.Format_stringContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_interpolated_string_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterpolated_string_expression" ):
                listener.enterInterpolated_string_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterpolated_string_expression" ):
                listener.exitInterpolated_string_expression(self)




    def interpolated_string_expression(self):

        localctx = CSharpParser.Interpolated_string_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 402, self.RULE_interpolated_string_expression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2469
            self.match(CSharpParser.OPEN_BRACE)
            self.state = 2470
            self.expression()
            self.state = 2473
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==132:
                self.state = 2471
                self.match(CSharpParser.COMMA)
                self.state = 2472
                self.interpolation_minimum_width()


            self.state = 2476
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==133:
                self.state = 2475
                self.format_string()


            self.state = 2478
            self.match(CSharpParser.CLOSE_BRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Interpolation_minimum_widthContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def constant_expression(self):
            return self.getTypedRuleContext(CSharpParser.Constant_expressionContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_interpolation_minimum_width

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterpolation_minimum_width" ):
                listener.enterInterpolation_minimum_width(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterpolation_minimum_width" ):
                listener.exitInterpolation_minimum_width(self)




    def interpolation_minimum_width(self):

        localctx = CSharpParser.Interpolation_minimum_widthContext(self, self._ctx, self.state)
        self.enterRule(localctx, 404, self.RULE_interpolation_minimum_width)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2480
            self.constant_expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Format_stringContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COLON(self):
            return self.getToken(CSharpParser.COLON, 0)

        def FORMAT_STRING(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.FORMAT_STRING)
            else:
                return self.getToken(CSharpParser.FORMAT_STRING, i)

        def getRuleIndex(self):
            return CSharpParser.RULE_format_string

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFormat_string" ):
                listener.enterFormat_string(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFormat_string" ):
                listener.exitFormat_string(self)




    def format_string(self):

        localctx = CSharpParser.Format_stringContext(self, self._ctx, self.state)
        self.enterRule(localctx, 406, self.RULE_format_string)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2482
            self.match(CSharpParser.COLON)
            self.state = 2484 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 2483
                self.match(CSharpParser.FORMAT_STRING)
                self.state = 2486 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==180):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Constant_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(CSharpParser.ExpressionContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_constant_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstant_expression" ):
                listener.enterConstant_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstant_expression" ):
                listener.exitConstant_expression(self)




    def constant_expression(self):

        localctx = CSharpParser.Constant_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 408, self.RULE_constant_expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2488
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class KeywordContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ABSTRACT(self):
            return self.getToken(CSharpParser.ABSTRACT, 0)

        def AS(self):
            return self.getToken(CSharpParser.AS, 0)

        def BASE(self):
            return self.getToken(CSharpParser.BASE, 0)

        def BOOL(self):
            return self.getToken(CSharpParser.BOOL, 0)

        def BREAK(self):
            return self.getToken(CSharpParser.BREAK, 0)

        def BYTE(self):
            return self.getToken(CSharpParser.BYTE, 0)

        def CASE(self):
            return self.getToken(CSharpParser.CASE, 0)

        def CATCH(self):
            return self.getToken(CSharpParser.CATCH, 0)

        def CHAR(self):
            return self.getToken(CSharpParser.CHAR, 0)

        def CHECKED(self):
            return self.getToken(CSharpParser.CHECKED, 0)

        def CLASS(self):
            return self.getToken(CSharpParser.CLASS, 0)

        def CONST(self):
            return self.getToken(CSharpParser.CONST, 0)

        def CONTINUE(self):
            return self.getToken(CSharpParser.CONTINUE, 0)

        def DECIMAL(self):
            return self.getToken(CSharpParser.DECIMAL, 0)

        def DEFAULT(self):
            return self.getToken(CSharpParser.DEFAULT, 0)

        def DELEGATE(self):
            return self.getToken(CSharpParser.DELEGATE, 0)

        def DO(self):
            return self.getToken(CSharpParser.DO, 0)

        def DOUBLE(self):
            return self.getToken(CSharpParser.DOUBLE, 0)

        def ELSE(self):
            return self.getToken(CSharpParser.ELSE, 0)

        def ENUM(self):
            return self.getToken(CSharpParser.ENUM, 0)

        def EVENT(self):
            return self.getToken(CSharpParser.EVENT, 0)

        def EXPLICIT(self):
            return self.getToken(CSharpParser.EXPLICIT, 0)

        def EXTERN(self):
            return self.getToken(CSharpParser.EXTERN, 0)

        def FALSE(self):
            return self.getToken(CSharpParser.FALSE, 0)

        def FINALLY(self):
            return self.getToken(CSharpParser.FINALLY, 0)

        def FIXED(self):
            return self.getToken(CSharpParser.FIXED, 0)

        def FLOAT(self):
            return self.getToken(CSharpParser.FLOAT, 0)

        def FOR(self):
            return self.getToken(CSharpParser.FOR, 0)

        def FOREACH(self):
            return self.getToken(CSharpParser.FOREACH, 0)

        def GOTO(self):
            return self.getToken(CSharpParser.GOTO, 0)

        def IF(self):
            return self.getToken(CSharpParser.IF, 0)

        def IMPLICIT(self):
            return self.getToken(CSharpParser.IMPLICIT, 0)

        def IN(self):
            return self.getToken(CSharpParser.IN, 0)

        def INT(self):
            return self.getToken(CSharpParser.INT, 0)

        def INTERFACE(self):
            return self.getToken(CSharpParser.INTERFACE, 0)

        def INTERNAL(self):
            return self.getToken(CSharpParser.INTERNAL, 0)

        def IS(self):
            return self.getToken(CSharpParser.IS, 0)

        def LOCK(self):
            return self.getToken(CSharpParser.LOCK, 0)

        def LONG(self):
            return self.getToken(CSharpParser.LONG, 0)

        def NAMESPACE(self):
            return self.getToken(CSharpParser.NAMESPACE, 0)

        def NEW(self):
            return self.getToken(CSharpParser.NEW, 0)

        def NULL_(self):
            return self.getToken(CSharpParser.NULL_, 0)

        def OBJECT(self):
            return self.getToken(CSharpParser.OBJECT, 0)

        def OPERATOR(self):
            return self.getToken(CSharpParser.OPERATOR, 0)

        def OUT(self):
            return self.getToken(CSharpParser.OUT, 0)

        def OVERRIDE(self):
            return self.getToken(CSharpParser.OVERRIDE, 0)

        def PARAMS(self):
            return self.getToken(CSharpParser.PARAMS, 0)

        def PRIVATE(self):
            return self.getToken(CSharpParser.PRIVATE, 0)

        def PROTECTED(self):
            return self.getToken(CSharpParser.PROTECTED, 0)

        def PUBLIC(self):
            return self.getToken(CSharpParser.PUBLIC, 0)

        def READONLY(self):
            return self.getToken(CSharpParser.READONLY, 0)

        def REF(self):
            return self.getToken(CSharpParser.REF, 0)

        def RETURN(self):
            return self.getToken(CSharpParser.RETURN, 0)

        def SBYTE(self):
            return self.getToken(CSharpParser.SBYTE, 0)

        def SEALED(self):
            return self.getToken(CSharpParser.SEALED, 0)

        def SHORT(self):
            return self.getToken(CSharpParser.SHORT, 0)

        def SIZEOF(self):
            return self.getToken(CSharpParser.SIZEOF, 0)

        def STACKALLOC(self):
            return self.getToken(CSharpParser.STACKALLOC, 0)

        def STATIC(self):
            return self.getToken(CSharpParser.STATIC, 0)

        def STRING(self):
            return self.getToken(CSharpParser.STRING, 0)

        def STRUCT(self):
            return self.getToken(CSharpParser.STRUCT, 0)

        def SWITCH(self):
            return self.getToken(CSharpParser.SWITCH, 0)

        def THIS(self):
            return self.getToken(CSharpParser.THIS, 0)

        def THROW(self):
            return self.getToken(CSharpParser.THROW, 0)

        def TRUE(self):
            return self.getToken(CSharpParser.TRUE, 0)

        def TRY(self):
            return self.getToken(CSharpParser.TRY, 0)

        def TYPEOF(self):
            return self.getToken(CSharpParser.TYPEOF, 0)

        def UINT(self):
            return self.getToken(CSharpParser.UINT, 0)

        def ULONG(self):
            return self.getToken(CSharpParser.ULONG, 0)

        def UNCHECKED(self):
            return self.getToken(CSharpParser.UNCHECKED, 0)

        def UNMANAGED(self):
            return self.getToken(CSharpParser.UNMANAGED, 0)

        def UNSAFE(self):
            return self.getToken(CSharpParser.UNSAFE, 0)

        def USHORT(self):
            return self.getToken(CSharpParser.USHORT, 0)

        def USING(self):
            return self.getToken(CSharpParser.USING, 0)

        def VIRTUAL(self):
            return self.getToken(CSharpParser.VIRTUAL, 0)

        def VOID(self):
            return self.getToken(CSharpParser.VOID, 0)

        def VOLATILE(self):
            return self.getToken(CSharpParser.VOLATILE, 0)

        def WHILE(self):
            return self.getToken(CSharpParser.WHILE, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_keyword

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterKeyword" ):
                listener.enterKeyword(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitKeyword" ):
                listener.exitKeyword(self)




    def keyword(self):

        localctx = CSharpParser.KeywordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 410, self.RULE_keyword)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2490
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & -3750091428249853440) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & 173722833976239) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Class_definitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CLASS(self):
            return self.getToken(CSharpParser.CLASS, 0)

        def identifier(self):
            return self.getTypedRuleContext(CSharpParser.IdentifierContext,0)


        def class_body(self):
            return self.getTypedRuleContext(CSharpParser.Class_bodyContext,0)


        def type_parameter_list(self):
            return self.getTypedRuleContext(CSharpParser.Type_parameter_listContext,0)


        def class_base(self):
            return self.getTypedRuleContext(CSharpParser.Class_baseContext,0)


        def type_parameter_constraints_clauses(self):
            return self.getTypedRuleContext(CSharpParser.Type_parameter_constraints_clausesContext,0)


        def SEMICOLON(self):
            return self.getToken(CSharpParser.SEMICOLON, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_class_definition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClass_definition" ):
                listener.enterClass_definition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClass_definition" ):
                listener.exitClass_definition(self)




    def class_definition(self):

        localctx = CSharpParser.Class_definitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 412, self.RULE_class_definition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2492
            self.match(CSharpParser.CLASS)
            self.state = 2493
            self.identifier()
            self.state = 2495
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==146:
                self.state = 2494
                self.type_parameter_list()


            self.state = 2498
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==133:
                self.state = 2497
                self.class_base()


            self.state = 2501
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==111:
                self.state = 2500
                self.type_parameter_constraints_clauses()


            self.state = 2503
            self.class_body()
            self.state = 2505
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==134:
                self.state = 2504
                self.match(CSharpParser.SEMICOLON)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Struct_definitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STRUCT(self):
            return self.getToken(CSharpParser.STRUCT, 0)

        def identifier(self):
            return self.getTypedRuleContext(CSharpParser.IdentifierContext,0)


        def struct_body(self):
            return self.getTypedRuleContext(CSharpParser.Struct_bodyContext,0)


        def type_parameter_list(self):
            return self.getTypedRuleContext(CSharpParser.Type_parameter_listContext,0)


        def struct_interfaces(self):
            return self.getTypedRuleContext(CSharpParser.Struct_interfacesContext,0)


        def type_parameter_constraints_clauses(self):
            return self.getTypedRuleContext(CSharpParser.Type_parameter_constraints_clausesContext,0)


        def SEMICOLON(self):
            return self.getToken(CSharpParser.SEMICOLON, 0)

        def READONLY(self):
            return self.getToken(CSharpParser.READONLY, 0)

        def REF(self):
            return self.getToken(CSharpParser.REF, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_struct_definition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStruct_definition" ):
                listener.enterStruct_definition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStruct_definition" ):
                listener.exitStruct_definition(self)




    def struct_definition(self):

        localctx = CSharpParser.Struct_definitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 414, self.RULE_struct_definition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2508
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==79 or _la==80:
                self.state = 2507
                _la = self._input.LA(1)
                if not(_la==79 or _la==80):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 2510
            self.match(CSharpParser.STRUCT)
            self.state = 2511
            self.identifier()
            self.state = 2513
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==146:
                self.state = 2512
                self.type_parameter_list()


            self.state = 2516
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==133:
                self.state = 2515
                self.struct_interfaces()


            self.state = 2519
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==111:
                self.state = 2518
                self.type_parameter_constraints_clauses()


            self.state = 2521
            self.struct_body()
            self.state = 2523
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==134:
                self.state = 2522
                self.match(CSharpParser.SEMICOLON)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Interface_definitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INTERFACE(self):
            return self.getToken(CSharpParser.INTERFACE, 0)

        def identifier(self):
            return self.getTypedRuleContext(CSharpParser.IdentifierContext,0)


        def class_body(self):
            return self.getTypedRuleContext(CSharpParser.Class_bodyContext,0)


        def variant_type_parameter_list(self):
            return self.getTypedRuleContext(CSharpParser.Variant_type_parameter_listContext,0)


        def interface_base(self):
            return self.getTypedRuleContext(CSharpParser.Interface_baseContext,0)


        def type_parameter_constraints_clauses(self):
            return self.getTypedRuleContext(CSharpParser.Type_parameter_constraints_clausesContext,0)


        def SEMICOLON(self):
            return self.getToken(CSharpParser.SEMICOLON, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_interface_definition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterface_definition" ):
                listener.enterInterface_definition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterface_definition" ):
                listener.exitInterface_definition(self)




    def interface_definition(self):

        localctx = CSharpParser.Interface_definitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 416, self.RULE_interface_definition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2525
            self.match(CSharpParser.INTERFACE)
            self.state = 2526
            self.identifier()
            self.state = 2528
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==146:
                self.state = 2527
                self.variant_type_parameter_list()


            self.state = 2531
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==133:
                self.state = 2530
                self.interface_base()


            self.state = 2534
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==111:
                self.state = 2533
                self.type_parameter_constraints_clauses()


            self.state = 2536
            self.class_body()
            self.state = 2538
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==134:
                self.state = 2537
                self.match(CSharpParser.SEMICOLON)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Enum_definitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ENUM(self):
            return self.getToken(CSharpParser.ENUM, 0)

        def identifier(self):
            return self.getTypedRuleContext(CSharpParser.IdentifierContext,0)


        def enum_body(self):
            return self.getTypedRuleContext(CSharpParser.Enum_bodyContext,0)


        def enum_base(self):
            return self.getTypedRuleContext(CSharpParser.Enum_baseContext,0)


        def SEMICOLON(self):
            return self.getToken(CSharpParser.SEMICOLON, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_enum_definition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnum_definition" ):
                listener.enterEnum_definition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnum_definition" ):
                listener.exitEnum_definition(self)




    def enum_definition(self):

        localctx = CSharpParser.Enum_definitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 418, self.RULE_enum_definition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2540
            self.match(CSharpParser.ENUM)
            self.state = 2541
            self.identifier()
            self.state = 2543
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==133:
                self.state = 2542
                self.enum_base()


            self.state = 2545
            self.enum_body()
            self.state = 2547
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==134:
                self.state = 2546
                self.match(CSharpParser.SEMICOLON)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Delegate_definitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DELEGATE(self):
            return self.getToken(CSharpParser.DELEGATE, 0)

        def return_type(self):
            return self.getTypedRuleContext(CSharpParser.Return_typeContext,0)


        def identifier(self):
            return self.getTypedRuleContext(CSharpParser.IdentifierContext,0)


        def OPEN_PARENS(self):
            return self.getToken(CSharpParser.OPEN_PARENS, 0)

        def CLOSE_PARENS(self):
            return self.getToken(CSharpParser.CLOSE_PARENS, 0)

        def SEMICOLON(self):
            return self.getToken(CSharpParser.SEMICOLON, 0)

        def variant_type_parameter_list(self):
            return self.getTypedRuleContext(CSharpParser.Variant_type_parameter_listContext,0)


        def formal_parameter_list(self):
            return self.getTypedRuleContext(CSharpParser.Formal_parameter_listContext,0)


        def type_parameter_constraints_clauses(self):
            return self.getTypedRuleContext(CSharpParser.Type_parameter_constraints_clausesContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_delegate_definition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDelegate_definition" ):
                listener.enterDelegate_definition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDelegate_definition" ):
                listener.exitDelegate_definition(self)




    def delegate_definition(self):

        localctx = CSharpParser.Delegate_definitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 420, self.RULE_delegate_definition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2549
            self.match(CSharpParser.DELEGATE)
            self.state = 2550
            self.return_type()
            self.state = 2551
            self.identifier()
            self.state = 2553
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==146:
                self.state = 2552
                self.variant_type_parameter_list()


            self.state = 2555
            self.match(CSharpParser.OPEN_PARENS)
            self.state = 2557
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 10)) & ~0x3f) == 0 and ((1 << (_la - 10)) & 7812956763456032119) != 0) or ((((_la - 74)) & ~0x3f) == 0 and ((1 << (_la - 74)) & 45037874618448579) != 0):
                self.state = 2556
                self.formal_parameter_list()


            self.state = 2559
            self.match(CSharpParser.CLOSE_PARENS)
            self.state = 2561
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==111:
                self.state = 2560
                self.type_parameter_constraints_clauses()


            self.state = 2563
            self.match(CSharpParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Event_declarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EVENT(self):
            return self.getToken(CSharpParser.EVENT, 0)

        def type_(self):
            return self.getTypedRuleContext(CSharpParser.Type_Context,0)


        def variable_declarators(self):
            return self.getTypedRuleContext(CSharpParser.Variable_declaratorsContext,0)


        def SEMICOLON(self):
            return self.getToken(CSharpParser.SEMICOLON, 0)

        def member_name(self):
            return self.getTypedRuleContext(CSharpParser.Member_nameContext,0)


        def OPEN_BRACE(self):
            return self.getToken(CSharpParser.OPEN_BRACE, 0)

        def event_accessor_declarations(self):
            return self.getTypedRuleContext(CSharpParser.Event_accessor_declarationsContext,0)


        def CLOSE_BRACE(self):
            return self.getToken(CSharpParser.CLOSE_BRACE, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_event_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEvent_declaration" ):
                listener.enterEvent_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEvent_declaration" ):
                listener.exitEvent_declaration(self)




    def event_declaration(self):

        localctx = CSharpParser.Event_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 422, self.RULE_event_declaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2565
            self.match(CSharpParser.EVENT)
            self.state = 2566
            self.type_()
            self.state = 2575
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,331,self._ctx)
            if la_ == 1:
                self.state = 2567
                self.variable_declarators()
                self.state = 2568
                self.match(CSharpParser.SEMICOLON)
                pass

            elif la_ == 2:
                self.state = 2570
                self.member_name()
                self.state = 2571
                self.match(CSharpParser.OPEN_BRACE)
                self.state = 2572
                self.event_accessor_declarations()
                self.state = 2573
                self.match(CSharpParser.CLOSE_BRACE)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Field_declarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def variable_declarators(self):
            return self.getTypedRuleContext(CSharpParser.Variable_declaratorsContext,0)


        def SEMICOLON(self):
            return self.getToken(CSharpParser.SEMICOLON, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_field_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterField_declaration" ):
                listener.enterField_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitField_declaration" ):
                listener.exitField_declaration(self)




    def field_declaration(self):

        localctx = CSharpParser.Field_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 424, self.RULE_field_declaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2577
            self.variable_declarators()
            self.state = 2578
            self.match(CSharpParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Property_declarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def member_name(self):
            return self.getTypedRuleContext(CSharpParser.Member_nameContext,0)


        def OPEN_BRACE(self):
            return self.getToken(CSharpParser.OPEN_BRACE, 0)

        def accessor_declarations(self):
            return self.getTypedRuleContext(CSharpParser.Accessor_declarationsContext,0)


        def CLOSE_BRACE(self):
            return self.getToken(CSharpParser.CLOSE_BRACE, 0)

        def right_arrow(self):
            return self.getTypedRuleContext(CSharpParser.Right_arrowContext,0)


        def throwable_expression(self):
            return self.getTypedRuleContext(CSharpParser.Throwable_expressionContext,0)


        def SEMICOLON(self):
            return self.getToken(CSharpParser.SEMICOLON, 0)

        def ASSIGNMENT(self):
            return self.getToken(CSharpParser.ASSIGNMENT, 0)

        def variable_initializer(self):
            return self.getTypedRuleContext(CSharpParser.Variable_initializerContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_property_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProperty_declaration" ):
                listener.enterProperty_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProperty_declaration" ):
                listener.exitProperty_declaration(self)




    def property_declaration(self):

        localctx = CSharpParser.Property_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 426, self.RULE_property_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2580
            self.member_name()
            self.state = 2594
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [125]:
                self.state = 2581
                self.match(CSharpParser.OPEN_BRACE)
                self.state = 2582
                self.accessor_declarations()
                self.state = 2583
                self.match(CSharpParser.CLOSE_BRACE)
                self.state = 2588
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==145:
                    self.state = 2584
                    self.match(CSharpParser.ASSIGNMENT)
                    self.state = 2585
                    self.variable_initializer()
                    self.state = 2586
                    self.match(CSharpParser.SEMICOLON)


                pass
            elif token in [145]:
                self.state = 2590
                self.right_arrow()
                self.state = 2591
                self.throwable_expression()
                self.state = 2592
                self.match(CSharpParser.SEMICOLON)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Constant_declarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CONST(self):
            return self.getToken(CSharpParser.CONST, 0)

        def type_(self):
            return self.getTypedRuleContext(CSharpParser.Type_Context,0)


        def constant_declarators(self):
            return self.getTypedRuleContext(CSharpParser.Constant_declaratorsContext,0)


        def SEMICOLON(self):
            return self.getToken(CSharpParser.SEMICOLON, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_constant_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstant_declaration" ):
                listener.enterConstant_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstant_declaration" ):
                listener.exitConstant_declaration(self)




    def constant_declaration(self):

        localctx = CSharpParser.Constant_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 428, self.RULE_constant_declaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2596
            self.match(CSharpParser.CONST)
            self.state = 2597
            self.type_()
            self.state = 2598
            self.constant_declarators()
            self.state = 2599
            self.match(CSharpParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Indexer_declarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def THIS(self):
            return self.getToken(CSharpParser.THIS, 0)

        def OPEN_BRACKET(self):
            return self.getToken(CSharpParser.OPEN_BRACKET, 0)

        def formal_parameter_list(self):
            return self.getTypedRuleContext(CSharpParser.Formal_parameter_listContext,0)


        def CLOSE_BRACKET(self):
            return self.getToken(CSharpParser.CLOSE_BRACKET, 0)

        def OPEN_BRACE(self):
            return self.getToken(CSharpParser.OPEN_BRACE, 0)

        def accessor_declarations(self):
            return self.getTypedRuleContext(CSharpParser.Accessor_declarationsContext,0)


        def CLOSE_BRACE(self):
            return self.getToken(CSharpParser.CLOSE_BRACE, 0)

        def right_arrow(self):
            return self.getTypedRuleContext(CSharpParser.Right_arrowContext,0)


        def throwable_expression(self):
            return self.getTypedRuleContext(CSharpParser.Throwable_expressionContext,0)


        def SEMICOLON(self):
            return self.getToken(CSharpParser.SEMICOLON, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_indexer_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndexer_declaration" ):
                listener.enterIndexer_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndexer_declaration" ):
                listener.exitIndexer_declaration(self)




    def indexer_declaration(self):

        localctx = CSharpParser.Indexer_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 430, self.RULE_indexer_declaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2601
            self.match(CSharpParser.THIS)
            self.state = 2602
            self.match(CSharpParser.OPEN_BRACKET)
            self.state = 2603
            self.formal_parameter_list()
            self.state = 2604
            self.match(CSharpParser.CLOSE_BRACKET)
            self.state = 2613
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [125]:
                self.state = 2605
                self.match(CSharpParser.OPEN_BRACE)
                self.state = 2606
                self.accessor_declarations()
                self.state = 2607
                self.match(CSharpParser.CLOSE_BRACE)
                pass
            elif token in [145]:
                self.state = 2609
                self.right_arrow()
                self.state = 2610
                self.throwable_expression()
                self.state = 2611
                self.match(CSharpParser.SEMICOLON)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Destructor_definitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TILDE(self):
            return self.getToken(CSharpParser.TILDE, 0)

        def identifier(self):
            return self.getTypedRuleContext(CSharpParser.IdentifierContext,0)


        def OPEN_PARENS(self):
            return self.getToken(CSharpParser.OPEN_PARENS, 0)

        def CLOSE_PARENS(self):
            return self.getToken(CSharpParser.CLOSE_PARENS, 0)

        def body(self):
            return self.getTypedRuleContext(CSharpParser.BodyContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_destructor_definition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDestructor_definition" ):
                listener.enterDestructor_definition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDestructor_definition" ):
                listener.exitDestructor_definition(self)




    def destructor_definition(self):

        localctx = CSharpParser.Destructor_definitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 432, self.RULE_destructor_definition)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2615
            self.match(CSharpParser.TILDE)
            self.state = 2616
            self.identifier()
            self.state = 2617
            self.match(CSharpParser.OPEN_PARENS)
            self.state = 2618
            self.match(CSharpParser.CLOSE_PARENS)
            self.state = 2619
            self.body()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Constructor_declarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(CSharpParser.IdentifierContext,0)


        def OPEN_PARENS(self):
            return self.getToken(CSharpParser.OPEN_PARENS, 0)

        def CLOSE_PARENS(self):
            return self.getToken(CSharpParser.CLOSE_PARENS, 0)

        def body(self):
            return self.getTypedRuleContext(CSharpParser.BodyContext,0)


        def formal_parameter_list(self):
            return self.getTypedRuleContext(CSharpParser.Formal_parameter_listContext,0)


        def constructor_initializer(self):
            return self.getTypedRuleContext(CSharpParser.Constructor_initializerContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_constructor_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstructor_declaration" ):
                listener.enterConstructor_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstructor_declaration" ):
                listener.exitConstructor_declaration(self)




    def constructor_declaration(self):

        localctx = CSharpParser.Constructor_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 434, self.RULE_constructor_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2621
            self.identifier()
            self.state = 2622
            self.match(CSharpParser.OPEN_PARENS)
            self.state = 2624
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 10)) & ~0x3f) == 0 and ((1 << (_la - 10)) & 7812956763456032119) != 0) or ((((_la - 74)) & ~0x3f) == 0 and ((1 << (_la - 74)) & 45037874618448579) != 0):
                self.state = 2623
                self.formal_parameter_list()


            self.state = 2626
            self.match(CSharpParser.CLOSE_PARENS)
            self.state = 2628
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==133:
                self.state = 2627
                self.constructor_initializer()


            self.state = 2630
            self.body()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Method_declarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def method_member_name(self):
            return self.getTypedRuleContext(CSharpParser.Method_member_nameContext,0)


        def OPEN_PARENS(self):
            return self.getToken(CSharpParser.OPEN_PARENS, 0)

        def CLOSE_PARENS(self):
            return self.getToken(CSharpParser.CLOSE_PARENS, 0)

        def method_body(self):
            return self.getTypedRuleContext(CSharpParser.Method_bodyContext,0)


        def right_arrow(self):
            return self.getTypedRuleContext(CSharpParser.Right_arrowContext,0)


        def throwable_expression(self):
            return self.getTypedRuleContext(CSharpParser.Throwable_expressionContext,0)


        def SEMICOLON(self):
            return self.getToken(CSharpParser.SEMICOLON, 0)

        def type_parameter_list(self):
            return self.getTypedRuleContext(CSharpParser.Type_parameter_listContext,0)


        def formal_parameter_list(self):
            return self.getTypedRuleContext(CSharpParser.Formal_parameter_listContext,0)


        def type_parameter_constraints_clauses(self):
            return self.getTypedRuleContext(CSharpParser.Type_parameter_constraints_clausesContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_method_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMethod_declaration" ):
                listener.enterMethod_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMethod_declaration" ):
                listener.exitMethod_declaration(self)




    def method_declaration(self):

        localctx = CSharpParser.Method_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 436, self.RULE_method_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2632
            self.method_member_name()
            self.state = 2634
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==146:
                self.state = 2633
                self.type_parameter_list()


            self.state = 2636
            self.match(CSharpParser.OPEN_PARENS)
            self.state = 2638
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 10)) & ~0x3f) == 0 and ((1 << (_la - 10)) & 7812956763456032119) != 0) or ((((_la - 74)) & ~0x3f) == 0 and ((1 << (_la - 74)) & 45037874618448579) != 0):
                self.state = 2637
                self.formal_parameter_list()


            self.state = 2640
            self.match(CSharpParser.CLOSE_PARENS)
            self.state = 2642
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==111:
                self.state = 2641
                self.type_parameter_constraints_clauses()


            self.state = 2649
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,340,self._ctx)
            if la_ == 1:
                self.state = 2644
                self.method_body()
                pass

            elif la_ == 2:
                self.state = 2645
                self.right_arrow()
                self.state = 2646
                self.throwable_expression()
                self.state = 2647
                self.match(CSharpParser.SEMICOLON)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Method_member_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(CSharpParser.IdentifierContext,i)


        def DOUBLE_COLON(self):
            return self.getToken(CSharpParser.DOUBLE_COLON, 0)

        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.DOT)
            else:
                return self.getToken(CSharpParser.DOT, i)

        def type_argument_list(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Type_argument_listContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Type_argument_listContext,i)


        def getRuleIndex(self):
            return CSharpParser.RULE_method_member_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMethod_member_name" ):
                listener.enterMethod_member_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMethod_member_name" ):
                listener.exitMethod_member_name(self)




    def method_member_name(self):

        localctx = CSharpParser.Method_member_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 438, self.RULE_method_member_name)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2656
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,341,self._ctx)
            if la_ == 1:
                self.state = 2651
                self.identifier()
                pass

            elif la_ == 2:
                self.state = 2652
                self.identifier()
                self.state = 2653
                self.match(CSharpParser.DOUBLE_COLON)
                self.state = 2654
                self.identifier()
                pass


            self.state = 2665
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,343,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2659
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==146:
                        self.state = 2658
                        self.type_argument_list()


                    self.state = 2661
                    self.match(CSharpParser.DOT)
                    self.state = 2662
                    self.identifier() 
                self.state = 2667
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,343,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Operator_declarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPERATOR(self):
            return self.getToken(CSharpParser.OPERATOR, 0)

        def overloadable_operator(self):
            return self.getTypedRuleContext(CSharpParser.Overloadable_operatorContext,0)


        def OPEN_PARENS(self):
            return self.getToken(CSharpParser.OPEN_PARENS, 0)

        def arg_declaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Arg_declarationContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Arg_declarationContext,i)


        def CLOSE_PARENS(self):
            return self.getToken(CSharpParser.CLOSE_PARENS, 0)

        def body(self):
            return self.getTypedRuleContext(CSharpParser.BodyContext,0)


        def right_arrow(self):
            return self.getTypedRuleContext(CSharpParser.Right_arrowContext,0)


        def throwable_expression(self):
            return self.getTypedRuleContext(CSharpParser.Throwable_expressionContext,0)


        def SEMICOLON(self):
            return self.getToken(CSharpParser.SEMICOLON, 0)

        def IN(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.IN)
            else:
                return self.getToken(CSharpParser.IN, i)

        def COMMA(self):
            return self.getToken(CSharpParser.COMMA, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_operator_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOperator_declaration" ):
                listener.enterOperator_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOperator_declaration" ):
                listener.exitOperator_declaration(self)




    def operator_declaration(self):

        localctx = CSharpParser.Operator_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 440, self.RULE_operator_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2668
            self.match(CSharpParser.OPERATOR)
            self.state = 2669
            self.overloadable_operator()
            self.state = 2670
            self.match(CSharpParser.OPEN_PARENS)
            self.state = 2672
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==54:
                self.state = 2671
                self.match(CSharpParser.IN)


            self.state = 2674
            self.arg_declaration()
            self.state = 2680
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==132:
                self.state = 2675
                self.match(CSharpParser.COMMA)
                self.state = 2677
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==54:
                    self.state = 2676
                    self.match(CSharpParser.IN)


                self.state = 2679
                self.arg_declaration()


            self.state = 2682
            self.match(CSharpParser.CLOSE_PARENS)
            self.state = 2688
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,347,self._ctx)
            if la_ == 1:
                self.state = 2683
                self.body()
                pass

            elif la_ == 2:
                self.state = 2684
                self.right_arrow()
                self.state = 2685
                self.throwable_expression()
                self.state = 2686
                self.match(CSharpParser.SEMICOLON)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Arg_declarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def type_(self):
            return self.getTypedRuleContext(CSharpParser.Type_Context,0)


        def identifier(self):
            return self.getTypedRuleContext(CSharpParser.IdentifierContext,0)


        def ASSIGNMENT(self):
            return self.getToken(CSharpParser.ASSIGNMENT, 0)

        def expression(self):
            return self.getTypedRuleContext(CSharpParser.ExpressionContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_arg_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArg_declaration" ):
                listener.enterArg_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArg_declaration" ):
                listener.exitArg_declaration(self)




    def arg_declaration(self):

        localctx = CSharpParser.Arg_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 442, self.RULE_arg_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2690
            self.type_()
            self.state = 2691
            self.identifier()
            self.state = 2694
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==145:
                self.state = 2692
                self.match(CSharpParser.ASSIGNMENT)
                self.state = 2693
                self.expression()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Method_invocationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PARENS(self):
            return self.getToken(CSharpParser.OPEN_PARENS, 0)

        def CLOSE_PARENS(self):
            return self.getToken(CSharpParser.CLOSE_PARENS, 0)

        def argument_list(self):
            return self.getTypedRuleContext(CSharpParser.Argument_listContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_method_invocation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMethod_invocation" ):
                listener.enterMethod_invocation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMethod_invocation" ):
                listener.exitMethod_invocation(self)




    def method_invocation(self):

        localctx = CSharpParser.Method_invocationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 444, self.RULE_method_invocation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2696
            self.match(CSharpParser.OPEN_PARENS)
            self.state = 2698
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & -5419197809667089408) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 2305514793348041149) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & 4398059153857) != 0):
                self.state = 2697
                self.argument_list()


            self.state = 2700
            self.match(CSharpParser.CLOSE_PARENS)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Object_creation_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PARENS(self):
            return self.getToken(CSharpParser.OPEN_PARENS, 0)

        def CLOSE_PARENS(self):
            return self.getToken(CSharpParser.CLOSE_PARENS, 0)

        def argument_list(self):
            return self.getTypedRuleContext(CSharpParser.Argument_listContext,0)


        def object_or_collection_initializer(self):
            return self.getTypedRuleContext(CSharpParser.Object_or_collection_initializerContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_object_creation_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterObject_creation_expression" ):
                listener.enterObject_creation_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitObject_creation_expression" ):
                listener.exitObject_creation_expression(self)




    def object_creation_expression(self):

        localctx = CSharpParser.Object_creation_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 446, self.RULE_object_creation_expression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2702
            self.match(CSharpParser.OPEN_PARENS)
            self.state = 2704
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & -5419197809667089408) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 2305514793348041149) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & 4398059153857) != 0):
                self.state = 2703
                self.argument_list()


            self.state = 2706
            self.match(CSharpParser.CLOSE_PARENS)
            self.state = 2708
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==125:
                self.state = 2707
                self.object_or_collection_initializer()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self):
            return self.getToken(CSharpParser.IDENTIFIER, 0)

        def ADD(self):
            return self.getToken(CSharpParser.ADD, 0)

        def ALIAS(self):
            return self.getToken(CSharpParser.ALIAS, 0)

        def ARGLIST(self):
            return self.getToken(CSharpParser.ARGLIST, 0)

        def ASCENDING(self):
            return self.getToken(CSharpParser.ASCENDING, 0)

        def ASYNC(self):
            return self.getToken(CSharpParser.ASYNC, 0)

        def AWAIT(self):
            return self.getToken(CSharpParser.AWAIT, 0)

        def BY(self):
            return self.getToken(CSharpParser.BY, 0)

        def DESCENDING(self):
            return self.getToken(CSharpParser.DESCENDING, 0)

        def DYNAMIC(self):
            return self.getToken(CSharpParser.DYNAMIC, 0)

        def EQUALS(self):
            return self.getToken(CSharpParser.EQUALS, 0)

        def FROM(self):
            return self.getToken(CSharpParser.FROM, 0)

        def GET(self):
            return self.getToken(CSharpParser.GET, 0)

        def GROUP(self):
            return self.getToken(CSharpParser.GROUP, 0)

        def INTO(self):
            return self.getToken(CSharpParser.INTO, 0)

        def JOIN(self):
            return self.getToken(CSharpParser.JOIN, 0)

        def LET(self):
            return self.getToken(CSharpParser.LET, 0)

        def NAMEOF(self):
            return self.getToken(CSharpParser.NAMEOF, 0)

        def ON(self):
            return self.getToken(CSharpParser.ON, 0)

        def ORDERBY(self):
            return self.getToken(CSharpParser.ORDERBY, 0)

        def PARTIAL(self):
            return self.getToken(CSharpParser.PARTIAL, 0)

        def REMOVE(self):
            return self.getToken(CSharpParser.REMOVE, 0)

        def SELECT(self):
            return self.getToken(CSharpParser.SELECT, 0)

        def SET(self):
            return self.getToken(CSharpParser.SET, 0)

        def UNMANAGED(self):
            return self.getToken(CSharpParser.UNMANAGED, 0)

        def VAR(self):
            return self.getToken(CSharpParser.VAR, 0)

        def WHEN(self):
            return self.getToken(CSharpParser.WHEN, 0)

        def WHERE(self):
            return self.getToken(CSharpParser.WHERE, 0)

        def YIELD(self):
            return self.getToken(CSharpParser.YIELD, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_identifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentifier" ):
                listener.enterIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentifier" ):
                listener.exitIdentifier(self)




    def identifier(self):

        localctx = CSharpParser.IdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 448, self.RULE_identifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2710
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 3750091428249852928) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 1904629023639713) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[191] = self.right_arrow_sempred
        self._predicates[192] = self.right_shift_sempred
        self._predicates[193] = self.right_shift_assignment_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def right_arrow_sempred(self, localctx:Right_arrowContext, predIndex:int):
            if predIndex == 0:
                return (0 if localctx.first is None else localctx.first.tokenIndex) + 1 == (0 if localctx.second is None else localctx.second.tokenIndex)
         

    def right_shift_sempred(self, localctx:Right_shiftContext, predIndex:int):
            if predIndex == 1:
                return (0 if localctx.first is None else localctx.first.tokenIndex) + 1 == (0 if localctx.second is None else localctx.second.tokenIndex)
         

    def right_shift_assignment_sempred(self, localctx:Right_shift_assignmentContext, predIndex:int):
            if predIndex == 2:
                return (0 if localctx.first is None else localctx.first.tokenIndex) + 1 == (0 if localctx.second is None else localctx.second.tokenIndex)
         





# Generated from CSharpParser.g4 by ANTLR 4.13.2
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO

if "." in __name__:
    from .CSharpParserBase import CSharpParserBase
else:
    from CSharpParserBase import CSharpParserBase

def serializedATN():
    return [
        4,1,208,3420,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,
        7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,
        13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
        20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,
        26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,
        33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,
        39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,
        46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,
        52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,2,
        59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,65,7,
        65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,2,71,7,71,2,
        72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,78,7,
        78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,2,
        85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,
        91,2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,
        98,7,98,2,99,7,99,2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,
        2,104,7,104,2,105,7,105,2,106,7,106,2,107,7,107,2,108,7,108,2,109,
        7,109,2,110,7,110,2,111,7,111,2,112,7,112,2,113,7,113,2,114,7,114,
        2,115,7,115,2,116,7,116,2,117,7,117,2,118,7,118,2,119,7,119,2,120,
        7,120,2,121,7,121,2,122,7,122,2,123,7,123,2,124,7,124,2,125,7,125,
        2,126,7,126,2,127,7,127,2,128,7,128,2,129,7,129,2,130,7,130,2,131,
        7,131,2,132,7,132,2,133,7,133,2,134,7,134,2,135,7,135,2,136,7,136,
        2,137,7,137,2,138,7,138,2,139,7,139,2,140,7,140,2,141,7,141,2,142,
        7,142,2,143,7,143,2,144,7,144,2,145,7,145,2,146,7,146,2,147,7,147,
        2,148,7,148,2,149,7,149,2,150,7,150,2,151,7,151,2,152,7,152,2,153,
        7,153,2,154,7,154,2,155,7,155,2,156,7,156,2,157,7,157,2,158,7,158,
        2,159,7,159,2,160,7,160,2,161,7,161,2,162,7,162,2,163,7,163,2,164,
        7,164,2,165,7,165,2,166,7,166,2,167,7,167,2,168,7,168,2,169,7,169,
        2,170,7,170,2,171,7,171,2,172,7,172,2,173,7,173,2,174,7,174,2,175,
        7,175,2,176,7,176,2,177,7,177,2,178,7,178,2,179,7,179,2,180,7,180,
        2,181,7,181,2,182,7,182,2,183,7,183,2,184,7,184,2,185,7,185,2,186,
        7,186,2,187,7,187,2,188,7,188,2,189,7,189,2,190,7,190,2,191,7,191,
        2,192,7,192,2,193,7,193,2,194,7,194,2,195,7,195,2,196,7,196,2,197,
        7,197,2,198,7,198,2,199,7,199,2,200,7,200,2,201,7,201,2,202,7,202,
        2,203,7,203,2,204,7,204,2,205,7,205,2,206,7,206,2,207,7,207,2,208,
        7,208,2,209,7,209,2,210,7,210,2,211,7,211,2,212,7,212,2,213,7,213,
        2,214,7,214,2,215,7,215,2,216,7,216,2,217,7,217,2,218,7,218,2,219,
        7,219,2,220,7,220,2,221,7,221,2,222,7,222,2,223,7,223,2,224,7,224,
        2,225,7,225,2,226,7,226,2,227,7,227,2,228,7,228,2,229,7,229,2,230,
        7,230,2,231,7,231,2,232,7,232,2,233,7,233,2,234,7,234,2,235,7,235,
        2,236,7,236,2,237,7,237,2,238,7,238,2,239,7,239,2,240,7,240,2,241,
        7,241,2,242,7,242,2,243,7,243,2,244,7,244,2,245,7,245,2,246,7,246,
        2,247,7,247,2,248,7,248,2,249,7,249,2,250,7,250,2,251,7,251,2,252,
        7,252,2,253,7,253,2,254,7,254,2,255,7,255,2,256,7,256,2,257,7,257,
        2,258,7,258,2,259,7,259,2,260,7,260,2,261,7,261,2,262,7,262,2,263,
        7,263,2,264,7,264,2,265,7,265,2,266,7,266,2,267,7,267,2,268,7,268,
        2,269,7,269,2,270,7,270,2,271,7,271,2,272,7,272,2,273,7,273,2,274,
        7,274,2,275,7,275,2,276,7,276,2,277,7,277,2,278,7,278,2,279,7,279,
        2,280,7,280,2,281,7,281,2,282,7,282,2,283,7,283,2,284,7,284,2,285,
        7,285,2,286,7,286,2,287,7,287,2,288,7,288,2,289,7,289,1,0,3,0,582,
        8,0,1,0,5,0,585,8,0,10,0,12,0,588,9,0,1,0,1,0,1,1,1,1,1,1,1,1,1,
        1,1,1,3,1,598,8,1,1,2,1,2,4,2,602,8,2,11,2,12,2,603,1,3,4,3,607,
        8,3,11,3,12,3,608,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,
        4,1,4,1,4,1,4,1,4,1,4,1,4,3,4,629,8,4,1,5,1,5,3,5,633,8,5,1,5,3,
        5,636,8,5,1,5,1,5,1,5,3,5,641,8,5,5,5,643,8,5,10,5,12,5,646,9,5,
        1,6,1,6,1,6,1,6,5,6,652,8,6,10,6,12,6,655,9,6,1,6,1,6,3,6,659,8,
        6,1,6,3,6,662,8,6,1,6,1,6,1,6,1,6,1,6,3,6,669,8,6,1,6,3,6,672,8,
        6,1,6,3,6,675,8,6,1,6,1,6,1,6,1,6,1,6,3,6,682,8,6,1,7,1,7,1,7,1,
        7,1,7,1,7,1,8,1,8,1,8,5,8,693,8,8,10,8,12,8,696,9,8,1,9,1,9,1,9,
        1,9,1,9,3,9,703,8,9,1,10,1,10,1,10,1,10,4,10,709,8,10,11,10,12,10,
        710,1,10,1,10,1,10,3,10,716,8,10,1,11,3,11,719,8,11,1,11,1,11,1,
        12,1,12,1,12,1,12,4,12,727,8,12,11,12,12,12,728,1,12,1,12,1,13,1,
        13,3,13,735,8,13,3,13,737,8,13,1,14,3,14,740,8,14,1,14,1,14,1,15,
        1,15,3,15,746,8,15,1,16,1,16,1,16,3,16,751,8,16,1,17,1,17,1,18,1,
        18,1,19,1,19,3,19,759,8,19,1,20,1,20,1,20,1,20,1,20,1,21,1,21,1,
        22,1,22,1,23,1,23,1,23,1,23,3,23,774,8,23,1,24,1,24,1,24,1,24,5,
        24,780,8,24,10,24,12,24,783,9,24,1,24,1,24,1,25,1,25,1,25,5,25,790,
        8,25,10,25,12,25,793,9,25,1,26,3,26,796,8,26,1,26,3,26,799,8,26,
        1,26,1,26,1,26,3,26,804,8,26,1,26,3,26,807,8,26,1,27,1,27,1,27,1,
        28,1,28,1,28,1,28,1,28,1,28,1,28,3,28,819,8,28,1,29,1,29,1,29,3,
        29,824,8,29,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,3,30,834,8,30,
        1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,3,31,847,
        8,31,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,
        1,32,1,32,1,32,3,32,864,8,32,1,33,1,33,1,33,1,33,3,33,870,8,33,3,
        33,872,8,33,1,34,1,34,1,34,5,34,877,8,34,10,34,12,34,880,9,34,1,
        35,1,35,1,35,5,35,885,8,35,10,35,12,35,888,9,35,1,36,1,36,1,36,5,
        36,893,8,36,10,36,12,36,896,9,36,1,37,1,37,1,37,5,37,901,8,37,10,
        37,12,37,904,9,37,1,38,1,38,1,38,5,38,909,8,38,10,38,12,38,912,9,
        38,1,39,1,39,1,39,5,39,917,8,39,10,39,12,39,920,9,39,1,40,1,40,1,
        40,1,40,1,40,1,40,1,40,1,40,1,40,5,40,931,8,40,10,40,12,40,934,9,
        40,1,41,1,41,1,41,3,41,939,8,41,1,41,5,41,942,8,41,10,41,12,41,945,
        9,41,1,42,1,42,1,42,5,42,950,8,42,10,42,12,42,953,9,42,1,43,1,43,
        1,43,5,43,958,8,43,10,43,12,43,961,9,43,1,44,1,44,1,44,1,44,1,44,
        3,44,968,8,44,3,44,970,8,44,1,44,3,44,973,8,44,1,45,1,45,1,45,5,
        45,978,8,45,10,45,12,45,981,9,45,1,46,1,46,3,46,985,8,46,1,46,1,
        46,1,46,1,47,1,47,3,47,992,8,47,1,47,1,47,3,47,996,8,47,3,47,998,
        8,47,1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,
        1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,3,48,1022,8,48,
        1,49,1,49,1,49,1,49,1,49,1,50,1,50,3,50,1031,8,50,1,50,1,50,1,51,
        1,51,1,51,5,51,1038,8,51,10,51,12,51,1041,9,51,1,52,1,52,1,52,3,
        52,1046,8,52,1,53,1,53,3,53,1050,8,53,1,53,5,53,1053,8,53,10,53,
        12,53,1056,9,53,1,53,3,53,1059,8,53,1,53,1,53,1,53,1,53,1,53,1,53,
        3,53,1067,8,53,1,53,3,53,1070,8,53,1,53,5,53,1073,8,53,10,53,12,
        53,1076,9,53,1,53,3,53,1079,8,53,5,53,1081,8,53,10,53,12,53,1084,
        9,53,1,53,1,53,1,53,1,53,3,53,1090,8,53,1,54,1,54,1,54,3,54,1095,
        8,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,
        3,54,1109,8,54,1,54,1,54,1,54,1,54,3,54,1115,8,54,1,54,1,54,1,54,
        1,54,1,54,1,54,1,54,1,54,5,54,1125,8,54,10,54,12,54,1128,9,54,1,
        54,3,54,1131,8,54,1,54,4,54,1134,8,54,11,54,12,54,1135,1,54,1,54,
        3,54,1140,8,54,1,54,1,54,1,54,1,54,3,54,1146,8,54,1,54,1,54,1,54,
        1,54,1,54,1,54,4,54,1154,8,54,11,54,12,54,1155,1,54,1,54,1,54,1,
        54,1,54,1,54,1,54,3,54,1165,8,54,1,54,1,54,1,54,1,54,1,54,1,54,1,
        54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,3,54,1183,8,54,1,
        54,3,54,1186,8,54,1,54,1,54,1,54,3,54,1191,8,54,1,54,3,54,1194,8,
        54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,5,54,1207,
        8,54,10,54,12,54,1210,9,54,1,54,1,54,1,54,3,54,1215,8,54,1,55,1,
        55,3,55,1219,8,55,1,56,1,56,1,56,1,57,3,57,1225,8,57,1,57,1,57,1,
        57,3,57,1230,8,57,1,58,3,58,1233,8,58,1,58,1,58,1,58,1,58,5,58,1239,
        8,58,10,58,12,58,1242,9,58,1,58,1,58,1,59,1,59,1,59,3,59,1249,8,
        59,1,59,1,59,1,60,1,60,1,61,1,61,1,61,5,61,1258,8,61,10,61,12,61,
        1261,9,61,1,62,1,62,3,62,1265,8,62,1,63,1,63,1,63,3,63,1270,8,63,
        3,63,1272,8,63,1,63,1,63,1,64,1,64,1,64,5,64,1279,8,64,10,64,12,
        64,1282,9,64,1,65,1,65,1,65,1,65,1,65,3,65,1289,8,65,1,65,1,65,1,
        65,1,66,1,66,1,66,3,66,1297,8,66,1,67,1,67,1,67,1,67,5,67,1303,8,
        67,10,67,12,67,1306,9,67,1,67,3,67,1309,8,67,1,67,1,67,1,68,1,68,
        1,68,1,68,1,68,1,68,3,68,1319,8,68,1,69,1,69,1,69,3,69,1324,8,69,
        3,69,1326,8,69,1,69,1,69,1,70,1,70,1,70,5,70,1333,8,70,10,70,12,
        70,1336,9,70,1,71,1,71,1,71,1,71,3,71,1342,8,71,1,71,1,71,1,71,1,
        71,1,71,3,71,1349,8,71,1,72,1,72,3,72,1353,8,72,1,72,1,72,1,72,3,
        72,1358,8,72,3,72,1360,8,72,1,72,1,72,1,72,3,72,1365,8,72,5,72,1367,
        8,72,10,72,12,72,1370,9,72,1,73,1,73,5,73,1374,8,73,10,73,12,73,
        1377,9,73,1,73,1,73,1,74,1,74,1,74,5,74,1384,8,74,10,74,12,74,1387,
        9,74,1,74,3,74,1390,8,74,1,74,3,74,1393,8,74,1,74,3,74,1396,8,74,
        1,75,1,75,1,75,1,75,5,75,1402,8,75,10,75,12,75,1405,9,75,1,75,1,
        75,1,76,1,76,1,76,1,76,1,77,3,77,1414,8,77,1,77,3,77,1417,8,77,1,
        77,3,77,1420,8,77,1,77,1,77,1,77,1,77,1,78,1,78,1,78,1,78,1,78,1,
        78,1,78,1,78,1,78,1,78,1,78,3,78,1437,8,78,1,79,1,79,1,79,5,79,1442,
        8,79,10,79,12,79,1445,9,79,1,80,3,80,1448,8,80,1,80,1,80,1,80,1,
        80,1,80,3,80,1455,8,80,1,80,3,80,1458,8,80,1,80,1,80,1,80,3,80,1463,
        8,80,1,81,1,81,1,81,5,81,1468,8,81,10,81,12,81,1471,9,81,1,82,1,
        82,3,82,1475,8,82,1,83,1,83,1,83,1,84,1,84,3,84,1482,8,84,1,84,1,
        84,1,84,1,84,1,85,5,85,1489,8,85,10,85,12,85,1492,9,85,1,85,1,85,
        3,85,1496,8,85,1,86,1,86,1,86,1,86,1,86,3,86,1503,8,86,1,87,1,87,
        1,87,1,87,1,87,1,88,1,88,1,88,1,89,1,89,3,89,1515,8,89,1,89,1,89,
        1,89,1,89,1,89,1,89,1,89,1,89,1,89,3,89,1526,8,89,1,90,1,90,1,90,
        1,90,5,90,1532,8,90,10,90,12,90,1535,9,90,1,91,1,91,3,91,1539,8,
        91,1,92,1,92,1,92,1,92,1,92,1,92,1,92,3,92,1548,8,92,1,93,1,93,1,
        93,1,93,1,94,1,94,1,94,3,94,1557,8,94,1,95,1,95,1,95,1,95,1,95,1,
        95,1,95,3,95,1566,8,95,1,96,1,96,1,96,1,97,3,97,1572,8,97,1,97,1,
        97,1,97,3,97,1577,8,97,1,97,1,97,3,97,1581,8,97,1,97,1,97,3,97,1585,
        8,97,1,98,1,98,3,98,1589,8,98,1,98,1,98,3,98,1593,8,98,1,98,1,98,
        3,98,1597,8,98,1,99,1,99,1,99,1,99,1,99,3,99,1604,8,99,1,100,1,100,
        1,100,1,100,1,101,1,101,1,101,1,101,1,101,1,101,1,101,1,101,1,101,
        1,101,1,101,1,101,5,101,1622,8,101,10,101,12,101,1625,9,101,1,101,
        1,101,1,101,1,101,1,101,1,101,1,101,1,101,1,101,1,101,1,101,1,101,
        1,101,1,101,1,101,1,101,1,101,1,101,1,101,3,101,1646,8,101,1,101,
        1,101,3,101,1650,8,101,1,101,1,101,3,101,1654,8,101,1,101,1,101,
        1,101,3,101,1659,8,101,1,101,1,101,1,101,1,101,1,101,3,101,1666,
        8,101,1,101,1,101,1,101,1,101,1,101,1,101,1,101,1,101,1,101,1,101,
        1,101,1,101,1,101,1,101,3,101,1682,8,101,1,101,1,101,1,101,3,101,
        1687,8,101,1,101,1,101,1,101,3,101,1692,8,101,1,101,1,101,1,101,
        1,101,1,101,1,101,1,101,1,101,1,101,3,101,1703,8,101,1,102,1,102,
        1,103,1,103,1,103,1,103,1,103,1,103,1,103,1,103,1,103,1,103,1,103,
        1,103,1,103,1,103,3,103,1721,8,103,1,104,1,104,1,104,1,105,1,105,
        1,105,1,106,1,106,1,106,1,106,1,106,1,106,1,107,1,107,3,107,1737,
        8,107,1,108,1,108,1,108,1,108,1,108,1,108,1,108,1,108,3,108,1747,
        8,108,1,108,1,108,3,108,1751,8,108,1,108,1,108,3,108,1755,8,108,
        1,109,1,109,1,109,1,109,1,110,1,110,1,110,5,110,1764,8,110,10,110,
        12,110,1767,9,110,1,110,3,110,1770,8,110,1,111,1,111,1,112,1,112,
        1,112,1,112,1,112,1,112,1,113,1,113,1,113,1,113,1,113,1,113,1,113,
        1,113,3,113,1788,8,113,1,114,1,114,1,114,1,114,1,114,1,114,1,114,
        1,115,1,115,1,115,1,116,1,116,1,116,1,116,1,116,1,116,1,116,3,116,
        1807,8,116,1,116,1,116,3,116,1811,8,116,1,117,1,117,3,117,1815,8,
        117,1,117,1,117,1,118,1,118,1,118,1,118,3,118,1823,8,118,1,118,1,
        118,1,118,1,118,5,118,1829,8,118,10,118,12,118,1832,9,118,1,118,
        1,118,1,118,1,118,1,118,1,118,1,118,1,118,1,118,1,118,1,118,3,118,
        1845,8,118,1,118,1,118,1,118,1,118,1,118,3,118,1852,8,118,1,119,
        1,119,1,119,1,119,1,119,1,120,1,120,1,120,1,120,1,120,1,120,1,120,
        1,120,1,120,1,120,1,120,1,121,1,121,3,121,1872,8,121,1,122,1,122,
        1,122,3,122,1877,8,122,1,122,3,122,1880,8,122,1,123,1,123,1,123,
        1,123,1,123,3,123,1887,8,123,1,124,1,124,1,124,1,124,1,125,4,125,
        1894,8,125,11,125,12,125,1895,1,125,1,125,1,126,1,126,1,126,3,126,
        1903,8,126,1,126,1,126,1,126,1,126,1,126,3,126,1910,8,126,1,126,
        1,126,1,126,1,126,3,126,1916,8,126,1,127,1,127,1,127,1,128,4,128,
        1922,8,128,11,128,12,128,1923,1,129,1,129,1,129,1,129,5,129,1930,
        8,129,10,129,12,129,1933,9,129,3,129,1935,8,129,1,130,1,130,1,130,
        5,130,1940,8,130,10,130,12,130,1943,9,130,1,131,1,131,5,131,1947,
        8,131,10,131,12,131,1950,9,131,1,131,3,131,1953,8,131,1,131,3,131,
        1956,8,131,1,132,1,132,1,132,1,132,3,132,1962,8,132,1,132,1,132,
        3,132,1966,8,132,1,132,1,132,1,133,1,133,3,133,1972,8,133,1,133,
        1,133,1,134,1,134,1,134,1,134,1,134,1,135,1,135,1,135,1,136,1,136,
        3,136,1986,8,136,1,137,1,137,1,137,1,137,3,137,1992,8,137,1,138,
        1,138,1,138,5,138,1997,8,138,10,138,12,138,2000,9,138,1,139,1,139,
        3,139,2004,8,139,1,139,3,139,2007,8,139,1,139,3,139,2010,8,139,1,
        139,1,139,3,139,2014,8,139,1,140,4,140,2017,8,140,11,140,12,140,
        2018,1,141,1,141,1,141,1,141,1,141,1,142,4,142,2027,8,142,11,142,
        12,142,2028,1,143,3,143,2032,8,143,1,143,1,143,1,143,1,143,1,143,
        3,143,2039,8,143,1,143,1,143,1,143,3,143,2044,8,143,1,143,1,143,
        1,143,1,143,1,143,3,143,2051,8,143,1,143,1,143,1,143,1,143,1,143,
        3,143,2058,8,143,1,144,4,144,2061,8,144,11,144,12,144,2062,1,145,
        1,145,1,145,1,145,3,145,2069,8,145,1,146,3,146,2072,8,146,1,146,
        3,146,2075,8,146,1,146,1,146,1,146,1,146,1,146,1,146,3,146,2083,
        8,146,1,147,1,147,3,147,2087,8,147,1,147,1,147,3,147,2091,8,147,
        1,147,3,147,2094,8,147,1,147,3,147,2097,8,147,1,147,1,147,3,147,
        2101,8,147,1,147,1,147,1,147,1,148,1,148,1,148,1,148,5,148,2110,
        8,148,10,148,12,148,2113,9,148,1,149,1,149,3,149,2117,8,149,1,149,
        1,149,3,149,2121,8,149,1,150,1,150,1,150,5,150,2126,8,150,10,150,
        12,150,2129,9,150,1,151,3,151,2132,8,151,1,151,1,151,1,151,1,152,
        1,152,1,152,1,152,3,152,2141,8,152,1,153,1,153,1,153,1,153,5,153,
        2147,8,153,10,153,12,153,2150,9,153,1,153,1,153,1,154,3,154,2155,
        8,154,1,154,1,154,1,155,1,155,1,155,1,155,5,155,2163,8,155,10,155,
        12,155,2166,9,155,1,156,1,156,1,156,5,156,2171,8,156,10,156,12,156,
        2174,9,156,1,157,4,157,2177,8,157,11,157,12,157,2178,1,158,1,158,
        1,158,1,158,1,158,1,159,1,159,1,159,1,159,3,159,2190,8,159,1,159,
        1,159,3,159,2194,8,159,3,159,2196,8,159,1,160,1,160,1,160,3,160,
        2201,8,160,1,160,1,160,3,160,2205,8,160,1,161,1,161,1,161,1,161,
        1,161,1,161,1,161,1,161,1,161,1,161,1,161,3,161,2218,8,161,1,162,
        1,162,3,162,2222,8,162,1,162,3,162,2225,8,162,1,163,1,163,1,163,
        1,163,1,164,1,164,1,164,5,164,2234,8,164,10,164,12,164,2237,9,164,
        1,164,3,164,2240,8,164,1,165,3,165,2243,8,165,1,165,3,165,2246,8,
        165,1,165,3,165,2249,8,165,1,166,1,166,1,166,1,166,5,166,2255,8,
        166,10,166,12,166,2258,9,166,1,166,1,166,1,167,1,167,1,167,1,167,
        1,168,1,168,1,168,1,168,1,168,1,168,1,168,1,168,3,168,2274,8,168,
        1,169,1,169,1,169,1,169,1,170,1,170,1,170,1,170,1,171,1,171,1,171,
        1,172,1,172,1,172,1,173,1,173,1,174,1,174,1,175,1,175,1,176,1,176,
        1,176,1,177,1,177,1,178,1,178,3,178,2303,8,178,1,178,3,178,2306,
        8,178,1,178,1,178,1,178,1,178,1,178,1,178,1,178,1,179,1,179,1,179,
        5,179,2318,8,179,10,179,12,179,2321,9,179,1,180,1,180,1,180,1,180,
        1,181,1,181,3,181,2329,8,181,1,181,1,181,1,182,4,182,2334,8,182,
        11,182,12,182,2335,1,183,3,183,2339,8,183,1,183,3,183,2342,8,183,
        1,183,1,183,3,183,2346,8,183,1,184,4,184,2349,8,184,11,184,12,184,
        2350,1,185,1,185,1,186,1,186,1,186,1,186,1,186,1,186,1,186,1,186,
        1,186,3,186,2364,8,186,1,186,1,186,1,186,1,186,1,186,1,186,1,186,
        1,186,3,186,2374,8,186,1,187,1,187,1,187,1,187,1,187,3,187,2381,
        8,187,1,187,3,187,2384,8,187,1,187,1,187,1,187,1,187,1,187,1,187,
        1,187,1,187,1,187,1,187,3,187,2396,8,187,1,188,1,188,1,188,5,188,
        2401,8,188,10,188,12,188,2404,9,188,1,189,1,189,1,189,1,189,1,190,
        1,190,1,190,5,190,2413,8,190,10,190,12,190,2416,9,190,1,191,1,191,
        1,191,3,191,2421,8,191,1,192,1,192,3,192,2425,8,192,1,193,1,193,
        3,193,2429,8,193,1,194,1,194,1,195,1,195,1,195,1,195,1,195,1,195,
        3,195,2439,8,195,1,196,1,196,1,196,1,196,3,196,2445,8,196,3,196,
        2447,8,196,1,197,1,197,1,197,5,197,2452,8,197,10,197,12,197,2455,
        9,197,1,198,3,198,2458,8,198,1,198,3,198,2461,8,198,1,198,1,198,
        3,198,2465,8,198,1,199,1,199,1,199,1,199,1,199,1,199,1,199,1,199,
        1,199,1,199,3,199,2477,8,199,1,200,3,200,2480,8,200,1,200,1,200,
        1,200,1,200,1,201,3,201,2487,8,201,1,201,3,201,2490,8,201,1,201,
        1,201,1,201,3,201,2495,8,201,1,201,1,201,1,201,3,201,2500,8,201,
        1,201,1,201,1,201,3,201,2505,8,201,1,201,1,201,1,201,3,201,2510,
        8,201,3,201,2512,8,201,1,202,3,202,2515,8,202,1,202,1,202,1,202,
        1,203,3,203,2521,8,203,1,203,3,203,2524,8,203,1,203,1,203,1,203,
        1,204,3,204,2530,8,204,1,204,3,204,2533,8,204,1,204,1,204,1,204,
        1,205,1,205,1,205,1,205,1,205,1,205,1,205,1,205,1,205,1,205,1,205,
        1,205,1,205,3,205,2551,8,205,1,206,1,206,1,206,1,206,1,206,1,206,
        3,206,2559,8,206,1,207,3,207,2562,8,207,1,207,1,207,1,207,1,207,
        1,207,1,207,1,207,1,207,3,207,2572,8,207,1,208,3,208,2575,8,208,
        1,208,1,208,1,208,1,209,3,209,2581,8,209,1,209,1,209,1,209,1,210,
        1,210,1,210,1,210,1,210,1,210,1,210,1,210,1,210,1,210,1,210,1,210,
        1,210,1,210,1,210,1,210,1,210,1,210,1,210,1,210,1,210,1,210,3,210,
        2608,8,210,1,211,1,211,1,211,1,211,1,211,1,211,1,211,1,212,1,212,
        1,212,1,212,3,212,2621,8,212,1,212,1,212,1,213,1,213,1,213,1,213,
        1,213,1,213,3,213,2631,8,213,1,214,1,214,1,214,1,215,1,215,5,215,
        2638,8,215,10,215,12,215,2641,9,215,1,215,1,215,3,215,2645,8,215,
        1,216,3,216,2648,8,216,1,216,3,216,2651,8,216,1,216,1,216,1,216,
        1,216,4,216,2657,8,216,11,216,12,216,2658,1,216,1,216,1,216,1,216,
        1,216,1,216,3,216,2667,8,216,1,217,1,217,5,217,2671,8,217,10,217,
        12,217,2674,9,217,1,217,4,217,2677,8,217,11,217,12,217,2678,1,218,
        1,218,5,218,2683,8,218,10,218,12,218,2686,9,218,1,218,1,218,1,219,
        1,219,1,219,1,219,5,219,2694,8,219,10,219,12,219,2697,9,219,1,219,
        3,219,2700,8,219,3,219,2702,8,219,1,219,1,219,1,220,1,220,1,220,
        1,220,5,220,2710,8,220,10,220,12,220,2713,9,220,1,220,1,220,1,221,
        3,221,2718,8,221,1,221,3,221,2721,8,221,1,221,1,221,1,222,1,222,
        1,223,1,223,1,223,1,224,1,224,5,224,2732,8,224,10,224,12,224,2735,
        9,224,1,224,1,224,1,225,3,225,2740,8,225,1,225,3,225,2743,8,225,
        1,225,3,225,2746,8,225,1,225,1,225,1,225,1,225,1,225,3,225,2753,
        8,225,1,225,1,225,1,225,3,225,2758,8,225,1,225,1,225,3,225,2762,
        8,225,1,225,1,225,3,225,2766,8,225,1,225,1,225,1,225,1,225,1,225,
        1,225,1,225,1,225,1,225,1,225,1,225,1,225,1,225,1,225,1,225,3,225,
        2783,8,225,1,225,3,225,2786,8,225,1,225,1,225,1,225,3,225,2791,8,
        225,1,225,1,225,3,225,2795,8,225,1,225,1,225,3,225,2799,8,225,1,
        225,1,225,1,225,1,225,1,225,1,225,1,225,3,225,2808,8,225,1,226,3,
        226,2811,8,226,1,226,1,226,1,226,3,226,2816,8,226,1,226,1,226,3,
        226,2820,8,226,1,226,1,226,1,226,3,226,2825,8,226,1,226,1,226,3,
        226,2829,8,226,3,226,2831,8,226,1,227,1,227,1,227,1,228,1,228,1,
        228,1,228,5,228,2840,8,228,10,228,12,228,2843,9,228,1,228,3,228,
        2846,8,228,3,228,2848,8,228,1,228,1,228,1,229,3,229,2853,8,229,1,
        229,1,229,1,229,3,229,2858,8,229,1,230,1,230,1,230,1,230,1,230,3,
        230,2865,8,230,1,230,1,230,1,231,1,231,3,231,2871,8,231,1,232,4,
        232,2874,8,232,11,232,12,232,2875,1,233,1,233,1,233,1,233,3,233,
        2882,8,233,1,233,1,233,3,233,2886,8,233,1,233,1,233,1,233,1,233,
        1,233,1,233,1,233,1,233,1,233,1,233,5,233,2898,8,233,10,233,12,233,
        2901,9,233,3,233,2903,8,233,1,234,1,234,3,234,2907,8,234,1,235,1,
        235,1,235,5,235,2912,8,235,10,235,12,235,2915,9,235,1,236,1,236,
        1,236,1,236,1,236,5,236,2922,8,236,10,236,12,236,2925,9,236,3,236,
        2927,8,236,1,236,3,236,2930,8,236,1,237,1,237,1,237,3,237,2935,8,
        237,1,237,1,237,1,238,1,238,3,238,2941,8,238,1,238,1,238,5,238,2945,
        8,238,10,238,12,238,2948,9,238,1,238,1,238,1,238,1,238,3,238,2954,
        8,238,1,239,1,239,1,239,5,239,2959,8,239,10,239,12,239,2962,9,239,
        1,240,1,240,1,240,1,240,1,241,3,241,2969,8,241,1,241,1,241,3,241,
        2973,8,241,1,242,1,242,1,242,1,242,1,242,1,243,1,243,1,243,1,243,
        1,244,1,244,1,244,1,244,1,245,1,245,1,245,1,245,1,246,1,246,1,246,
        1,246,1,246,1,246,1,246,1,246,1,246,1,246,3,246,3002,8,246,1,247,
        1,247,1,247,1,247,3,247,3008,8,247,1,248,1,248,1,249,1,249,1,249,
        1,249,3,249,3016,8,249,1,250,1,250,5,250,3020,8,250,10,250,12,250,
        3023,9,250,1,250,1,250,1,251,1,251,5,251,3029,8,251,10,251,12,251,
        3032,9,251,1,251,1,251,1,252,1,252,1,252,1,252,1,252,1,252,1,252,
        1,252,1,252,1,252,3,252,3046,8,252,1,253,1,253,1,253,1,253,3,253,
        3052,8,253,1,254,1,254,1,254,1,254,3,254,3058,8,254,1,254,3,254,
        3061,8,254,1,254,1,254,1,255,1,255,1,256,1,256,4,256,3069,8,256,
        11,256,12,256,3070,1,257,1,257,1,258,1,258,1,259,5,259,3078,8,259,
        10,259,12,259,3081,9,259,1,259,3,259,3084,8,259,1,259,1,259,1,259,
        3,259,3089,8,259,1,259,3,259,3092,8,259,1,259,3,259,3095,8,259,1,
        259,3,259,3098,8,259,1,259,1,259,3,259,3102,8,259,1,260,1,260,3,
        260,3106,8,260,1,260,1,260,1,261,1,261,1,262,5,262,3113,8,262,10,
        262,12,262,3116,9,262,1,262,3,262,3119,8,262,1,262,3,262,3122,8,
        262,1,262,1,262,1,262,3,262,3127,8,262,1,262,1,262,1,262,3,262,3132,
        8,262,1,262,3,262,3135,8,262,1,262,3,262,3138,8,262,1,262,1,262,
        1,263,1,263,1,264,1,264,1,264,3,264,3147,8,264,1,264,3,264,3150,
        8,264,1,264,3,264,3153,8,264,1,264,1,264,3,264,3157,8,264,1,265,
        1,265,1,265,3,265,3162,8,265,1,265,1,265,3,265,3166,8,265,1,266,
        1,266,1,266,1,266,3,266,3172,8,266,1,266,1,266,3,266,3176,8,266,
        1,266,1,266,3,266,3180,8,266,1,266,1,266,1,267,1,267,1,267,1,267,
        1,267,1,267,1,267,1,267,1,267,1,267,3,267,3194,8,267,1,268,1,268,
        1,268,1,269,1,269,1,269,1,269,1,269,1,269,1,269,1,269,3,269,3207,
        8,269,1,269,1,269,1,269,1,269,3,269,3213,8,269,1,270,1,270,1,270,
        1,270,1,270,1,271,1,271,1,271,1,271,1,271,1,271,1,271,1,271,1,271,
        1,271,1,271,1,271,3,271,3232,8,271,1,272,1,272,1,272,1,272,1,272,
        1,272,1,273,1,273,1,273,3,273,3243,8,273,1,273,1,273,3,273,3247,
        8,273,1,273,1,273,1,274,3,274,3252,8,274,1,274,1,274,3,274,3256,
        8,274,1,274,1,274,1,274,1,274,1,274,3,274,3263,8,274,1,274,1,274,
        1,274,1,274,1,274,1,274,3,274,3271,8,274,1,275,1,275,1,275,3,275,
        3276,8,275,1,275,1,275,1,275,1,275,1,275,1,275,3,275,3284,8,275,
        1,275,1,275,5,275,3288,8,275,10,275,12,275,3291,9,275,3,275,3293,
        8,275,1,276,1,276,1,276,3,276,3298,8,276,1,277,5,277,3301,8,277,
        10,277,12,277,3304,9,277,1,278,1,278,1,279,5,279,3309,8,279,10,279,
        12,279,3312,9,279,1,279,3,279,3315,8,279,1,280,1,280,3,280,3319,
        8,280,1,281,1,281,1,281,1,281,1,281,1,281,1,281,3,281,3328,8,281,
        1,282,1,282,1,283,1,283,1,283,1,283,1,283,3,283,3337,8,283,1,283,
        3,283,3340,8,283,1,283,1,283,5,283,3344,8,283,10,283,12,283,3347,
        9,283,1,284,1,284,1,284,1,284,3,284,3353,8,284,1,284,1,284,1,284,
        3,284,3358,8,284,1,284,3,284,3361,8,284,1,284,1,284,1,284,1,284,
        1,284,1,284,3,284,3369,8,284,1,285,1,285,1,285,1,285,3,285,3375,
        8,285,1,286,3,286,3378,8,286,1,286,1,286,3,286,3382,8,286,1,286,
        1,286,1,287,1,287,3,287,3388,8,287,1,287,1,287,3,287,3392,8,287,
        1,287,1,287,1,287,1,287,1,287,1,287,5,287,3400,8,287,10,287,12,287,
        3403,9,287,1,287,3,287,3406,8,287,3,287,3408,8,287,1,288,1,288,3,
        288,3412,8,288,1,288,1,288,3,288,3416,8,288,1,289,1,289,1,289,0,
        0,290,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,
        42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,
        86,88,90,92,94,96,98,100,102,104,106,108,110,112,114,116,118,120,
        122,124,126,128,130,132,134,136,138,140,142,144,146,148,150,152,
        154,156,158,160,162,164,166,168,170,172,174,176,178,180,182,184,
        186,188,190,192,194,196,198,200,202,204,206,208,210,212,214,216,
        218,220,222,224,226,228,230,232,234,236,238,240,242,244,246,248,
        250,252,254,256,258,260,262,264,266,268,270,272,274,276,278,280,
        282,284,286,288,290,292,294,296,298,300,302,304,306,308,310,312,
        314,316,318,320,322,324,326,328,330,332,334,336,338,340,342,344,
        346,348,350,352,354,356,358,360,362,364,366,368,370,372,374,376,
        378,380,382,384,386,388,390,392,394,396,398,400,402,404,406,408,
        410,412,414,416,418,420,422,424,426,428,430,432,434,436,438,440,
        442,444,446,448,450,452,454,456,458,460,462,464,466,468,470,472,
        474,476,478,480,482,484,486,488,490,492,494,496,498,500,502,504,
        506,508,510,512,514,516,518,520,522,524,526,528,530,532,534,536,
        538,540,542,544,546,548,550,552,554,556,558,560,562,564,566,568,
        570,572,574,576,578,0,21,8,0,22,22,25,25,58,58,67,67,90,90,94,94,
        107,108,112,112,2,0,35,35,46,46,3,0,57,57,78,78,87,87,1,0,166,167,
        2,0,156,157,168,169,1,0,145,146,1,0,147,149,14,0,19,19,22,22,25,
        25,30,30,35,35,46,46,58,58,67,67,73,73,90,90,94,94,98,98,107,108,
        112,112,2,0,15,15,33,33,2,0,16,16,111,111,13,0,9,9,16,16,42,42,47,
        47,60,60,70,70,79,79,81,85,91,91,97,97,111,111,115,115,117,117,2,
        0,41,41,56,56,2,0,18,18,101,101,2,0,147,147,158,158,2,0,57,57,78,
        78,2,0,43,43,103,103,23,0,9,9,14,14,18,20,22,32,34,35,37,38,40,46,
        48,49,52,52,55,60,63,63,66,67,69,70,72,73,76,76,78,80,82,85,87,87,
        89,91,94,105,107,113,115,117,120,120,8,0,9,9,47,47,60,60,70,70,82,
        84,91,91,97,97,111,111,5,0,47,47,60,60,70,70,82,85,111,111,10,0,
        9,9,42,42,60,60,70,70,79,79,82,84,91,91,97,97,111,111,115,115,22,
        0,10,10,12,13,15,17,21,21,33,33,36,36,39,39,50,51,54,54,62,62,64,
        65,68,68,74,74,77,77,81,81,88,88,92,93,110,110,114,114,118,119,121,
        121,123,123,3772,0,581,1,0,0,0,2,597,1,0,0,0,4,601,1,0,0,0,6,606,
        1,0,0,0,8,628,1,0,0,0,10,635,1,0,0,0,12,681,1,0,0,0,14,683,1,0,0,
        0,16,689,1,0,0,0,18,702,1,0,0,0,20,715,1,0,0,0,22,718,1,0,0,0,24,
        722,1,0,0,0,26,736,1,0,0,0,28,739,1,0,0,0,30,745,1,0,0,0,32,750,
        1,0,0,0,34,752,1,0,0,0,36,754,1,0,0,0,38,758,1,0,0,0,40,760,1,0,
        0,0,42,765,1,0,0,0,44,767,1,0,0,0,46,773,1,0,0,0,48,775,1,0,0,0,
        50,786,1,0,0,0,52,795,1,0,0,0,54,808,1,0,0,0,56,818,1,0,0,0,58,823,
        1,0,0,0,60,833,1,0,0,0,62,846,1,0,0,0,64,863,1,0,0,0,66,865,1,0,
        0,0,68,873,1,0,0,0,70,881,1,0,0,0,72,889,1,0,0,0,74,897,1,0,0,0,
        76,905,1,0,0,0,78,913,1,0,0,0,80,921,1,0,0,0,82,935,1,0,0,0,84,946,
        1,0,0,0,86,954,1,0,0,0,88,962,1,0,0,0,90,974,1,0,0,0,92,982,1,0,
        0,0,94,997,1,0,0,0,96,1021,1,0,0,0,98,1023,1,0,0,0,100,1028,1,0,
        0,0,102,1034,1,0,0,0,104,1045,1,0,0,0,106,1089,1,0,0,0,108,1214,
        1,0,0,0,110,1218,1,0,0,0,112,1220,1,0,0,0,114,1224,1,0,0,0,116,1232,
        1,0,0,0,118,1248,1,0,0,0,120,1252,1,0,0,0,122,1254,1,0,0,0,124,1264,
        1,0,0,0,126,1266,1,0,0,0,128,1275,1,0,0,0,130,1288,1,0,0,0,132,1296,
        1,0,0,0,134,1298,1,0,0,0,136,1318,1,0,0,0,138,1320,1,0,0,0,140,1329,
        1,0,0,0,142,1348,1,0,0,0,144,1350,1,0,0,0,146,1371,1,0,0,0,148,1380,
        1,0,0,0,150,1397,1,0,0,0,152,1408,1,0,0,0,154,1413,1,0,0,0,156,1436,
        1,0,0,0,158,1438,1,0,0,0,160,1447,1,0,0,0,162,1464,1,0,0,0,164,1474,
        1,0,0,0,166,1476,1,0,0,0,168,1479,1,0,0,0,170,1490,1,0,0,0,172,1502,
        1,0,0,0,174,1504,1,0,0,0,176,1509,1,0,0,0,178,1512,1,0,0,0,180,1527,
        1,0,0,0,182,1536,1,0,0,0,184,1547,1,0,0,0,186,1549,1,0,0,0,188,1556,
        1,0,0,0,190,1565,1,0,0,0,192,1567,1,0,0,0,194,1571,1,0,0,0,196,1596,
        1,0,0,0,198,1603,1,0,0,0,200,1605,1,0,0,0,202,1702,1,0,0,0,204,1704,
        1,0,0,0,206,1720,1,0,0,0,208,1722,1,0,0,0,210,1725,1,0,0,0,212,1728,
        1,0,0,0,214,1736,1,0,0,0,216,1754,1,0,0,0,218,1756,1,0,0,0,220,1760,
        1,0,0,0,222,1771,1,0,0,0,224,1773,1,0,0,0,226,1787,1,0,0,0,228,1789,
        1,0,0,0,230,1796,1,0,0,0,232,1810,1,0,0,0,234,1812,1,0,0,0,236,1851,
        1,0,0,0,238,1853,1,0,0,0,240,1858,1,0,0,0,242,1871,1,0,0,0,244,1873,
        1,0,0,0,246,1886,1,0,0,0,248,1888,1,0,0,0,250,1893,1,0,0,0,252,1915,
        1,0,0,0,254,1917,1,0,0,0,256,1921,1,0,0,0,258,1934,1,0,0,0,260,1936,
        1,0,0,0,262,1955,1,0,0,0,264,1957,1,0,0,0,266,1969,1,0,0,0,268,1975,
        1,0,0,0,270,1980,1,0,0,0,272,1985,1,0,0,0,274,1987,1,0,0,0,276,1993,
        1,0,0,0,278,2013,1,0,0,0,280,2016,1,0,0,0,282,2020,1,0,0,0,284,2026,
        1,0,0,0,286,2057,1,0,0,0,288,2060,1,0,0,0,290,2068,1,0,0,0,292,2071,
        1,0,0,0,294,2084,1,0,0,0,296,2105,1,0,0,0,298,2120,1,0,0,0,300,2122,
        1,0,0,0,302,2131,1,0,0,0,304,2136,1,0,0,0,306,2142,1,0,0,0,308,2154,
        1,0,0,0,310,2158,1,0,0,0,312,2167,1,0,0,0,314,2176,1,0,0,0,316,2180,
        1,0,0,0,318,2195,1,0,0,0,320,2204,1,0,0,0,322,2217,1,0,0,0,324,2219,
        1,0,0,0,326,2226,1,0,0,0,328,2230,1,0,0,0,330,2242,1,0,0,0,332,2250,
        1,0,0,0,334,2261,1,0,0,0,336,2273,1,0,0,0,338,2275,1,0,0,0,340,2279,
        1,0,0,0,342,2283,1,0,0,0,344,2286,1,0,0,0,346,2289,1,0,0,0,348,2291,
        1,0,0,0,350,2293,1,0,0,0,352,2295,1,0,0,0,354,2298,1,0,0,0,356,2300,
        1,0,0,0,358,2314,1,0,0,0,360,2322,1,0,0,0,362,2326,1,0,0,0,364,2333,
        1,0,0,0,366,2338,1,0,0,0,368,2348,1,0,0,0,370,2352,1,0,0,0,372,2373,
        1,0,0,0,374,2380,1,0,0,0,376,2397,1,0,0,0,378,2405,1,0,0,0,380,2409,
        1,0,0,0,382,2417,1,0,0,0,384,2424,1,0,0,0,386,2428,1,0,0,0,388,2430,
        1,0,0,0,390,2438,1,0,0,0,392,2446,1,0,0,0,394,2448,1,0,0,0,396,2464,
        1,0,0,0,398,2476,1,0,0,0,400,2479,1,0,0,0,402,2486,1,0,0,0,404,2514,
        1,0,0,0,406,2520,1,0,0,0,408,2529,1,0,0,0,410,2550,1,0,0,0,412,2558,
        1,0,0,0,414,2561,1,0,0,0,416,2574,1,0,0,0,418,2580,1,0,0,0,420,2607,
        1,0,0,0,422,2609,1,0,0,0,424,2616,1,0,0,0,426,2630,1,0,0,0,428,2632,
        1,0,0,0,430,2644,1,0,0,0,432,2647,1,0,0,0,434,2668,1,0,0,0,436,2680,
        1,0,0,0,438,2689,1,0,0,0,440,2705,1,0,0,0,442,2717,1,0,0,0,444,2724,
        1,0,0,0,446,2726,1,0,0,0,448,2729,1,0,0,0,450,2739,1,0,0,0,452,2810,
        1,0,0,0,454,2832,1,0,0,0,456,2835,1,0,0,0,458,2852,1,0,0,0,460,2859,
        1,0,0,0,462,2870,1,0,0,0,464,2873,1,0,0,0,466,2902,1,0,0,0,468,2906,
        1,0,0,0,470,2908,1,0,0,0,472,2916,1,0,0,0,474,2934,1,0,0,0,476,2953,
        1,0,0,0,478,2955,1,0,0,0,480,2963,1,0,0,0,482,2972,1,0,0,0,484,2974,
        1,0,0,0,486,2979,1,0,0,0,488,2983,1,0,0,0,490,2987,1,0,0,0,492,3001,
        1,0,0,0,494,3007,1,0,0,0,496,3009,1,0,0,0,498,3015,1,0,0,0,500,3017,
        1,0,0,0,502,3026,1,0,0,0,504,3045,1,0,0,0,506,3051,1,0,0,0,508,3053,
        1,0,0,0,510,3064,1,0,0,0,512,3066,1,0,0,0,514,3072,1,0,0,0,516,3074,
        1,0,0,0,518,3079,1,0,0,0,520,3103,1,0,0,0,522,3109,1,0,0,0,524,3114,
        1,0,0,0,526,3141,1,0,0,0,528,3143,1,0,0,0,530,3158,1,0,0,0,532,3167,
        1,0,0,0,534,3183,1,0,0,0,536,3195,1,0,0,0,538,3198,1,0,0,0,540,3214,
        1,0,0,0,542,3219,1,0,0,0,544,3233,1,0,0,0,546,3239,1,0,0,0,548,3270,
        1,0,0,0,550,3292,1,0,0,0,552,3297,1,0,0,0,554,3302,1,0,0,0,556,3305,
        1,0,0,0,558,3310,1,0,0,0,560,3318,1,0,0,0,562,3327,1,0,0,0,564,3329,
        1,0,0,0,566,3336,1,0,0,0,568,3348,1,0,0,0,570,3370,1,0,0,0,572,3377,
        1,0,0,0,574,3407,1,0,0,0,576,3409,1,0,0,0,578,3417,1,0,0,0,580,582,
        5,1,0,0,581,580,1,0,0,0,581,582,1,0,0,0,582,586,1,0,0,0,583,585,
        3,2,1,0,584,583,1,0,0,0,585,588,1,0,0,0,586,584,1,0,0,0,586,587,
        1,0,0,0,587,589,1,0,0,0,588,586,1,0,0,0,589,590,5,0,0,1,590,1,1,
        0,0,0,591,598,3,280,140,0,592,598,3,284,142,0,593,598,3,460,230,
        0,594,598,3,4,2,0,595,598,3,288,144,0,596,598,3,6,3,0,597,591,1,
        0,0,0,597,592,1,0,0,0,597,593,1,0,0,0,597,594,1,0,0,0,597,595,1,
        0,0,0,597,596,1,0,0,0,598,3,1,0,0,0,599,602,3,188,94,0,600,602,3,
        292,146,0,601,599,1,0,0,0,601,600,1,0,0,0,602,603,1,0,0,0,603,601,
        1,0,0,0,603,604,1,0,0,0,604,5,1,0,0,0,605,607,3,8,4,0,606,605,1,
        0,0,0,607,608,1,0,0,0,608,606,1,0,0,0,608,609,1,0,0,0,609,7,1,0,
        0,0,610,611,5,53,0,0,611,612,5,113,0,0,612,613,3,578,289,0,613,614,
        5,155,0,0,614,615,3,10,5,0,615,616,5,144,0,0,616,629,1,0,0,0,617,
        618,5,53,0,0,618,619,5,113,0,0,619,620,3,10,5,0,620,621,5,144,0,
        0,621,629,1,0,0,0,622,623,5,53,0,0,623,624,5,113,0,0,624,625,5,97,
        0,0,625,626,3,10,5,0,626,627,5,144,0,0,627,629,1,0,0,0,628,610,1,
        0,0,0,628,617,1,0,0,0,628,622,1,0,0,0,629,9,1,0,0,0,630,632,3,578,
        289,0,631,633,3,48,24,0,632,631,1,0,0,0,632,633,1,0,0,0,633,636,
        1,0,0,0,634,636,3,304,152,0,635,630,1,0,0,0,635,634,1,0,0,0,636,
        644,1,0,0,0,637,638,5,141,0,0,638,640,3,578,289,0,639,641,3,48,24,
        0,640,639,1,0,0,0,640,641,1,0,0,0,641,643,1,0,0,0,642,637,1,0,0,
        0,643,646,1,0,0,0,644,642,1,0,0,0,644,645,1,0,0,0,645,11,1,0,0,0,
        646,644,1,0,0,0,647,653,3,18,9,0,648,652,5,158,0,0,649,652,3,436,
        218,0,650,652,5,147,0,0,651,648,1,0,0,0,651,649,1,0,0,0,651,650,
        1,0,0,0,652,655,1,0,0,0,653,651,1,0,0,0,653,654,1,0,0,0,654,682,
        1,0,0,0,655,653,1,0,0,0,656,682,3,14,7,0,657,659,5,87,0,0,658,657,
        1,0,0,0,658,659,1,0,0,0,659,661,1,0,0,0,660,662,5,85,0,0,661,660,
        1,0,0,0,661,662,1,0,0,0,662,663,1,0,0,0,663,668,3,18,9,0,664,665,
        5,156,0,0,665,666,3,48,24,0,666,667,5,157,0,0,667,669,1,0,0,0,668,
        664,1,0,0,0,668,669,1,0,0,0,669,682,1,0,0,0,670,672,5,87,0,0,671,
        670,1,0,0,0,671,672,1,0,0,0,672,674,1,0,0,0,673,675,5,85,0,0,674,
        673,1,0,0,0,674,675,1,0,0,0,675,676,1,0,0,0,676,677,3,18,9,0,677,
        678,5,137,0,0,678,679,5,125,0,0,679,680,5,138,0,0,680,682,1,0,0,
        0,681,647,1,0,0,0,681,656,1,0,0,0,681,658,1,0,0,0,681,671,1,0,0,
        0,682,13,1,0,0,0,683,684,5,32,0,0,684,685,5,147,0,0,685,686,5,156,
        0,0,686,687,3,16,8,0,687,688,5,157,0,0,688,15,1,0,0,0,689,694,3,
        12,6,0,690,691,5,142,0,0,691,693,3,12,6,0,692,690,1,0,0,0,693,696,
        1,0,0,0,694,692,1,0,0,0,694,695,1,0,0,0,695,17,1,0,0,0,696,694,1,
        0,0,0,697,703,3,30,15,0,698,703,3,46,23,0,699,700,5,116,0,0,700,
        703,5,147,0,0,701,703,3,20,10,0,702,697,1,0,0,0,702,698,1,0,0,0,
        702,699,1,0,0,0,702,701,1,0,0,0,703,19,1,0,0,0,704,705,5,139,0,0,
        705,708,3,28,14,0,706,707,5,142,0,0,707,709,3,28,14,0,708,706,1,
        0,0,0,709,710,1,0,0,0,710,708,1,0,0,0,710,711,1,0,0,0,711,712,1,
        0,0,0,712,713,5,140,0,0,713,716,1,0,0,0,714,716,3,22,11,0,715,704,
        1,0,0,0,715,714,1,0,0,0,716,21,1,0,0,0,717,719,5,114,0,0,718,717,
        1,0,0,0,718,719,1,0,0,0,719,720,1,0,0,0,720,721,3,24,12,0,721,23,
        1,0,0,0,722,723,5,139,0,0,723,726,3,26,13,0,724,725,5,142,0,0,725,
        727,3,26,13,0,726,724,1,0,0,0,727,728,1,0,0,0,728,726,1,0,0,0,728,
        729,1,0,0,0,729,730,1,0,0,0,730,731,5,140,0,0,731,25,1,0,0,0,732,
        737,3,24,12,0,733,735,3,578,289,0,734,733,1,0,0,0,734,735,1,0,0,
        0,735,737,1,0,0,0,736,732,1,0,0,0,736,734,1,0,0,0,737,27,1,0,0,0,
        738,740,3,12,6,0,739,738,1,0,0,0,739,740,1,0,0,0,740,741,1,0,0,0,
        741,742,3,578,289,0,742,29,1,0,0,0,743,746,3,32,16,0,744,746,5,19,
        0,0,745,743,1,0,0,0,745,744,1,0,0,0,746,31,1,0,0,0,747,751,3,34,
        17,0,748,751,3,36,18,0,749,751,5,30,0,0,750,747,1,0,0,0,750,748,
        1,0,0,0,750,749,1,0,0,0,751,33,1,0,0,0,752,753,7,0,0,0,753,35,1,
        0,0,0,754,755,7,1,0,0,755,37,1,0,0,0,756,759,3,40,20,0,757,759,3,
        42,21,0,758,756,1,0,0,0,758,757,1,0,0,0,759,39,1,0,0,0,760,761,5,
        31,0,0,761,762,5,139,0,0,762,763,3,12,6,0,763,764,5,140,0,0,764,
        41,1,0,0,0,765,766,5,31,0,0,766,43,1,0,0,0,767,768,3,56,28,0,768,
        45,1,0,0,0,769,774,3,10,5,0,770,774,5,73,0,0,771,774,5,36,0,0,772,
        774,5,98,0,0,773,769,1,0,0,0,773,770,1,0,0,0,773,771,1,0,0,0,773,
        772,1,0,0,0,774,47,1,0,0,0,775,776,5,156,0,0,776,781,3,12,6,0,777,
        778,5,142,0,0,778,780,3,12,6,0,779,777,1,0,0,0,780,783,1,0,0,0,781,
        779,1,0,0,0,781,782,1,0,0,0,782,784,1,0,0,0,783,781,1,0,0,0,784,
        785,5,157,0,0,785,49,1,0,0,0,786,791,3,52,26,0,787,788,5,142,0,0,
        788,790,3,52,26,0,789,787,1,0,0,0,790,793,1,0,0,0,791,789,1,0,0,
        0,791,792,1,0,0,0,792,51,1,0,0,0,793,791,1,0,0,0,794,796,3,54,27,
        0,795,794,1,0,0,0,795,796,1,0,0,0,796,798,1,0,0,0,797,799,7,2,0,
        0,798,797,1,0,0,0,798,799,1,0,0,0,799,806,1,0,0,0,800,807,3,56,28,
        0,801,804,5,114,0,0,802,804,3,12,6,0,803,801,1,0,0,0,803,802,1,0,
        0,0,804,805,1,0,0,0,805,807,3,56,28,0,806,800,1,0,0,0,806,803,1,
        0,0,0,807,53,1,0,0,0,808,809,3,578,289,0,809,810,5,143,0,0,810,55,
        1,0,0,0,811,819,3,60,30,0,812,819,3,58,29,0,813,814,5,87,0,0,814,
        819,3,58,29,0,815,819,3,154,77,0,816,819,3,100,50,0,817,819,3,572,
        286,0,818,811,1,0,0,0,818,812,1,0,0,0,818,813,1,0,0,0,818,815,1,
        0,0,0,818,816,1,0,0,0,818,817,1,0,0,0,819,57,1,0,0,0,820,824,3,154,
        77,0,821,824,3,166,83,0,822,824,3,64,32,0,823,820,1,0,0,0,823,821,
        1,0,0,0,823,822,1,0,0,0,824,59,1,0,0,0,825,826,3,96,48,0,826,827,
        3,62,31,0,827,828,3,56,28,0,828,834,1,0,0,0,829,830,3,96,48,0,830,
        831,5,180,0,0,831,832,3,110,55,0,832,834,1,0,0,0,833,825,1,0,0,0,
        833,829,1,0,0,0,834,61,1,0,0,0,835,847,5,155,0,0,836,847,5,170,0,
        0,837,847,5,171,0,0,838,847,5,172,0,0,839,847,5,173,0,0,840,847,
        5,174,0,0,841,847,5,175,0,0,842,847,5,176,0,0,843,847,5,177,0,0,
        844,847,5,179,0,0,845,847,3,490,245,0,846,835,1,0,0,0,846,836,1,
        0,0,0,846,837,1,0,0,0,846,838,1,0,0,0,846,839,1,0,0,0,846,840,1,
        0,0,0,846,841,1,0,0,0,846,842,1,0,0,0,846,843,1,0,0,0,846,844,1,
        0,0,0,846,845,1,0,0,0,847,63,1,0,0,0,848,864,3,66,33,0,849,850,3,
        66,33,0,850,851,5,158,0,0,851,852,3,56,28,0,852,853,5,143,0,0,853,
        854,3,56,28,0,854,864,1,0,0,0,855,856,3,66,33,0,856,857,5,158,0,
        0,857,858,5,87,0,0,858,859,3,44,22,0,859,860,5,143,0,0,860,861,5,
        87,0,0,861,862,3,44,22,0,862,864,1,0,0,0,863,848,1,0,0,0,863,849,
        1,0,0,0,863,855,1,0,0,0,864,65,1,0,0,0,865,871,3,68,34,0,866,869,
        5,160,0,0,867,870,3,66,33,0,868,870,3,112,56,0,869,867,1,0,0,0,869,
        868,1,0,0,0,870,872,1,0,0,0,871,866,1,0,0,0,871,872,1,0,0,0,872,
        67,1,0,0,0,873,878,3,70,35,0,874,875,5,164,0,0,875,877,3,70,35,0,
        876,874,1,0,0,0,877,880,1,0,0,0,878,876,1,0,0,0,878,879,1,0,0,0,
        879,69,1,0,0,0,880,878,1,0,0,0,881,886,3,72,36,0,882,883,5,163,0,
        0,883,885,3,72,36,0,884,882,1,0,0,0,885,888,1,0,0,0,886,884,1,0,
        0,0,886,887,1,0,0,0,887,71,1,0,0,0,888,886,1,0,0,0,889,894,3,74,
        37,0,890,891,5,151,0,0,891,893,3,74,37,0,892,890,1,0,0,0,893,896,
        1,0,0,0,894,892,1,0,0,0,894,895,1,0,0,0,895,73,1,0,0,0,896,894,1,
        0,0,0,897,902,3,76,38,0,898,899,5,152,0,0,899,901,3,76,38,0,900,
        898,1,0,0,0,901,904,1,0,0,0,902,900,1,0,0,0,902,903,1,0,0,0,903,
        75,1,0,0,0,904,902,1,0,0,0,905,910,3,78,39,0,906,907,5,150,0,0,907,
        909,3,78,39,0,908,906,1,0,0,0,909,912,1,0,0,0,910,908,1,0,0,0,910,
        911,1,0,0,0,911,77,1,0,0,0,912,910,1,0,0,0,913,918,3,80,40,0,914,
        915,7,3,0,0,915,917,3,80,40,0,916,914,1,0,0,0,917,920,1,0,0,0,918,
        916,1,0,0,0,918,919,1,0,0,0,919,79,1,0,0,0,920,918,1,0,0,0,921,932,
        3,82,41,0,922,923,7,4,0,0,923,931,3,82,41,0,924,925,5,63,0,0,925,
        931,3,148,74,0,926,927,5,14,0,0,927,931,3,148,74,0,928,929,5,63,
        0,0,929,931,3,322,161,0,930,922,1,0,0,0,930,924,1,0,0,0,930,926,
        1,0,0,0,930,928,1,0,0,0,931,934,1,0,0,0,932,930,1,0,0,0,932,933,
        1,0,0,0,933,81,1,0,0,0,934,932,1,0,0,0,935,943,3,84,42,0,936,939,
        5,178,0,0,937,939,3,488,244,0,938,936,1,0,0,0,938,937,1,0,0,0,939,
        940,1,0,0,0,940,942,3,84,42,0,941,938,1,0,0,0,942,945,1,0,0,0,943,
        941,1,0,0,0,943,944,1,0,0,0,944,83,1,0,0,0,945,943,1,0,0,0,946,951,
        3,86,43,0,947,948,7,5,0,0,948,950,3,86,43,0,949,947,1,0,0,0,950,
        953,1,0,0,0,951,949,1,0,0,0,951,952,1,0,0,0,952,85,1,0,0,0,953,951,
        1,0,0,0,954,959,3,88,44,0,955,956,7,6,0,0,956,958,3,88,44,0,957,
        955,1,0,0,0,958,961,1,0,0,0,959,957,1,0,0,0,959,960,1,0,0,0,960,
        87,1,0,0,0,961,959,1,0,0,0,962,972,3,94,47,0,963,964,5,100,0,0,964,
        969,5,135,0,0,965,967,3,90,45,0,966,968,5,142,0,0,967,966,1,0,0,
        0,967,968,1,0,0,0,968,970,1,0,0,0,969,965,1,0,0,0,969,970,1,0,0,
        0,970,971,1,0,0,0,971,973,5,136,0,0,972,963,1,0,0,0,972,973,1,0,
        0,0,973,89,1,0,0,0,974,979,3,92,46,0,975,976,5,142,0,0,976,978,3,
        92,46,0,977,975,1,0,0,0,978,981,1,0,0,0,979,977,1,0,0,0,979,980,
        1,0,0,0,980,91,1,0,0,0,981,979,1,0,0,0,982,984,3,322,161,0,983,985,
        3,254,127,0,984,983,1,0,0,0,984,985,1,0,0,0,985,986,1,0,0,0,986,
        987,3,486,243,0,987,988,3,110,55,0,988,93,1,0,0,0,989,998,3,96,48,
        0,990,992,3,96,48,0,991,990,1,0,0,0,991,992,1,0,0,0,992,993,1,0,
        0,0,993,995,5,181,0,0,994,996,3,96,48,0,995,994,1,0,0,0,995,996,
        1,0,0,0,996,998,1,0,0,0,997,989,1,0,0,0,997,991,1,0,0,0,998,95,1,
        0,0,0,999,1022,3,98,49,0,1000,1022,3,106,53,0,1001,1002,5,145,0,
        0,1002,1022,3,96,48,0,1003,1004,5,146,0,0,1004,1022,3,96,48,0,1005,
        1006,5,153,0,0,1006,1022,3,96,48,0,1007,1008,5,154,0,0,1008,1022,
        3,96,48,0,1009,1010,5,161,0,0,1010,1022,3,96,48,0,1011,1012,5,162,
        0,0,1012,1022,3,96,48,0,1013,1014,5,17,0,0,1014,1022,3,96,48,0,1015,
        1016,5,150,0,0,1016,1022,3,96,48,0,1017,1018,5,147,0,0,1018,1022,
        3,96,48,0,1019,1020,5,152,0,0,1020,1022,3,96,48,0,1021,999,1,0,0,
        0,1021,1000,1,0,0,0,1021,1001,1,0,0,0,1021,1003,1,0,0,0,1021,1005,
        1,0,0,0,1021,1007,1,0,0,0,1021,1009,1,0,0,0,1021,1011,1,0,0,0,1021,
        1013,1,0,0,0,1021,1015,1,0,0,0,1021,1017,1,0,0,0,1021,1019,1,0,0,
        0,1022,97,1,0,0,0,1023,1024,5,139,0,0,1024,1025,3,12,6,0,1025,1026,
        5,140,0,0,1026,1027,3,96,48,0,1027,99,1,0,0,0,1028,1030,5,137,0,
        0,1029,1031,3,102,51,0,1030,1029,1,0,0,0,1030,1031,1,0,0,0,1031,
        1032,1,0,0,0,1032,1033,5,138,0,0,1033,101,1,0,0,0,1034,1039,3,104,
        52,0,1035,1036,5,142,0,0,1036,1038,3,104,52,0,1037,1035,1,0,0,0,
        1038,1041,1,0,0,0,1039,1037,1,0,0,0,1039,1040,1,0,0,0,1040,103,1,
        0,0,0,1041,1039,1,0,0,0,1042,1046,3,56,28,0,1043,1044,5,181,0,0,
        1044,1046,3,56,28,0,1045,1042,1,0,0,0,1045,1043,1,0,0,0,1046,105,
        1,0,0,0,1047,1049,3,108,54,0,1048,1050,5,153,0,0,1049,1048,1,0,0,
        0,1049,1050,1,0,0,0,1050,1054,1,0,0,0,1051,1053,3,116,58,0,1052,
        1051,1,0,0,0,1053,1056,1,0,0,0,1054,1052,1,0,0,0,1054,1055,1,0,0,
        0,1055,1058,1,0,0,0,1056,1054,1,0,0,0,1057,1059,5,153,0,0,1058,1057,
        1,0,0,0,1058,1059,1,0,0,0,1059,1082,1,0,0,0,1060,1067,3,114,57,0,
        1061,1067,3,572,286,0,1062,1067,5,161,0,0,1063,1067,5,162,0,0,1064,
        1065,5,165,0,0,1065,1067,3,578,289,0,1066,1060,1,0,0,0,1066,1061,
        1,0,0,0,1066,1062,1,0,0,0,1066,1063,1,0,0,0,1066,1064,1,0,0,0,1067,
        1069,1,0,0,0,1068,1070,5,153,0,0,1069,1068,1,0,0,0,1069,1070,1,0,
        0,0,1070,1074,1,0,0,0,1071,1073,3,116,58,0,1072,1071,1,0,0,0,1073,
        1076,1,0,0,0,1074,1072,1,0,0,0,1074,1075,1,0,0,0,1075,1078,1,0,0,
        0,1076,1074,1,0,0,0,1077,1079,5,153,0,0,1078,1077,1,0,0,0,1078,1079,
        1,0,0,0,1079,1081,1,0,0,0,1080,1066,1,0,0,0,1081,1084,1,0,0,0,1082,
        1080,1,0,0,0,1082,1083,1,0,0,0,1083,1090,1,0,0,0,1084,1082,1,0,0,
        0,1085,1090,3,20,10,0,1086,1090,3,38,19,0,1087,1090,3,216,108,0,
        1088,1090,3,100,50,0,1089,1047,1,0,0,0,1089,1085,1,0,0,0,1089,1086,
        1,0,0,0,1089,1087,1,0,0,0,1089,1088,1,0,0,0,1090,107,1,0,0,0,1091,
        1215,3,492,246,0,1092,1094,3,578,289,0,1093,1095,3,48,24,0,1094,
        1093,1,0,0,0,1094,1095,1,0,0,0,1095,1215,1,0,0,0,1096,1097,5,139,
        0,0,1097,1098,3,56,28,0,1098,1099,5,140,0,0,1099,1215,1,0,0,0,1100,
        1215,3,120,60,0,1101,1215,3,304,152,0,1102,1215,5,124,0,0,1103,1215,
        5,101,0,0,1104,1114,5,18,0,0,1105,1106,5,141,0,0,1106,1108,3,578,
        289,0,1107,1109,3,48,24,0,1108,1107,1,0,0,0,1108,1109,1,0,0,0,1109,
        1115,1,0,0,0,1110,1111,5,137,0,0,1111,1112,3,122,61,0,1112,1113,
        5,138,0,0,1113,1115,1,0,0,0,1114,1105,1,0,0,0,1114,1110,1,0,0,0,
        1115,1215,1,0,0,0,1116,1145,5,70,0,0,1117,1139,3,12,6,0,1118,1140,
        3,574,287,0,1119,1140,3,124,62,0,1120,1121,5,137,0,0,1121,1122,3,
        122,61,0,1122,1126,5,138,0,0,1123,1125,3,436,218,0,1124,1123,1,0,
        0,0,1125,1128,1,0,0,0,1126,1124,1,0,0,0,1126,1127,1,0,0,0,1127,1130,
        1,0,0,0,1128,1126,1,0,0,0,1129,1131,3,438,219,0,1130,1129,1,0,0,
        0,1130,1131,1,0,0,0,1131,1140,1,0,0,0,1132,1134,3,436,218,0,1133,
        1132,1,0,0,0,1134,1135,1,0,0,0,1135,1133,1,0,0,0,1135,1136,1,0,0,
        0,1136,1137,1,0,0,0,1137,1138,3,438,219,0,1138,1140,1,0,0,0,1139,
        1118,1,0,0,0,1139,1119,1,0,0,0,1139,1120,1,0,0,0,1139,1133,1,0,0,
        0,1140,1146,1,0,0,0,1141,1146,3,138,69,0,1142,1143,3,436,218,0,1143,
        1144,3,438,219,0,1144,1146,1,0,0,0,1145,1117,1,0,0,0,1145,1141,1,
        0,0,0,1145,1142,1,0,0,0,1145,1146,1,0,0,0,1146,1215,1,0,0,0,1147,
        1148,5,70,0,0,1148,1215,3,576,288,0,1149,1150,5,139,0,0,1150,1153,
        3,52,26,0,1151,1152,5,142,0,0,1152,1154,3,52,26,0,1153,1151,1,0,
        0,0,1154,1155,1,0,0,0,1155,1153,1,0,0,0,1155,1156,1,0,0,0,1156,1157,
        1,0,0,0,1157,1158,5,140,0,0,1158,1215,1,0,0,0,1159,1160,5,105,0,
        0,1160,1164,5,139,0,0,1161,1165,3,144,72,0,1162,1165,3,12,6,0,1163,
        1165,5,116,0,0,1164,1161,1,0,0,0,1164,1162,1,0,0,0,1164,1163,1,0,
        0,0,1165,1166,1,0,0,0,1166,1215,5,140,0,0,1167,1168,5,26,0,0,1168,
        1169,5,139,0,0,1169,1170,3,56,28,0,1170,1171,5,140,0,0,1171,1215,
        1,0,0,0,1172,1173,5,109,0,0,1173,1174,5,139,0,0,1174,1175,3,56,28,
        0,1175,1176,5,140,0,0,1176,1215,1,0,0,0,1177,1182,5,31,0,0,1178,
        1179,5,139,0,0,1179,1180,3,12,6,0,1180,1181,5,140,0,0,1181,1183,
        1,0,0,0,1182,1178,1,0,0,0,1182,1183,1,0,0,0,1183,1215,1,0,0,0,1184,
        1186,5,16,0,0,1185,1184,1,0,0,0,1185,1186,1,0,0,0,1186,1187,1,0,
        0,0,1187,1193,5,32,0,0,1188,1190,5,139,0,0,1189,1191,3,158,79,0,
        1190,1189,1,0,0,0,1190,1191,1,0,0,0,1191,1192,1,0,0,0,1192,1194,
        5,140,0,0,1193,1188,1,0,0,0,1193,1194,1,0,0,0,1194,1195,1,0,0,0,
        1195,1215,3,234,117,0,1196,1197,5,95,0,0,1197,1198,5,139,0,0,1198,
        1199,3,12,6,0,1199,1200,5,140,0,0,1200,1215,1,0,0,0,1201,1202,5,
        68,0,0,1202,1208,5,139,0,0,1203,1204,3,578,289,0,1204,1205,5,141,
        0,0,1205,1207,1,0,0,0,1206,1203,1,0,0,0,1207,1210,1,0,0,0,1208,1206,
        1,0,0,0,1208,1209,1,0,0,0,1209,1211,1,0,0,0,1210,1208,1,0,0,0,1211,
        1212,3,578,289,0,1212,1213,5,140,0,0,1213,1215,1,0,0,0,1214,1091,
        1,0,0,0,1214,1092,1,0,0,0,1214,1096,1,0,0,0,1214,1100,1,0,0,0,1214,
        1101,1,0,0,0,1214,1102,1,0,0,0,1214,1103,1,0,0,0,1214,1104,1,0,0,
        0,1214,1116,1,0,0,0,1214,1147,1,0,0,0,1214,1149,1,0,0,0,1214,1159,
        1,0,0,0,1214,1167,1,0,0,0,1214,1172,1,0,0,0,1214,1177,1,0,0,0,1214,
        1185,1,0,0,0,1214,1196,1,0,0,0,1214,1201,1,0,0,0,1215,109,1,0,0,
        0,1216,1219,3,56,28,0,1217,1219,3,112,56,0,1218,1216,1,0,0,0,1218,
        1217,1,0,0,0,1219,111,1,0,0,0,1220,1221,5,102,0,0,1221,1222,3,56,
        28,0,1222,113,1,0,0,0,1223,1225,5,158,0,0,1224,1223,1,0,0,0,1224,
        1225,1,0,0,0,1225,1226,1,0,0,0,1226,1227,5,141,0,0,1227,1229,3,578,
        289,0,1228,1230,3,48,24,0,1229,1228,1,0,0,0,1229,1230,1,0,0,0,1230,
        115,1,0,0,0,1231,1233,5,158,0,0,1232,1231,1,0,0,0,1232,1233,1,0,
        0,0,1233,1234,1,0,0,0,1234,1235,5,137,0,0,1235,1240,3,118,59,0,1236,
        1237,5,142,0,0,1237,1239,3,118,59,0,1238,1236,1,0,0,0,1239,1242,
        1,0,0,0,1240,1238,1,0,0,0,1240,1241,1,0,0,0,1241,1243,1,0,0,0,1242,
        1240,1,0,0,0,1243,1244,5,138,0,0,1244,117,1,0,0,0,1245,1246,3,578,
        289,0,1246,1247,5,143,0,0,1247,1249,1,0,0,0,1248,1245,1,0,0,0,1248,
        1249,1,0,0,0,1249,1250,1,0,0,0,1250,1251,3,56,28,0,1251,119,1,0,
        0,0,1252,1253,7,7,0,0,1253,121,1,0,0,0,1254,1259,3,56,28,0,1255,
        1256,5,142,0,0,1256,1258,3,56,28,0,1257,1255,1,0,0,0,1258,1261,1,
        0,0,0,1259,1257,1,0,0,0,1259,1260,1,0,0,0,1260,123,1,0,0,0,1261,
        1259,1,0,0,0,1262,1265,3,126,63,0,1263,1265,3,134,67,0,1264,1262,
        1,0,0,0,1264,1263,1,0,0,0,1265,125,1,0,0,0,1266,1271,5,135,0,0,1267,
        1269,3,128,64,0,1268,1270,5,142,0,0,1269,1268,1,0,0,0,1269,1270,
        1,0,0,0,1270,1272,1,0,0,0,1271,1267,1,0,0,0,1271,1272,1,0,0,0,1272,
        1273,1,0,0,0,1273,1274,5,136,0,0,1274,127,1,0,0,0,1275,1280,3,130,
        65,0,1276,1277,5,142,0,0,1277,1279,3,130,65,0,1278,1276,1,0,0,0,
        1279,1282,1,0,0,0,1280,1278,1,0,0,0,1280,1281,1,0,0,0,1281,129,1,
        0,0,0,1282,1280,1,0,0,0,1283,1289,3,578,289,0,1284,1285,5,137,0,
        0,1285,1286,3,56,28,0,1286,1287,5,138,0,0,1287,1289,1,0,0,0,1288,
        1283,1,0,0,0,1288,1284,1,0,0,0,1289,1290,1,0,0,0,1290,1291,5,155,
        0,0,1291,1292,3,132,66,0,1292,131,1,0,0,0,1293,1297,3,56,28,0,1294,
        1297,3,124,62,0,1295,1297,3,20,10,0,1296,1293,1,0,0,0,1296,1294,
        1,0,0,0,1296,1295,1,0,0,0,1297,133,1,0,0,0,1298,1299,5,135,0,0,1299,
        1304,3,136,68,0,1300,1301,5,142,0,0,1301,1303,3,136,68,0,1302,1300,
        1,0,0,0,1303,1306,1,0,0,0,1304,1302,1,0,0,0,1304,1305,1,0,0,0,1305,
        1308,1,0,0,0,1306,1304,1,0,0,0,1307,1309,5,142,0,0,1308,1307,1,0,
        0,0,1308,1309,1,0,0,0,1309,1310,1,0,0,0,1310,1311,5,136,0,0,1311,
        135,1,0,0,0,1312,1319,3,58,29,0,1313,1314,5,135,0,0,1314,1315,3,
        122,61,0,1315,1316,5,136,0,0,1316,1319,1,0,0,0,1317,1319,3,56,28,
        0,1318,1312,1,0,0,0,1318,1313,1,0,0,0,1318,1317,1,0,0,0,1319,137,
        1,0,0,0,1320,1325,5,135,0,0,1321,1323,3,140,70,0,1322,1324,5,142,
        0,0,1323,1322,1,0,0,0,1323,1324,1,0,0,0,1324,1326,1,0,0,0,1325,1321,
        1,0,0,0,1325,1326,1,0,0,0,1326,1327,1,0,0,0,1327,1328,5,136,0,0,
        1328,139,1,0,0,0,1329,1334,3,142,71,0,1330,1331,5,142,0,0,1331,1333,
        3,142,71,0,1332,1330,1,0,0,0,1333,1336,1,0,0,0,1334,1332,1,0,0,0,
        1334,1335,1,0,0,0,1335,141,1,0,0,0,1336,1334,1,0,0,0,1337,1349,3,
        106,53,0,1338,1341,3,578,289,0,1339,1340,5,155,0,0,1340,1342,3,56,
        28,0,1341,1339,1,0,0,0,1341,1342,1,0,0,0,1342,1349,1,0,0,0,1343,
        1344,3,578,289,0,1344,1345,5,137,0,0,1345,1346,5,125,0,0,1346,1347,
        5,138,0,0,1347,1349,1,0,0,0,1348,1337,1,0,0,0,1348,1338,1,0,0,0,
        1348,1343,1,0,0,0,1349,143,1,0,0,0,1350,1359,3,578,289,0,1351,1353,
        3,146,73,0,1352,1351,1,0,0,0,1352,1353,1,0,0,0,1353,1360,1,0,0,0,
        1354,1355,5,159,0,0,1355,1357,3,578,289,0,1356,1358,3,146,73,0,1357,
        1356,1,0,0,0,1357,1358,1,0,0,0,1358,1360,1,0,0,0,1359,1352,1,0,0,
        0,1359,1354,1,0,0,0,1360,1368,1,0,0,0,1361,1362,5,141,0,0,1362,1364,
        3,578,289,0,1363,1365,3,146,73,0,1364,1363,1,0,0,0,1364,1365,1,0,
        0,0,1365,1367,1,0,0,0,1366,1361,1,0,0,0,1367,1370,1,0,0,0,1368,1366,
        1,0,0,0,1368,1369,1,0,0,0,1369,145,1,0,0,0,1370,1368,1,0,0,0,1371,
        1375,5,156,0,0,1372,1374,5,142,0,0,1373,1372,1,0,0,0,1374,1377,1,
        0,0,0,1375,1373,1,0,0,0,1375,1376,1,0,0,0,1376,1378,1,0,0,0,1377,
        1375,1,0,0,0,1378,1379,5,157,0,0,1379,147,1,0,0,0,1380,1385,3,18,
        9,0,1381,1384,3,436,218,0,1382,1384,5,147,0,0,1383,1381,1,0,0,0,
        1383,1382,1,0,0,0,1384,1387,1,0,0,0,1385,1383,1,0,0,0,1385,1386,
        1,0,0,0,1386,1389,1,0,0,0,1387,1385,1,0,0,0,1388,1390,5,158,0,0,
        1389,1388,1,0,0,0,1389,1390,1,0,0,0,1390,1392,1,0,0,0,1391,1393,
        3,150,75,0,1392,1391,1,0,0,0,1392,1393,1,0,0,0,1393,1395,1,0,0,0,
        1394,1396,3,578,289,0,1395,1394,1,0,0,0,1395,1396,1,0,0,0,1396,149,
        1,0,0,0,1397,1398,5,135,0,0,1398,1403,3,152,76,0,1399,1400,5,142,
        0,0,1400,1402,3,152,76,0,1401,1399,1,0,0,0,1402,1405,1,0,0,0,1403,
        1401,1,0,0,0,1403,1404,1,0,0,0,1404,1406,1,0,0,0,1405,1403,1,0,0,
        0,1406,1407,5,136,0,0,1407,151,1,0,0,0,1408,1409,3,578,289,0,1409,
        1410,5,143,0,0,1410,1411,3,56,28,0,1411,153,1,0,0,0,1412,1414,3,
        464,232,0,1413,1412,1,0,0,0,1413,1414,1,0,0,0,1414,1416,1,0,0,0,
        1415,1417,5,16,0,0,1416,1415,1,0,0,0,1416,1417,1,0,0,0,1417,1419,
        1,0,0,0,1418,1420,5,97,0,0,1419,1418,1,0,0,0,1419,1420,1,0,0,0,1420,
        1421,1,0,0,0,1421,1422,3,156,78,0,1422,1423,3,486,243,0,1423,1424,
        3,164,82,0,1424,155,1,0,0,0,1425,1426,5,139,0,0,1426,1437,5,140,
        0,0,1427,1428,5,139,0,0,1428,1429,3,158,79,0,1429,1430,5,140,0,0,
        1430,1437,1,0,0,0,1431,1432,5,139,0,0,1432,1433,3,162,81,0,1433,
        1434,5,140,0,0,1434,1437,1,0,0,0,1435,1437,3,578,289,0,1436,1425,
        1,0,0,0,1436,1427,1,0,0,0,1436,1431,1,0,0,0,1436,1435,1,0,0,0,1437,
        157,1,0,0,0,1438,1443,3,160,80,0,1439,1440,5,142,0,0,1440,1442,3,
        160,80,0,1441,1439,1,0,0,0,1442,1445,1,0,0,0,1443,1441,1,0,0,0,1443,
        1444,1,0,0,0,1444,159,1,0,0,0,1445,1443,1,0,0,0,1446,1448,3,464,
        232,0,1447,1446,1,0,0,0,1447,1448,1,0,0,0,1448,1454,1,0,0,0,1449,
        1455,5,87,0,0,1450,1455,5,78,0,0,1451,1455,5,57,0,0,1452,1453,5,
        87,0,0,1453,1455,5,85,0,0,1454,1449,1,0,0,0,1454,1450,1,0,0,0,1454,
        1451,1,0,0,0,1454,1452,1,0,0,0,1454,1455,1,0,0,0,1455,1457,1,0,0,
        0,1456,1458,3,12,6,0,1457,1456,1,0,0,0,1457,1458,1,0,0,0,1458,1459,
        1,0,0,0,1459,1462,3,578,289,0,1460,1461,5,155,0,0,1461,1463,3,56,
        28,0,1462,1460,1,0,0,0,1462,1463,1,0,0,0,1463,161,1,0,0,0,1464,1469,
        3,578,289,0,1465,1466,5,142,0,0,1466,1468,3,578,289,0,1467,1465,
        1,0,0,0,1468,1471,1,0,0,0,1469,1467,1,0,0,0,1469,1470,1,0,0,0,1470,
        163,1,0,0,0,1471,1469,1,0,0,0,1472,1475,3,110,55,0,1473,1475,3,234,
        117,0,1474,1472,1,0,0,0,1474,1473,1,0,0,0,1475,165,1,0,0,0,1476,
        1477,3,168,84,0,1477,1478,3,170,85,0,1478,167,1,0,0,0,1479,1481,
        5,50,0,0,1480,1482,3,12,6,0,1481,1480,1,0,0,0,1481,1482,1,0,0,0,
        1482,1483,1,0,0,0,1483,1484,3,578,289,0,1484,1485,5,57,0,0,1485,
        1486,3,56,28,0,1486,169,1,0,0,0,1487,1489,3,172,86,0,1488,1487,1,
        0,0,0,1489,1492,1,0,0,0,1490,1488,1,0,0,0,1490,1491,1,0,0,0,1491,
        1493,1,0,0,0,1492,1490,1,0,0,0,1493,1495,3,184,92,0,1494,1496,3,
        186,93,0,1495,1494,1,0,0,0,1495,1496,1,0,0,0,1496,171,1,0,0,0,1497,
        1503,3,168,84,0,1498,1503,3,174,87,0,1499,1503,3,176,88,0,1500,1503,
        3,178,89,0,1501,1503,3,180,90,0,1502,1497,1,0,0,0,1502,1498,1,0,
        0,0,1502,1499,1,0,0,0,1502,1500,1,0,0,0,1502,1501,1,0,0,0,1503,173,
        1,0,0,0,1504,1505,5,65,0,0,1505,1506,3,578,289,0,1506,1507,5,155,
        0,0,1507,1508,3,56,28,0,1508,175,1,0,0,0,1509,1510,5,119,0,0,1510,
        1511,3,56,28,0,1511,177,1,0,0,0,1512,1514,5,64,0,0,1513,1515,3,12,
        6,0,1514,1513,1,0,0,0,1514,1515,1,0,0,0,1515,1516,1,0,0,0,1516,1517,
        3,578,289,0,1517,1518,5,57,0,0,1518,1519,3,56,28,0,1519,1520,5,74,
        0,0,1520,1521,3,56,28,0,1521,1522,5,39,0,0,1522,1525,3,56,28,0,1523,
        1524,5,62,0,0,1524,1526,3,578,289,0,1525,1523,1,0,0,0,1525,1526,
        1,0,0,0,1526,179,1,0,0,0,1527,1528,5,77,0,0,1528,1533,3,182,91,0,
        1529,1530,5,142,0,0,1530,1532,3,182,91,0,1531,1529,1,0,0,0,1532,
        1535,1,0,0,0,1533,1531,1,0,0,0,1533,1534,1,0,0,0,1534,181,1,0,0,
        0,1535,1533,1,0,0,0,1536,1538,3,56,28,0,1537,1539,7,8,0,0,1538,1537,
        1,0,0,0,1538,1539,1,0,0,0,1539,183,1,0,0,0,1540,1541,5,92,0,0,1541,
        1548,3,56,28,0,1542,1543,5,54,0,0,1543,1544,3,56,28,0,1544,1545,
        5,21,0,0,1545,1546,3,56,28,0,1546,1548,1,0,0,0,1547,1540,1,0,0,0,
        1547,1542,1,0,0,0,1548,185,1,0,0,0,1549,1550,5,62,0,0,1550,1551,
        3,578,289,0,1551,1552,3,170,85,0,1552,187,1,0,0,0,1553,1557,3,200,
        100,0,1554,1557,3,190,95,0,1555,1557,3,202,101,0,1556,1553,1,0,0,
        0,1556,1554,1,0,0,0,1556,1555,1,0,0,0,1557,189,1,0,0,0,1558,1559,
        3,236,118,0,1559,1560,5,144,0,0,1560,1566,1,0,0,0,1561,1562,3,248,
        124,0,1562,1563,5,144,0,0,1563,1566,1,0,0,0,1564,1566,3,192,96,0,
        1565,1558,1,0,0,0,1565,1561,1,0,0,0,1565,1564,1,0,0,0,1566,191,1,
        0,0,0,1567,1568,3,194,97,0,1568,1569,3,198,99,0,1569,193,1,0,0,0,
        1570,1572,3,196,98,0,1571,1570,1,0,0,0,1571,1572,1,0,0,0,1572,1573,
        1,0,0,0,1573,1574,3,386,193,0,1574,1576,3,578,289,0,1575,1577,3,
        306,153,0,1576,1575,1,0,0,0,1576,1577,1,0,0,0,1577,1578,1,0,0,0,
        1578,1580,5,139,0,0,1579,1581,3,392,196,0,1580,1579,1,0,0,0,1580,
        1581,1,0,0,0,1581,1582,1,0,0,0,1582,1584,5,140,0,0,1583,1585,3,314,
        157,0,1584,1583,1,0,0,0,1584,1585,1,0,0,0,1585,195,1,0,0,0,1586,
        1588,7,9,0,0,1587,1589,5,97,0,0,1588,1587,1,0,0,0,1588,1589,1,0,
        0,0,1589,1597,1,0,0,0,1590,1592,5,97,0,0,1591,1593,7,9,0,0,1592,
        1591,1,0,0,0,1592,1593,1,0,0,0,1593,1597,1,0,0,0,1594,1595,5,111,
        0,0,1595,1597,5,99,0,0,1596,1586,1,0,0,0,1596,1590,1,0,0,0,1596,
        1594,1,0,0,0,1597,197,1,0,0,0,1598,1604,3,234,117,0,1599,1600,3,
        486,243,0,1600,1601,3,110,55,0,1601,1602,5,144,0,0,1602,1604,1,0,
        0,0,1603,1598,1,0,0,0,1603,1599,1,0,0,0,1604,199,1,0,0,0,1605,1606,
        3,578,289,0,1606,1607,5,143,0,0,1607,1608,3,188,94,0,1608,201,1,
        0,0,0,1609,1703,3,234,117,0,1610,1703,3,204,102,0,1611,1612,3,56,
        28,0,1612,1613,5,144,0,0,1613,1703,1,0,0,0,1614,1703,3,206,103,0,
        1615,1616,5,100,0,0,1616,1617,5,139,0,0,1617,1618,3,56,28,0,1618,
        1619,5,140,0,0,1619,1623,5,135,0,0,1620,1622,3,250,125,0,1621,1620,
        1,0,0,0,1622,1625,1,0,0,0,1623,1621,1,0,0,0,1623,1624,1,0,0,0,1624,
        1626,1,0,0,0,1625,1623,1,0,0,0,1626,1627,5,136,0,0,1627,1703,1,0,
        0,0,1628,1629,5,120,0,0,1629,1630,5,139,0,0,1630,1631,3,56,28,0,
        1631,1632,5,140,0,0,1632,1633,3,202,101,0,1633,1703,1,0,0,0,1634,
        1635,5,34,0,0,1635,1636,3,202,101,0,1636,1637,5,120,0,0,1637,1638,
        5,139,0,0,1638,1639,3,56,28,0,1639,1640,5,140,0,0,1640,1641,5,144,
        0,0,1641,1703,1,0,0,0,1642,1643,5,48,0,0,1643,1645,5,139,0,0,1644,
        1646,3,258,129,0,1645,1644,1,0,0,0,1645,1646,1,0,0,0,1646,1647,1,
        0,0,0,1647,1649,5,144,0,0,1648,1650,3,56,28,0,1649,1648,1,0,0,0,
        1649,1650,1,0,0,0,1650,1651,1,0,0,0,1651,1653,5,144,0,0,1652,1654,
        3,260,130,0,1653,1652,1,0,0,0,1653,1654,1,0,0,0,1654,1655,1,0,0,
        0,1655,1656,5,140,0,0,1656,1703,3,202,101,0,1657,1659,5,17,0,0,1658,
        1657,1,0,0,0,1658,1659,1,0,0,0,1659,1660,1,0,0,0,1660,1661,5,49,
        0,0,1661,1662,5,139,0,0,1662,1665,3,242,121,0,1663,1666,3,578,289,
        0,1664,1666,3,26,13,0,1665,1663,1,0,0,0,1665,1664,1,0,0,0,1666,1667,
        1,0,0,0,1667,1668,5,57,0,0,1668,1669,3,56,28,0,1669,1670,5,140,0,
        0,1670,1671,3,202,101,0,1671,1703,1,0,0,0,1672,1673,5,20,0,0,1673,
        1703,5,144,0,0,1674,1675,5,29,0,0,1675,1703,5,144,0,0,1676,1681,
        5,52,0,0,1677,1682,3,578,289,0,1678,1679,5,23,0,0,1679,1682,3,56,
        28,0,1680,1682,5,31,0,0,1681,1677,1,0,0,0,1681,1678,1,0,0,0,1681,
        1680,1,0,0,0,1682,1683,1,0,0,0,1683,1703,5,144,0,0,1684,1686,5,89,
        0,0,1685,1687,3,56,28,0,1686,1685,1,0,0,0,1686,1687,1,0,0,0,1687,
        1688,1,0,0,0,1688,1703,5,144,0,0,1689,1691,5,102,0,0,1690,1692,3,
        56,28,0,1691,1690,1,0,0,0,1691,1692,1,0,0,0,1692,1693,1,0,0,0,1693,
        1703,5,144,0,0,1694,1703,3,232,116,0,1695,1703,3,208,104,0,1696,
        1703,3,210,105,0,1697,1703,3,212,106,0,1698,1703,3,224,112,0,1699,
        1703,3,226,113,0,1700,1703,3,230,115,0,1701,1703,3,228,114,0,1702,
        1609,1,0,0,0,1702,1610,1,0,0,0,1702,1611,1,0,0,0,1702,1614,1,0,0,
        0,1702,1615,1,0,0,0,1702,1628,1,0,0,0,1702,1634,1,0,0,0,1702,1642,
        1,0,0,0,1702,1658,1,0,0,0,1702,1672,1,0,0,0,1702,1674,1,0,0,0,1702,
        1676,1,0,0,0,1702,1684,1,0,0,0,1702,1689,1,0,0,0,1702,1694,1,0,0,
        0,1702,1695,1,0,0,0,1702,1696,1,0,0,0,1702,1697,1,0,0,0,1702,1698,
        1,0,0,0,1702,1699,1,0,0,0,1702,1700,1,0,0,0,1702,1701,1,0,0,0,1703,
        203,1,0,0,0,1704,1705,5,144,0,0,1705,205,1,0,0,0,1706,1707,5,55,
        0,0,1707,1708,5,139,0,0,1708,1709,3,56,28,0,1709,1710,5,140,0,0,
        1710,1711,3,202,101,0,1711,1721,1,0,0,0,1712,1713,5,55,0,0,1713,
        1714,5,139,0,0,1714,1715,3,56,28,0,1715,1716,5,140,0,0,1716,1717,
        3,202,101,0,1717,1718,5,37,0,0,1718,1719,3,202,101,0,1719,1721,1,
        0,0,0,1720,1706,1,0,0,0,1720,1712,1,0,0,0,1721,207,1,0,0,0,1722,
        1723,5,26,0,0,1723,1724,3,234,117,0,1724,209,1,0,0,0,1725,1726,5,
        109,0,0,1726,1727,3,234,117,0,1727,211,1,0,0,0,1728,1729,5,66,0,
        0,1729,1730,5,139,0,0,1730,1731,3,56,28,0,1731,1732,5,140,0,0,1732,
        1733,3,202,101,0,1733,213,1,0,0,0,1734,1737,3,12,6,0,1735,1737,3,
        476,238,0,1736,1734,1,0,0,0,1736,1735,1,0,0,0,1737,215,1,0,0,0,1738,
        1739,5,96,0,0,1739,1740,3,12,6,0,1740,1741,5,137,0,0,1741,1742,3,
        56,28,0,1742,1743,5,138,0,0,1743,1755,1,0,0,0,1744,1746,5,96,0,0,
        1745,1747,3,12,6,0,1746,1745,1,0,0,0,1746,1747,1,0,0,0,1747,1748,
        1,0,0,0,1748,1750,5,137,0,0,1749,1751,3,56,28,0,1750,1749,1,0,0,
        0,1750,1751,1,0,0,0,1751,1752,1,0,0,0,1752,1753,5,138,0,0,1753,1755,
        3,218,109,0,1754,1738,1,0,0,0,1754,1744,1,0,0,0,1755,217,1,0,0,0,
        1756,1757,5,135,0,0,1757,1758,3,220,110,0,1758,1759,5,136,0,0,1759,
        219,1,0,0,0,1760,1765,3,222,111,0,1761,1762,5,142,0,0,1762,1764,
        3,222,111,0,1763,1761,1,0,0,0,1764,1767,1,0,0,0,1765,1763,1,0,0,
        0,1765,1766,1,0,0,0,1766,1769,1,0,0,0,1767,1765,1,0,0,0,1768,1770,
        5,142,0,0,1769,1768,1,0,0,0,1769,1770,1,0,0,0,1770,221,1,0,0,0,1771,
        1772,3,56,28,0,1772,223,1,0,0,0,1773,1774,5,113,0,0,1774,1775,5,
        139,0,0,1775,1776,3,272,136,0,1776,1777,5,140,0,0,1777,1778,3,202,
        101,0,1778,225,1,0,0,0,1779,1780,5,121,0,0,1780,1781,5,89,0,0,1781,
        1782,3,56,28,0,1782,1783,5,144,0,0,1783,1788,1,0,0,0,1784,1785,5,
        121,0,0,1785,1786,5,20,0,0,1786,1788,5,144,0,0,1787,1779,1,0,0,0,
        1787,1784,1,0,0,0,1788,227,1,0,0,0,1789,1790,5,45,0,0,1790,1791,
        5,139,0,0,1791,1792,3,476,238,0,1792,1793,3,478,239,0,1793,1794,
        5,140,0,0,1794,1795,3,202,101,0,1795,229,1,0,0,0,1796,1797,5,111,
        0,0,1797,1798,3,234,117,0,1798,231,1,0,0,0,1799,1800,5,104,0,0,1800,
        1801,3,234,117,0,1801,1802,3,262,131,0,1802,1811,1,0,0,0,1803,1804,
        5,104,0,0,1804,1806,3,234,117,0,1805,1807,3,262,131,0,1806,1805,
        1,0,0,0,1806,1807,1,0,0,0,1807,1808,1,0,0,0,1808,1809,3,270,135,
        0,1809,1811,1,0,0,0,1810,1799,1,0,0,0,1810,1803,1,0,0,0,1811,233,
        1,0,0,0,1812,1814,5,135,0,0,1813,1815,3,256,128,0,1814,1813,1,0,
        0,0,1814,1815,1,0,0,0,1815,1816,1,0,0,0,1816,1817,5,136,0,0,1817,
        235,1,0,0,0,1818,1823,5,113,0,0,1819,1823,5,87,0,0,1820,1821,5,87,
        0,0,1821,1823,5,85,0,0,1822,1818,1,0,0,0,1822,1819,1,0,0,0,1822,
        1820,1,0,0,0,1822,1823,1,0,0,0,1823,1824,1,0,0,0,1824,1825,3,242,
        121,0,1825,1830,3,244,122,0,1826,1827,5,142,0,0,1827,1829,3,244,
        122,0,1828,1826,1,0,0,0,1829,1832,1,0,0,0,1830,1828,1,0,0,0,1830,
        1831,1,0,0,0,1831,1852,1,0,0,0,1832,1830,1,0,0,0,1833,1834,5,45,
        0,0,1834,1835,3,476,238,0,1835,1836,3,478,239,0,1836,1852,1,0,0,
        0,1837,1838,5,114,0,0,1838,1839,3,22,11,0,1839,1840,5,155,0,0,1840,
        1841,3,56,28,0,1841,1852,1,0,0,0,1842,1852,3,238,119,0,1843,1845,
        3,464,232,0,1844,1843,1,0,0,0,1844,1845,1,0,0,0,1845,1846,1,0,0,
        0,1846,1847,3,12,6,0,1847,1848,3,578,289,0,1848,1849,5,155,0,0,1849,
        1850,3,154,77,0,1850,1852,1,0,0,0,1851,1822,1,0,0,0,1851,1833,1,
        0,0,0,1851,1837,1,0,0,0,1851,1842,1,0,0,0,1851,1844,1,0,0,0,1852,
        237,1,0,0,0,1853,1854,5,111,0,0,1854,1855,5,135,0,0,1855,1856,3,
        240,120,0,1856,1857,5,136,0,0,1857,239,1,0,0,0,1858,1859,5,32,0,
        0,1859,1860,5,147,0,0,1860,1861,5,156,0,0,1861,1862,3,16,8,0,1862,
        1863,5,157,0,0,1863,1864,3,578,289,0,1864,1865,5,155,0,0,1865,1866,
        5,150,0,0,1866,1867,3,578,289,0,1867,1868,5,144,0,0,1868,241,1,0,
        0,0,1869,1872,5,114,0,0,1870,1872,3,12,6,0,1871,1869,1,0,0,0,1871,
        1870,1,0,0,0,1872,243,1,0,0,0,1873,1879,3,578,289,0,1874,1876,5,
        155,0,0,1875,1877,5,87,0,0,1876,1875,1,0,0,0,1876,1877,1,0,0,0,1877,
        1878,1,0,0,0,1878,1880,3,246,123,0,1879,1874,1,0,0,0,1879,1880,1,
        0,0,0,1880,245,1,0,0,0,1881,1887,3,56,28,0,1882,1887,3,438,219,0,
        1883,1887,3,218,109,0,1884,1887,3,26,13,0,1885,1887,3,154,77,0,1886,
        1881,1,0,0,0,1886,1882,1,0,0,0,1886,1883,1,0,0,0,1886,1884,1,0,0,
        0,1886,1885,1,0,0,0,1887,247,1,0,0,0,1888,1889,5,28,0,0,1889,1890,
        3,12,6,0,1890,1891,3,376,188,0,1891,249,1,0,0,0,1892,1894,3,252,
        126,0,1893,1892,1,0,0,0,1894,1895,1,0,0,0,1895,1893,1,0,0,0,1895,
        1896,1,0,0,0,1896,1897,1,0,0,0,1897,1898,3,256,128,0,1898,251,1,
        0,0,0,1899,1900,5,23,0,0,1900,1902,3,56,28,0,1901,1903,3,254,127,
        0,1902,1901,1,0,0,0,1902,1903,1,0,0,0,1903,1904,1,0,0,0,1904,1905,
        5,143,0,0,1905,1916,1,0,0,0,1906,1907,5,23,0,0,1907,1909,3,322,161,
        0,1908,1910,3,254,127,0,1909,1908,1,0,0,0,1909,1910,1,0,0,0,1910,
        1911,1,0,0,0,1911,1912,5,143,0,0,1912,1916,1,0,0,0,1913,1914,5,31,
        0,0,1914,1916,5,143,0,0,1915,1899,1,0,0,0,1915,1906,1,0,0,0,1915,
        1913,1,0,0,0,1916,253,1,0,0,0,1917,1918,5,118,0,0,1918,1919,3,56,
        28,0,1919,255,1,0,0,0,1920,1922,3,188,94,0,1921,1920,1,0,0,0,1922,
        1923,1,0,0,0,1923,1921,1,0,0,0,1923,1924,1,0,0,0,1924,257,1,0,0,
        0,1925,1935,3,236,118,0,1926,1931,3,56,28,0,1927,1928,5,142,0,0,
        1928,1930,3,56,28,0,1929,1927,1,0,0,0,1930,1933,1,0,0,0,1931,1929,
        1,0,0,0,1931,1932,1,0,0,0,1932,1935,1,0,0,0,1933,1931,1,0,0,0,1934,
        1925,1,0,0,0,1934,1926,1,0,0,0,1935,259,1,0,0,0,1936,1941,3,56,28,
        0,1937,1938,5,142,0,0,1938,1940,3,56,28,0,1939,1937,1,0,0,0,1940,
        1943,1,0,0,0,1941,1939,1,0,0,0,1941,1942,1,0,0,0,1942,261,1,0,0,
        0,1943,1941,1,0,0,0,1944,1948,3,264,132,0,1945,1947,3,264,132,0,
        1946,1945,1,0,0,0,1947,1950,1,0,0,0,1948,1946,1,0,0,0,1948,1949,
        1,0,0,0,1949,1952,1,0,0,0,1950,1948,1,0,0,0,1951,1953,3,266,133,
        0,1952,1951,1,0,0,0,1952,1953,1,0,0,0,1953,1956,1,0,0,0,1954,1956,
        3,266,133,0,1955,1944,1,0,0,0,1955,1954,1,0,0,0,1956,263,1,0,0,0,
        1957,1958,5,24,0,0,1958,1959,5,139,0,0,1959,1961,3,46,23,0,1960,
        1962,3,578,289,0,1961,1960,1,0,0,0,1961,1962,1,0,0,0,1962,1963,1,
        0,0,0,1963,1965,5,140,0,0,1964,1966,3,268,134,0,1965,1964,1,0,0,
        0,1965,1966,1,0,0,0,1966,1967,1,0,0,0,1967,1968,3,234,117,0,1968,
        265,1,0,0,0,1969,1971,5,24,0,0,1970,1972,3,268,134,0,1971,1970,1,
        0,0,0,1971,1972,1,0,0,0,1972,1973,1,0,0,0,1973,1974,3,234,117,0,
        1974,267,1,0,0,0,1975,1976,5,118,0,0,1976,1977,5,139,0,0,1977,1978,
        3,56,28,0,1978,1979,5,140,0,0,1979,269,1,0,0,0,1980,1981,5,44,0,
        0,1981,1982,3,234,117,0,1982,271,1,0,0,0,1983,1986,3,236,118,0,1984,
        1986,3,56,28,0,1985,1983,1,0,0,0,1985,1984,1,0,0,0,1986,273,1,0,
        0,0,1987,1988,5,69,0,0,1988,1989,3,276,138,0,1989,1991,3,278,139,
        0,1990,1992,5,144,0,0,1991,1990,1,0,0,0,1991,1992,1,0,0,0,1992,275,
        1,0,0,0,1993,1998,3,578,289,0,1994,1995,5,141,0,0,1995,1997,3,578,
        289,0,1996,1994,1,0,0,0,1997,2000,1,0,0,0,1998,1996,1,0,0,0,1998,
        1999,1,0,0,0,1999,277,1,0,0,0,2000,1998,1,0,0,0,2001,2003,5,135,
        0,0,2002,2004,3,280,140,0,2003,2002,1,0,0,0,2003,2004,1,0,0,0,2004,
        2006,1,0,0,0,2005,2007,3,284,142,0,2006,2005,1,0,0,0,2006,2007,1,
        0,0,0,2007,2009,1,0,0,0,2008,2010,3,288,144,0,2009,2008,1,0,0,0,
        2009,2010,1,0,0,0,2010,2011,1,0,0,0,2011,2014,5,136,0,0,2012,2014,
        5,144,0,0,2013,2001,1,0,0,0,2013,2012,1,0,0,0,2014,279,1,0,0,0,2015,
        2017,3,282,141,0,2016,2015,1,0,0,0,2017,2018,1,0,0,0,2018,2016,1,
        0,0,0,2018,2019,1,0,0,0,2019,281,1,0,0,0,2020,2021,5,42,0,0,2021,
        2022,5,12,0,0,2022,2023,3,578,289,0,2023,2024,5,144,0,0,2024,283,
        1,0,0,0,2025,2027,3,286,143,0,2026,2025,1,0,0,0,2027,2028,1,0,0,
        0,2028,2026,1,0,0,0,2028,2029,1,0,0,0,2029,285,1,0,0,0,2030,2032,
        5,53,0,0,2031,2030,1,0,0,0,2031,2032,1,0,0,0,2032,2033,1,0,0,0,2033,
        2034,5,113,0,0,2034,2035,3,578,289,0,2035,2038,5,155,0,0,2036,2039,
        3,10,5,0,2037,2039,3,20,10,0,2038,2036,1,0,0,0,2038,2037,1,0,0,0,
        2039,2040,1,0,0,0,2040,2041,5,144,0,0,2041,2058,1,0,0,0,2042,2044,
        5,53,0,0,2043,2042,1,0,0,0,2043,2044,1,0,0,0,2044,2045,1,0,0,0,2045,
        2046,5,113,0,0,2046,2047,3,10,5,0,2047,2048,5,144,0,0,2048,2058,
        1,0,0,0,2049,2051,5,53,0,0,2050,2049,1,0,0,0,2050,2051,1,0,0,0,2051,
        2052,1,0,0,0,2052,2053,5,113,0,0,2053,2054,5,97,0,0,2054,2055,3,
        10,5,0,2055,2056,5,144,0,0,2056,2058,1,0,0,0,2057,2031,1,0,0,0,2057,
        2043,1,0,0,0,2057,2050,1,0,0,0,2058,287,1,0,0,0,2059,2061,3,290,
        145,0,2060,2059,1,0,0,0,2061,2062,1,0,0,0,2062,2060,1,0,0,0,2062,
        2063,1,0,0,0,2063,289,1,0,0,0,2064,2069,3,274,137,0,2065,2069,3,
        292,146,0,2066,2069,3,356,178,0,2067,2069,3,372,186,0,2068,2064,
        1,0,0,0,2068,2065,1,0,0,0,2068,2066,1,0,0,0,2068,2067,1,0,0,0,2069,
        291,1,0,0,0,2070,2072,3,464,232,0,2071,2070,1,0,0,0,2071,2072,1,
        0,0,0,2072,2074,1,0,0,0,2073,2075,3,368,184,0,2074,2073,1,0,0,0,
        2074,2075,1,0,0,0,2075,2082,1,0,0,0,2076,2083,3,518,259,0,2077,2083,
        3,524,262,0,2078,2083,3,528,264,0,2079,2083,3,530,265,0,2080,2083,
        3,532,266,0,2081,2083,3,294,147,0,2082,2076,1,0,0,0,2082,2077,1,
        0,0,0,2082,2078,1,0,0,0,2082,2079,1,0,0,0,2082,2080,1,0,0,0,2082,
        2081,1,0,0,0,2083,293,1,0,0,0,2084,2086,5,122,0,0,2085,2087,5,99,
        0,0,2086,2085,1,0,0,0,2086,2087,1,0,0,0,2087,2088,1,0,0,0,2088,2090,
        3,578,289,0,2089,2091,3,306,153,0,2090,2089,1,0,0,0,2090,2091,1,
        0,0,0,2091,2093,1,0,0,0,2092,2094,3,296,148,0,2093,2092,1,0,0,0,
        2093,2094,1,0,0,0,2094,2096,1,0,0,0,2095,2097,3,314,157,0,2096,2095,
        1,0,0,0,2096,2097,1,0,0,0,2097,2098,1,0,0,0,2098,2100,5,139,0,0,
        2099,2101,3,300,150,0,2100,2099,1,0,0,0,2100,2101,1,0,0,0,2101,2102,
        1,0,0,0,2102,2103,5,140,0,0,2103,2104,3,298,149,0,2104,295,1,0,0,
        0,2105,2106,5,143,0,0,2106,2111,3,46,23,0,2107,2108,5,142,0,0,2108,
        2110,3,10,5,0,2109,2107,1,0,0,0,2110,2113,1,0,0,0,2111,2109,1,0,
        0,0,2111,2112,1,0,0,0,2112,297,1,0,0,0,2113,2111,1,0,0,0,2114,2116,
        5,135,0,0,2115,2117,3,364,182,0,2116,2115,1,0,0,0,2116,2117,1,0,
        0,0,2117,2118,1,0,0,0,2118,2121,5,136,0,0,2119,2121,5,144,0,0,2120,
        2114,1,0,0,0,2120,2119,1,0,0,0,2121,299,1,0,0,0,2122,2127,3,302,
        151,0,2123,2124,5,142,0,0,2124,2126,3,302,151,0,2125,2123,1,0,0,
        0,2126,2129,1,0,0,0,2127,2125,1,0,0,0,2127,2128,1,0,0,0,2128,301,
        1,0,0,0,2129,2127,1,0,0,0,2130,2132,3,464,232,0,2131,2130,1,0,0,
        0,2131,2132,1,0,0,0,2132,2133,1,0,0,0,2133,2134,3,12,6,0,2134,2135,
        3,578,289,0,2135,303,1,0,0,0,2136,2137,3,578,289,0,2137,2138,5,159,
        0,0,2138,2140,3,578,289,0,2139,2141,3,48,24,0,2140,2139,1,0,0,0,
        2140,2141,1,0,0,0,2141,305,1,0,0,0,2142,2143,5,156,0,0,2143,2148,
        3,308,154,0,2144,2145,5,142,0,0,2145,2147,3,308,154,0,2146,2144,
        1,0,0,0,2147,2150,1,0,0,0,2148,2146,1,0,0,0,2148,2149,1,0,0,0,2149,
        2151,1,0,0,0,2150,2148,1,0,0,0,2151,2152,5,157,0,0,2152,307,1,0,
        0,0,2153,2155,3,464,232,0,2154,2153,1,0,0,0,2154,2155,1,0,0,0,2155,
        2156,1,0,0,0,2156,2157,3,578,289,0,2157,309,1,0,0,0,2158,2159,5,
        143,0,0,2159,2164,3,46,23,0,2160,2161,5,142,0,0,2161,2163,3,10,5,
        0,2162,2160,1,0,0,0,2163,2166,1,0,0,0,2164,2162,1,0,0,0,2164,2165,
        1,0,0,0,2165,311,1,0,0,0,2166,2164,1,0,0,0,2167,2172,3,10,5,0,2168,
        2169,5,142,0,0,2169,2171,3,10,5,0,2170,2168,1,0,0,0,2171,2174,1,
        0,0,0,2172,2170,1,0,0,0,2172,2173,1,0,0,0,2173,313,1,0,0,0,2174,
        2172,1,0,0,0,2175,2177,3,316,158,0,2176,2175,1,0,0,0,2177,2178,1,
        0,0,0,2178,2176,1,0,0,0,2178,2179,1,0,0,0,2179,315,1,0,0,0,2180,
        2181,5,119,0,0,2181,2182,3,578,289,0,2182,2183,5,143,0,0,2183,2184,
        3,318,159,0,2184,317,1,0,0,0,2185,2196,3,360,180,0,2186,2189,3,320,
        160,0,2187,2188,5,142,0,0,2188,2190,3,358,179,0,2189,2187,1,0,0,
        0,2189,2190,1,0,0,0,2190,2193,1,0,0,0,2191,2192,5,142,0,0,2192,2194,
        3,360,180,0,2193,2191,1,0,0,0,2193,2194,1,0,0,0,2194,2196,1,0,0,
        0,2195,2185,1,0,0,0,2195,2186,1,0,0,0,2196,319,1,0,0,0,2197,2205,
        3,46,23,0,2198,2200,5,27,0,0,2199,2201,5,158,0,0,2200,2199,1,0,0,
        0,2200,2201,1,0,0,0,2201,2205,1,0,0,0,2202,2205,5,99,0,0,2203,2205,
        5,110,0,0,2204,2197,1,0,0,0,2204,2198,1,0,0,0,2204,2202,1,0,0,0,
        2204,2203,1,0,0,0,2205,321,1,0,0,0,2206,2218,3,344,172,0,2207,2218,
        3,350,175,0,2208,2218,3,352,176,0,2209,2218,3,336,168,0,2210,2218,
        3,338,169,0,2211,2218,3,340,170,0,2212,2218,3,342,171,0,2213,2218,
        3,56,28,0,2214,2218,3,330,165,0,2215,2218,3,326,163,0,2216,2218,
        3,324,162,0,2217,2206,1,0,0,0,2217,2207,1,0,0,0,2217,2208,1,0,0,
        0,2217,2209,1,0,0,0,2217,2210,1,0,0,0,2217,2211,1,0,0,0,2217,2212,
        1,0,0,0,2217,2213,1,0,0,0,2217,2214,1,0,0,0,2217,2215,1,0,0,0,2217,
        2216,1,0,0,0,2218,323,1,0,0,0,2219,2221,5,181,0,0,2220,2222,3,12,
        6,0,2221,2220,1,0,0,0,2221,2222,1,0,0,0,2222,2224,1,0,0,0,2223,2225,
        3,56,28,0,2224,2223,1,0,0,0,2224,2225,1,0,0,0,2225,325,1,0,0,0,2226,
        2227,5,137,0,0,2227,2228,3,328,164,0,2228,2229,5,138,0,0,2229,327,
        1,0,0,0,2230,2235,3,322,161,0,2231,2232,5,142,0,0,2232,2234,3,322,
        161,0,2233,2231,1,0,0,0,2234,2237,1,0,0,0,2235,2233,1,0,0,0,2235,
        2236,1,0,0,0,2236,2239,1,0,0,0,2237,2235,1,0,0,0,2238,2240,5,142,
        0,0,2239,2238,1,0,0,0,2239,2240,1,0,0,0,2240,329,1,0,0,0,2241,2243,
        3,12,6,0,2242,2241,1,0,0,0,2242,2243,1,0,0,0,2243,2245,1,0,0,0,2244,
        2246,3,346,173,0,2245,2244,1,0,0,0,2245,2246,1,0,0,0,2246,2248,1,
        0,0,0,2247,2249,3,332,166,0,2248,2247,1,0,0,0,2248,2249,1,0,0,0,
        2249,331,1,0,0,0,2250,2251,5,135,0,0,2251,2256,3,334,167,0,2252,
        2253,5,142,0,0,2253,2255,3,334,167,0,2254,2252,1,0,0,0,2255,2258,
        1,0,0,0,2256,2254,1,0,0,0,2256,2257,1,0,0,0,2257,2259,1,0,0,0,2258,
        2256,1,0,0,0,2259,2260,5,136,0,0,2260,333,1,0,0,0,2261,2262,3,578,
        289,0,2262,2263,5,143,0,0,2263,2264,3,322,161,0,2264,335,1,0,0,0,
        2265,2266,5,156,0,0,2266,2274,3,56,28,0,2267,2268,5,168,0,0,2268,
        2274,3,56,28,0,2269,2270,5,157,0,0,2270,2274,3,56,28,0,2271,2272,
        5,169,0,0,2272,2274,3,56,28,0,2273,2265,1,0,0,0,2273,2267,1,0,0,
        0,2273,2269,1,0,0,0,2273,2271,1,0,0,0,2274,337,1,0,0,0,2275,2276,
        3,336,168,0,2276,2277,5,11,0,0,2277,2278,3,322,161,0,2278,339,1,
        0,0,0,2279,2280,3,336,168,0,2280,2281,5,75,0,0,2281,2282,3,322,161,
        0,2282,341,1,0,0,0,2283,2284,5,71,0,0,2284,2285,3,322,161,0,2285,
        343,1,0,0,0,2286,2287,3,12,6,0,2287,2288,3,346,173,0,2288,345,1,
        0,0,0,2289,2290,3,348,174,0,2290,347,1,0,0,0,2291,2292,3,578,289,
        0,2292,349,1,0,0,0,2293,2294,3,514,257,0,2294,351,1,0,0,0,2295,2296,
        5,114,0,0,2296,2297,3,354,177,0,2297,353,1,0,0,0,2298,2299,3,346,
        173,0,2299,355,1,0,0,0,2300,2302,3,464,232,0,2301,2303,5,60,0,0,
        2302,2301,1,0,0,0,2302,2303,1,0,0,0,2303,2305,1,0,0,0,2304,2306,
        5,84,0,0,2305,2304,1,0,0,0,2305,2306,1,0,0,0,2306,2307,1,0,0,0,2307,
        2308,5,97,0,0,2308,2309,5,116,0,0,2309,2310,3,578,289,0,2310,2311,
        5,139,0,0,2311,2312,5,140,0,0,2312,2313,3,390,195,0,2313,357,1,0,
        0,0,2314,2319,3,10,5,0,2315,2316,5,142,0,0,2316,2318,3,10,5,0,2317,
        2315,1,0,0,0,2318,2321,1,0,0,0,2319,2317,1,0,0,0,2319,2320,1,0,0,
        0,2320,359,1,0,0,0,2321,2319,1,0,0,0,2322,2323,5,70,0,0,2323,2324,
        5,139,0,0,2324,2325,5,140,0,0,2325,361,1,0,0,0,2326,2328,5,135,0,
        0,2327,2329,3,364,182,0,2328,2327,1,0,0,0,2328,2329,1,0,0,0,2329,
        2330,1,0,0,0,2330,2331,5,136,0,0,2331,363,1,0,0,0,2332,2334,3,366,
        183,0,2333,2332,1,0,0,0,2334,2335,1,0,0,0,2335,2333,1,0,0,0,2335,
        2336,1,0,0,0,2336,365,1,0,0,0,2337,2339,3,464,232,0,2338,2337,1,
        0,0,0,2338,2339,1,0,0,0,2339,2341,1,0,0,0,2340,2342,3,368,184,0,
        2341,2340,1,0,0,0,2341,2342,1,0,0,0,2342,2345,1,0,0,0,2343,2346,
        3,372,186,0,2344,2346,3,544,272,0,2345,2343,1,0,0,0,2345,2344,1,
        0,0,0,2346,367,1,0,0,0,2347,2349,3,370,185,0,2348,2347,1,0,0,0,2349,
        2350,1,0,0,0,2350,2348,1,0,0,0,2350,2351,1,0,0,0,2351,369,1,0,0,
        0,2352,2353,7,10,0,0,2353,371,1,0,0,0,2354,2374,3,540,270,0,2355,
        2374,3,374,187,0,2356,2374,3,534,267,0,2357,2363,3,422,211,0,2358,
        2364,3,426,213,0,2359,2360,3,486,243,0,2360,2361,3,110,55,0,2361,
        2362,5,144,0,0,2362,2364,1,0,0,0,2363,2358,1,0,0,0,2363,2359,1,0,
        0,0,2364,2374,1,0,0,0,2365,2374,3,546,273,0,2366,2374,3,548,274,
        0,2367,2374,3,518,259,0,2368,2374,3,524,262,0,2369,2374,3,528,264,
        0,2370,2374,3,530,265,0,2371,2374,3,532,266,0,2372,2374,3,294,147,
        0,2373,2354,1,0,0,0,2373,2355,1,0,0,0,2373,2356,1,0,0,0,2373,2357,
        1,0,0,0,2373,2365,1,0,0,0,2373,2366,1,0,0,0,2373,2367,1,0,0,0,2373,
        2368,1,0,0,0,2373,2369,1,0,0,0,2373,2370,1,0,0,0,2373,2371,1,0,0,
        0,2373,2372,1,0,0,0,2374,373,1,0,0,0,2375,2381,5,87,0,0,2376,2377,
        5,85,0,0,2377,2381,5,87,0,0,2378,2379,5,87,0,0,2379,2381,5,85,0,
        0,2380,2375,1,0,0,0,2380,2376,1,0,0,0,2380,2378,1,0,0,0,2380,2381,
        1,0,0,0,2381,2383,1,0,0,0,2382,2384,5,86,0,0,2383,2382,1,0,0,0,2383,
        2384,1,0,0,0,2384,2385,1,0,0,0,2385,2395,3,12,6,0,2386,2387,3,10,
        5,0,2387,2388,5,141,0,0,2388,2389,3,542,271,0,2389,2396,1,0,0,0,
        2390,2396,3,548,274,0,2391,2396,3,538,269,0,2392,2396,3,542,271,
        0,2393,2396,3,568,284,0,2394,2396,3,536,268,0,2395,2386,1,0,0,0,
        2395,2390,1,0,0,0,2395,2391,1,0,0,0,2395,2392,1,0,0,0,2395,2393,
        1,0,0,0,2395,2394,1,0,0,0,2396,375,1,0,0,0,2397,2402,3,378,189,0,
        2398,2399,5,142,0,0,2399,2401,3,378,189,0,2400,2398,1,0,0,0,2401,
        2404,1,0,0,0,2402,2400,1,0,0,0,2402,2403,1,0,0,0,2403,377,1,0,0,
        0,2404,2402,1,0,0,0,2405,2406,3,578,289,0,2406,2407,5,155,0,0,2407,
        2408,3,56,28,0,2408,379,1,0,0,0,2409,2414,3,382,191,0,2410,2411,
        5,142,0,0,2411,2413,3,382,191,0,2412,2410,1,0,0,0,2413,2416,1,0,
        0,0,2414,2412,1,0,0,0,2414,2415,1,0,0,0,2415,381,1,0,0,0,2416,2414,
        1,0,0,0,2417,2420,3,578,289,0,2418,2419,5,155,0,0,2419,2421,3,384,
        192,0,2420,2418,1,0,0,0,2420,2421,1,0,0,0,2421,383,1,0,0,0,2422,
        2425,3,56,28,0,2423,2425,3,438,219,0,2424,2422,1,0,0,0,2424,2423,
        1,0,0,0,2425,385,1,0,0,0,2426,2429,3,12,6,0,2427,2429,5,116,0,0,
        2428,2426,1,0,0,0,2428,2427,1,0,0,0,2429,387,1,0,0,0,2430,2431,3,
        10,5,0,2431,389,1,0,0,0,2432,2439,3,234,117,0,2433,2439,5,144,0,
        0,2434,2435,3,486,243,0,2435,2436,3,56,28,0,2436,2437,5,144,0,0,
        2437,2439,1,0,0,0,2438,2432,1,0,0,0,2438,2433,1,0,0,0,2438,2434,
        1,0,0,0,2439,391,1,0,0,0,2440,2447,3,400,200,0,2441,2444,3,394,197,
        0,2442,2443,5,142,0,0,2443,2445,3,400,200,0,2444,2442,1,0,0,0,2444,
        2445,1,0,0,0,2445,2447,1,0,0,0,2446,2440,1,0,0,0,2446,2441,1,0,0,
        0,2447,393,1,0,0,0,2448,2453,3,396,198,0,2449,2450,5,142,0,0,2450,
        2452,3,396,198,0,2451,2449,1,0,0,0,2452,2455,1,0,0,0,2453,2451,1,
        0,0,0,2453,2454,1,0,0,0,2454,395,1,0,0,0,2455,2453,1,0,0,0,2456,
        2458,3,464,232,0,2457,2456,1,0,0,0,2457,2458,1,0,0,0,2458,2460,1,
        0,0,0,2459,2461,3,398,199,0,2460,2459,1,0,0,0,2460,2461,1,0,0,0,
        2461,2462,1,0,0,0,2462,2465,3,570,285,0,2463,2465,5,13,0,0,2464,
        2457,1,0,0,0,2464,2463,1,0,0,0,2465,397,1,0,0,0,2466,2477,5,87,0,
        0,2467,2477,5,78,0,0,2468,2477,5,57,0,0,2469,2470,5,87,0,0,2470,
        2477,5,85,0,0,2471,2472,5,87,0,0,2472,2477,5,101,0,0,2473,2474,5,
        57,0,0,2474,2477,5,101,0,0,2475,2477,5,101,0,0,2476,2466,1,0,0,0,
        2476,2467,1,0,0,0,2476,2468,1,0,0,0,2476,2469,1,0,0,0,2476,2471,
        1,0,0,0,2476,2473,1,0,0,0,2476,2475,1,0,0,0,2477,399,1,0,0,0,2478,
        2480,3,464,232,0,2479,2478,1,0,0,0,2479,2480,1,0,0,0,2480,2481,1,
        0,0,0,2481,2482,5,80,0,0,2482,2483,3,434,217,0,2483,2484,3,578,289,
        0,2484,401,1,0,0,0,2485,2487,3,464,232,0,2486,2485,1,0,0,0,2486,
        2487,1,0,0,0,2487,2489,1,0,0,0,2488,2490,3,410,205,0,2489,2488,1,
        0,0,0,2489,2490,1,0,0,0,2490,2511,1,0,0,0,2491,2492,5,51,0,0,2492,
        2494,3,412,206,0,2493,2495,3,408,204,0,2494,2493,1,0,0,0,2494,2495,
        1,0,0,0,2495,2512,1,0,0,0,2496,2497,5,93,0,0,2497,2499,3,412,206,
        0,2498,2500,3,406,203,0,2499,2498,1,0,0,0,2499,2500,1,0,0,0,2500,
        2512,1,0,0,0,2501,2502,5,51,0,0,2502,2504,3,412,206,0,2503,2505,
        3,404,202,0,2504,2503,1,0,0,0,2504,2505,1,0,0,0,2505,2512,1,0,0,
        0,2506,2507,5,61,0,0,2507,2509,3,412,206,0,2508,2510,3,406,203,0,
        2509,2508,1,0,0,0,2509,2510,1,0,0,0,2510,2512,1,0,0,0,2511,2491,
        1,0,0,0,2511,2496,1,0,0,0,2511,2501,1,0,0,0,2511,2506,1,0,0,0,2512,
        403,1,0,0,0,2513,2515,3,464,232,0,2514,2513,1,0,0,0,2514,2515,1,
        0,0,0,2515,2516,1,0,0,0,2516,2517,5,61,0,0,2517,2518,3,412,206,0,
        2518,405,1,0,0,0,2519,2521,3,464,232,0,2520,2519,1,0,0,0,2520,2521,
        1,0,0,0,2521,2523,1,0,0,0,2522,2524,3,410,205,0,2523,2522,1,0,0,
        0,2523,2524,1,0,0,0,2524,2525,1,0,0,0,2525,2526,5,51,0,0,2526,2527,
        3,412,206,0,2527,407,1,0,0,0,2528,2530,3,464,232,0,2529,2528,1,0,
        0,0,2529,2530,1,0,0,0,2530,2532,1,0,0,0,2531,2533,3,410,205,0,2532,
        2531,1,0,0,0,2532,2533,1,0,0,0,2533,2534,1,0,0,0,2534,2535,5,93,
        0,0,2535,2536,3,412,206,0,2536,409,1,0,0,0,2537,2551,5,83,0,0,2538,
        2551,5,60,0,0,2539,2551,5,82,0,0,2540,2541,5,83,0,0,2541,2551,5,
        60,0,0,2542,2543,5,60,0,0,2543,2551,5,83,0,0,2544,2545,5,83,0,0,
        2545,2551,5,82,0,0,2546,2547,5,82,0,0,2547,2551,5,83,0,0,2548,2551,
        5,85,0,0,2549,2551,5,86,0,0,2550,2537,1,0,0,0,2550,2538,1,0,0,0,
        2550,2539,1,0,0,0,2550,2540,1,0,0,0,2550,2542,1,0,0,0,2550,2544,
        1,0,0,0,2550,2546,1,0,0,0,2550,2548,1,0,0,0,2550,2549,1,0,0,0,2551,
        411,1,0,0,0,2552,2559,3,234,117,0,2553,2554,3,486,243,0,2554,2555,
        3,56,28,0,2555,2556,5,144,0,0,2556,2559,1,0,0,0,2557,2559,5,144,
        0,0,2558,2552,1,0,0,0,2558,2553,1,0,0,0,2558,2557,1,0,0,0,2559,413,
        1,0,0,0,2560,2562,3,464,232,0,2561,2560,1,0,0,0,2561,2562,1,0,0,
        0,2562,2571,1,0,0,0,2563,2564,5,10,0,0,2564,2565,3,234,117,0,2565,
        2566,3,418,209,0,2566,2572,1,0,0,0,2567,2568,5,88,0,0,2568,2569,
        3,234,117,0,2569,2570,3,416,208,0,2570,2572,1,0,0,0,2571,2563,1,
        0,0,0,2571,2567,1,0,0,0,2572,415,1,0,0,0,2573,2575,3,464,232,0,2574,
        2573,1,0,0,0,2574,2575,1,0,0,0,2575,2576,1,0,0,0,2576,2577,5,10,
        0,0,2577,2578,3,234,117,0,2578,417,1,0,0,0,2579,2581,3,464,232,0,
        2580,2579,1,0,0,0,2580,2581,1,0,0,0,2581,2582,1,0,0,0,2582,2583,
        5,88,0,0,2583,2584,3,234,117,0,2584,419,1,0,0,0,2585,2608,5,145,
        0,0,2586,2608,5,146,0,0,2587,2608,5,153,0,0,2588,2608,5,154,0,0,
        2589,2608,5,161,0,0,2590,2608,5,162,0,0,2591,2608,5,103,0,0,2592,
        2608,5,43,0,0,2593,2608,5,147,0,0,2594,2608,5,148,0,0,2595,2608,
        5,149,0,0,2596,2608,5,150,0,0,2597,2608,5,151,0,0,2598,2608,5,152,
        0,0,2599,2608,5,178,0,0,2600,2608,3,488,244,0,2601,2608,5,166,0,
        0,2602,2608,5,167,0,0,2603,2608,5,157,0,0,2604,2608,5,156,0,0,2605,
        2608,5,169,0,0,2606,2608,5,168,0,0,2607,2585,1,0,0,0,2607,2586,1,
        0,0,0,2607,2587,1,0,0,0,2607,2588,1,0,0,0,2607,2589,1,0,0,0,2607,
        2590,1,0,0,0,2607,2591,1,0,0,0,2607,2592,1,0,0,0,2607,2593,1,0,0,
        0,2607,2594,1,0,0,0,2607,2595,1,0,0,0,2607,2596,1,0,0,0,2607,2597,
        1,0,0,0,2607,2598,1,0,0,0,2607,2599,1,0,0,0,2607,2600,1,0,0,0,2607,
        2601,1,0,0,0,2607,2602,1,0,0,0,2607,2603,1,0,0,0,2607,2604,1,0,0,
        0,2607,2605,1,0,0,0,2607,2606,1,0,0,0,2608,421,1,0,0,0,2609,2610,
        7,11,0,0,2610,2611,5,76,0,0,2611,2612,3,12,6,0,2612,2613,5,139,0,
        0,2613,2614,3,570,285,0,2614,2615,5,140,0,0,2615,423,1,0,0,0,2616,
        2617,5,143,0,0,2617,2618,7,12,0,0,2618,2620,5,139,0,0,2619,2621,
        3,50,25,0,2620,2619,1,0,0,0,2620,2621,1,0,0,0,2621,2622,1,0,0,0,
        2622,2623,5,140,0,0,2623,425,1,0,0,0,2624,2631,3,234,117,0,2625,
        2631,5,144,0,0,2626,2627,3,486,243,0,2627,2628,3,56,28,0,2628,2629,
        5,144,0,0,2629,2631,1,0,0,0,2630,2624,1,0,0,0,2630,2625,1,0,0,0,
        2630,2626,1,0,0,0,2631,427,1,0,0,0,2632,2633,5,143,0,0,2633,2634,
        3,312,156,0,2634,429,1,0,0,0,2635,2639,5,135,0,0,2636,2638,3,432,
        216,0,2637,2636,1,0,0,0,2638,2641,1,0,0,0,2639,2637,1,0,0,0,2639,
        2640,1,0,0,0,2640,2642,1,0,0,0,2641,2639,1,0,0,0,2642,2645,5,136,
        0,0,2643,2645,5,144,0,0,2644,2635,1,0,0,0,2644,2643,1,0,0,0,2645,
        431,1,0,0,0,2646,2648,3,464,232,0,2647,2646,1,0,0,0,2647,2648,1,
        0,0,0,2648,2650,1,0,0,0,2649,2651,3,368,184,0,2650,2649,1,0,0,0,
        2650,2651,1,0,0,0,2651,2666,1,0,0,0,2652,2667,3,372,186,0,2653,2654,
        5,45,0,0,2654,2656,3,12,6,0,2655,2657,3,484,242,0,2656,2655,1,0,
        0,0,2657,2658,1,0,0,0,2658,2656,1,0,0,0,2658,2659,1,0,0,0,2659,2660,
        1,0,0,0,2660,2661,5,144,0,0,2661,2667,1,0,0,0,2662,2663,3,12,6,0,
        2663,2664,3,142,71,0,2664,2665,5,144,0,0,2665,2667,1,0,0,0,2666,
        2652,1,0,0,0,2666,2653,1,0,0,0,2666,2662,1,0,0,0,2667,433,1,0,0,
        0,2668,2676,3,18,9,0,2669,2671,7,13,0,0,2670,2669,1,0,0,0,2671,2674,
        1,0,0,0,2672,2670,1,0,0,0,2672,2673,1,0,0,0,2673,2675,1,0,0,0,2674,
        2672,1,0,0,0,2675,2677,3,436,218,0,2676,2672,1,0,0,0,2677,2678,1,
        0,0,0,2678,2676,1,0,0,0,2678,2679,1,0,0,0,2679,435,1,0,0,0,2680,
        2684,5,137,0,0,2681,2683,5,142,0,0,2682,2681,1,0,0,0,2683,2686,1,
        0,0,0,2684,2682,1,0,0,0,2684,2685,1,0,0,0,2685,2687,1,0,0,0,2686,
        2684,1,0,0,0,2687,2688,5,138,0,0,2688,437,1,0,0,0,2689,2701,5,135,
        0,0,2690,2695,3,384,192,0,2691,2692,5,142,0,0,2692,2694,3,384,192,
        0,2693,2691,1,0,0,0,2694,2697,1,0,0,0,2695,2693,1,0,0,0,2695,2696,
        1,0,0,0,2696,2699,1,0,0,0,2697,2695,1,0,0,0,2698,2700,5,142,0,0,
        2699,2698,1,0,0,0,2699,2700,1,0,0,0,2700,2702,1,0,0,0,2701,2690,
        1,0,0,0,2701,2702,1,0,0,0,2702,2703,1,0,0,0,2703,2704,5,136,0,0,
        2704,439,1,0,0,0,2705,2706,5,156,0,0,2706,2711,3,442,221,0,2707,
        2708,5,142,0,0,2708,2710,3,442,221,0,2709,2707,1,0,0,0,2710,2713,
        1,0,0,0,2711,2709,1,0,0,0,2711,2712,1,0,0,0,2712,2714,1,0,0,0,2713,
        2711,1,0,0,0,2714,2715,5,157,0,0,2715,441,1,0,0,0,2716,2718,3,464,
        232,0,2717,2716,1,0,0,0,2717,2718,1,0,0,0,2718,2720,1,0,0,0,2719,
        2721,3,444,222,0,2720,2719,1,0,0,0,2720,2721,1,0,0,0,2721,2722,1,
        0,0,0,2722,2723,3,578,289,0,2723,443,1,0,0,0,2724,2725,7,14,0,0,
        2725,445,1,0,0,0,2726,2727,5,143,0,0,2727,2728,3,312,156,0,2728,
        447,1,0,0,0,2729,2733,5,135,0,0,2730,2732,3,450,225,0,2731,2730,
        1,0,0,0,2732,2735,1,0,0,0,2733,2731,1,0,0,0,2733,2734,1,0,0,0,2734,
        2736,1,0,0,0,2735,2733,1,0,0,0,2736,2737,5,136,0,0,2737,449,1,0,
        0,0,2738,2740,3,464,232,0,2739,2738,1,0,0,0,2739,2740,1,0,0,0,2740,
        2742,1,0,0,0,2741,2743,5,70,0,0,2742,2741,1,0,0,0,2742,2743,1,0,
        0,0,2743,2807,1,0,0,0,2744,2746,5,111,0,0,2745,2744,1,0,0,0,2745,
        2746,1,0,0,0,2746,2752,1,0,0,0,2747,2753,5,87,0,0,2748,2749,5,87,
        0,0,2749,2753,5,85,0,0,2750,2751,5,85,0,0,2751,2753,5,87,0,0,2752,
        2747,1,0,0,0,2752,2748,1,0,0,0,2752,2750,1,0,0,0,2752,2753,1,0,0,
        0,2753,2754,1,0,0,0,2754,2782,3,12,6,0,2755,2757,3,578,289,0,2756,
        2758,3,306,153,0,2757,2756,1,0,0,0,2757,2758,1,0,0,0,2758,2759,1,
        0,0,0,2759,2761,5,139,0,0,2760,2762,3,392,196,0,2761,2760,1,0,0,
        0,2761,2762,1,0,0,0,2762,2763,1,0,0,0,2763,2765,5,140,0,0,2764,2766,
        3,314,157,0,2765,2764,1,0,0,0,2765,2766,1,0,0,0,2766,2767,1,0,0,
        0,2767,2768,5,144,0,0,2768,2783,1,0,0,0,2769,2770,3,578,289,0,2770,
        2771,5,135,0,0,2771,2772,3,452,226,0,2772,2773,5,136,0,0,2773,2783,
        1,0,0,0,2774,2775,5,101,0,0,2775,2776,5,137,0,0,2776,2777,3,392,
        196,0,2777,2778,5,138,0,0,2778,2779,5,135,0,0,2779,2780,3,452,226,
        0,2780,2781,5,136,0,0,2781,2783,1,0,0,0,2782,2755,1,0,0,0,2782,2769,
        1,0,0,0,2782,2774,1,0,0,0,2783,2808,1,0,0,0,2784,2786,5,111,0,0,
        2785,2784,1,0,0,0,2785,2786,1,0,0,0,2786,2787,1,0,0,0,2787,2788,
        5,116,0,0,2788,2790,3,578,289,0,2789,2791,3,306,153,0,2790,2789,
        1,0,0,0,2790,2791,1,0,0,0,2791,2792,1,0,0,0,2792,2794,5,139,0,0,
        2793,2795,3,392,196,0,2794,2793,1,0,0,0,2794,2795,1,0,0,0,2795,2796,
        1,0,0,0,2796,2798,5,140,0,0,2797,2799,3,314,157,0,2798,2797,1,0,
        0,0,2798,2799,1,0,0,0,2799,2800,1,0,0,0,2800,2801,5,144,0,0,2801,
        2808,1,0,0,0,2802,2803,5,40,0,0,2803,2804,3,12,6,0,2804,2805,3,578,
        289,0,2805,2806,5,144,0,0,2806,2808,1,0,0,0,2807,2745,1,0,0,0,2807,
        2785,1,0,0,0,2807,2802,1,0,0,0,2808,451,1,0,0,0,2809,2811,3,464,
        232,0,2810,2809,1,0,0,0,2810,2811,1,0,0,0,2811,2830,1,0,0,0,2812,
        2813,5,51,0,0,2813,2819,5,144,0,0,2814,2816,3,464,232,0,2815,2814,
        1,0,0,0,2815,2816,1,0,0,0,2816,2817,1,0,0,0,2817,2818,5,93,0,0,2818,
        2820,5,144,0,0,2819,2815,1,0,0,0,2819,2820,1,0,0,0,2820,2831,1,0,
        0,0,2821,2822,5,93,0,0,2822,2828,5,144,0,0,2823,2825,3,464,232,0,
        2824,2823,1,0,0,0,2824,2825,1,0,0,0,2825,2826,1,0,0,0,2826,2827,
        5,51,0,0,2827,2829,5,144,0,0,2828,2824,1,0,0,0,2828,2829,1,0,0,0,
        2829,2831,1,0,0,0,2830,2812,1,0,0,0,2830,2821,1,0,0,0,2831,453,1,
        0,0,0,2832,2833,5,143,0,0,2833,2834,3,12,6,0,2834,455,1,0,0,0,2835,
        2847,5,135,0,0,2836,2841,3,458,229,0,2837,2838,5,142,0,0,2838,2840,
        3,458,229,0,2839,2837,1,0,0,0,2840,2843,1,0,0,0,2841,2839,1,0,0,
        0,2841,2842,1,0,0,0,2842,2845,1,0,0,0,2843,2841,1,0,0,0,2844,2846,
        5,142,0,0,2845,2844,1,0,0,0,2845,2846,1,0,0,0,2846,2848,1,0,0,0,
        2847,2836,1,0,0,0,2847,2848,1,0,0,0,2848,2849,1,0,0,0,2849,2850,
        5,136,0,0,2850,457,1,0,0,0,2851,2853,3,464,232,0,2852,2851,1,0,0,
        0,2852,2853,1,0,0,0,2853,2854,1,0,0,0,2854,2857,3,578,289,0,2855,
        2856,5,155,0,0,2856,2858,3,56,28,0,2857,2855,1,0,0,0,2857,2858,1,
        0,0,0,2858,459,1,0,0,0,2859,2860,5,137,0,0,2860,2861,3,462,231,0,
        2861,2862,5,143,0,0,2862,2864,3,470,235,0,2863,2865,5,142,0,0,2864,
        2863,1,0,0,0,2864,2865,1,0,0,0,2865,2866,1,0,0,0,2866,2867,5,138,
        0,0,2867,461,1,0,0,0,2868,2871,3,516,258,0,2869,2871,3,578,289,0,
        2870,2868,1,0,0,0,2870,2869,1,0,0,0,2871,463,1,0,0,0,2872,2874,3,
        466,233,0,2873,2872,1,0,0,0,2874,2875,1,0,0,0,2875,2873,1,0,0,0,
        2875,2876,1,0,0,0,2876,465,1,0,0,0,2877,2881,5,137,0,0,2878,2879,
        3,468,234,0,2879,2880,5,143,0,0,2880,2882,1,0,0,0,2881,2878,1,0,
        0,0,2881,2882,1,0,0,0,2882,2883,1,0,0,0,2883,2885,3,470,235,0,2884,
        2886,5,142,0,0,2885,2884,1,0,0,0,2885,2886,1,0,0,0,2886,2887,1,0,
        0,0,2887,2888,5,138,0,0,2888,2903,1,0,0,0,2889,2890,5,137,0,0,2890,
        2891,3,470,235,0,2891,2899,5,138,0,0,2892,2893,5,142,0,0,2893,2894,
        5,137,0,0,2894,2895,3,470,235,0,2895,2896,5,138,0,0,2896,2898,1,
        0,0,0,2897,2892,1,0,0,0,2898,2901,1,0,0,0,2899,2897,1,0,0,0,2899,
        2900,1,0,0,0,2900,2903,1,0,0,0,2901,2899,1,0,0,0,2902,2877,1,0,0,
        0,2902,2889,1,0,0,0,2903,467,1,0,0,0,2904,2907,3,516,258,0,2905,
        2907,3,578,289,0,2906,2904,1,0,0,0,2906,2905,1,0,0,0,2907,469,1,
        0,0,0,2908,2913,3,472,236,0,2909,2910,5,142,0,0,2910,2912,3,472,
        236,0,2911,2909,1,0,0,0,2912,2915,1,0,0,0,2913,2911,1,0,0,0,2913,
        2914,1,0,0,0,2914,471,1,0,0,0,2915,2913,1,0,0,0,2916,2929,3,10,5,
        0,2917,2926,5,139,0,0,2918,2923,3,474,237,0,2919,2920,5,142,0,0,
        2920,2922,3,474,237,0,2921,2919,1,0,0,0,2922,2925,1,0,0,0,2923,2921,
        1,0,0,0,2923,2924,1,0,0,0,2924,2927,1,0,0,0,2925,2923,1,0,0,0,2926,
        2918,1,0,0,0,2926,2927,1,0,0,0,2927,2928,1,0,0,0,2928,2930,5,140,
        0,0,2929,2917,1,0,0,0,2929,2930,1,0,0,0,2930,473,1,0,0,0,2931,2932,
        3,578,289,0,2932,2933,5,143,0,0,2933,2935,1,0,0,0,2934,2931,1,0,
        0,0,2934,2935,1,0,0,0,2935,2936,1,0,0,0,2936,2937,3,56,28,0,2937,
        475,1,0,0,0,2938,2941,3,30,15,0,2939,2941,3,46,23,0,2940,2938,1,
        0,0,0,2940,2939,1,0,0,0,2941,2946,1,0,0,0,2942,2945,3,436,218,0,
        2943,2945,5,158,0,0,2944,2942,1,0,0,0,2944,2943,1,0,0,0,2945,2948,
        1,0,0,0,2946,2944,1,0,0,0,2946,2947,1,0,0,0,2947,2949,1,0,0,0,2948,
        2946,1,0,0,0,2949,2950,5,147,0,0,2950,2954,1,0,0,0,2951,2952,5,116,
        0,0,2952,2954,5,147,0,0,2953,2940,1,0,0,0,2953,2951,1,0,0,0,2954,
        477,1,0,0,0,2955,2960,3,480,240,0,2956,2957,5,142,0,0,2957,2959,
        3,480,240,0,2958,2956,1,0,0,0,2959,2962,1,0,0,0,2960,2958,1,0,0,
        0,2960,2961,1,0,0,0,2961,479,1,0,0,0,2962,2960,1,0,0,0,2963,2964,
        3,578,289,0,2964,2965,5,155,0,0,2965,2966,3,482,241,0,2966,481,1,
        0,0,0,2967,2969,5,150,0,0,2968,2967,1,0,0,0,2968,2969,1,0,0,0,2969,
        2970,1,0,0,0,2970,2973,3,56,28,0,2971,2973,3,218,109,0,2972,2968,
        1,0,0,0,2972,2971,1,0,0,0,2973,483,1,0,0,0,2974,2975,3,578,289,0,
        2975,2976,5,137,0,0,2976,2977,3,56,28,0,2977,2978,5,138,0,0,2978,
        485,1,0,0,0,2979,2980,5,155,0,0,2980,2981,5,157,0,0,2981,2982,4,
        243,0,1,2982,487,1,0,0,0,2983,2984,5,157,0,0,2984,2985,5,157,0,0,
        2985,2986,4,244,1,1,2986,489,1,0,0,0,2987,2988,5,157,0,0,2988,2989,
        5,169,0,0,2989,2990,4,245,2,1,2990,491,1,0,0,0,2991,3002,3,496,248,
        0,2992,3002,3,498,249,0,2993,3002,5,134,0,0,2994,3002,3,494,247,
        0,2995,3002,5,125,0,0,2996,3002,5,126,0,0,2997,3002,5,127,0,0,2998,
        3002,5,128,0,0,2999,3002,5,129,0,0,3000,3002,5,72,0,0,3001,2991,
        1,0,0,0,3001,2992,1,0,0,0,3001,2993,1,0,0,0,3001,2994,1,0,0,0,3001,
        2995,1,0,0,0,3001,2996,1,0,0,0,3001,2997,1,0,0,0,3001,2998,1,0,0,
        0,3001,2999,1,0,0,0,3001,3000,1,0,0,0,3002,493,1,0,0,0,3003,3004,
        5,130,0,0,3004,3008,5,106,0,0,3005,3006,5,131,0,0,3006,3008,5,106,
        0,0,3007,3003,1,0,0,0,3007,3005,1,0,0,0,3008,495,1,0,0,0,3009,3010,
        7,15,0,0,3010,497,1,0,0,0,3011,3016,3,500,250,0,3012,3016,3,502,
        251,0,3013,3016,5,130,0,0,3014,3016,5,131,0,0,3015,3011,1,0,0,0,
        3015,3012,1,0,0,0,3015,3013,1,0,0,0,3015,3014,1,0,0,0,3016,499,1,
        0,0,0,3017,3021,5,132,0,0,3018,3020,3,504,252,0,3019,3018,1,0,0,
        0,3020,3023,1,0,0,0,3021,3019,1,0,0,0,3021,3022,1,0,0,0,3022,3024,
        1,0,0,0,3023,3021,1,0,0,0,3024,3025,5,186,0,0,3025,501,1,0,0,0,3026,
        3030,5,133,0,0,3027,3029,3,506,253,0,3028,3027,1,0,0,0,3029,3032,
        1,0,0,0,3030,3028,1,0,0,0,3030,3031,1,0,0,0,3031,3033,1,0,0,0,3032,
        3030,1,0,0,0,3033,3034,5,186,0,0,3034,503,1,0,0,0,3035,3046,3,508,
        254,0,3036,3046,5,182,0,0,3037,3046,5,184,0,0,3038,3046,5,187,0,
        0,3039,3046,5,183,0,0,3040,3046,5,189,0,0,3041,3046,5,186,0,0,3042,
        3046,5,188,0,0,3043,3046,5,135,0,0,3044,3046,5,136,0,0,3045,3035,
        1,0,0,0,3045,3036,1,0,0,0,3045,3037,1,0,0,0,3045,3038,1,0,0,0,3045,
        3039,1,0,0,0,3045,3040,1,0,0,0,3045,3041,1,0,0,0,3045,3042,1,0,0,
        0,3045,3043,1,0,0,0,3045,3044,1,0,0,0,3046,505,1,0,0,0,3047,3052,
        3,508,254,0,3048,3052,5,182,0,0,3049,3052,5,185,0,0,3050,3052,5,
        188,0,0,3051,3047,1,0,0,0,3051,3048,1,0,0,0,3051,3049,1,0,0,0,3051,
        3050,1,0,0,0,3052,507,1,0,0,0,3053,3054,5,183,0,0,3054,3057,3,56,
        28,0,3055,3056,5,142,0,0,3056,3058,3,510,255,0,3057,3055,1,0,0,0,
        3057,3058,1,0,0,0,3058,3060,1,0,0,0,3059,3061,3,512,256,0,3060,3059,
        1,0,0,0,3060,3061,1,0,0,0,3061,3062,1,0,0,0,3062,3063,5,189,0,0,
        3063,509,1,0,0,0,3064,3065,3,514,257,0,3065,511,1,0,0,0,3066,3068,
        5,143,0,0,3067,3069,5,190,0,0,3068,3067,1,0,0,0,3069,3070,1,0,0,
        0,3070,3068,1,0,0,0,3070,3071,1,0,0,0,3071,513,1,0,0,0,3072,3073,
        3,56,28,0,3073,515,1,0,0,0,3074,3075,7,16,0,0,3075,517,1,0,0,0,3076,
        3078,3,522,261,0,3077,3076,1,0,0,0,3078,3081,1,0,0,0,3079,3077,1,
        0,0,0,3079,3080,1,0,0,0,3080,3083,1,0,0,0,3081,3079,1,0,0,0,3082,
        3084,5,81,0,0,3083,3082,1,0,0,0,3083,3084,1,0,0,0,3084,3085,1,0,
        0,0,3085,3086,5,27,0,0,3086,3088,3,578,289,0,3087,3089,3,306,153,
        0,3088,3087,1,0,0,0,3088,3089,1,0,0,0,3089,3091,1,0,0,0,3090,3092,
        3,520,260,0,3091,3090,1,0,0,0,3091,3092,1,0,0,0,3092,3094,1,0,0,
        0,3093,3095,3,310,155,0,3094,3093,1,0,0,0,3094,3095,1,0,0,0,3095,
        3097,1,0,0,0,3096,3098,3,314,157,0,3097,3096,1,0,0,0,3097,3098,1,
        0,0,0,3098,3099,1,0,0,0,3099,3101,3,362,181,0,3100,3102,5,144,0,
        0,3101,3100,1,0,0,0,3101,3102,1,0,0,0,3102,519,1,0,0,0,3103,3105,
        5,139,0,0,3104,3106,3,392,196,0,3105,3104,1,0,0,0,3105,3106,1,0,
        0,0,3106,3107,1,0,0,0,3107,3108,5,140,0,0,3108,521,1,0,0,0,3109,
        3110,7,17,0,0,3110,523,1,0,0,0,3111,3113,3,526,263,0,3112,3111,1,
        0,0,0,3113,3116,1,0,0,0,3114,3112,1,0,0,0,3114,3115,1,0,0,0,3115,
        3118,1,0,0,0,3116,3114,1,0,0,0,3117,3119,5,87,0,0,3118,3117,1,0,
        0,0,3118,3119,1,0,0,0,3119,3121,1,0,0,0,3120,3122,5,81,0,0,3121,
        3120,1,0,0,0,3121,3122,1,0,0,0,3122,3126,1,0,0,0,3123,3127,5,122,
        0,0,3124,3125,5,85,0,0,3125,3127,5,122,0,0,3126,3123,1,0,0,0,3126,
        3124,1,0,0,0,3126,3127,1,0,0,0,3127,3128,1,0,0,0,3128,3129,5,99,
        0,0,3129,3131,3,578,289,0,3130,3132,3,306,153,0,3131,3130,1,0,0,
        0,3131,3132,1,0,0,0,3132,3134,1,0,0,0,3133,3135,3,428,214,0,3134,
        3133,1,0,0,0,3134,3135,1,0,0,0,3135,3137,1,0,0,0,3136,3138,3,314,
        157,0,3137,3136,1,0,0,0,3137,3138,1,0,0,0,3138,3139,1,0,0,0,3139,
        3140,3,430,215,0,3140,525,1,0,0,0,3141,3142,7,18,0,0,3142,527,1,
        0,0,0,3143,3144,5,59,0,0,3144,3146,3,578,289,0,3145,3147,3,440,220,
        0,3146,3145,1,0,0,0,3146,3147,1,0,0,0,3147,3149,1,0,0,0,3148,3150,
        3,446,223,0,3149,3148,1,0,0,0,3149,3150,1,0,0,0,3150,3152,1,0,0,
        0,3151,3153,3,314,157,0,3152,3151,1,0,0,0,3152,3153,1,0,0,0,3153,
        3154,1,0,0,0,3154,3156,3,362,181,0,3155,3157,5,144,0,0,3156,3155,
        1,0,0,0,3156,3157,1,0,0,0,3157,529,1,0,0,0,3158,3159,5,38,0,0,3159,
        3161,3,578,289,0,3160,3162,3,454,227,0,3161,3160,1,0,0,0,3161,3162,
        1,0,0,0,3162,3163,1,0,0,0,3163,3165,3,456,228,0,3164,3166,5,144,
        0,0,3165,3164,1,0,0,0,3165,3166,1,0,0,0,3166,531,1,0,0,0,3167,3168,
        5,32,0,0,3168,3169,3,386,193,0,3169,3171,3,578,289,0,3170,3172,3,
        440,220,0,3171,3170,1,0,0,0,3171,3172,1,0,0,0,3172,3173,1,0,0,0,
        3173,3175,5,139,0,0,3174,3176,3,392,196,0,3175,3174,1,0,0,0,3175,
        3176,1,0,0,0,3176,3177,1,0,0,0,3177,3179,5,140,0,0,3178,3180,3,314,
        157,0,3179,3178,1,0,0,0,3179,3180,1,0,0,0,3180,3181,1,0,0,0,3181,
        3182,5,144,0,0,3182,533,1,0,0,0,3183,3184,5,40,0,0,3184,3193,3,12,
        6,0,3185,3186,3,380,190,0,3186,3187,5,144,0,0,3187,3194,1,0,0,0,
        3188,3189,3,388,194,0,3189,3190,5,135,0,0,3190,3191,3,414,207,0,
        3191,3192,5,136,0,0,3192,3194,1,0,0,0,3193,3185,1,0,0,0,3193,3188,
        1,0,0,0,3194,535,1,0,0,0,3195,3196,3,380,190,0,3196,3197,5,144,0,
        0,3197,537,1,0,0,0,3198,3212,3,388,194,0,3199,3200,5,135,0,0,3200,
        3201,3,402,201,0,3201,3206,5,136,0,0,3202,3203,5,155,0,0,3203,3204,
        3,384,192,0,3204,3205,5,144,0,0,3205,3207,1,0,0,0,3206,3202,1,0,
        0,0,3206,3207,1,0,0,0,3207,3213,1,0,0,0,3208,3209,3,486,243,0,3209,
        3210,3,110,55,0,3210,3211,5,144,0,0,3211,3213,1,0,0,0,3212,3199,
        1,0,0,0,3212,3208,1,0,0,0,3213,539,1,0,0,0,3214,3215,5,28,0,0,3215,
        3216,3,12,6,0,3216,3217,3,376,188,0,3217,3218,5,144,0,0,3218,541,
        1,0,0,0,3219,3220,5,101,0,0,3220,3221,5,137,0,0,3221,3222,3,392,
        196,0,3222,3231,5,138,0,0,3223,3224,5,135,0,0,3224,3225,3,402,201,
        0,3225,3226,5,136,0,0,3226,3232,1,0,0,0,3227,3228,3,486,243,0,3228,
        3229,3,110,55,0,3229,3230,5,144,0,0,3230,3232,1,0,0,0,3231,3223,
        1,0,0,0,3231,3227,1,0,0,0,3232,543,1,0,0,0,3233,3234,5,154,0,0,3234,
        3235,3,578,289,0,3235,3236,5,139,0,0,3236,3237,5,140,0,0,3237,3238,
        3,426,213,0,3238,545,1,0,0,0,3239,3240,3,578,289,0,3240,3242,5,139,
        0,0,3241,3243,3,392,196,0,3242,3241,1,0,0,0,3242,3243,1,0,0,0,3243,
        3244,1,0,0,0,3244,3246,5,140,0,0,3245,3247,3,424,212,0,3246,3245,
        1,0,0,0,3246,3247,1,0,0,0,3247,3248,1,0,0,0,3248,3249,3,426,213,
        0,3249,547,1,0,0,0,3250,3252,3,464,232,0,3251,3250,1,0,0,0,3251,
        3252,1,0,0,0,3252,3253,1,0,0,0,3253,3255,3,558,279,0,3254,3256,5,
        84,0,0,3255,3254,1,0,0,0,3255,3256,1,0,0,0,3256,3257,1,0,0,0,3257,
        3258,3,386,193,0,3258,3259,3,550,275,0,3259,3260,3,390,195,0,3260,
        3271,1,0,0,0,3261,3263,3,464,232,0,3262,3261,1,0,0,0,3262,3263,1,
        0,0,0,3263,3264,1,0,0,0,3264,3265,3,554,277,0,3265,3266,3,552,276,
        0,3266,3267,3,556,278,0,3267,3268,3,550,275,0,3268,3269,3,562,281,
        0,3269,3271,1,0,0,0,3270,3251,1,0,0,0,3270,3262,1,0,0,0,3271,549,
        1,0,0,0,3272,3273,3,566,283,0,3273,3275,5,139,0,0,3274,3276,3,392,
        196,0,3275,3274,1,0,0,0,3275,3276,1,0,0,0,3276,3277,1,0,0,0,3277,
        3278,5,140,0,0,3278,3293,1,0,0,0,3279,3280,3,566,283,0,3280,3281,
        3,306,153,0,3281,3283,5,139,0,0,3282,3284,3,392,196,0,3283,3282,
        1,0,0,0,3283,3284,1,0,0,0,3284,3285,1,0,0,0,3285,3289,5,140,0,0,
        3286,3288,3,316,158,0,3287,3286,1,0,0,0,3288,3291,1,0,0,0,3289,3287,
        1,0,0,0,3289,3290,1,0,0,0,3290,3293,1,0,0,0,3291,3289,1,0,0,0,3292,
        3272,1,0,0,0,3292,3279,1,0,0,0,3293,551,1,0,0,0,3294,3298,5,87,0,
        0,3295,3296,5,87,0,0,3296,3298,5,85,0,0,3297,3294,1,0,0,0,3297,3295,
        1,0,0,0,3298,553,1,0,0,0,3299,3301,3,564,282,0,3300,3299,1,0,0,0,
        3301,3304,1,0,0,0,3302,3300,1,0,0,0,3302,3303,1,0,0,0,3303,555,1,
        0,0,0,3304,3302,1,0,0,0,3305,3306,3,12,6,0,3306,557,1,0,0,0,3307,
        3309,3,560,280,0,3308,3307,1,0,0,0,3309,3312,1,0,0,0,3310,3308,1,
        0,0,0,3310,3311,1,0,0,0,3311,3314,1,0,0,0,3312,3310,1,0,0,0,3313,
        3315,5,81,0,0,3314,3313,1,0,0,0,3314,3315,1,0,0,0,3315,559,1,0,0,
        0,3316,3319,3,564,282,0,3317,3319,5,16,0,0,3318,3316,1,0,0,0,3318,
        3317,1,0,0,0,3319,561,1,0,0,0,3320,3328,3,234,117,0,3321,3322,3,
        486,243,0,3322,3323,5,87,0,0,3323,3324,3,44,22,0,3324,3325,5,144,
        0,0,3325,3328,1,0,0,0,3326,3328,5,144,0,0,3327,3320,1,0,0,0,3327,
        3321,1,0,0,0,3327,3326,1,0,0,0,3328,563,1,0,0,0,3329,3330,7,19,0,
        0,3330,565,1,0,0,0,3331,3337,3,578,289,0,3332,3333,3,578,289,0,3333,
        3334,5,159,0,0,3334,3335,3,578,289,0,3335,3337,1,0,0,0,3336,3331,
        1,0,0,0,3336,3332,1,0,0,0,3337,3345,1,0,0,0,3338,3340,3,48,24,0,
        3339,3338,1,0,0,0,3339,3340,1,0,0,0,3340,3341,1,0,0,0,3341,3342,
        5,141,0,0,3342,3344,3,578,289,0,3343,3339,1,0,0,0,3344,3347,1,0,
        0,0,3345,3343,1,0,0,0,3345,3346,1,0,0,0,3346,567,1,0,0,0,3347,3345,
        1,0,0,0,3348,3349,5,76,0,0,3349,3350,3,420,210,0,3350,3352,5,139,
        0,0,3351,3353,5,57,0,0,3352,3351,1,0,0,0,3352,3353,1,0,0,0,3353,
        3354,1,0,0,0,3354,3360,3,570,285,0,3355,3357,5,142,0,0,3356,3358,
        5,57,0,0,3357,3356,1,0,0,0,3357,3358,1,0,0,0,3358,3359,1,0,0,0,3359,
        3361,3,570,285,0,3360,3355,1,0,0,0,3360,3361,1,0,0,0,3361,3362,1,
        0,0,0,3362,3368,5,140,0,0,3363,3369,3,426,213,0,3364,3365,3,486,
        243,0,3365,3366,3,110,55,0,3366,3367,5,144,0,0,3367,3369,1,0,0,0,
        3368,3363,1,0,0,0,3368,3364,1,0,0,0,3369,569,1,0,0,0,3370,3371,3,
        12,6,0,3371,3374,3,578,289,0,3372,3373,5,155,0,0,3373,3375,3,56,
        28,0,3374,3372,1,0,0,0,3374,3375,1,0,0,0,3375,571,1,0,0,0,3376,3378,
        3,106,53,0,3377,3376,1,0,0,0,3377,3378,1,0,0,0,3378,3379,1,0,0,0,
        3379,3381,5,139,0,0,3380,3382,3,50,25,0,3381,3380,1,0,0,0,3381,3382,
        1,0,0,0,3382,3383,1,0,0,0,3383,3384,5,140,0,0,3384,573,1,0,0,0,3385,
        3387,5,139,0,0,3386,3388,3,50,25,0,3387,3386,1,0,0,0,3387,3388,1,
        0,0,0,3388,3389,1,0,0,0,3389,3391,5,140,0,0,3390,3392,3,124,62,0,
        3391,3390,1,0,0,0,3391,3392,1,0,0,0,3392,3408,1,0,0,0,3393,3408,
        3,124,62,0,3394,3408,3,576,288,0,3395,3396,5,137,0,0,3396,3397,3,
        122,61,0,3397,3401,5,138,0,0,3398,3400,3,436,218,0,3399,3398,1,0,
        0,0,3400,3403,1,0,0,0,3401,3399,1,0,0,0,3401,3402,1,0,0,0,3402,3405,
        1,0,0,0,3403,3401,1,0,0,0,3404,3406,3,438,219,0,3405,3404,1,0,0,
        0,3405,3406,1,0,0,0,3406,3408,1,0,0,0,3407,3385,1,0,0,0,3407,3393,
        1,0,0,0,3407,3394,1,0,0,0,3407,3395,1,0,0,0,3408,575,1,0,0,0,3409,
        3411,5,139,0,0,3410,3412,3,50,25,0,3411,3410,1,0,0,0,3411,3412,1,
        0,0,0,3412,3413,1,0,0,0,3413,3415,5,140,0,0,3414,3416,3,124,62,0,
        3415,3414,1,0,0,0,3415,3416,1,0,0,0,3416,577,1,0,0,0,3417,3418,7,
        20,0,0,3418,579,1,0,0,0,430,581,586,597,601,603,608,628,632,635,
        640,644,651,653,658,661,668,671,674,681,694,702,710,715,718,728,
        734,736,739,745,750,758,773,781,791,795,798,803,806,818,823,833,
        846,863,869,871,878,886,894,902,910,918,930,932,938,943,951,959,
        967,969,972,979,984,991,995,997,1021,1030,1039,1045,1049,1054,1058,
        1066,1069,1074,1078,1082,1089,1094,1108,1114,1126,1130,1135,1139,
        1145,1155,1164,1182,1185,1190,1193,1208,1214,1218,1224,1229,1232,
        1240,1248,1259,1264,1269,1271,1280,1288,1296,1304,1308,1318,1323,
        1325,1334,1341,1348,1352,1357,1359,1364,1368,1375,1383,1385,1389,
        1392,1395,1403,1413,1416,1419,1436,1443,1447,1454,1457,1462,1469,
        1474,1481,1490,1495,1502,1514,1525,1533,1538,1547,1556,1565,1571,
        1576,1580,1584,1588,1592,1596,1603,1623,1645,1649,1653,1658,1665,
        1681,1686,1691,1702,1720,1736,1746,1750,1754,1765,1769,1787,1806,
        1810,1814,1822,1830,1844,1851,1871,1876,1879,1886,1895,1902,1909,
        1915,1923,1931,1934,1941,1948,1952,1955,1961,1965,1971,1985,1991,
        1998,2003,2006,2009,2013,2018,2028,2031,2038,2043,2050,2057,2062,
        2068,2071,2074,2082,2086,2090,2093,2096,2100,2111,2116,2120,2127,
        2131,2140,2148,2154,2164,2172,2178,2189,2193,2195,2200,2204,2217,
        2221,2224,2235,2239,2242,2245,2248,2256,2273,2302,2305,2319,2328,
        2335,2338,2341,2345,2350,2363,2373,2380,2383,2395,2402,2414,2420,
        2424,2428,2438,2444,2446,2453,2457,2460,2464,2476,2479,2486,2489,
        2494,2499,2504,2509,2511,2514,2520,2523,2529,2532,2550,2558,2561,
        2571,2574,2580,2607,2620,2630,2639,2644,2647,2650,2658,2666,2672,
        2678,2684,2695,2699,2701,2711,2717,2720,2733,2739,2742,2745,2752,
        2757,2761,2765,2782,2785,2790,2794,2798,2807,2810,2815,2819,2824,
        2828,2830,2841,2845,2847,2852,2857,2864,2870,2875,2881,2885,2899,
        2902,2906,2913,2923,2926,2929,2934,2940,2944,2946,2953,2960,2968,
        2972,3001,3007,3015,3021,3030,3045,3051,3057,3060,3070,3079,3083,
        3088,3091,3094,3097,3101,3105,3114,3118,3121,3126,3131,3134,3137,
        3146,3149,3152,3156,3161,3165,3171,3175,3179,3193,3206,3212,3231,
        3242,3246,3251,3255,3262,3270,3275,3283,3289,3292,3297,3302,3310,
        3314,3318,3327,3336,3339,3345,3352,3357,3360,3368,3374,3377,3381,
        3387,3391,3401,3405,3407,3411,3415
    ]

class CSharpParser ( CSharpParserBase ):

    grammarFileName = "CSharpParser.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "'\\u00EF\\u00BB\\u00BF'", "<INVALID>", 
                     "'/***/'", "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "'#'", "'abstract'", "'add'", "'and'", "'alias'", "'__arglist'", 
                     "'as'", "'ascending'", "'async'", "'await'", "'base'", 
                     "'bool'", "'break'", "'by'", "'byte'", "'case'", "'catch'", 
                     "'char'", "'checked'", "'class'", "'const'", "'continue'", 
                     "'decimal'", "'default'", "'delegate'", "'descending'", 
                     "'do'", "'double'", "'dynamic'", "'else'", "'enum'", 
                     "'equals'", "'event'", "'explicit'", "'extern'", "'false'", 
                     "'finally'", "'fixed'", "'float'", "'file'", "'for'", 
                     "'foreach'", "'from'", "'get'", "'goto'", "'global'", 
                     "'group'", "'if'", "'implicit'", "'in'", "'int'", "'interface'", 
                     "'internal'", "'init'", "'into'", "'is'", "'join'", 
                     "'let'", "'lock'", "'long'", "'nameof'", "'namespace'", 
                     "'new'", "'not'", "'null'", "'object'", "'on'", "'or'", 
                     "'operator'", "'orderby'", "'out'", "'override'", "'params'", 
                     "'partial'", "'private'", "'protected'", "'public'", 
                     "'readonly'", "'required'", "'ref'", "'remove'", "'return'", 
                     "'sbyte'", "'sealed'", "'select'", "'set'", "'short'", 
                     "'sizeof'", "'stackalloc'", "'static'", "'string'", 
                     "'struct'", "'switch'", "'this'", "'throw'", "'true'", 
                     "'try'", "'typeof'", "'u8'", "'uint'", "'ulong'", "'unchecked'", 
                     "'unmanaged'", "'unsafe'", "'ushort'", "'using'", "'var'", 
                     "'virtual'", "'void'", "'volatile'", "'when'", "'where'", 
                     "'while'", "'yield'", "'record'", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "'}'", "'['", 
                     "']'", "'('", "')'", "'.'", "','", "':'", "';'", "'+'", 
                     "'-'", "'*'", "'/'", "'%'", "'&'", "'|'", "'^'", "'!'", 
                     "'~'", "'='", "'<'", "'>'", "'?'", "'::'", "'??'", 
                     "'++'", "'--'", "'&&'", "'||'", "'->'", "'=='", "'!='", 
                     "'<='", "'>='", "'+='", "'-='", "'*='", "'/='", "'%='", 
                     "'&='", "'|='", "'^='", "'<<'", "'<<='", "'??='", "'..'", 
                     "'{{'", "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "'define'", "'undef'", "'elif'", 
                     "'endif'", "'line'", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "'hidden'", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "'}}'" ]

    symbolicNames = [ "<INVALID>", "BYTE_ORDER_MARK", "SINGLE_LINE_DOC_COMMENT", 
                      "EMPTY_DELIMITED_DOC_COMMENT", "DELIMITED_DOC_COMMENT", 
                      "SINGLE_LINE_COMMENT", "DELIMITED_COMMENT", "WHITESPACES", 
                      "SHARP", "ABSTRACT", "ADD", "AND", "ALIAS", "ARGLIST", 
                      "AS", "ASCENDING", "ASYNC", "AWAIT", "BASE", "BOOL", 
                      "BREAK", "BY", "BYTE", "CASE", "CATCH", "CHAR", "CHECKED", 
                      "CLASS", "CONST", "CONTINUE", "DECIMAL", "DEFAULT", 
                      "DELEGATE", "DESCENDING", "DO", "DOUBLE", "DYNAMIC", 
                      "ELSE", "ENUM", "EQUALS", "EVENT", "EXPLICIT", "EXTERN", 
                      "FALSE", "FINALLY", "FIXED", "FLOAT", "FILE", "FOR", 
                      "FOREACH", "FROM", "GET", "GOTO", "GLOBAL", "GROUP", 
                      "IF", "IMPLICIT", "IN", "INT", "INTERFACE", "INTERNAL", 
                      "INIT", "INTO", "IS", "JOIN", "LET", "LOCK", "LONG", 
                      "NAMEOF", "NAMESPACE", "NEW", "NOT", "NULL_", "OBJECT", 
                      "ON", "OR", "OPERATOR", "ORDERBY", "OUT", "OVERRIDE", 
                      "PARAMS", "PARTIAL", "PRIVATE", "PROTECTED", "PUBLIC", 
                      "READONLY", "REQUIRED", "REF", "REMOVE", "RETURN", 
                      "SBYTE", "SEALED", "SELECT", "SET", "SHORT", "SIZEOF", 
                      "STACKALLOC", "STATIC", "STRING", "STRUCT", "SWITCH", 
                      "THIS", "THROW", "TRUE", "TRY", "TYPEOF", "UTF8_SUFFIX", 
                      "UINT", "ULONG", "UNCHECKED", "UNMANAGED", "UNSAFE", 
                      "USHORT", "USING", "VAR", "VIRTUAL", "VOID", "VOLATILE", 
                      "WHEN", "WHERE", "WHILE", "YIELD", "RECORD", "IDENTIFIER", 
                      "LITERAL_ACCESS", "INTEGER_LITERAL", "HEX_INTEGER_LITERAL", 
                      "BIN_INTEGER_LITERAL", "REAL_LITERAL", "CHARACTER_LITERAL", 
                      "REGULAR_STRING", "VERBATIUM_STRING", "INTERPOLATED_REGULAR_STRING_START", 
                      "INTERPOLATED_VERBATIUM_STRING_START", "RAW_STRING_LITERAL", 
                      "OPEN_BRACE", "CLOSE_BRACE", "OPEN_BRACKET", "CLOSE_BRACKET", 
                      "OPEN_PARENS", "CLOSE_PARENS", "DOT", "COMMA", "COLON", 
                      "SEMICOLON", "PLUS", "MINUS", "STAR", "DIV", "PERCENT", 
                      "AMP", "BITWISE_OR", "CARET", "BANG", "TILDE", "ASSIGNMENT", 
                      "LT", "GT", "INTERR", "DOUBLE_COLON", "OP_COALESCING", 
                      "OP_INC", "OP_DEC", "OP_AND", "OP_OR", "OP_PTR", "OP_EQ", 
                      "OP_NE", "OP_LE", "OP_GE", "OP_ADD_ASSIGNMENT", "OP_SUB_ASSIGNMENT", 
                      "OP_MULT_ASSIGNMENT", "OP_DIV_ASSIGNMENT", "OP_MOD_ASSIGNMENT", 
                      "OP_AND_ASSIGNMENT", "OP_OR_ASSIGNMENT", "OP_XOR_ASSIGNMENT", 
                      "OP_LEFT_SHIFT", "OP_LEFT_SHIFT_ASSIGNMENT", "OP_COALESCING_ASSIGNMENT", 
                      "OP_RANGE", "DOUBLE_CURLY_INSIDE", "OPEN_BRACE_INSIDE", 
                      "REGULAR_CHAR_INSIDE", "VERBATIUM_DOUBLE_QUOTE_INSIDE", 
                      "DOUBLE_QUOTE_INSIDE", "REGULAR_STRING_INSIDE", "VERBATIUM_INSIDE_STRING", 
                      "CLOSE_BRACE_INSIDE", "FORMAT_STRING", "DIRECTIVE_WHITESPACES", 
                      "DIGITS", "DEFINE", "UNDEF", "ELIF", "ENDIF", "LINE", 
                      "ERROR", "WARNING", "REGION", "ENDREGION", "PRAGMA", 
                      "NULLABLE", "DIRECTIVE_HIDDEN", "CONDITIONAL_SYMBOL", 
                      "DIRECTIVE_NEW_LINE", "TEXT", "DOUBLE_CURLY_CLOSE_INSIDE" ]

    RULE_compilation_unit = 0
    RULE_compilation_unit_element = 1
    RULE_top_level_statements = 2
    RULE_global_using_directives = 3
    RULE_global_using_directive = 4
    RULE_namespace_or_type_name = 5
    RULE_type_ = 6
    RULE_function_pointer_type = 7
    RULE_function_pointer_parameter_list = 8
    RULE_base_type = 9
    RULE_tuple_type = 10
    RULE_deconstruction_expression = 11
    RULE_deconstruction_tuple = 12
    RULE_deconstruction_element = 13
    RULE_tuple_element = 14
    RULE_simple_type = 15
    RULE_numeric_type = 16
    RULE_integral_type = 17
    RULE_floating_point_type = 18
    RULE_default_value_expression = 19
    RULE_explictly_typed_default = 20
    RULE_default_literal = 21
    RULE_variable_reference = 22
    RULE_class_type = 23
    RULE_type_argument_list = 24
    RULE_argument_list = 25
    RULE_argument = 26
    RULE_argument_name = 27
    RULE_expression = 28
    RULE_non_assignment_expression = 29
    RULE_assignment = 30
    RULE_assignment_operator = 31
    RULE_conditional_expression = 32
    RULE_null_coalescing_expression = 33
    RULE_conditional_or_expression = 34
    RULE_conditional_and_expression = 35
    RULE_inclusive_or_expression = 36
    RULE_exclusive_or_expression = 37
    RULE_and_expression = 38
    RULE_equality_expression = 39
    RULE_relational_expression = 40
    RULE_shift_expression = 41
    RULE_additive_expression = 42
    RULE_multiplicative_expression = 43
    RULE_switch_expression = 44
    RULE_switch_expression_arms = 45
    RULE_switch_expression_arm = 46
    RULE_range_expression = 47
    RULE_unary_expression = 48
    RULE_cast_expression = 49
    RULE_collection_expression = 50
    RULE_collection_element_list = 51
    RULE_collection_element = 52
    RULE_primary_expression = 53
    RULE_primary_expression_start = 54
    RULE_throwable_expression = 55
    RULE_throw_expression = 56
    RULE_member_access = 57
    RULE_bracket_expression = 58
    RULE_indexer_argument = 59
    RULE_predefined_type = 60
    RULE_expression_list = 61
    RULE_object_or_collection_initializer = 62
    RULE_object_initializer = 63
    RULE_member_initializer_list = 64
    RULE_member_initializer = 65
    RULE_initializer_value = 66
    RULE_collection_initializer = 67
    RULE_element_initializer = 68
    RULE_anonymous_object_initializer = 69
    RULE_member_declarator_list = 70
    RULE_member_declarator = 71
    RULE_unbound_type_name = 72
    RULE_generic_dimension_specifier = 73
    RULE_isType = 74
    RULE_isTypePatternArms = 75
    RULE_isTypePatternArm = 76
    RULE_lambda_expression = 77
    RULE_anonymous_function_signature = 78
    RULE_explicit_anonymous_function_parameter_list = 79
    RULE_explicit_anonymous_function_parameter = 80
    RULE_implicit_anonymous_function_parameter_list = 81
    RULE_anonymous_function_body = 82
    RULE_query_expression = 83
    RULE_from_clause = 84
    RULE_query_body = 85
    RULE_query_body_clause = 86
    RULE_let_clause = 87
    RULE_where_clause = 88
    RULE_combined_join_clause = 89
    RULE_orderby_clause = 90
    RULE_ordering = 91
    RULE_select_or_group_clause = 92
    RULE_query_continuation = 93
    RULE_statement = 94
    RULE_declarationStatement = 95
    RULE_local_function_declaration = 96
    RULE_local_function_header = 97
    RULE_local_function_modifiers = 98
    RULE_local_function_body = 99
    RULE_labeled_Statement = 100
    RULE_embedded_statement = 101
    RULE_empty_statement = 102
    RULE_if_statement = 103
    RULE_checked_statement = 104
    RULE_unchecked_statement = 105
    RULE_lock_statement = 106
    RULE_unmanaged_type = 107
    RULE_stackalloc_expression = 108
    RULE_stackalloc_initializer = 109
    RULE_stackalloc_initializer_element_list = 110
    RULE_stackalloc_element_initializer = 111
    RULE_using_statement = 112
    RULE_yield_statement = 113
    RULE_fixed_statement = 114
    RULE_unsafe_statement = 115
    RULE_try_statement = 116
    RULE_block = 117
    RULE_local_variable_declaration = 118
    RULE_unsafe_function_pointer = 119
    RULE_delegate_function_pointer = 120
    RULE_local_variable_type = 121
    RULE_local_variable_declarator = 122
    RULE_local_variable_initializer = 123
    RULE_local_constant_declaration = 124
    RULE_switch_section = 125
    RULE_switch_label = 126
    RULE_case_guard = 127
    RULE_statement_list = 128
    RULE_for_initializer = 129
    RULE_for_iterator = 130
    RULE_catch_clauses = 131
    RULE_specific_catch_clause = 132
    RULE_general_catch_clause = 133
    RULE_exception_filter = 134
    RULE_finally_clause = 135
    RULE_resource_acquisition = 136
    RULE_namespace_declaration = 137
    RULE_qualified_identifier = 138
    RULE_namespace_body = 139
    RULE_extern_alias_directives = 140
    RULE_extern_alias_directive = 141
    RULE_using_directives = 142
    RULE_using_directive = 143
    RULE_namespace_member_declarations = 144
    RULE_namespace_member_declaration = 145
    RULE_type_declaration = 146
    RULE_record_definition = 147
    RULE_record_base = 148
    RULE_record_body = 149
    RULE_record_parameters = 150
    RULE_record_parameter = 151
    RULE_qualified_alias_member = 152
    RULE_type_parameter_list = 153
    RULE_type_parameter = 154
    RULE_class_base = 155
    RULE_interface_type_list = 156
    RULE_type_parameter_constraints_clauses = 157
    RULE_type_parameter_constraints_clause = 158
    RULE_type_parameter_constraints = 159
    RULE_primary_constraint = 160
    RULE_pattern = 161
    RULE_rest_pattern = 162
    RULE_list_pattern = 163
    RULE_pattern_items = 164
    RULE_is_pattern = 165
    RULE_property_pattern = 166
    RULE_property_pattern_clause = 167
    RULE_relational_pattern = 168
    RULE_and_pattern = 169
    RULE_or_pattern = 170
    RULE_not_pattern = 171
    RULE_declaration_pattern = 172
    RULE_simple_designation = 173
    RULE_single_variable_designation = 174
    RULE_constant_pattern = 175
    RULE_var_pattern = 176
    RULE_designation = 177
    RULE_module_initializer_declaration = 178
    RULE_secondary_constraints = 179
    RULE_constructor_constraint = 180
    RULE_class_body = 181
    RULE_class_member_declarations = 182
    RULE_class_member_declaration = 183
    RULE_all_member_modifiers = 184
    RULE_all_member_modifier = 185
    RULE_common_member_declaration = 186
    RULE_typed_member_declaration = 187
    RULE_constant_declarators = 188
    RULE_constant_declarator = 189
    RULE_variable_declarators = 190
    RULE_variable_declarator = 191
    RULE_variable_initializer = 192
    RULE_return_type = 193
    RULE_member_name = 194
    RULE_method_body = 195
    RULE_formal_parameter_list = 196
    RULE_fixed_parameters = 197
    RULE_fixed_parameter = 198
    RULE_parameter_modifier = 199
    RULE_parameter_array = 200
    RULE_accessor_declarations = 201
    RULE_init_accessor_declaration = 202
    RULE_get_accessor_declaration = 203
    RULE_set_accessor_declaration = 204
    RULE_accessor_modifier = 205
    RULE_accessor_body = 206
    RULE_event_accessor_declarations = 207
    RULE_add_accessor_declaration = 208
    RULE_remove_accessor_declaration = 209
    RULE_overloadable_operator = 210
    RULE_conversion_operator_declarator = 211
    RULE_constructor_initializer = 212
    RULE_body = 213
    RULE_struct_interfaces = 214
    RULE_struct_body = 215
    RULE_struct_member_declaration = 216
    RULE_array_type = 217
    RULE_rank_specifier = 218
    RULE_array_initializer = 219
    RULE_variant_type_parameter_list = 220
    RULE_variant_type_parameter = 221
    RULE_variance_annotation = 222
    RULE_interface_base = 223
    RULE_interface_body = 224
    RULE_interface_member_declaration = 225
    RULE_interface_accessors = 226
    RULE_enum_base = 227
    RULE_enum_body = 228
    RULE_enum_member_declaration = 229
    RULE_global_attribute_section = 230
    RULE_global_attribute_target = 231
    RULE_attributes = 232
    RULE_attribute_section = 233
    RULE_attribute_target = 234
    RULE_attribute_list = 235
    RULE_attribute = 236
    RULE_attribute_argument = 237
    RULE_pointer_type = 238
    RULE_fixed_pointer_declarators = 239
    RULE_fixed_pointer_declarator = 240
    RULE_fixed_pointer_initializer = 241
    RULE_fixed_size_buffer_declarator = 242
    RULE_right_arrow = 243
    RULE_right_shift = 244
    RULE_right_shift_assignment = 245
    RULE_literal = 246
    RULE_utf8_string_literal = 247
    RULE_boolean_literal = 248
    RULE_string_literal = 249
    RULE_interpolated_regular_string = 250
    RULE_interpolated_verbatium_string = 251
    RULE_interpolated_regular_string_part = 252
    RULE_interpolated_verbatium_string_part = 253
    RULE_interpolated_string_expression = 254
    RULE_interpolation_minimum_width = 255
    RULE_format_string = 256
    RULE_constant_expression = 257
    RULE_keyword = 258
    RULE_class_definition = 259
    RULE_primary_constructor_parameters = 260
    RULE_class_modifier = 261
    RULE_struct_definition = 262
    RULE_struct_modifier = 263
    RULE_interface_definition = 264
    RULE_enum_definition = 265
    RULE_delegate_definition = 266
    RULE_event_declaration = 267
    RULE_field_declaration = 268
    RULE_property_declaration = 269
    RULE_constant_declaration = 270
    RULE_indexer_declaration = 271
    RULE_destructor_definition = 272
    RULE_constructor_declaration = 273
    RULE_method_declaration = 274
    RULE_method_header = 275
    RULE_ref_kind = 276
    RULE_ref_method_modifiers = 277
    RULE_ref_return_type = 278
    RULE_method_modifiers = 279
    RULE_method_modifier = 280
    RULE_ref_method_body = 281
    RULE_ref_method_modifier = 282
    RULE_method_member_name = 283
    RULE_operator_declaration = 284
    RULE_arg_declaration = 285
    RULE_method_invocation = 286
    RULE_object_creation_expression = 287
    RULE_target_typed_new = 288
    RULE_identifier = 289

    ruleNames =  [ "compilation_unit", "compilation_unit_element", "top_level_statements", 
                   "global_using_directives", "global_using_directive", 
                   "namespace_or_type_name", "type_", "function_pointer_type", 
                   "function_pointer_parameter_list", "base_type", "tuple_type", 
                   "deconstruction_expression", "deconstruction_tuple", 
                   "deconstruction_element", "tuple_element", "simple_type", 
                   "numeric_type", "integral_type", "floating_point_type", 
                   "default_value_expression", "explictly_typed_default", 
                   "default_literal", "variable_reference", "class_type", 
                   "type_argument_list", "argument_list", "argument", "argument_name", 
                   "expression", "non_assignment_expression", "assignment", 
                   "assignment_operator", "conditional_expression", "null_coalescing_expression", 
                   "conditional_or_expression", "conditional_and_expression", 
                   "inclusive_or_expression", "exclusive_or_expression", 
                   "and_expression", "equality_expression", "relational_expression", 
                   "shift_expression", "additive_expression", "multiplicative_expression", 
                   "switch_expression", "switch_expression_arms", "switch_expression_arm", 
                   "range_expression", "unary_expression", "cast_expression", 
                   "collection_expression", "collection_element_list", "collection_element", 
                   "primary_expression", "primary_expression_start", "throwable_expression", 
                   "throw_expression", "member_access", "bracket_expression", 
                   "indexer_argument", "predefined_type", "expression_list", 
                   "object_or_collection_initializer", "object_initializer", 
                   "member_initializer_list", "member_initializer", "initializer_value", 
                   "collection_initializer", "element_initializer", "anonymous_object_initializer", 
                   "member_declarator_list", "member_declarator", "unbound_type_name", 
                   "generic_dimension_specifier", "isType", "isTypePatternArms", 
                   "isTypePatternArm", "lambda_expression", "anonymous_function_signature", 
                   "explicit_anonymous_function_parameter_list", "explicit_anonymous_function_parameter", 
                   "implicit_anonymous_function_parameter_list", "anonymous_function_body", 
                   "query_expression", "from_clause", "query_body", "query_body_clause", 
                   "let_clause", "where_clause", "combined_join_clause", 
                   "orderby_clause", "ordering", "select_or_group_clause", 
                   "query_continuation", "statement", "declarationStatement", 
                   "local_function_declaration", "local_function_header", 
                   "local_function_modifiers", "local_function_body", "labeled_Statement", 
                   "embedded_statement", "empty_statement", "if_statement", 
                   "checked_statement", "unchecked_statement", "lock_statement", 
                   "unmanaged_type", "stackalloc_expression", "stackalloc_initializer", 
                   "stackalloc_initializer_element_list", "stackalloc_element_initializer", 
                   "using_statement", "yield_statement", "fixed_statement", 
                   "unsafe_statement", "try_statement", "block", "local_variable_declaration", 
                   "unsafe_function_pointer", "delegate_function_pointer", 
                   "local_variable_type", "local_variable_declarator", "local_variable_initializer", 
                   "local_constant_declaration", "switch_section", "switch_label", 
                   "case_guard", "statement_list", "for_initializer", "for_iterator", 
                   "catch_clauses", "specific_catch_clause", "general_catch_clause", 
                   "exception_filter", "finally_clause", "resource_acquisition", 
                   "namespace_declaration", "qualified_identifier", "namespace_body", 
                   "extern_alias_directives", "extern_alias_directive", 
                   "using_directives", "using_directive", "namespace_member_declarations", 
                   "namespace_member_declaration", "type_declaration", "record_definition", 
                   "record_base", "record_body", "record_parameters", "record_parameter", 
                   "qualified_alias_member", "type_parameter_list", "type_parameter", 
                   "class_base", "interface_type_list", "type_parameter_constraints_clauses", 
                   "type_parameter_constraints_clause", "type_parameter_constraints", 
                   "primary_constraint", "pattern", "rest_pattern", "list_pattern", 
                   "pattern_items", "is_pattern", "property_pattern", "property_pattern_clause", 
                   "relational_pattern", "and_pattern", "or_pattern", "not_pattern", 
                   "declaration_pattern", "simple_designation", "single_variable_designation", 
                   "constant_pattern", "var_pattern", "designation", "module_initializer_declaration", 
                   "secondary_constraints", "constructor_constraint", "class_body", 
                   "class_member_declarations", "class_member_declaration", 
                   "all_member_modifiers", "all_member_modifier", "common_member_declaration", 
                   "typed_member_declaration", "constant_declarators", "constant_declarator", 
                   "variable_declarators", "variable_declarator", "variable_initializer", 
                   "return_type", "member_name", "method_body", "formal_parameter_list", 
                   "fixed_parameters", "fixed_parameter", "parameter_modifier", 
                   "parameter_array", "accessor_declarations", "init_accessor_declaration", 
                   "get_accessor_declaration", "set_accessor_declaration", 
                   "accessor_modifier", "accessor_body", "event_accessor_declarations", 
                   "add_accessor_declaration", "remove_accessor_declaration", 
                   "overloadable_operator", "conversion_operator_declarator", 
                   "constructor_initializer", "body", "struct_interfaces", 
                   "struct_body", "struct_member_declaration", "array_type", 
                   "rank_specifier", "array_initializer", "variant_type_parameter_list", 
                   "variant_type_parameter", "variance_annotation", "interface_base", 
                   "interface_body", "interface_member_declaration", "interface_accessors", 
                   "enum_base", "enum_body", "enum_member_declaration", 
                   "global_attribute_section", "global_attribute_target", 
                   "attributes", "attribute_section", "attribute_target", 
                   "attribute_list", "attribute", "attribute_argument", 
                   "pointer_type", "fixed_pointer_declarators", "fixed_pointer_declarator", 
                   "fixed_pointer_initializer", "fixed_size_buffer_declarator", 
                   "right_arrow", "right_shift", "right_shift_assignment", 
                   "literal", "utf8_string_literal", "boolean_literal", 
                   "string_literal", "interpolated_regular_string", "interpolated_verbatium_string", 
                   "interpolated_regular_string_part", "interpolated_verbatium_string_part", 
                   "interpolated_string_expression", "interpolation_minimum_width", 
                   "format_string", "constant_expression", "keyword", "class_definition", 
                   "primary_constructor_parameters", "class_modifier", "struct_definition", 
                   "struct_modifier", "interface_definition", "enum_definition", 
                   "delegate_definition", "event_declaration", "field_declaration", 
                   "property_declaration", "constant_declaration", "indexer_declaration", 
                   "destructor_definition", "constructor_declaration", "method_declaration", 
                   "method_header", "ref_kind", "ref_method_modifiers", 
                   "ref_return_type", "method_modifiers", "method_modifier", 
                   "ref_method_body", "ref_method_modifier", "method_member_name", 
                   "operator_declaration", "arg_declaration", "method_invocation", 
                   "object_creation_expression", "target_typed_new", "identifier" ]

    EOF = Token.EOF
    BYTE_ORDER_MARK=1
    SINGLE_LINE_DOC_COMMENT=2
    EMPTY_DELIMITED_DOC_COMMENT=3
    DELIMITED_DOC_COMMENT=4
    SINGLE_LINE_COMMENT=5
    DELIMITED_COMMENT=6
    WHITESPACES=7
    SHARP=8
    ABSTRACT=9
    ADD=10
    AND=11
    ALIAS=12
    ARGLIST=13
    AS=14
    ASCENDING=15
    ASYNC=16
    AWAIT=17
    BASE=18
    BOOL=19
    BREAK=20
    BY=21
    BYTE=22
    CASE=23
    CATCH=24
    CHAR=25
    CHECKED=26
    CLASS=27
    CONST=28
    CONTINUE=29
    DECIMAL=30
    DEFAULT=31
    DELEGATE=32
    DESCENDING=33
    DO=34
    DOUBLE=35
    DYNAMIC=36
    ELSE=37
    ENUM=38
    EQUALS=39
    EVENT=40
    EXPLICIT=41
    EXTERN=42
    FALSE=43
    FINALLY=44
    FIXED=45
    FLOAT=46
    FILE=47
    FOR=48
    FOREACH=49
    FROM=50
    GET=51
    GOTO=52
    GLOBAL=53
    GROUP=54
    IF=55
    IMPLICIT=56
    IN=57
    INT=58
    INTERFACE=59
    INTERNAL=60
    INIT=61
    INTO=62
    IS=63
    JOIN=64
    LET=65
    LOCK=66
    LONG=67
    NAMEOF=68
    NAMESPACE=69
    NEW=70
    NOT=71
    NULL_=72
    OBJECT=73
    ON=74
    OR=75
    OPERATOR=76
    ORDERBY=77
    OUT=78
    OVERRIDE=79
    PARAMS=80
    PARTIAL=81
    PRIVATE=82
    PROTECTED=83
    PUBLIC=84
    READONLY=85
    REQUIRED=86
    REF=87
    REMOVE=88
    RETURN=89
    SBYTE=90
    SEALED=91
    SELECT=92
    SET=93
    SHORT=94
    SIZEOF=95
    STACKALLOC=96
    STATIC=97
    STRING=98
    STRUCT=99
    SWITCH=100
    THIS=101
    THROW=102
    TRUE=103
    TRY=104
    TYPEOF=105
    UTF8_SUFFIX=106
    UINT=107
    ULONG=108
    UNCHECKED=109
    UNMANAGED=110
    UNSAFE=111
    USHORT=112
    USING=113
    VAR=114
    VIRTUAL=115
    VOID=116
    VOLATILE=117
    WHEN=118
    WHERE=119
    WHILE=120
    YIELD=121
    RECORD=122
    IDENTIFIER=123
    LITERAL_ACCESS=124
    INTEGER_LITERAL=125
    HEX_INTEGER_LITERAL=126
    BIN_INTEGER_LITERAL=127
    REAL_LITERAL=128
    CHARACTER_LITERAL=129
    REGULAR_STRING=130
    VERBATIUM_STRING=131
    INTERPOLATED_REGULAR_STRING_START=132
    INTERPOLATED_VERBATIUM_STRING_START=133
    RAW_STRING_LITERAL=134
    OPEN_BRACE=135
    CLOSE_BRACE=136
    OPEN_BRACKET=137
    CLOSE_BRACKET=138
    OPEN_PARENS=139
    CLOSE_PARENS=140
    DOT=141
    COMMA=142
    COLON=143
    SEMICOLON=144
    PLUS=145
    MINUS=146
    STAR=147
    DIV=148
    PERCENT=149
    AMP=150
    BITWISE_OR=151
    CARET=152
    BANG=153
    TILDE=154
    ASSIGNMENT=155
    LT=156
    GT=157
    INTERR=158
    DOUBLE_COLON=159
    OP_COALESCING=160
    OP_INC=161
    OP_DEC=162
    OP_AND=163
    OP_OR=164
    OP_PTR=165
    OP_EQ=166
    OP_NE=167
    OP_LE=168
    OP_GE=169
    OP_ADD_ASSIGNMENT=170
    OP_SUB_ASSIGNMENT=171
    OP_MULT_ASSIGNMENT=172
    OP_DIV_ASSIGNMENT=173
    OP_MOD_ASSIGNMENT=174
    OP_AND_ASSIGNMENT=175
    OP_OR_ASSIGNMENT=176
    OP_XOR_ASSIGNMENT=177
    OP_LEFT_SHIFT=178
    OP_LEFT_SHIFT_ASSIGNMENT=179
    OP_COALESCING_ASSIGNMENT=180
    OP_RANGE=181
    DOUBLE_CURLY_INSIDE=182
    OPEN_BRACE_INSIDE=183
    REGULAR_CHAR_INSIDE=184
    VERBATIUM_DOUBLE_QUOTE_INSIDE=185
    DOUBLE_QUOTE_INSIDE=186
    REGULAR_STRING_INSIDE=187
    VERBATIUM_INSIDE_STRING=188
    CLOSE_BRACE_INSIDE=189
    FORMAT_STRING=190
    DIRECTIVE_WHITESPACES=191
    DIGITS=192
    DEFINE=193
    UNDEF=194
    ELIF=195
    ENDIF=196
    LINE=197
    ERROR=198
    WARNING=199
    REGION=200
    ENDREGION=201
    PRAGMA=202
    NULLABLE=203
    DIRECTIVE_HIDDEN=204
    CONDITIONAL_SYMBOL=205
    DIRECTIVE_NEW_LINE=206
    TEXT=207
    DOUBLE_CURLY_CLOSE_INSIDE=208

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.2")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class Compilation_unitContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(CSharpParser.EOF, 0)

        def BYTE_ORDER_MARK(self):
            return self.getToken(CSharpParser.BYTE_ORDER_MARK, 0)

        def compilation_unit_element(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Compilation_unit_elementContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Compilation_unit_elementContext,i)


        def getRuleIndex(self):
            return CSharpParser.RULE_compilation_unit

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCompilation_unit" ):
                listener.enterCompilation_unit(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCompilation_unit" ):
                listener.exitCompilation_unit(self)




    def compilation_unit(self):

        localctx = CSharpParser.Compilation_unitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_compilation_unit)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 581
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==1:
                self.state = 580
                self.match(CSharpParser.BYTE_ORDER_MARK)


            self.state = 586
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & 6773396109915043328) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -4398046599297) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & 9007225147165439) != 0):
                self.state = 583
                self.compilation_unit_element()
                self.state = 588
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 589
            self.match(CSharpParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Compilation_unit_elementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def extern_alias_directives(self):
            return self.getTypedRuleContext(CSharpParser.Extern_alias_directivesContext,0)


        def using_directives(self):
            return self.getTypedRuleContext(CSharpParser.Using_directivesContext,0)


        def global_attribute_section(self):
            return self.getTypedRuleContext(CSharpParser.Global_attribute_sectionContext,0)


        def top_level_statements(self):
            return self.getTypedRuleContext(CSharpParser.Top_level_statementsContext,0)


        def namespace_member_declarations(self):
            return self.getTypedRuleContext(CSharpParser.Namespace_member_declarationsContext,0)


        def global_using_directives(self):
            return self.getTypedRuleContext(CSharpParser.Global_using_directivesContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_compilation_unit_element

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCompilation_unit_element" ):
                listener.enterCompilation_unit_element(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCompilation_unit_element" ):
                listener.exitCompilation_unit_element(self)




    def compilation_unit_element(self):

        localctx = CSharpParser.Compilation_unit_elementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_compilation_unit_element)
        try:
            self.state = 597
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,2,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 591
                self.extern_alias_directives()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 592
                self.using_directives()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 593
                self.global_attribute_section()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 594
                self.top_level_statements()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 595
                self.namespace_member_declarations()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 596
                self.global_using_directives()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Top_level_statementsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.StatementContext)
            else:
                return self.getTypedRuleContext(CSharpParser.StatementContext,i)


        def type_declaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Type_declarationContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Type_declarationContext,i)


        def getRuleIndex(self):
            return CSharpParser.RULE_top_level_statements

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTop_level_statements" ):
                listener.enterTop_level_statements(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTop_level_statements" ):
                listener.exitTop_level_statements(self)




    def top_level_statements(self):

        localctx = CSharpParser.Top_level_statementsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_top_level_statements)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 601 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 601
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,3,self._ctx)
                    if la_ == 1:
                        self.state = 599
                        self.statement()
                        pass

                    elif la_ == 2:
                        self.state = 600
                        self.type_declaration()
                        pass



                else:
                    raise NoViableAltException(self)
                self.state = 603 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,4,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Global_using_directivesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def global_using_directive(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Global_using_directiveContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Global_using_directiveContext,i)


        def getRuleIndex(self):
            return CSharpParser.RULE_global_using_directives

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGlobal_using_directives" ):
                listener.enterGlobal_using_directives(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGlobal_using_directives" ):
                listener.exitGlobal_using_directives(self)




    def global_using_directives(self):

        localctx = CSharpParser.Global_using_directivesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_global_using_directives)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 606 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 605
                    self.global_using_directive()

                else:
                    raise NoViableAltException(self)
                self.state = 608 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,5,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Global_using_directiveContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GLOBAL(self):
            return self.getToken(CSharpParser.GLOBAL, 0)

        def USING(self):
            return self.getToken(CSharpParser.USING, 0)

        def identifier(self):
            return self.getTypedRuleContext(CSharpParser.IdentifierContext,0)


        def ASSIGNMENT(self):
            return self.getToken(CSharpParser.ASSIGNMENT, 0)

        def namespace_or_type_name(self):
            return self.getTypedRuleContext(CSharpParser.Namespace_or_type_nameContext,0)


        def SEMICOLON(self):
            return self.getToken(CSharpParser.SEMICOLON, 0)

        def STATIC(self):
            return self.getToken(CSharpParser.STATIC, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_global_using_directive

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGlobal_using_directive" ):
                listener.enterGlobal_using_directive(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGlobal_using_directive" ):
                listener.exitGlobal_using_directive(self)




    def global_using_directive(self):

        localctx = CSharpParser.Global_using_directiveContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_global_using_directive)
        try:
            self.state = 628
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,6,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 610
                self.match(CSharpParser.GLOBAL)
                self.state = 611
                self.match(CSharpParser.USING)
                self.state = 612
                self.identifier()
                self.state = 613
                self.match(CSharpParser.ASSIGNMENT)
                self.state = 614
                self.namespace_or_type_name()
                self.state = 615
                self.match(CSharpParser.SEMICOLON)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 617
                self.match(CSharpParser.GLOBAL)
                self.state = 618
                self.match(CSharpParser.USING)
                self.state = 619
                self.namespace_or_type_name()
                self.state = 620
                self.match(CSharpParser.SEMICOLON)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 622
                self.match(CSharpParser.GLOBAL)
                self.state = 623
                self.match(CSharpParser.USING)
                self.state = 624
                self.match(CSharpParser.STATIC)
                self.state = 625
                self.namespace_or_type_name()
                self.state = 626
                self.match(CSharpParser.SEMICOLON)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Namespace_or_type_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(CSharpParser.IdentifierContext,i)


        def qualified_alias_member(self):
            return self.getTypedRuleContext(CSharpParser.Qualified_alias_memberContext,0)


        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.DOT)
            else:
                return self.getToken(CSharpParser.DOT, i)

        def type_argument_list(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Type_argument_listContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Type_argument_listContext,i)


        def getRuleIndex(self):
            return CSharpParser.RULE_namespace_or_type_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNamespace_or_type_name" ):
                listener.enterNamespace_or_type_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNamespace_or_type_name" ):
                listener.exitNamespace_or_type_name(self)




    def namespace_or_type_name(self):

        localctx = CSharpParser.Namespace_or_type_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_namespace_or_type_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 635
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,8,self._ctx)
            if la_ == 1:
                self.state = 630
                self.identifier()
                self.state = 632
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,7,self._ctx)
                if la_ == 1:
                    self.state = 631
                    self.type_argument_list()


                pass

            elif la_ == 2:
                self.state = 634
                self.qualified_alias_member()
                pass


            self.state = 644
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,10,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 637
                    self.match(CSharpParser.DOT)
                    self.state = 638
                    self.identifier()
                    self.state = 640
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,9,self._ctx)
                    if la_ == 1:
                        self.state = 639
                        self.type_argument_list()

             
                self.state = 646
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,10,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Type_Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def base_type(self):
            return self.getTypedRuleContext(CSharpParser.Base_typeContext,0)


        def INTERR(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.INTERR)
            else:
                return self.getToken(CSharpParser.INTERR, i)

        def rank_specifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Rank_specifierContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Rank_specifierContext,i)


        def STAR(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.STAR)
            else:
                return self.getToken(CSharpParser.STAR, i)

        def function_pointer_type(self):
            return self.getTypedRuleContext(CSharpParser.Function_pointer_typeContext,0)


        def REF(self):
            return self.getToken(CSharpParser.REF, 0)

        def READONLY(self):
            return self.getToken(CSharpParser.READONLY, 0)

        def LT(self):
            return self.getToken(CSharpParser.LT, 0)

        def type_argument_list(self):
            return self.getTypedRuleContext(CSharpParser.Type_argument_listContext,0)


        def GT(self):
            return self.getToken(CSharpParser.GT, 0)

        def OPEN_BRACKET(self):
            return self.getToken(CSharpParser.OPEN_BRACKET, 0)

        def INTEGER_LITERAL(self):
            return self.getToken(CSharpParser.INTEGER_LITERAL, 0)

        def CLOSE_BRACKET(self):
            return self.getToken(CSharpParser.CLOSE_BRACKET, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_type_

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterType_" ):
                listener.enterType_(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitType_" ):
                listener.exitType_(self)




    def type_(self):

        localctx = CSharpParser.Type_Context(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_type_)
        self._la = 0 # Token type
        try:
            self.state = 681
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,18,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 647
                self.base_type()
                self.state = 653
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,12,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 651
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [158]:
                            self.state = 648
                            self.match(CSharpParser.INTERR)
                            pass
                        elif token in [137]:
                            self.state = 649
                            self.rank_specifier()
                            pass
                        elif token in [147]:
                            self.state = 650
                            self.match(CSharpParser.STAR)
                            pass
                        else:
                            raise NoViableAltException(self)
                 
                    self.state = 655
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,12,self._ctx)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 656
                self.function_pointer_type()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 658
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==87:
                    self.state = 657
                    self.match(CSharpParser.REF)


                self.state = 661
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==85:
                    self.state = 660
                    self.match(CSharpParser.READONLY)


                self.state = 663
                self.base_type()
                self.state = 668
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,15,self._ctx)
                if la_ == 1:
                    self.state = 664
                    self.match(CSharpParser.LT)
                    self.state = 665
                    self.type_argument_list()
                    self.state = 666
                    self.match(CSharpParser.GT)


                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 671
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==87:
                    self.state = 670
                    self.match(CSharpParser.REF)


                self.state = 674
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==85:
                    self.state = 673
                    self.match(CSharpParser.READONLY)


                self.state = 676
                self.base_type()
                self.state = 677
                self.match(CSharpParser.OPEN_BRACKET)
                self.state = 678
                self.match(CSharpParser.INTEGER_LITERAL)
                self.state = 679
                self.match(CSharpParser.CLOSE_BRACKET)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Function_pointer_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DELEGATE(self):
            return self.getToken(CSharpParser.DELEGATE, 0)

        def STAR(self):
            return self.getToken(CSharpParser.STAR, 0)

        def LT(self):
            return self.getToken(CSharpParser.LT, 0)

        def function_pointer_parameter_list(self):
            return self.getTypedRuleContext(CSharpParser.Function_pointer_parameter_listContext,0)


        def GT(self):
            return self.getToken(CSharpParser.GT, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_function_pointer_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunction_pointer_type" ):
                listener.enterFunction_pointer_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunction_pointer_type" ):
                listener.exitFunction_pointer_type(self)




    def function_pointer_type(self):

        localctx = CSharpParser.Function_pointer_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_function_pointer_type)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 683
            self.match(CSharpParser.DELEGATE)
            self.state = 684
            self.match(CSharpParser.STAR)
            self.state = 685
            self.match(CSharpParser.LT)
            self.state = 686
            self.function_pointer_parameter_list()
            self.state = 687
            self.match(CSharpParser.GT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Function_pointer_parameter_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def type_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Type_Context)
            else:
                return self.getTypedRuleContext(CSharpParser.Type_Context,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.COMMA)
            else:
                return self.getToken(CSharpParser.COMMA, i)

        def getRuleIndex(self):
            return CSharpParser.RULE_function_pointer_parameter_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunction_pointer_parameter_list" ):
                listener.enterFunction_pointer_parameter_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunction_pointer_parameter_list" ):
                listener.exitFunction_pointer_parameter_list(self)




    def function_pointer_parameter_list(self):

        localctx = CSharpParser.Function_pointer_parameter_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_function_pointer_parameter_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 689
            self.type_()
            self.state = 694
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==142:
                self.state = 690
                self.match(CSharpParser.COMMA)
                self.state = 691
                self.type_()
                self.state = 696
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Base_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simple_type(self):
            return self.getTypedRuleContext(CSharpParser.Simple_typeContext,0)


        def class_type(self):
            return self.getTypedRuleContext(CSharpParser.Class_typeContext,0)


        def VOID(self):
            return self.getToken(CSharpParser.VOID, 0)

        def STAR(self):
            return self.getToken(CSharpParser.STAR, 0)

        def tuple_type(self):
            return self.getTypedRuleContext(CSharpParser.Tuple_typeContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_base_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBase_type" ):
                listener.enterBase_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBase_type" ):
                listener.exitBase_type(self)




    def base_type(self):

        localctx = CSharpParser.Base_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_base_type)
        try:
            self.state = 702
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,20,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 697
                self.simple_type()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 698
                self.class_type()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 699
                self.match(CSharpParser.VOID)
                self.state = 700
                self.match(CSharpParser.STAR)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 701
                self.tuple_type()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Tuple_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PARENS(self):
            return self.getToken(CSharpParser.OPEN_PARENS, 0)

        def tuple_element(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Tuple_elementContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Tuple_elementContext,i)


        def CLOSE_PARENS(self):
            return self.getToken(CSharpParser.CLOSE_PARENS, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.COMMA)
            else:
                return self.getToken(CSharpParser.COMMA, i)

        def deconstruction_expression(self):
            return self.getTypedRuleContext(CSharpParser.Deconstruction_expressionContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_tuple_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTuple_type" ):
                listener.enterTuple_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTuple_type" ):
                listener.exitTuple_type(self)




    def tuple_type(self):

        localctx = CSharpParser.Tuple_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_tuple_type)
        self._la = 0 # Token type
        try:
            self.state = 715
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,22,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 704
                self.match(CSharpParser.OPEN_PARENS)
                self.state = 705
                self.tuple_element()
                self.state = 708 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 706
                    self.match(CSharpParser.COMMA)
                    self.state = 707
                    self.tuple_element()
                    self.state = 710 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==142):
                        break

                self.state = 712
                self.match(CSharpParser.CLOSE_PARENS)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 714
                self.deconstruction_expression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Deconstruction_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def deconstruction_tuple(self):
            return self.getTypedRuleContext(CSharpParser.Deconstruction_tupleContext,0)


        def VAR(self):
            return self.getToken(CSharpParser.VAR, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_deconstruction_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeconstruction_expression" ):
                listener.enterDeconstruction_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeconstruction_expression" ):
                listener.exitDeconstruction_expression(self)




    def deconstruction_expression(self):

        localctx = CSharpParser.Deconstruction_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_deconstruction_expression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 718
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==114:
                self.state = 717
                self.match(CSharpParser.VAR)


            self.state = 720
            self.deconstruction_tuple()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Deconstruction_tupleContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PARENS(self):
            return self.getToken(CSharpParser.OPEN_PARENS, 0)

        def deconstruction_element(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Deconstruction_elementContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Deconstruction_elementContext,i)


        def CLOSE_PARENS(self):
            return self.getToken(CSharpParser.CLOSE_PARENS, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.COMMA)
            else:
                return self.getToken(CSharpParser.COMMA, i)

        def getRuleIndex(self):
            return CSharpParser.RULE_deconstruction_tuple

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeconstruction_tuple" ):
                listener.enterDeconstruction_tuple(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeconstruction_tuple" ):
                listener.exitDeconstruction_tuple(self)




    def deconstruction_tuple(self):

        localctx = CSharpParser.Deconstruction_tupleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_deconstruction_tuple)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 722
            self.match(CSharpParser.OPEN_PARENS)
            self.state = 723
            self.deconstruction_element()
            self.state = 726 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 724
                self.match(CSharpParser.COMMA)
                self.state = 725
                self.deconstruction_element()
                self.state = 728 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==142):
                    break

            self.state = 730
            self.match(CSharpParser.CLOSE_PARENS)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Deconstruction_elementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def deconstruction_tuple(self):
            return self.getTypedRuleContext(CSharpParser.Deconstruction_tupleContext,0)


        def identifier(self):
            return self.getTypedRuleContext(CSharpParser.IdentifierContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_deconstruction_element

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeconstruction_element" ):
                listener.enterDeconstruction_element(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeconstruction_element" ):
                listener.exitDeconstruction_element(self)




    def deconstruction_element(self):

        localctx = CSharpParser.Deconstruction_elementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_deconstruction_element)
        self._la = 0 # Token type
        try:
            self.state = 736
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [139]:
                self.enterOuterAlt(localctx, 1)
                self.state = 732
                self.deconstruction_tuple()
                pass
            elif token in [10, 12, 13, 15, 16, 17, 21, 33, 36, 39, 50, 51, 54, 57, 62, 64, 65, 68, 74, 77, 81, 88, 92, 93, 110, 114, 118, 119, 121, 123, 140, 142, 144]:
                self.enterOuterAlt(localctx, 2)
                self.state = 734
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 4633078743724962816) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 775815405380969491) != 0):
                    self.state = 733
                    self.identifier()


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Tuple_elementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(CSharpParser.IdentifierContext,0)


        def type_(self):
            return self.getTypedRuleContext(CSharpParser.Type_Context,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_tuple_element

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTuple_element" ):
                listener.enterTuple_element(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTuple_element" ):
                listener.exitTuple_element(self)




    def tuple_element(self):

        localctx = CSharpParser.Tuple_elementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_tuple_element)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 739
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,27,self._ctx)
            if la_ == 1:
                self.state = 738
                self.type_()


            self.state = 741
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Simple_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def numeric_type(self):
            return self.getTypedRuleContext(CSharpParser.Numeric_typeContext,0)


        def BOOL(self):
            return self.getToken(CSharpParser.BOOL, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_simple_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimple_type" ):
                listener.enterSimple_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimple_type" ):
                listener.exitSimple_type(self)




    def simple_type(self):

        localctx = CSharpParser.Simple_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_simple_type)
        try:
            self.state = 745
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [22, 25, 30, 35, 46, 58, 67, 90, 94, 107, 108, 112]:
                self.enterOuterAlt(localctx, 1)
                self.state = 743
                self.numeric_type()
                pass
            elif token in [19]:
                self.enterOuterAlt(localctx, 2)
                self.state = 744
                self.match(CSharpParser.BOOL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Numeric_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def integral_type(self):
            return self.getTypedRuleContext(CSharpParser.Integral_typeContext,0)


        def floating_point_type(self):
            return self.getTypedRuleContext(CSharpParser.Floating_point_typeContext,0)


        def DECIMAL(self):
            return self.getToken(CSharpParser.DECIMAL, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_numeric_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNumeric_type" ):
                listener.enterNumeric_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNumeric_type" ):
                listener.exitNumeric_type(self)




    def numeric_type(self):

        localctx = CSharpParser.Numeric_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_numeric_type)
        try:
            self.state = 750
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [22, 25, 58, 67, 90, 94, 107, 108, 112]:
                self.enterOuterAlt(localctx, 1)
                self.state = 747
                self.integral_type()
                pass
            elif token in [35, 46]:
                self.enterOuterAlt(localctx, 2)
                self.state = 748
                self.floating_point_type()
                pass
            elif token in [30]:
                self.enterOuterAlt(localctx, 3)
                self.state = 749
                self.match(CSharpParser.DECIMAL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Integral_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SBYTE(self):
            return self.getToken(CSharpParser.SBYTE, 0)

        def BYTE(self):
            return self.getToken(CSharpParser.BYTE, 0)

        def SHORT(self):
            return self.getToken(CSharpParser.SHORT, 0)

        def USHORT(self):
            return self.getToken(CSharpParser.USHORT, 0)

        def INT(self):
            return self.getToken(CSharpParser.INT, 0)

        def UINT(self):
            return self.getToken(CSharpParser.UINT, 0)

        def LONG(self):
            return self.getToken(CSharpParser.LONG, 0)

        def ULONG(self):
            return self.getToken(CSharpParser.ULONG, 0)

        def CHAR(self):
            return self.getToken(CSharpParser.CHAR, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_integral_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIntegral_type" ):
                listener.enterIntegral_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIntegral_type" ):
                listener.exitIntegral_type(self)




    def integral_type(self):

        localctx = CSharpParser.Integral_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_integral_type)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 752
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 288230376189460480) != 0) or ((((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & 38483049578497) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Floating_point_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FLOAT(self):
            return self.getToken(CSharpParser.FLOAT, 0)

        def DOUBLE(self):
            return self.getToken(CSharpParser.DOUBLE, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_floating_point_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFloating_point_type" ):
                listener.enterFloating_point_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFloating_point_type" ):
                listener.exitFloating_point_type(self)




    def floating_point_type(self):

        localctx = CSharpParser.Floating_point_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_floating_point_type)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 754
            _la = self._input.LA(1)
            if not(_la==35 or _la==46):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Default_value_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def explictly_typed_default(self):
            return self.getTypedRuleContext(CSharpParser.Explictly_typed_defaultContext,0)


        def default_literal(self):
            return self.getTypedRuleContext(CSharpParser.Default_literalContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_default_value_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDefault_value_expression" ):
                listener.enterDefault_value_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDefault_value_expression" ):
                listener.exitDefault_value_expression(self)




    def default_value_expression(self):

        localctx = CSharpParser.Default_value_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_default_value_expression)
        try:
            self.state = 758
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,30,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 756
                self.explictly_typed_default()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 757
                self.default_literal()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Explictly_typed_defaultContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DEFAULT(self):
            return self.getToken(CSharpParser.DEFAULT, 0)

        def OPEN_PARENS(self):
            return self.getToken(CSharpParser.OPEN_PARENS, 0)

        def type_(self):
            return self.getTypedRuleContext(CSharpParser.Type_Context,0)


        def CLOSE_PARENS(self):
            return self.getToken(CSharpParser.CLOSE_PARENS, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_explictly_typed_default

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExplictly_typed_default" ):
                listener.enterExplictly_typed_default(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExplictly_typed_default" ):
                listener.exitExplictly_typed_default(self)




    def explictly_typed_default(self):

        localctx = CSharpParser.Explictly_typed_defaultContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_explictly_typed_default)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 760
            self.match(CSharpParser.DEFAULT)
            self.state = 761
            self.match(CSharpParser.OPEN_PARENS)
            self.state = 762
            self.type_()
            self.state = 763
            self.match(CSharpParser.CLOSE_PARENS)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Default_literalContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DEFAULT(self):
            return self.getToken(CSharpParser.DEFAULT, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_default_literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDefault_literal" ):
                listener.enterDefault_literal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDefault_literal" ):
                listener.exitDefault_literal(self)




    def default_literal(self):

        localctx = CSharpParser.Default_literalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_default_literal)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 765
            self.match(CSharpParser.DEFAULT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Variable_referenceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(CSharpParser.ExpressionContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_variable_reference

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariable_reference" ):
                listener.enterVariable_reference(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariable_reference" ):
                listener.exitVariable_reference(self)




    def variable_reference(self):

        localctx = CSharpParser.Variable_referenceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_variable_reference)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 767
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Class_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def namespace_or_type_name(self):
            return self.getTypedRuleContext(CSharpParser.Namespace_or_type_nameContext,0)


        def OBJECT(self):
            return self.getToken(CSharpParser.OBJECT, 0)

        def DYNAMIC(self):
            return self.getToken(CSharpParser.DYNAMIC, 0)

        def STRING(self):
            return self.getToken(CSharpParser.STRING, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_class_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClass_type" ):
                listener.enterClass_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClass_type" ):
                listener.exitClass_type(self)




    def class_type(self):

        localctx = CSharpParser.Class_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_class_type)
        try:
            self.state = 773
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,31,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 769
                self.namespace_or_type_name()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 770
                self.match(CSharpParser.OBJECT)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 771
                self.match(CSharpParser.DYNAMIC)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 772
                self.match(CSharpParser.STRING)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Type_argument_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LT(self):
            return self.getToken(CSharpParser.LT, 0)

        def type_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Type_Context)
            else:
                return self.getTypedRuleContext(CSharpParser.Type_Context,i)


        def GT(self):
            return self.getToken(CSharpParser.GT, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.COMMA)
            else:
                return self.getToken(CSharpParser.COMMA, i)

        def getRuleIndex(self):
            return CSharpParser.RULE_type_argument_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterType_argument_list" ):
                listener.enterType_argument_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitType_argument_list" ):
                listener.exitType_argument_list(self)




    def type_argument_list(self):

        localctx = CSharpParser.Type_argument_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_type_argument_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 775
            self.match(CSharpParser.LT)
            self.state = 776
            self.type_()
            self.state = 781
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==142:
                self.state = 777
                self.match(CSharpParser.COMMA)
                self.state = 778
                self.type_()
                self.state = 783
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 784
            self.match(CSharpParser.GT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Argument_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def argument(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.ArgumentContext)
            else:
                return self.getTypedRuleContext(CSharpParser.ArgumentContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.COMMA)
            else:
                return self.getToken(CSharpParser.COMMA, i)

        def getRuleIndex(self):
            return CSharpParser.RULE_argument_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArgument_list" ):
                listener.enterArgument_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArgument_list" ):
                listener.exitArgument_list(self)




    def argument_list(self):

        localctx = CSharpParser.Argument_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_argument_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 786
            self.argument()
            self.state = 791
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==142:
                self.state = 787
                self.match(CSharpParser.COMMA)
                self.state = 788
                self.argument()
                self.state = 793
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArgumentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.refout = None # Token

        def expression(self):
            return self.getTypedRuleContext(CSharpParser.ExpressionContext,0)


        def argument_name(self):
            return self.getTypedRuleContext(CSharpParser.Argument_nameContext,0)


        def VAR(self):
            return self.getToken(CSharpParser.VAR, 0)

        def type_(self):
            return self.getTypedRuleContext(CSharpParser.Type_Context,0)


        def REF(self):
            return self.getToken(CSharpParser.REF, 0)

        def OUT(self):
            return self.getToken(CSharpParser.OUT, 0)

        def IN(self):
            return self.getToken(CSharpParser.IN, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_argument

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArgument" ):
                listener.enterArgument(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArgument" ):
                listener.exitArgument(self)




    def argument(self):

        localctx = CSharpParser.ArgumentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_argument)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 795
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,34,self._ctx)
            if la_ == 1:
                self.state = 794
                self.argument_name()


            self.state = 798
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,35,self._ctx)
            if la_ == 1:
                self.state = 797
                localctx.refout = self._input.LT(1)
                _la = self._input.LA(1)
                if not(((((_la - 57)) & ~0x3f) == 0 and ((1 << (_la - 57)) & 1075838977) != 0)):
                    localctx.refout = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 806
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,37,self._ctx)
            if la_ == 1:
                self.state = 800
                self.expression()
                pass

            elif la_ == 2:
                self.state = 803
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,36,self._ctx)
                if la_ == 1:
                    self.state = 801
                    self.match(CSharpParser.VAR)
                    pass

                elif la_ == 2:
                    self.state = 802
                    self.type_()
                    pass


                self.state = 805
                self.expression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Argument_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(CSharpParser.IdentifierContext,0)


        def COLON(self):
            return self.getToken(CSharpParser.COLON, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_argument_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArgument_name" ):
                listener.enterArgument_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArgument_name" ):
                listener.exitArgument_name(self)




    def argument_name(self):

        localctx = CSharpParser.Argument_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_argument_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 808
            self.identifier()
            self.state = 809
            self.match(CSharpParser.COLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assignment(self):
            return self.getTypedRuleContext(CSharpParser.AssignmentContext,0)


        def non_assignment_expression(self):
            return self.getTypedRuleContext(CSharpParser.Non_assignment_expressionContext,0)


        def REF(self):
            return self.getToken(CSharpParser.REF, 0)

        def lambda_expression(self):
            return self.getTypedRuleContext(CSharpParser.Lambda_expressionContext,0)


        def collection_expression(self):
            return self.getTypedRuleContext(CSharpParser.Collection_expressionContext,0)


        def method_invocation(self):
            return self.getTypedRuleContext(CSharpParser.Method_invocationContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpression" ):
                listener.enterExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpression" ):
                listener.exitExpression(self)




    def expression(self):

        localctx = CSharpParser.ExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_expression)
        try:
            self.state = 818
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,38,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 811
                self.assignment()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 812
                self.non_assignment_expression()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 813
                self.match(CSharpParser.REF)
                self.state = 814
                self.non_assignment_expression()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 815
                self.lambda_expression()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 816
                self.collection_expression()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 817
                self.method_invocation()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Non_assignment_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def lambda_expression(self):
            return self.getTypedRuleContext(CSharpParser.Lambda_expressionContext,0)


        def query_expression(self):
            return self.getTypedRuleContext(CSharpParser.Query_expressionContext,0)


        def conditional_expression(self):
            return self.getTypedRuleContext(CSharpParser.Conditional_expressionContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_non_assignment_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNon_assignment_expression" ):
                listener.enterNon_assignment_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNon_assignment_expression" ):
                listener.exitNon_assignment_expression(self)




    def non_assignment_expression(self):

        localctx = CSharpParser.Non_assignment_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_non_assignment_expression)
        try:
            self.state = 823
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,39,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 820
                self.lambda_expression()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 821
                self.query_expression()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 822
                self.conditional_expression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssignmentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def unary_expression(self):
            return self.getTypedRuleContext(CSharpParser.Unary_expressionContext,0)


        def assignment_operator(self):
            return self.getTypedRuleContext(CSharpParser.Assignment_operatorContext,0)


        def expression(self):
            return self.getTypedRuleContext(CSharpParser.ExpressionContext,0)


        def OP_COALESCING_ASSIGNMENT(self):
            return self.getToken(CSharpParser.OP_COALESCING_ASSIGNMENT, 0)

        def throwable_expression(self):
            return self.getTypedRuleContext(CSharpParser.Throwable_expressionContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_assignment

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssignment" ):
                listener.enterAssignment(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssignment" ):
                listener.exitAssignment(self)




    def assignment(self):

        localctx = CSharpParser.AssignmentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_assignment)
        try:
            self.state = 833
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,40,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 825
                self.unary_expression()
                self.state = 826
                self.assignment_operator()
                self.state = 827
                self.expression()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 829
                self.unary_expression()
                self.state = 830
                self.match(CSharpParser.OP_COALESCING_ASSIGNMENT)
                self.state = 831
                self.throwable_expression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Assignment_operatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ASSIGNMENT(self):
            return self.getToken(CSharpParser.ASSIGNMENT, 0)

        def OP_ADD_ASSIGNMENT(self):
            return self.getToken(CSharpParser.OP_ADD_ASSIGNMENT, 0)

        def OP_SUB_ASSIGNMENT(self):
            return self.getToken(CSharpParser.OP_SUB_ASSIGNMENT, 0)

        def OP_MULT_ASSIGNMENT(self):
            return self.getToken(CSharpParser.OP_MULT_ASSIGNMENT, 0)

        def OP_DIV_ASSIGNMENT(self):
            return self.getToken(CSharpParser.OP_DIV_ASSIGNMENT, 0)

        def OP_MOD_ASSIGNMENT(self):
            return self.getToken(CSharpParser.OP_MOD_ASSIGNMENT, 0)

        def OP_AND_ASSIGNMENT(self):
            return self.getToken(CSharpParser.OP_AND_ASSIGNMENT, 0)

        def OP_OR_ASSIGNMENT(self):
            return self.getToken(CSharpParser.OP_OR_ASSIGNMENT, 0)

        def OP_XOR_ASSIGNMENT(self):
            return self.getToken(CSharpParser.OP_XOR_ASSIGNMENT, 0)

        def OP_LEFT_SHIFT_ASSIGNMENT(self):
            return self.getToken(CSharpParser.OP_LEFT_SHIFT_ASSIGNMENT, 0)

        def right_shift_assignment(self):
            return self.getTypedRuleContext(CSharpParser.Right_shift_assignmentContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_assignment_operator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssignment_operator" ):
                listener.enterAssignment_operator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssignment_operator" ):
                listener.exitAssignment_operator(self)




    def assignment_operator(self):

        localctx = CSharpParser.Assignment_operatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_assignment_operator)
        try:
            self.state = 846
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [155]:
                self.enterOuterAlt(localctx, 1)
                self.state = 835
                self.match(CSharpParser.ASSIGNMENT)
                pass
            elif token in [170]:
                self.enterOuterAlt(localctx, 2)
                self.state = 836
                self.match(CSharpParser.OP_ADD_ASSIGNMENT)
                pass
            elif token in [171]:
                self.enterOuterAlt(localctx, 3)
                self.state = 837
                self.match(CSharpParser.OP_SUB_ASSIGNMENT)
                pass
            elif token in [172]:
                self.enterOuterAlt(localctx, 4)
                self.state = 838
                self.match(CSharpParser.OP_MULT_ASSIGNMENT)
                pass
            elif token in [173]:
                self.enterOuterAlt(localctx, 5)
                self.state = 839
                self.match(CSharpParser.OP_DIV_ASSIGNMENT)
                pass
            elif token in [174]:
                self.enterOuterAlt(localctx, 6)
                self.state = 840
                self.match(CSharpParser.OP_MOD_ASSIGNMENT)
                pass
            elif token in [175]:
                self.enterOuterAlt(localctx, 7)
                self.state = 841
                self.match(CSharpParser.OP_AND_ASSIGNMENT)
                pass
            elif token in [176]:
                self.enterOuterAlt(localctx, 8)
                self.state = 842
                self.match(CSharpParser.OP_OR_ASSIGNMENT)
                pass
            elif token in [177]:
                self.enterOuterAlt(localctx, 9)
                self.state = 843
                self.match(CSharpParser.OP_XOR_ASSIGNMENT)
                pass
            elif token in [179]:
                self.enterOuterAlt(localctx, 10)
                self.state = 844
                self.match(CSharpParser.OP_LEFT_SHIFT_ASSIGNMENT)
                pass
            elif token in [157]:
                self.enterOuterAlt(localctx, 11)
                self.state = 845
                self.right_shift_assignment()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Conditional_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def null_coalescing_expression(self):
            return self.getTypedRuleContext(CSharpParser.Null_coalescing_expressionContext,0)


        def INTERR(self):
            return self.getToken(CSharpParser.INTERR, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(CSharpParser.ExpressionContext,i)


        def COLON(self):
            return self.getToken(CSharpParser.COLON, 0)

        def REF(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.REF)
            else:
                return self.getToken(CSharpParser.REF, i)

        def variable_reference(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Variable_referenceContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Variable_referenceContext,i)


        def getRuleIndex(self):
            return CSharpParser.RULE_conditional_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConditional_expression" ):
                listener.enterConditional_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConditional_expression" ):
                listener.exitConditional_expression(self)




    def conditional_expression(self):

        localctx = CSharpParser.Conditional_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_conditional_expression)
        try:
            self.state = 863
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,42,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 848
                self.null_coalescing_expression()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 849
                self.null_coalescing_expression()
                self.state = 850
                self.match(CSharpParser.INTERR)
                self.state = 851
                self.expression()
                self.state = 852
                self.match(CSharpParser.COLON)
                self.state = 853
                self.expression()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 855
                self.null_coalescing_expression()
                self.state = 856
                self.match(CSharpParser.INTERR)
                self.state = 857
                self.match(CSharpParser.REF)
                self.state = 858
                self.variable_reference()
                self.state = 859
                self.match(CSharpParser.COLON)
                self.state = 860
                self.match(CSharpParser.REF)
                self.state = 861
                self.variable_reference()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Null_coalescing_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def conditional_or_expression(self):
            return self.getTypedRuleContext(CSharpParser.Conditional_or_expressionContext,0)


        def OP_COALESCING(self):
            return self.getToken(CSharpParser.OP_COALESCING, 0)

        def null_coalescing_expression(self):
            return self.getTypedRuleContext(CSharpParser.Null_coalescing_expressionContext,0)


        def throw_expression(self):
            return self.getTypedRuleContext(CSharpParser.Throw_expressionContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_null_coalescing_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNull_coalescing_expression" ):
                listener.enterNull_coalescing_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNull_coalescing_expression" ):
                listener.exitNull_coalescing_expression(self)




    def null_coalescing_expression(self):

        localctx = CSharpParser.Null_coalescing_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_null_coalescing_expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 865
            self.conditional_or_expression()
            self.state = 871
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,44,self._ctx)
            if la_ == 1:
                self.state = 866
                self.match(CSharpParser.OP_COALESCING)
                self.state = 869
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [10, 12, 13, 15, 16, 17, 18, 19, 21, 22, 25, 26, 30, 31, 32, 33, 35, 36, 39, 43, 46, 50, 51, 54, 58, 62, 64, 65, 67, 68, 70, 72, 73, 74, 77, 81, 88, 90, 92, 93, 94, 95, 96, 98, 101, 103, 105, 107, 108, 109, 110, 112, 114, 118, 119, 121, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 137, 139, 145, 146, 147, 150, 152, 153, 154, 161, 162, 181]:
                    self.state = 867
                    self.null_coalescing_expression()
                    pass
                elif token in [102]:
                    self.state = 868
                    self.throw_expression()
                    pass
                else:
                    raise NoViableAltException(self)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Conditional_or_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def conditional_and_expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Conditional_and_expressionContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Conditional_and_expressionContext,i)


        def OP_OR(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.OP_OR)
            else:
                return self.getToken(CSharpParser.OP_OR, i)

        def getRuleIndex(self):
            return CSharpParser.RULE_conditional_or_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConditional_or_expression" ):
                listener.enterConditional_or_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConditional_or_expression" ):
                listener.exitConditional_or_expression(self)




    def conditional_or_expression(self):

        localctx = CSharpParser.Conditional_or_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_conditional_or_expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 873
            self.conditional_and_expression()
            self.state = 878
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,45,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 874
                    self.match(CSharpParser.OP_OR)
                    self.state = 875
                    self.conditional_and_expression() 
                self.state = 880
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,45,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Conditional_and_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def inclusive_or_expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Inclusive_or_expressionContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Inclusive_or_expressionContext,i)


        def OP_AND(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.OP_AND)
            else:
                return self.getToken(CSharpParser.OP_AND, i)

        def getRuleIndex(self):
            return CSharpParser.RULE_conditional_and_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConditional_and_expression" ):
                listener.enterConditional_and_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConditional_and_expression" ):
                listener.exitConditional_and_expression(self)




    def conditional_and_expression(self):

        localctx = CSharpParser.Conditional_and_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_conditional_and_expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 881
            self.inclusive_or_expression()
            self.state = 886
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,46,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 882
                    self.match(CSharpParser.OP_AND)
                    self.state = 883
                    self.inclusive_or_expression() 
                self.state = 888
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,46,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Inclusive_or_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def exclusive_or_expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Exclusive_or_expressionContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Exclusive_or_expressionContext,i)


        def BITWISE_OR(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.BITWISE_OR)
            else:
                return self.getToken(CSharpParser.BITWISE_OR, i)

        def getRuleIndex(self):
            return CSharpParser.RULE_inclusive_or_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInclusive_or_expression" ):
                listener.enterInclusive_or_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInclusive_or_expression" ):
                listener.exitInclusive_or_expression(self)




    def inclusive_or_expression(self):

        localctx = CSharpParser.Inclusive_or_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_inclusive_or_expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 889
            self.exclusive_or_expression()
            self.state = 894
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,47,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 890
                    self.match(CSharpParser.BITWISE_OR)
                    self.state = 891
                    self.exclusive_or_expression() 
                self.state = 896
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,47,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Exclusive_or_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def and_expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.And_expressionContext)
            else:
                return self.getTypedRuleContext(CSharpParser.And_expressionContext,i)


        def CARET(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.CARET)
            else:
                return self.getToken(CSharpParser.CARET, i)

        def getRuleIndex(self):
            return CSharpParser.RULE_exclusive_or_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExclusive_or_expression" ):
                listener.enterExclusive_or_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExclusive_or_expression" ):
                listener.exitExclusive_or_expression(self)




    def exclusive_or_expression(self):

        localctx = CSharpParser.Exclusive_or_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_exclusive_or_expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 897
            self.and_expression()
            self.state = 902
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,48,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 898
                    self.match(CSharpParser.CARET)
                    self.state = 899
                    self.and_expression() 
                self.state = 904
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,48,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class And_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def equality_expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Equality_expressionContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Equality_expressionContext,i)


        def AMP(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.AMP)
            else:
                return self.getToken(CSharpParser.AMP, i)

        def getRuleIndex(self):
            return CSharpParser.RULE_and_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnd_expression" ):
                listener.enterAnd_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnd_expression" ):
                listener.exitAnd_expression(self)




    def and_expression(self):

        localctx = CSharpParser.And_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_and_expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 905
            self.equality_expression()
            self.state = 910
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,49,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 906
                    self.match(CSharpParser.AMP)
                    self.state = 907
                    self.equality_expression() 
                self.state = 912
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,49,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Equality_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def relational_expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Relational_expressionContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Relational_expressionContext,i)


        def OP_EQ(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.OP_EQ)
            else:
                return self.getToken(CSharpParser.OP_EQ, i)

        def OP_NE(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.OP_NE)
            else:
                return self.getToken(CSharpParser.OP_NE, i)

        def getRuleIndex(self):
            return CSharpParser.RULE_equality_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEquality_expression" ):
                listener.enterEquality_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEquality_expression" ):
                listener.exitEquality_expression(self)




    def equality_expression(self):

        localctx = CSharpParser.Equality_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_equality_expression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 913
            self.relational_expression()
            self.state = 918
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,50,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 914
                    _la = self._input.LA(1)
                    if not(_la==166 or _la==167):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 915
                    self.relational_expression() 
                self.state = 920
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,50,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Relational_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def shift_expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Shift_expressionContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Shift_expressionContext,i)


        def IS(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.IS)
            else:
                return self.getToken(CSharpParser.IS, i)

        def isType(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.IsTypeContext)
            else:
                return self.getTypedRuleContext(CSharpParser.IsTypeContext,i)


        def AS(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.AS)
            else:
                return self.getToken(CSharpParser.AS, i)

        def pattern(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.PatternContext)
            else:
                return self.getTypedRuleContext(CSharpParser.PatternContext,i)


        def LT(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.LT)
            else:
                return self.getToken(CSharpParser.LT, i)

        def GT(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.GT)
            else:
                return self.getToken(CSharpParser.GT, i)

        def OP_LE(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.OP_LE)
            else:
                return self.getToken(CSharpParser.OP_LE, i)

        def OP_GE(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.OP_GE)
            else:
                return self.getToken(CSharpParser.OP_GE, i)

        def getRuleIndex(self):
            return CSharpParser.RULE_relational_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRelational_expression" ):
                listener.enterRelational_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRelational_expression" ):
                listener.exitRelational_expression(self)




    def relational_expression(self):

        localctx = CSharpParser.Relational_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_relational_expression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 921
            self.shift_expression()
            self.state = 932
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,52,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 930
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,51,self._ctx)
                    if la_ == 1:
                        self.state = 922
                        _la = self._input.LA(1)
                        if not(((((_la - 156)) & ~0x3f) == 0 and ((1 << (_la - 156)) & 12291) != 0)):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 923
                        self.shift_expression()
                        pass

                    elif la_ == 2:
                        self.state = 924
                        self.match(CSharpParser.IS)
                        self.state = 925
                        self.isType()
                        pass

                    elif la_ == 3:
                        self.state = 926
                        self.match(CSharpParser.AS)
                        self.state = 927
                        self.isType()
                        pass

                    elif la_ == 4:
                        self.state = 928
                        self.match(CSharpParser.IS)
                        self.state = 929
                        self.pattern()
                        pass

             
                self.state = 934
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,52,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Shift_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def additive_expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Additive_expressionContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Additive_expressionContext,i)


        def OP_LEFT_SHIFT(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.OP_LEFT_SHIFT)
            else:
                return self.getToken(CSharpParser.OP_LEFT_SHIFT, i)

        def right_shift(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Right_shiftContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Right_shiftContext,i)


        def getRuleIndex(self):
            return CSharpParser.RULE_shift_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShift_expression" ):
                listener.enterShift_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShift_expression" ):
                listener.exitShift_expression(self)




    def shift_expression(self):

        localctx = CSharpParser.Shift_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_shift_expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 935
            self.additive_expression()
            self.state = 943
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,54,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 938
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [178]:
                        self.state = 936
                        self.match(CSharpParser.OP_LEFT_SHIFT)
                        pass
                    elif token in [157]:
                        self.state = 937
                        self.right_shift()
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 940
                    self.additive_expression() 
                self.state = 945
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,54,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Additive_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def multiplicative_expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Multiplicative_expressionContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Multiplicative_expressionContext,i)


        def PLUS(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.PLUS)
            else:
                return self.getToken(CSharpParser.PLUS, i)

        def MINUS(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.MINUS)
            else:
                return self.getToken(CSharpParser.MINUS, i)

        def getRuleIndex(self):
            return CSharpParser.RULE_additive_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAdditive_expression" ):
                listener.enterAdditive_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAdditive_expression" ):
                listener.exitAdditive_expression(self)




    def additive_expression(self):

        localctx = CSharpParser.Additive_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_additive_expression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 946
            self.multiplicative_expression()
            self.state = 951
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==145 or _la==146:
                self.state = 947
                _la = self._input.LA(1)
                if not(_la==145 or _la==146):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 948
                self.multiplicative_expression()
                self.state = 953
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Multiplicative_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def switch_expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Switch_expressionContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Switch_expressionContext,i)


        def STAR(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.STAR)
            else:
                return self.getToken(CSharpParser.STAR, i)

        def DIV(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.DIV)
            else:
                return self.getToken(CSharpParser.DIV, i)

        def PERCENT(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.PERCENT)
            else:
                return self.getToken(CSharpParser.PERCENT, i)

        def getRuleIndex(self):
            return CSharpParser.RULE_multiplicative_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMultiplicative_expression" ):
                listener.enterMultiplicative_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMultiplicative_expression" ):
                listener.exitMultiplicative_expression(self)




    def multiplicative_expression(self):

        localctx = CSharpParser.Multiplicative_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_multiplicative_expression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 954
            self.switch_expression()
            self.state = 959
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 147)) & ~0x3f) == 0 and ((1 << (_la - 147)) & 7) != 0):
                self.state = 955
                _la = self._input.LA(1)
                if not(((((_la - 147)) & ~0x3f) == 0 and ((1 << (_la - 147)) & 7) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 956
                self.switch_expression()
                self.state = 961
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Switch_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def range_expression(self):
            return self.getTypedRuleContext(CSharpParser.Range_expressionContext,0)


        def SWITCH(self):
            return self.getToken(CSharpParser.SWITCH, 0)

        def OPEN_BRACE(self):
            return self.getToken(CSharpParser.OPEN_BRACE, 0)

        def CLOSE_BRACE(self):
            return self.getToken(CSharpParser.CLOSE_BRACE, 0)

        def switch_expression_arms(self):
            return self.getTypedRuleContext(CSharpParser.Switch_expression_armsContext,0)


        def COMMA(self):
            return self.getToken(CSharpParser.COMMA, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_switch_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSwitch_expression" ):
                listener.enterSwitch_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSwitch_expression" ):
                listener.exitSwitch_expression(self)




    def switch_expression(self):

        localctx = CSharpParser.Switch_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_switch_expression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 962
            self.range_expression()
            self.state = 972
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==100:
                self.state = 963
                self.match(CSharpParser.SWITCH)
                self.state = 964
                self.match(CSharpParser.OPEN_BRACE)
                self.state = 969
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 4921388326695449600) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -372256532389025829) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & 9010524621507327) != 0):
                    self.state = 965
                    self.switch_expression_arms()
                    self.state = 967
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==142:
                        self.state = 966
                        self.match(CSharpParser.COMMA)




                self.state = 971
                self.match(CSharpParser.CLOSE_BRACE)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Switch_expression_armsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def switch_expression_arm(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Switch_expression_armContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Switch_expression_armContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.COMMA)
            else:
                return self.getToken(CSharpParser.COMMA, i)

        def getRuleIndex(self):
            return CSharpParser.RULE_switch_expression_arms

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSwitch_expression_arms" ):
                listener.enterSwitch_expression_arms(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSwitch_expression_arms" ):
                listener.exitSwitch_expression_arms(self)




    def switch_expression_arms(self):

        localctx = CSharpParser.Switch_expression_armsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_switch_expression_arms)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 974
            self.switch_expression_arm()
            self.state = 979
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,60,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 975
                    self.match(CSharpParser.COMMA)
                    self.state = 976
                    self.switch_expression_arm() 
                self.state = 981
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,60,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Switch_expression_armContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pattern(self):
            return self.getTypedRuleContext(CSharpParser.PatternContext,0)


        def right_arrow(self):
            return self.getTypedRuleContext(CSharpParser.Right_arrowContext,0)


        def throwable_expression(self):
            return self.getTypedRuleContext(CSharpParser.Throwable_expressionContext,0)


        def case_guard(self):
            return self.getTypedRuleContext(CSharpParser.Case_guardContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_switch_expression_arm

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSwitch_expression_arm" ):
                listener.enterSwitch_expression_arm(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSwitch_expression_arm" ):
                listener.exitSwitch_expression_arm(self)




    def switch_expression_arm(self):

        localctx = CSharpParser.Switch_expression_armContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_switch_expression_arm)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 982
            self.pattern()
            self.state = 984
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==118:
                self.state = 983
                self.case_guard()


            self.state = 986
            self.right_arrow()
            self.state = 987
            self.throwable_expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Range_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def unary_expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Unary_expressionContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Unary_expressionContext,i)


        def OP_RANGE(self):
            return self.getToken(CSharpParser.OP_RANGE, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_range_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRange_expression" ):
                listener.enterRange_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRange_expression" ):
                listener.exitRange_expression(self)




    def range_expression(self):

        localctx = CSharpParser.Range_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_range_expression)
        self._la = 0 # Token type
        try:
            self.state = 997
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,64,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 989
                self.unary_expression()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 991
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 4921388326695449600) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -376760140616816805) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & 25892358783) != 0):
                    self.state = 990
                    self.unary_expression()


                self.state = 993
                self.match(CSharpParser.OP_RANGE)
                self.state = 995
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,63,self._ctx)
                if la_ == 1:
                    self.state = 994
                    self.unary_expression()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Unary_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def cast_expression(self):
            return self.getTypedRuleContext(CSharpParser.Cast_expressionContext,0)


        def primary_expression(self):
            return self.getTypedRuleContext(CSharpParser.Primary_expressionContext,0)


        def PLUS(self):
            return self.getToken(CSharpParser.PLUS, 0)

        def unary_expression(self):
            return self.getTypedRuleContext(CSharpParser.Unary_expressionContext,0)


        def MINUS(self):
            return self.getToken(CSharpParser.MINUS, 0)

        def BANG(self):
            return self.getToken(CSharpParser.BANG, 0)

        def TILDE(self):
            return self.getToken(CSharpParser.TILDE, 0)

        def OP_INC(self):
            return self.getToken(CSharpParser.OP_INC, 0)

        def OP_DEC(self):
            return self.getToken(CSharpParser.OP_DEC, 0)

        def AWAIT(self):
            return self.getToken(CSharpParser.AWAIT, 0)

        def AMP(self):
            return self.getToken(CSharpParser.AMP, 0)

        def STAR(self):
            return self.getToken(CSharpParser.STAR, 0)

        def CARET(self):
            return self.getToken(CSharpParser.CARET, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_unary_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnary_expression" ):
                listener.enterUnary_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnary_expression" ):
                listener.exitUnary_expression(self)




    def unary_expression(self):

        localctx = CSharpParser.Unary_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_unary_expression)
        try:
            self.state = 1021
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,65,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 999
                self.cast_expression()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1000
                self.primary_expression()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1001
                self.match(CSharpParser.PLUS)
                self.state = 1002
                self.unary_expression()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1003
                self.match(CSharpParser.MINUS)
                self.state = 1004
                self.unary_expression()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1005
                self.match(CSharpParser.BANG)
                self.state = 1006
                self.unary_expression()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1007
                self.match(CSharpParser.TILDE)
                self.state = 1008
                self.unary_expression()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1009
                self.match(CSharpParser.OP_INC)
                self.state = 1010
                self.unary_expression()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 1011
                self.match(CSharpParser.OP_DEC)
                self.state = 1012
                self.unary_expression()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 1013
                self.match(CSharpParser.AWAIT)
                self.state = 1014
                self.unary_expression()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 1015
                self.match(CSharpParser.AMP)
                self.state = 1016
                self.unary_expression()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 1017
                self.match(CSharpParser.STAR)
                self.state = 1018
                self.unary_expression()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 1019
                self.match(CSharpParser.CARET)
                self.state = 1020
                self.unary_expression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Cast_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PARENS(self):
            return self.getToken(CSharpParser.OPEN_PARENS, 0)

        def type_(self):
            return self.getTypedRuleContext(CSharpParser.Type_Context,0)


        def CLOSE_PARENS(self):
            return self.getToken(CSharpParser.CLOSE_PARENS, 0)

        def unary_expression(self):
            return self.getTypedRuleContext(CSharpParser.Unary_expressionContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_cast_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCast_expression" ):
                listener.enterCast_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCast_expression" ):
                listener.exitCast_expression(self)




    def cast_expression(self):

        localctx = CSharpParser.Cast_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_cast_expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1023
            self.match(CSharpParser.OPEN_PARENS)
            self.state = 1024
            self.type_()
            self.state = 1025
            self.match(CSharpParser.CLOSE_PARENS)
            self.state = 1026
            self.unary_expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Collection_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_BRACKET(self):
            return self.getToken(CSharpParser.OPEN_BRACKET, 0)

        def CLOSE_BRACKET(self):
            return self.getToken(CSharpParser.CLOSE_BRACKET, 0)

        def collection_element_list(self):
            return self.getTypedRuleContext(CSharpParser.Collection_element_listContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_collection_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCollection_expression" ):
                listener.enterCollection_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCollection_expression" ):
                listener.exitCollection_expression(self)




    def collection_expression(self):

        localctx = CSharpParser.Collection_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_collection_expression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1028
            self.match(CSharpParser.OPEN_BRACKET)
            self.state = 1030
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 4921388326695449600) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -376760132018493605) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & 9007225147099775) != 0):
                self.state = 1029
                self.collection_element_list()


            self.state = 1032
            self.match(CSharpParser.CLOSE_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Collection_element_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def collection_element(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Collection_elementContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Collection_elementContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.COMMA)
            else:
                return self.getToken(CSharpParser.COMMA, i)

        def getRuleIndex(self):
            return CSharpParser.RULE_collection_element_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCollection_element_list" ):
                listener.enterCollection_element_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCollection_element_list" ):
                listener.exitCollection_element_list(self)




    def collection_element_list(self):

        localctx = CSharpParser.Collection_element_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_collection_element_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1034
            self.collection_element()
            self.state = 1039
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==142:
                self.state = 1035
                self.match(CSharpParser.COMMA)
                self.state = 1036
                self.collection_element()
                self.state = 1041
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Collection_elementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(CSharpParser.ExpressionContext,0)


        def OP_RANGE(self):
            return self.getToken(CSharpParser.OP_RANGE, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_collection_element

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCollection_element" ):
                listener.enterCollection_element(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCollection_element" ):
                listener.exitCollection_element(self)




    def collection_element(self):

        localctx = CSharpParser.Collection_elementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_collection_element)
        try:
            self.state = 1045
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,68,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1042
                self.expression()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1043
                self.match(CSharpParser.OP_RANGE)
                self.state = 1044
                self.expression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Primary_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.pe = None # Primary_expression_startContext

        def primary_expression_start(self):
            return self.getTypedRuleContext(CSharpParser.Primary_expression_startContext,0)


        def BANG(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.BANG)
            else:
                return self.getToken(CSharpParser.BANG, i)

        def bracket_expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Bracket_expressionContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Bracket_expressionContext,i)


        def member_access(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Member_accessContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Member_accessContext,i)


        def method_invocation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Method_invocationContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Method_invocationContext,i)


        def OP_INC(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.OP_INC)
            else:
                return self.getToken(CSharpParser.OP_INC, i)

        def OP_DEC(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.OP_DEC)
            else:
                return self.getToken(CSharpParser.OP_DEC, i)

        def OP_PTR(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.OP_PTR)
            else:
                return self.getToken(CSharpParser.OP_PTR, i)

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(CSharpParser.IdentifierContext,i)


        def tuple_type(self):
            return self.getTypedRuleContext(CSharpParser.Tuple_typeContext,0)


        def default_value_expression(self):
            return self.getTypedRuleContext(CSharpParser.Default_value_expressionContext,0)


        def stackalloc_expression(self):
            return self.getTypedRuleContext(CSharpParser.Stackalloc_expressionContext,0)


        def collection_expression(self):
            return self.getTypedRuleContext(CSharpParser.Collection_expressionContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_primary_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrimary_expression" ):
                listener.enterPrimary_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrimary_expression" ):
                listener.exitPrimary_expression(self)




    def primary_expression(self):

        localctx = CSharpParser.Primary_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_primary_expression)
        self._la = 0 # Token type
        try:
            self.state = 1089
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,77,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1047
                localctx.pe = self.primary_expression_start()
                self.state = 1049
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,69,self._ctx)
                if la_ == 1:
                    self.state = 1048
                    self.match(CSharpParser.BANG)


                self.state = 1054
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,70,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1051
                        self.bracket_expression() 
                    self.state = 1056
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,70,self._ctx)

                self.state = 1058
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==153:
                    self.state = 1057
                    self.match(CSharpParser.BANG)


                self.state = 1082
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,76,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1066
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [141, 158]:
                            self.state = 1060
                            self.member_access()
                            pass
                        elif token in [10, 12, 13, 15, 16, 17, 18, 19, 21, 22, 25, 26, 30, 31, 32, 33, 35, 36, 39, 43, 46, 50, 51, 54, 58, 62, 64, 65, 67, 68, 70, 72, 73, 74, 77, 81, 88, 90, 92, 93, 94, 95, 96, 98, 101, 103, 105, 107, 108, 109, 110, 112, 114, 118, 119, 121, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 137, 139]:
                            self.state = 1061
                            self.method_invocation()
                            pass
                        elif token in [161]:
                            self.state = 1062
                            self.match(CSharpParser.OP_INC)
                            pass
                        elif token in [162]:
                            self.state = 1063
                            self.match(CSharpParser.OP_DEC)
                            pass
                        elif token in [165]:
                            self.state = 1064
                            self.match(CSharpParser.OP_PTR)
                            self.state = 1065
                            self.identifier()
                            pass
                        else:
                            raise NoViableAltException(self)

                        self.state = 1069
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,73,self._ctx)
                        if la_ == 1:
                            self.state = 1068
                            self.match(CSharpParser.BANG)


                        self.state = 1074
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,74,self._ctx)
                        while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                            if _alt==1:
                                self.state = 1071
                                self.bracket_expression() 
                            self.state = 1076
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input,74,self._ctx)

                        self.state = 1078
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==153:
                            self.state = 1077
                            self.match(CSharpParser.BANG)

                 
                    self.state = 1084
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,76,self._ctx)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1085
                self.tuple_type()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1086
                self.default_value_expression()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1087
                self.stackalloc_expression()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1088
                self.collection_expression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Primary_expression_startContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CSharpParser.RULE_primary_expression_start

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class LiteralAccessExpressionContext(Primary_expression_startContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CSharpParser.Primary_expression_startContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LITERAL_ACCESS(self):
            return self.getToken(CSharpParser.LITERAL_ACCESS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLiteralAccessExpression" ):
                listener.enterLiteralAccessExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLiteralAccessExpression" ):
                listener.exitLiteralAccessExpression(self)


    class DefaultValueExpressionContext(Primary_expression_startContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CSharpParser.Primary_expression_startContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DEFAULT(self):
            return self.getToken(CSharpParser.DEFAULT, 0)
        def OPEN_PARENS(self):
            return self.getToken(CSharpParser.OPEN_PARENS, 0)
        def type_(self):
            return self.getTypedRuleContext(CSharpParser.Type_Context,0)

        def CLOSE_PARENS(self):
            return self.getToken(CSharpParser.CLOSE_PARENS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDefaultValueExpression" ):
                listener.enterDefaultValueExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDefaultValueExpression" ):
                listener.exitDefaultValueExpression(self)


    class BaseAccessExpressionContext(Primary_expression_startContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CSharpParser.Primary_expression_startContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def BASE(self):
            return self.getToken(CSharpParser.BASE, 0)
        def DOT(self):
            return self.getToken(CSharpParser.DOT, 0)
        def identifier(self):
            return self.getTypedRuleContext(CSharpParser.IdentifierContext,0)

        def OPEN_BRACKET(self):
            return self.getToken(CSharpParser.OPEN_BRACKET, 0)
        def expression_list(self):
            return self.getTypedRuleContext(CSharpParser.Expression_listContext,0)

        def CLOSE_BRACKET(self):
            return self.getToken(CSharpParser.CLOSE_BRACKET, 0)
        def type_argument_list(self):
            return self.getTypedRuleContext(CSharpParser.Type_argument_listContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBaseAccessExpression" ):
                listener.enterBaseAccessExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBaseAccessExpression" ):
                listener.exitBaseAccessExpression(self)


    class SizeofExpressionContext(Primary_expression_startContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CSharpParser.Primary_expression_startContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SIZEOF(self):
            return self.getToken(CSharpParser.SIZEOF, 0)
        def OPEN_PARENS(self):
            return self.getToken(CSharpParser.OPEN_PARENS, 0)
        def type_(self):
            return self.getTypedRuleContext(CSharpParser.Type_Context,0)

        def CLOSE_PARENS(self):
            return self.getToken(CSharpParser.CLOSE_PARENS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSizeofExpression" ):
                listener.enterSizeofExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSizeofExpression" ):
                listener.exitSizeofExpression(self)


    class ParenthesisExpressionsContext(Primary_expression_startContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CSharpParser.Primary_expression_startContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def OPEN_PARENS(self):
            return self.getToken(CSharpParser.OPEN_PARENS, 0)
        def expression(self):
            return self.getTypedRuleContext(CSharpParser.ExpressionContext,0)

        def CLOSE_PARENS(self):
            return self.getToken(CSharpParser.CLOSE_PARENS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParenthesisExpressions" ):
                listener.enterParenthesisExpressions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParenthesisExpressions" ):
                listener.exitParenthesisExpressions(self)


    class TargetTypedNewExpressionContext(Primary_expression_startContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CSharpParser.Primary_expression_startContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def NEW(self):
            return self.getToken(CSharpParser.NEW, 0)
        def target_typed_new(self):
            return self.getTypedRuleContext(CSharpParser.Target_typed_newContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTargetTypedNewExpression" ):
                listener.enterTargetTypedNewExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTargetTypedNewExpression" ):
                listener.exitTargetTypedNewExpression(self)


    class ThisReferenceExpressionContext(Primary_expression_startContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CSharpParser.Primary_expression_startContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def THIS(self):
            return self.getToken(CSharpParser.THIS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterThisReferenceExpression" ):
                listener.enterThisReferenceExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitThisReferenceExpression" ):
                listener.exitThisReferenceExpression(self)


    class ObjectCreationExpressionContext(Primary_expression_startContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CSharpParser.Primary_expression_startContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def NEW(self):
            return self.getToken(CSharpParser.NEW, 0)
        def type_(self):
            return self.getTypedRuleContext(CSharpParser.Type_Context,0)

        def anonymous_object_initializer(self):
            return self.getTypedRuleContext(CSharpParser.Anonymous_object_initializerContext,0)

        def rank_specifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Rank_specifierContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Rank_specifierContext,i)

        def array_initializer(self):
            return self.getTypedRuleContext(CSharpParser.Array_initializerContext,0)

        def object_creation_expression(self):
            return self.getTypedRuleContext(CSharpParser.Object_creation_expressionContext,0)

        def object_or_collection_initializer(self):
            return self.getTypedRuleContext(CSharpParser.Object_or_collection_initializerContext,0)

        def OPEN_BRACKET(self):
            return self.getToken(CSharpParser.OPEN_BRACKET, 0)
        def expression_list(self):
            return self.getTypedRuleContext(CSharpParser.Expression_listContext,0)

        def CLOSE_BRACKET(self):
            return self.getToken(CSharpParser.CLOSE_BRACKET, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterObjectCreationExpression" ):
                listener.enterObjectCreationExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitObjectCreationExpression" ):
                listener.exitObjectCreationExpression(self)


    class AnonymousMethodExpressionContext(Primary_expression_startContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CSharpParser.Primary_expression_startContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DELEGATE(self):
            return self.getToken(CSharpParser.DELEGATE, 0)
        def block(self):
            return self.getTypedRuleContext(CSharpParser.BlockContext,0)

        def ASYNC(self):
            return self.getToken(CSharpParser.ASYNC, 0)
        def OPEN_PARENS(self):
            return self.getToken(CSharpParser.OPEN_PARENS, 0)
        def CLOSE_PARENS(self):
            return self.getToken(CSharpParser.CLOSE_PARENS, 0)
        def explicit_anonymous_function_parameter_list(self):
            return self.getTypedRuleContext(CSharpParser.Explicit_anonymous_function_parameter_listContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnonymousMethodExpression" ):
                listener.enterAnonymousMethodExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnonymousMethodExpression" ):
                listener.exitAnonymousMethodExpression(self)


    class TypeofExpressionContext(Primary_expression_startContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CSharpParser.Primary_expression_startContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def TYPEOF(self):
            return self.getToken(CSharpParser.TYPEOF, 0)
        def OPEN_PARENS(self):
            return self.getToken(CSharpParser.OPEN_PARENS, 0)
        def CLOSE_PARENS(self):
            return self.getToken(CSharpParser.CLOSE_PARENS, 0)
        def unbound_type_name(self):
            return self.getTypedRuleContext(CSharpParser.Unbound_type_nameContext,0)

        def type_(self):
            return self.getTypedRuleContext(CSharpParser.Type_Context,0)

        def VOID(self):
            return self.getToken(CSharpParser.VOID, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeofExpression" ):
                listener.enterTypeofExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeofExpression" ):
                listener.exitTypeofExpression(self)


    class TupleExpressionContext(Primary_expression_startContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CSharpParser.Primary_expression_startContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def OPEN_PARENS(self):
            return self.getToken(CSharpParser.OPEN_PARENS, 0)
        def argument(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.ArgumentContext)
            else:
                return self.getTypedRuleContext(CSharpParser.ArgumentContext,i)

        def CLOSE_PARENS(self):
            return self.getToken(CSharpParser.CLOSE_PARENS, 0)
        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.COMMA)
            else:
                return self.getToken(CSharpParser.COMMA, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTupleExpression" ):
                listener.enterTupleExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTupleExpression" ):
                listener.exitTupleExpression(self)


    class UncheckedExpressionContext(Primary_expression_startContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CSharpParser.Primary_expression_startContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def UNCHECKED(self):
            return self.getToken(CSharpParser.UNCHECKED, 0)
        def OPEN_PARENS(self):
            return self.getToken(CSharpParser.OPEN_PARENS, 0)
        def expression(self):
            return self.getTypedRuleContext(CSharpParser.ExpressionContext,0)

        def CLOSE_PARENS(self):
            return self.getToken(CSharpParser.CLOSE_PARENS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUncheckedExpression" ):
                listener.enterUncheckedExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUncheckedExpression" ):
                listener.exitUncheckedExpression(self)


    class SimpleNameExpressionContext(Primary_expression_startContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CSharpParser.Primary_expression_startContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def identifier(self):
            return self.getTypedRuleContext(CSharpParser.IdentifierContext,0)

        def type_argument_list(self):
            return self.getTypedRuleContext(CSharpParser.Type_argument_listContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleNameExpression" ):
                listener.enterSimpleNameExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleNameExpression" ):
                listener.exitSimpleNameExpression(self)


    class MemberAccessExpressionContext(Primary_expression_startContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CSharpParser.Primary_expression_startContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def predefined_type(self):
            return self.getTypedRuleContext(CSharpParser.Predefined_typeContext,0)

        def qualified_alias_member(self):
            return self.getTypedRuleContext(CSharpParser.Qualified_alias_memberContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMemberAccessExpression" ):
                listener.enterMemberAccessExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMemberAccessExpression" ):
                listener.exitMemberAccessExpression(self)


    class CheckedExpressionContext(Primary_expression_startContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CSharpParser.Primary_expression_startContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CHECKED(self):
            return self.getToken(CSharpParser.CHECKED, 0)
        def OPEN_PARENS(self):
            return self.getToken(CSharpParser.OPEN_PARENS, 0)
        def expression(self):
            return self.getTypedRuleContext(CSharpParser.ExpressionContext,0)

        def CLOSE_PARENS(self):
            return self.getToken(CSharpParser.CLOSE_PARENS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCheckedExpression" ):
                listener.enterCheckedExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCheckedExpression" ):
                listener.exitCheckedExpression(self)


    class LiteralExpressionContext(Primary_expression_startContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CSharpParser.Primary_expression_startContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def literal(self):
            return self.getTypedRuleContext(CSharpParser.LiteralContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLiteralExpression" ):
                listener.enterLiteralExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLiteralExpression" ):
                listener.exitLiteralExpression(self)


    class NameofExpressionContext(Primary_expression_startContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CSharpParser.Primary_expression_startContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def NAMEOF(self):
            return self.getToken(CSharpParser.NAMEOF, 0)
        def OPEN_PARENS(self):
            return self.getToken(CSharpParser.OPEN_PARENS, 0)
        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(CSharpParser.IdentifierContext,i)

        def CLOSE_PARENS(self):
            return self.getToken(CSharpParser.CLOSE_PARENS, 0)
        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.DOT)
            else:
                return self.getToken(CSharpParser.DOT, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNameofExpression" ):
                listener.enterNameofExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNameofExpression" ):
                listener.exitNameofExpression(self)



    def primary_expression_start(self):

        localctx = CSharpParser.Primary_expression_startContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_primary_expression_start)
        self._la = 0 # Token type
        try:
            self.state = 1214
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,93,self._ctx)
            if la_ == 1:
                localctx = CSharpParser.LiteralExpressionContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1091
                self.literal()
                pass

            elif la_ == 2:
                localctx = CSharpParser.SimpleNameExpressionContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1092
                self.identifier()
                self.state = 1094
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,78,self._ctx)
                if la_ == 1:
                    self.state = 1093
                    self.type_argument_list()


                pass

            elif la_ == 3:
                localctx = CSharpParser.ParenthesisExpressionsContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 1096
                self.match(CSharpParser.OPEN_PARENS)
                self.state = 1097
                self.expression()
                self.state = 1098
                self.match(CSharpParser.CLOSE_PARENS)
                pass

            elif la_ == 4:
                localctx = CSharpParser.MemberAccessExpressionContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 1100
                self.predefined_type()
                pass

            elif la_ == 5:
                localctx = CSharpParser.MemberAccessExpressionContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 1101
                self.qualified_alias_member()
                pass

            elif la_ == 6:
                localctx = CSharpParser.LiteralAccessExpressionContext(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 1102
                self.match(CSharpParser.LITERAL_ACCESS)
                pass

            elif la_ == 7:
                localctx = CSharpParser.ThisReferenceExpressionContext(self, localctx)
                self.enterOuterAlt(localctx, 7)
                self.state = 1103
                self.match(CSharpParser.THIS)
                pass

            elif la_ == 8:
                localctx = CSharpParser.BaseAccessExpressionContext(self, localctx)
                self.enterOuterAlt(localctx, 8)
                self.state = 1104
                self.match(CSharpParser.BASE)
                self.state = 1114
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [141]:
                    self.state = 1105
                    self.match(CSharpParser.DOT)
                    self.state = 1106
                    self.identifier()
                    self.state = 1108
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,79,self._ctx)
                    if la_ == 1:
                        self.state = 1107
                        self.type_argument_list()


                    pass
                elif token in [137]:
                    self.state = 1110
                    self.match(CSharpParser.OPEN_BRACKET)
                    self.state = 1111
                    self.expression_list()
                    self.state = 1112
                    self.match(CSharpParser.CLOSE_BRACKET)
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 9:
                localctx = CSharpParser.ObjectCreationExpressionContext(self, localctx)
                self.enterOuterAlt(localctx, 9)
                self.state = 1116
                self.match(CSharpParser.NEW)
                self.state = 1145
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,85,self._ctx)
                if la_ == 1:
                    self.state = 1117
                    self.type_()
                    self.state = 1139
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,84,self._ctx)
                    if la_ == 1:
                        self.state = 1118
                        self.object_creation_expression()
                        pass

                    elif la_ == 2:
                        self.state = 1119
                        self.object_or_collection_initializer()
                        pass

                    elif la_ == 3:
                        self.state = 1120
                        self.match(CSharpParser.OPEN_BRACKET)
                        self.state = 1121
                        self.expression_list()
                        self.state = 1122
                        self.match(CSharpParser.CLOSE_BRACKET)
                        self.state = 1126
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,81,self._ctx)
                        while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                            if _alt==1:
                                self.state = 1123
                                self.rank_specifier() 
                            self.state = 1128
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input,81,self._ctx)

                        self.state = 1130
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 1129
                            self.array_initializer()


                        pass

                    elif la_ == 4:
                        self.state = 1133 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while True:
                            self.state = 1132
                            self.rank_specifier()
                            self.state = 1135 
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if not (_la==137):
                                break

                        self.state = 1137
                        self.array_initializer()
                        pass



                elif la_ == 2:
                    self.state = 1141
                    self.anonymous_object_initializer()

                elif la_ == 3:
                    self.state = 1142
                    self.rank_specifier()
                    self.state = 1143
                    self.array_initializer()


                pass

            elif la_ == 10:
                localctx = CSharpParser.TargetTypedNewExpressionContext(self, localctx)
                self.enterOuterAlt(localctx, 10)
                self.state = 1147
                self.match(CSharpParser.NEW)
                self.state = 1148
                self.target_typed_new()
                pass

            elif la_ == 11:
                localctx = CSharpParser.TupleExpressionContext(self, localctx)
                self.enterOuterAlt(localctx, 11)
                self.state = 1149
                self.match(CSharpParser.OPEN_PARENS)
                self.state = 1150
                self.argument()
                self.state = 1153 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 1151
                    self.match(CSharpParser.COMMA)
                    self.state = 1152
                    self.argument()
                    self.state = 1155 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==142):
                        break

                self.state = 1157
                self.match(CSharpParser.CLOSE_PARENS)
                pass

            elif la_ == 12:
                localctx = CSharpParser.TypeofExpressionContext(self, localctx)
                self.enterOuterAlt(localctx, 12)
                self.state = 1159
                self.match(CSharpParser.TYPEOF)
                self.state = 1160
                self.match(CSharpParser.OPEN_PARENS)
                self.state = 1164
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,87,self._ctx)
                if la_ == 1:
                    self.state = 1161
                    self.unbound_type_name()
                    pass

                elif la_ == 2:
                    self.state = 1162
                    self.type_()
                    pass

                elif la_ == 3:
                    self.state = 1163
                    self.match(CSharpParser.VOID)
                    pass


                self.state = 1166
                self.match(CSharpParser.CLOSE_PARENS)
                pass

            elif la_ == 13:
                localctx = CSharpParser.CheckedExpressionContext(self, localctx)
                self.enterOuterAlt(localctx, 13)
                self.state = 1167
                self.match(CSharpParser.CHECKED)
                self.state = 1168
                self.match(CSharpParser.OPEN_PARENS)
                self.state = 1169
                self.expression()
                self.state = 1170
                self.match(CSharpParser.CLOSE_PARENS)
                pass

            elif la_ == 14:
                localctx = CSharpParser.UncheckedExpressionContext(self, localctx)
                self.enterOuterAlt(localctx, 14)
                self.state = 1172
                self.match(CSharpParser.UNCHECKED)
                self.state = 1173
                self.match(CSharpParser.OPEN_PARENS)
                self.state = 1174
                self.expression()
                self.state = 1175
                self.match(CSharpParser.CLOSE_PARENS)
                pass

            elif la_ == 15:
                localctx = CSharpParser.DefaultValueExpressionContext(self, localctx)
                self.enterOuterAlt(localctx, 15)
                self.state = 1177
                self.match(CSharpParser.DEFAULT)
                self.state = 1182
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,88,self._ctx)
                if la_ == 1:
                    self.state = 1178
                    self.match(CSharpParser.OPEN_PARENS)
                    self.state = 1179
                    self.type_()
                    self.state = 1180
                    self.match(CSharpParser.CLOSE_PARENS)


                pass

            elif la_ == 16:
                localctx = CSharpParser.AnonymousMethodExpressionContext(self, localctx)
                self.enterOuterAlt(localctx, 16)
                self.state = 1185
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==16:
                    self.state = 1184
                    self.match(CSharpParser.ASYNC)


                self.state = 1187
                self.match(CSharpParser.DELEGATE)
                self.state = 1193
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==139:
                    self.state = 1188
                    self.match(CSharpParser.OPEN_PARENS)
                    self.state = 1190
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & 5065494716463428608) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 780626886595339803) != 0) or _la==137 or _la==139:
                        self.state = 1189
                        self.explicit_anonymous_function_parameter_list()


                    self.state = 1192
                    self.match(CSharpParser.CLOSE_PARENS)


                self.state = 1195
                self.block()
                pass

            elif la_ == 17:
                localctx = CSharpParser.SizeofExpressionContext(self, localctx)
                self.enterOuterAlt(localctx, 17)
                self.state = 1196
                self.match(CSharpParser.SIZEOF)
                self.state = 1197
                self.match(CSharpParser.OPEN_PARENS)
                self.state = 1198
                self.type_()
                self.state = 1199
                self.match(CSharpParser.CLOSE_PARENS)
                pass

            elif la_ == 18:
                localctx = CSharpParser.NameofExpressionContext(self, localctx)
                self.enterOuterAlt(localctx, 18)
                self.state = 1201
                self.match(CSharpParser.NAMEOF)
                self.state = 1202
                self.match(CSharpParser.OPEN_PARENS)
                self.state = 1208
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,92,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1203
                        self.identifier()
                        self.state = 1204
                        self.match(CSharpParser.DOT) 
                    self.state = 1210
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,92,self._ctx)

                self.state = 1211
                self.identifier()
                self.state = 1212
                self.match(CSharpParser.CLOSE_PARENS)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Throwable_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(CSharpParser.ExpressionContext,0)


        def throw_expression(self):
            return self.getTypedRuleContext(CSharpParser.Throw_expressionContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_throwable_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterThrowable_expression" ):
                listener.enterThrowable_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitThrowable_expression" ):
                listener.exitThrowable_expression(self)




    def throwable_expression(self):

        localctx = CSharpParser.Throwable_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_throwable_expression)
        try:
            self.state = 1218
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [10, 12, 13, 15, 16, 17, 18, 19, 21, 22, 25, 26, 30, 31, 32, 33, 35, 36, 39, 43, 46, 50, 51, 54, 58, 62, 64, 65, 67, 68, 70, 72, 73, 74, 77, 81, 87, 88, 90, 92, 93, 94, 95, 96, 97, 98, 101, 103, 105, 107, 108, 109, 110, 112, 114, 118, 119, 121, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 137, 139, 145, 146, 147, 150, 152, 153, 154, 161, 162, 181]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1216
                self.expression()
                pass
            elif token in [102]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1217
                self.throw_expression()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Throw_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def THROW(self):
            return self.getToken(CSharpParser.THROW, 0)

        def expression(self):
            return self.getTypedRuleContext(CSharpParser.ExpressionContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_throw_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterThrow_expression" ):
                listener.enterThrow_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitThrow_expression" ):
                listener.exitThrow_expression(self)




    def throw_expression(self):

        localctx = CSharpParser.Throw_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_throw_expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1220
            self.match(CSharpParser.THROW)
            self.state = 1221
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Member_accessContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DOT(self):
            return self.getToken(CSharpParser.DOT, 0)

        def identifier(self):
            return self.getTypedRuleContext(CSharpParser.IdentifierContext,0)


        def INTERR(self):
            return self.getToken(CSharpParser.INTERR, 0)

        def type_argument_list(self):
            return self.getTypedRuleContext(CSharpParser.Type_argument_listContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_member_access

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMember_access" ):
                listener.enterMember_access(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMember_access" ):
                listener.exitMember_access(self)




    def member_access(self):

        localctx = CSharpParser.Member_accessContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_member_access)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1224
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==158:
                self.state = 1223
                self.match(CSharpParser.INTERR)


            self.state = 1226
            self.match(CSharpParser.DOT)
            self.state = 1227
            self.identifier()
            self.state = 1229
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,96,self._ctx)
            if la_ == 1:
                self.state = 1228
                self.type_argument_list()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Bracket_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_BRACKET(self):
            return self.getToken(CSharpParser.OPEN_BRACKET, 0)

        def indexer_argument(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Indexer_argumentContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Indexer_argumentContext,i)


        def CLOSE_BRACKET(self):
            return self.getToken(CSharpParser.CLOSE_BRACKET, 0)

        def INTERR(self):
            return self.getToken(CSharpParser.INTERR, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.COMMA)
            else:
                return self.getToken(CSharpParser.COMMA, i)

        def getRuleIndex(self):
            return CSharpParser.RULE_bracket_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBracket_expression" ):
                listener.enterBracket_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBracket_expression" ):
                listener.exitBracket_expression(self)




    def bracket_expression(self):

        localctx = CSharpParser.Bracket_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_bracket_expression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1232
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==158:
                self.state = 1231
                self.match(CSharpParser.INTERR)


            self.state = 1234
            self.match(CSharpParser.OPEN_BRACKET)
            self.state = 1235
            self.indexer_argument()
            self.state = 1240
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==142:
                self.state = 1236
                self.match(CSharpParser.COMMA)
                self.state = 1237
                self.indexer_argument()
                self.state = 1242
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1243
            self.match(CSharpParser.CLOSE_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Indexer_argumentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(CSharpParser.ExpressionContext,0)


        def identifier(self):
            return self.getTypedRuleContext(CSharpParser.IdentifierContext,0)


        def COLON(self):
            return self.getToken(CSharpParser.COLON, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_indexer_argument

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndexer_argument" ):
                listener.enterIndexer_argument(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndexer_argument" ):
                listener.exitIndexer_argument(self)




    def indexer_argument(self):

        localctx = CSharpParser.Indexer_argumentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_indexer_argument)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1248
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,99,self._ctx)
            if la_ == 1:
                self.state = 1245
                self.identifier()
                self.state = 1246
                self.match(CSharpParser.COLON)


            self.state = 1250
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Predefined_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BOOL(self):
            return self.getToken(CSharpParser.BOOL, 0)

        def BYTE(self):
            return self.getToken(CSharpParser.BYTE, 0)

        def CHAR(self):
            return self.getToken(CSharpParser.CHAR, 0)

        def DECIMAL(self):
            return self.getToken(CSharpParser.DECIMAL, 0)

        def DOUBLE(self):
            return self.getToken(CSharpParser.DOUBLE, 0)

        def FLOAT(self):
            return self.getToken(CSharpParser.FLOAT, 0)

        def INT(self):
            return self.getToken(CSharpParser.INT, 0)

        def LONG(self):
            return self.getToken(CSharpParser.LONG, 0)

        def OBJECT(self):
            return self.getToken(CSharpParser.OBJECT, 0)

        def SBYTE(self):
            return self.getToken(CSharpParser.SBYTE, 0)

        def SHORT(self):
            return self.getToken(CSharpParser.SHORT, 0)

        def STRING(self):
            return self.getToken(CSharpParser.STRING, 0)

        def UINT(self):
            return self.getToken(CSharpParser.UINT, 0)

        def ULONG(self):
            return self.getToken(CSharpParser.ULONG, 0)

        def USHORT(self):
            return self.getToken(CSharpParser.USHORT, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_predefined_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPredefined_type" ):
                listener.enterPredefined_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPredefined_type" ):
                listener.exitPredefined_type(self)




    def predefined_type(self):

        localctx = CSharpParser.Predefined_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_predefined_type)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1252
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 288300780367642624) != 0) or ((((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & 38485197062209) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Expression_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(CSharpParser.ExpressionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.COMMA)
            else:
                return self.getToken(CSharpParser.COMMA, i)

        def getRuleIndex(self):
            return CSharpParser.RULE_expression_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpression_list" ):
                listener.enterExpression_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpression_list" ):
                listener.exitExpression_list(self)




    def expression_list(self):

        localctx = CSharpParser.Expression_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_expression_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1254
            self.expression()
            self.state = 1259
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==142:
                self.state = 1255
                self.match(CSharpParser.COMMA)
                self.state = 1256
                self.expression()
                self.state = 1261
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Object_or_collection_initializerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def object_initializer(self):
            return self.getTypedRuleContext(CSharpParser.Object_initializerContext,0)


        def collection_initializer(self):
            return self.getTypedRuleContext(CSharpParser.Collection_initializerContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_object_or_collection_initializer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterObject_or_collection_initializer" ):
                listener.enterObject_or_collection_initializer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitObject_or_collection_initializer" ):
                listener.exitObject_or_collection_initializer(self)




    def object_or_collection_initializer(self):

        localctx = CSharpParser.Object_or_collection_initializerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_object_or_collection_initializer)
        try:
            self.state = 1264
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,101,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1262
                self.object_initializer()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1263
                self.collection_initializer()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Object_initializerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_BRACE(self):
            return self.getToken(CSharpParser.OPEN_BRACE, 0)

        def CLOSE_BRACE(self):
            return self.getToken(CSharpParser.CLOSE_BRACE, 0)

        def member_initializer_list(self):
            return self.getTypedRuleContext(CSharpParser.Member_initializer_listContext,0)


        def COMMA(self):
            return self.getToken(CSharpParser.COMMA, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_object_initializer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterObject_initializer" ):
                listener.enterObject_initializer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitObject_initializer" ):
                listener.exitObject_initializer(self)




    def object_initializer(self):

        localctx = CSharpParser.Object_initializerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_object_initializer)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1266
            self.match(CSharpParser.OPEN_BRACE)
            self.state = 1271
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 10)) & ~0x3f) == 0 and ((1 << (_la - 10)) & 346798062640826605) != 0) or ((((_la - 74)) & ~0x3f) == 0 and ((1 << (_la - 74)) & -9222614404622958455) != 0):
                self.state = 1267
                self.member_initializer_list()
                self.state = 1269
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==142:
                    self.state = 1268
                    self.match(CSharpParser.COMMA)




            self.state = 1273
            self.match(CSharpParser.CLOSE_BRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Member_initializer_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def member_initializer(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Member_initializerContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Member_initializerContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.COMMA)
            else:
                return self.getToken(CSharpParser.COMMA, i)

        def getRuleIndex(self):
            return CSharpParser.RULE_member_initializer_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMember_initializer_list" ):
                listener.enterMember_initializer_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMember_initializer_list" ):
                listener.exitMember_initializer_list(self)




    def member_initializer_list(self):

        localctx = CSharpParser.Member_initializer_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_member_initializer_list)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1275
            self.member_initializer()
            self.state = 1280
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,104,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1276
                    self.match(CSharpParser.COMMA)
                    self.state = 1277
                    self.member_initializer() 
                self.state = 1282
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,104,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Member_initializerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ASSIGNMENT(self):
            return self.getToken(CSharpParser.ASSIGNMENT, 0)

        def initializer_value(self):
            return self.getTypedRuleContext(CSharpParser.Initializer_valueContext,0)


        def identifier(self):
            return self.getTypedRuleContext(CSharpParser.IdentifierContext,0)


        def OPEN_BRACKET(self):
            return self.getToken(CSharpParser.OPEN_BRACKET, 0)

        def expression(self):
            return self.getTypedRuleContext(CSharpParser.ExpressionContext,0)


        def CLOSE_BRACKET(self):
            return self.getToken(CSharpParser.CLOSE_BRACKET, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_member_initializer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMember_initializer" ):
                listener.enterMember_initializer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMember_initializer" ):
                listener.exitMember_initializer(self)




    def member_initializer(self):

        localctx = CSharpParser.Member_initializerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_member_initializer)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1288
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [10, 12, 13, 15, 16, 17, 21, 33, 36, 39, 50, 51, 54, 62, 64, 65, 68, 74, 77, 81, 88, 92, 93, 110, 114, 118, 119, 121, 123]:
                self.state = 1283
                self.identifier()
                pass
            elif token in [137]:
                self.state = 1284
                self.match(CSharpParser.OPEN_BRACKET)
                self.state = 1285
                self.expression()
                self.state = 1286
                self.match(CSharpParser.CLOSE_BRACKET)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 1290
            self.match(CSharpParser.ASSIGNMENT)
            self.state = 1291
            self.initializer_value()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Initializer_valueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(CSharpParser.ExpressionContext,0)


        def object_or_collection_initializer(self):
            return self.getTypedRuleContext(CSharpParser.Object_or_collection_initializerContext,0)


        def tuple_type(self):
            return self.getTypedRuleContext(CSharpParser.Tuple_typeContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_initializer_value

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInitializer_value" ):
                listener.enterInitializer_value(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInitializer_value" ):
                listener.exitInitializer_value(self)




    def initializer_value(self):

        localctx = CSharpParser.Initializer_valueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_initializer_value)
        try:
            self.state = 1296
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,106,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1293
                self.expression()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1294
                self.object_or_collection_initializer()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1295
                self.tuple_type()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Collection_initializerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_BRACE(self):
            return self.getToken(CSharpParser.OPEN_BRACE, 0)

        def element_initializer(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Element_initializerContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Element_initializerContext,i)


        def CLOSE_BRACE(self):
            return self.getToken(CSharpParser.CLOSE_BRACE, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.COMMA)
            else:
                return self.getToken(CSharpParser.COMMA, i)

        def getRuleIndex(self):
            return CSharpParser.RULE_collection_initializer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCollection_initializer" ):
                listener.enterCollection_initializer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCollection_initializer" ):
                listener.exitCollection_initializer(self)




    def collection_initializer(self):

        localctx = CSharpParser.Collection_initializerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_collection_initializer)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1298
            self.match(CSharpParser.OPEN_BRACE)
            self.state = 1299
            self.element_initializer()
            self.state = 1304
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,107,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1300
                    self.match(CSharpParser.COMMA)
                    self.state = 1301
                    self.element_initializer() 
                self.state = 1306
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,107,self._ctx)

            self.state = 1308
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==142:
                self.state = 1307
                self.match(CSharpParser.COMMA)


            self.state = 1310
            self.match(CSharpParser.CLOSE_BRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Element_initializerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def non_assignment_expression(self):
            return self.getTypedRuleContext(CSharpParser.Non_assignment_expressionContext,0)


        def OPEN_BRACE(self):
            return self.getToken(CSharpParser.OPEN_BRACE, 0)

        def expression_list(self):
            return self.getTypedRuleContext(CSharpParser.Expression_listContext,0)


        def CLOSE_BRACE(self):
            return self.getToken(CSharpParser.CLOSE_BRACE, 0)

        def expression(self):
            return self.getTypedRuleContext(CSharpParser.ExpressionContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_element_initializer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElement_initializer" ):
                listener.enterElement_initializer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElement_initializer" ):
                listener.exitElement_initializer(self)




    def element_initializer(self):

        localctx = CSharpParser.Element_initializerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_element_initializer)
        try:
            self.state = 1318
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,109,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1312
                self.non_assignment_expression()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1313
                self.match(CSharpParser.OPEN_BRACE)
                self.state = 1314
                self.expression_list()
                self.state = 1315
                self.match(CSharpParser.CLOSE_BRACE)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1317
                self.expression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Anonymous_object_initializerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_BRACE(self):
            return self.getToken(CSharpParser.OPEN_BRACE, 0)

        def CLOSE_BRACE(self):
            return self.getToken(CSharpParser.CLOSE_BRACE, 0)

        def member_declarator_list(self):
            return self.getTypedRuleContext(CSharpParser.Member_declarator_listContext,0)


        def COMMA(self):
            return self.getToken(CSharpParser.COMMA, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_anonymous_object_initializer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnonymous_object_initializer" ):
                listener.enterAnonymous_object_initializer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnonymous_object_initializer" ):
                listener.exitAnonymous_object_initializer(self)




    def anonymous_object_initializer(self):

        localctx = CSharpParser.Anonymous_object_initializerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_anonymous_object_initializer)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1320
            self.match(CSharpParser.OPEN_BRACE)
            self.state = 1325
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 4921388326695449600) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -376760140616816805) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & 2687) != 0):
                self.state = 1321
                self.member_declarator_list()
                self.state = 1323
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==142:
                    self.state = 1322
                    self.match(CSharpParser.COMMA)




            self.state = 1327
            self.match(CSharpParser.CLOSE_BRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Member_declarator_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def member_declarator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Member_declaratorContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Member_declaratorContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.COMMA)
            else:
                return self.getToken(CSharpParser.COMMA, i)

        def getRuleIndex(self):
            return CSharpParser.RULE_member_declarator_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMember_declarator_list" ):
                listener.enterMember_declarator_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMember_declarator_list" ):
                listener.exitMember_declarator_list(self)




    def member_declarator_list(self):

        localctx = CSharpParser.Member_declarator_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_member_declarator_list)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1329
            self.member_declarator()
            self.state = 1334
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,112,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1330
                    self.match(CSharpParser.COMMA)
                    self.state = 1331
                    self.member_declarator() 
                self.state = 1336
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,112,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Member_declaratorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def primary_expression(self):
            return self.getTypedRuleContext(CSharpParser.Primary_expressionContext,0)


        def identifier(self):
            return self.getTypedRuleContext(CSharpParser.IdentifierContext,0)


        def ASSIGNMENT(self):
            return self.getToken(CSharpParser.ASSIGNMENT, 0)

        def expression(self):
            return self.getTypedRuleContext(CSharpParser.ExpressionContext,0)


        def OPEN_BRACKET(self):
            return self.getToken(CSharpParser.OPEN_BRACKET, 0)

        def INTEGER_LITERAL(self):
            return self.getToken(CSharpParser.INTEGER_LITERAL, 0)

        def CLOSE_BRACKET(self):
            return self.getToken(CSharpParser.CLOSE_BRACKET, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_member_declarator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMember_declarator" ):
                listener.enterMember_declarator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMember_declarator" ):
                listener.exitMember_declarator(self)




    def member_declarator(self):

        localctx = CSharpParser.Member_declaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_member_declarator)
        self._la = 0 # Token type
        try:
            self.state = 1348
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,114,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1337
                self.primary_expression()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1338
                self.identifier()
                self.state = 1341
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==155:
                    self.state = 1339
                    self.match(CSharpParser.ASSIGNMENT)
                    self.state = 1340
                    self.expression()


                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1343
                self.identifier()
                self.state = 1344
                self.match(CSharpParser.OPEN_BRACKET)
                self.state = 1345
                self.match(CSharpParser.INTEGER_LITERAL)
                self.state = 1346
                self.match(CSharpParser.CLOSE_BRACKET)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Unbound_type_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(CSharpParser.IdentifierContext,i)


        def DOUBLE_COLON(self):
            return self.getToken(CSharpParser.DOUBLE_COLON, 0)

        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.DOT)
            else:
                return self.getToken(CSharpParser.DOT, i)

        def generic_dimension_specifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Generic_dimension_specifierContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Generic_dimension_specifierContext,i)


        def getRuleIndex(self):
            return CSharpParser.RULE_unbound_type_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnbound_type_name" ):
                listener.enterUnbound_type_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnbound_type_name" ):
                listener.exitUnbound_type_name(self)




    def unbound_type_name(self):

        localctx = CSharpParser.Unbound_type_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_unbound_type_name)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1350
            self.identifier()
            self.state = 1359
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [140, 141, 156]:
                self.state = 1352
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==156:
                    self.state = 1351
                    self.generic_dimension_specifier()


                pass
            elif token in [159]:
                self.state = 1354
                self.match(CSharpParser.DOUBLE_COLON)
                self.state = 1355
                self.identifier()
                self.state = 1357
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==156:
                    self.state = 1356
                    self.generic_dimension_specifier()


                pass
            else:
                raise NoViableAltException(self)

            self.state = 1368
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==141:
                self.state = 1361
                self.match(CSharpParser.DOT)
                self.state = 1362
                self.identifier()
                self.state = 1364
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==156:
                    self.state = 1363
                    self.generic_dimension_specifier()


                self.state = 1370
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Generic_dimension_specifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LT(self):
            return self.getToken(CSharpParser.LT, 0)

        def GT(self):
            return self.getToken(CSharpParser.GT, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.COMMA)
            else:
                return self.getToken(CSharpParser.COMMA, i)

        def getRuleIndex(self):
            return CSharpParser.RULE_generic_dimension_specifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGeneric_dimension_specifier" ):
                listener.enterGeneric_dimension_specifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGeneric_dimension_specifier" ):
                listener.exitGeneric_dimension_specifier(self)




    def generic_dimension_specifier(self):

        localctx = CSharpParser.Generic_dimension_specifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_generic_dimension_specifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1371
            self.match(CSharpParser.LT)
            self.state = 1375
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==142:
                self.state = 1372
                self.match(CSharpParser.COMMA)
                self.state = 1377
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1378
            self.match(CSharpParser.GT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IsTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def base_type(self):
            return self.getTypedRuleContext(CSharpParser.Base_typeContext,0)


        def rank_specifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Rank_specifierContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Rank_specifierContext,i)


        def STAR(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.STAR)
            else:
                return self.getToken(CSharpParser.STAR, i)

        def INTERR(self):
            return self.getToken(CSharpParser.INTERR, 0)

        def isTypePatternArms(self):
            return self.getTypedRuleContext(CSharpParser.IsTypePatternArmsContext,0)


        def identifier(self):
            return self.getTypedRuleContext(CSharpParser.IdentifierContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_isType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIsType" ):
                listener.enterIsType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIsType" ):
                listener.exitIsType(self)




    def isType(self):

        localctx = CSharpParser.IsTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_isType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1380
            self.base_type()
            self.state = 1385
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==137 or _la==147:
                self.state = 1383
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [137]:
                    self.state = 1381
                    self.rank_specifier()
                    pass
                elif token in [147]:
                    self.state = 1382
                    self.match(CSharpParser.STAR)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1387
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1389
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,123,self._ctx)
            if la_ == 1:
                self.state = 1388
                self.match(CSharpParser.INTERR)


            self.state = 1392
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1391
                self.isTypePatternArms()


            self.state = 1395
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,125,self._ctx)
            if la_ == 1:
                self.state = 1394
                self.identifier()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IsTypePatternArmsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_BRACE(self):
            return self.getToken(CSharpParser.OPEN_BRACE, 0)

        def isTypePatternArm(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.IsTypePatternArmContext)
            else:
                return self.getTypedRuleContext(CSharpParser.IsTypePatternArmContext,i)


        def CLOSE_BRACE(self):
            return self.getToken(CSharpParser.CLOSE_BRACE, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.COMMA)
            else:
                return self.getToken(CSharpParser.COMMA, i)

        def getRuleIndex(self):
            return CSharpParser.RULE_isTypePatternArms

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIsTypePatternArms" ):
                listener.enterIsTypePatternArms(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIsTypePatternArms" ):
                listener.exitIsTypePatternArms(self)




    def isTypePatternArms(self):

        localctx = CSharpParser.IsTypePatternArmsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_isTypePatternArms)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1397
            self.match(CSharpParser.OPEN_BRACE)
            self.state = 1398
            self.isTypePatternArm()
            self.state = 1403
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==142:
                self.state = 1399
                self.match(CSharpParser.COMMA)
                self.state = 1400
                self.isTypePatternArm()
                self.state = 1405
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1406
            self.match(CSharpParser.CLOSE_BRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IsTypePatternArmContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(CSharpParser.IdentifierContext,0)


        def COLON(self):
            return self.getToken(CSharpParser.COLON, 0)

        def expression(self):
            return self.getTypedRuleContext(CSharpParser.ExpressionContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_isTypePatternArm

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIsTypePatternArm" ):
                listener.enterIsTypePatternArm(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIsTypePatternArm" ):
                listener.exitIsTypePatternArm(self)




    def isTypePatternArm(self):

        localctx = CSharpParser.IsTypePatternArmContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_isTypePatternArm)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1408
            self.identifier()
            self.state = 1409
            self.match(CSharpParser.COLON)
            self.state = 1410
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Lambda_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def anonymous_function_signature(self):
            return self.getTypedRuleContext(CSharpParser.Anonymous_function_signatureContext,0)


        def right_arrow(self):
            return self.getTypedRuleContext(CSharpParser.Right_arrowContext,0)


        def anonymous_function_body(self):
            return self.getTypedRuleContext(CSharpParser.Anonymous_function_bodyContext,0)


        def attributes(self):
            return self.getTypedRuleContext(CSharpParser.AttributesContext,0)


        def ASYNC(self):
            return self.getToken(CSharpParser.ASYNC, 0)

        def STATIC(self):
            return self.getToken(CSharpParser.STATIC, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_lambda_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLambda_expression" ):
                listener.enterLambda_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLambda_expression" ):
                listener.exitLambda_expression(self)




    def lambda_expression(self):

        localctx = CSharpParser.Lambda_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_lambda_expression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1413
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==137:
                self.state = 1412
                self.attributes()


            self.state = 1416
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,128,self._ctx)
            if la_ == 1:
                self.state = 1415
                self.match(CSharpParser.ASYNC)


            self.state = 1419
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==97:
                self.state = 1418
                self.match(CSharpParser.STATIC)


            self.state = 1421
            self.anonymous_function_signature()
            self.state = 1422
            self.right_arrow()
            self.state = 1423
            self.anonymous_function_body()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Anonymous_function_signatureContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PARENS(self):
            return self.getToken(CSharpParser.OPEN_PARENS, 0)

        def CLOSE_PARENS(self):
            return self.getToken(CSharpParser.CLOSE_PARENS, 0)

        def explicit_anonymous_function_parameter_list(self):
            return self.getTypedRuleContext(CSharpParser.Explicit_anonymous_function_parameter_listContext,0)


        def implicit_anonymous_function_parameter_list(self):
            return self.getTypedRuleContext(CSharpParser.Implicit_anonymous_function_parameter_listContext,0)


        def identifier(self):
            return self.getTypedRuleContext(CSharpParser.IdentifierContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_anonymous_function_signature

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnonymous_function_signature" ):
                listener.enterAnonymous_function_signature(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnonymous_function_signature" ):
                listener.exitAnonymous_function_signature(self)




    def anonymous_function_signature(self):

        localctx = CSharpParser.Anonymous_function_signatureContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_anonymous_function_signature)
        try:
            self.state = 1436
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,130,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1425
                self.match(CSharpParser.OPEN_PARENS)
                self.state = 1426
                self.match(CSharpParser.CLOSE_PARENS)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1427
                self.match(CSharpParser.OPEN_PARENS)
                self.state = 1428
                self.explicit_anonymous_function_parameter_list()
                self.state = 1429
                self.match(CSharpParser.CLOSE_PARENS)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1431
                self.match(CSharpParser.OPEN_PARENS)
                self.state = 1432
                self.implicit_anonymous_function_parameter_list()
                self.state = 1433
                self.match(CSharpParser.CLOSE_PARENS)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1435
                self.identifier()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Explicit_anonymous_function_parameter_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def explicit_anonymous_function_parameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Explicit_anonymous_function_parameterContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Explicit_anonymous_function_parameterContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.COMMA)
            else:
                return self.getToken(CSharpParser.COMMA, i)

        def getRuleIndex(self):
            return CSharpParser.RULE_explicit_anonymous_function_parameter_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExplicit_anonymous_function_parameter_list" ):
                listener.enterExplicit_anonymous_function_parameter_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExplicit_anonymous_function_parameter_list" ):
                listener.exitExplicit_anonymous_function_parameter_list(self)




    def explicit_anonymous_function_parameter_list(self):

        localctx = CSharpParser.Explicit_anonymous_function_parameter_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_explicit_anonymous_function_parameter_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1438
            self.explicit_anonymous_function_parameter()
            self.state = 1443
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==142:
                self.state = 1439
                self.match(CSharpParser.COMMA)
                self.state = 1440
                self.explicit_anonymous_function_parameter()
                self.state = 1445
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Explicit_anonymous_function_parameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(CSharpParser.IdentifierContext,0)


        def attributes(self):
            return self.getTypedRuleContext(CSharpParser.AttributesContext,0)


        def REF(self):
            return self.getToken(CSharpParser.REF, 0)

        def OUT(self):
            return self.getToken(CSharpParser.OUT, 0)

        def IN(self):
            return self.getToken(CSharpParser.IN, 0)

        def READONLY(self):
            return self.getToken(CSharpParser.READONLY, 0)

        def type_(self):
            return self.getTypedRuleContext(CSharpParser.Type_Context,0)


        def ASSIGNMENT(self):
            return self.getToken(CSharpParser.ASSIGNMENT, 0)

        def expression(self):
            return self.getTypedRuleContext(CSharpParser.ExpressionContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_explicit_anonymous_function_parameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExplicit_anonymous_function_parameter" ):
                listener.enterExplicit_anonymous_function_parameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExplicit_anonymous_function_parameter" ):
                listener.exitExplicit_anonymous_function_parameter(self)




    def explicit_anonymous_function_parameter(self):

        localctx = CSharpParser.Explicit_anonymous_function_parameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_explicit_anonymous_function_parameter)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1447
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==137:
                self.state = 1446
                self.attributes()


            self.state = 1454
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,133,self._ctx)
            if la_ == 1:
                self.state = 1449
                self.match(CSharpParser.REF)

            elif la_ == 2:
                self.state = 1450
                self.match(CSharpParser.OUT)

            elif la_ == 3:
                self.state = 1451
                self.match(CSharpParser.IN)

            elif la_ == 4:
                self.state = 1452
                self.match(CSharpParser.REF)
                self.state = 1453
                self.match(CSharpParser.READONLY)


            self.state = 1457
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,134,self._ctx)
            if la_ == 1:
                self.state = 1456
                self.type_()


            self.state = 1459
            self.identifier()
            self.state = 1462
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==155:
                self.state = 1460
                self.match(CSharpParser.ASSIGNMENT)
                self.state = 1461
                self.expression()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Implicit_anonymous_function_parameter_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(CSharpParser.IdentifierContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.COMMA)
            else:
                return self.getToken(CSharpParser.COMMA, i)

        def getRuleIndex(self):
            return CSharpParser.RULE_implicit_anonymous_function_parameter_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImplicit_anonymous_function_parameter_list" ):
                listener.enterImplicit_anonymous_function_parameter_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImplicit_anonymous_function_parameter_list" ):
                listener.exitImplicit_anonymous_function_parameter_list(self)




    def implicit_anonymous_function_parameter_list(self):

        localctx = CSharpParser.Implicit_anonymous_function_parameter_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_implicit_anonymous_function_parameter_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1464
            self.identifier()
            self.state = 1469
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==142:
                self.state = 1465
                self.match(CSharpParser.COMMA)
                self.state = 1466
                self.identifier()
                self.state = 1471
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Anonymous_function_bodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def throwable_expression(self):
            return self.getTypedRuleContext(CSharpParser.Throwable_expressionContext,0)


        def block(self):
            return self.getTypedRuleContext(CSharpParser.BlockContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_anonymous_function_body

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnonymous_function_body" ):
                listener.enterAnonymous_function_body(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnonymous_function_body" ):
                listener.exitAnonymous_function_body(self)




    def anonymous_function_body(self):

        localctx = CSharpParser.Anonymous_function_bodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_anonymous_function_body)
        try:
            self.state = 1474
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [10, 12, 13, 15, 16, 17, 18, 19, 21, 22, 25, 26, 30, 31, 32, 33, 35, 36, 39, 43, 46, 50, 51, 54, 58, 62, 64, 65, 67, 68, 70, 72, 73, 74, 77, 81, 87, 88, 90, 92, 93, 94, 95, 96, 97, 98, 101, 102, 103, 105, 107, 108, 109, 110, 112, 114, 118, 119, 121, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 137, 139, 145, 146, 147, 150, 152, 153, 154, 161, 162, 181]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1472
                self.throwable_expression()
                pass
            elif token in [135]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1473
                self.block()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Query_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def from_clause(self):
            return self.getTypedRuleContext(CSharpParser.From_clauseContext,0)


        def query_body(self):
            return self.getTypedRuleContext(CSharpParser.Query_bodyContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_query_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuery_expression" ):
                listener.enterQuery_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuery_expression" ):
                listener.exitQuery_expression(self)




    def query_expression(self):

        localctx = CSharpParser.Query_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_query_expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1476
            self.from_clause()
            self.state = 1477
            self.query_body()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class From_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FROM(self):
            return self.getToken(CSharpParser.FROM, 0)

        def identifier(self):
            return self.getTypedRuleContext(CSharpParser.IdentifierContext,0)


        def IN(self):
            return self.getToken(CSharpParser.IN, 0)

        def expression(self):
            return self.getTypedRuleContext(CSharpParser.ExpressionContext,0)


        def type_(self):
            return self.getTypedRuleContext(CSharpParser.Type_Context,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_from_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFrom_clause" ):
                listener.enterFrom_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFrom_clause" ):
                listener.exitFrom_clause(self)




    def from_clause(self):

        localctx = CSharpParser.From_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_from_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1479
            self.match(CSharpParser.FROM)
            self.state = 1481
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,138,self._ctx)
            if la_ == 1:
                self.state = 1480
                self.type_()


            self.state = 1483
            self.identifier()
            self.state = 1484
            self.match(CSharpParser.IN)
            self.state = 1485
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Query_bodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def select_or_group_clause(self):
            return self.getTypedRuleContext(CSharpParser.Select_or_group_clauseContext,0)


        def query_body_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Query_body_clauseContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Query_body_clauseContext,i)


        def query_continuation(self):
            return self.getTypedRuleContext(CSharpParser.Query_continuationContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_query_body

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuery_body" ):
                listener.enterQuery_body(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuery_body" ):
                listener.exitQuery_body(self)




    def query_body(self):

        localctx = CSharpParser.Query_bodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_query_body)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1490
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==50 or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 36028797018972163) != 0):
                self.state = 1487
                self.query_body_clause()
                self.state = 1492
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1493
            self.select_or_group_clause()
            self.state = 1495
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,140,self._ctx)
            if la_ == 1:
                self.state = 1494
                self.query_continuation()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Query_body_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def from_clause(self):
            return self.getTypedRuleContext(CSharpParser.From_clauseContext,0)


        def let_clause(self):
            return self.getTypedRuleContext(CSharpParser.Let_clauseContext,0)


        def where_clause(self):
            return self.getTypedRuleContext(CSharpParser.Where_clauseContext,0)


        def combined_join_clause(self):
            return self.getTypedRuleContext(CSharpParser.Combined_join_clauseContext,0)


        def orderby_clause(self):
            return self.getTypedRuleContext(CSharpParser.Orderby_clauseContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_query_body_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuery_body_clause" ):
                listener.enterQuery_body_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuery_body_clause" ):
                listener.exitQuery_body_clause(self)




    def query_body_clause(self):

        localctx = CSharpParser.Query_body_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_query_body_clause)
        try:
            self.state = 1502
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [50]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1497
                self.from_clause()
                pass
            elif token in [65]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1498
                self.let_clause()
                pass
            elif token in [119]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1499
                self.where_clause()
                pass
            elif token in [64]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1500
                self.combined_join_clause()
                pass
            elif token in [77]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1501
                self.orderby_clause()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Let_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LET(self):
            return self.getToken(CSharpParser.LET, 0)

        def identifier(self):
            return self.getTypedRuleContext(CSharpParser.IdentifierContext,0)


        def ASSIGNMENT(self):
            return self.getToken(CSharpParser.ASSIGNMENT, 0)

        def expression(self):
            return self.getTypedRuleContext(CSharpParser.ExpressionContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_let_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLet_clause" ):
                listener.enterLet_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLet_clause" ):
                listener.exitLet_clause(self)




    def let_clause(self):

        localctx = CSharpParser.Let_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_let_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1504
            self.match(CSharpParser.LET)
            self.state = 1505
            self.identifier()
            self.state = 1506
            self.match(CSharpParser.ASSIGNMENT)
            self.state = 1507
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Where_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHERE(self):
            return self.getToken(CSharpParser.WHERE, 0)

        def expression(self):
            return self.getTypedRuleContext(CSharpParser.ExpressionContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_where_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhere_clause" ):
                listener.enterWhere_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhere_clause" ):
                listener.exitWhere_clause(self)




    def where_clause(self):

        localctx = CSharpParser.Where_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_where_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1509
            self.match(CSharpParser.WHERE)
            self.state = 1510
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Combined_join_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def JOIN(self):
            return self.getToken(CSharpParser.JOIN, 0)

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(CSharpParser.IdentifierContext,i)


        def IN(self):
            return self.getToken(CSharpParser.IN, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(CSharpParser.ExpressionContext,i)


        def ON(self):
            return self.getToken(CSharpParser.ON, 0)

        def EQUALS(self):
            return self.getToken(CSharpParser.EQUALS, 0)

        def type_(self):
            return self.getTypedRuleContext(CSharpParser.Type_Context,0)


        def INTO(self):
            return self.getToken(CSharpParser.INTO, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_combined_join_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCombined_join_clause" ):
                listener.enterCombined_join_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCombined_join_clause" ):
                listener.exitCombined_join_clause(self)




    def combined_join_clause(self):

        localctx = CSharpParser.Combined_join_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_combined_join_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1512
            self.match(CSharpParser.JOIN)
            self.state = 1514
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,142,self._ctx)
            if la_ == 1:
                self.state = 1513
                self.type_()


            self.state = 1516
            self.identifier()
            self.state = 1517
            self.match(CSharpParser.IN)
            self.state = 1518
            self.expression()
            self.state = 1519
            self.match(CSharpParser.ON)
            self.state = 1520
            self.expression()
            self.state = 1521
            self.match(CSharpParser.EQUALS)
            self.state = 1522
            self.expression()
            self.state = 1525
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==62:
                self.state = 1523
                self.match(CSharpParser.INTO)
                self.state = 1524
                self.identifier()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Orderby_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ORDERBY(self):
            return self.getToken(CSharpParser.ORDERBY, 0)

        def ordering(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.OrderingContext)
            else:
                return self.getTypedRuleContext(CSharpParser.OrderingContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.COMMA)
            else:
                return self.getToken(CSharpParser.COMMA, i)

        def getRuleIndex(self):
            return CSharpParser.RULE_orderby_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOrderby_clause" ):
                listener.enterOrderby_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOrderby_clause" ):
                listener.exitOrderby_clause(self)




    def orderby_clause(self):

        localctx = CSharpParser.Orderby_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_orderby_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1527
            self.match(CSharpParser.ORDERBY)
            self.state = 1528
            self.ordering()
            self.state = 1533
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==142:
                self.state = 1529
                self.match(CSharpParser.COMMA)
                self.state = 1530
                self.ordering()
                self.state = 1535
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OrderingContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.dir_ = None # Token

        def expression(self):
            return self.getTypedRuleContext(CSharpParser.ExpressionContext,0)


        def ASCENDING(self):
            return self.getToken(CSharpParser.ASCENDING, 0)

        def DESCENDING(self):
            return self.getToken(CSharpParser.DESCENDING, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_ordering

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOrdering" ):
                listener.enterOrdering(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOrdering" ):
                listener.exitOrdering(self)




    def ordering(self):

        localctx = CSharpParser.OrderingContext(self, self._ctx, self.state)
        self.enterRule(localctx, 182, self.RULE_ordering)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1536
            self.expression()
            self.state = 1538
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==15 or _la==33:
                self.state = 1537
                localctx.dir_ = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==15 or _la==33):
                    localctx.dir_ = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Select_or_group_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SELECT(self):
            return self.getToken(CSharpParser.SELECT, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(CSharpParser.ExpressionContext,i)


        def GROUP(self):
            return self.getToken(CSharpParser.GROUP, 0)

        def BY(self):
            return self.getToken(CSharpParser.BY, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_select_or_group_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelect_or_group_clause" ):
                listener.enterSelect_or_group_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelect_or_group_clause" ):
                listener.exitSelect_or_group_clause(self)




    def select_or_group_clause(self):

        localctx = CSharpParser.Select_or_group_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 184, self.RULE_select_or_group_clause)
        try:
            self.state = 1547
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [92]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1540
                self.match(CSharpParser.SELECT)
                self.state = 1541
                self.expression()
                pass
            elif token in [54]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1542
                self.match(CSharpParser.GROUP)
                self.state = 1543
                self.expression()
                self.state = 1544
                self.match(CSharpParser.BY)
                self.state = 1545
                self.expression()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Query_continuationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INTO(self):
            return self.getToken(CSharpParser.INTO, 0)

        def identifier(self):
            return self.getTypedRuleContext(CSharpParser.IdentifierContext,0)


        def query_body(self):
            return self.getTypedRuleContext(CSharpParser.Query_bodyContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_query_continuation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuery_continuation" ):
                listener.enterQuery_continuation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuery_continuation" ):
                listener.exitQuery_continuation(self)




    def query_continuation(self):

        localctx = CSharpParser.Query_continuationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 186, self.RULE_query_continuation)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1549
            self.match(CSharpParser.INTO)
            self.state = 1550
            self.identifier()
            self.state = 1551
            self.query_body()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def labeled_Statement(self):
            return self.getTypedRuleContext(CSharpParser.Labeled_StatementContext,0)


        def declarationStatement(self):
            return self.getTypedRuleContext(CSharpParser.DeclarationStatementContext,0)


        def embedded_statement(self):
            return self.getTypedRuleContext(CSharpParser.Embedded_statementContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatement" ):
                listener.enterStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatement" ):
                listener.exitStatement(self)




    def statement(self):

        localctx = CSharpParser.StatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 188, self.RULE_statement)
        try:
            self.state = 1556
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,147,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1553
                self.labeled_Statement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1554
                self.declarationStatement()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1555
                self.embedded_statement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeclarationStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def local_variable_declaration(self):
            return self.getTypedRuleContext(CSharpParser.Local_variable_declarationContext,0)


        def SEMICOLON(self):
            return self.getToken(CSharpParser.SEMICOLON, 0)

        def local_constant_declaration(self):
            return self.getTypedRuleContext(CSharpParser.Local_constant_declarationContext,0)


        def local_function_declaration(self):
            return self.getTypedRuleContext(CSharpParser.Local_function_declarationContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_declarationStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclarationStatement" ):
                listener.enterDeclarationStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclarationStatement" ):
                listener.exitDeclarationStatement(self)




    def declarationStatement(self):

        localctx = CSharpParser.DeclarationStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 190, self.RULE_declarationStatement)
        try:
            self.state = 1565
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,148,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1558
                self.local_variable_declaration()
                self.state = 1559
                self.match(CSharpParser.SEMICOLON)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1561
                self.local_constant_declaration()
                self.state = 1562
                self.match(CSharpParser.SEMICOLON)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1564
                self.local_function_declaration()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Local_function_declarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def local_function_header(self):
            return self.getTypedRuleContext(CSharpParser.Local_function_headerContext,0)


        def local_function_body(self):
            return self.getTypedRuleContext(CSharpParser.Local_function_bodyContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_local_function_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLocal_function_declaration" ):
                listener.enterLocal_function_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLocal_function_declaration" ):
                listener.exitLocal_function_declaration(self)




    def local_function_declaration(self):

        localctx = CSharpParser.Local_function_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 192, self.RULE_local_function_declaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1567
            self.local_function_header()
            self.state = 1568
            self.local_function_body()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Local_function_headerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def return_type(self):
            return self.getTypedRuleContext(CSharpParser.Return_typeContext,0)


        def identifier(self):
            return self.getTypedRuleContext(CSharpParser.IdentifierContext,0)


        def OPEN_PARENS(self):
            return self.getToken(CSharpParser.OPEN_PARENS, 0)

        def CLOSE_PARENS(self):
            return self.getToken(CSharpParser.CLOSE_PARENS, 0)

        def local_function_modifiers(self):
            return self.getTypedRuleContext(CSharpParser.Local_function_modifiersContext,0)


        def type_parameter_list(self):
            return self.getTypedRuleContext(CSharpParser.Type_parameter_listContext,0)


        def formal_parameter_list(self):
            return self.getTypedRuleContext(CSharpParser.Formal_parameter_listContext,0)


        def type_parameter_constraints_clauses(self):
            return self.getTypedRuleContext(CSharpParser.Type_parameter_constraints_clausesContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_local_function_header

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLocal_function_header" ):
                listener.enterLocal_function_header(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLocal_function_header" ):
                listener.exitLocal_function_header(self)




    def local_function_header(self):

        localctx = CSharpParser.Local_function_headerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 194, self.RULE_local_function_header)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1571
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,149,self._ctx)
            if la_ == 1:
                self.state = 1570
                self.local_function_modifiers()


            self.state = 1573
            self.return_type()
            self.state = 1574
            self.identifier()
            self.state = 1576
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==156:
                self.state = 1575
                self.type_parameter_list()


            self.state = 1578
            self.match(CSharpParser.OPEN_PARENS)
            self.state = 1580
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 5065494716463428608) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 780627024034358811) != 0) or _la==137 or _la==139:
                self.state = 1579
                self.formal_parameter_list()


            self.state = 1582
            self.match(CSharpParser.CLOSE_PARENS)
            self.state = 1584
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==119:
                self.state = 1583
                self.type_parameter_constraints_clauses()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Local_function_modifiersContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ASYNC(self):
            return self.getToken(CSharpParser.ASYNC, 0)

        def UNSAFE(self):
            return self.getToken(CSharpParser.UNSAFE, 0)

        def STATIC(self):
            return self.getToken(CSharpParser.STATIC, 0)

        def STRUCT(self):
            return self.getToken(CSharpParser.STRUCT, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_local_function_modifiers

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLocal_function_modifiers" ):
                listener.enterLocal_function_modifiers(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLocal_function_modifiers" ):
                listener.exitLocal_function_modifiers(self)




    def local_function_modifiers(self):

        localctx = CSharpParser.Local_function_modifiersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 196, self.RULE_local_function_modifiers)
        self._la = 0 # Token type
        try:
            self.state = 1596
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,155,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1586
                _la = self._input.LA(1)
                if not(_la==16 or _la==111):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1588
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==97:
                    self.state = 1587
                    self.match(CSharpParser.STATIC)


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1590
                self.match(CSharpParser.STATIC)
                self.state = 1592
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,154,self._ctx)
                if la_ == 1:
                    self.state = 1591
                    _la = self._input.LA(1)
                    if not(_la==16 or _la==111):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1594
                self.match(CSharpParser.UNSAFE)
                self.state = 1595
                self.match(CSharpParser.STRUCT)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Local_function_bodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def block(self):
            return self.getTypedRuleContext(CSharpParser.BlockContext,0)


        def right_arrow(self):
            return self.getTypedRuleContext(CSharpParser.Right_arrowContext,0)


        def throwable_expression(self):
            return self.getTypedRuleContext(CSharpParser.Throwable_expressionContext,0)


        def SEMICOLON(self):
            return self.getToken(CSharpParser.SEMICOLON, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_local_function_body

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLocal_function_body" ):
                listener.enterLocal_function_body(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLocal_function_body" ):
                listener.exitLocal_function_body(self)




    def local_function_body(self):

        localctx = CSharpParser.Local_function_bodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 198, self.RULE_local_function_body)
        try:
            self.state = 1603
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [135]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1598
                self.block()
                pass
            elif token in [155]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1599
                self.right_arrow()
                self.state = 1600
                self.throwable_expression()
                self.state = 1601
                self.match(CSharpParser.SEMICOLON)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Labeled_StatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(CSharpParser.IdentifierContext,0)


        def COLON(self):
            return self.getToken(CSharpParser.COLON, 0)

        def statement(self):
            return self.getTypedRuleContext(CSharpParser.StatementContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_labeled_Statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLabeled_Statement" ):
                listener.enterLabeled_Statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLabeled_Statement" ):
                listener.exitLabeled_Statement(self)




    def labeled_Statement(self):

        localctx = CSharpParser.Labeled_StatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 200, self.RULE_labeled_Statement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1605
            self.identifier()
            self.state = 1606
            self.match(CSharpParser.COLON)
            self.state = 1607
            self.statement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Embedded_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def block(self):
            return self.getTypedRuleContext(CSharpParser.BlockContext,0)


        def empty_statement(self):
            return self.getTypedRuleContext(CSharpParser.Empty_statementContext,0)


        def expression(self):
            return self.getTypedRuleContext(CSharpParser.ExpressionContext,0)


        def SEMICOLON(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.SEMICOLON)
            else:
                return self.getToken(CSharpParser.SEMICOLON, i)

        def if_statement(self):
            return self.getTypedRuleContext(CSharpParser.If_statementContext,0)


        def SWITCH(self):
            return self.getToken(CSharpParser.SWITCH, 0)

        def OPEN_PARENS(self):
            return self.getToken(CSharpParser.OPEN_PARENS, 0)

        def CLOSE_PARENS(self):
            return self.getToken(CSharpParser.CLOSE_PARENS, 0)

        def OPEN_BRACE(self):
            return self.getToken(CSharpParser.OPEN_BRACE, 0)

        def CLOSE_BRACE(self):
            return self.getToken(CSharpParser.CLOSE_BRACE, 0)

        def switch_section(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Switch_sectionContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Switch_sectionContext,i)


        def WHILE(self):
            return self.getToken(CSharpParser.WHILE, 0)

        def embedded_statement(self):
            return self.getTypedRuleContext(CSharpParser.Embedded_statementContext,0)


        def DO(self):
            return self.getToken(CSharpParser.DO, 0)

        def FOR(self):
            return self.getToken(CSharpParser.FOR, 0)

        def for_initializer(self):
            return self.getTypedRuleContext(CSharpParser.For_initializerContext,0)


        def for_iterator(self):
            return self.getTypedRuleContext(CSharpParser.For_iteratorContext,0)


        def FOREACH(self):
            return self.getToken(CSharpParser.FOREACH, 0)

        def local_variable_type(self):
            return self.getTypedRuleContext(CSharpParser.Local_variable_typeContext,0)


        def IN(self):
            return self.getToken(CSharpParser.IN, 0)

        def identifier(self):
            return self.getTypedRuleContext(CSharpParser.IdentifierContext,0)


        def deconstruction_element(self):
            return self.getTypedRuleContext(CSharpParser.Deconstruction_elementContext,0)


        def AWAIT(self):
            return self.getToken(CSharpParser.AWAIT, 0)

        def BREAK(self):
            return self.getToken(CSharpParser.BREAK, 0)

        def CONTINUE(self):
            return self.getToken(CSharpParser.CONTINUE, 0)

        def GOTO(self):
            return self.getToken(CSharpParser.GOTO, 0)

        def CASE(self):
            return self.getToken(CSharpParser.CASE, 0)

        def DEFAULT(self):
            return self.getToken(CSharpParser.DEFAULT, 0)

        def RETURN(self):
            return self.getToken(CSharpParser.RETURN, 0)

        def THROW(self):
            return self.getToken(CSharpParser.THROW, 0)

        def try_statement(self):
            return self.getTypedRuleContext(CSharpParser.Try_statementContext,0)


        def checked_statement(self):
            return self.getTypedRuleContext(CSharpParser.Checked_statementContext,0)


        def unchecked_statement(self):
            return self.getTypedRuleContext(CSharpParser.Unchecked_statementContext,0)


        def lock_statement(self):
            return self.getTypedRuleContext(CSharpParser.Lock_statementContext,0)


        def using_statement(self):
            return self.getTypedRuleContext(CSharpParser.Using_statementContext,0)


        def yield_statement(self):
            return self.getTypedRuleContext(CSharpParser.Yield_statementContext,0)


        def unsafe_statement(self):
            return self.getTypedRuleContext(CSharpParser.Unsafe_statementContext,0)


        def fixed_statement(self):
            return self.getTypedRuleContext(CSharpParser.Fixed_statementContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_embedded_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEmbedded_statement" ):
                listener.enterEmbedded_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEmbedded_statement" ):
                listener.exitEmbedded_statement(self)




    def embedded_statement(self):

        localctx = CSharpParser.Embedded_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 202, self.RULE_embedded_statement)
        self._la = 0 # Token type
        try:
            self.state = 1702
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,166,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1609
                self.block()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1610
                self.empty_statement()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1611
                self.expression()
                self.state = 1612
                self.match(CSharpParser.SEMICOLON)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1614
                self.if_statement()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1615
                self.match(CSharpParser.SWITCH)
                self.state = 1616
                self.match(CSharpParser.OPEN_PARENS)
                self.state = 1617
                self.expression()
                self.state = 1618
                self.match(CSharpParser.CLOSE_PARENS)
                self.state = 1619
                self.match(CSharpParser.OPEN_BRACE)
                self.state = 1623
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==23 or _la==31:
                    self.state = 1620
                    self.switch_section()
                    self.state = 1625
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1626
                self.match(CSharpParser.CLOSE_BRACE)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1628
                self.match(CSharpParser.WHILE)
                self.state = 1629
                self.match(CSharpParser.OPEN_PARENS)
                self.state = 1630
                self.expression()
                self.state = 1631
                self.match(CSharpParser.CLOSE_PARENS)
                self.state = 1632
                self.embedded_statement()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1634
                self.match(CSharpParser.DO)
                self.state = 1635
                self.embedded_statement()
                self.state = 1636
                self.match(CSharpParser.WHILE)
                self.state = 1637
                self.match(CSharpParser.OPEN_PARENS)
                self.state = 1638
                self.expression()
                self.state = 1639
                self.match(CSharpParser.CLOSE_PARENS)
                self.state = 1640
                self.match(CSharpParser.SEMICOLON)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 1642
                self.match(CSharpParser.FOR)
                self.state = 1643
                self.match(CSharpParser.OPEN_PARENS)
                self.state = 1645
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 4921423511067538432) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -371552844947249317) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & 9007225147099775) != 0):
                    self.state = 1644
                    self.for_initializer()


                self.state = 1647
                self.match(CSharpParser.SEMICOLON)
                self.state = 1649
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 4921388326695449600) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -376760132018493605) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & 9007225147099775) != 0):
                    self.state = 1648
                    self.expression()


                self.state = 1651
                self.match(CSharpParser.SEMICOLON)
                self.state = 1653
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 4921388326695449600) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -376760132018493605) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & 9007225147099775) != 0):
                    self.state = 1652
                    self.for_iterator()


                self.state = 1655
                self.match(CSharpParser.CLOSE_PARENS)
                self.state = 1656
                self.embedded_statement()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 1658
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==17:
                    self.state = 1657
                    self.match(CSharpParser.AWAIT)


                self.state = 1660
                self.match(CSharpParser.FOREACH)
                self.state = 1661
                self.match(CSharpParser.OPEN_PARENS)
                self.state = 1662
                self.local_variable_type()
                self.state = 1665
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,162,self._ctx)
                if la_ == 1:
                    self.state = 1663
                    self.identifier()
                    pass

                elif la_ == 2:
                    self.state = 1664
                    self.deconstruction_element()
                    pass


                self.state = 1667
                self.match(CSharpParser.IN)
                self.state = 1668
                self.expression()
                self.state = 1669
                self.match(CSharpParser.CLOSE_PARENS)
                self.state = 1670
                self.embedded_statement()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 1672
                self.match(CSharpParser.BREAK)
                self.state = 1673
                self.match(CSharpParser.SEMICOLON)
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 1674
                self.match(CSharpParser.CONTINUE)
                self.state = 1675
                self.match(CSharpParser.SEMICOLON)
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 1676
                self.match(CSharpParser.GOTO)
                self.state = 1681
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [10, 12, 13, 15, 16, 17, 21, 33, 36, 39, 50, 51, 54, 62, 64, 65, 68, 74, 77, 81, 88, 92, 93, 110, 114, 118, 119, 121, 123]:
                    self.state = 1677
                    self.identifier()
                    pass
                elif token in [23]:
                    self.state = 1678
                    self.match(CSharpParser.CASE)
                    self.state = 1679
                    self.expression()
                    pass
                elif token in [31]:
                    self.state = 1680
                    self.match(CSharpParser.DEFAULT)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1683
                self.match(CSharpParser.SEMICOLON)
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 1684
                self.match(CSharpParser.RETURN)
                self.state = 1686
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 4921388326695449600) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -376760132018493605) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & 9007225147099775) != 0):
                    self.state = 1685
                    self.expression()


                self.state = 1688
                self.match(CSharpParser.SEMICOLON)
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 1689
                self.match(CSharpParser.THROW)
                self.state = 1691
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 4921388326695449600) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -376760132018493605) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & 9007225147099775) != 0):
                    self.state = 1690
                    self.expression()


                self.state = 1693
                self.match(CSharpParser.SEMICOLON)
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 1694
                self.try_statement()
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 1695
                self.checked_statement()
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 1696
                self.unchecked_statement()
                pass

            elif la_ == 18:
                self.enterOuterAlt(localctx, 18)
                self.state = 1697
                self.lock_statement()
                pass

            elif la_ == 19:
                self.enterOuterAlt(localctx, 19)
                self.state = 1698
                self.using_statement()
                pass

            elif la_ == 20:
                self.enterOuterAlt(localctx, 20)
                self.state = 1699
                self.yield_statement()
                pass

            elif la_ == 21:
                self.enterOuterAlt(localctx, 21)
                self.state = 1700
                self.unsafe_statement()
                pass

            elif la_ == 22:
                self.enterOuterAlt(localctx, 22)
                self.state = 1701
                self.fixed_statement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Empty_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SEMICOLON(self):
            return self.getToken(CSharpParser.SEMICOLON, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_empty_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEmpty_statement" ):
                listener.enterEmpty_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEmpty_statement" ):
                listener.exitEmpty_statement(self)




    def empty_statement(self):

        localctx = CSharpParser.Empty_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 204, self.RULE_empty_statement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1704
            self.match(CSharpParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class If_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IF(self):
            return self.getToken(CSharpParser.IF, 0)

        def OPEN_PARENS(self):
            return self.getToken(CSharpParser.OPEN_PARENS, 0)

        def expression(self):
            return self.getTypedRuleContext(CSharpParser.ExpressionContext,0)


        def CLOSE_PARENS(self):
            return self.getToken(CSharpParser.CLOSE_PARENS, 0)

        def embedded_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Embedded_statementContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Embedded_statementContext,i)


        def ELSE(self):
            return self.getToken(CSharpParser.ELSE, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_if_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIf_statement" ):
                listener.enterIf_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIf_statement" ):
                listener.exitIf_statement(self)




    def if_statement(self):

        localctx = CSharpParser.If_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 206, self.RULE_if_statement)
        try:
            self.state = 1720
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,167,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1706
                self.match(CSharpParser.IF)
                self.state = 1707
                self.match(CSharpParser.OPEN_PARENS)
                self.state = 1708
                self.expression()
                self.state = 1709
                self.match(CSharpParser.CLOSE_PARENS)
                self.state = 1710
                self.embedded_statement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1712
                self.match(CSharpParser.IF)
                self.state = 1713
                self.match(CSharpParser.OPEN_PARENS)
                self.state = 1714
                self.expression()
                self.state = 1715
                self.match(CSharpParser.CLOSE_PARENS)
                self.state = 1716
                self.embedded_statement()
                self.state = 1717
                self.match(CSharpParser.ELSE)
                self.state = 1718
                self.embedded_statement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Checked_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CHECKED(self):
            return self.getToken(CSharpParser.CHECKED, 0)

        def block(self):
            return self.getTypedRuleContext(CSharpParser.BlockContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_checked_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterChecked_statement" ):
                listener.enterChecked_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitChecked_statement" ):
                listener.exitChecked_statement(self)




    def checked_statement(self):

        localctx = CSharpParser.Checked_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 208, self.RULE_checked_statement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1722
            self.match(CSharpParser.CHECKED)
            self.state = 1723
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Unchecked_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UNCHECKED(self):
            return self.getToken(CSharpParser.UNCHECKED, 0)

        def block(self):
            return self.getTypedRuleContext(CSharpParser.BlockContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_unchecked_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnchecked_statement" ):
                listener.enterUnchecked_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnchecked_statement" ):
                listener.exitUnchecked_statement(self)




    def unchecked_statement(self):

        localctx = CSharpParser.Unchecked_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 210, self.RULE_unchecked_statement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1725
            self.match(CSharpParser.UNCHECKED)
            self.state = 1726
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Lock_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LOCK(self):
            return self.getToken(CSharpParser.LOCK, 0)

        def OPEN_PARENS(self):
            return self.getToken(CSharpParser.OPEN_PARENS, 0)

        def expression(self):
            return self.getTypedRuleContext(CSharpParser.ExpressionContext,0)


        def CLOSE_PARENS(self):
            return self.getToken(CSharpParser.CLOSE_PARENS, 0)

        def embedded_statement(self):
            return self.getTypedRuleContext(CSharpParser.Embedded_statementContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_lock_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLock_statement" ):
                listener.enterLock_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLock_statement" ):
                listener.exitLock_statement(self)




    def lock_statement(self):

        localctx = CSharpParser.Lock_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 212, self.RULE_lock_statement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1728
            self.match(CSharpParser.LOCK)
            self.state = 1729
            self.match(CSharpParser.OPEN_PARENS)
            self.state = 1730
            self.expression()
            self.state = 1731
            self.match(CSharpParser.CLOSE_PARENS)
            self.state = 1732
            self.embedded_statement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Unmanaged_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def type_(self):
            return self.getTypedRuleContext(CSharpParser.Type_Context,0)


        def pointer_type(self):
            return self.getTypedRuleContext(CSharpParser.Pointer_typeContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_unmanaged_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnmanaged_type" ):
                listener.enterUnmanaged_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnmanaged_type" ):
                listener.exitUnmanaged_type(self)




    def unmanaged_type(self):

        localctx = CSharpParser.Unmanaged_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 214, self.RULE_unmanaged_type)
        try:
            self.state = 1736
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,168,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1734
                self.type_()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1735
                self.pointer_type()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Stackalloc_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STACKALLOC(self):
            return self.getToken(CSharpParser.STACKALLOC, 0)

        def type_(self):
            return self.getTypedRuleContext(CSharpParser.Type_Context,0)


        def OPEN_BRACKET(self):
            return self.getToken(CSharpParser.OPEN_BRACKET, 0)

        def expression(self):
            return self.getTypedRuleContext(CSharpParser.ExpressionContext,0)


        def CLOSE_BRACKET(self):
            return self.getToken(CSharpParser.CLOSE_BRACKET, 0)

        def stackalloc_initializer(self):
            return self.getTypedRuleContext(CSharpParser.Stackalloc_initializerContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_stackalloc_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStackalloc_expression" ):
                listener.enterStackalloc_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStackalloc_expression" ):
                listener.exitStackalloc_expression(self)




    def stackalloc_expression(self):

        localctx = CSharpParser.Stackalloc_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 216, self.RULE_stackalloc_expression)
        self._la = 0 # Token type
        try:
            self.state = 1754
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,171,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1738
                self.match(CSharpParser.STACKALLOC)
                self.state = 1739
                self.type_()
                self.state = 1740
                self.match(CSharpParser.OPEN_BRACKET)
                self.state = 1741
                self.expression()
                self.state = 1742
                self.match(CSharpParser.CLOSE_BRACKET)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1744
                self.match(CSharpParser.STACKALLOC)
                self.state = 1746
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 4921379528387572736) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 780626886595323419) != 0) or _la==139:
                    self.state = 1745
                    self.type_()


                self.state = 1748
                self.match(CSharpParser.OPEN_BRACKET)
                self.state = 1750
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 4921388326695449600) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -376760132018493605) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & 9007225147099775) != 0):
                    self.state = 1749
                    self.expression()


                self.state = 1752
                self.match(CSharpParser.CLOSE_BRACKET)
                self.state = 1753
                self.stackalloc_initializer()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Stackalloc_initializerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_BRACE(self):
            return self.getToken(CSharpParser.OPEN_BRACE, 0)

        def stackalloc_initializer_element_list(self):
            return self.getTypedRuleContext(CSharpParser.Stackalloc_initializer_element_listContext,0)


        def CLOSE_BRACE(self):
            return self.getToken(CSharpParser.CLOSE_BRACE, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_stackalloc_initializer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStackalloc_initializer" ):
                listener.enterStackalloc_initializer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStackalloc_initializer" ):
                listener.exitStackalloc_initializer(self)




    def stackalloc_initializer(self):

        localctx = CSharpParser.Stackalloc_initializerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 218, self.RULE_stackalloc_initializer)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1756
            self.match(CSharpParser.OPEN_BRACE)
            self.state = 1757
            self.stackalloc_initializer_element_list()
            self.state = 1758
            self.match(CSharpParser.CLOSE_BRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Stackalloc_initializer_element_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def stackalloc_element_initializer(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Stackalloc_element_initializerContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Stackalloc_element_initializerContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.COMMA)
            else:
                return self.getToken(CSharpParser.COMMA, i)

        def getRuleIndex(self):
            return CSharpParser.RULE_stackalloc_initializer_element_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStackalloc_initializer_element_list" ):
                listener.enterStackalloc_initializer_element_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStackalloc_initializer_element_list" ):
                listener.exitStackalloc_initializer_element_list(self)




    def stackalloc_initializer_element_list(self):

        localctx = CSharpParser.Stackalloc_initializer_element_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 220, self.RULE_stackalloc_initializer_element_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1760
            self.stackalloc_element_initializer()
            self.state = 1765
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,172,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1761
                    self.match(CSharpParser.COMMA)
                    self.state = 1762
                    self.stackalloc_element_initializer() 
                self.state = 1767
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,172,self._ctx)

            self.state = 1769
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==142:
                self.state = 1768
                self.match(CSharpParser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Stackalloc_element_initializerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(CSharpParser.ExpressionContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_stackalloc_element_initializer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStackalloc_element_initializer" ):
                listener.enterStackalloc_element_initializer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStackalloc_element_initializer" ):
                listener.exitStackalloc_element_initializer(self)




    def stackalloc_element_initializer(self):

        localctx = CSharpParser.Stackalloc_element_initializerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 222, self.RULE_stackalloc_element_initializer)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1771
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Using_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def USING(self):
            return self.getToken(CSharpParser.USING, 0)

        def OPEN_PARENS(self):
            return self.getToken(CSharpParser.OPEN_PARENS, 0)

        def resource_acquisition(self):
            return self.getTypedRuleContext(CSharpParser.Resource_acquisitionContext,0)


        def CLOSE_PARENS(self):
            return self.getToken(CSharpParser.CLOSE_PARENS, 0)

        def embedded_statement(self):
            return self.getTypedRuleContext(CSharpParser.Embedded_statementContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_using_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUsing_statement" ):
                listener.enterUsing_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUsing_statement" ):
                listener.exitUsing_statement(self)




    def using_statement(self):

        localctx = CSharpParser.Using_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 224, self.RULE_using_statement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1773
            self.match(CSharpParser.USING)
            self.state = 1774
            self.match(CSharpParser.OPEN_PARENS)
            self.state = 1775
            self.resource_acquisition()
            self.state = 1776
            self.match(CSharpParser.CLOSE_PARENS)
            self.state = 1777
            self.embedded_statement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Yield_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def YIELD(self):
            return self.getToken(CSharpParser.YIELD, 0)

        def RETURN(self):
            return self.getToken(CSharpParser.RETURN, 0)

        def expression(self):
            return self.getTypedRuleContext(CSharpParser.ExpressionContext,0)


        def SEMICOLON(self):
            return self.getToken(CSharpParser.SEMICOLON, 0)

        def BREAK(self):
            return self.getToken(CSharpParser.BREAK, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_yield_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterYield_statement" ):
                listener.enterYield_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitYield_statement" ):
                listener.exitYield_statement(self)




    def yield_statement(self):

        localctx = CSharpParser.Yield_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 226, self.RULE_yield_statement)
        try:
            self.state = 1787
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,174,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1779
                self.match(CSharpParser.YIELD)
                self.state = 1780
                self.match(CSharpParser.RETURN)
                self.state = 1781
                self.expression()
                self.state = 1782
                self.match(CSharpParser.SEMICOLON)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1784
                self.match(CSharpParser.YIELD)
                self.state = 1785
                self.match(CSharpParser.BREAK)
                self.state = 1786
                self.match(CSharpParser.SEMICOLON)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Fixed_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FIXED(self):
            return self.getToken(CSharpParser.FIXED, 0)

        def OPEN_PARENS(self):
            return self.getToken(CSharpParser.OPEN_PARENS, 0)

        def pointer_type(self):
            return self.getTypedRuleContext(CSharpParser.Pointer_typeContext,0)


        def fixed_pointer_declarators(self):
            return self.getTypedRuleContext(CSharpParser.Fixed_pointer_declaratorsContext,0)


        def CLOSE_PARENS(self):
            return self.getToken(CSharpParser.CLOSE_PARENS, 0)

        def embedded_statement(self):
            return self.getTypedRuleContext(CSharpParser.Embedded_statementContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_fixed_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFixed_statement" ):
                listener.enterFixed_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFixed_statement" ):
                listener.exitFixed_statement(self)




    def fixed_statement(self):

        localctx = CSharpParser.Fixed_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 228, self.RULE_fixed_statement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1789
            self.match(CSharpParser.FIXED)
            self.state = 1790
            self.match(CSharpParser.OPEN_PARENS)
            self.state = 1791
            self.pointer_type()
            self.state = 1792
            self.fixed_pointer_declarators()
            self.state = 1793
            self.match(CSharpParser.CLOSE_PARENS)
            self.state = 1794
            self.embedded_statement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Unsafe_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UNSAFE(self):
            return self.getToken(CSharpParser.UNSAFE, 0)

        def block(self):
            return self.getTypedRuleContext(CSharpParser.BlockContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_unsafe_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnsafe_statement" ):
                listener.enterUnsafe_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnsafe_statement" ):
                listener.exitUnsafe_statement(self)




    def unsafe_statement(self):

        localctx = CSharpParser.Unsafe_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 230, self.RULE_unsafe_statement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1796
            self.match(CSharpParser.UNSAFE)
            self.state = 1797
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Try_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TRY(self):
            return self.getToken(CSharpParser.TRY, 0)

        def block(self):
            return self.getTypedRuleContext(CSharpParser.BlockContext,0)


        def catch_clauses(self):
            return self.getTypedRuleContext(CSharpParser.Catch_clausesContext,0)


        def finally_clause(self):
            return self.getTypedRuleContext(CSharpParser.Finally_clauseContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_try_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTry_statement" ):
                listener.enterTry_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTry_statement" ):
                listener.exitTry_statement(self)




    def try_statement(self):

        localctx = CSharpParser.Try_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 232, self.RULE_try_statement)
        self._la = 0 # Token type
        try:
            self.state = 1810
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,176,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1799
                self.match(CSharpParser.TRY)
                self.state = 1800
                self.block()
                self.state = 1801
                self.catch_clauses()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1803
                self.match(CSharpParser.TRY)
                self.state = 1804
                self.block()
                self.state = 1806
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==24:
                    self.state = 1805
                    self.catch_clauses()


                self.state = 1808
                self.finally_clause()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BlockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_BRACE(self):
            return self.getToken(CSharpParser.OPEN_BRACE, 0)

        def CLOSE_BRACE(self):
            return self.getToken(CSharpParser.CLOSE_BRACE, 0)

        def statement_list(self):
            return self.getTypedRuleContext(CSharpParser.Statement_listContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_block

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBlock" ):
                listener.enterBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBlock" ):
                listener.exitBlock(self)




    def block(self):

        localctx = CSharpParser.BlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 234, self.RULE_block)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1812
            self.match(CSharpParser.OPEN_BRACE)
            self.state = 1814
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 4962800350630228992) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -299493807766755489) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & 9007225147165439) != 0):
                self.state = 1813
                self.statement_list()


            self.state = 1816
            self.match(CSharpParser.CLOSE_BRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Local_variable_declarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def local_variable_type(self):
            return self.getTypedRuleContext(CSharpParser.Local_variable_typeContext,0)


        def local_variable_declarator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Local_variable_declaratorContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Local_variable_declaratorContext,i)


        def USING(self):
            return self.getToken(CSharpParser.USING, 0)

        def REF(self):
            return self.getToken(CSharpParser.REF, 0)

        def READONLY(self):
            return self.getToken(CSharpParser.READONLY, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.COMMA)
            else:
                return self.getToken(CSharpParser.COMMA, i)

        def FIXED(self):
            return self.getToken(CSharpParser.FIXED, 0)

        def pointer_type(self):
            return self.getTypedRuleContext(CSharpParser.Pointer_typeContext,0)


        def fixed_pointer_declarators(self):
            return self.getTypedRuleContext(CSharpParser.Fixed_pointer_declaratorsContext,0)


        def VAR(self):
            return self.getToken(CSharpParser.VAR, 0)

        def deconstruction_expression(self):
            return self.getTypedRuleContext(CSharpParser.Deconstruction_expressionContext,0)


        def ASSIGNMENT(self):
            return self.getToken(CSharpParser.ASSIGNMENT, 0)

        def expression(self):
            return self.getTypedRuleContext(CSharpParser.ExpressionContext,0)


        def unsafe_function_pointer(self):
            return self.getTypedRuleContext(CSharpParser.Unsafe_function_pointerContext,0)


        def type_(self):
            return self.getTypedRuleContext(CSharpParser.Type_Context,0)


        def identifier(self):
            return self.getTypedRuleContext(CSharpParser.IdentifierContext,0)


        def lambda_expression(self):
            return self.getTypedRuleContext(CSharpParser.Lambda_expressionContext,0)


        def attributes(self):
            return self.getTypedRuleContext(CSharpParser.AttributesContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_local_variable_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLocal_variable_declaration" ):
                listener.enterLocal_variable_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLocal_variable_declaration" ):
                listener.exitLocal_variable_declaration(self)




    def local_variable_declaration(self):

        localctx = CSharpParser.Local_variable_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 236, self.RULE_local_variable_declaration)
        self._la = 0 # Token type
        try:
            self.state = 1851
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,181,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1822
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,178,self._ctx)
                if la_ == 1:
                    self.state = 1818
                    self.match(CSharpParser.USING)

                elif la_ == 2:
                    self.state = 1819
                    self.match(CSharpParser.REF)

                elif la_ == 3:
                    self.state = 1820
                    self.match(CSharpParser.REF)
                    self.state = 1821
                    self.match(CSharpParser.READONLY)


                self.state = 1824
                self.local_variable_type()
                self.state = 1825
                self.local_variable_declarator()
                self.state = 1830
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==142:
                    self.state = 1826
                    self.match(CSharpParser.COMMA)
                    self.state = 1827
                    self.local_variable_declarator()
                    self.state = 1832
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1833
                self.match(CSharpParser.FIXED)
                self.state = 1834
                self.pointer_type()
                self.state = 1835
                self.fixed_pointer_declarators()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1837
                self.match(CSharpParser.VAR)
                self.state = 1838
                self.deconstruction_expression()
                self.state = 1839
                self.match(CSharpParser.ASSIGNMENT)
                self.state = 1840
                self.expression()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1842
                self.unsafe_function_pointer()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1844
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==137:
                    self.state = 1843
                    self.attributes()


                self.state = 1846
                self.type_()
                self.state = 1847
                self.identifier()
                self.state = 1848
                self.match(CSharpParser.ASSIGNMENT)
                self.state = 1849
                self.lambda_expression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Unsafe_function_pointerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UNSAFE(self):
            return self.getToken(CSharpParser.UNSAFE, 0)

        def OPEN_BRACE(self):
            return self.getToken(CSharpParser.OPEN_BRACE, 0)

        def delegate_function_pointer(self):
            return self.getTypedRuleContext(CSharpParser.Delegate_function_pointerContext,0)


        def CLOSE_BRACE(self):
            return self.getToken(CSharpParser.CLOSE_BRACE, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_unsafe_function_pointer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnsafe_function_pointer" ):
                listener.enterUnsafe_function_pointer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnsafe_function_pointer" ):
                listener.exitUnsafe_function_pointer(self)




    def unsafe_function_pointer(self):

        localctx = CSharpParser.Unsafe_function_pointerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 238, self.RULE_unsafe_function_pointer)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1853
            self.match(CSharpParser.UNSAFE)
            self.state = 1854
            self.match(CSharpParser.OPEN_BRACE)
            self.state = 1855
            self.delegate_function_pointer()
            self.state = 1856
            self.match(CSharpParser.CLOSE_BRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Delegate_function_pointerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DELEGATE(self):
            return self.getToken(CSharpParser.DELEGATE, 0)

        def STAR(self):
            return self.getToken(CSharpParser.STAR, 0)

        def LT(self):
            return self.getToken(CSharpParser.LT, 0)

        def function_pointer_parameter_list(self):
            return self.getTypedRuleContext(CSharpParser.Function_pointer_parameter_listContext,0)


        def GT(self):
            return self.getToken(CSharpParser.GT, 0)

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(CSharpParser.IdentifierContext,i)


        def ASSIGNMENT(self):
            return self.getToken(CSharpParser.ASSIGNMENT, 0)

        def AMP(self):
            return self.getToken(CSharpParser.AMP, 0)

        def SEMICOLON(self):
            return self.getToken(CSharpParser.SEMICOLON, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_delegate_function_pointer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDelegate_function_pointer" ):
                listener.enterDelegate_function_pointer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDelegate_function_pointer" ):
                listener.exitDelegate_function_pointer(self)




    def delegate_function_pointer(self):

        localctx = CSharpParser.Delegate_function_pointerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 240, self.RULE_delegate_function_pointer)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1858
            self.match(CSharpParser.DELEGATE)
            self.state = 1859
            self.match(CSharpParser.STAR)
            self.state = 1860
            self.match(CSharpParser.LT)
            self.state = 1861
            self.function_pointer_parameter_list()
            self.state = 1862
            self.match(CSharpParser.GT)
            self.state = 1863
            self.identifier()
            self.state = 1864
            self.match(CSharpParser.ASSIGNMENT)
            self.state = 1865
            self.match(CSharpParser.AMP)
            self.state = 1866
            self.identifier()
            self.state = 1867
            self.match(CSharpParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Local_variable_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VAR(self):
            return self.getToken(CSharpParser.VAR, 0)

        def type_(self):
            return self.getTypedRuleContext(CSharpParser.Type_Context,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_local_variable_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLocal_variable_type" ):
                listener.enterLocal_variable_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLocal_variable_type" ):
                listener.exitLocal_variable_type(self)




    def local_variable_type(self):

        localctx = CSharpParser.Local_variable_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 242, self.RULE_local_variable_type)
        try:
            self.state = 1871
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,182,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1869
                self.match(CSharpParser.VAR)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1870
                self.type_()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Local_variable_declaratorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(CSharpParser.IdentifierContext,0)


        def ASSIGNMENT(self):
            return self.getToken(CSharpParser.ASSIGNMENT, 0)

        def local_variable_initializer(self):
            return self.getTypedRuleContext(CSharpParser.Local_variable_initializerContext,0)


        def REF(self):
            return self.getToken(CSharpParser.REF, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_local_variable_declarator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLocal_variable_declarator" ):
                listener.enterLocal_variable_declarator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLocal_variable_declarator" ):
                listener.exitLocal_variable_declarator(self)




    def local_variable_declarator(self):

        localctx = CSharpParser.Local_variable_declaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 244, self.RULE_local_variable_declarator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1873
            self.identifier()
            self.state = 1879
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==155:
                self.state = 1874
                self.match(CSharpParser.ASSIGNMENT)
                self.state = 1876
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,183,self._ctx)
                if la_ == 1:
                    self.state = 1875
                    self.match(CSharpParser.REF)


                self.state = 1878
                self.local_variable_initializer()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Local_variable_initializerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(CSharpParser.ExpressionContext,0)


        def array_initializer(self):
            return self.getTypedRuleContext(CSharpParser.Array_initializerContext,0)


        def stackalloc_initializer(self):
            return self.getTypedRuleContext(CSharpParser.Stackalloc_initializerContext,0)


        def deconstruction_element(self):
            return self.getTypedRuleContext(CSharpParser.Deconstruction_elementContext,0)


        def lambda_expression(self):
            return self.getTypedRuleContext(CSharpParser.Lambda_expressionContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_local_variable_initializer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLocal_variable_initializer" ):
                listener.enterLocal_variable_initializer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLocal_variable_initializer" ):
                listener.exitLocal_variable_initializer(self)




    def local_variable_initializer(self):

        localctx = CSharpParser.Local_variable_initializerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 246, self.RULE_local_variable_initializer)
        try:
            self.state = 1886
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,185,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1881
                self.expression()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1882
                self.array_initializer()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1883
                self.stackalloc_initializer()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1884
                self.deconstruction_element()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1885
                self.lambda_expression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Local_constant_declarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CONST(self):
            return self.getToken(CSharpParser.CONST, 0)

        def type_(self):
            return self.getTypedRuleContext(CSharpParser.Type_Context,0)


        def constant_declarators(self):
            return self.getTypedRuleContext(CSharpParser.Constant_declaratorsContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_local_constant_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLocal_constant_declaration" ):
                listener.enterLocal_constant_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLocal_constant_declaration" ):
                listener.exitLocal_constant_declaration(self)




    def local_constant_declaration(self):

        localctx = CSharpParser.Local_constant_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 248, self.RULE_local_constant_declaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1888
            self.match(CSharpParser.CONST)
            self.state = 1889
            self.type_()
            self.state = 1890
            self.constant_declarators()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Switch_sectionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def statement_list(self):
            return self.getTypedRuleContext(CSharpParser.Statement_listContext,0)


        def switch_label(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Switch_labelContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Switch_labelContext,i)


        def getRuleIndex(self):
            return CSharpParser.RULE_switch_section

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSwitch_section" ):
                listener.enterSwitch_section(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSwitch_section" ):
                listener.exitSwitch_section(self)




    def switch_section(self):

        localctx = CSharpParser.Switch_sectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 250, self.RULE_switch_section)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1893 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 1892
                    self.switch_label()

                else:
                    raise NoViableAltException(self)
                self.state = 1895 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,186,self._ctx)

            self.state = 1897
            self.statement_list()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Switch_labelContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CASE(self):
            return self.getToken(CSharpParser.CASE, 0)

        def expression(self):
            return self.getTypedRuleContext(CSharpParser.ExpressionContext,0)


        def COLON(self):
            return self.getToken(CSharpParser.COLON, 0)

        def case_guard(self):
            return self.getTypedRuleContext(CSharpParser.Case_guardContext,0)


        def pattern(self):
            return self.getTypedRuleContext(CSharpParser.PatternContext,0)


        def DEFAULT(self):
            return self.getToken(CSharpParser.DEFAULT, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_switch_label

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSwitch_label" ):
                listener.enterSwitch_label(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSwitch_label" ):
                listener.exitSwitch_label(self)




    def switch_label(self):

        localctx = CSharpParser.Switch_labelContext(self, self._ctx, self.state)
        self.enterRule(localctx, 252, self.RULE_switch_label)
        self._la = 0 # Token type
        try:
            self.state = 1915
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,189,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1899
                self.match(CSharpParser.CASE)
                self.state = 1900
                self.expression()
                self.state = 1902
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==118:
                    self.state = 1901
                    self.case_guard()


                self.state = 1904
                self.match(CSharpParser.COLON)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1906
                self.match(CSharpParser.CASE)
                self.state = 1907
                self.pattern()
                self.state = 1909
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==118:
                    self.state = 1908
                    self.case_guard()


                self.state = 1911
                self.match(CSharpParser.COLON)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1913
                self.match(CSharpParser.DEFAULT)
                self.state = 1914
                self.match(CSharpParser.COLON)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Case_guardContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHEN(self):
            return self.getToken(CSharpParser.WHEN, 0)

        def expression(self):
            return self.getTypedRuleContext(CSharpParser.ExpressionContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_case_guard

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCase_guard" ):
                listener.enterCase_guard(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCase_guard" ):
                listener.exitCase_guard(self)




    def case_guard(self):

        localctx = CSharpParser.Case_guardContext(self, self._ctx, self.state)
        self.enterRule(localctx, 254, self.RULE_case_guard)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1917
            self.match(CSharpParser.WHEN)
            self.state = 1918
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Statement_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.StatementContext)
            else:
                return self.getTypedRuleContext(CSharpParser.StatementContext,i)


        def getRuleIndex(self):
            return CSharpParser.RULE_statement_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatement_list" ):
                listener.enterStatement_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatement_list" ):
                listener.exitStatement_list(self)




    def statement_list(self):

        localctx = CSharpParser.Statement_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 256, self.RULE_statement_list)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1921 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 1920
                    self.statement()

                else:
                    raise NoViableAltException(self)
                self.state = 1923 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,190,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class For_initializerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def local_variable_declaration(self):
            return self.getTypedRuleContext(CSharpParser.Local_variable_declarationContext,0)


        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(CSharpParser.ExpressionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.COMMA)
            else:
                return self.getToken(CSharpParser.COMMA, i)

        def getRuleIndex(self):
            return CSharpParser.RULE_for_initializer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFor_initializer" ):
                listener.enterFor_initializer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFor_initializer" ):
                listener.exitFor_initializer(self)




    def for_initializer(self):

        localctx = CSharpParser.For_initializerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 258, self.RULE_for_initializer)
        self._la = 0 # Token type
        try:
            self.state = 1934
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,192,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1925
                self.local_variable_declaration()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1926
                self.expression()
                self.state = 1931
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==142:
                    self.state = 1927
                    self.match(CSharpParser.COMMA)
                    self.state = 1928
                    self.expression()
                    self.state = 1933
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class For_iteratorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(CSharpParser.ExpressionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.COMMA)
            else:
                return self.getToken(CSharpParser.COMMA, i)

        def getRuleIndex(self):
            return CSharpParser.RULE_for_iterator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFor_iterator" ):
                listener.enterFor_iterator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFor_iterator" ):
                listener.exitFor_iterator(self)




    def for_iterator(self):

        localctx = CSharpParser.For_iteratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 260, self.RULE_for_iterator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1936
            self.expression()
            self.state = 1941
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==142:
                self.state = 1937
                self.match(CSharpParser.COMMA)
                self.state = 1938
                self.expression()
                self.state = 1943
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Catch_clausesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def specific_catch_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Specific_catch_clauseContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Specific_catch_clauseContext,i)


        def general_catch_clause(self):
            return self.getTypedRuleContext(CSharpParser.General_catch_clauseContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_catch_clauses

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCatch_clauses" ):
                listener.enterCatch_clauses(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCatch_clauses" ):
                listener.exitCatch_clauses(self)




    def catch_clauses(self):

        localctx = CSharpParser.Catch_clausesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 262, self.RULE_catch_clauses)
        self._la = 0 # Token type
        try:
            self.state = 1955
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,196,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1944
                self.specific_catch_clause()
                self.state = 1948
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,194,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1945
                        self.specific_catch_clause() 
                    self.state = 1950
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,194,self._ctx)

                self.state = 1952
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==24:
                    self.state = 1951
                    self.general_catch_clause()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1954
                self.general_catch_clause()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Specific_catch_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CATCH(self):
            return self.getToken(CSharpParser.CATCH, 0)

        def OPEN_PARENS(self):
            return self.getToken(CSharpParser.OPEN_PARENS, 0)

        def class_type(self):
            return self.getTypedRuleContext(CSharpParser.Class_typeContext,0)


        def CLOSE_PARENS(self):
            return self.getToken(CSharpParser.CLOSE_PARENS, 0)

        def block(self):
            return self.getTypedRuleContext(CSharpParser.BlockContext,0)


        def identifier(self):
            return self.getTypedRuleContext(CSharpParser.IdentifierContext,0)


        def exception_filter(self):
            return self.getTypedRuleContext(CSharpParser.Exception_filterContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_specific_catch_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSpecific_catch_clause" ):
                listener.enterSpecific_catch_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSpecific_catch_clause" ):
                listener.exitSpecific_catch_clause(self)




    def specific_catch_clause(self):

        localctx = CSharpParser.Specific_catch_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 264, self.RULE_specific_catch_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1957
            self.match(CSharpParser.CATCH)
            self.state = 1958
            self.match(CSharpParser.OPEN_PARENS)
            self.state = 1959
            self.class_type()
            self.state = 1961
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 4633078743724962816) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 775815405380969491) != 0):
                self.state = 1960
                self.identifier()


            self.state = 1963
            self.match(CSharpParser.CLOSE_PARENS)
            self.state = 1965
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==118:
                self.state = 1964
                self.exception_filter()


            self.state = 1967
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class General_catch_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CATCH(self):
            return self.getToken(CSharpParser.CATCH, 0)

        def block(self):
            return self.getTypedRuleContext(CSharpParser.BlockContext,0)


        def exception_filter(self):
            return self.getTypedRuleContext(CSharpParser.Exception_filterContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_general_catch_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGeneral_catch_clause" ):
                listener.enterGeneral_catch_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGeneral_catch_clause" ):
                listener.exitGeneral_catch_clause(self)




    def general_catch_clause(self):

        localctx = CSharpParser.General_catch_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 266, self.RULE_general_catch_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1969
            self.match(CSharpParser.CATCH)
            self.state = 1971
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==118:
                self.state = 1970
                self.exception_filter()


            self.state = 1973
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Exception_filterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHEN(self):
            return self.getToken(CSharpParser.WHEN, 0)

        def OPEN_PARENS(self):
            return self.getToken(CSharpParser.OPEN_PARENS, 0)

        def expression(self):
            return self.getTypedRuleContext(CSharpParser.ExpressionContext,0)


        def CLOSE_PARENS(self):
            return self.getToken(CSharpParser.CLOSE_PARENS, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_exception_filter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterException_filter" ):
                listener.enterException_filter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitException_filter" ):
                listener.exitException_filter(self)




    def exception_filter(self):

        localctx = CSharpParser.Exception_filterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 268, self.RULE_exception_filter)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1975
            self.match(CSharpParser.WHEN)
            self.state = 1976
            self.match(CSharpParser.OPEN_PARENS)
            self.state = 1977
            self.expression()
            self.state = 1978
            self.match(CSharpParser.CLOSE_PARENS)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Finally_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FINALLY(self):
            return self.getToken(CSharpParser.FINALLY, 0)

        def block(self):
            return self.getTypedRuleContext(CSharpParser.BlockContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_finally_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFinally_clause" ):
                listener.enterFinally_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFinally_clause" ):
                listener.exitFinally_clause(self)




    def finally_clause(self):

        localctx = CSharpParser.Finally_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 270, self.RULE_finally_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1980
            self.match(CSharpParser.FINALLY)
            self.state = 1981
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Resource_acquisitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def local_variable_declaration(self):
            return self.getTypedRuleContext(CSharpParser.Local_variable_declarationContext,0)


        def expression(self):
            return self.getTypedRuleContext(CSharpParser.ExpressionContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_resource_acquisition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterResource_acquisition" ):
                listener.enterResource_acquisition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitResource_acquisition" ):
                listener.exitResource_acquisition(self)




    def resource_acquisition(self):

        localctx = CSharpParser.Resource_acquisitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 272, self.RULE_resource_acquisition)
        try:
            self.state = 1985
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,200,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1983
                self.local_variable_declaration()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1984
                self.expression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Namespace_declarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.qi = None # Qualified_identifierContext

        def NAMESPACE(self):
            return self.getToken(CSharpParser.NAMESPACE, 0)

        def namespace_body(self):
            return self.getTypedRuleContext(CSharpParser.Namespace_bodyContext,0)


        def qualified_identifier(self):
            return self.getTypedRuleContext(CSharpParser.Qualified_identifierContext,0)


        def SEMICOLON(self):
            return self.getToken(CSharpParser.SEMICOLON, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_namespace_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNamespace_declaration" ):
                listener.enterNamespace_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNamespace_declaration" ):
                listener.exitNamespace_declaration(self)




    def namespace_declaration(self):

        localctx = CSharpParser.Namespace_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 274, self.RULE_namespace_declaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1987
            self.match(CSharpParser.NAMESPACE)
            self.state = 1988
            localctx.qi = self.qualified_identifier()
            self.state = 1989
            self.namespace_body()
            self.state = 1991
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,201,self._ctx)
            if la_ == 1:
                self.state = 1990
                self.match(CSharpParser.SEMICOLON)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Qualified_identifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(CSharpParser.IdentifierContext,i)


        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.DOT)
            else:
                return self.getToken(CSharpParser.DOT, i)

        def getRuleIndex(self):
            return CSharpParser.RULE_qualified_identifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQualified_identifier" ):
                listener.enterQualified_identifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQualified_identifier" ):
                listener.exitQualified_identifier(self)




    def qualified_identifier(self):

        localctx = CSharpParser.Qualified_identifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 276, self.RULE_qualified_identifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1993
            self.identifier()
            self.state = 1998
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==141:
                self.state = 1994
                self.match(CSharpParser.DOT)
                self.state = 1995
                self.identifier()
                self.state = 2000
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Namespace_bodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_BRACE(self):
            return self.getToken(CSharpParser.OPEN_BRACE, 0)

        def CLOSE_BRACE(self):
            return self.getToken(CSharpParser.CLOSE_BRACE, 0)

        def extern_alias_directives(self):
            return self.getTypedRuleContext(CSharpParser.Extern_alias_directivesContext,0)


        def using_directives(self):
            return self.getTypedRuleContext(CSharpParser.Using_directivesContext,0)


        def namespace_member_declarations(self):
            return self.getTypedRuleContext(CSharpParser.Namespace_member_declarationsContext,0)


        def SEMICOLON(self):
            return self.getToken(CSharpParser.SEMICOLON, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_namespace_body

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNamespace_body" ):
                listener.enterNamespace_body(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNamespace_body" ):
                listener.exitNamespace_body(self)




    def namespace_body(self):

        localctx = CSharpParser.Namespace_bodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 278, self.RULE_namespace_body)
        self._la = 0 # Token type
        try:
            self.state = 2013
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [135]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2001
                self.match(CSharpParser.OPEN_BRACE)
                self.state = 2003
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,203,self._ctx)
                if la_ == 1:
                    self.state = 2002
                    self.extern_alias_directives()


                self.state = 2006
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==53 or _la==113:
                    self.state = 2005
                    self.using_directives()


                self.state = 2009
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 6722968088686081536) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 1080257042393769595) != 0) or _la==137 or _la==139:
                    self.state = 2008
                    self.namespace_member_declarations()


                self.state = 2011
                self.match(CSharpParser.CLOSE_BRACE)
                pass
            elif token in [144]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2012
                self.match(CSharpParser.SEMICOLON)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Extern_alias_directivesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def extern_alias_directive(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Extern_alias_directiveContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Extern_alias_directiveContext,i)


        def getRuleIndex(self):
            return CSharpParser.RULE_extern_alias_directives

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExtern_alias_directives" ):
                listener.enterExtern_alias_directives(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExtern_alias_directives" ):
                listener.exitExtern_alias_directives(self)




    def extern_alias_directives(self):

        localctx = CSharpParser.Extern_alias_directivesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 280, self.RULE_extern_alias_directives)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2016 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 2015
                    self.extern_alias_directive()

                else:
                    raise NoViableAltException(self)
                self.state = 2018 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,207,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Extern_alias_directiveContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXTERN(self):
            return self.getToken(CSharpParser.EXTERN, 0)

        def ALIAS(self):
            return self.getToken(CSharpParser.ALIAS, 0)

        def identifier(self):
            return self.getTypedRuleContext(CSharpParser.IdentifierContext,0)


        def SEMICOLON(self):
            return self.getToken(CSharpParser.SEMICOLON, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_extern_alias_directive

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExtern_alias_directive" ):
                listener.enterExtern_alias_directive(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExtern_alias_directive" ):
                listener.exitExtern_alias_directive(self)




    def extern_alias_directive(self):

        localctx = CSharpParser.Extern_alias_directiveContext(self, self._ctx, self.state)
        self.enterRule(localctx, 282, self.RULE_extern_alias_directive)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2020
            self.match(CSharpParser.EXTERN)
            self.state = 2021
            self.match(CSharpParser.ALIAS)
            self.state = 2022
            self.identifier()
            self.state = 2023
            self.match(CSharpParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Using_directivesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def using_directive(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Using_directiveContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Using_directiveContext,i)


        def getRuleIndex(self):
            return CSharpParser.RULE_using_directives

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUsing_directives" ):
                listener.enterUsing_directives(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUsing_directives" ):
                listener.exitUsing_directives(self)




    def using_directives(self):

        localctx = CSharpParser.Using_directivesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 284, self.RULE_using_directives)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2026 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 2025
                    self.using_directive()

                else:
                    raise NoViableAltException(self)
                self.state = 2028 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,208,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Using_directiveContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CSharpParser.RULE_using_directive

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class UsingAliasDirectiveContext(Using_directiveContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CSharpParser.Using_directiveContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def USING(self):
            return self.getToken(CSharpParser.USING, 0)
        def identifier(self):
            return self.getTypedRuleContext(CSharpParser.IdentifierContext,0)

        def ASSIGNMENT(self):
            return self.getToken(CSharpParser.ASSIGNMENT, 0)
        def SEMICOLON(self):
            return self.getToken(CSharpParser.SEMICOLON, 0)
        def namespace_or_type_name(self):
            return self.getTypedRuleContext(CSharpParser.Namespace_or_type_nameContext,0)

        def tuple_type(self):
            return self.getTypedRuleContext(CSharpParser.Tuple_typeContext,0)

        def GLOBAL(self):
            return self.getToken(CSharpParser.GLOBAL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUsingAliasDirective" ):
                listener.enterUsingAliasDirective(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUsingAliasDirective" ):
                listener.exitUsingAliasDirective(self)


    class UsingNamespaceDirectiveContext(Using_directiveContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CSharpParser.Using_directiveContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def USING(self):
            return self.getToken(CSharpParser.USING, 0)
        def namespace_or_type_name(self):
            return self.getTypedRuleContext(CSharpParser.Namespace_or_type_nameContext,0)

        def SEMICOLON(self):
            return self.getToken(CSharpParser.SEMICOLON, 0)
        def GLOBAL(self):
            return self.getToken(CSharpParser.GLOBAL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUsingNamespaceDirective" ):
                listener.enterUsingNamespaceDirective(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUsingNamespaceDirective" ):
                listener.exitUsingNamespaceDirective(self)


    class UsingStaticDirectiveContext(Using_directiveContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CSharpParser.Using_directiveContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def USING(self):
            return self.getToken(CSharpParser.USING, 0)
        def STATIC(self):
            return self.getToken(CSharpParser.STATIC, 0)
        def namespace_or_type_name(self):
            return self.getTypedRuleContext(CSharpParser.Namespace_or_type_nameContext,0)

        def SEMICOLON(self):
            return self.getToken(CSharpParser.SEMICOLON, 0)
        def GLOBAL(self):
            return self.getToken(CSharpParser.GLOBAL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUsingStaticDirective" ):
                listener.enterUsingStaticDirective(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUsingStaticDirective" ):
                listener.exitUsingStaticDirective(self)



    def using_directive(self):

        localctx = CSharpParser.Using_directiveContext(self, self._ctx, self.state)
        self.enterRule(localctx, 286, self.RULE_using_directive)
        self._la = 0 # Token type
        try:
            self.state = 2057
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,213,self._ctx)
            if la_ == 1:
                localctx = CSharpParser.UsingAliasDirectiveContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2031
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==53:
                    self.state = 2030
                    self.match(CSharpParser.GLOBAL)


                self.state = 2033
                self.match(CSharpParser.USING)
                self.state = 2034
                self.identifier()
                self.state = 2035
                self.match(CSharpParser.ASSIGNMENT)
                self.state = 2038
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,210,self._ctx)
                if la_ == 1:
                    self.state = 2036
                    self.namespace_or_type_name()
                    pass

                elif la_ == 2:
                    self.state = 2037
                    self.tuple_type()
                    pass


                self.state = 2040
                self.match(CSharpParser.SEMICOLON)
                pass

            elif la_ == 2:
                localctx = CSharpParser.UsingNamespaceDirectiveContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2043
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==53:
                    self.state = 2042
                    self.match(CSharpParser.GLOBAL)


                self.state = 2045
                self.match(CSharpParser.USING)
                self.state = 2046
                self.namespace_or_type_name()
                self.state = 2047
                self.match(CSharpParser.SEMICOLON)
                pass

            elif la_ == 3:
                localctx = CSharpParser.UsingStaticDirectiveContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 2050
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==53:
                    self.state = 2049
                    self.match(CSharpParser.GLOBAL)


                self.state = 2052
                self.match(CSharpParser.USING)
                self.state = 2053
                self.match(CSharpParser.STATIC)
                self.state = 2054
                self.namespace_or_type_name()
                self.state = 2055
                self.match(CSharpParser.SEMICOLON)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Namespace_member_declarationsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def namespace_member_declaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Namespace_member_declarationContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Namespace_member_declarationContext,i)


        def getRuleIndex(self):
            return CSharpParser.RULE_namespace_member_declarations

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNamespace_member_declarations" ):
                listener.enterNamespace_member_declarations(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNamespace_member_declarations" ):
                listener.exitNamespace_member_declarations(self)




    def namespace_member_declarations(self):

        localctx = CSharpParser.Namespace_member_declarationsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 288, self.RULE_namespace_member_declarations)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2060 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 2059
                    self.namespace_member_declaration()

                else:
                    raise NoViableAltException(self)
                self.state = 2062 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,214,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Namespace_member_declarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def namespace_declaration(self):
            return self.getTypedRuleContext(CSharpParser.Namespace_declarationContext,0)


        def type_declaration(self):
            return self.getTypedRuleContext(CSharpParser.Type_declarationContext,0)


        def module_initializer_declaration(self):
            return self.getTypedRuleContext(CSharpParser.Module_initializer_declarationContext,0)


        def common_member_declaration(self):
            return self.getTypedRuleContext(CSharpParser.Common_member_declarationContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_namespace_member_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNamespace_member_declaration" ):
                listener.enterNamespace_member_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNamespace_member_declaration" ):
                listener.exitNamespace_member_declaration(self)




    def namespace_member_declaration(self):

        localctx = CSharpParser.Namespace_member_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 290, self.RULE_namespace_member_declaration)
        try:
            self.state = 2068
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,215,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2064
                self.namespace_declaration()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2065
                self.type_declaration()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2066
                self.module_initializer_declaration()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2067
                self.common_member_declaration()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Type_declarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def class_definition(self):
            return self.getTypedRuleContext(CSharpParser.Class_definitionContext,0)


        def struct_definition(self):
            return self.getTypedRuleContext(CSharpParser.Struct_definitionContext,0)


        def interface_definition(self):
            return self.getTypedRuleContext(CSharpParser.Interface_definitionContext,0)


        def enum_definition(self):
            return self.getTypedRuleContext(CSharpParser.Enum_definitionContext,0)


        def delegate_definition(self):
            return self.getTypedRuleContext(CSharpParser.Delegate_definitionContext,0)


        def record_definition(self):
            return self.getTypedRuleContext(CSharpParser.Record_definitionContext,0)


        def attributes(self):
            return self.getTypedRuleContext(CSharpParser.AttributesContext,0)


        def all_member_modifiers(self):
            return self.getTypedRuleContext(CSharpParser.All_member_modifiersContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_type_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterType_declaration" ):
                listener.enterType_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitType_declaration" ):
                listener.exitType_declaration(self)




    def type_declaration(self):

        localctx = CSharpParser.Type_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 292, self.RULE_type_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2071
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==137:
                self.state = 2070
                self.attributes()


            self.state = 2074
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,217,self._ctx)
            if la_ == 1:
                self.state = 2073
                self.all_member_modifiers()


            self.state = 2082
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,218,self._ctx)
            if la_ == 1:
                self.state = 2076
                self.class_definition()
                pass

            elif la_ == 2:
                self.state = 2077
                self.struct_definition()
                pass

            elif la_ == 3:
                self.state = 2078
                self.interface_definition()
                pass

            elif la_ == 4:
                self.state = 2079
                self.enum_definition()
                pass

            elif la_ == 5:
                self.state = 2080
                self.delegate_definition()
                pass

            elif la_ == 6:
                self.state = 2081
                self.record_definition()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Record_definitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RECORD(self):
            return self.getToken(CSharpParser.RECORD, 0)

        def identifier(self):
            return self.getTypedRuleContext(CSharpParser.IdentifierContext,0)


        def OPEN_PARENS(self):
            return self.getToken(CSharpParser.OPEN_PARENS, 0)

        def CLOSE_PARENS(self):
            return self.getToken(CSharpParser.CLOSE_PARENS, 0)

        def record_body(self):
            return self.getTypedRuleContext(CSharpParser.Record_bodyContext,0)


        def STRUCT(self):
            return self.getToken(CSharpParser.STRUCT, 0)

        def type_parameter_list(self):
            return self.getTypedRuleContext(CSharpParser.Type_parameter_listContext,0)


        def record_base(self):
            return self.getTypedRuleContext(CSharpParser.Record_baseContext,0)


        def type_parameter_constraints_clauses(self):
            return self.getTypedRuleContext(CSharpParser.Type_parameter_constraints_clausesContext,0)


        def record_parameters(self):
            return self.getTypedRuleContext(CSharpParser.Record_parametersContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_record_definition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRecord_definition" ):
                listener.enterRecord_definition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRecord_definition" ):
                listener.exitRecord_definition(self)




    def record_definition(self):

        localctx = CSharpParser.Record_definitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 294, self.RULE_record_definition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2084
            self.match(CSharpParser.RECORD)
            self.state = 2086
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==99:
                self.state = 2085
                self.match(CSharpParser.STRUCT)


            self.state = 2088
            self.identifier()
            self.state = 2090
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==156:
                self.state = 2089
                self.type_parameter_list()


            self.state = 2093
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==143:
                self.state = 2092
                self.record_base()


            self.state = 2096
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==119:
                self.state = 2095
                self.type_parameter_constraints_clauses()


            self.state = 2098
            self.match(CSharpParser.OPEN_PARENS)
            self.state = 2100
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 4921379528387572736) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 780626886595323419) != 0) or _la==137 or _la==139:
                self.state = 2099
                self.record_parameters()


            self.state = 2102
            self.match(CSharpParser.CLOSE_PARENS)
            self.state = 2103
            self.record_body()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Record_baseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COLON(self):
            return self.getToken(CSharpParser.COLON, 0)

        def class_type(self):
            return self.getTypedRuleContext(CSharpParser.Class_typeContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.COMMA)
            else:
                return self.getToken(CSharpParser.COMMA, i)

        def namespace_or_type_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Namespace_or_type_nameContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Namespace_or_type_nameContext,i)


        def getRuleIndex(self):
            return CSharpParser.RULE_record_base

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRecord_base" ):
                listener.enterRecord_base(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRecord_base" ):
                listener.exitRecord_base(self)




    def record_base(self):

        localctx = CSharpParser.Record_baseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 296, self.RULE_record_base)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2105
            self.match(CSharpParser.COLON)
            self.state = 2106
            self.class_type()
            self.state = 2111
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==142:
                self.state = 2107
                self.match(CSharpParser.COMMA)
                self.state = 2108
                self.namespace_or_type_name()
                self.state = 2113
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Record_bodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_BRACE(self):
            return self.getToken(CSharpParser.OPEN_BRACE, 0)

        def CLOSE_BRACE(self):
            return self.getToken(CSharpParser.CLOSE_BRACE, 0)

        def class_member_declarations(self):
            return self.getTypedRuleContext(CSharpParser.Class_member_declarationsContext,0)


        def SEMICOLON(self):
            return self.getToken(CSharpParser.SEMICOLON, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_record_body

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRecord_body" ):
                listener.enterRecord_body(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRecord_body" ):
                listener.exitRecord_body(self)




    def record_body(self):

        localctx = CSharpParser.Record_bodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 298, self.RULE_record_body)
        self._la = 0 # Token type
        try:
            self.state = 2120
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [135]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2114
                self.match(CSharpParser.OPEN_BRACE)
                self.state = 2116
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 6722968088686081536) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 1080257042393769563) != 0) or ((((_la - 137)) & ~0x3f) == 0 and ((1 << (_la - 137)) & 131077) != 0):
                    self.state = 2115
                    self.class_member_declarations()


                self.state = 2118
                self.match(CSharpParser.CLOSE_BRACE)
                pass
            elif token in [144]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2119
                self.match(CSharpParser.SEMICOLON)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Record_parametersContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def record_parameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Record_parameterContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Record_parameterContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.COMMA)
            else:
                return self.getToken(CSharpParser.COMMA, i)

        def getRuleIndex(self):
            return CSharpParser.RULE_record_parameters

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRecord_parameters" ):
                listener.enterRecord_parameters(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRecord_parameters" ):
                listener.exitRecord_parameters(self)




    def record_parameters(self):

        localctx = CSharpParser.Record_parametersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 300, self.RULE_record_parameters)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2122
            self.record_parameter()
            self.state = 2127
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==142:
                self.state = 2123
                self.match(CSharpParser.COMMA)
                self.state = 2124
                self.record_parameter()
                self.state = 2129
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Record_parameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def type_(self):
            return self.getTypedRuleContext(CSharpParser.Type_Context,0)


        def identifier(self):
            return self.getTypedRuleContext(CSharpParser.IdentifierContext,0)


        def attributes(self):
            return self.getTypedRuleContext(CSharpParser.AttributesContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_record_parameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRecord_parameter" ):
                listener.enterRecord_parameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRecord_parameter" ):
                listener.exitRecord_parameter(self)




    def record_parameter(self):

        localctx = CSharpParser.Record_parameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 302, self.RULE_record_parameter)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2131
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==137:
                self.state = 2130
                self.attributes()


            self.state = 2133
            self.type_()
            self.state = 2134
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Qualified_alias_memberContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(CSharpParser.IdentifierContext,i)


        def DOUBLE_COLON(self):
            return self.getToken(CSharpParser.DOUBLE_COLON, 0)

        def type_argument_list(self):
            return self.getTypedRuleContext(CSharpParser.Type_argument_listContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_qualified_alias_member

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQualified_alias_member" ):
                listener.enterQualified_alias_member(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQualified_alias_member" ):
                listener.exitQualified_alias_member(self)




    def qualified_alias_member(self):

        localctx = CSharpParser.Qualified_alias_memberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 304, self.RULE_qualified_alias_member)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2136
            self.identifier()
            self.state = 2137
            self.match(CSharpParser.DOUBLE_COLON)
            self.state = 2138
            self.identifier()
            self.state = 2140
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,229,self._ctx)
            if la_ == 1:
                self.state = 2139
                self.type_argument_list()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Type_parameter_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LT(self):
            return self.getToken(CSharpParser.LT, 0)

        def type_parameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Type_parameterContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Type_parameterContext,i)


        def GT(self):
            return self.getToken(CSharpParser.GT, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.COMMA)
            else:
                return self.getToken(CSharpParser.COMMA, i)

        def getRuleIndex(self):
            return CSharpParser.RULE_type_parameter_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterType_parameter_list" ):
                listener.enterType_parameter_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitType_parameter_list" ):
                listener.exitType_parameter_list(self)




    def type_parameter_list(self):

        localctx = CSharpParser.Type_parameter_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 306, self.RULE_type_parameter_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2142
            self.match(CSharpParser.LT)
            self.state = 2143
            self.type_parameter()
            self.state = 2148
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==142:
                self.state = 2144
                self.match(CSharpParser.COMMA)
                self.state = 2145
                self.type_parameter()
                self.state = 2150
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2151
            self.match(CSharpParser.GT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Type_parameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(CSharpParser.IdentifierContext,0)


        def attributes(self):
            return self.getTypedRuleContext(CSharpParser.AttributesContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_type_parameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterType_parameter" ):
                listener.enterType_parameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitType_parameter" ):
                listener.exitType_parameter(self)




    def type_parameter(self):

        localctx = CSharpParser.Type_parameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 308, self.RULE_type_parameter)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2154
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==137:
                self.state = 2153
                self.attributes()


            self.state = 2156
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Class_baseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COLON(self):
            return self.getToken(CSharpParser.COLON, 0)

        def class_type(self):
            return self.getTypedRuleContext(CSharpParser.Class_typeContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.COMMA)
            else:
                return self.getToken(CSharpParser.COMMA, i)

        def namespace_or_type_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Namespace_or_type_nameContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Namespace_or_type_nameContext,i)


        def getRuleIndex(self):
            return CSharpParser.RULE_class_base

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClass_base" ):
                listener.enterClass_base(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClass_base" ):
                listener.exitClass_base(self)




    def class_base(self):

        localctx = CSharpParser.Class_baseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 310, self.RULE_class_base)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2158
            self.match(CSharpParser.COLON)
            self.state = 2159
            self.class_type()
            self.state = 2164
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==142:
                self.state = 2160
                self.match(CSharpParser.COMMA)
                self.state = 2161
                self.namespace_or_type_name()
                self.state = 2166
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Interface_type_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def namespace_or_type_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Namespace_or_type_nameContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Namespace_or_type_nameContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.COMMA)
            else:
                return self.getToken(CSharpParser.COMMA, i)

        def getRuleIndex(self):
            return CSharpParser.RULE_interface_type_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterface_type_list" ):
                listener.enterInterface_type_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterface_type_list" ):
                listener.exitInterface_type_list(self)




    def interface_type_list(self):

        localctx = CSharpParser.Interface_type_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 312, self.RULE_interface_type_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2167
            self.namespace_or_type_name()
            self.state = 2172
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==142:
                self.state = 2168
                self.match(CSharpParser.COMMA)
                self.state = 2169
                self.namespace_or_type_name()
                self.state = 2174
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Type_parameter_constraints_clausesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def type_parameter_constraints_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Type_parameter_constraints_clauseContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Type_parameter_constraints_clauseContext,i)


        def getRuleIndex(self):
            return CSharpParser.RULE_type_parameter_constraints_clauses

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterType_parameter_constraints_clauses" ):
                listener.enterType_parameter_constraints_clauses(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitType_parameter_constraints_clauses" ):
                listener.exitType_parameter_constraints_clauses(self)




    def type_parameter_constraints_clauses(self):

        localctx = CSharpParser.Type_parameter_constraints_clausesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 314, self.RULE_type_parameter_constraints_clauses)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2176 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 2175
                self.type_parameter_constraints_clause()
                self.state = 2178 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==119):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Type_parameter_constraints_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHERE(self):
            return self.getToken(CSharpParser.WHERE, 0)

        def identifier(self):
            return self.getTypedRuleContext(CSharpParser.IdentifierContext,0)


        def COLON(self):
            return self.getToken(CSharpParser.COLON, 0)

        def type_parameter_constraints(self):
            return self.getTypedRuleContext(CSharpParser.Type_parameter_constraintsContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_type_parameter_constraints_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterType_parameter_constraints_clause" ):
                listener.enterType_parameter_constraints_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitType_parameter_constraints_clause" ):
                listener.exitType_parameter_constraints_clause(self)




    def type_parameter_constraints_clause(self):

        localctx = CSharpParser.Type_parameter_constraints_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 316, self.RULE_type_parameter_constraints_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2180
            self.match(CSharpParser.WHERE)
            self.state = 2181
            self.identifier()
            self.state = 2182
            self.match(CSharpParser.COLON)
            self.state = 2183
            self.type_parameter_constraints()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Type_parameter_constraintsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def constructor_constraint(self):
            return self.getTypedRuleContext(CSharpParser.Constructor_constraintContext,0)


        def primary_constraint(self):
            return self.getTypedRuleContext(CSharpParser.Primary_constraintContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.COMMA)
            else:
                return self.getToken(CSharpParser.COMMA, i)

        def secondary_constraints(self):
            return self.getTypedRuleContext(CSharpParser.Secondary_constraintsContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_type_parameter_constraints

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterType_parameter_constraints" ):
                listener.enterType_parameter_constraints(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitType_parameter_constraints" ):
                listener.exitType_parameter_constraints(self)




    def type_parameter_constraints(self):

        localctx = CSharpParser.Type_parameter_constraintsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 318, self.RULE_type_parameter_constraints)
        self._la = 0 # Token type
        try:
            self.state = 2195
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [70]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2185
                self.constructor_constraint()
                pass
            elif token in [10, 12, 13, 15, 16, 17, 21, 27, 33, 36, 39, 50, 51, 54, 62, 64, 65, 68, 73, 74, 77, 81, 88, 92, 93, 98, 99, 110, 114, 118, 119, 121, 123]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2186
                self.primary_constraint()
                self.state = 2189
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,235,self._ctx)
                if la_ == 1:
                    self.state = 2187
                    self.match(CSharpParser.COMMA)
                    self.state = 2188
                    self.secondary_constraints()


                self.state = 2193
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==142:
                    self.state = 2191
                    self.match(CSharpParser.COMMA)
                    self.state = 2192
                    self.constructor_constraint()


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Primary_constraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def class_type(self):
            return self.getTypedRuleContext(CSharpParser.Class_typeContext,0)


        def CLASS(self):
            return self.getToken(CSharpParser.CLASS, 0)

        def INTERR(self):
            return self.getToken(CSharpParser.INTERR, 0)

        def STRUCT(self):
            return self.getToken(CSharpParser.STRUCT, 0)

        def UNMANAGED(self):
            return self.getToken(CSharpParser.UNMANAGED, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_primary_constraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrimary_constraint" ):
                listener.enterPrimary_constraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrimary_constraint" ):
                listener.exitPrimary_constraint(self)




    def primary_constraint(self):

        localctx = CSharpParser.Primary_constraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 320, self.RULE_primary_constraint)
        self._la = 0 # Token type
        try:
            self.state = 2204
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,239,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2197
                self.class_type()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2198
                self.match(CSharpParser.CLASS)
                self.state = 2200
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==158:
                    self.state = 2199
                    self.match(CSharpParser.INTERR)


                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2202
                self.match(CSharpParser.STRUCT)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2203
                self.match(CSharpParser.UNMANAGED)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PatternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declaration_pattern(self):
            return self.getTypedRuleContext(CSharpParser.Declaration_patternContext,0)


        def constant_pattern(self):
            return self.getTypedRuleContext(CSharpParser.Constant_patternContext,0)


        def var_pattern(self):
            return self.getTypedRuleContext(CSharpParser.Var_patternContext,0)


        def relational_pattern(self):
            return self.getTypedRuleContext(CSharpParser.Relational_patternContext,0)


        def and_pattern(self):
            return self.getTypedRuleContext(CSharpParser.And_patternContext,0)


        def or_pattern(self):
            return self.getTypedRuleContext(CSharpParser.Or_patternContext,0)


        def not_pattern(self):
            return self.getTypedRuleContext(CSharpParser.Not_patternContext,0)


        def expression(self):
            return self.getTypedRuleContext(CSharpParser.ExpressionContext,0)


        def is_pattern(self):
            return self.getTypedRuleContext(CSharpParser.Is_patternContext,0)


        def list_pattern(self):
            return self.getTypedRuleContext(CSharpParser.List_patternContext,0)


        def rest_pattern(self):
            return self.getTypedRuleContext(CSharpParser.Rest_patternContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_pattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPattern" ):
                listener.enterPattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPattern" ):
                listener.exitPattern(self)




    def pattern(self):

        localctx = CSharpParser.PatternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 322, self.RULE_pattern)
        try:
            self.state = 2217
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,240,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2206
                self.declaration_pattern()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2207
                self.constant_pattern()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2208
                self.var_pattern()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2209
                self.relational_pattern()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 2210
                self.and_pattern()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 2211
                self.or_pattern()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 2212
                self.not_pattern()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 2213
                self.expression()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 2214
                self.is_pattern()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 2215
                self.list_pattern()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 2216
                self.rest_pattern()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Rest_patternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OP_RANGE(self):
            return self.getToken(CSharpParser.OP_RANGE, 0)

        def type_(self):
            return self.getTypedRuleContext(CSharpParser.Type_Context,0)


        def expression(self):
            return self.getTypedRuleContext(CSharpParser.ExpressionContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_rest_pattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRest_pattern" ):
                listener.enterRest_pattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRest_pattern" ):
                listener.exitRest_pattern(self)




    def rest_pattern(self):

        localctx = CSharpParser.Rest_patternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 324, self.RULE_rest_pattern)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2219
            self.match(CSharpParser.OP_RANGE)
            self.state = 2221
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,241,self._ctx)
            if la_ == 1:
                self.state = 2220
                self.type_()


            self.state = 2224
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,242,self._ctx)
            if la_ == 1:
                self.state = 2223
                self.expression()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class List_patternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_BRACKET(self):
            return self.getToken(CSharpParser.OPEN_BRACKET, 0)

        def pattern_items(self):
            return self.getTypedRuleContext(CSharpParser.Pattern_itemsContext,0)


        def CLOSE_BRACKET(self):
            return self.getToken(CSharpParser.CLOSE_BRACKET, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_list_pattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterList_pattern" ):
                listener.enterList_pattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitList_pattern" ):
                listener.exitList_pattern(self)




    def list_pattern(self):

        localctx = CSharpParser.List_patternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 326, self.RULE_list_pattern)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2226
            self.match(CSharpParser.OPEN_BRACKET)
            self.state = 2227
            self.pattern_items()
            self.state = 2228
            self.match(CSharpParser.CLOSE_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pattern_itemsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pattern(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.PatternContext)
            else:
                return self.getTypedRuleContext(CSharpParser.PatternContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.COMMA)
            else:
                return self.getToken(CSharpParser.COMMA, i)

        def getRuleIndex(self):
            return CSharpParser.RULE_pattern_items

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPattern_items" ):
                listener.enterPattern_items(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPattern_items" ):
                listener.exitPattern_items(self)




    def pattern_items(self):

        localctx = CSharpParser.Pattern_itemsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 328, self.RULE_pattern_items)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2230
            self.pattern()
            self.state = 2235
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,243,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2231
                    self.match(CSharpParser.COMMA)
                    self.state = 2232
                    self.pattern() 
                self.state = 2237
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,243,self._ctx)

            self.state = 2239
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==142:
                self.state = 2238
                self.match(CSharpParser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Is_patternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def type_(self):
            return self.getTypedRuleContext(CSharpParser.Type_Context,0)


        def simple_designation(self):
            return self.getTypedRuleContext(CSharpParser.Simple_designationContext,0)


        def property_pattern(self):
            return self.getTypedRuleContext(CSharpParser.Property_patternContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_is_pattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIs_pattern" ):
                listener.enterIs_pattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIs_pattern" ):
                listener.exitIs_pattern(self)




    def is_pattern(self):

        localctx = CSharpParser.Is_patternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 330, self.RULE_is_pattern)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2242
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,245,self._ctx)
            if la_ == 1:
                self.state = 2241
                self.type_()


            self.state = 2245
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,246,self._ctx)
            if la_ == 1:
                self.state = 2244
                self.simple_designation()


            self.state = 2248
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 2247
                self.property_pattern()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Property_patternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_BRACE(self):
            return self.getToken(CSharpParser.OPEN_BRACE, 0)

        def property_pattern_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Property_pattern_clauseContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Property_pattern_clauseContext,i)


        def CLOSE_BRACE(self):
            return self.getToken(CSharpParser.CLOSE_BRACE, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.COMMA)
            else:
                return self.getToken(CSharpParser.COMMA, i)

        def getRuleIndex(self):
            return CSharpParser.RULE_property_pattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProperty_pattern" ):
                listener.enterProperty_pattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProperty_pattern" ):
                listener.exitProperty_pattern(self)




    def property_pattern(self):

        localctx = CSharpParser.Property_patternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 332, self.RULE_property_pattern)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2250
            self.match(CSharpParser.OPEN_BRACE)
            self.state = 2251
            self.property_pattern_clause()
            self.state = 2256
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==142:
                self.state = 2252
                self.match(CSharpParser.COMMA)
                self.state = 2253
                self.property_pattern_clause()
                self.state = 2258
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2259
            self.match(CSharpParser.CLOSE_BRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Property_pattern_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(CSharpParser.IdentifierContext,0)


        def COLON(self):
            return self.getToken(CSharpParser.COLON, 0)

        def pattern(self):
            return self.getTypedRuleContext(CSharpParser.PatternContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_property_pattern_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProperty_pattern_clause" ):
                listener.enterProperty_pattern_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProperty_pattern_clause" ):
                listener.exitProperty_pattern_clause(self)




    def property_pattern_clause(self):

        localctx = CSharpParser.Property_pattern_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 334, self.RULE_property_pattern_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2261
            self.identifier()
            self.state = 2262
            self.match(CSharpParser.COLON)
            self.state = 2263
            self.pattern()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Relational_patternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LT(self):
            return self.getToken(CSharpParser.LT, 0)

        def expression(self):
            return self.getTypedRuleContext(CSharpParser.ExpressionContext,0)


        def OP_LE(self):
            return self.getToken(CSharpParser.OP_LE, 0)

        def GT(self):
            return self.getToken(CSharpParser.GT, 0)

        def OP_GE(self):
            return self.getToken(CSharpParser.OP_GE, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_relational_pattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRelational_pattern" ):
                listener.enterRelational_pattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRelational_pattern" ):
                listener.exitRelational_pattern(self)




    def relational_pattern(self):

        localctx = CSharpParser.Relational_patternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 336, self.RULE_relational_pattern)
        try:
            self.state = 2273
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [156]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2265
                self.match(CSharpParser.LT)
                self.state = 2266
                self.expression()
                pass
            elif token in [168]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2267
                self.match(CSharpParser.OP_LE)
                self.state = 2268
                self.expression()
                pass
            elif token in [157]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2269
                self.match(CSharpParser.GT)
                self.state = 2270
                self.expression()
                pass
            elif token in [169]:
                self.enterOuterAlt(localctx, 4)
                self.state = 2271
                self.match(CSharpParser.OP_GE)
                self.state = 2272
                self.expression()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class And_patternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def relational_pattern(self):
            return self.getTypedRuleContext(CSharpParser.Relational_patternContext,0)


        def AND(self):
            return self.getToken(CSharpParser.AND, 0)

        def pattern(self):
            return self.getTypedRuleContext(CSharpParser.PatternContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_and_pattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnd_pattern" ):
                listener.enterAnd_pattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnd_pattern" ):
                listener.exitAnd_pattern(self)




    def and_pattern(self):

        localctx = CSharpParser.And_patternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 338, self.RULE_and_pattern)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2275
            self.relational_pattern()
            self.state = 2276
            self.match(CSharpParser.AND)
            self.state = 2277
            self.pattern()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Or_patternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def relational_pattern(self):
            return self.getTypedRuleContext(CSharpParser.Relational_patternContext,0)


        def OR(self):
            return self.getToken(CSharpParser.OR, 0)

        def pattern(self):
            return self.getTypedRuleContext(CSharpParser.PatternContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_or_pattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOr_pattern" ):
                listener.enterOr_pattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOr_pattern" ):
                listener.exitOr_pattern(self)




    def or_pattern(self):

        localctx = CSharpParser.Or_patternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 340, self.RULE_or_pattern)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2279
            self.relational_pattern()
            self.state = 2280
            self.match(CSharpParser.OR)
            self.state = 2281
            self.pattern()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Not_patternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NOT(self):
            return self.getToken(CSharpParser.NOT, 0)

        def pattern(self):
            return self.getTypedRuleContext(CSharpParser.PatternContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_not_pattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNot_pattern" ):
                listener.enterNot_pattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNot_pattern" ):
                listener.exitNot_pattern(self)




    def not_pattern(self):

        localctx = CSharpParser.Not_patternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 342, self.RULE_not_pattern)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2283
            self.match(CSharpParser.NOT)
            self.state = 2284
            self.pattern()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Declaration_patternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def type_(self):
            return self.getTypedRuleContext(CSharpParser.Type_Context,0)


        def simple_designation(self):
            return self.getTypedRuleContext(CSharpParser.Simple_designationContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_declaration_pattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclaration_pattern" ):
                listener.enterDeclaration_pattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclaration_pattern" ):
                listener.exitDeclaration_pattern(self)




    def declaration_pattern(self):

        localctx = CSharpParser.Declaration_patternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 344, self.RULE_declaration_pattern)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2286
            self.type_()
            self.state = 2287
            self.simple_designation()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Simple_designationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def single_variable_designation(self):
            return self.getTypedRuleContext(CSharpParser.Single_variable_designationContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_simple_designation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimple_designation" ):
                listener.enterSimple_designation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimple_designation" ):
                listener.exitSimple_designation(self)




    def simple_designation(self):

        localctx = CSharpParser.Simple_designationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 346, self.RULE_simple_designation)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2289
            self.single_variable_designation()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Single_variable_designationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(CSharpParser.IdentifierContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_single_variable_designation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSingle_variable_designation" ):
                listener.enterSingle_variable_designation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSingle_variable_designation" ):
                listener.exitSingle_variable_designation(self)




    def single_variable_designation(self):

        localctx = CSharpParser.Single_variable_designationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 348, self.RULE_single_variable_designation)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2291
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Constant_patternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def constant_expression(self):
            return self.getTypedRuleContext(CSharpParser.Constant_expressionContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_constant_pattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstant_pattern" ):
                listener.enterConstant_pattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstant_pattern" ):
                listener.exitConstant_pattern(self)




    def constant_pattern(self):

        localctx = CSharpParser.Constant_patternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 350, self.RULE_constant_pattern)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2293
            self.constant_expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Var_patternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VAR(self):
            return self.getToken(CSharpParser.VAR, 0)

        def designation(self):
            return self.getTypedRuleContext(CSharpParser.DesignationContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_var_pattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVar_pattern" ):
                listener.enterVar_pattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVar_pattern" ):
                listener.exitVar_pattern(self)




    def var_pattern(self):

        localctx = CSharpParser.Var_patternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 352, self.RULE_var_pattern)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2295
            self.match(CSharpParser.VAR)
            self.state = 2296
            self.designation()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DesignationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simple_designation(self):
            return self.getTypedRuleContext(CSharpParser.Simple_designationContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_designation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDesignation" ):
                listener.enterDesignation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDesignation" ):
                listener.exitDesignation(self)




    def designation(self):

        localctx = CSharpParser.DesignationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 354, self.RULE_designation)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2298
            self.simple_designation()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Module_initializer_declarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def attributes(self):
            return self.getTypedRuleContext(CSharpParser.AttributesContext,0)


        def STATIC(self):
            return self.getToken(CSharpParser.STATIC, 0)

        def VOID(self):
            return self.getToken(CSharpParser.VOID, 0)

        def identifier(self):
            return self.getTypedRuleContext(CSharpParser.IdentifierContext,0)


        def OPEN_PARENS(self):
            return self.getToken(CSharpParser.OPEN_PARENS, 0)

        def CLOSE_PARENS(self):
            return self.getToken(CSharpParser.CLOSE_PARENS, 0)

        def method_body(self):
            return self.getTypedRuleContext(CSharpParser.Method_bodyContext,0)


        def INTERNAL(self):
            return self.getToken(CSharpParser.INTERNAL, 0)

        def PUBLIC(self):
            return self.getToken(CSharpParser.PUBLIC, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_module_initializer_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModule_initializer_declaration" ):
                listener.enterModule_initializer_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModule_initializer_declaration" ):
                listener.exitModule_initializer_declaration(self)




    def module_initializer_declaration(self):

        localctx = CSharpParser.Module_initializer_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 356, self.RULE_module_initializer_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2300
            self.attributes()
            self.state = 2302
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==60:
                self.state = 2301
                self.match(CSharpParser.INTERNAL)


            self.state = 2305
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==84:
                self.state = 2304
                self.match(CSharpParser.PUBLIC)


            self.state = 2307
            self.match(CSharpParser.STATIC)
            self.state = 2308
            self.match(CSharpParser.VOID)
            self.state = 2309
            self.identifier()
            self.state = 2310
            self.match(CSharpParser.OPEN_PARENS)
            self.state = 2311
            self.match(CSharpParser.CLOSE_PARENS)
            self.state = 2312
            self.method_body()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Secondary_constraintsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def namespace_or_type_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Namespace_or_type_nameContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Namespace_or_type_nameContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.COMMA)
            else:
                return self.getToken(CSharpParser.COMMA, i)

        def getRuleIndex(self):
            return CSharpParser.RULE_secondary_constraints

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSecondary_constraints" ):
                listener.enterSecondary_constraints(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSecondary_constraints" ):
                listener.exitSecondary_constraints(self)




    def secondary_constraints(self):

        localctx = CSharpParser.Secondary_constraintsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 358, self.RULE_secondary_constraints)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2314
            self.namespace_or_type_name()
            self.state = 2319
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,252,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2315
                    self.match(CSharpParser.COMMA)
                    self.state = 2316
                    self.namespace_or_type_name() 
                self.state = 2321
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,252,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Constructor_constraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NEW(self):
            return self.getToken(CSharpParser.NEW, 0)

        def OPEN_PARENS(self):
            return self.getToken(CSharpParser.OPEN_PARENS, 0)

        def CLOSE_PARENS(self):
            return self.getToken(CSharpParser.CLOSE_PARENS, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_constructor_constraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstructor_constraint" ):
                listener.enterConstructor_constraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstructor_constraint" ):
                listener.exitConstructor_constraint(self)




    def constructor_constraint(self):

        localctx = CSharpParser.Constructor_constraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 360, self.RULE_constructor_constraint)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2322
            self.match(CSharpParser.NEW)
            self.state = 2323
            self.match(CSharpParser.OPEN_PARENS)
            self.state = 2324
            self.match(CSharpParser.CLOSE_PARENS)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Class_bodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_BRACE(self):
            return self.getToken(CSharpParser.OPEN_BRACE, 0)

        def CLOSE_BRACE(self):
            return self.getToken(CSharpParser.CLOSE_BRACE, 0)

        def class_member_declarations(self):
            return self.getTypedRuleContext(CSharpParser.Class_member_declarationsContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_class_body

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClass_body" ):
                listener.enterClass_body(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClass_body" ):
                listener.exitClass_body(self)




    def class_body(self):

        localctx = CSharpParser.Class_bodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 362, self.RULE_class_body)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2326
            self.match(CSharpParser.OPEN_BRACE)
            self.state = 2328
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 6722968088686081536) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 1080257042393769563) != 0) or ((((_la - 137)) & ~0x3f) == 0 and ((1 << (_la - 137)) & 131077) != 0):
                self.state = 2327
                self.class_member_declarations()


            self.state = 2330
            self.match(CSharpParser.CLOSE_BRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Class_member_declarationsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def class_member_declaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Class_member_declarationContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Class_member_declarationContext,i)


        def getRuleIndex(self):
            return CSharpParser.RULE_class_member_declarations

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClass_member_declarations" ):
                listener.enterClass_member_declarations(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClass_member_declarations" ):
                listener.exitClass_member_declarations(self)




    def class_member_declarations(self):

        localctx = CSharpParser.Class_member_declarationsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 364, self.RULE_class_member_declarations)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2333 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 2332
                self.class_member_declaration()
                self.state = 2335 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & 6722968088686081536) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 1080257042393769563) != 0) or ((((_la - 137)) & ~0x3f) == 0 and ((1 << (_la - 137)) & 131077) != 0)):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Class_member_declarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def common_member_declaration(self):
            return self.getTypedRuleContext(CSharpParser.Common_member_declarationContext,0)


        def destructor_definition(self):
            return self.getTypedRuleContext(CSharpParser.Destructor_definitionContext,0)


        def attributes(self):
            return self.getTypedRuleContext(CSharpParser.AttributesContext,0)


        def all_member_modifiers(self):
            return self.getTypedRuleContext(CSharpParser.All_member_modifiersContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_class_member_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClass_member_declaration" ):
                listener.enterClass_member_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClass_member_declaration" ):
                listener.exitClass_member_declaration(self)




    def class_member_declaration(self):

        localctx = CSharpParser.Class_member_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 366, self.RULE_class_member_declaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2338
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,255,self._ctx)
            if la_ == 1:
                self.state = 2337
                self.attributes()


            self.state = 2341
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,256,self._ctx)
            if la_ == 1:
                self.state = 2340
                self.all_member_modifiers()


            self.state = 2345
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [9, 10, 12, 13, 15, 16, 17, 19, 21, 22, 25, 27, 28, 30, 32, 33, 35, 36, 38, 39, 40, 41, 42, 46, 47, 50, 51, 54, 56, 58, 59, 60, 62, 64, 65, 67, 68, 70, 73, 74, 77, 79, 81, 82, 83, 84, 85, 86, 87, 88, 90, 91, 92, 93, 94, 97, 98, 99, 107, 108, 110, 111, 112, 114, 115, 116, 118, 119, 121, 122, 123, 137, 139]:
                self.state = 2343
                self.common_member_declaration()
                pass
            elif token in [154]:
                self.state = 2344
                self.destructor_definition()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class All_member_modifiersContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def all_member_modifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.All_member_modifierContext)
            else:
                return self.getTypedRuleContext(CSharpParser.All_member_modifierContext,i)


        def getRuleIndex(self):
            return CSharpParser.RULE_all_member_modifiers

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAll_member_modifiers" ):
                listener.enterAll_member_modifiers(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAll_member_modifiers" ):
                listener.exitAll_member_modifiers(self)




    def all_member_modifiers(self):

        localctx = CSharpParser.All_member_modifiersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 368, self.RULE_all_member_modifiers)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2348 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 2347
                    self.all_member_modifier()

                else:
                    raise NoViableAltException(self)
                self.state = 2350 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,258,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class All_member_modifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NEW(self):
            return self.getToken(CSharpParser.NEW, 0)

        def PUBLIC(self):
            return self.getToken(CSharpParser.PUBLIC, 0)

        def PROTECTED(self):
            return self.getToken(CSharpParser.PROTECTED, 0)

        def INTERNAL(self):
            return self.getToken(CSharpParser.INTERNAL, 0)

        def PRIVATE(self):
            return self.getToken(CSharpParser.PRIVATE, 0)

        def READONLY(self):
            return self.getToken(CSharpParser.READONLY, 0)

        def VOLATILE(self):
            return self.getToken(CSharpParser.VOLATILE, 0)

        def VIRTUAL(self):
            return self.getToken(CSharpParser.VIRTUAL, 0)

        def SEALED(self):
            return self.getToken(CSharpParser.SEALED, 0)

        def OVERRIDE(self):
            return self.getToken(CSharpParser.OVERRIDE, 0)

        def ABSTRACT(self):
            return self.getToken(CSharpParser.ABSTRACT, 0)

        def STATIC(self):
            return self.getToken(CSharpParser.STATIC, 0)

        def UNSAFE(self):
            return self.getToken(CSharpParser.UNSAFE, 0)

        def EXTERN(self):
            return self.getToken(CSharpParser.EXTERN, 0)

        def PARTIAL(self):
            return self.getToken(CSharpParser.PARTIAL, 0)

        def ASYNC(self):
            return self.getToken(CSharpParser.ASYNC, 0)

        def FILE(self):
            return self.getToken(CSharpParser.FILE, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_all_member_modifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAll_member_modifier" ):
                listener.enterAll_member_modifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAll_member_modifier" ):
                listener.exitAll_member_modifier(self)




    def all_member_modifier(self):

        localctx = CSharpParser.All_member_modifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 370, self.RULE_all_member_modifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2352
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 1153066640141779456) != 0) or ((((_la - 70)) & ~0x3f) == 0 and ((1 << (_la - 70)) & 178121020078593) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Common_member_declarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def constant_declaration(self):
            return self.getTypedRuleContext(CSharpParser.Constant_declarationContext,0)


        def typed_member_declaration(self):
            return self.getTypedRuleContext(CSharpParser.Typed_member_declarationContext,0)


        def event_declaration(self):
            return self.getTypedRuleContext(CSharpParser.Event_declarationContext,0)


        def conversion_operator_declarator(self):
            return self.getTypedRuleContext(CSharpParser.Conversion_operator_declaratorContext,0)


        def body(self):
            return self.getTypedRuleContext(CSharpParser.BodyContext,0)


        def right_arrow(self):
            return self.getTypedRuleContext(CSharpParser.Right_arrowContext,0)


        def throwable_expression(self):
            return self.getTypedRuleContext(CSharpParser.Throwable_expressionContext,0)


        def SEMICOLON(self):
            return self.getToken(CSharpParser.SEMICOLON, 0)

        def constructor_declaration(self):
            return self.getTypedRuleContext(CSharpParser.Constructor_declarationContext,0)


        def method_declaration(self):
            return self.getTypedRuleContext(CSharpParser.Method_declarationContext,0)


        def class_definition(self):
            return self.getTypedRuleContext(CSharpParser.Class_definitionContext,0)


        def struct_definition(self):
            return self.getTypedRuleContext(CSharpParser.Struct_definitionContext,0)


        def interface_definition(self):
            return self.getTypedRuleContext(CSharpParser.Interface_definitionContext,0)


        def enum_definition(self):
            return self.getTypedRuleContext(CSharpParser.Enum_definitionContext,0)


        def delegate_definition(self):
            return self.getTypedRuleContext(CSharpParser.Delegate_definitionContext,0)


        def record_definition(self):
            return self.getTypedRuleContext(CSharpParser.Record_definitionContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_common_member_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCommon_member_declaration" ):
                listener.enterCommon_member_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCommon_member_declaration" ):
                listener.exitCommon_member_declaration(self)




    def common_member_declaration(self):

        localctx = CSharpParser.Common_member_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 372, self.RULE_common_member_declaration)
        try:
            self.state = 2373
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,260,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2354
                self.constant_declaration()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2355
                self.typed_member_declaration()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2356
                self.event_declaration()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2357
                self.conversion_operator_declarator()
                self.state = 2363
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,259,self._ctx)
                if la_ == 1:
                    self.state = 2358
                    self.body()
                    pass

                elif la_ == 2:
                    self.state = 2359
                    self.right_arrow()
                    self.state = 2360
                    self.throwable_expression()
                    self.state = 2361
                    self.match(CSharpParser.SEMICOLON)
                    pass


                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 2365
                self.constructor_declaration()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 2366
                self.method_declaration()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 2367
                self.class_definition()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 2368
                self.struct_definition()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 2369
                self.interface_definition()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 2370
                self.enum_definition()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 2371
                self.delegate_definition()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 2372
                self.record_definition()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Typed_member_declarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def type_(self):
            return self.getTypedRuleContext(CSharpParser.Type_Context,0)


        def namespace_or_type_name(self):
            return self.getTypedRuleContext(CSharpParser.Namespace_or_type_nameContext,0)


        def DOT(self):
            return self.getToken(CSharpParser.DOT, 0)

        def indexer_declaration(self):
            return self.getTypedRuleContext(CSharpParser.Indexer_declarationContext,0)


        def method_declaration(self):
            return self.getTypedRuleContext(CSharpParser.Method_declarationContext,0)


        def property_declaration(self):
            return self.getTypedRuleContext(CSharpParser.Property_declarationContext,0)


        def operator_declaration(self):
            return self.getTypedRuleContext(CSharpParser.Operator_declarationContext,0)


        def field_declaration(self):
            return self.getTypedRuleContext(CSharpParser.Field_declarationContext,0)


        def REF(self):
            return self.getToken(CSharpParser.REF, 0)

        def READONLY(self):
            return self.getToken(CSharpParser.READONLY, 0)

        def REQUIRED(self):
            return self.getToken(CSharpParser.REQUIRED, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_typed_member_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTyped_member_declaration" ):
                listener.enterTyped_member_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTyped_member_declaration" ):
                listener.exitTyped_member_declaration(self)




    def typed_member_declaration(self):

        localctx = CSharpParser.Typed_member_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 374, self.RULE_typed_member_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2380
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,261,self._ctx)
            if la_ == 1:
                self.state = 2375
                self.match(CSharpParser.REF)

            elif la_ == 2:
                self.state = 2376
                self.match(CSharpParser.READONLY)
                self.state = 2377
                self.match(CSharpParser.REF)

            elif la_ == 3:
                self.state = 2378
                self.match(CSharpParser.REF)
                self.state = 2379
                self.match(CSharpParser.READONLY)


            self.state = 2383
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==86:
                self.state = 2382
                self.match(CSharpParser.REQUIRED)


            self.state = 2385
            self.type_()
            self.state = 2395
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,263,self._ctx)
            if la_ == 1:
                self.state = 2386
                self.namespace_or_type_name()
                self.state = 2387
                self.match(CSharpParser.DOT)
                self.state = 2388
                self.indexer_declaration()
                pass

            elif la_ == 2:
                self.state = 2390
                self.method_declaration()
                pass

            elif la_ == 3:
                self.state = 2391
                self.property_declaration()
                pass

            elif la_ == 4:
                self.state = 2392
                self.indexer_declaration()
                pass

            elif la_ == 5:
                self.state = 2393
                self.operator_declaration()
                pass

            elif la_ == 6:
                self.state = 2394
                self.field_declaration()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Constant_declaratorsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def constant_declarator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Constant_declaratorContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Constant_declaratorContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.COMMA)
            else:
                return self.getToken(CSharpParser.COMMA, i)

        def getRuleIndex(self):
            return CSharpParser.RULE_constant_declarators

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstant_declarators" ):
                listener.enterConstant_declarators(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstant_declarators" ):
                listener.exitConstant_declarators(self)




    def constant_declarators(self):

        localctx = CSharpParser.Constant_declaratorsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 376, self.RULE_constant_declarators)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2397
            self.constant_declarator()
            self.state = 2402
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==142:
                self.state = 2398
                self.match(CSharpParser.COMMA)
                self.state = 2399
                self.constant_declarator()
                self.state = 2404
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Constant_declaratorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(CSharpParser.IdentifierContext,0)


        def ASSIGNMENT(self):
            return self.getToken(CSharpParser.ASSIGNMENT, 0)

        def expression(self):
            return self.getTypedRuleContext(CSharpParser.ExpressionContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_constant_declarator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstant_declarator" ):
                listener.enterConstant_declarator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstant_declarator" ):
                listener.exitConstant_declarator(self)




    def constant_declarator(self):

        localctx = CSharpParser.Constant_declaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 378, self.RULE_constant_declarator)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2405
            self.identifier()
            self.state = 2406
            self.match(CSharpParser.ASSIGNMENT)
            self.state = 2407
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Variable_declaratorsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def variable_declarator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Variable_declaratorContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Variable_declaratorContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.COMMA)
            else:
                return self.getToken(CSharpParser.COMMA, i)

        def getRuleIndex(self):
            return CSharpParser.RULE_variable_declarators

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariable_declarators" ):
                listener.enterVariable_declarators(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariable_declarators" ):
                listener.exitVariable_declarators(self)




    def variable_declarators(self):

        localctx = CSharpParser.Variable_declaratorsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 380, self.RULE_variable_declarators)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2409
            self.variable_declarator()
            self.state = 2414
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==142:
                self.state = 2410
                self.match(CSharpParser.COMMA)
                self.state = 2411
                self.variable_declarator()
                self.state = 2416
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Variable_declaratorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(CSharpParser.IdentifierContext,0)


        def ASSIGNMENT(self):
            return self.getToken(CSharpParser.ASSIGNMENT, 0)

        def variable_initializer(self):
            return self.getTypedRuleContext(CSharpParser.Variable_initializerContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_variable_declarator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariable_declarator" ):
                listener.enterVariable_declarator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariable_declarator" ):
                listener.exitVariable_declarator(self)




    def variable_declarator(self):

        localctx = CSharpParser.Variable_declaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 382, self.RULE_variable_declarator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2417
            self.identifier()
            self.state = 2420
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==155:
                self.state = 2418
                self.match(CSharpParser.ASSIGNMENT)
                self.state = 2419
                self.variable_initializer()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Variable_initializerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(CSharpParser.ExpressionContext,0)


        def array_initializer(self):
            return self.getTypedRuleContext(CSharpParser.Array_initializerContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_variable_initializer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariable_initializer" ):
                listener.enterVariable_initializer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariable_initializer" ):
                listener.exitVariable_initializer(self)




    def variable_initializer(self):

        localctx = CSharpParser.Variable_initializerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 384, self.RULE_variable_initializer)
        try:
            self.state = 2424
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [10, 12, 13, 15, 16, 17, 18, 19, 21, 22, 25, 26, 30, 31, 32, 33, 35, 36, 39, 43, 46, 50, 51, 54, 58, 62, 64, 65, 67, 68, 70, 72, 73, 74, 77, 81, 87, 88, 90, 92, 93, 94, 95, 96, 97, 98, 101, 103, 105, 107, 108, 109, 110, 112, 114, 118, 119, 121, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 137, 139, 145, 146, 147, 150, 152, 153, 154, 161, 162, 181]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2422
                self.expression()
                pass
            elif token in [135]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2423
                self.array_initializer()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Return_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def type_(self):
            return self.getTypedRuleContext(CSharpParser.Type_Context,0)


        def VOID(self):
            return self.getToken(CSharpParser.VOID, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_return_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReturn_type" ):
                listener.enterReturn_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReturn_type" ):
                listener.exitReturn_type(self)




    def return_type(self):

        localctx = CSharpParser.Return_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 386, self.RULE_return_type)
        try:
            self.state = 2428
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,268,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2426
                self.type_()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2427
                self.match(CSharpParser.VOID)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Member_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def namespace_or_type_name(self):
            return self.getTypedRuleContext(CSharpParser.Namespace_or_type_nameContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_member_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMember_name" ):
                listener.enterMember_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMember_name" ):
                listener.exitMember_name(self)




    def member_name(self):

        localctx = CSharpParser.Member_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 388, self.RULE_member_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2430
            self.namespace_or_type_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Method_bodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def block(self):
            return self.getTypedRuleContext(CSharpParser.BlockContext,0)


        def SEMICOLON(self):
            return self.getToken(CSharpParser.SEMICOLON, 0)

        def right_arrow(self):
            return self.getTypedRuleContext(CSharpParser.Right_arrowContext,0)


        def expression(self):
            return self.getTypedRuleContext(CSharpParser.ExpressionContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_method_body

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMethod_body" ):
                listener.enterMethod_body(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMethod_body" ):
                listener.exitMethod_body(self)




    def method_body(self):

        localctx = CSharpParser.Method_bodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 390, self.RULE_method_body)
        try:
            self.state = 2438
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [135]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2432
                self.block()
                pass
            elif token in [144]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2433
                self.match(CSharpParser.SEMICOLON)
                pass
            elif token in [155]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2434
                self.right_arrow()
                self.state = 2435
                self.expression()
                self.state = 2436
                self.match(CSharpParser.SEMICOLON)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Formal_parameter_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def parameter_array(self):
            return self.getTypedRuleContext(CSharpParser.Parameter_arrayContext,0)


        def fixed_parameters(self):
            return self.getTypedRuleContext(CSharpParser.Fixed_parametersContext,0)


        def COMMA(self):
            return self.getToken(CSharpParser.COMMA, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_formal_parameter_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFormal_parameter_list" ):
                listener.enterFormal_parameter_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFormal_parameter_list" ):
                listener.exitFormal_parameter_list(self)




    def formal_parameter_list(self):

        localctx = CSharpParser.Formal_parameter_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 392, self.RULE_formal_parameter_list)
        self._la = 0 # Token type
        try:
            self.state = 2446
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,271,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2440
                self.parameter_array()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2441
                self.fixed_parameters()
                self.state = 2444
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==142:
                    self.state = 2442
                    self.match(CSharpParser.COMMA)
                    self.state = 2443
                    self.parameter_array()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Fixed_parametersContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fixed_parameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Fixed_parameterContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Fixed_parameterContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.COMMA)
            else:
                return self.getToken(CSharpParser.COMMA, i)

        def getRuleIndex(self):
            return CSharpParser.RULE_fixed_parameters

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFixed_parameters" ):
                listener.enterFixed_parameters(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFixed_parameters" ):
                listener.exitFixed_parameters(self)




    def fixed_parameters(self):

        localctx = CSharpParser.Fixed_parametersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 394, self.RULE_fixed_parameters)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2448
            self.fixed_parameter()
            self.state = 2453
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,272,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2449
                    self.match(CSharpParser.COMMA)
                    self.state = 2450
                    self.fixed_parameter() 
                self.state = 2455
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,272,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Fixed_parameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def arg_declaration(self):
            return self.getTypedRuleContext(CSharpParser.Arg_declarationContext,0)


        def attributes(self):
            return self.getTypedRuleContext(CSharpParser.AttributesContext,0)


        def parameter_modifier(self):
            return self.getTypedRuleContext(CSharpParser.Parameter_modifierContext,0)


        def ARGLIST(self):
            return self.getToken(CSharpParser.ARGLIST, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_fixed_parameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFixed_parameter" ):
                listener.enterFixed_parameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFixed_parameter" ):
                listener.exitFixed_parameter(self)




    def fixed_parameter(self):

        localctx = CSharpParser.Fixed_parameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 396, self.RULE_fixed_parameter)
        self._la = 0 # Token type
        try:
            self.state = 2464
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,275,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2457
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==137:
                    self.state = 2456
                    self.attributes()


                self.state = 2460
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,274,self._ctx)
                if la_ == 1:
                    self.state = 2459
                    self.parameter_modifier()


                self.state = 2462
                self.arg_declaration()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2463
                self.match(CSharpParser.ARGLIST)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Parameter_modifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REF(self):
            return self.getToken(CSharpParser.REF, 0)

        def OUT(self):
            return self.getToken(CSharpParser.OUT, 0)

        def IN(self):
            return self.getToken(CSharpParser.IN, 0)

        def READONLY(self):
            return self.getToken(CSharpParser.READONLY, 0)

        def THIS(self):
            return self.getToken(CSharpParser.THIS, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_parameter_modifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParameter_modifier" ):
                listener.enterParameter_modifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParameter_modifier" ):
                listener.exitParameter_modifier(self)




    def parameter_modifier(self):

        localctx = CSharpParser.Parameter_modifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 398, self.RULE_parameter_modifier)
        try:
            self.state = 2476
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,276,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2466
                self.match(CSharpParser.REF)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2467
                self.match(CSharpParser.OUT)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2468
                self.match(CSharpParser.IN)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2469
                self.match(CSharpParser.REF)
                self.state = 2470
                self.match(CSharpParser.READONLY)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 2471
                self.match(CSharpParser.REF)
                self.state = 2472
                self.match(CSharpParser.THIS)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 2473
                self.match(CSharpParser.IN)
                self.state = 2474
                self.match(CSharpParser.THIS)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 2475
                self.match(CSharpParser.THIS)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Parameter_arrayContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PARAMS(self):
            return self.getToken(CSharpParser.PARAMS, 0)

        def array_type(self):
            return self.getTypedRuleContext(CSharpParser.Array_typeContext,0)


        def identifier(self):
            return self.getTypedRuleContext(CSharpParser.IdentifierContext,0)


        def attributes(self):
            return self.getTypedRuleContext(CSharpParser.AttributesContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_parameter_array

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParameter_array" ):
                listener.enterParameter_array(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParameter_array" ):
                listener.exitParameter_array(self)




    def parameter_array(self):

        localctx = CSharpParser.Parameter_arrayContext(self, self._ctx, self.state)
        self.enterRule(localctx, 400, self.RULE_parameter_array)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2479
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==137:
                self.state = 2478
                self.attributes()


            self.state = 2481
            self.match(CSharpParser.PARAMS)
            self.state = 2482
            self.array_type()
            self.state = 2483
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Accessor_declarationsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.attrs = None # AttributesContext
            self.mods = None # Accessor_modifierContext

        def GET(self):
            return self.getToken(CSharpParser.GET, 0)

        def accessor_body(self):
            return self.getTypedRuleContext(CSharpParser.Accessor_bodyContext,0)


        def SET(self):
            return self.getToken(CSharpParser.SET, 0)

        def INIT(self):
            return self.getToken(CSharpParser.INIT, 0)

        def attributes(self):
            return self.getTypedRuleContext(CSharpParser.AttributesContext,0)


        def accessor_modifier(self):
            return self.getTypedRuleContext(CSharpParser.Accessor_modifierContext,0)


        def set_accessor_declaration(self):
            return self.getTypedRuleContext(CSharpParser.Set_accessor_declarationContext,0)


        def get_accessor_declaration(self):
            return self.getTypedRuleContext(CSharpParser.Get_accessor_declarationContext,0)


        def init_accessor_declaration(self):
            return self.getTypedRuleContext(CSharpParser.Init_accessor_declarationContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_accessor_declarations

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAccessor_declarations" ):
                listener.enterAccessor_declarations(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAccessor_declarations" ):
                listener.exitAccessor_declarations(self)




    def accessor_declarations(self):

        localctx = CSharpParser.Accessor_declarationsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 402, self.RULE_accessor_declarations)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2486
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==137:
                self.state = 2485
                localctx.attrs = self.attributes()


            self.state = 2489
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 60)) & ~0x3f) == 0 and ((1 << (_la - 60)) & 113246209) != 0):
                self.state = 2488
                localctx.mods = self.accessor_modifier()


            self.state = 2511
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,284,self._ctx)
            if la_ == 1:
                self.state = 2491
                self.match(CSharpParser.GET)
                self.state = 2492
                self.accessor_body()
                self.state = 2494
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==60 or ((((_la - 82)) & ~0x3f) == 0 and ((1 << (_la - 82)) & 36028797018966043) != 0):
                    self.state = 2493
                    self.set_accessor_declaration()


                pass

            elif la_ == 2:
                self.state = 2496
                self.match(CSharpParser.SET)
                self.state = 2497
                self.accessor_body()
                self.state = 2499
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==51 or _la==60 or ((((_la - 82)) & ~0x3f) == 0 and ((1 << (_la - 82)) & 36028797018963995) != 0):
                    self.state = 2498
                    self.get_accessor_declaration()


                pass

            elif la_ == 3:
                self.state = 2501
                self.match(CSharpParser.GET)
                self.state = 2502
                self.accessor_body()
                self.state = 2504
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==61 or _la==137:
                    self.state = 2503
                    self.init_accessor_declaration()


                pass

            elif la_ == 4:
                self.state = 2506
                self.match(CSharpParser.INIT)
                self.state = 2507
                self.accessor_body()
                self.state = 2509
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==51 or _la==60 or ((((_la - 82)) & ~0x3f) == 0 and ((1 << (_la - 82)) & 36028797018963995) != 0):
                    self.state = 2508
                    self.get_accessor_declaration()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Init_accessor_declarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INIT(self):
            return self.getToken(CSharpParser.INIT, 0)

        def accessor_body(self):
            return self.getTypedRuleContext(CSharpParser.Accessor_bodyContext,0)


        def attributes(self):
            return self.getTypedRuleContext(CSharpParser.AttributesContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_init_accessor_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInit_accessor_declaration" ):
                listener.enterInit_accessor_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInit_accessor_declaration" ):
                listener.exitInit_accessor_declaration(self)




    def init_accessor_declaration(self):

        localctx = CSharpParser.Init_accessor_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 404, self.RULE_init_accessor_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2514
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==137:
                self.state = 2513
                self.attributes()


            self.state = 2516
            self.match(CSharpParser.INIT)
            self.state = 2517
            self.accessor_body()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Get_accessor_declarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GET(self):
            return self.getToken(CSharpParser.GET, 0)

        def accessor_body(self):
            return self.getTypedRuleContext(CSharpParser.Accessor_bodyContext,0)


        def attributes(self):
            return self.getTypedRuleContext(CSharpParser.AttributesContext,0)


        def accessor_modifier(self):
            return self.getTypedRuleContext(CSharpParser.Accessor_modifierContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_get_accessor_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGet_accessor_declaration" ):
                listener.enterGet_accessor_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGet_accessor_declaration" ):
                listener.exitGet_accessor_declaration(self)




    def get_accessor_declaration(self):

        localctx = CSharpParser.Get_accessor_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 406, self.RULE_get_accessor_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2520
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==137:
                self.state = 2519
                self.attributes()


            self.state = 2523
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 60)) & ~0x3f) == 0 and ((1 << (_la - 60)) & 113246209) != 0):
                self.state = 2522
                self.accessor_modifier()


            self.state = 2525
            self.match(CSharpParser.GET)
            self.state = 2526
            self.accessor_body()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Set_accessor_declarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SET(self):
            return self.getToken(CSharpParser.SET, 0)

        def accessor_body(self):
            return self.getTypedRuleContext(CSharpParser.Accessor_bodyContext,0)


        def attributes(self):
            return self.getTypedRuleContext(CSharpParser.AttributesContext,0)


        def accessor_modifier(self):
            return self.getTypedRuleContext(CSharpParser.Accessor_modifierContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_set_accessor_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSet_accessor_declaration" ):
                listener.enterSet_accessor_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSet_accessor_declaration" ):
                listener.exitSet_accessor_declaration(self)




    def set_accessor_declaration(self):

        localctx = CSharpParser.Set_accessor_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 408, self.RULE_set_accessor_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2529
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==137:
                self.state = 2528
                self.attributes()


            self.state = 2532
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 60)) & ~0x3f) == 0 and ((1 << (_la - 60)) & 113246209) != 0):
                self.state = 2531
                self.accessor_modifier()


            self.state = 2534
            self.match(CSharpParser.SET)
            self.state = 2535
            self.accessor_body()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Accessor_modifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PROTECTED(self):
            return self.getToken(CSharpParser.PROTECTED, 0)

        def INTERNAL(self):
            return self.getToken(CSharpParser.INTERNAL, 0)

        def PRIVATE(self):
            return self.getToken(CSharpParser.PRIVATE, 0)

        def READONLY(self):
            return self.getToken(CSharpParser.READONLY, 0)

        def REQUIRED(self):
            return self.getToken(CSharpParser.REQUIRED, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_accessor_modifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAccessor_modifier" ):
                listener.enterAccessor_modifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAccessor_modifier" ):
                listener.exitAccessor_modifier(self)




    def accessor_modifier(self):

        localctx = CSharpParser.Accessor_modifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 410, self.RULE_accessor_modifier)
        try:
            self.state = 2550
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,290,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2537
                self.match(CSharpParser.PROTECTED)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2538
                self.match(CSharpParser.INTERNAL)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2539
                self.match(CSharpParser.PRIVATE)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2540
                self.match(CSharpParser.PROTECTED)
                self.state = 2541
                self.match(CSharpParser.INTERNAL)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 2542
                self.match(CSharpParser.INTERNAL)
                self.state = 2543
                self.match(CSharpParser.PROTECTED)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 2544
                self.match(CSharpParser.PROTECTED)
                self.state = 2545
                self.match(CSharpParser.PRIVATE)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 2546
                self.match(CSharpParser.PRIVATE)
                self.state = 2547
                self.match(CSharpParser.PROTECTED)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 2548
                self.match(CSharpParser.READONLY)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 2549
                self.match(CSharpParser.REQUIRED)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Accessor_bodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def block(self):
            return self.getTypedRuleContext(CSharpParser.BlockContext,0)


        def right_arrow(self):
            return self.getTypedRuleContext(CSharpParser.Right_arrowContext,0)


        def expression(self):
            return self.getTypedRuleContext(CSharpParser.ExpressionContext,0)


        def SEMICOLON(self):
            return self.getToken(CSharpParser.SEMICOLON, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_accessor_body

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAccessor_body" ):
                listener.enterAccessor_body(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAccessor_body" ):
                listener.exitAccessor_body(self)




    def accessor_body(self):

        localctx = CSharpParser.Accessor_bodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 412, self.RULE_accessor_body)
        try:
            self.state = 2558
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [135]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2552
                self.block()
                pass
            elif token in [155]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2553
                self.right_arrow()
                self.state = 2554
                self.expression()
                self.state = 2555
                self.match(CSharpParser.SEMICOLON)
                pass
            elif token in [144]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2557
                self.match(CSharpParser.SEMICOLON)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Event_accessor_declarationsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ADD(self):
            return self.getToken(CSharpParser.ADD, 0)

        def block(self):
            return self.getTypedRuleContext(CSharpParser.BlockContext,0)


        def remove_accessor_declaration(self):
            return self.getTypedRuleContext(CSharpParser.Remove_accessor_declarationContext,0)


        def REMOVE(self):
            return self.getToken(CSharpParser.REMOVE, 0)

        def add_accessor_declaration(self):
            return self.getTypedRuleContext(CSharpParser.Add_accessor_declarationContext,0)


        def attributes(self):
            return self.getTypedRuleContext(CSharpParser.AttributesContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_event_accessor_declarations

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEvent_accessor_declarations" ):
                listener.enterEvent_accessor_declarations(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEvent_accessor_declarations" ):
                listener.exitEvent_accessor_declarations(self)




    def event_accessor_declarations(self):

        localctx = CSharpParser.Event_accessor_declarationsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 414, self.RULE_event_accessor_declarations)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2561
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==137:
                self.state = 2560
                self.attributes()


            self.state = 2571
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [10]:
                self.state = 2563
                self.match(CSharpParser.ADD)
                self.state = 2564
                self.block()
                self.state = 2565
                self.remove_accessor_declaration()
                pass
            elif token in [88]:
                self.state = 2567
                self.match(CSharpParser.REMOVE)
                self.state = 2568
                self.block()
                self.state = 2569
                self.add_accessor_declaration()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Add_accessor_declarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ADD(self):
            return self.getToken(CSharpParser.ADD, 0)

        def block(self):
            return self.getTypedRuleContext(CSharpParser.BlockContext,0)


        def attributes(self):
            return self.getTypedRuleContext(CSharpParser.AttributesContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_add_accessor_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAdd_accessor_declaration" ):
                listener.enterAdd_accessor_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAdd_accessor_declaration" ):
                listener.exitAdd_accessor_declaration(self)




    def add_accessor_declaration(self):

        localctx = CSharpParser.Add_accessor_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 416, self.RULE_add_accessor_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2574
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==137:
                self.state = 2573
                self.attributes()


            self.state = 2576
            self.match(CSharpParser.ADD)
            self.state = 2577
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Remove_accessor_declarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REMOVE(self):
            return self.getToken(CSharpParser.REMOVE, 0)

        def block(self):
            return self.getTypedRuleContext(CSharpParser.BlockContext,0)


        def attributes(self):
            return self.getTypedRuleContext(CSharpParser.AttributesContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_remove_accessor_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRemove_accessor_declaration" ):
                listener.enterRemove_accessor_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRemove_accessor_declaration" ):
                listener.exitRemove_accessor_declaration(self)




    def remove_accessor_declaration(self):

        localctx = CSharpParser.Remove_accessor_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 418, self.RULE_remove_accessor_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2580
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==137:
                self.state = 2579
                self.attributes()


            self.state = 2582
            self.match(CSharpParser.REMOVE)
            self.state = 2583
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Overloadable_operatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PLUS(self):
            return self.getToken(CSharpParser.PLUS, 0)

        def MINUS(self):
            return self.getToken(CSharpParser.MINUS, 0)

        def BANG(self):
            return self.getToken(CSharpParser.BANG, 0)

        def TILDE(self):
            return self.getToken(CSharpParser.TILDE, 0)

        def OP_INC(self):
            return self.getToken(CSharpParser.OP_INC, 0)

        def OP_DEC(self):
            return self.getToken(CSharpParser.OP_DEC, 0)

        def TRUE(self):
            return self.getToken(CSharpParser.TRUE, 0)

        def FALSE(self):
            return self.getToken(CSharpParser.FALSE, 0)

        def STAR(self):
            return self.getToken(CSharpParser.STAR, 0)

        def DIV(self):
            return self.getToken(CSharpParser.DIV, 0)

        def PERCENT(self):
            return self.getToken(CSharpParser.PERCENT, 0)

        def AMP(self):
            return self.getToken(CSharpParser.AMP, 0)

        def BITWISE_OR(self):
            return self.getToken(CSharpParser.BITWISE_OR, 0)

        def CARET(self):
            return self.getToken(CSharpParser.CARET, 0)

        def OP_LEFT_SHIFT(self):
            return self.getToken(CSharpParser.OP_LEFT_SHIFT, 0)

        def right_shift(self):
            return self.getTypedRuleContext(CSharpParser.Right_shiftContext,0)


        def OP_EQ(self):
            return self.getToken(CSharpParser.OP_EQ, 0)

        def OP_NE(self):
            return self.getToken(CSharpParser.OP_NE, 0)

        def GT(self):
            return self.getToken(CSharpParser.GT, 0)

        def LT(self):
            return self.getToken(CSharpParser.LT, 0)

        def OP_GE(self):
            return self.getToken(CSharpParser.OP_GE, 0)

        def OP_LE(self):
            return self.getToken(CSharpParser.OP_LE, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_overloadable_operator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOverloadable_operator" ):
                listener.enterOverloadable_operator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOverloadable_operator" ):
                listener.exitOverloadable_operator(self)




    def overloadable_operator(self):

        localctx = CSharpParser.Overloadable_operatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 420, self.RULE_overloadable_operator)
        try:
            self.state = 2607
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,296,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2585
                self.match(CSharpParser.PLUS)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2586
                self.match(CSharpParser.MINUS)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2587
                self.match(CSharpParser.BANG)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2588
                self.match(CSharpParser.TILDE)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 2589
                self.match(CSharpParser.OP_INC)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 2590
                self.match(CSharpParser.OP_DEC)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 2591
                self.match(CSharpParser.TRUE)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 2592
                self.match(CSharpParser.FALSE)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 2593
                self.match(CSharpParser.STAR)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 2594
                self.match(CSharpParser.DIV)
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 2595
                self.match(CSharpParser.PERCENT)
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 2596
                self.match(CSharpParser.AMP)
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 2597
                self.match(CSharpParser.BITWISE_OR)
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 2598
                self.match(CSharpParser.CARET)
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 2599
                self.match(CSharpParser.OP_LEFT_SHIFT)
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 2600
                self.right_shift()
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 2601
                self.match(CSharpParser.OP_EQ)
                pass

            elif la_ == 18:
                self.enterOuterAlt(localctx, 18)
                self.state = 2602
                self.match(CSharpParser.OP_NE)
                pass

            elif la_ == 19:
                self.enterOuterAlt(localctx, 19)
                self.state = 2603
                self.match(CSharpParser.GT)
                pass

            elif la_ == 20:
                self.enterOuterAlt(localctx, 20)
                self.state = 2604
                self.match(CSharpParser.LT)
                pass

            elif la_ == 21:
                self.enterOuterAlt(localctx, 21)
                self.state = 2605
                self.match(CSharpParser.OP_GE)
                pass

            elif la_ == 22:
                self.enterOuterAlt(localctx, 22)
                self.state = 2606
                self.match(CSharpParser.OP_LE)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Conversion_operator_declaratorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPERATOR(self):
            return self.getToken(CSharpParser.OPERATOR, 0)

        def type_(self):
            return self.getTypedRuleContext(CSharpParser.Type_Context,0)


        def OPEN_PARENS(self):
            return self.getToken(CSharpParser.OPEN_PARENS, 0)

        def arg_declaration(self):
            return self.getTypedRuleContext(CSharpParser.Arg_declarationContext,0)


        def CLOSE_PARENS(self):
            return self.getToken(CSharpParser.CLOSE_PARENS, 0)

        def IMPLICIT(self):
            return self.getToken(CSharpParser.IMPLICIT, 0)

        def EXPLICIT(self):
            return self.getToken(CSharpParser.EXPLICIT, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_conversion_operator_declarator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConversion_operator_declarator" ):
                listener.enterConversion_operator_declarator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConversion_operator_declarator" ):
                listener.exitConversion_operator_declarator(self)




    def conversion_operator_declarator(self):

        localctx = CSharpParser.Conversion_operator_declaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 422, self.RULE_conversion_operator_declarator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2609
            _la = self._input.LA(1)
            if not(_la==41 or _la==56):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 2610
            self.match(CSharpParser.OPERATOR)
            self.state = 2611
            self.type_()
            self.state = 2612
            self.match(CSharpParser.OPEN_PARENS)
            self.state = 2613
            self.arg_declaration()
            self.state = 2614
            self.match(CSharpParser.CLOSE_PARENS)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Constructor_initializerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COLON(self):
            return self.getToken(CSharpParser.COLON, 0)

        def OPEN_PARENS(self):
            return self.getToken(CSharpParser.OPEN_PARENS, 0)

        def CLOSE_PARENS(self):
            return self.getToken(CSharpParser.CLOSE_PARENS, 0)

        def BASE(self):
            return self.getToken(CSharpParser.BASE, 0)

        def THIS(self):
            return self.getToken(CSharpParser.THIS, 0)

        def argument_list(self):
            return self.getTypedRuleContext(CSharpParser.Argument_listContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_constructor_initializer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstructor_initializer" ):
                listener.enterConstructor_initializer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstructor_initializer" ):
                listener.exitConstructor_initializer(self)




    def constructor_initializer(self):

        localctx = CSharpParser.Constructor_initializerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 424, self.RULE_constructor_initializer)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2616
            self.match(CSharpParser.COLON)
            self.state = 2617
            _la = self._input.LA(1)
            if not(_la==18 or _la==101):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 2618
            self.match(CSharpParser.OPEN_PARENS)
            self.state = 2620
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 5065503514771305472) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -372256532389009573) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & 9007225147099775) != 0):
                self.state = 2619
                self.argument_list()


            self.state = 2622
            self.match(CSharpParser.CLOSE_PARENS)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def block(self):
            return self.getTypedRuleContext(CSharpParser.BlockContext,0)


        def SEMICOLON(self):
            return self.getToken(CSharpParser.SEMICOLON, 0)

        def right_arrow(self):
            return self.getTypedRuleContext(CSharpParser.Right_arrowContext,0)


        def expression(self):
            return self.getTypedRuleContext(CSharpParser.ExpressionContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_body

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBody" ):
                listener.enterBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBody" ):
                listener.exitBody(self)




    def body(self):

        localctx = CSharpParser.BodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 426, self.RULE_body)
        try:
            self.state = 2630
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [135]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2624
                self.block()
                pass
            elif token in [144]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2625
                self.match(CSharpParser.SEMICOLON)
                pass
            elif token in [155]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2626
                self.right_arrow()
                self.state = 2627
                self.expression()
                self.state = 2628
                self.match(CSharpParser.SEMICOLON)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Struct_interfacesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COLON(self):
            return self.getToken(CSharpParser.COLON, 0)

        def interface_type_list(self):
            return self.getTypedRuleContext(CSharpParser.Interface_type_listContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_struct_interfaces

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStruct_interfaces" ):
                listener.enterStruct_interfaces(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStruct_interfaces" ):
                listener.exitStruct_interfaces(self)




    def struct_interfaces(self):

        localctx = CSharpParser.Struct_interfacesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 428, self.RULE_struct_interfaces)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2632
            self.match(CSharpParser.COLON)
            self.state = 2633
            self.interface_type_list()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Struct_bodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_BRACE(self):
            return self.getToken(CSharpParser.OPEN_BRACE, 0)

        def CLOSE_BRACE(self):
            return self.getToken(CSharpParser.CLOSE_BRACE, 0)

        def struct_member_declaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Struct_member_declarationContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Struct_member_declarationContext,i)


        def SEMICOLON(self):
            return self.getToken(CSharpParser.SEMICOLON, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_struct_body

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStruct_body" ):
                listener.enterStruct_body(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStruct_body" ):
                listener.exitStruct_body(self)




    def struct_body(self):

        localctx = CSharpParser.Struct_bodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 430, self.RULE_struct_body)
        self._la = 0 # Token type
        try:
            self.state = 2644
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [135]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2635
                self.match(CSharpParser.OPEN_BRACE)
                self.state = 2639
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & 6723003273058170368) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 1080257042393769563) != 0) or _la==137 or _la==139:
                    self.state = 2636
                    self.struct_member_declaration()
                    self.state = 2641
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2642
                self.match(CSharpParser.CLOSE_BRACE)
                pass
            elif token in [144]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2643
                self.match(CSharpParser.SEMICOLON)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Struct_member_declarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def common_member_declaration(self):
            return self.getTypedRuleContext(CSharpParser.Common_member_declarationContext,0)


        def FIXED(self):
            return self.getToken(CSharpParser.FIXED, 0)

        def type_(self):
            return self.getTypedRuleContext(CSharpParser.Type_Context,0)


        def SEMICOLON(self):
            return self.getToken(CSharpParser.SEMICOLON, 0)

        def member_declarator(self):
            return self.getTypedRuleContext(CSharpParser.Member_declaratorContext,0)


        def attributes(self):
            return self.getTypedRuleContext(CSharpParser.AttributesContext,0)


        def all_member_modifiers(self):
            return self.getTypedRuleContext(CSharpParser.All_member_modifiersContext,0)


        def fixed_size_buffer_declarator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Fixed_size_buffer_declaratorContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Fixed_size_buffer_declaratorContext,i)


        def getRuleIndex(self):
            return CSharpParser.RULE_struct_member_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStruct_member_declaration" ):
                listener.enterStruct_member_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStruct_member_declaration" ):
                listener.exitStruct_member_declaration(self)




    def struct_member_declaration(self):

        localctx = CSharpParser.Struct_member_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 432, self.RULE_struct_member_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2647
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,301,self._ctx)
            if la_ == 1:
                self.state = 2646
                self.attributes()


            self.state = 2650
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,302,self._ctx)
            if la_ == 1:
                self.state = 2649
                self.all_member_modifiers()


            self.state = 2666
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,304,self._ctx)
            if la_ == 1:
                self.state = 2652
                self.common_member_declaration()
                pass

            elif la_ == 2:
                self.state = 2653
                self.match(CSharpParser.FIXED)
                self.state = 2654
                self.type_()
                self.state = 2656 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 2655
                    self.fixed_size_buffer_declarator()
                    self.state = 2658 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & 4633078743724962816) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 775815405380969491) != 0)):
                        break

                self.state = 2660
                self.match(CSharpParser.SEMICOLON)
                pass

            elif la_ == 3:
                self.state = 2662
                self.type_()
                self.state = 2663
                self.member_declarator()
                self.state = 2664
                self.match(CSharpParser.SEMICOLON)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Array_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def base_type(self):
            return self.getTypedRuleContext(CSharpParser.Base_typeContext,0)


        def rank_specifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Rank_specifierContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Rank_specifierContext,i)


        def STAR(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.STAR)
            else:
                return self.getToken(CSharpParser.STAR, i)

        def INTERR(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.INTERR)
            else:
                return self.getToken(CSharpParser.INTERR, i)

        def getRuleIndex(self):
            return CSharpParser.RULE_array_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArray_type" ):
                listener.enterArray_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArray_type" ):
                listener.exitArray_type(self)




    def array_type(self):

        localctx = CSharpParser.Array_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 434, self.RULE_array_type)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2668
            self.base_type()
            self.state = 2676 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 2672
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==147 or _la==158:
                    self.state = 2669
                    _la = self._input.LA(1)
                    if not(_la==147 or _la==158):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 2674
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2675
                self.rank_specifier()
                self.state = 2678 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (((((_la - 137)) & ~0x3f) == 0 and ((1 << (_la - 137)) & 2098177) != 0)):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Rank_specifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_BRACKET(self):
            return self.getToken(CSharpParser.OPEN_BRACKET, 0)

        def CLOSE_BRACKET(self):
            return self.getToken(CSharpParser.CLOSE_BRACKET, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.COMMA)
            else:
                return self.getToken(CSharpParser.COMMA, i)

        def getRuleIndex(self):
            return CSharpParser.RULE_rank_specifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRank_specifier" ):
                listener.enterRank_specifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRank_specifier" ):
                listener.exitRank_specifier(self)




    def rank_specifier(self):

        localctx = CSharpParser.Rank_specifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 436, self.RULE_rank_specifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2680
            self.match(CSharpParser.OPEN_BRACKET)
            self.state = 2684
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==142:
                self.state = 2681
                self.match(CSharpParser.COMMA)
                self.state = 2686
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2687
            self.match(CSharpParser.CLOSE_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Array_initializerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_BRACE(self):
            return self.getToken(CSharpParser.OPEN_BRACE, 0)

        def CLOSE_BRACE(self):
            return self.getToken(CSharpParser.CLOSE_BRACE, 0)

        def variable_initializer(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Variable_initializerContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Variable_initializerContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.COMMA)
            else:
                return self.getToken(CSharpParser.COMMA, i)

        def getRuleIndex(self):
            return CSharpParser.RULE_array_initializer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArray_initializer" ):
                listener.enterArray_initializer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArray_initializer" ):
                listener.exitArray_initializer(self)




    def array_initializer(self):

        localctx = CSharpParser.Array_initializerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 438, self.RULE_array_initializer)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2689
            self.match(CSharpParser.OPEN_BRACE)
            self.state = 2701
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 4921388326695449600) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -376760132018493605) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & 9007225147099903) != 0):
                self.state = 2690
                self.variable_initializer()
                self.state = 2695
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,308,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2691
                        self.match(CSharpParser.COMMA)
                        self.state = 2692
                        self.variable_initializer() 
                    self.state = 2697
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,308,self._ctx)

                self.state = 2699
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==142:
                    self.state = 2698
                    self.match(CSharpParser.COMMA)




            self.state = 2703
            self.match(CSharpParser.CLOSE_BRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Variant_type_parameter_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LT(self):
            return self.getToken(CSharpParser.LT, 0)

        def variant_type_parameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Variant_type_parameterContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Variant_type_parameterContext,i)


        def GT(self):
            return self.getToken(CSharpParser.GT, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.COMMA)
            else:
                return self.getToken(CSharpParser.COMMA, i)

        def getRuleIndex(self):
            return CSharpParser.RULE_variant_type_parameter_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariant_type_parameter_list" ):
                listener.enterVariant_type_parameter_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariant_type_parameter_list" ):
                listener.exitVariant_type_parameter_list(self)




    def variant_type_parameter_list(self):

        localctx = CSharpParser.Variant_type_parameter_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 440, self.RULE_variant_type_parameter_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2705
            self.match(CSharpParser.LT)
            self.state = 2706
            self.variant_type_parameter()
            self.state = 2711
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==142:
                self.state = 2707
                self.match(CSharpParser.COMMA)
                self.state = 2708
                self.variant_type_parameter()
                self.state = 2713
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2714
            self.match(CSharpParser.GT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Variant_type_parameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(CSharpParser.IdentifierContext,0)


        def attributes(self):
            return self.getTypedRuleContext(CSharpParser.AttributesContext,0)


        def variance_annotation(self):
            return self.getTypedRuleContext(CSharpParser.Variance_annotationContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_variant_type_parameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariant_type_parameter" ):
                listener.enterVariant_type_parameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariant_type_parameter" ):
                listener.exitVariant_type_parameter(self)




    def variant_type_parameter(self):

        localctx = CSharpParser.Variant_type_parameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 442, self.RULE_variant_type_parameter)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2717
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==137:
                self.state = 2716
                self.attributes()


            self.state = 2720
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==57 or _la==78:
                self.state = 2719
                self.variance_annotation()


            self.state = 2722
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Variance_annotationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IN(self):
            return self.getToken(CSharpParser.IN, 0)

        def OUT(self):
            return self.getToken(CSharpParser.OUT, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_variance_annotation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariance_annotation" ):
                listener.enterVariance_annotation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariance_annotation" ):
                listener.exitVariance_annotation(self)




    def variance_annotation(self):

        localctx = CSharpParser.Variance_annotationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 444, self.RULE_variance_annotation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2724
            _la = self._input.LA(1)
            if not(_la==57 or _la==78):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Interface_baseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COLON(self):
            return self.getToken(CSharpParser.COLON, 0)

        def interface_type_list(self):
            return self.getTypedRuleContext(CSharpParser.Interface_type_listContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_interface_base

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterface_base" ):
                listener.enterInterface_base(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterface_base" ):
                listener.exitInterface_base(self)




    def interface_base(self):

        localctx = CSharpParser.Interface_baseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 446, self.RULE_interface_base)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2726
            self.match(CSharpParser.COLON)
            self.state = 2727
            self.interface_type_list()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Interface_bodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_BRACE(self):
            return self.getToken(CSharpParser.OPEN_BRACE, 0)

        def CLOSE_BRACE(self):
            return self.getToken(CSharpParser.CLOSE_BRACE, 0)

        def interface_member_declaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Interface_member_declarationContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Interface_member_declarationContext,i)


        def getRuleIndex(self):
            return CSharpParser.RULE_interface_body

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterface_body" ):
                listener.enterInterface_body(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterface_body" ):
                listener.exitInterface_body(self)




    def interface_body(self):

        localctx = CSharpParser.Interface_bodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 448, self.RULE_interface_body)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2729
            self.match(CSharpParser.OPEN_BRACE)
            self.state = 2733
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & 4921380627899200512) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 780767624083678811) != 0) or _la==137 or _la==139:
                self.state = 2730
                self.interface_member_declaration()
                self.state = 2735
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2736
            self.match(CSharpParser.CLOSE_BRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Interface_member_declarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def type_(self):
            return self.getTypedRuleContext(CSharpParser.Type_Context,0)


        def VOID(self):
            return self.getToken(CSharpParser.VOID, 0)

        def identifier(self):
            return self.getTypedRuleContext(CSharpParser.IdentifierContext,0)


        def OPEN_PARENS(self):
            return self.getToken(CSharpParser.OPEN_PARENS, 0)

        def CLOSE_PARENS(self):
            return self.getToken(CSharpParser.CLOSE_PARENS, 0)

        def SEMICOLON(self):
            return self.getToken(CSharpParser.SEMICOLON, 0)

        def EVENT(self):
            return self.getToken(CSharpParser.EVENT, 0)

        def attributes(self):
            return self.getTypedRuleContext(CSharpParser.AttributesContext,0)


        def NEW(self):
            return self.getToken(CSharpParser.NEW, 0)

        def OPEN_BRACE(self):
            return self.getToken(CSharpParser.OPEN_BRACE, 0)

        def interface_accessors(self):
            return self.getTypedRuleContext(CSharpParser.Interface_accessorsContext,0)


        def CLOSE_BRACE(self):
            return self.getToken(CSharpParser.CLOSE_BRACE, 0)

        def THIS(self):
            return self.getToken(CSharpParser.THIS, 0)

        def OPEN_BRACKET(self):
            return self.getToken(CSharpParser.OPEN_BRACKET, 0)

        def formal_parameter_list(self):
            return self.getTypedRuleContext(CSharpParser.Formal_parameter_listContext,0)


        def CLOSE_BRACKET(self):
            return self.getToken(CSharpParser.CLOSE_BRACKET, 0)

        def UNSAFE(self):
            return self.getToken(CSharpParser.UNSAFE, 0)

        def REF(self):
            return self.getToken(CSharpParser.REF, 0)

        def READONLY(self):
            return self.getToken(CSharpParser.READONLY, 0)

        def type_parameter_list(self):
            return self.getTypedRuleContext(CSharpParser.Type_parameter_listContext,0)


        def type_parameter_constraints_clauses(self):
            return self.getTypedRuleContext(CSharpParser.Type_parameter_constraints_clausesContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_interface_member_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterface_member_declaration" ):
                listener.enterInterface_member_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterface_member_declaration" ):
                listener.exitInterface_member_declaration(self)




    def interface_member_declaration(self):

        localctx = CSharpParser.Interface_member_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 450, self.RULE_interface_member_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2739
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==137:
                self.state = 2738
                self.attributes()


            self.state = 2742
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==70:
                self.state = 2741
                self.match(CSharpParser.NEW)


            self.state = 2807
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,327,self._ctx)
            if la_ == 1:
                self.state = 2745
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==111:
                    self.state = 2744
                    self.match(CSharpParser.UNSAFE)


                self.state = 2752
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,318,self._ctx)
                if la_ == 1:
                    self.state = 2747
                    self.match(CSharpParser.REF)

                elif la_ == 2:
                    self.state = 2748
                    self.match(CSharpParser.REF)
                    self.state = 2749
                    self.match(CSharpParser.READONLY)

                elif la_ == 3:
                    self.state = 2750
                    self.match(CSharpParser.READONLY)
                    self.state = 2751
                    self.match(CSharpParser.REF)


                self.state = 2754
                self.type_()
                self.state = 2782
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,322,self._ctx)
                if la_ == 1:
                    self.state = 2755
                    self.identifier()
                    self.state = 2757
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==156:
                        self.state = 2756
                        self.type_parameter_list()


                    self.state = 2759
                    self.match(CSharpParser.OPEN_PARENS)
                    self.state = 2761
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & 5065494716463428608) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 780627024034358811) != 0) or _la==137 or _la==139:
                        self.state = 2760
                        self.formal_parameter_list()


                    self.state = 2763
                    self.match(CSharpParser.CLOSE_PARENS)
                    self.state = 2765
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==119:
                        self.state = 2764
                        self.type_parameter_constraints_clauses()


                    self.state = 2767
                    self.match(CSharpParser.SEMICOLON)
                    pass

                elif la_ == 2:
                    self.state = 2769
                    self.identifier()
                    self.state = 2770
                    self.match(CSharpParser.OPEN_BRACE)
                    self.state = 2771
                    self.interface_accessors()
                    self.state = 2772
                    self.match(CSharpParser.CLOSE_BRACE)
                    pass

                elif la_ == 3:
                    self.state = 2774
                    self.match(CSharpParser.THIS)
                    self.state = 2775
                    self.match(CSharpParser.OPEN_BRACKET)
                    self.state = 2776
                    self.formal_parameter_list()
                    self.state = 2777
                    self.match(CSharpParser.CLOSE_BRACKET)
                    self.state = 2778
                    self.match(CSharpParser.OPEN_BRACE)
                    self.state = 2779
                    self.interface_accessors()
                    self.state = 2780
                    self.match(CSharpParser.CLOSE_BRACE)
                    pass


                pass

            elif la_ == 2:
                self.state = 2785
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==111:
                    self.state = 2784
                    self.match(CSharpParser.UNSAFE)


                self.state = 2787
                self.match(CSharpParser.VOID)
                self.state = 2788
                self.identifier()
                self.state = 2790
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==156:
                    self.state = 2789
                    self.type_parameter_list()


                self.state = 2792
                self.match(CSharpParser.OPEN_PARENS)
                self.state = 2794
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 5065494716463428608) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 780627024034358811) != 0) or _la==137 or _la==139:
                    self.state = 2793
                    self.formal_parameter_list()


                self.state = 2796
                self.match(CSharpParser.CLOSE_PARENS)
                self.state = 2798
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==119:
                    self.state = 2797
                    self.type_parameter_constraints_clauses()


                self.state = 2800
                self.match(CSharpParser.SEMICOLON)
                pass

            elif la_ == 3:
                self.state = 2802
                self.match(CSharpParser.EVENT)
                self.state = 2803
                self.type_()
                self.state = 2804
                self.identifier()
                self.state = 2805
                self.match(CSharpParser.SEMICOLON)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Interface_accessorsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GET(self):
            return self.getToken(CSharpParser.GET, 0)

        def SEMICOLON(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.SEMICOLON)
            else:
                return self.getToken(CSharpParser.SEMICOLON, i)

        def SET(self):
            return self.getToken(CSharpParser.SET, 0)

        def attributes(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.AttributesContext)
            else:
                return self.getTypedRuleContext(CSharpParser.AttributesContext,i)


        def getRuleIndex(self):
            return CSharpParser.RULE_interface_accessors

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterface_accessors" ):
                listener.enterInterface_accessors(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterface_accessors" ):
                listener.exitInterface_accessors(self)




    def interface_accessors(self):

        localctx = CSharpParser.Interface_accessorsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 452, self.RULE_interface_accessors)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2810
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==137:
                self.state = 2809
                self.attributes()


            self.state = 2830
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [51]:
                self.state = 2812
                self.match(CSharpParser.GET)
                self.state = 2813
                self.match(CSharpParser.SEMICOLON)
                self.state = 2819
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==93 or _la==137:
                    self.state = 2815
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==137:
                        self.state = 2814
                        self.attributes()


                    self.state = 2817
                    self.match(CSharpParser.SET)
                    self.state = 2818
                    self.match(CSharpParser.SEMICOLON)


                pass
            elif token in [93]:
                self.state = 2821
                self.match(CSharpParser.SET)
                self.state = 2822
                self.match(CSharpParser.SEMICOLON)
                self.state = 2828
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==51 or _la==137:
                    self.state = 2824
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==137:
                        self.state = 2823
                        self.attributes()


                    self.state = 2826
                    self.match(CSharpParser.GET)
                    self.state = 2827
                    self.match(CSharpParser.SEMICOLON)


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Enum_baseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COLON(self):
            return self.getToken(CSharpParser.COLON, 0)

        def type_(self):
            return self.getTypedRuleContext(CSharpParser.Type_Context,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_enum_base

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnum_base" ):
                listener.enterEnum_base(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnum_base" ):
                listener.exitEnum_base(self)




    def enum_base(self):

        localctx = CSharpParser.Enum_baseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 454, self.RULE_enum_base)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2832
            self.match(CSharpParser.COLON)
            self.state = 2833
            self.type_()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Enum_bodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_BRACE(self):
            return self.getToken(CSharpParser.OPEN_BRACE, 0)

        def CLOSE_BRACE(self):
            return self.getToken(CSharpParser.CLOSE_BRACE, 0)

        def enum_member_declaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Enum_member_declarationContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Enum_member_declarationContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.COMMA)
            else:
                return self.getToken(CSharpParser.COMMA, i)

        def getRuleIndex(self):
            return CSharpParser.RULE_enum_body

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnum_body" ):
                listener.enterEnum_body(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnum_body" ):
                listener.exitEnum_body(self)




    def enum_body(self):

        localctx = CSharpParser.Enum_bodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 456, self.RULE_enum_body)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2835
            self.match(CSharpParser.OPEN_BRACE)
            self.state = 2847
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 10)) & ~0x3f) == 0 and ((1 << (_la - 10)) & 346798062640826605) != 0) or ((((_la - 74)) & ~0x3f) == 0 and ((1 << (_la - 74)) & -9222614404622958455) != 0):
                self.state = 2836
                self.enum_member_declaration()
                self.state = 2841
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,334,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2837
                        self.match(CSharpParser.COMMA)
                        self.state = 2838
                        self.enum_member_declaration() 
                    self.state = 2843
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,334,self._ctx)

                self.state = 2845
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==142:
                    self.state = 2844
                    self.match(CSharpParser.COMMA)




            self.state = 2849
            self.match(CSharpParser.CLOSE_BRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Enum_member_declarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(CSharpParser.IdentifierContext,0)


        def attributes(self):
            return self.getTypedRuleContext(CSharpParser.AttributesContext,0)


        def ASSIGNMENT(self):
            return self.getToken(CSharpParser.ASSIGNMENT, 0)

        def expression(self):
            return self.getTypedRuleContext(CSharpParser.ExpressionContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_enum_member_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnum_member_declaration" ):
                listener.enterEnum_member_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnum_member_declaration" ):
                listener.exitEnum_member_declaration(self)




    def enum_member_declaration(self):

        localctx = CSharpParser.Enum_member_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 458, self.RULE_enum_member_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2852
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==137:
                self.state = 2851
                self.attributes()


            self.state = 2854
            self.identifier()
            self.state = 2857
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==155:
                self.state = 2855
                self.match(CSharpParser.ASSIGNMENT)
                self.state = 2856
                self.expression()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Global_attribute_sectionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_BRACKET(self):
            return self.getToken(CSharpParser.OPEN_BRACKET, 0)

        def global_attribute_target(self):
            return self.getTypedRuleContext(CSharpParser.Global_attribute_targetContext,0)


        def COLON(self):
            return self.getToken(CSharpParser.COLON, 0)

        def attribute_list(self):
            return self.getTypedRuleContext(CSharpParser.Attribute_listContext,0)


        def CLOSE_BRACKET(self):
            return self.getToken(CSharpParser.CLOSE_BRACKET, 0)

        def COMMA(self):
            return self.getToken(CSharpParser.COMMA, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_global_attribute_section

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGlobal_attribute_section" ):
                listener.enterGlobal_attribute_section(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGlobal_attribute_section" ):
                listener.exitGlobal_attribute_section(self)




    def global_attribute_section(self):

        localctx = CSharpParser.Global_attribute_sectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 460, self.RULE_global_attribute_section)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2859
            self.match(CSharpParser.OPEN_BRACKET)
            self.state = 2860
            self.global_attribute_target()
            self.state = 2861
            self.match(CSharpParser.COLON)
            self.state = 2862
            self.attribute_list()
            self.state = 2864
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==142:
                self.state = 2863
                self.match(CSharpParser.COMMA)


            self.state = 2866
            self.match(CSharpParser.CLOSE_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Global_attribute_targetContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def keyword(self):
            return self.getTypedRuleContext(CSharpParser.KeywordContext,0)


        def identifier(self):
            return self.getTypedRuleContext(CSharpParser.IdentifierContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_global_attribute_target

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGlobal_attribute_target" ):
                listener.enterGlobal_attribute_target(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGlobal_attribute_target" ):
                listener.exitGlobal_attribute_target(self)




    def global_attribute_target(self):

        localctx = CSharpParser.Global_attribute_targetContext(self, self._ctx, self.state)
        self.enterRule(localctx, 462, self.RULE_global_attribute_target)
        try:
            self.state = 2870
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,340,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2868
                self.keyword()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2869
                self.identifier()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AttributesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def attribute_section(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Attribute_sectionContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Attribute_sectionContext,i)


        def getRuleIndex(self):
            return CSharpParser.RULE_attributes

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttributes" ):
                listener.enterAttributes(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttributes" ):
                listener.exitAttributes(self)




    def attributes(self):

        localctx = CSharpParser.AttributesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 464, self.RULE_attributes)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2873 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 2872
                    self.attribute_section()

                else:
                    raise NoViableAltException(self)
                self.state = 2875 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,341,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Attribute_sectionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_BRACKET(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.OPEN_BRACKET)
            else:
                return self.getToken(CSharpParser.OPEN_BRACKET, i)

        def attribute_list(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Attribute_listContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Attribute_listContext,i)


        def CLOSE_BRACKET(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.CLOSE_BRACKET)
            else:
                return self.getToken(CSharpParser.CLOSE_BRACKET, i)

        def attribute_target(self):
            return self.getTypedRuleContext(CSharpParser.Attribute_targetContext,0)


        def COLON(self):
            return self.getToken(CSharpParser.COLON, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.COMMA)
            else:
                return self.getToken(CSharpParser.COMMA, i)

        def getRuleIndex(self):
            return CSharpParser.RULE_attribute_section

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttribute_section" ):
                listener.enterAttribute_section(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttribute_section" ):
                listener.exitAttribute_section(self)




    def attribute_section(self):

        localctx = CSharpParser.Attribute_sectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 466, self.RULE_attribute_section)
        self._la = 0 # Token type
        try:
            self.state = 2902
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,345,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2877
                self.match(CSharpParser.OPEN_BRACKET)
                self.state = 2881
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,342,self._ctx)
                if la_ == 1:
                    self.state = 2878
                    self.attribute_target()
                    self.state = 2879
                    self.match(CSharpParser.COLON)


                self.state = 2883
                self.attribute_list()
                self.state = 2885
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==142:
                    self.state = 2884
                    self.match(CSharpParser.COMMA)


                self.state = 2887
                self.match(CSharpParser.CLOSE_BRACKET)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2889
                self.match(CSharpParser.OPEN_BRACKET)
                self.state = 2890
                self.attribute_list()
                self.state = 2891
                self.match(CSharpParser.CLOSE_BRACKET)
                self.state = 2899
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==142:
                    self.state = 2892
                    self.match(CSharpParser.COMMA)
                    self.state = 2893
                    self.match(CSharpParser.OPEN_BRACKET)
                    self.state = 2894
                    self.attribute_list()
                    self.state = 2895
                    self.match(CSharpParser.CLOSE_BRACKET)
                    self.state = 2901
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Attribute_targetContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def keyword(self):
            return self.getTypedRuleContext(CSharpParser.KeywordContext,0)


        def identifier(self):
            return self.getTypedRuleContext(CSharpParser.IdentifierContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_attribute_target

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttribute_target" ):
                listener.enterAttribute_target(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttribute_target" ):
                listener.exitAttribute_target(self)




    def attribute_target(self):

        localctx = CSharpParser.Attribute_targetContext(self, self._ctx, self.state)
        self.enterRule(localctx, 468, self.RULE_attribute_target)
        try:
            self.state = 2906
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,346,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2904
                self.keyword()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2905
                self.identifier()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Attribute_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def attribute(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.AttributeContext)
            else:
                return self.getTypedRuleContext(CSharpParser.AttributeContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.COMMA)
            else:
                return self.getToken(CSharpParser.COMMA, i)

        def getRuleIndex(self):
            return CSharpParser.RULE_attribute_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttribute_list" ):
                listener.enterAttribute_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttribute_list" ):
                listener.exitAttribute_list(self)




    def attribute_list(self):

        localctx = CSharpParser.Attribute_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 470, self.RULE_attribute_list)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2908
            self.attribute()
            self.state = 2913
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,347,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2909
                    self.match(CSharpParser.COMMA)
                    self.state = 2910
                    self.attribute() 
                self.state = 2915
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,347,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AttributeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def namespace_or_type_name(self):
            return self.getTypedRuleContext(CSharpParser.Namespace_or_type_nameContext,0)


        def OPEN_PARENS(self):
            return self.getToken(CSharpParser.OPEN_PARENS, 0)

        def CLOSE_PARENS(self):
            return self.getToken(CSharpParser.CLOSE_PARENS, 0)

        def attribute_argument(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Attribute_argumentContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Attribute_argumentContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.COMMA)
            else:
                return self.getToken(CSharpParser.COMMA, i)

        def getRuleIndex(self):
            return CSharpParser.RULE_attribute

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttribute" ):
                listener.enterAttribute(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttribute" ):
                listener.exitAttribute(self)




    def attribute(self):

        localctx = CSharpParser.AttributeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 472, self.RULE_attribute)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2916
            self.namespace_or_type_name()
            self.state = 2929
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==139:
                self.state = 2917
                self.match(CSharpParser.OPEN_PARENS)
                self.state = 2926
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 4921388326695449600) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -376760132018493605) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & 9007225147099775) != 0):
                    self.state = 2918
                    self.attribute_argument()
                    self.state = 2923
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==142:
                        self.state = 2919
                        self.match(CSharpParser.COMMA)
                        self.state = 2920
                        self.attribute_argument()
                        self.state = 2925
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 2928
                self.match(CSharpParser.CLOSE_PARENS)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Attribute_argumentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(CSharpParser.ExpressionContext,0)


        def identifier(self):
            return self.getTypedRuleContext(CSharpParser.IdentifierContext,0)


        def COLON(self):
            return self.getToken(CSharpParser.COLON, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_attribute_argument

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttribute_argument" ):
                listener.enterAttribute_argument(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttribute_argument" ):
                listener.exitAttribute_argument(self)




    def attribute_argument(self):

        localctx = CSharpParser.Attribute_argumentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 474, self.RULE_attribute_argument)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2934
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,351,self._ctx)
            if la_ == 1:
                self.state = 2931
                self.identifier()
                self.state = 2932
                self.match(CSharpParser.COLON)


            self.state = 2936
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pointer_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STAR(self):
            return self.getToken(CSharpParser.STAR, 0)

        def simple_type(self):
            return self.getTypedRuleContext(CSharpParser.Simple_typeContext,0)


        def class_type(self):
            return self.getTypedRuleContext(CSharpParser.Class_typeContext,0)


        def rank_specifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Rank_specifierContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Rank_specifierContext,i)


        def INTERR(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.INTERR)
            else:
                return self.getToken(CSharpParser.INTERR, i)

        def VOID(self):
            return self.getToken(CSharpParser.VOID, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_pointer_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPointer_type" ):
                listener.enterPointer_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPointer_type" ):
                listener.exitPointer_type(self)




    def pointer_type(self):

        localctx = CSharpParser.Pointer_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 476, self.RULE_pointer_type)
        self._la = 0 # Token type
        try:
            self.state = 2953
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [10, 12, 13, 15, 16, 17, 19, 21, 22, 25, 30, 33, 35, 36, 39, 46, 50, 51, 54, 58, 62, 64, 65, 67, 68, 73, 74, 77, 81, 88, 90, 92, 93, 94, 98, 107, 108, 110, 112, 114, 118, 119, 121, 123]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2940
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [19, 22, 25, 30, 35, 46, 58, 67, 90, 94, 107, 108, 112]:
                    self.state = 2938
                    self.simple_type()
                    pass
                elif token in [10, 12, 13, 15, 16, 17, 21, 33, 36, 39, 50, 51, 54, 62, 64, 65, 68, 73, 74, 77, 81, 88, 92, 93, 98, 110, 114, 118, 119, 121, 123]:
                    self.state = 2939
                    self.class_type()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 2946
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==137 or _la==158:
                    self.state = 2944
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [137]:
                        self.state = 2942
                        self.rank_specifier()
                        pass
                    elif token in [158]:
                        self.state = 2943
                        self.match(CSharpParser.INTERR)
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 2948
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2949
                self.match(CSharpParser.STAR)
                pass
            elif token in [116]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2951
                self.match(CSharpParser.VOID)
                self.state = 2952
                self.match(CSharpParser.STAR)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Fixed_pointer_declaratorsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fixed_pointer_declarator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Fixed_pointer_declaratorContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Fixed_pointer_declaratorContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.COMMA)
            else:
                return self.getToken(CSharpParser.COMMA, i)

        def getRuleIndex(self):
            return CSharpParser.RULE_fixed_pointer_declarators

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFixed_pointer_declarators" ):
                listener.enterFixed_pointer_declarators(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFixed_pointer_declarators" ):
                listener.exitFixed_pointer_declarators(self)




    def fixed_pointer_declarators(self):

        localctx = CSharpParser.Fixed_pointer_declaratorsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 478, self.RULE_fixed_pointer_declarators)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2955
            self.fixed_pointer_declarator()
            self.state = 2960
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==142:
                self.state = 2956
                self.match(CSharpParser.COMMA)
                self.state = 2957
                self.fixed_pointer_declarator()
                self.state = 2962
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Fixed_pointer_declaratorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(CSharpParser.IdentifierContext,0)


        def ASSIGNMENT(self):
            return self.getToken(CSharpParser.ASSIGNMENT, 0)

        def fixed_pointer_initializer(self):
            return self.getTypedRuleContext(CSharpParser.Fixed_pointer_initializerContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_fixed_pointer_declarator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFixed_pointer_declarator" ):
                listener.enterFixed_pointer_declarator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFixed_pointer_declarator" ):
                listener.exitFixed_pointer_declarator(self)




    def fixed_pointer_declarator(self):

        localctx = CSharpParser.Fixed_pointer_declaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 480, self.RULE_fixed_pointer_declarator)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2963
            self.identifier()
            self.state = 2964
            self.match(CSharpParser.ASSIGNMENT)
            self.state = 2965
            self.fixed_pointer_initializer()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Fixed_pointer_initializerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(CSharpParser.ExpressionContext,0)


        def AMP(self):
            return self.getToken(CSharpParser.AMP, 0)

        def stackalloc_initializer(self):
            return self.getTypedRuleContext(CSharpParser.Stackalloc_initializerContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_fixed_pointer_initializer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFixed_pointer_initializer" ):
                listener.enterFixed_pointer_initializer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFixed_pointer_initializer" ):
                listener.exitFixed_pointer_initializer(self)




    def fixed_pointer_initializer(self):

        localctx = CSharpParser.Fixed_pointer_initializerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 482, self.RULE_fixed_pointer_initializer)
        try:
            self.state = 2972
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [10, 12, 13, 15, 16, 17, 18, 19, 21, 22, 25, 26, 30, 31, 32, 33, 35, 36, 39, 43, 46, 50, 51, 54, 58, 62, 64, 65, 67, 68, 70, 72, 73, 74, 77, 81, 87, 88, 90, 92, 93, 94, 95, 96, 97, 98, 101, 103, 105, 107, 108, 109, 110, 112, 114, 118, 119, 121, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 137, 139, 145, 146, 147, 150, 152, 153, 154, 161, 162, 181]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2968
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,357,self._ctx)
                if la_ == 1:
                    self.state = 2967
                    self.match(CSharpParser.AMP)


                self.state = 2970
                self.expression()
                pass
            elif token in [135]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2971
                self.stackalloc_initializer()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Fixed_size_buffer_declaratorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(CSharpParser.IdentifierContext,0)


        def OPEN_BRACKET(self):
            return self.getToken(CSharpParser.OPEN_BRACKET, 0)

        def expression(self):
            return self.getTypedRuleContext(CSharpParser.ExpressionContext,0)


        def CLOSE_BRACKET(self):
            return self.getToken(CSharpParser.CLOSE_BRACKET, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_fixed_size_buffer_declarator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFixed_size_buffer_declarator" ):
                listener.enterFixed_size_buffer_declarator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFixed_size_buffer_declarator" ):
                listener.exitFixed_size_buffer_declarator(self)




    def fixed_size_buffer_declarator(self):

        localctx = CSharpParser.Fixed_size_buffer_declaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 484, self.RULE_fixed_size_buffer_declarator)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2974
            self.identifier()
            self.state = 2975
            self.match(CSharpParser.OPEN_BRACKET)
            self.state = 2976
            self.expression()
            self.state = 2977
            self.match(CSharpParser.CLOSE_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Right_arrowContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.first = None # Token
            self.second = None # Token

        def ASSIGNMENT(self):
            return self.getToken(CSharpParser.ASSIGNMENT, 0)

        def GT(self):
            return self.getToken(CSharpParser.GT, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_right_arrow

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRight_arrow" ):
                listener.enterRight_arrow(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRight_arrow" ):
                listener.exitRight_arrow(self)




    def right_arrow(self):

        localctx = CSharpParser.Right_arrowContext(self, self._ctx, self.state)
        self.enterRule(localctx, 486, self.RULE_right_arrow)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2979
            localctx.first = self.match(CSharpParser.ASSIGNMENT)
            self.state = 2980
            localctx.second = self.match(CSharpParser.GT)
            self.state = 2981
            if not (0 if localctx.first is None else localctx.first.tokenIndex) + 1 == (0 if localctx.second is None else localctx.second.tokenIndex):
                from antlr4.error.Errors import FailedPredicateException
                raise FailedPredicateException(self, "$first.index + 1 == $second.index")
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Right_shiftContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.first = None # Token
            self.second = None # Token

        def GT(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.GT)
            else:
                return self.getToken(CSharpParser.GT, i)

        def getRuleIndex(self):
            return CSharpParser.RULE_right_shift

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRight_shift" ):
                listener.enterRight_shift(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRight_shift" ):
                listener.exitRight_shift(self)




    def right_shift(self):

        localctx = CSharpParser.Right_shiftContext(self, self._ctx, self.state)
        self.enterRule(localctx, 488, self.RULE_right_shift)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2983
            localctx.first = self.match(CSharpParser.GT)
            self.state = 2984
            localctx.second = self.match(CSharpParser.GT)
            self.state = 2985
            if not (0 if localctx.first is None else localctx.first.tokenIndex) + 1 == (0 if localctx.second is None else localctx.second.tokenIndex):
                from antlr4.error.Errors import FailedPredicateException
                raise FailedPredicateException(self, "$first.index + 1 == $second.index")
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Right_shift_assignmentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.first = None # Token
            self.second = None # Token

        def GT(self):
            return self.getToken(CSharpParser.GT, 0)

        def OP_GE(self):
            return self.getToken(CSharpParser.OP_GE, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_right_shift_assignment

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRight_shift_assignment" ):
                listener.enterRight_shift_assignment(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRight_shift_assignment" ):
                listener.exitRight_shift_assignment(self)




    def right_shift_assignment(self):

        localctx = CSharpParser.Right_shift_assignmentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 490, self.RULE_right_shift_assignment)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2987
            localctx.first = self.match(CSharpParser.GT)
            self.state = 2988
            localctx.second = self.match(CSharpParser.OP_GE)
            self.state = 2989
            if not (0 if localctx.first is None else localctx.first.tokenIndex) + 1 == (0 if localctx.second is None else localctx.second.tokenIndex):
                from antlr4.error.Errors import FailedPredicateException
                raise FailedPredicateException(self, "$first.index + 1 == $second.index")
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def boolean_literal(self):
            return self.getTypedRuleContext(CSharpParser.Boolean_literalContext,0)


        def string_literal(self):
            return self.getTypedRuleContext(CSharpParser.String_literalContext,0)


        def RAW_STRING_LITERAL(self):
            return self.getToken(CSharpParser.RAW_STRING_LITERAL, 0)

        def utf8_string_literal(self):
            return self.getTypedRuleContext(CSharpParser.Utf8_string_literalContext,0)


        def INTEGER_LITERAL(self):
            return self.getToken(CSharpParser.INTEGER_LITERAL, 0)

        def HEX_INTEGER_LITERAL(self):
            return self.getToken(CSharpParser.HEX_INTEGER_LITERAL, 0)

        def BIN_INTEGER_LITERAL(self):
            return self.getToken(CSharpParser.BIN_INTEGER_LITERAL, 0)

        def REAL_LITERAL(self):
            return self.getToken(CSharpParser.REAL_LITERAL, 0)

        def CHARACTER_LITERAL(self):
            return self.getToken(CSharpParser.CHARACTER_LITERAL, 0)

        def NULL_(self):
            return self.getToken(CSharpParser.NULL_, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLiteral" ):
                listener.enterLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLiteral" ):
                listener.exitLiteral(self)




    def literal(self):

        localctx = CSharpParser.LiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 492, self.RULE_literal)
        try:
            self.state = 3001
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,359,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2991
                self.boolean_literal()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2992
                self.string_literal()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2993
                self.match(CSharpParser.RAW_STRING_LITERAL)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2994
                self.utf8_string_literal()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 2995
                self.match(CSharpParser.INTEGER_LITERAL)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 2996
                self.match(CSharpParser.HEX_INTEGER_LITERAL)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 2997
                self.match(CSharpParser.BIN_INTEGER_LITERAL)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 2998
                self.match(CSharpParser.REAL_LITERAL)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 2999
                self.match(CSharpParser.CHARACTER_LITERAL)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 3000
                self.match(CSharpParser.NULL_)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Utf8_string_literalContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REGULAR_STRING(self):
            return self.getToken(CSharpParser.REGULAR_STRING, 0)

        def UTF8_SUFFIX(self):
            return self.getToken(CSharpParser.UTF8_SUFFIX, 0)

        def VERBATIUM_STRING(self):
            return self.getToken(CSharpParser.VERBATIUM_STRING, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_utf8_string_literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUtf8_string_literal" ):
                listener.enterUtf8_string_literal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUtf8_string_literal" ):
                listener.exitUtf8_string_literal(self)




    def utf8_string_literal(self):

        localctx = CSharpParser.Utf8_string_literalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 494, self.RULE_utf8_string_literal)
        try:
            self.state = 3007
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [130]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3003
                self.match(CSharpParser.REGULAR_STRING)
                self.state = 3004
                self.match(CSharpParser.UTF8_SUFFIX)
                pass
            elif token in [131]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3005
                self.match(CSharpParser.VERBATIUM_STRING)
                self.state = 3006
                self.match(CSharpParser.UTF8_SUFFIX)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Boolean_literalContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TRUE(self):
            return self.getToken(CSharpParser.TRUE, 0)

        def FALSE(self):
            return self.getToken(CSharpParser.FALSE, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_boolean_literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBoolean_literal" ):
                listener.enterBoolean_literal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBoolean_literal" ):
                listener.exitBoolean_literal(self)




    def boolean_literal(self):

        localctx = CSharpParser.Boolean_literalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 496, self.RULE_boolean_literal)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3009
            _la = self._input.LA(1)
            if not(_la==43 or _la==103):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class String_literalContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def interpolated_regular_string(self):
            return self.getTypedRuleContext(CSharpParser.Interpolated_regular_stringContext,0)


        def interpolated_verbatium_string(self):
            return self.getTypedRuleContext(CSharpParser.Interpolated_verbatium_stringContext,0)


        def REGULAR_STRING(self):
            return self.getToken(CSharpParser.REGULAR_STRING, 0)

        def VERBATIUM_STRING(self):
            return self.getToken(CSharpParser.VERBATIUM_STRING, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_string_literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterString_literal" ):
                listener.enterString_literal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitString_literal" ):
                listener.exitString_literal(self)




    def string_literal(self):

        localctx = CSharpParser.String_literalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 498, self.RULE_string_literal)
        try:
            self.state = 3015
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [132]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3011
                self.interpolated_regular_string()
                pass
            elif token in [133]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3012
                self.interpolated_verbatium_string()
                pass
            elif token in [130]:
                self.enterOuterAlt(localctx, 3)
                self.state = 3013
                self.match(CSharpParser.REGULAR_STRING)
                pass
            elif token in [131]:
                self.enterOuterAlt(localctx, 4)
                self.state = 3014
                self.match(CSharpParser.VERBATIUM_STRING)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Interpolated_regular_stringContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INTERPOLATED_REGULAR_STRING_START(self):
            return self.getToken(CSharpParser.INTERPOLATED_REGULAR_STRING_START, 0)

        def DOUBLE_QUOTE_INSIDE(self):
            return self.getToken(CSharpParser.DOUBLE_QUOTE_INSIDE, 0)

        def interpolated_regular_string_part(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Interpolated_regular_string_partContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Interpolated_regular_string_partContext,i)


        def getRuleIndex(self):
            return CSharpParser.RULE_interpolated_regular_string

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterpolated_regular_string" ):
                listener.enterInterpolated_regular_string(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterpolated_regular_string" ):
                listener.exitInterpolated_regular_string(self)




    def interpolated_regular_string(self):

        localctx = CSharpParser.Interpolated_regular_stringContext(self, self._ctx, self.state)
        self.enterRule(localctx, 500, self.RULE_interpolated_regular_string)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3017
            self.match(CSharpParser.INTERPOLATED_REGULAR_STRING_START)
            self.state = 3021
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,362,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 3018
                    self.interpolated_regular_string_part() 
                self.state = 3023
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,362,self._ctx)

            self.state = 3024
            self.match(CSharpParser.DOUBLE_QUOTE_INSIDE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Interpolated_verbatium_stringContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INTERPOLATED_VERBATIUM_STRING_START(self):
            return self.getToken(CSharpParser.INTERPOLATED_VERBATIUM_STRING_START, 0)

        def DOUBLE_QUOTE_INSIDE(self):
            return self.getToken(CSharpParser.DOUBLE_QUOTE_INSIDE, 0)

        def interpolated_verbatium_string_part(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Interpolated_verbatium_string_partContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Interpolated_verbatium_string_partContext,i)


        def getRuleIndex(self):
            return CSharpParser.RULE_interpolated_verbatium_string

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterpolated_verbatium_string" ):
                listener.enterInterpolated_verbatium_string(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterpolated_verbatium_string" ):
                listener.exitInterpolated_verbatium_string(self)




    def interpolated_verbatium_string(self):

        localctx = CSharpParser.Interpolated_verbatium_stringContext(self, self._ctx, self.state)
        self.enterRule(localctx, 502, self.RULE_interpolated_verbatium_string)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3026
            self.match(CSharpParser.INTERPOLATED_VERBATIUM_STRING_START)
            self.state = 3030
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 182)) & ~0x3f) == 0 and ((1 << (_la - 182)) & 75) != 0):
                self.state = 3027
                self.interpolated_verbatium_string_part()
                self.state = 3032
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 3033
            self.match(CSharpParser.DOUBLE_QUOTE_INSIDE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Interpolated_regular_string_partContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def interpolated_string_expression(self):
            return self.getTypedRuleContext(CSharpParser.Interpolated_string_expressionContext,0)


        def DOUBLE_CURLY_INSIDE(self):
            return self.getToken(CSharpParser.DOUBLE_CURLY_INSIDE, 0)

        def REGULAR_CHAR_INSIDE(self):
            return self.getToken(CSharpParser.REGULAR_CHAR_INSIDE, 0)

        def REGULAR_STRING_INSIDE(self):
            return self.getToken(CSharpParser.REGULAR_STRING_INSIDE, 0)

        def OPEN_BRACE_INSIDE(self):
            return self.getToken(CSharpParser.OPEN_BRACE_INSIDE, 0)

        def CLOSE_BRACE_INSIDE(self):
            return self.getToken(CSharpParser.CLOSE_BRACE_INSIDE, 0)

        def DOUBLE_QUOTE_INSIDE(self):
            return self.getToken(CSharpParser.DOUBLE_QUOTE_INSIDE, 0)

        def VERBATIUM_INSIDE_STRING(self):
            return self.getToken(CSharpParser.VERBATIUM_INSIDE_STRING, 0)

        def OPEN_BRACE(self):
            return self.getToken(CSharpParser.OPEN_BRACE, 0)

        def CLOSE_BRACE(self):
            return self.getToken(CSharpParser.CLOSE_BRACE, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_interpolated_regular_string_part

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterpolated_regular_string_part" ):
                listener.enterInterpolated_regular_string_part(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterpolated_regular_string_part" ):
                listener.exitInterpolated_regular_string_part(self)




    def interpolated_regular_string_part(self):

        localctx = CSharpParser.Interpolated_regular_string_partContext(self, self._ctx, self.state)
        self.enterRule(localctx, 504, self.RULE_interpolated_regular_string_part)
        try:
            self.state = 3045
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,364,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3035
                self.interpolated_string_expression()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3036
                self.match(CSharpParser.DOUBLE_CURLY_INSIDE)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 3037
                self.match(CSharpParser.REGULAR_CHAR_INSIDE)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 3038
                self.match(CSharpParser.REGULAR_STRING_INSIDE)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 3039
                self.match(CSharpParser.OPEN_BRACE_INSIDE)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 3040
                self.match(CSharpParser.CLOSE_BRACE_INSIDE)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 3041
                self.match(CSharpParser.DOUBLE_QUOTE_INSIDE)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 3042
                self.match(CSharpParser.VERBATIUM_INSIDE_STRING)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 3043
                self.match(CSharpParser.OPEN_BRACE)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 3044
                self.match(CSharpParser.CLOSE_BRACE)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Interpolated_verbatium_string_partContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def interpolated_string_expression(self):
            return self.getTypedRuleContext(CSharpParser.Interpolated_string_expressionContext,0)


        def DOUBLE_CURLY_INSIDE(self):
            return self.getToken(CSharpParser.DOUBLE_CURLY_INSIDE, 0)

        def VERBATIUM_DOUBLE_QUOTE_INSIDE(self):
            return self.getToken(CSharpParser.VERBATIUM_DOUBLE_QUOTE_INSIDE, 0)

        def VERBATIUM_INSIDE_STRING(self):
            return self.getToken(CSharpParser.VERBATIUM_INSIDE_STRING, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_interpolated_verbatium_string_part

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterpolated_verbatium_string_part" ):
                listener.enterInterpolated_verbatium_string_part(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterpolated_verbatium_string_part" ):
                listener.exitInterpolated_verbatium_string_part(self)




    def interpolated_verbatium_string_part(self):

        localctx = CSharpParser.Interpolated_verbatium_string_partContext(self, self._ctx, self.state)
        self.enterRule(localctx, 506, self.RULE_interpolated_verbatium_string_part)
        try:
            self.state = 3051
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [183]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3047
                self.interpolated_string_expression()
                pass
            elif token in [182]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3048
                self.match(CSharpParser.DOUBLE_CURLY_INSIDE)
                pass
            elif token in [185]:
                self.enterOuterAlt(localctx, 3)
                self.state = 3049
                self.match(CSharpParser.VERBATIUM_DOUBLE_QUOTE_INSIDE)
                pass
            elif token in [188]:
                self.enterOuterAlt(localctx, 4)
                self.state = 3050
                self.match(CSharpParser.VERBATIUM_INSIDE_STRING)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Interpolated_string_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_BRACE_INSIDE(self):
            return self.getToken(CSharpParser.OPEN_BRACE_INSIDE, 0)

        def expression(self):
            return self.getTypedRuleContext(CSharpParser.ExpressionContext,0)


        def CLOSE_BRACE_INSIDE(self):
            return self.getToken(CSharpParser.CLOSE_BRACE_INSIDE, 0)

        def COMMA(self):
            return self.getToken(CSharpParser.COMMA, 0)

        def interpolation_minimum_width(self):
            return self.getTypedRuleContext(CSharpParser.Interpolation_minimum_widthContext,0)


        def format_string(self):
            return self.getTypedRuleContext(CSharpParser.Format_stringContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_interpolated_string_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterpolated_string_expression" ):
                listener.enterInterpolated_string_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterpolated_string_expression" ):
                listener.exitInterpolated_string_expression(self)




    def interpolated_string_expression(self):

        localctx = CSharpParser.Interpolated_string_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 508, self.RULE_interpolated_string_expression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3053
            self.match(CSharpParser.OPEN_BRACE_INSIDE)
            self.state = 3054
            self.expression()
            self.state = 3057
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==142:
                self.state = 3055
                self.match(CSharpParser.COMMA)
                self.state = 3056
                self.interpolation_minimum_width()


            self.state = 3060
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==143:
                self.state = 3059
                self.format_string()


            self.state = 3062
            self.match(CSharpParser.CLOSE_BRACE_INSIDE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Interpolation_minimum_widthContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def constant_expression(self):
            return self.getTypedRuleContext(CSharpParser.Constant_expressionContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_interpolation_minimum_width

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterpolation_minimum_width" ):
                listener.enterInterpolation_minimum_width(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterpolation_minimum_width" ):
                listener.exitInterpolation_minimum_width(self)




    def interpolation_minimum_width(self):

        localctx = CSharpParser.Interpolation_minimum_widthContext(self, self._ctx, self.state)
        self.enterRule(localctx, 510, self.RULE_interpolation_minimum_width)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3064
            self.constant_expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Format_stringContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COLON(self):
            return self.getToken(CSharpParser.COLON, 0)

        def FORMAT_STRING(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.FORMAT_STRING)
            else:
                return self.getToken(CSharpParser.FORMAT_STRING, i)

        def getRuleIndex(self):
            return CSharpParser.RULE_format_string

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFormat_string" ):
                listener.enterFormat_string(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFormat_string" ):
                listener.exitFormat_string(self)




    def format_string(self):

        localctx = CSharpParser.Format_stringContext(self, self._ctx, self.state)
        self.enterRule(localctx, 512, self.RULE_format_string)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3066
            self.match(CSharpParser.COLON)
            self.state = 3068 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 3067
                self.match(CSharpParser.FORMAT_STRING)
                self.state = 3070 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==190):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Constant_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(CSharpParser.ExpressionContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_constant_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstant_expression" ):
                listener.enterConstant_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstant_expression" ):
                listener.exitConstant_expression(self)




    def constant_expression(self):

        localctx = CSharpParser.Constant_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 514, self.RULE_constant_expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3072
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class KeywordContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ABSTRACT(self):
            return self.getToken(CSharpParser.ABSTRACT, 0)

        def AS(self):
            return self.getToken(CSharpParser.AS, 0)

        def BASE(self):
            return self.getToken(CSharpParser.BASE, 0)

        def BOOL(self):
            return self.getToken(CSharpParser.BOOL, 0)

        def BREAK(self):
            return self.getToken(CSharpParser.BREAK, 0)

        def BYTE(self):
            return self.getToken(CSharpParser.BYTE, 0)

        def CASE(self):
            return self.getToken(CSharpParser.CASE, 0)

        def CATCH(self):
            return self.getToken(CSharpParser.CATCH, 0)

        def CHAR(self):
            return self.getToken(CSharpParser.CHAR, 0)

        def CHECKED(self):
            return self.getToken(CSharpParser.CHECKED, 0)

        def CLASS(self):
            return self.getToken(CSharpParser.CLASS, 0)

        def CONST(self):
            return self.getToken(CSharpParser.CONST, 0)

        def CONTINUE(self):
            return self.getToken(CSharpParser.CONTINUE, 0)

        def DECIMAL(self):
            return self.getToken(CSharpParser.DECIMAL, 0)

        def DEFAULT(self):
            return self.getToken(CSharpParser.DEFAULT, 0)

        def DELEGATE(self):
            return self.getToken(CSharpParser.DELEGATE, 0)

        def DO(self):
            return self.getToken(CSharpParser.DO, 0)

        def DOUBLE(self):
            return self.getToken(CSharpParser.DOUBLE, 0)

        def ELSE(self):
            return self.getToken(CSharpParser.ELSE, 0)

        def ENUM(self):
            return self.getToken(CSharpParser.ENUM, 0)

        def EVENT(self):
            return self.getToken(CSharpParser.EVENT, 0)

        def EXPLICIT(self):
            return self.getToken(CSharpParser.EXPLICIT, 0)

        def EXTERN(self):
            return self.getToken(CSharpParser.EXTERN, 0)

        def FALSE(self):
            return self.getToken(CSharpParser.FALSE, 0)

        def FINALLY(self):
            return self.getToken(CSharpParser.FINALLY, 0)

        def FIXED(self):
            return self.getToken(CSharpParser.FIXED, 0)

        def FLOAT(self):
            return self.getToken(CSharpParser.FLOAT, 0)

        def FOR(self):
            return self.getToken(CSharpParser.FOR, 0)

        def FOREACH(self):
            return self.getToken(CSharpParser.FOREACH, 0)

        def GOTO(self):
            return self.getToken(CSharpParser.GOTO, 0)

        def IF(self):
            return self.getToken(CSharpParser.IF, 0)

        def IMPLICIT(self):
            return self.getToken(CSharpParser.IMPLICIT, 0)

        def IN(self):
            return self.getToken(CSharpParser.IN, 0)

        def INT(self):
            return self.getToken(CSharpParser.INT, 0)

        def INTERFACE(self):
            return self.getToken(CSharpParser.INTERFACE, 0)

        def INTERNAL(self):
            return self.getToken(CSharpParser.INTERNAL, 0)

        def IS(self):
            return self.getToken(CSharpParser.IS, 0)

        def LOCK(self):
            return self.getToken(CSharpParser.LOCK, 0)

        def LONG(self):
            return self.getToken(CSharpParser.LONG, 0)

        def NAMESPACE(self):
            return self.getToken(CSharpParser.NAMESPACE, 0)

        def NEW(self):
            return self.getToken(CSharpParser.NEW, 0)

        def NULL_(self):
            return self.getToken(CSharpParser.NULL_, 0)

        def OBJECT(self):
            return self.getToken(CSharpParser.OBJECT, 0)

        def OPERATOR(self):
            return self.getToken(CSharpParser.OPERATOR, 0)

        def OUT(self):
            return self.getToken(CSharpParser.OUT, 0)

        def OVERRIDE(self):
            return self.getToken(CSharpParser.OVERRIDE, 0)

        def PARAMS(self):
            return self.getToken(CSharpParser.PARAMS, 0)

        def PRIVATE(self):
            return self.getToken(CSharpParser.PRIVATE, 0)

        def PROTECTED(self):
            return self.getToken(CSharpParser.PROTECTED, 0)

        def PUBLIC(self):
            return self.getToken(CSharpParser.PUBLIC, 0)

        def READONLY(self):
            return self.getToken(CSharpParser.READONLY, 0)

        def REF(self):
            return self.getToken(CSharpParser.REF, 0)

        def RETURN(self):
            return self.getToken(CSharpParser.RETURN, 0)

        def SBYTE(self):
            return self.getToken(CSharpParser.SBYTE, 0)

        def SEALED(self):
            return self.getToken(CSharpParser.SEALED, 0)

        def SHORT(self):
            return self.getToken(CSharpParser.SHORT, 0)

        def SIZEOF(self):
            return self.getToken(CSharpParser.SIZEOF, 0)

        def STACKALLOC(self):
            return self.getToken(CSharpParser.STACKALLOC, 0)

        def STATIC(self):
            return self.getToken(CSharpParser.STATIC, 0)

        def STRING(self):
            return self.getToken(CSharpParser.STRING, 0)

        def STRUCT(self):
            return self.getToken(CSharpParser.STRUCT, 0)

        def SWITCH(self):
            return self.getToken(CSharpParser.SWITCH, 0)

        def THIS(self):
            return self.getToken(CSharpParser.THIS, 0)

        def THROW(self):
            return self.getToken(CSharpParser.THROW, 0)

        def TRUE(self):
            return self.getToken(CSharpParser.TRUE, 0)

        def TRY(self):
            return self.getToken(CSharpParser.TRY, 0)

        def TYPEOF(self):
            return self.getToken(CSharpParser.TYPEOF, 0)

        def UINT(self):
            return self.getToken(CSharpParser.UINT, 0)

        def ULONG(self):
            return self.getToken(CSharpParser.ULONG, 0)

        def UNCHECKED(self):
            return self.getToken(CSharpParser.UNCHECKED, 0)

        def UNMANAGED(self):
            return self.getToken(CSharpParser.UNMANAGED, 0)

        def UNSAFE(self):
            return self.getToken(CSharpParser.UNSAFE, 0)

        def USHORT(self):
            return self.getToken(CSharpParser.USHORT, 0)

        def USING(self):
            return self.getToken(CSharpParser.USING, 0)

        def VIRTUAL(self):
            return self.getToken(CSharpParser.VIRTUAL, 0)

        def VOID(self):
            return self.getToken(CSharpParser.VOID, 0)

        def VOLATILE(self):
            return self.getToken(CSharpParser.VOLATILE, 0)

        def WHILE(self):
            return self.getToken(CSharpParser.WHILE, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_keyword

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterKeyword" ):
                listener.enterKeyword(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitKeyword" ):
                listener.exitKeyword(self)




    def keyword(self):

        localctx = CSharpParser.KeywordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 516, self.RULE_keyword)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3074
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & -6948069689681755648) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & 22235423441908955) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Class_definitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CLASS(self):
            return self.getToken(CSharpParser.CLASS, 0)

        def identifier(self):
            return self.getTypedRuleContext(CSharpParser.IdentifierContext,0)


        def class_body(self):
            return self.getTypedRuleContext(CSharpParser.Class_bodyContext,0)


        def class_modifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Class_modifierContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Class_modifierContext,i)


        def PARTIAL(self):
            return self.getToken(CSharpParser.PARTIAL, 0)

        def type_parameter_list(self):
            return self.getTypedRuleContext(CSharpParser.Type_parameter_listContext,0)


        def primary_constructor_parameters(self):
            return self.getTypedRuleContext(CSharpParser.Primary_constructor_parametersContext,0)


        def class_base(self):
            return self.getTypedRuleContext(CSharpParser.Class_baseContext,0)


        def type_parameter_constraints_clauses(self):
            return self.getTypedRuleContext(CSharpParser.Type_parameter_constraints_clausesContext,0)


        def SEMICOLON(self):
            return self.getToken(CSharpParser.SEMICOLON, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_class_definition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClass_definition" ):
                listener.enterClass_definition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClass_definition" ):
                listener.exitClass_definition(self)




    def class_definition(self):

        localctx = CSharpParser.Class_definitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 518, self.RULE_class_definition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3079
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & 1153062242095202816) != 0) or ((((_la - 70)) & ~0x3f) == 0 and ((1 << (_la - 70)) & 2199159599105) != 0):
                self.state = 3076
                self.class_modifier()
                self.state = 3081
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 3083
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==81:
                self.state = 3082
                self.match(CSharpParser.PARTIAL)


            self.state = 3085
            self.match(CSharpParser.CLASS)
            self.state = 3086
            self.identifier()
            self.state = 3088
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==156:
                self.state = 3087
                self.type_parameter_list()


            self.state = 3091
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==139:
                self.state = 3090
                self.primary_constructor_parameters()


            self.state = 3094
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==143:
                self.state = 3093
                self.class_base()


            self.state = 3097
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==119:
                self.state = 3096
                self.type_parameter_constraints_clauses()


            self.state = 3099
            self.class_body()
            self.state = 3101
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,375,self._ctx)
            if la_ == 1:
                self.state = 3100
                self.match(CSharpParser.SEMICOLON)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Primary_constructor_parametersContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PARENS(self):
            return self.getToken(CSharpParser.OPEN_PARENS, 0)

        def CLOSE_PARENS(self):
            return self.getToken(CSharpParser.CLOSE_PARENS, 0)

        def formal_parameter_list(self):
            return self.getTypedRuleContext(CSharpParser.Formal_parameter_listContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_primary_constructor_parameters

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrimary_constructor_parameters" ):
                listener.enterPrimary_constructor_parameters(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrimary_constructor_parameters" ):
                listener.exitPrimary_constructor_parameters(self)




    def primary_constructor_parameters(self):

        localctx = CSharpParser.Primary_constructor_parametersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 520, self.RULE_primary_constructor_parameters)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3103
            self.match(CSharpParser.OPEN_PARENS)
            self.state = 3105
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 5065494716463428608) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 780627024034358811) != 0) or _la==137 or _la==139:
                self.state = 3104
                self.formal_parameter_list()


            self.state = 3107
            self.match(CSharpParser.CLOSE_PARENS)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Class_modifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NEW(self):
            return self.getToken(CSharpParser.NEW, 0)

        def PUBLIC(self):
            return self.getToken(CSharpParser.PUBLIC, 0)

        def PROTECTED(self):
            return self.getToken(CSharpParser.PROTECTED, 0)

        def INTERNAL(self):
            return self.getToken(CSharpParser.INTERNAL, 0)

        def PRIVATE(self):
            return self.getToken(CSharpParser.PRIVATE, 0)

        def ABSTRACT(self):
            return self.getToken(CSharpParser.ABSTRACT, 0)

        def SEALED(self):
            return self.getToken(CSharpParser.SEALED, 0)

        def STATIC(self):
            return self.getToken(CSharpParser.STATIC, 0)

        def UNSAFE(self):
            return self.getToken(CSharpParser.UNSAFE, 0)

        def FILE(self):
            return self.getToken(CSharpParser.FILE, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_class_modifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClass_modifier" ):
                listener.enterClass_modifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClass_modifier" ):
                listener.exitClass_modifier(self)




    def class_modifier(self):

        localctx = CSharpParser.Class_modifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 522, self.RULE_class_modifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3109
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 1153062242095202816) != 0) or ((((_la - 70)) & ~0x3f) == 0 and ((1 << (_la - 70)) & 2199159599105) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Struct_definitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STRUCT(self):
            return self.getToken(CSharpParser.STRUCT, 0)

        def identifier(self):
            return self.getTypedRuleContext(CSharpParser.IdentifierContext,0)


        def struct_body(self):
            return self.getTypedRuleContext(CSharpParser.Struct_bodyContext,0)


        def struct_modifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Struct_modifierContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Struct_modifierContext,i)


        def REF(self):
            return self.getToken(CSharpParser.REF, 0)

        def PARTIAL(self):
            return self.getToken(CSharpParser.PARTIAL, 0)

        def RECORD(self):
            return self.getToken(CSharpParser.RECORD, 0)

        def READONLY(self):
            return self.getToken(CSharpParser.READONLY, 0)

        def type_parameter_list(self):
            return self.getTypedRuleContext(CSharpParser.Type_parameter_listContext,0)


        def struct_interfaces(self):
            return self.getTypedRuleContext(CSharpParser.Struct_interfacesContext,0)


        def type_parameter_constraints_clauses(self):
            return self.getTypedRuleContext(CSharpParser.Type_parameter_constraints_clausesContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_struct_definition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStruct_definition" ):
                listener.enterStruct_definition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStruct_definition" ):
                listener.exitStruct_definition(self)




    def struct_definition(self):

        localctx = CSharpParser.Struct_definitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 524, self.RULE_struct_definition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3114
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,377,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 3111
                    self.struct_modifier() 
                self.state = 3116
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,377,self._ctx)

            self.state = 3118
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==87:
                self.state = 3117
                self.match(CSharpParser.REF)


            self.state = 3121
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==81:
                self.state = 3120
                self.match(CSharpParser.PARTIAL)


            self.state = 3126
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [122]:
                self.state = 3123
                self.match(CSharpParser.RECORD)
                pass
            elif token in [85]:
                self.state = 3124
                self.match(CSharpParser.READONLY)
                self.state = 3125
                self.match(CSharpParser.RECORD)
                pass
            elif token in [99]:
                pass
            else:
                pass
            self.state = 3128
            self.match(CSharpParser.STRUCT)
            self.state = 3129
            self.identifier()
            self.state = 3131
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==156:
                self.state = 3130
                self.type_parameter_list()


            self.state = 3134
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==143:
                self.state = 3133
                self.struct_interfaces()


            self.state = 3137
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==119:
                self.state = 3136
                self.type_parameter_constraints_clauses()


            self.state = 3139
            self.struct_body()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Struct_modifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NEW(self):
            return self.getToken(CSharpParser.NEW, 0)

        def PUBLIC(self):
            return self.getToken(CSharpParser.PUBLIC, 0)

        def PROTECTED(self):
            return self.getToken(CSharpParser.PROTECTED, 0)

        def INTERNAL(self):
            return self.getToken(CSharpParser.INTERNAL, 0)

        def PRIVATE(self):
            return self.getToken(CSharpParser.PRIVATE, 0)

        def READONLY(self):
            return self.getToken(CSharpParser.READONLY, 0)

        def UNSAFE(self):
            return self.getToken(CSharpParser.UNSAFE, 0)

        def FILE(self):
            return self.getToken(CSharpParser.FILE, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_struct_modifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStruct_modifier" ):
                listener.enterStruct_modifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStruct_modifier" ):
                listener.exitStruct_modifier(self)




    def struct_modifier(self):

        localctx = CSharpParser.Struct_modifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 526, self.RULE_struct_modifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3141
            _la = self._input.LA(1)
            if not(_la==47 or _la==60 or ((((_la - 70)) & ~0x3f) == 0 and ((1 << (_la - 70)) & 2199023316993) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Interface_definitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INTERFACE(self):
            return self.getToken(CSharpParser.INTERFACE, 0)

        def identifier(self):
            return self.getTypedRuleContext(CSharpParser.IdentifierContext,0)


        def class_body(self):
            return self.getTypedRuleContext(CSharpParser.Class_bodyContext,0)


        def variant_type_parameter_list(self):
            return self.getTypedRuleContext(CSharpParser.Variant_type_parameter_listContext,0)


        def interface_base(self):
            return self.getTypedRuleContext(CSharpParser.Interface_baseContext,0)


        def type_parameter_constraints_clauses(self):
            return self.getTypedRuleContext(CSharpParser.Type_parameter_constraints_clausesContext,0)


        def SEMICOLON(self):
            return self.getToken(CSharpParser.SEMICOLON, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_interface_definition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterface_definition" ):
                listener.enterInterface_definition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterface_definition" ):
                listener.exitInterface_definition(self)




    def interface_definition(self):

        localctx = CSharpParser.Interface_definitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 528, self.RULE_interface_definition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3143
            self.match(CSharpParser.INTERFACE)
            self.state = 3144
            self.identifier()
            self.state = 3146
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==156:
                self.state = 3145
                self.variant_type_parameter_list()


            self.state = 3149
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==143:
                self.state = 3148
                self.interface_base()


            self.state = 3152
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==119:
                self.state = 3151
                self.type_parameter_constraints_clauses()


            self.state = 3154
            self.class_body()
            self.state = 3156
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,387,self._ctx)
            if la_ == 1:
                self.state = 3155
                self.match(CSharpParser.SEMICOLON)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Enum_definitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ENUM(self):
            return self.getToken(CSharpParser.ENUM, 0)

        def identifier(self):
            return self.getTypedRuleContext(CSharpParser.IdentifierContext,0)


        def enum_body(self):
            return self.getTypedRuleContext(CSharpParser.Enum_bodyContext,0)


        def enum_base(self):
            return self.getTypedRuleContext(CSharpParser.Enum_baseContext,0)


        def SEMICOLON(self):
            return self.getToken(CSharpParser.SEMICOLON, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_enum_definition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnum_definition" ):
                listener.enterEnum_definition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnum_definition" ):
                listener.exitEnum_definition(self)




    def enum_definition(self):

        localctx = CSharpParser.Enum_definitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 530, self.RULE_enum_definition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3158
            self.match(CSharpParser.ENUM)
            self.state = 3159
            self.identifier()
            self.state = 3161
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==143:
                self.state = 3160
                self.enum_base()


            self.state = 3163
            self.enum_body()
            self.state = 3165
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,389,self._ctx)
            if la_ == 1:
                self.state = 3164
                self.match(CSharpParser.SEMICOLON)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Delegate_definitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DELEGATE(self):
            return self.getToken(CSharpParser.DELEGATE, 0)

        def return_type(self):
            return self.getTypedRuleContext(CSharpParser.Return_typeContext,0)


        def identifier(self):
            return self.getTypedRuleContext(CSharpParser.IdentifierContext,0)


        def OPEN_PARENS(self):
            return self.getToken(CSharpParser.OPEN_PARENS, 0)

        def CLOSE_PARENS(self):
            return self.getToken(CSharpParser.CLOSE_PARENS, 0)

        def SEMICOLON(self):
            return self.getToken(CSharpParser.SEMICOLON, 0)

        def variant_type_parameter_list(self):
            return self.getTypedRuleContext(CSharpParser.Variant_type_parameter_listContext,0)


        def formal_parameter_list(self):
            return self.getTypedRuleContext(CSharpParser.Formal_parameter_listContext,0)


        def type_parameter_constraints_clauses(self):
            return self.getTypedRuleContext(CSharpParser.Type_parameter_constraints_clausesContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_delegate_definition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDelegate_definition" ):
                listener.enterDelegate_definition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDelegate_definition" ):
                listener.exitDelegate_definition(self)




    def delegate_definition(self):

        localctx = CSharpParser.Delegate_definitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 532, self.RULE_delegate_definition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3167
            self.match(CSharpParser.DELEGATE)
            self.state = 3168
            self.return_type()
            self.state = 3169
            self.identifier()
            self.state = 3171
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==156:
                self.state = 3170
                self.variant_type_parameter_list()


            self.state = 3173
            self.match(CSharpParser.OPEN_PARENS)
            self.state = 3175
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 5065494716463428608) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 780627024034358811) != 0) or _la==137 or _la==139:
                self.state = 3174
                self.formal_parameter_list()


            self.state = 3177
            self.match(CSharpParser.CLOSE_PARENS)
            self.state = 3179
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==119:
                self.state = 3178
                self.type_parameter_constraints_clauses()


            self.state = 3181
            self.match(CSharpParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Event_declarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EVENT(self):
            return self.getToken(CSharpParser.EVENT, 0)

        def type_(self):
            return self.getTypedRuleContext(CSharpParser.Type_Context,0)


        def variable_declarators(self):
            return self.getTypedRuleContext(CSharpParser.Variable_declaratorsContext,0)


        def SEMICOLON(self):
            return self.getToken(CSharpParser.SEMICOLON, 0)

        def member_name(self):
            return self.getTypedRuleContext(CSharpParser.Member_nameContext,0)


        def OPEN_BRACE(self):
            return self.getToken(CSharpParser.OPEN_BRACE, 0)

        def event_accessor_declarations(self):
            return self.getTypedRuleContext(CSharpParser.Event_accessor_declarationsContext,0)


        def CLOSE_BRACE(self):
            return self.getToken(CSharpParser.CLOSE_BRACE, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_event_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEvent_declaration" ):
                listener.enterEvent_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEvent_declaration" ):
                listener.exitEvent_declaration(self)




    def event_declaration(self):

        localctx = CSharpParser.Event_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 534, self.RULE_event_declaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3183
            self.match(CSharpParser.EVENT)
            self.state = 3184
            self.type_()
            self.state = 3193
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,393,self._ctx)
            if la_ == 1:
                self.state = 3185
                self.variable_declarators()
                self.state = 3186
                self.match(CSharpParser.SEMICOLON)
                pass

            elif la_ == 2:
                self.state = 3188
                self.member_name()
                self.state = 3189
                self.match(CSharpParser.OPEN_BRACE)
                self.state = 3190
                self.event_accessor_declarations()
                self.state = 3191
                self.match(CSharpParser.CLOSE_BRACE)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Field_declarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def variable_declarators(self):
            return self.getTypedRuleContext(CSharpParser.Variable_declaratorsContext,0)


        def SEMICOLON(self):
            return self.getToken(CSharpParser.SEMICOLON, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_field_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterField_declaration" ):
                listener.enterField_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitField_declaration" ):
                listener.exitField_declaration(self)




    def field_declaration(self):

        localctx = CSharpParser.Field_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 536, self.RULE_field_declaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3195
            self.variable_declarators()
            self.state = 3196
            self.match(CSharpParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Property_declarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def member_name(self):
            return self.getTypedRuleContext(CSharpParser.Member_nameContext,0)


        def OPEN_BRACE(self):
            return self.getToken(CSharpParser.OPEN_BRACE, 0)

        def accessor_declarations(self):
            return self.getTypedRuleContext(CSharpParser.Accessor_declarationsContext,0)


        def CLOSE_BRACE(self):
            return self.getToken(CSharpParser.CLOSE_BRACE, 0)

        def right_arrow(self):
            return self.getTypedRuleContext(CSharpParser.Right_arrowContext,0)


        def throwable_expression(self):
            return self.getTypedRuleContext(CSharpParser.Throwable_expressionContext,0)


        def SEMICOLON(self):
            return self.getToken(CSharpParser.SEMICOLON, 0)

        def ASSIGNMENT(self):
            return self.getToken(CSharpParser.ASSIGNMENT, 0)

        def variable_initializer(self):
            return self.getTypedRuleContext(CSharpParser.Variable_initializerContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_property_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProperty_declaration" ):
                listener.enterProperty_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProperty_declaration" ):
                listener.exitProperty_declaration(self)




    def property_declaration(self):

        localctx = CSharpParser.Property_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 538, self.RULE_property_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3198
            self.member_name()
            self.state = 3212
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [135]:
                self.state = 3199
                self.match(CSharpParser.OPEN_BRACE)
                self.state = 3200
                self.accessor_declarations()
                self.state = 3201
                self.match(CSharpParser.CLOSE_BRACE)
                self.state = 3206
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==155:
                    self.state = 3202
                    self.match(CSharpParser.ASSIGNMENT)
                    self.state = 3203
                    self.variable_initializer()
                    self.state = 3204
                    self.match(CSharpParser.SEMICOLON)


                pass
            elif token in [155]:
                self.state = 3208
                self.right_arrow()
                self.state = 3209
                self.throwable_expression()
                self.state = 3210
                self.match(CSharpParser.SEMICOLON)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Constant_declarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CONST(self):
            return self.getToken(CSharpParser.CONST, 0)

        def type_(self):
            return self.getTypedRuleContext(CSharpParser.Type_Context,0)


        def constant_declarators(self):
            return self.getTypedRuleContext(CSharpParser.Constant_declaratorsContext,0)


        def SEMICOLON(self):
            return self.getToken(CSharpParser.SEMICOLON, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_constant_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstant_declaration" ):
                listener.enterConstant_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstant_declaration" ):
                listener.exitConstant_declaration(self)




    def constant_declaration(self):

        localctx = CSharpParser.Constant_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 540, self.RULE_constant_declaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3214
            self.match(CSharpParser.CONST)
            self.state = 3215
            self.type_()
            self.state = 3216
            self.constant_declarators()
            self.state = 3217
            self.match(CSharpParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Indexer_declarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def THIS(self):
            return self.getToken(CSharpParser.THIS, 0)

        def OPEN_BRACKET(self):
            return self.getToken(CSharpParser.OPEN_BRACKET, 0)

        def formal_parameter_list(self):
            return self.getTypedRuleContext(CSharpParser.Formal_parameter_listContext,0)


        def CLOSE_BRACKET(self):
            return self.getToken(CSharpParser.CLOSE_BRACKET, 0)

        def OPEN_BRACE(self):
            return self.getToken(CSharpParser.OPEN_BRACE, 0)

        def accessor_declarations(self):
            return self.getTypedRuleContext(CSharpParser.Accessor_declarationsContext,0)


        def CLOSE_BRACE(self):
            return self.getToken(CSharpParser.CLOSE_BRACE, 0)

        def right_arrow(self):
            return self.getTypedRuleContext(CSharpParser.Right_arrowContext,0)


        def throwable_expression(self):
            return self.getTypedRuleContext(CSharpParser.Throwable_expressionContext,0)


        def SEMICOLON(self):
            return self.getToken(CSharpParser.SEMICOLON, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_indexer_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndexer_declaration" ):
                listener.enterIndexer_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndexer_declaration" ):
                listener.exitIndexer_declaration(self)




    def indexer_declaration(self):

        localctx = CSharpParser.Indexer_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 542, self.RULE_indexer_declaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3219
            self.match(CSharpParser.THIS)
            self.state = 3220
            self.match(CSharpParser.OPEN_BRACKET)
            self.state = 3221
            self.formal_parameter_list()
            self.state = 3222
            self.match(CSharpParser.CLOSE_BRACKET)
            self.state = 3231
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [135]:
                self.state = 3223
                self.match(CSharpParser.OPEN_BRACE)
                self.state = 3224
                self.accessor_declarations()
                self.state = 3225
                self.match(CSharpParser.CLOSE_BRACE)
                pass
            elif token in [155]:
                self.state = 3227
                self.right_arrow()
                self.state = 3228
                self.throwable_expression()
                self.state = 3229
                self.match(CSharpParser.SEMICOLON)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Destructor_definitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TILDE(self):
            return self.getToken(CSharpParser.TILDE, 0)

        def identifier(self):
            return self.getTypedRuleContext(CSharpParser.IdentifierContext,0)


        def OPEN_PARENS(self):
            return self.getToken(CSharpParser.OPEN_PARENS, 0)

        def CLOSE_PARENS(self):
            return self.getToken(CSharpParser.CLOSE_PARENS, 0)

        def body(self):
            return self.getTypedRuleContext(CSharpParser.BodyContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_destructor_definition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDestructor_definition" ):
                listener.enterDestructor_definition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDestructor_definition" ):
                listener.exitDestructor_definition(self)




    def destructor_definition(self):

        localctx = CSharpParser.Destructor_definitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 544, self.RULE_destructor_definition)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3233
            self.match(CSharpParser.TILDE)
            self.state = 3234
            self.identifier()
            self.state = 3235
            self.match(CSharpParser.OPEN_PARENS)
            self.state = 3236
            self.match(CSharpParser.CLOSE_PARENS)
            self.state = 3237
            self.body()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Constructor_declarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(CSharpParser.IdentifierContext,0)


        def OPEN_PARENS(self):
            return self.getToken(CSharpParser.OPEN_PARENS, 0)

        def CLOSE_PARENS(self):
            return self.getToken(CSharpParser.CLOSE_PARENS, 0)

        def body(self):
            return self.getTypedRuleContext(CSharpParser.BodyContext,0)


        def formal_parameter_list(self):
            return self.getTypedRuleContext(CSharpParser.Formal_parameter_listContext,0)


        def constructor_initializer(self):
            return self.getTypedRuleContext(CSharpParser.Constructor_initializerContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_constructor_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstructor_declaration" ):
                listener.enterConstructor_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstructor_declaration" ):
                listener.exitConstructor_declaration(self)




    def constructor_declaration(self):

        localctx = CSharpParser.Constructor_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 546, self.RULE_constructor_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3239
            self.identifier()
            self.state = 3240
            self.match(CSharpParser.OPEN_PARENS)
            self.state = 3242
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 5065494716463428608) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 780627024034358811) != 0) or _la==137 or _la==139:
                self.state = 3241
                self.formal_parameter_list()


            self.state = 3244
            self.match(CSharpParser.CLOSE_PARENS)
            self.state = 3246
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==143:
                self.state = 3245
                self.constructor_initializer()


            self.state = 3248
            self.body()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Method_declarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def method_modifiers(self):
            return self.getTypedRuleContext(CSharpParser.Method_modifiersContext,0)


        def return_type(self):
            return self.getTypedRuleContext(CSharpParser.Return_typeContext,0)


        def method_header(self):
            return self.getTypedRuleContext(CSharpParser.Method_headerContext,0)


        def method_body(self):
            return self.getTypedRuleContext(CSharpParser.Method_bodyContext,0)


        def attributes(self):
            return self.getTypedRuleContext(CSharpParser.AttributesContext,0)


        def PUBLIC(self):
            return self.getToken(CSharpParser.PUBLIC, 0)

        def ref_method_modifiers(self):
            return self.getTypedRuleContext(CSharpParser.Ref_method_modifiersContext,0)


        def ref_kind(self):
            return self.getTypedRuleContext(CSharpParser.Ref_kindContext,0)


        def ref_return_type(self):
            return self.getTypedRuleContext(CSharpParser.Ref_return_typeContext,0)


        def ref_method_body(self):
            return self.getTypedRuleContext(CSharpParser.Ref_method_bodyContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_method_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMethod_declaration" ):
                listener.enterMethod_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMethod_declaration" ):
                listener.exitMethod_declaration(self)




    def method_declaration(self):

        localctx = CSharpParser.Method_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 548, self.RULE_method_declaration)
        self._la = 0 # Token type
        try:
            self.state = 3270
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,402,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3251
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==137:
                    self.state = 3250
                    self.attributes()


                self.state = 3253
                self.method_modifiers()
                self.state = 3255
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==84:
                    self.state = 3254
                    self.match(CSharpParser.PUBLIC)


                self.state = 3257
                self.return_type()
                self.state = 3258
                self.method_header()
                self.state = 3259
                self.method_body()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3262
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==137:
                    self.state = 3261
                    self.attributes()


                self.state = 3264
                self.ref_method_modifiers()
                self.state = 3265
                self.ref_kind()
                self.state = 3266
                self.ref_return_type()
                self.state = 3267
                self.method_header()
                self.state = 3268
                self.ref_method_body()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Method_headerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def method_member_name(self):
            return self.getTypedRuleContext(CSharpParser.Method_member_nameContext,0)


        def OPEN_PARENS(self):
            return self.getToken(CSharpParser.OPEN_PARENS, 0)

        def CLOSE_PARENS(self):
            return self.getToken(CSharpParser.CLOSE_PARENS, 0)

        def formal_parameter_list(self):
            return self.getTypedRuleContext(CSharpParser.Formal_parameter_listContext,0)


        def type_parameter_list(self):
            return self.getTypedRuleContext(CSharpParser.Type_parameter_listContext,0)


        def type_parameter_constraints_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Type_parameter_constraints_clauseContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Type_parameter_constraints_clauseContext,i)


        def getRuleIndex(self):
            return CSharpParser.RULE_method_header

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMethod_header" ):
                listener.enterMethod_header(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMethod_header" ):
                listener.exitMethod_header(self)




    def method_header(self):

        localctx = CSharpParser.Method_headerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 550, self.RULE_method_header)
        self._la = 0 # Token type
        try:
            self.state = 3292
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,406,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3272
                self.method_member_name()
                self.state = 3273
                self.match(CSharpParser.OPEN_PARENS)
                self.state = 3275
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 5065494716463428608) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 780627024034358811) != 0) or _la==137 or _la==139:
                    self.state = 3274
                    self.formal_parameter_list()


                self.state = 3277
                self.match(CSharpParser.CLOSE_PARENS)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3279
                self.method_member_name()
                self.state = 3280
                self.type_parameter_list()
                self.state = 3281
                self.match(CSharpParser.OPEN_PARENS)
                self.state = 3283
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 5065494716463428608) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 780627024034358811) != 0) or _la==137 or _la==139:
                    self.state = 3282
                    self.formal_parameter_list()


                self.state = 3285
                self.match(CSharpParser.CLOSE_PARENS)
                self.state = 3289
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==119:
                    self.state = 3286
                    self.type_parameter_constraints_clause()
                    self.state = 3291
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Ref_kindContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REF(self):
            return self.getToken(CSharpParser.REF, 0)

        def READONLY(self):
            return self.getToken(CSharpParser.READONLY, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_ref_kind

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRef_kind" ):
                listener.enterRef_kind(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRef_kind" ):
                listener.exitRef_kind(self)




    def ref_kind(self):

        localctx = CSharpParser.Ref_kindContext(self, self._ctx, self.state)
        self.enterRule(localctx, 552, self.RULE_ref_kind)
        try:
            self.state = 3297
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,407,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3294
                self.match(CSharpParser.REF)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3295
                self.match(CSharpParser.REF)
                self.state = 3296
                self.match(CSharpParser.READONLY)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Ref_method_modifiersContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ref_method_modifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Ref_method_modifierContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Ref_method_modifierContext,i)


        def getRuleIndex(self):
            return CSharpParser.RULE_ref_method_modifiers

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRef_method_modifiers" ):
                listener.enterRef_method_modifiers(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRef_method_modifiers" ):
                listener.exitRef_method_modifiers(self)




    def ref_method_modifiers(self):

        localctx = CSharpParser.Ref_method_modifiersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 554, self.RULE_ref_method_modifiers)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3302
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & 1152925902653358592) != 0) or ((((_la - 70)) & ~0x3f) == 0 and ((1 << (_la - 70)) & 37383531688449) != 0):
                self.state = 3299
                self.ref_method_modifier()
                self.state = 3304
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Ref_return_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def type_(self):
            return self.getTypedRuleContext(CSharpParser.Type_Context,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_ref_return_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRef_return_type" ):
                listener.enterRef_return_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRef_return_type" ):
                listener.exitRef_return_type(self)




    def ref_return_type(self):

        localctx = CSharpParser.Ref_return_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 556, self.RULE_ref_return_type)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3305
            self.type_()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Method_modifiersContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def method_modifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Method_modifierContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Method_modifierContext,i)


        def PARTIAL(self):
            return self.getToken(CSharpParser.PARTIAL, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_method_modifiers

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMethod_modifiers" ):
                listener.enterMethod_modifiers(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMethod_modifiers" ):
                listener.exitMethod_modifiers(self)




    def method_modifiers(self):

        localctx = CSharpParser.Method_modifiersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 558, self.RULE_method_modifiers)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3310
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,409,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 3307
                    self.method_modifier() 
                self.state = 3312
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,409,self._ctx)

            self.state = 3314
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,410,self._ctx)
            if la_ == 1:
                self.state = 3313
                self.match(CSharpParser.PARTIAL)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Method_modifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ref_method_modifier(self):
            return self.getTypedRuleContext(CSharpParser.Ref_method_modifierContext,0)


        def ASYNC(self):
            return self.getToken(CSharpParser.ASYNC, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_method_modifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMethod_modifier" ):
                listener.enterMethod_modifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMethod_modifier" ):
                listener.exitMethod_modifier(self)




    def method_modifier(self):

        localctx = CSharpParser.Method_modifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 560, self.RULE_method_modifier)
        try:
            self.state = 3318
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [9, 42, 60, 70, 79, 82, 83, 84, 91, 97, 111, 115]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3316
                self.ref_method_modifier()
                pass
            elif token in [16]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3317
                self.match(CSharpParser.ASYNC)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Ref_method_bodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def block(self):
            return self.getTypedRuleContext(CSharpParser.BlockContext,0)


        def right_arrow(self):
            return self.getTypedRuleContext(CSharpParser.Right_arrowContext,0)


        def REF(self):
            return self.getToken(CSharpParser.REF, 0)

        def variable_reference(self):
            return self.getTypedRuleContext(CSharpParser.Variable_referenceContext,0)


        def SEMICOLON(self):
            return self.getToken(CSharpParser.SEMICOLON, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_ref_method_body

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRef_method_body" ):
                listener.enterRef_method_body(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRef_method_body" ):
                listener.exitRef_method_body(self)




    def ref_method_body(self):

        localctx = CSharpParser.Ref_method_bodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 562, self.RULE_ref_method_body)
        try:
            self.state = 3327
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [135]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3320
                self.block()
                pass
            elif token in [155]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3321
                self.right_arrow()
                self.state = 3322
                self.match(CSharpParser.REF)
                self.state = 3323
                self.variable_reference()
                self.state = 3324
                self.match(CSharpParser.SEMICOLON)
                pass
            elif token in [144]:
                self.enterOuterAlt(localctx, 3)
                self.state = 3326
                self.match(CSharpParser.SEMICOLON)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Ref_method_modifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NEW(self):
            return self.getToken(CSharpParser.NEW, 0)

        def PUBLIC(self):
            return self.getToken(CSharpParser.PUBLIC, 0)

        def PROTECTED(self):
            return self.getToken(CSharpParser.PROTECTED, 0)

        def INTERNAL(self):
            return self.getToken(CSharpParser.INTERNAL, 0)

        def PRIVATE(self):
            return self.getToken(CSharpParser.PRIVATE, 0)

        def STATIC(self):
            return self.getToken(CSharpParser.STATIC, 0)

        def VIRTUAL(self):
            return self.getToken(CSharpParser.VIRTUAL, 0)

        def SEALED(self):
            return self.getToken(CSharpParser.SEALED, 0)

        def OVERRIDE(self):
            return self.getToken(CSharpParser.OVERRIDE, 0)

        def ABSTRACT(self):
            return self.getToken(CSharpParser.ABSTRACT, 0)

        def EXTERN(self):
            return self.getToken(CSharpParser.EXTERN, 0)

        def UNSAFE(self):
            return self.getToken(CSharpParser.UNSAFE, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_ref_method_modifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRef_method_modifier" ):
                listener.enterRef_method_modifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRef_method_modifier" ):
                listener.exitRef_method_modifier(self)




    def ref_method_modifier(self):

        localctx = CSharpParser.Ref_method_modifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 564, self.RULE_ref_method_modifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3329
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 1152925902653358592) != 0) or ((((_la - 70)) & ~0x3f) == 0 and ((1 << (_la - 70)) & 37383531688449) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Method_member_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(CSharpParser.IdentifierContext,i)


        def DOUBLE_COLON(self):
            return self.getToken(CSharpParser.DOUBLE_COLON, 0)

        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.DOT)
            else:
                return self.getToken(CSharpParser.DOT, i)

        def type_argument_list(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Type_argument_listContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Type_argument_listContext,i)


        def getRuleIndex(self):
            return CSharpParser.RULE_method_member_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMethod_member_name" ):
                listener.enterMethod_member_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMethod_member_name" ):
                listener.exitMethod_member_name(self)




    def method_member_name(self):

        localctx = CSharpParser.Method_member_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 566, self.RULE_method_member_name)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3336
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,413,self._ctx)
            if la_ == 1:
                self.state = 3331
                self.identifier()
                pass

            elif la_ == 2:
                self.state = 3332
                self.identifier()
                self.state = 3333
                self.match(CSharpParser.DOUBLE_COLON)
                self.state = 3334
                self.identifier()
                pass


            self.state = 3345
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,415,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 3339
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==156:
                        self.state = 3338
                        self.type_argument_list()


                    self.state = 3341
                    self.match(CSharpParser.DOT)
                    self.state = 3342
                    self.identifier() 
                self.state = 3347
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,415,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Operator_declarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPERATOR(self):
            return self.getToken(CSharpParser.OPERATOR, 0)

        def overloadable_operator(self):
            return self.getTypedRuleContext(CSharpParser.Overloadable_operatorContext,0)


        def OPEN_PARENS(self):
            return self.getToken(CSharpParser.OPEN_PARENS, 0)

        def arg_declaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Arg_declarationContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Arg_declarationContext,i)


        def CLOSE_PARENS(self):
            return self.getToken(CSharpParser.CLOSE_PARENS, 0)

        def body(self):
            return self.getTypedRuleContext(CSharpParser.BodyContext,0)


        def right_arrow(self):
            return self.getTypedRuleContext(CSharpParser.Right_arrowContext,0)


        def throwable_expression(self):
            return self.getTypedRuleContext(CSharpParser.Throwable_expressionContext,0)


        def SEMICOLON(self):
            return self.getToken(CSharpParser.SEMICOLON, 0)

        def IN(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.IN)
            else:
                return self.getToken(CSharpParser.IN, i)

        def COMMA(self):
            return self.getToken(CSharpParser.COMMA, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_operator_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOperator_declaration" ):
                listener.enterOperator_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOperator_declaration" ):
                listener.exitOperator_declaration(self)




    def operator_declaration(self):

        localctx = CSharpParser.Operator_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 568, self.RULE_operator_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3348
            self.match(CSharpParser.OPERATOR)
            self.state = 3349
            self.overloadable_operator()
            self.state = 3350
            self.match(CSharpParser.OPEN_PARENS)
            self.state = 3352
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==57:
                self.state = 3351
                self.match(CSharpParser.IN)


            self.state = 3354
            self.arg_declaration()
            self.state = 3360
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==142:
                self.state = 3355
                self.match(CSharpParser.COMMA)
                self.state = 3357
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==57:
                    self.state = 3356
                    self.match(CSharpParser.IN)


                self.state = 3359
                self.arg_declaration()


            self.state = 3362
            self.match(CSharpParser.CLOSE_PARENS)
            self.state = 3368
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,419,self._ctx)
            if la_ == 1:
                self.state = 3363
                self.body()
                pass

            elif la_ == 2:
                self.state = 3364
                self.right_arrow()
                self.state = 3365
                self.throwable_expression()
                self.state = 3366
                self.match(CSharpParser.SEMICOLON)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Arg_declarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def type_(self):
            return self.getTypedRuleContext(CSharpParser.Type_Context,0)


        def identifier(self):
            return self.getTypedRuleContext(CSharpParser.IdentifierContext,0)


        def ASSIGNMENT(self):
            return self.getToken(CSharpParser.ASSIGNMENT, 0)

        def expression(self):
            return self.getTypedRuleContext(CSharpParser.ExpressionContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_arg_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArg_declaration" ):
                listener.enterArg_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArg_declaration" ):
                listener.exitArg_declaration(self)




    def arg_declaration(self):

        localctx = CSharpParser.Arg_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 570, self.RULE_arg_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3370
            self.type_()
            self.state = 3371
            self.identifier()
            self.state = 3374
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==155:
                self.state = 3372
                self.match(CSharpParser.ASSIGNMENT)
                self.state = 3373
                self.expression()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Method_invocationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PARENS(self):
            return self.getToken(CSharpParser.OPEN_PARENS, 0)

        def CLOSE_PARENS(self):
            return self.getToken(CSharpParser.CLOSE_PARENS, 0)

        def primary_expression(self):
            return self.getTypedRuleContext(CSharpParser.Primary_expressionContext,0)


        def argument_list(self):
            return self.getTypedRuleContext(CSharpParser.Argument_listContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_method_invocation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMethod_invocation" ):
                listener.enterMethod_invocation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMethod_invocation" ):
                listener.exitMethod_invocation(self)




    def method_invocation(self):

        localctx = CSharpParser.Method_invocationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 572, self.RULE_method_invocation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3377
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,421,self._ctx)
            if la_ == 1:
                self.state = 3376
                self.primary_expression()


            self.state = 3379
            self.match(CSharpParser.OPEN_PARENS)
            self.state = 3381
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 5065503514771305472) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -372256532389009573) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & 9007225147099775) != 0):
                self.state = 3380
                self.argument_list()


            self.state = 3383
            self.match(CSharpParser.CLOSE_PARENS)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Object_creation_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PARENS(self):
            return self.getToken(CSharpParser.OPEN_PARENS, 0)

        def CLOSE_PARENS(self):
            return self.getToken(CSharpParser.CLOSE_PARENS, 0)

        def argument_list(self):
            return self.getTypedRuleContext(CSharpParser.Argument_listContext,0)


        def object_or_collection_initializer(self):
            return self.getTypedRuleContext(CSharpParser.Object_or_collection_initializerContext,0)


        def target_typed_new(self):
            return self.getTypedRuleContext(CSharpParser.Target_typed_newContext,0)


        def OPEN_BRACKET(self):
            return self.getToken(CSharpParser.OPEN_BRACKET, 0)

        def expression_list(self):
            return self.getTypedRuleContext(CSharpParser.Expression_listContext,0)


        def CLOSE_BRACKET(self):
            return self.getToken(CSharpParser.CLOSE_BRACKET, 0)

        def rank_specifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Rank_specifierContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Rank_specifierContext,i)


        def array_initializer(self):
            return self.getTypedRuleContext(CSharpParser.Array_initializerContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_object_creation_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterObject_creation_expression" ):
                listener.enterObject_creation_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitObject_creation_expression" ):
                listener.exitObject_creation_expression(self)




    def object_creation_expression(self):

        localctx = CSharpParser.Object_creation_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 574, self.RULE_object_creation_expression)
        self._la = 0 # Token type
        try:
            self.state = 3407
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,427,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3385
                self.match(CSharpParser.OPEN_PARENS)
                self.state = 3387
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 5065503514771305472) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -372256532389009573) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & 9007225147099775) != 0):
                    self.state = 3386
                    self.argument_list()


                self.state = 3389
                self.match(CSharpParser.CLOSE_PARENS)
                self.state = 3391
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 3390
                    self.object_or_collection_initializer()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3393
                self.object_or_collection_initializer()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 3394
                self.target_typed_new()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 3395
                self.match(CSharpParser.OPEN_BRACKET)
                self.state = 3396
                self.expression_list()
                self.state = 3397
                self.match(CSharpParser.CLOSE_BRACKET)
                self.state = 3401
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,425,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 3398
                        self.rank_specifier() 
                    self.state = 3403
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,425,self._ctx)

                self.state = 3405
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 3404
                    self.array_initializer()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Target_typed_newContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PARENS(self):
            return self.getToken(CSharpParser.OPEN_PARENS, 0)

        def CLOSE_PARENS(self):
            return self.getToken(CSharpParser.CLOSE_PARENS, 0)

        def argument_list(self):
            return self.getTypedRuleContext(CSharpParser.Argument_listContext,0)


        def object_or_collection_initializer(self):
            return self.getTypedRuleContext(CSharpParser.Object_or_collection_initializerContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_target_typed_new

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTarget_typed_new" ):
                listener.enterTarget_typed_new(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTarget_typed_new" ):
                listener.exitTarget_typed_new(self)




    def target_typed_new(self):

        localctx = CSharpParser.Target_typed_newContext(self, self._ctx, self.state)
        self.enterRule(localctx, 576, self.RULE_target_typed_new)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3409
            self.match(CSharpParser.OPEN_PARENS)
            self.state = 3411
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 5065503514771305472) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -372256532389009573) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & 9007225147099775) != 0):
                self.state = 3410
                self.argument_list()


            self.state = 3413
            self.match(CSharpParser.CLOSE_PARENS)
            self.state = 3415
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 3414
                self.object_or_collection_initializer()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self):
            return self.getToken(CSharpParser.IDENTIFIER, 0)

        def ADD(self):
            return self.getToken(CSharpParser.ADD, 0)

        def ALIAS(self):
            return self.getToken(CSharpParser.ALIAS, 0)

        def ARGLIST(self):
            return self.getToken(CSharpParser.ARGLIST, 0)

        def ASCENDING(self):
            return self.getToken(CSharpParser.ASCENDING, 0)

        def ASYNC(self):
            return self.getToken(CSharpParser.ASYNC, 0)

        def AWAIT(self):
            return self.getToken(CSharpParser.AWAIT, 0)

        def BY(self):
            return self.getToken(CSharpParser.BY, 0)

        def DESCENDING(self):
            return self.getToken(CSharpParser.DESCENDING, 0)

        def DYNAMIC(self):
            return self.getToken(CSharpParser.DYNAMIC, 0)

        def EQUALS(self):
            return self.getToken(CSharpParser.EQUALS, 0)

        def FROM(self):
            return self.getToken(CSharpParser.FROM, 0)

        def GET(self):
            return self.getToken(CSharpParser.GET, 0)

        def GROUP(self):
            return self.getToken(CSharpParser.GROUP, 0)

        def INTO(self):
            return self.getToken(CSharpParser.INTO, 0)

        def JOIN(self):
            return self.getToken(CSharpParser.JOIN, 0)

        def LET(self):
            return self.getToken(CSharpParser.LET, 0)

        def NAMEOF(self):
            return self.getToken(CSharpParser.NAMEOF, 0)

        def ON(self):
            return self.getToken(CSharpParser.ON, 0)

        def ORDERBY(self):
            return self.getToken(CSharpParser.ORDERBY, 0)

        def PARTIAL(self):
            return self.getToken(CSharpParser.PARTIAL, 0)

        def REMOVE(self):
            return self.getToken(CSharpParser.REMOVE, 0)

        def SELECT(self):
            return self.getToken(CSharpParser.SELECT, 0)

        def SET(self):
            return self.getToken(CSharpParser.SET, 0)

        def UNMANAGED(self):
            return self.getToken(CSharpParser.UNMANAGED, 0)

        def VAR(self):
            return self.getToken(CSharpParser.VAR, 0)

        def WHEN(self):
            return self.getToken(CSharpParser.WHEN, 0)

        def WHERE(self):
            return self.getToken(CSharpParser.WHERE, 0)

        def YIELD(self):
            return self.getToken(CSharpParser.YIELD, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_identifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentifier" ):
                listener.enterIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentifier" ):
                listener.exitIdentifier(self)




    def identifier(self):

        localctx = CSharpParser.IdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 578, self.RULE_identifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3417
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 4633078743724962816) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 775815405380969491) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[243] = self.right_arrow_sempred
        self._predicates[244] = self.right_shift_sempred
        self._predicates[245] = self.right_shift_assignment_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def right_arrow_sempred(self, localctx:Right_arrowContext, predIndex:int):
            if predIndex == 0:
                return (0 if localctx.first is None else localctx.first.tokenIndex) + 1 == (0 if localctx.second is None else localctx.second.tokenIndex)
         

    def right_shift_sempred(self, localctx:Right_shiftContext, predIndex:int):
            if predIndex == 1:
                return (0 if localctx.first is None else localctx.first.tokenIndex) + 1 == (0 if localctx.second is None else localctx.second.tokenIndex)
         

    def right_shift_assignment_sempred(self, localctx:Right_shift_assignmentContext, predIndex:int):
            if predIndex == 2:
                return (0 if localctx.first is None else localctx.first.tokenIndex) + 1 == (0 if localctx.second is None else localctx.second.tokenIndex)
         





# Generated from CSharpParser.g4 by ANTLR 4.13.2
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO

if "." in __name__:
    from .CSharpParserBase import CSharpParserBase
else:
    from CSharpParserBase import CSharpParserBase

def serializedATN():
    return [
        4,1,203,3197,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,
        7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,
        13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
        20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,
        26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,
        33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,
        39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,
        46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,
        52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,2,
        59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,65,7,
        65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,2,71,7,71,2,
        72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,78,7,
        78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,2,
        85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,
        91,2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,
        98,7,98,2,99,7,99,2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,
        2,104,7,104,2,105,7,105,2,106,7,106,2,107,7,107,2,108,7,108,2,109,
        7,109,2,110,7,110,2,111,7,111,2,112,7,112,2,113,7,113,2,114,7,114,
        2,115,7,115,2,116,7,116,2,117,7,117,2,118,7,118,2,119,7,119,2,120,
        7,120,2,121,7,121,2,122,7,122,2,123,7,123,2,124,7,124,2,125,7,125,
        2,126,7,126,2,127,7,127,2,128,7,128,2,129,7,129,2,130,7,130,2,131,
        7,131,2,132,7,132,2,133,7,133,2,134,7,134,2,135,7,135,2,136,7,136,
        2,137,7,137,2,138,7,138,2,139,7,139,2,140,7,140,2,141,7,141,2,142,
        7,142,2,143,7,143,2,144,7,144,2,145,7,145,2,146,7,146,2,147,7,147,
        2,148,7,148,2,149,7,149,2,150,7,150,2,151,7,151,2,152,7,152,2,153,
        7,153,2,154,7,154,2,155,7,155,2,156,7,156,2,157,7,157,2,158,7,158,
        2,159,7,159,2,160,7,160,2,161,7,161,2,162,7,162,2,163,7,163,2,164,
        7,164,2,165,7,165,2,166,7,166,2,167,7,167,2,168,7,168,2,169,7,169,
        2,170,7,170,2,171,7,171,2,172,7,172,2,173,7,173,2,174,7,174,2,175,
        7,175,2,176,7,176,2,177,7,177,2,178,7,178,2,179,7,179,2,180,7,180,
        2,181,7,181,2,182,7,182,2,183,7,183,2,184,7,184,2,185,7,185,2,186,
        7,186,2,187,7,187,2,188,7,188,2,189,7,189,2,190,7,190,2,191,7,191,
        2,192,7,192,2,193,7,193,2,194,7,194,2,195,7,195,2,196,7,196,2,197,
        7,197,2,198,7,198,2,199,7,199,2,200,7,200,2,201,7,201,2,202,7,202,
        2,203,7,203,2,204,7,204,2,205,7,205,2,206,7,206,2,207,7,207,2,208,
        7,208,2,209,7,209,2,210,7,210,2,211,7,211,2,212,7,212,2,213,7,213,
        2,214,7,214,2,215,7,215,2,216,7,216,2,217,7,217,2,218,7,218,2,219,
        7,219,2,220,7,220,2,221,7,221,2,222,7,222,2,223,7,223,2,224,7,224,
        2,225,7,225,2,226,7,226,2,227,7,227,2,228,7,228,2,229,7,229,2,230,
        7,230,2,231,7,231,2,232,7,232,2,233,7,233,2,234,7,234,2,235,7,235,
        2,236,7,236,2,237,7,237,2,238,7,238,2,239,7,239,2,240,7,240,2,241,
        7,241,2,242,7,242,2,243,7,243,2,244,7,244,2,245,7,245,2,246,7,246,
        2,247,7,247,2,248,7,248,2,249,7,249,2,250,7,250,2,251,7,251,2,252,
        7,252,2,253,7,253,2,254,7,254,2,255,7,255,2,256,7,256,2,257,7,257,
        2,258,7,258,2,259,7,259,2,260,7,260,2,261,7,261,2,262,7,262,2,263,
        7,263,2,264,7,264,2,265,7,265,2,266,7,266,2,267,7,267,2,268,7,268,
        2,269,7,269,2,270,7,270,2,271,7,271,2,272,7,272,2,273,7,273,2,274,
        7,274,2,275,7,275,2,276,7,276,1,0,3,0,556,8,0,1,0,5,0,559,8,0,10,
        0,12,0,562,9,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,3,1,571,8,1,1,2,1,2,4,
        2,575,8,2,11,2,12,2,576,1,3,1,3,3,3,581,8,3,1,3,3,3,584,8,3,1,3,
        1,3,1,3,3,3,589,8,3,5,3,591,8,3,10,3,12,3,594,9,3,1,4,1,4,1,4,1,
        4,5,4,600,8,4,10,4,12,4,603,9,4,1,4,3,4,606,8,4,1,5,1,5,1,5,1,5,
        1,5,1,5,1,6,1,6,1,6,5,6,617,8,6,10,6,12,6,620,9,6,1,7,1,7,1,7,1,
        7,1,7,3,7,627,8,7,1,8,1,8,1,8,1,8,4,8,633,8,8,11,8,12,8,634,1,8,
        1,8,1,8,3,8,640,8,8,1,9,3,9,643,8,9,1,9,1,9,1,10,1,10,1,10,1,10,
        4,10,651,8,10,11,10,12,10,652,1,10,1,10,1,11,1,11,3,11,659,8,11,
        3,11,661,8,11,1,12,1,12,3,12,665,8,12,1,13,1,13,3,13,669,8,13,1,
        14,1,14,1,14,3,14,674,8,14,1,15,1,15,1,16,1,16,1,17,1,17,3,17,682,
        8,17,1,18,1,18,1,18,1,18,1,18,1,19,1,19,1,20,1,20,1,21,1,21,1,21,
        1,21,3,21,697,8,21,1,22,1,22,1,22,1,22,5,22,703,8,22,10,22,12,22,
        706,9,22,1,22,1,22,1,23,1,23,1,23,5,23,713,8,23,10,23,12,23,716,
        9,23,1,24,3,24,719,8,24,1,24,3,24,722,8,24,1,24,1,24,1,24,3,24,727,
        8,24,1,24,3,24,730,8,24,1,25,1,25,1,25,1,26,1,26,1,26,1,26,3,26,
        739,8,26,1,27,1,27,1,27,3,27,744,8,27,1,28,1,28,1,28,1,28,1,28,1,
        28,1,28,1,28,3,28,754,8,28,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,
        29,1,29,1,29,1,29,3,29,767,8,29,1,30,1,30,1,30,1,30,1,30,1,30,1,
        30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,3,30,784,8,30,1,31,1,
        31,1,31,1,31,3,31,790,8,31,3,31,792,8,31,1,32,1,32,1,32,5,32,797,
        8,32,10,32,12,32,800,9,32,1,33,1,33,1,33,5,33,805,8,33,10,33,12,
        33,808,9,33,1,34,1,34,1,34,5,34,813,8,34,10,34,12,34,816,9,34,1,
        35,1,35,1,35,5,35,821,8,35,10,35,12,35,824,9,35,1,36,1,36,1,36,5,
        36,829,8,36,10,36,12,36,832,9,36,1,37,1,37,1,37,5,37,837,8,37,10,
        37,12,37,840,9,37,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,5,
        38,851,8,38,10,38,12,38,854,9,38,1,39,1,39,1,39,3,39,859,8,39,1,
        39,5,39,862,8,39,10,39,12,39,865,9,39,1,40,1,40,1,40,5,40,870,8,
        40,10,40,12,40,873,9,40,1,41,1,41,1,41,5,41,878,8,41,10,41,12,41,
        881,9,41,1,42,1,42,1,42,1,42,1,42,3,42,888,8,42,3,42,890,8,42,1,
        42,3,42,893,8,42,1,43,1,43,1,43,5,43,898,8,43,10,43,12,43,901,9,
        43,1,44,1,44,3,44,905,8,44,1,44,1,44,1,44,1,45,1,45,3,45,912,8,45,
        1,45,1,45,3,45,916,8,45,3,45,918,8,45,1,46,1,46,1,46,1,46,1,46,1,
        46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,
        46,1,46,1,46,1,46,3,46,942,8,46,1,47,1,47,1,47,1,47,1,47,1,48,1,
        48,3,48,951,8,48,1,48,5,48,954,8,48,10,48,12,48,957,9,48,1,48,3,
        48,960,8,48,1,48,1,48,1,48,1,48,1,48,1,48,3,48,968,8,48,1,48,3,48,
        971,8,48,1,48,5,48,974,8,48,10,48,12,48,977,9,48,1,48,3,48,980,8,
        48,5,48,982,8,48,10,48,12,48,985,9,48,1,48,1,48,1,48,3,48,990,8,
        48,1,49,1,49,1,49,3,49,995,8,49,1,49,1,49,1,49,1,49,1,49,1,49,1,
        49,1,49,1,49,1,49,1,49,1,49,3,49,1009,8,49,1,49,1,49,1,49,1,49,3,
        49,1015,8,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,5,49,1025,8,
        49,10,49,12,49,1028,9,49,1,49,3,49,1031,8,49,1,49,4,49,1034,8,49,
        11,49,12,49,1035,1,49,1,49,3,49,1040,8,49,1,49,1,49,1,49,1,49,3,
        49,1046,8,49,1,49,1,49,1,49,1,49,1,49,1,49,4,49,1054,8,49,11,49,
        12,49,1055,1,49,1,49,1,49,1,49,1,49,1,49,1,49,3,49,1065,8,49,1,49,
        1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,
        1,49,1,49,3,49,1083,8,49,1,49,3,49,1086,8,49,1,49,1,49,1,49,3,49,
        1091,8,49,1,49,3,49,1094,8,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,
        1,49,1,49,1,49,1,49,5,49,1107,8,49,10,49,12,49,1110,9,49,1,49,1,
        49,1,49,3,49,1115,8,49,1,50,1,50,3,50,1119,8,50,1,51,1,51,1,51,1,
        52,3,52,1125,8,52,1,52,1,52,1,52,3,52,1130,8,52,1,53,3,53,1133,8,
        53,1,53,1,53,1,53,1,53,5,53,1139,8,53,10,53,12,53,1142,9,53,1,53,
        1,53,1,54,1,54,1,54,3,54,1149,8,54,1,54,1,54,1,55,1,55,1,56,1,56,
        1,56,5,56,1158,8,56,10,56,12,56,1161,9,56,1,57,1,57,3,57,1165,8,
        57,1,58,1,58,1,58,3,58,1170,8,58,3,58,1172,8,58,1,58,1,58,1,59,1,
        59,1,59,5,59,1179,8,59,10,59,12,59,1182,9,59,1,60,1,60,1,60,1,60,
        1,60,3,60,1189,8,60,1,60,1,60,1,60,1,61,1,61,1,61,3,61,1197,8,61,
        1,62,1,62,1,62,1,62,5,62,1203,8,62,10,62,12,62,1206,9,62,1,62,3,
        62,1209,8,62,1,62,1,62,1,63,1,63,1,63,1,63,1,63,1,63,3,63,1219,8,
        63,1,64,1,64,1,64,3,64,1224,8,64,3,64,1226,8,64,1,64,1,64,1,65,1,
        65,1,65,5,65,1233,8,65,10,65,12,65,1236,9,65,1,66,1,66,1,66,1,66,
        1,66,3,66,1243,8,66,1,67,1,67,3,67,1247,8,67,1,67,1,67,1,67,3,67,
        1252,8,67,3,67,1254,8,67,1,67,1,67,1,67,3,67,1259,8,67,5,67,1261,
        8,67,10,67,12,67,1264,9,67,1,68,1,68,5,68,1268,8,68,10,68,12,68,
        1271,9,68,1,68,1,68,1,69,1,69,1,69,5,69,1278,8,69,10,69,12,69,1281,
        9,69,1,69,3,69,1284,8,69,1,69,3,69,1287,8,69,1,69,3,69,1290,8,69,
        1,70,1,70,1,70,1,70,5,70,1296,8,70,10,70,12,70,1299,9,70,1,70,1,
        70,1,71,1,71,1,71,1,71,1,72,3,72,1308,8,72,1,72,3,72,1311,8,72,1,
        72,1,72,1,72,1,72,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,
        73,1,73,3,73,1328,8,73,1,74,1,74,1,74,5,74,1333,8,74,10,74,12,74,
        1336,9,74,1,75,3,75,1339,8,75,1,75,1,75,1,75,1,76,1,76,1,76,5,76,
        1347,8,76,10,76,12,76,1350,9,76,1,77,1,77,3,77,1354,8,77,1,78,1,
        78,1,78,1,79,1,79,3,79,1361,8,79,1,79,1,79,1,79,1,79,1,80,5,80,1368,
        8,80,10,80,12,80,1371,9,80,1,80,1,80,3,80,1375,8,80,1,81,1,81,1,
        81,1,81,1,81,3,81,1382,8,81,1,82,1,82,1,82,1,82,1,82,1,83,1,83,1,
        83,1,84,1,84,3,84,1394,8,84,1,84,1,84,1,84,1,84,1,84,1,84,1,84,1,
        84,1,84,3,84,1405,8,84,1,85,1,85,1,85,1,85,5,85,1411,8,85,10,85,
        12,85,1414,9,85,1,86,1,86,3,86,1418,8,86,1,87,1,87,1,87,1,87,1,87,
        1,87,1,87,3,87,1427,8,87,1,88,1,88,1,88,1,88,1,89,1,89,1,89,3,89,
        1436,8,89,1,90,1,90,1,90,1,90,1,90,1,90,1,90,3,90,1445,8,90,1,91,
        1,91,1,91,1,92,3,92,1451,8,92,1,92,1,92,1,92,3,92,1456,8,92,1,92,
        1,92,3,92,1460,8,92,1,92,1,92,3,92,1464,8,92,1,93,1,93,3,93,1468,
        8,93,1,93,1,93,3,93,1472,8,93,1,93,1,93,3,93,1476,8,93,1,94,1,94,
        1,94,1,94,1,94,3,94,1483,8,94,1,95,1,95,1,95,1,95,1,96,1,96,1,96,
        1,96,1,96,1,96,1,96,1,96,1,96,1,96,1,96,1,96,5,96,1501,8,96,10,96,
        12,96,1504,9,96,1,96,1,96,1,96,1,96,1,96,1,96,1,96,1,96,1,96,1,96,
        1,96,1,96,1,96,1,96,1,96,1,96,1,96,1,96,1,96,3,96,1525,8,96,1,96,
        1,96,3,96,1529,8,96,1,96,1,96,3,96,1533,8,96,1,96,1,96,1,96,3,96,
        1538,8,96,1,96,1,96,1,96,1,96,1,96,3,96,1545,8,96,1,96,1,96,1,96,
        1,96,1,96,1,96,1,96,1,96,1,96,1,96,1,96,1,96,1,96,1,96,3,96,1561,
        8,96,1,96,1,96,1,96,3,96,1566,8,96,1,96,1,96,1,96,3,96,1571,8,96,
        1,96,1,96,1,96,1,96,1,96,1,96,1,96,1,96,1,96,3,96,1582,8,96,1,97,
        1,97,1,98,1,98,1,98,1,98,1,98,1,98,1,98,1,98,1,98,1,98,1,98,1,98,
        1,98,1,98,3,98,1600,8,98,1,99,1,99,1,99,1,100,1,100,1,100,1,101,
        1,101,1,101,1,101,1,101,1,101,1,102,1,102,3,102,1616,8,102,1,103,
        1,103,1,103,1,103,1,103,1,103,1,103,1,103,3,103,1626,8,103,1,103,
        1,103,3,103,1630,8,103,1,103,1,103,3,103,1634,8,103,1,104,1,104,
        1,104,1,104,1,105,1,105,1,105,5,105,1643,8,105,10,105,12,105,1646,
        9,105,1,105,3,105,1649,8,105,1,106,1,106,1,107,1,107,1,107,1,107,
        1,107,1,107,1,108,1,108,1,108,1,108,1,108,1,108,1,108,1,108,3,108,
        1667,8,108,1,109,1,109,1,109,1,109,1,109,1,109,1,109,1,110,1,110,
        1,110,1,111,1,111,1,111,1,111,1,111,1,111,1,111,3,111,1686,8,111,
        1,111,1,111,3,111,1690,8,111,1,112,1,112,3,112,1694,8,112,1,112,
        1,112,1,113,1,113,1,113,1,113,3,113,1702,8,113,1,113,1,113,1,113,
        1,113,5,113,1708,8,113,10,113,12,113,1711,9,113,1,113,1,113,1,113,
        1,113,1,113,1,113,1,113,1,113,1,113,1,113,3,113,1723,8,113,1,114,
        1,114,1,114,1,114,1,114,1,115,1,115,1,115,1,115,1,115,1,115,1,115,
        1,115,1,115,1,115,1,115,1,116,1,116,3,116,1743,8,116,1,117,1,117,
        1,117,3,117,1748,8,117,1,117,3,117,1751,8,117,1,118,1,118,1,118,
        1,118,3,118,1757,8,118,1,119,1,119,1,119,1,119,1,120,4,120,1764,
        8,120,11,120,12,120,1765,1,120,1,120,1,121,1,121,1,121,3,121,1773,
        8,121,1,121,1,121,1,121,1,121,1,121,3,121,1780,8,121,1,121,1,121,
        1,121,1,121,3,121,1786,8,121,1,122,1,122,1,122,1,123,4,123,1792,
        8,123,11,123,12,123,1793,1,124,1,124,1,124,1,124,5,124,1800,8,124,
        10,124,12,124,1803,9,124,3,124,1805,8,124,1,125,1,125,1,125,5,125,
        1810,8,125,10,125,12,125,1813,9,125,1,126,1,126,5,126,1817,8,126,
        10,126,12,126,1820,9,126,1,126,3,126,1823,8,126,1,126,3,126,1826,
        8,126,1,127,1,127,1,127,1,127,3,127,1832,8,127,1,127,1,127,3,127,
        1836,8,127,1,127,1,127,1,128,1,128,3,128,1842,8,128,1,128,1,128,
        1,129,1,129,1,129,1,129,1,129,1,130,1,130,1,130,1,131,1,131,3,131,
        1856,8,131,1,132,1,132,1,132,1,132,3,132,1862,8,132,1,133,1,133,
        1,133,5,133,1867,8,133,10,133,12,133,1870,9,133,1,134,1,134,3,134,
        1874,8,134,1,134,3,134,1877,8,134,1,134,3,134,1880,8,134,1,134,1,
        134,3,134,1884,8,134,1,135,4,135,1887,8,135,11,135,12,135,1888,1,
        136,1,136,1,136,1,136,1,136,1,137,4,137,1897,8,137,11,137,12,137,
        1898,1,138,1,138,1,138,1,138,1,138,1,138,1,138,1,138,1,138,1,138,
        1,138,1,138,1,138,1,138,1,138,3,138,1916,8,138,1,139,4,139,1919,
        8,139,11,139,12,139,1920,1,140,1,140,1,140,1,140,3,140,1927,8,140,
        1,141,3,141,1930,8,141,1,141,3,141,1933,8,141,1,141,1,141,1,141,
        1,141,1,141,1,141,3,141,1941,8,141,1,142,1,142,3,142,1945,8,142,
        1,142,1,142,3,142,1949,8,142,1,142,3,142,1952,8,142,1,142,3,142,
        1955,8,142,1,142,1,142,3,142,1959,8,142,1,142,1,142,1,142,1,143,
        1,143,1,143,1,143,5,143,1968,8,143,10,143,12,143,1971,9,143,1,144,
        1,144,3,144,1975,8,144,1,144,1,144,3,144,1979,8,144,1,145,1,145,
        1,145,5,145,1984,8,145,10,145,12,145,1987,9,145,1,146,3,146,1990,
        8,146,1,146,1,146,1,146,1,147,1,147,1,147,1,147,3,147,1999,8,147,
        1,148,1,148,1,148,1,148,5,148,2005,8,148,10,148,12,148,2008,9,148,
        1,148,1,148,1,149,3,149,2013,8,149,1,149,1,149,1,150,1,150,1,150,
        1,150,5,150,2021,8,150,10,150,12,150,2024,9,150,1,151,1,151,1,151,
        5,151,2029,8,151,10,151,12,151,2032,9,151,1,152,4,152,2035,8,152,
        11,152,12,152,2036,1,153,1,153,1,153,1,153,1,153,1,154,1,154,1,154,
        1,154,3,154,2048,8,154,1,154,1,154,3,154,2052,8,154,3,154,2054,8,
        154,1,155,1,155,1,155,3,155,2059,8,155,1,155,1,155,3,155,2063,8,
        155,1,156,1,156,1,156,1,156,1,156,1,156,1,156,1,156,3,156,2073,8,
        156,1,157,1,157,1,157,1,157,1,157,1,157,1,157,1,157,3,157,2083,8,
        157,1,158,1,158,1,158,1,158,1,159,1,159,1,159,1,159,1,160,1,160,
        1,160,1,161,1,161,1,161,1,162,1,162,1,163,1,163,1,164,1,164,1,165,
        1,165,1,165,1,166,1,166,1,167,1,167,3,167,2112,8,167,1,167,3,167,
        2115,8,167,1,167,1,167,1,167,1,167,1,167,1,167,1,167,1,168,1,168,
        1,168,5,168,2127,8,168,10,168,12,168,2130,9,168,1,169,1,169,1,169,
        1,169,1,170,1,170,3,170,2138,8,170,1,170,1,170,1,171,4,171,2143,
        8,171,11,171,12,171,2144,1,172,3,172,2148,8,172,1,172,3,172,2151,
        8,172,1,172,1,172,3,172,2155,8,172,1,173,4,173,2158,8,173,11,173,
        12,173,2159,1,174,1,174,1,175,1,175,1,175,1,175,1,175,1,175,1,175,
        1,175,1,175,3,175,2173,8,175,1,175,1,175,1,175,1,175,1,175,1,175,
        1,175,1,175,3,175,2183,8,175,1,176,1,176,1,176,1,176,1,176,3,176,
        2190,8,176,1,176,1,176,1,176,1,176,1,176,1,176,1,176,1,176,1,176,
        1,176,3,176,2202,8,176,1,177,1,177,1,177,5,177,2207,8,177,10,177,
        12,177,2210,9,177,1,178,1,178,1,178,1,178,1,179,1,179,1,179,5,179,
        2219,8,179,10,179,12,179,2222,9,179,1,180,1,180,1,180,3,180,2227,
        8,180,1,181,1,181,3,181,2231,8,181,1,182,1,182,3,182,2235,8,182,
        1,183,1,183,1,184,1,184,1,184,1,184,1,184,1,184,3,184,2245,8,184,
        1,185,1,185,1,185,1,185,3,185,2251,8,185,3,185,2253,8,185,1,186,
        1,186,1,186,5,186,2258,8,186,10,186,12,186,2261,9,186,1,187,3,187,
        2264,8,187,1,187,3,187,2267,8,187,1,187,1,187,3,187,2271,8,187,1,
        188,1,188,1,188,1,188,1,188,1,188,1,188,1,188,3,188,2281,8,188,1,
        189,3,189,2284,8,189,1,189,1,189,1,189,1,189,1,190,3,190,2291,8,
        190,1,190,3,190,2294,8,190,1,190,1,190,1,190,3,190,2299,8,190,1,
        190,1,190,1,190,3,190,2304,8,190,1,190,1,190,1,190,3,190,2309,8,
        190,1,190,1,190,1,190,3,190,2314,8,190,3,190,2316,8,190,1,191,3,
        191,2319,8,191,1,191,1,191,1,191,1,192,3,192,2325,8,192,1,192,3,
        192,2328,8,192,1,192,1,192,1,192,1,193,3,193,2334,8,193,1,193,3,
        193,2337,8,193,1,193,1,193,1,193,1,194,1,194,1,194,1,194,1,194,1,
        194,1,194,1,194,1,194,1,194,1,194,1,194,3,194,2354,8,194,1,195,1,
        195,1,195,1,195,1,195,1,195,3,195,2362,8,195,1,196,3,196,2365,8,
        196,1,196,1,196,1,196,1,196,1,196,1,196,1,196,1,196,3,196,2375,8,
        196,1,197,3,197,2378,8,197,1,197,1,197,1,197,1,198,3,198,2384,8,
        198,1,198,1,198,1,198,1,199,1,199,1,199,1,199,1,199,1,199,1,199,
        1,199,1,199,1,199,1,199,1,199,1,199,1,199,1,199,1,199,1,199,1,199,
        1,199,1,199,1,199,1,199,3,199,2411,8,199,1,200,1,200,1,200,1,200,
        1,200,1,200,1,200,1,201,1,201,1,201,1,201,3,201,2424,8,201,1,201,
        1,201,1,202,1,202,1,202,1,202,1,202,1,202,3,202,2434,8,202,1,203,
        1,203,1,203,1,204,1,204,5,204,2441,8,204,10,204,12,204,2444,9,204,
        1,204,1,204,3,204,2448,8,204,1,205,3,205,2451,8,205,1,205,3,205,
        2454,8,205,1,205,1,205,1,205,1,205,4,205,2460,8,205,11,205,12,205,
        2461,1,205,1,205,3,205,2466,8,205,1,206,1,206,5,206,2470,8,206,10,
        206,12,206,2473,9,206,1,206,4,206,2476,8,206,11,206,12,206,2477,
        1,207,1,207,5,207,2482,8,207,10,207,12,207,2485,9,207,1,207,1,207,
        1,208,1,208,1,208,1,208,5,208,2493,8,208,10,208,12,208,2496,9,208,
        1,208,3,208,2499,8,208,3,208,2501,8,208,1,208,1,208,1,209,1,209,
        1,209,1,209,5,209,2509,8,209,10,209,12,209,2512,9,209,1,209,1,209,
        1,210,3,210,2517,8,210,1,210,3,210,2520,8,210,1,210,1,210,1,211,
        1,211,1,212,1,212,1,212,1,213,1,213,5,213,2531,8,213,10,213,12,213,
        2534,9,213,1,213,1,213,1,214,3,214,2539,8,214,1,214,3,214,2542,8,
        214,1,214,3,214,2545,8,214,1,214,1,214,1,214,1,214,1,214,3,214,2552,
        8,214,1,214,1,214,1,214,3,214,2557,8,214,1,214,1,214,3,214,2561,
        8,214,1,214,1,214,3,214,2565,8,214,1,214,1,214,1,214,1,214,1,214,
        1,214,1,214,1,214,1,214,1,214,1,214,1,214,1,214,1,214,1,214,3,214,
        2582,8,214,1,214,3,214,2585,8,214,1,214,1,214,1,214,3,214,2590,8,
        214,1,214,1,214,3,214,2594,8,214,1,214,1,214,3,214,2598,8,214,1,
        214,1,214,1,214,1,214,1,214,1,214,1,214,3,214,2607,8,214,1,215,3,
        215,2610,8,215,1,215,1,215,1,215,3,215,2615,8,215,1,215,1,215,3,
        215,2619,8,215,1,215,1,215,1,215,3,215,2624,8,215,1,215,1,215,3,
        215,2628,8,215,3,215,2630,8,215,1,216,1,216,1,216,1,217,1,217,1,
        217,1,217,5,217,2639,8,217,10,217,12,217,2642,9,217,1,217,3,217,
        2645,8,217,3,217,2647,8,217,1,217,1,217,1,218,3,218,2652,8,218,1,
        218,1,218,1,218,3,218,2657,8,218,1,219,1,219,1,219,1,219,1,219,3,
        219,2664,8,219,1,219,1,219,1,220,1,220,3,220,2670,8,220,1,221,4,
        221,2673,8,221,11,221,12,221,2674,1,222,1,222,1,222,1,222,3,222,
        2681,8,222,1,222,1,222,3,222,2685,8,222,1,222,1,222,1,222,1,222,
        1,222,1,222,1,222,1,222,1,222,1,222,5,222,2697,8,222,10,222,12,222,
        2700,9,222,3,222,2702,8,222,1,223,1,223,3,223,2706,8,223,1,224,1,
        224,1,224,5,224,2711,8,224,10,224,12,224,2714,9,224,1,225,1,225,
        1,225,1,225,1,225,5,225,2721,8,225,10,225,12,225,2724,9,225,3,225,
        2726,8,225,1,225,3,225,2729,8,225,1,226,1,226,1,226,3,226,2734,8,
        226,1,226,1,226,1,227,1,227,3,227,2740,8,227,1,227,1,227,5,227,2744,
        8,227,10,227,12,227,2747,9,227,1,227,1,227,1,227,1,227,3,227,2753,
        8,227,1,228,1,228,1,228,5,228,2758,8,228,10,228,12,228,2761,9,228,
        1,229,1,229,1,229,1,229,1,230,3,230,2768,8,230,1,230,1,230,3,230,
        2772,8,230,1,231,1,231,1,231,1,231,1,231,1,232,1,232,1,232,1,232,
        1,233,1,233,1,233,1,233,1,234,1,234,1,234,1,234,1,235,1,235,1,235,
        1,235,1,235,1,235,1,235,1,235,3,235,2799,8,235,1,236,1,236,1,237,
        1,237,1,237,1,237,3,237,2807,8,237,1,238,1,238,5,238,2811,8,238,
        10,238,12,238,2814,9,238,1,238,1,238,1,239,1,239,5,239,2820,8,239,
        10,239,12,239,2823,9,239,1,239,1,239,1,240,1,240,1,240,1,240,1,240,
        1,240,1,240,1,240,3,240,2835,8,240,1,241,1,241,1,241,1,241,3,241,
        2841,8,241,1,242,1,242,1,242,1,242,3,242,2847,8,242,1,242,3,242,
        2850,8,242,1,242,1,242,1,243,1,243,1,244,1,244,4,244,2858,8,244,
        11,244,12,244,2859,1,245,1,245,1,246,1,246,1,247,5,247,2867,8,247,
        10,247,12,247,2870,9,247,1,247,3,247,2873,8,247,1,247,1,247,1,247,
        3,247,2878,8,247,1,247,3,247,2881,8,247,1,247,3,247,2884,8,247,1,
        247,1,247,3,247,2888,8,247,1,248,1,248,1,249,5,249,2893,8,249,10,
        249,12,249,2896,9,249,1,249,3,249,2899,8,249,1,249,3,249,2902,8,
        249,1,249,1,249,1,249,3,249,2907,8,249,1,249,1,249,1,249,3,249,2912,
        8,249,1,249,3,249,2915,8,249,1,249,3,249,2918,8,249,1,249,1,249,
        1,250,1,250,1,251,1,251,1,251,3,251,2927,8,251,1,251,3,251,2930,
        8,251,1,251,3,251,2933,8,251,1,251,1,251,3,251,2937,8,251,1,252,
        1,252,1,252,3,252,2942,8,252,1,252,1,252,3,252,2946,8,252,1,253,
        1,253,1,253,1,253,3,253,2952,8,253,1,253,1,253,3,253,2956,8,253,
        1,253,1,253,3,253,2960,8,253,1,253,1,253,1,254,1,254,1,254,1,254,
        1,254,1,254,1,254,1,254,1,254,1,254,3,254,2974,8,254,1,255,1,255,
        1,255,1,256,1,256,1,256,1,256,1,256,1,256,1,256,1,256,3,256,2987,
        8,256,1,256,1,256,1,256,1,256,3,256,2993,8,256,1,257,1,257,1,257,
        1,257,1,257,1,258,1,258,1,258,1,258,1,258,1,258,1,258,1,258,1,258,
        1,258,1,258,1,258,3,258,3012,8,258,1,259,1,259,1,259,1,259,1,259,
        1,259,1,260,1,260,1,260,3,260,3023,8,260,1,260,1,260,3,260,3027,
        8,260,1,260,1,260,1,261,3,261,3032,8,261,1,261,1,261,3,261,3036,
        8,261,1,261,1,261,1,261,1,261,1,261,3,261,3043,8,261,1,261,1,261,
        1,261,1,261,1,261,1,261,3,261,3051,8,261,1,262,1,262,1,262,3,262,
        3056,8,262,1,262,1,262,1,262,1,262,1,262,1,262,3,262,3064,8,262,
        1,262,1,262,5,262,3068,8,262,10,262,12,262,3071,9,262,3,262,3073,
        8,262,1,263,1,263,1,263,3,263,3078,8,263,1,264,5,264,3081,8,264,
        10,264,12,264,3084,9,264,1,265,1,265,1,266,5,266,3089,8,266,10,266,
        12,266,3092,9,266,1,266,3,266,3095,8,266,1,267,1,267,3,267,3099,
        8,267,1,268,1,268,1,268,1,268,1,268,1,268,1,268,3,268,3108,8,268,
        1,269,1,269,1,270,1,270,1,270,1,270,1,270,3,270,3117,8,270,1,270,
        3,270,3120,8,270,1,270,1,270,5,270,3124,8,270,10,270,12,270,3127,
        9,270,1,271,1,271,1,271,1,271,3,271,3133,8,271,1,271,1,271,1,271,
        3,271,3138,8,271,1,271,3,271,3141,8,271,1,271,1,271,1,271,1,271,
        1,271,1,271,3,271,3149,8,271,1,272,1,272,1,272,1,272,3,272,3155,
        8,272,1,273,1,273,3,273,3159,8,273,1,273,1,273,1,274,1,274,3,274,
        3165,8,274,1,274,1,274,3,274,3169,8,274,1,274,1,274,1,274,1,274,
        1,274,1,274,5,274,3177,8,274,10,274,12,274,3180,9,274,1,274,3,274,
        3183,8,274,3,274,3185,8,274,1,275,1,275,3,275,3189,8,275,1,275,1,
        275,3,275,3193,8,275,1,276,1,276,1,276,0,0,277,0,2,4,6,8,10,12,14,
        16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,
        60,62,64,66,68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,98,100,
        102,104,106,108,110,112,114,116,118,120,122,124,126,128,130,132,
        134,136,138,140,142,144,146,148,150,152,154,156,158,160,162,164,
        166,168,170,172,174,176,178,180,182,184,186,188,190,192,194,196,
        198,200,202,204,206,208,210,212,214,216,218,220,222,224,226,228,
        230,232,234,236,238,240,242,244,246,248,250,252,254,256,258,260,
        262,264,266,268,270,272,274,276,278,280,282,284,286,288,290,292,
        294,296,298,300,302,304,306,308,310,312,314,316,318,320,322,324,
        326,328,330,332,334,336,338,340,342,344,346,348,350,352,354,356,
        358,360,362,364,366,368,370,372,374,376,378,380,382,384,386,388,
        390,392,394,396,398,400,402,404,406,408,410,412,414,416,418,420,
        422,424,426,428,430,432,434,436,438,440,442,444,446,448,450,452,
        454,456,458,460,462,464,466,468,470,472,474,476,478,480,482,484,
        486,488,490,492,494,496,498,500,502,504,506,508,510,512,514,516,
        518,520,522,524,526,528,530,532,534,536,538,540,542,544,546,548,
        550,552,0,21,8,0,22,22,25,25,56,56,65,65,87,87,91,91,103,104,108,
        108,2,0,35,35,46,46,3,0,55,55,76,76,84,84,1,0,161,162,2,0,151,152,
        163,164,1,0,140,141,1,0,142,144,14,0,19,19,22,22,25,25,30,30,35,
        35,46,46,56,56,65,65,71,71,87,87,91,91,95,95,103,104,108,108,2,0,
        15,15,33,33,2,0,16,16,107,107,12,0,9,9,16,16,42,42,58,58,68,68,77,
        77,79,83,88,88,94,94,107,107,111,111,113,113,2,0,41,41,54,54,2,0,
        18,18,98,98,2,0,142,142,153,153,2,0,55,55,76,76,2,0,43,43,100,100,
        20,0,9,9,14,14,18,20,22,32,34,35,37,38,40,48,51,51,53,58,61,61,64,
        65,67,68,70,71,74,74,76,78,80,84,86,88,91,109,111,113,116,116,7,
        0,9,9,58,58,68,68,80,82,88,88,94,94,107,107,4,0,58,58,68,68,80,83,
        107,107,10,0,9,9,42,42,58,58,68,68,77,77,80,82,88,88,94,94,107,107,
        111,111,22,0,10,10,12,13,15,17,21,21,33,33,36,36,39,39,49,50,52,
        52,60,60,62,63,66,66,72,72,75,75,79,79,85,85,89,90,106,106,110,110,
        114,115,117,117,119,119,3505,0,555,1,0,0,0,2,570,1,0,0,0,4,574,1,
        0,0,0,6,583,1,0,0,0,8,605,1,0,0,0,10,607,1,0,0,0,12,613,1,0,0,0,
        14,626,1,0,0,0,16,639,1,0,0,0,18,642,1,0,0,0,20,646,1,0,0,0,22,660,
        1,0,0,0,24,662,1,0,0,0,26,668,1,0,0,0,28,673,1,0,0,0,30,675,1,0,
        0,0,32,677,1,0,0,0,34,681,1,0,0,0,36,683,1,0,0,0,38,688,1,0,0,0,
        40,690,1,0,0,0,42,696,1,0,0,0,44,698,1,0,0,0,46,709,1,0,0,0,48,718,
        1,0,0,0,50,731,1,0,0,0,52,738,1,0,0,0,54,743,1,0,0,0,56,753,1,0,
        0,0,58,766,1,0,0,0,60,783,1,0,0,0,62,785,1,0,0,0,64,793,1,0,0,0,
        66,801,1,0,0,0,68,809,1,0,0,0,70,817,1,0,0,0,72,825,1,0,0,0,74,833,
        1,0,0,0,76,841,1,0,0,0,78,855,1,0,0,0,80,866,1,0,0,0,82,874,1,0,
        0,0,84,882,1,0,0,0,86,894,1,0,0,0,88,902,1,0,0,0,90,917,1,0,0,0,
        92,941,1,0,0,0,94,943,1,0,0,0,96,989,1,0,0,0,98,1114,1,0,0,0,100,
        1118,1,0,0,0,102,1120,1,0,0,0,104,1124,1,0,0,0,106,1132,1,0,0,0,
        108,1148,1,0,0,0,110,1152,1,0,0,0,112,1154,1,0,0,0,114,1164,1,0,
        0,0,116,1166,1,0,0,0,118,1175,1,0,0,0,120,1188,1,0,0,0,122,1196,
        1,0,0,0,124,1198,1,0,0,0,126,1218,1,0,0,0,128,1220,1,0,0,0,130,1229,
        1,0,0,0,132,1242,1,0,0,0,134,1244,1,0,0,0,136,1265,1,0,0,0,138,1274,
        1,0,0,0,140,1291,1,0,0,0,142,1302,1,0,0,0,144,1307,1,0,0,0,146,1327,
        1,0,0,0,148,1329,1,0,0,0,150,1338,1,0,0,0,152,1343,1,0,0,0,154,1353,
        1,0,0,0,156,1355,1,0,0,0,158,1358,1,0,0,0,160,1369,1,0,0,0,162,1381,
        1,0,0,0,164,1383,1,0,0,0,166,1388,1,0,0,0,168,1391,1,0,0,0,170,1406,
        1,0,0,0,172,1415,1,0,0,0,174,1426,1,0,0,0,176,1428,1,0,0,0,178,1435,
        1,0,0,0,180,1444,1,0,0,0,182,1446,1,0,0,0,184,1450,1,0,0,0,186,1475,
        1,0,0,0,188,1482,1,0,0,0,190,1484,1,0,0,0,192,1581,1,0,0,0,194,1583,
        1,0,0,0,196,1599,1,0,0,0,198,1601,1,0,0,0,200,1604,1,0,0,0,202,1607,
        1,0,0,0,204,1615,1,0,0,0,206,1633,1,0,0,0,208,1635,1,0,0,0,210,1639,
        1,0,0,0,212,1650,1,0,0,0,214,1652,1,0,0,0,216,1666,1,0,0,0,218,1668,
        1,0,0,0,220,1675,1,0,0,0,222,1689,1,0,0,0,224,1691,1,0,0,0,226,1722,
        1,0,0,0,228,1724,1,0,0,0,230,1729,1,0,0,0,232,1742,1,0,0,0,234,1744,
        1,0,0,0,236,1756,1,0,0,0,238,1758,1,0,0,0,240,1763,1,0,0,0,242,1785,
        1,0,0,0,244,1787,1,0,0,0,246,1791,1,0,0,0,248,1804,1,0,0,0,250,1806,
        1,0,0,0,252,1825,1,0,0,0,254,1827,1,0,0,0,256,1839,1,0,0,0,258,1845,
        1,0,0,0,260,1850,1,0,0,0,262,1855,1,0,0,0,264,1857,1,0,0,0,266,1863,
        1,0,0,0,268,1883,1,0,0,0,270,1886,1,0,0,0,272,1890,1,0,0,0,274,1896,
        1,0,0,0,276,1915,1,0,0,0,278,1918,1,0,0,0,280,1926,1,0,0,0,282,1929,
        1,0,0,0,284,1942,1,0,0,0,286,1963,1,0,0,0,288,1978,1,0,0,0,290,1980,
        1,0,0,0,292,1989,1,0,0,0,294,1994,1,0,0,0,296,2000,1,0,0,0,298,2012,
        1,0,0,0,300,2016,1,0,0,0,302,2025,1,0,0,0,304,2034,1,0,0,0,306,2038,
        1,0,0,0,308,2053,1,0,0,0,310,2062,1,0,0,0,312,2072,1,0,0,0,314,2082,
        1,0,0,0,316,2084,1,0,0,0,318,2088,1,0,0,0,320,2092,1,0,0,0,322,2095,
        1,0,0,0,324,2098,1,0,0,0,326,2100,1,0,0,0,328,2102,1,0,0,0,330,2104,
        1,0,0,0,332,2107,1,0,0,0,334,2109,1,0,0,0,336,2123,1,0,0,0,338,2131,
        1,0,0,0,340,2135,1,0,0,0,342,2142,1,0,0,0,344,2147,1,0,0,0,346,2157,
        1,0,0,0,348,2161,1,0,0,0,350,2182,1,0,0,0,352,2189,1,0,0,0,354,2203,
        1,0,0,0,356,2211,1,0,0,0,358,2215,1,0,0,0,360,2223,1,0,0,0,362,2230,
        1,0,0,0,364,2234,1,0,0,0,366,2236,1,0,0,0,368,2244,1,0,0,0,370,2252,
        1,0,0,0,372,2254,1,0,0,0,374,2270,1,0,0,0,376,2280,1,0,0,0,378,2283,
        1,0,0,0,380,2290,1,0,0,0,382,2318,1,0,0,0,384,2324,1,0,0,0,386,2333,
        1,0,0,0,388,2353,1,0,0,0,390,2361,1,0,0,0,392,2364,1,0,0,0,394,2377,
        1,0,0,0,396,2383,1,0,0,0,398,2410,1,0,0,0,400,2412,1,0,0,0,402,2419,
        1,0,0,0,404,2433,1,0,0,0,406,2435,1,0,0,0,408,2447,1,0,0,0,410,2450,
        1,0,0,0,412,2467,1,0,0,0,414,2479,1,0,0,0,416,2488,1,0,0,0,418,2504,
        1,0,0,0,420,2516,1,0,0,0,422,2523,1,0,0,0,424,2525,1,0,0,0,426,2528,
        1,0,0,0,428,2538,1,0,0,0,430,2609,1,0,0,0,432,2631,1,0,0,0,434,2634,
        1,0,0,0,436,2651,1,0,0,0,438,2658,1,0,0,0,440,2669,1,0,0,0,442,2672,
        1,0,0,0,444,2701,1,0,0,0,446,2705,1,0,0,0,448,2707,1,0,0,0,450,2715,
        1,0,0,0,452,2733,1,0,0,0,454,2752,1,0,0,0,456,2754,1,0,0,0,458,2762,
        1,0,0,0,460,2771,1,0,0,0,462,2773,1,0,0,0,464,2778,1,0,0,0,466,2782,
        1,0,0,0,468,2786,1,0,0,0,470,2798,1,0,0,0,472,2800,1,0,0,0,474,2806,
        1,0,0,0,476,2808,1,0,0,0,478,2817,1,0,0,0,480,2834,1,0,0,0,482,2840,
        1,0,0,0,484,2842,1,0,0,0,486,2853,1,0,0,0,488,2855,1,0,0,0,490,2861,
        1,0,0,0,492,2863,1,0,0,0,494,2868,1,0,0,0,496,2889,1,0,0,0,498,2894,
        1,0,0,0,500,2921,1,0,0,0,502,2923,1,0,0,0,504,2938,1,0,0,0,506,2947,
        1,0,0,0,508,2963,1,0,0,0,510,2975,1,0,0,0,512,2978,1,0,0,0,514,2994,
        1,0,0,0,516,2999,1,0,0,0,518,3013,1,0,0,0,520,3019,1,0,0,0,522,3050,
        1,0,0,0,524,3072,1,0,0,0,526,3077,1,0,0,0,528,3082,1,0,0,0,530,3085,
        1,0,0,0,532,3090,1,0,0,0,534,3098,1,0,0,0,536,3107,1,0,0,0,538,3109,
        1,0,0,0,540,3116,1,0,0,0,542,3128,1,0,0,0,544,3150,1,0,0,0,546,3156,
        1,0,0,0,548,3184,1,0,0,0,550,3186,1,0,0,0,552,3194,1,0,0,0,554,556,
        5,1,0,0,555,554,1,0,0,0,555,556,1,0,0,0,556,560,1,0,0,0,557,559,
        3,2,1,0,558,557,1,0,0,0,559,562,1,0,0,0,560,558,1,0,0,0,560,561,
        1,0,0,0,561,563,1,0,0,0,562,560,1,0,0,0,563,564,5,0,0,1,564,1,1,
        0,0,0,565,571,3,270,135,0,566,571,3,274,137,0,567,571,3,438,219,
        0,568,571,3,4,2,0,569,571,3,278,139,0,570,565,1,0,0,0,570,566,1,
        0,0,0,570,567,1,0,0,0,570,568,1,0,0,0,570,569,1,0,0,0,571,3,1,0,
        0,0,572,575,3,178,89,0,573,575,3,282,141,0,574,572,1,0,0,0,574,573,
        1,0,0,0,575,576,1,0,0,0,576,574,1,0,0,0,576,577,1,0,0,0,577,5,1,
        0,0,0,578,580,3,552,276,0,579,581,3,44,22,0,580,579,1,0,0,0,580,
        581,1,0,0,0,581,584,1,0,0,0,582,584,3,294,147,0,583,578,1,0,0,0,
        583,582,1,0,0,0,584,592,1,0,0,0,585,586,5,136,0,0,586,588,3,552,
        276,0,587,589,3,44,22,0,588,587,1,0,0,0,588,589,1,0,0,0,589,591,
        1,0,0,0,590,585,1,0,0,0,591,594,1,0,0,0,592,590,1,0,0,0,592,593,
        1,0,0,0,593,7,1,0,0,0,594,592,1,0,0,0,595,601,3,14,7,0,596,600,5,
        153,0,0,597,600,3,414,207,0,598,600,5,142,0,0,599,596,1,0,0,0,599,
        597,1,0,0,0,599,598,1,0,0,0,600,603,1,0,0,0,601,599,1,0,0,0,601,
        602,1,0,0,0,602,606,1,0,0,0,603,601,1,0,0,0,604,606,3,10,5,0,605,
        595,1,0,0,0,605,604,1,0,0,0,606,9,1,0,0,0,607,608,5,32,0,0,608,609,
        5,142,0,0,609,610,5,151,0,0,610,611,3,12,6,0,611,612,5,152,0,0,612,
        11,1,0,0,0,613,618,3,8,4,0,614,615,5,137,0,0,615,617,3,8,4,0,616,
        614,1,0,0,0,617,620,1,0,0,0,618,616,1,0,0,0,618,619,1,0,0,0,619,
        13,1,0,0,0,620,618,1,0,0,0,621,627,3,26,13,0,622,627,3,42,21,0,623,
        624,5,112,0,0,624,627,5,142,0,0,625,627,3,16,8,0,626,621,1,0,0,0,
        626,622,1,0,0,0,626,623,1,0,0,0,626,625,1,0,0,0,627,15,1,0,0,0,628,
        629,5,134,0,0,629,632,3,24,12,0,630,631,5,137,0,0,631,633,3,24,12,
        0,632,630,1,0,0,0,633,634,1,0,0,0,634,632,1,0,0,0,634,635,1,0,0,
        0,635,636,1,0,0,0,636,637,5,135,0,0,637,640,1,0,0,0,638,640,3,18,
        9,0,639,628,1,0,0,0,639,638,1,0,0,0,640,17,1,0,0,0,641,643,5,110,
        0,0,642,641,1,0,0,0,642,643,1,0,0,0,643,644,1,0,0,0,644,645,3,20,
        10,0,645,19,1,0,0,0,646,647,5,134,0,0,647,650,3,22,11,0,648,649,
        5,137,0,0,649,651,3,22,11,0,650,648,1,0,0,0,651,652,1,0,0,0,652,
        650,1,0,0,0,652,653,1,0,0,0,653,654,1,0,0,0,654,655,5,135,0,0,655,
        21,1,0,0,0,656,661,3,20,10,0,657,659,3,552,276,0,658,657,1,0,0,0,
        658,659,1,0,0,0,659,661,1,0,0,0,660,656,1,0,0,0,660,658,1,0,0,0,
        661,23,1,0,0,0,662,664,3,8,4,0,663,665,3,552,276,0,664,663,1,0,0,
        0,664,665,1,0,0,0,665,25,1,0,0,0,666,669,3,28,14,0,667,669,5,19,
        0,0,668,666,1,0,0,0,668,667,1,0,0,0,669,27,1,0,0,0,670,674,3,30,
        15,0,671,674,3,32,16,0,672,674,5,30,0,0,673,670,1,0,0,0,673,671,
        1,0,0,0,673,672,1,0,0,0,674,29,1,0,0,0,675,676,7,0,0,0,676,31,1,
        0,0,0,677,678,7,1,0,0,678,33,1,0,0,0,679,682,3,36,18,0,680,682,3,
        38,19,0,681,679,1,0,0,0,681,680,1,0,0,0,682,35,1,0,0,0,683,684,5,
        31,0,0,684,685,5,134,0,0,685,686,3,8,4,0,686,687,5,135,0,0,687,37,
        1,0,0,0,688,689,5,31,0,0,689,39,1,0,0,0,690,691,3,52,26,0,691,41,
        1,0,0,0,692,697,3,6,3,0,693,697,5,71,0,0,694,697,5,36,0,0,695,697,
        5,95,0,0,696,692,1,0,0,0,696,693,1,0,0,0,696,694,1,0,0,0,696,695,
        1,0,0,0,697,43,1,0,0,0,698,699,5,151,0,0,699,704,3,8,4,0,700,701,
        5,137,0,0,701,703,3,8,4,0,702,700,1,0,0,0,703,706,1,0,0,0,704,702,
        1,0,0,0,704,705,1,0,0,0,705,707,1,0,0,0,706,704,1,0,0,0,707,708,
        5,152,0,0,708,45,1,0,0,0,709,714,3,48,24,0,710,711,5,137,0,0,711,
        713,3,48,24,0,712,710,1,0,0,0,713,716,1,0,0,0,714,712,1,0,0,0,714,
        715,1,0,0,0,715,47,1,0,0,0,716,714,1,0,0,0,717,719,3,50,25,0,718,
        717,1,0,0,0,718,719,1,0,0,0,719,721,1,0,0,0,720,722,7,2,0,0,721,
        720,1,0,0,0,721,722,1,0,0,0,722,729,1,0,0,0,723,730,3,52,26,0,724,
        727,5,110,0,0,725,727,3,8,4,0,726,724,1,0,0,0,726,725,1,0,0,0,727,
        728,1,0,0,0,728,730,3,52,26,0,729,723,1,0,0,0,729,726,1,0,0,0,730,
        49,1,0,0,0,731,732,3,552,276,0,732,733,5,138,0,0,733,51,1,0,0,0,
        734,739,3,56,28,0,735,739,3,54,27,0,736,737,5,84,0,0,737,739,3,54,
        27,0,738,734,1,0,0,0,738,735,1,0,0,0,738,736,1,0,0,0,739,53,1,0,
        0,0,740,744,3,144,72,0,741,744,3,156,78,0,742,744,3,60,30,0,743,
        740,1,0,0,0,743,741,1,0,0,0,743,742,1,0,0,0,744,55,1,0,0,0,745,746,
        3,92,46,0,746,747,3,58,29,0,747,748,3,52,26,0,748,754,1,0,0,0,749,
        750,3,92,46,0,750,751,5,175,0,0,751,752,3,100,50,0,752,754,1,0,0,
        0,753,745,1,0,0,0,753,749,1,0,0,0,754,57,1,0,0,0,755,767,5,150,0,
        0,756,767,5,165,0,0,757,767,5,166,0,0,758,767,5,167,0,0,759,767,
        5,168,0,0,760,767,5,169,0,0,761,767,5,170,0,0,762,767,5,171,0,0,
        763,767,5,172,0,0,764,767,5,174,0,0,765,767,3,468,234,0,766,755,
        1,0,0,0,766,756,1,0,0,0,766,757,1,0,0,0,766,758,1,0,0,0,766,759,
        1,0,0,0,766,760,1,0,0,0,766,761,1,0,0,0,766,762,1,0,0,0,766,763,
        1,0,0,0,766,764,1,0,0,0,766,765,1,0,0,0,767,59,1,0,0,0,768,784,3,
        62,31,0,769,770,3,62,31,0,770,771,5,153,0,0,771,772,3,52,26,0,772,
        773,5,138,0,0,773,774,3,52,26,0,774,784,1,0,0,0,775,776,3,62,31,
        0,776,777,5,153,0,0,777,778,5,84,0,0,778,779,3,40,20,0,779,780,5,
        138,0,0,780,781,5,84,0,0,781,782,3,40,20,0,782,784,1,0,0,0,783,768,
        1,0,0,0,783,769,1,0,0,0,783,775,1,0,0,0,784,61,1,0,0,0,785,791,3,
        64,32,0,786,789,5,155,0,0,787,790,3,62,31,0,788,790,3,102,51,0,789,
        787,1,0,0,0,789,788,1,0,0,0,790,792,1,0,0,0,791,786,1,0,0,0,791,
        792,1,0,0,0,792,63,1,0,0,0,793,798,3,66,33,0,794,795,5,159,0,0,795,
        797,3,66,33,0,796,794,1,0,0,0,797,800,1,0,0,0,798,796,1,0,0,0,798,
        799,1,0,0,0,799,65,1,0,0,0,800,798,1,0,0,0,801,806,3,68,34,0,802,
        803,5,158,0,0,803,805,3,68,34,0,804,802,1,0,0,0,805,808,1,0,0,0,
        806,804,1,0,0,0,806,807,1,0,0,0,807,67,1,0,0,0,808,806,1,0,0,0,809,
        814,3,70,35,0,810,811,5,146,0,0,811,813,3,70,35,0,812,810,1,0,0,
        0,813,816,1,0,0,0,814,812,1,0,0,0,814,815,1,0,0,0,815,69,1,0,0,0,
        816,814,1,0,0,0,817,822,3,72,36,0,818,819,5,147,0,0,819,821,3,72,
        36,0,820,818,1,0,0,0,821,824,1,0,0,0,822,820,1,0,0,0,822,823,1,0,
        0,0,823,71,1,0,0,0,824,822,1,0,0,0,825,830,3,74,37,0,826,827,5,145,
        0,0,827,829,3,74,37,0,828,826,1,0,0,0,829,832,1,0,0,0,830,828,1,
        0,0,0,830,831,1,0,0,0,831,73,1,0,0,0,832,830,1,0,0,0,833,838,3,76,
        38,0,834,835,7,3,0,0,835,837,3,76,38,0,836,834,1,0,0,0,837,840,1,
        0,0,0,838,836,1,0,0,0,838,839,1,0,0,0,839,75,1,0,0,0,840,838,1,0,
        0,0,841,852,3,78,39,0,842,843,7,4,0,0,843,851,3,78,39,0,844,845,
        5,61,0,0,845,851,3,138,69,0,846,847,5,14,0,0,847,851,3,138,69,0,
        848,849,5,61,0,0,849,851,3,312,156,0,850,842,1,0,0,0,850,844,1,0,
        0,0,850,846,1,0,0,0,850,848,1,0,0,0,851,854,1,0,0,0,852,850,1,0,
        0,0,852,853,1,0,0,0,853,77,1,0,0,0,854,852,1,0,0,0,855,863,3,80,
        40,0,856,859,5,173,0,0,857,859,3,466,233,0,858,856,1,0,0,0,858,857,
        1,0,0,0,859,860,1,0,0,0,860,862,3,80,40,0,861,858,1,0,0,0,862,865,
        1,0,0,0,863,861,1,0,0,0,863,864,1,0,0,0,864,79,1,0,0,0,865,863,1,
        0,0,0,866,871,3,82,41,0,867,868,7,5,0,0,868,870,3,82,41,0,869,867,
        1,0,0,0,870,873,1,0,0,0,871,869,1,0,0,0,871,872,1,0,0,0,872,81,1,
        0,0,0,873,871,1,0,0,0,874,879,3,84,42,0,875,876,7,6,0,0,876,878,
        3,84,42,0,877,875,1,0,0,0,878,881,1,0,0,0,879,877,1,0,0,0,879,880,
        1,0,0,0,880,83,1,0,0,0,881,879,1,0,0,0,882,892,3,90,45,0,883,884,
        5,97,0,0,884,889,5,130,0,0,885,887,3,86,43,0,886,888,5,137,0,0,887,
        886,1,0,0,0,887,888,1,0,0,0,888,890,1,0,0,0,889,885,1,0,0,0,889,
        890,1,0,0,0,890,891,1,0,0,0,891,893,5,131,0,0,892,883,1,0,0,0,892,
        893,1,0,0,0,893,85,1,0,0,0,894,899,3,88,44,0,895,896,5,137,0,0,896,
        898,3,88,44,0,897,895,1,0,0,0,898,901,1,0,0,0,899,897,1,0,0,0,899,
        900,1,0,0,0,900,87,1,0,0,0,901,899,1,0,0,0,902,904,3,312,156,0,903,
        905,3,244,122,0,904,903,1,0,0,0,904,905,1,0,0,0,905,906,1,0,0,0,
        906,907,3,464,232,0,907,908,3,100,50,0,908,89,1,0,0,0,909,918,3,
        92,46,0,910,912,3,92,46,0,911,910,1,0,0,0,911,912,1,0,0,0,912,913,
        1,0,0,0,913,915,5,176,0,0,914,916,3,92,46,0,915,914,1,0,0,0,915,
        916,1,0,0,0,916,918,1,0,0,0,917,909,1,0,0,0,917,911,1,0,0,0,918,
        91,1,0,0,0,919,942,3,94,47,0,920,942,3,96,48,0,921,922,5,140,0,0,
        922,942,3,92,46,0,923,924,5,141,0,0,924,942,3,92,46,0,925,926,5,
        148,0,0,926,942,3,92,46,0,927,928,5,149,0,0,928,942,3,92,46,0,929,
        930,5,156,0,0,930,942,3,92,46,0,931,932,5,157,0,0,932,942,3,92,46,
        0,933,934,5,17,0,0,934,942,3,92,46,0,935,936,5,145,0,0,936,942,3,
        92,46,0,937,938,5,142,0,0,938,942,3,92,46,0,939,940,5,147,0,0,940,
        942,3,92,46,0,941,919,1,0,0,0,941,920,1,0,0,0,941,921,1,0,0,0,941,
        923,1,0,0,0,941,925,1,0,0,0,941,927,1,0,0,0,941,929,1,0,0,0,941,
        931,1,0,0,0,941,933,1,0,0,0,941,935,1,0,0,0,941,937,1,0,0,0,941,
        939,1,0,0,0,942,93,1,0,0,0,943,944,5,134,0,0,944,945,3,8,4,0,945,
        946,5,135,0,0,946,947,3,92,46,0,947,95,1,0,0,0,948,950,3,98,49,0,
        949,951,5,148,0,0,950,949,1,0,0,0,950,951,1,0,0,0,951,955,1,0,0,
        0,952,954,3,106,53,0,953,952,1,0,0,0,954,957,1,0,0,0,955,953,1,0,
        0,0,955,956,1,0,0,0,956,959,1,0,0,0,957,955,1,0,0,0,958,960,5,148,
        0,0,959,958,1,0,0,0,959,960,1,0,0,0,960,983,1,0,0,0,961,968,3,104,
        52,0,962,968,3,546,273,0,963,968,5,156,0,0,964,968,5,157,0,0,965,
        966,5,160,0,0,966,968,3,552,276,0,967,961,1,0,0,0,967,962,1,0,0,
        0,967,963,1,0,0,0,967,964,1,0,0,0,967,965,1,0,0,0,968,970,1,0,0,
        0,969,971,5,148,0,0,970,969,1,0,0,0,970,971,1,0,0,0,971,975,1,0,
        0,0,972,974,3,106,53,0,973,972,1,0,0,0,974,977,1,0,0,0,975,973,1,
        0,0,0,975,976,1,0,0,0,976,979,1,0,0,0,977,975,1,0,0,0,978,980,5,
        148,0,0,979,978,1,0,0,0,979,980,1,0,0,0,980,982,1,0,0,0,981,967,
        1,0,0,0,982,985,1,0,0,0,983,981,1,0,0,0,983,984,1,0,0,0,984,990,
        1,0,0,0,985,983,1,0,0,0,986,990,3,16,8,0,987,990,3,34,17,0,988,990,
        3,206,103,0,989,948,1,0,0,0,989,986,1,0,0,0,989,987,1,0,0,0,989,
        988,1,0,0,0,990,97,1,0,0,0,991,1115,3,470,235,0,992,994,3,552,276,
        0,993,995,3,44,22,0,994,993,1,0,0,0,994,995,1,0,0,0,995,1115,1,0,
        0,0,996,997,5,134,0,0,997,998,3,52,26,0,998,999,5,135,0,0,999,1115,
        1,0,0,0,1000,1115,3,110,55,0,1001,1115,3,294,147,0,1002,1115,5,120,
        0,0,1003,1115,5,98,0,0,1004,1014,5,18,0,0,1005,1006,5,136,0,0,1006,
        1008,3,552,276,0,1007,1009,3,44,22,0,1008,1007,1,0,0,0,1008,1009,
        1,0,0,0,1009,1015,1,0,0,0,1010,1011,5,132,0,0,1011,1012,3,112,56,
        0,1012,1013,5,133,0,0,1013,1015,1,0,0,0,1014,1005,1,0,0,0,1014,1010,
        1,0,0,0,1015,1115,1,0,0,0,1016,1045,5,68,0,0,1017,1039,3,8,4,0,1018,
        1040,3,548,274,0,1019,1040,3,114,57,0,1020,1021,5,132,0,0,1021,1022,
        3,112,56,0,1022,1026,5,133,0,0,1023,1025,3,414,207,0,1024,1023,1,
        0,0,0,1025,1028,1,0,0,0,1026,1024,1,0,0,0,1026,1027,1,0,0,0,1027,
        1030,1,0,0,0,1028,1026,1,0,0,0,1029,1031,3,416,208,0,1030,1029,1,
        0,0,0,1030,1031,1,0,0,0,1031,1040,1,0,0,0,1032,1034,3,414,207,0,
        1033,1032,1,0,0,0,1034,1035,1,0,0,0,1035,1033,1,0,0,0,1035,1036,
        1,0,0,0,1036,1037,1,0,0,0,1037,1038,3,416,208,0,1038,1040,1,0,0,
        0,1039,1018,1,0,0,0,1039,1019,1,0,0,0,1039,1020,1,0,0,0,1039,1033,
        1,0,0,0,1040,1046,1,0,0,0,1041,1046,3,128,64,0,1042,1043,3,414,207,
        0,1043,1044,3,416,208,0,1044,1046,1,0,0,0,1045,1017,1,0,0,0,1045,
        1041,1,0,0,0,1045,1042,1,0,0,0,1045,1046,1,0,0,0,1046,1115,1,0,0,
        0,1047,1048,5,68,0,0,1048,1115,3,550,275,0,1049,1050,5,134,0,0,1050,
        1053,3,48,24,0,1051,1052,5,137,0,0,1052,1054,3,48,24,0,1053,1051,
        1,0,0,0,1054,1055,1,0,0,0,1055,1053,1,0,0,0,1055,1056,1,0,0,0,1056,
        1057,1,0,0,0,1057,1058,5,135,0,0,1058,1115,1,0,0,0,1059,1060,5,102,
        0,0,1060,1064,5,134,0,0,1061,1065,3,134,67,0,1062,1065,3,8,4,0,1063,
        1065,5,112,0,0,1064,1061,1,0,0,0,1064,1062,1,0,0,0,1064,1063,1,0,
        0,0,1065,1066,1,0,0,0,1066,1115,5,135,0,0,1067,1068,5,26,0,0,1068,
        1069,5,134,0,0,1069,1070,3,52,26,0,1070,1071,5,135,0,0,1071,1115,
        1,0,0,0,1072,1073,5,105,0,0,1073,1074,5,134,0,0,1074,1075,3,52,26,
        0,1075,1076,5,135,0,0,1076,1115,1,0,0,0,1077,1082,5,31,0,0,1078,
        1079,5,134,0,0,1079,1080,3,8,4,0,1080,1081,5,135,0,0,1081,1083,1,
        0,0,0,1082,1078,1,0,0,0,1082,1083,1,0,0,0,1083,1115,1,0,0,0,1084,
        1086,5,16,0,0,1085,1084,1,0,0,0,1085,1086,1,0,0,0,1086,1087,1,0,
        0,0,1087,1093,5,32,0,0,1088,1090,5,134,0,0,1089,1091,3,148,74,0,
        1090,1089,1,0,0,0,1090,1091,1,0,0,0,1091,1092,1,0,0,0,1092,1094,
        5,135,0,0,1093,1088,1,0,0,0,1093,1094,1,0,0,0,1094,1095,1,0,0,0,
        1095,1115,3,224,112,0,1096,1097,5,92,0,0,1097,1098,5,134,0,0,1098,
        1099,3,8,4,0,1099,1100,5,135,0,0,1100,1115,1,0,0,0,1101,1102,5,66,
        0,0,1102,1108,5,134,0,0,1103,1104,3,552,276,0,1104,1105,5,136,0,
        0,1105,1107,1,0,0,0,1106,1103,1,0,0,0,1107,1110,1,0,0,0,1108,1106,
        1,0,0,0,1108,1109,1,0,0,0,1109,1111,1,0,0,0,1110,1108,1,0,0,0,1111,
        1112,3,552,276,0,1112,1113,5,135,0,0,1113,1115,1,0,0,0,1114,991,
        1,0,0,0,1114,992,1,0,0,0,1114,996,1,0,0,0,1114,1000,1,0,0,0,1114,
        1001,1,0,0,0,1114,1002,1,0,0,0,1114,1003,1,0,0,0,1114,1004,1,0,0,
        0,1114,1016,1,0,0,0,1114,1047,1,0,0,0,1114,1049,1,0,0,0,1114,1059,
        1,0,0,0,1114,1067,1,0,0,0,1114,1072,1,0,0,0,1114,1077,1,0,0,0,1114,
        1085,1,0,0,0,1114,1096,1,0,0,0,1114,1101,1,0,0,0,1115,99,1,0,0,0,
        1116,1119,3,52,26,0,1117,1119,3,102,51,0,1118,1116,1,0,0,0,1118,
        1117,1,0,0,0,1119,101,1,0,0,0,1120,1121,5,99,0,0,1121,1122,3,52,
        26,0,1122,103,1,0,0,0,1123,1125,5,153,0,0,1124,1123,1,0,0,0,1124,
        1125,1,0,0,0,1125,1126,1,0,0,0,1126,1127,5,136,0,0,1127,1129,3,552,
        276,0,1128,1130,3,44,22,0,1129,1128,1,0,0,0,1129,1130,1,0,0,0,1130,
        105,1,0,0,0,1131,1133,5,153,0,0,1132,1131,1,0,0,0,1132,1133,1,0,
        0,0,1133,1134,1,0,0,0,1134,1135,5,132,0,0,1135,1140,3,108,54,0,1136,
        1137,5,137,0,0,1137,1139,3,108,54,0,1138,1136,1,0,0,0,1139,1142,
        1,0,0,0,1140,1138,1,0,0,0,1140,1141,1,0,0,0,1141,1143,1,0,0,0,1142,
        1140,1,0,0,0,1143,1144,5,133,0,0,1144,107,1,0,0,0,1145,1146,3,552,
        276,0,1146,1147,5,138,0,0,1147,1149,1,0,0,0,1148,1145,1,0,0,0,1148,
        1149,1,0,0,0,1149,1150,1,0,0,0,1150,1151,3,52,26,0,1151,109,1,0,
        0,0,1152,1153,7,7,0,0,1153,111,1,0,0,0,1154,1159,3,52,26,0,1155,
        1156,5,137,0,0,1156,1158,3,52,26,0,1157,1155,1,0,0,0,1158,1161,1,
        0,0,0,1159,1157,1,0,0,0,1159,1160,1,0,0,0,1160,113,1,0,0,0,1161,
        1159,1,0,0,0,1162,1165,3,116,58,0,1163,1165,3,124,62,0,1164,1162,
        1,0,0,0,1164,1163,1,0,0,0,1165,115,1,0,0,0,1166,1171,5,130,0,0,1167,
        1169,3,118,59,0,1168,1170,5,137,0,0,1169,1168,1,0,0,0,1169,1170,
        1,0,0,0,1170,1172,1,0,0,0,1171,1167,1,0,0,0,1171,1172,1,0,0,0,1172,
        1173,1,0,0,0,1173,1174,5,131,0,0,1174,117,1,0,0,0,1175,1180,3,120,
        60,0,1176,1177,5,137,0,0,1177,1179,3,120,60,0,1178,1176,1,0,0,0,
        1179,1182,1,0,0,0,1180,1178,1,0,0,0,1180,1181,1,0,0,0,1181,119,1,
        0,0,0,1182,1180,1,0,0,0,1183,1189,3,552,276,0,1184,1185,5,132,0,
        0,1185,1186,3,52,26,0,1186,1187,5,133,0,0,1187,1189,1,0,0,0,1188,
        1183,1,0,0,0,1188,1184,1,0,0,0,1189,1190,1,0,0,0,1190,1191,5,150,
        0,0,1191,1192,3,122,61,0,1192,121,1,0,0,0,1193,1197,3,52,26,0,1194,
        1197,3,114,57,0,1195,1197,3,16,8,0,1196,1193,1,0,0,0,1196,1194,1,
        0,0,0,1196,1195,1,0,0,0,1197,123,1,0,0,0,1198,1199,5,130,0,0,1199,
        1204,3,126,63,0,1200,1201,5,137,0,0,1201,1203,3,126,63,0,1202,1200,
        1,0,0,0,1203,1206,1,0,0,0,1204,1202,1,0,0,0,1204,1205,1,0,0,0,1205,
        1208,1,0,0,0,1206,1204,1,0,0,0,1207,1209,5,137,0,0,1208,1207,1,0,
        0,0,1208,1209,1,0,0,0,1209,1210,1,0,0,0,1210,1211,5,131,0,0,1211,
        125,1,0,0,0,1212,1219,3,54,27,0,1213,1214,5,130,0,0,1214,1215,3,
        112,56,0,1215,1216,5,131,0,0,1216,1219,1,0,0,0,1217,1219,3,52,26,
        0,1218,1212,1,0,0,0,1218,1213,1,0,0,0,1218,1217,1,0,0,0,1219,127,
        1,0,0,0,1220,1225,5,130,0,0,1221,1223,3,130,65,0,1222,1224,5,137,
        0,0,1223,1222,1,0,0,0,1223,1224,1,0,0,0,1224,1226,1,0,0,0,1225,1221,
        1,0,0,0,1225,1226,1,0,0,0,1226,1227,1,0,0,0,1227,1228,5,131,0,0,
        1228,129,1,0,0,0,1229,1234,3,132,66,0,1230,1231,5,137,0,0,1231,1233,
        3,132,66,0,1232,1230,1,0,0,0,1233,1236,1,0,0,0,1234,1232,1,0,0,0,
        1234,1235,1,0,0,0,1235,131,1,0,0,0,1236,1234,1,0,0,0,1237,1243,3,
        96,48,0,1238,1239,3,552,276,0,1239,1240,5,150,0,0,1240,1241,3,52,
        26,0,1241,1243,1,0,0,0,1242,1237,1,0,0,0,1242,1238,1,0,0,0,1243,
        133,1,0,0,0,1244,1253,3,552,276,0,1245,1247,3,136,68,0,1246,1245,
        1,0,0,0,1246,1247,1,0,0,0,1247,1254,1,0,0,0,1248,1249,5,154,0,0,
        1249,1251,3,552,276,0,1250,1252,3,136,68,0,1251,1250,1,0,0,0,1251,
        1252,1,0,0,0,1252,1254,1,0,0,0,1253,1246,1,0,0,0,1253,1248,1,0,0,
        0,1254,1262,1,0,0,0,1255,1256,5,136,0,0,1256,1258,3,552,276,0,1257,
        1259,3,136,68,0,1258,1257,1,0,0,0,1258,1259,1,0,0,0,1259,1261,1,
        0,0,0,1260,1255,1,0,0,0,1261,1264,1,0,0,0,1262,1260,1,0,0,0,1262,
        1263,1,0,0,0,1263,135,1,0,0,0,1264,1262,1,0,0,0,1265,1269,5,151,
        0,0,1266,1268,5,137,0,0,1267,1266,1,0,0,0,1268,1271,1,0,0,0,1269,
        1267,1,0,0,0,1269,1270,1,0,0,0,1270,1272,1,0,0,0,1271,1269,1,0,0,
        0,1272,1273,5,152,0,0,1273,137,1,0,0,0,1274,1279,3,14,7,0,1275,1278,
        3,414,207,0,1276,1278,5,142,0,0,1277,1275,1,0,0,0,1277,1276,1,0,
        0,0,1278,1281,1,0,0,0,1279,1277,1,0,0,0,1279,1280,1,0,0,0,1280,1283,
        1,0,0,0,1281,1279,1,0,0,0,1282,1284,5,153,0,0,1283,1282,1,0,0,0,
        1283,1284,1,0,0,0,1284,1286,1,0,0,0,1285,1287,3,140,70,0,1286,1285,
        1,0,0,0,1286,1287,1,0,0,0,1287,1289,1,0,0,0,1288,1290,3,552,276,
        0,1289,1288,1,0,0,0,1289,1290,1,0,0,0,1290,139,1,0,0,0,1291,1292,
        5,130,0,0,1292,1297,3,142,71,0,1293,1294,5,137,0,0,1294,1296,3,142,
        71,0,1295,1293,1,0,0,0,1296,1299,1,0,0,0,1297,1295,1,0,0,0,1297,
        1298,1,0,0,0,1298,1300,1,0,0,0,1299,1297,1,0,0,0,1300,1301,5,131,
        0,0,1301,141,1,0,0,0,1302,1303,3,552,276,0,1303,1304,5,138,0,0,1304,
        1305,3,52,26,0,1305,143,1,0,0,0,1306,1308,5,16,0,0,1307,1306,1,0,
        0,0,1307,1308,1,0,0,0,1308,1310,1,0,0,0,1309,1311,5,94,0,0,1310,
        1309,1,0,0,0,1310,1311,1,0,0,0,1311,1312,1,0,0,0,1312,1313,3,146,
        73,0,1313,1314,3,464,232,0,1314,1315,3,154,77,0,1315,145,1,0,0,0,
        1316,1317,5,134,0,0,1317,1328,5,135,0,0,1318,1319,5,134,0,0,1319,
        1320,3,148,74,0,1320,1321,5,135,0,0,1321,1328,1,0,0,0,1322,1323,
        5,134,0,0,1323,1324,3,152,76,0,1324,1325,5,135,0,0,1325,1328,1,0,
        0,0,1326,1328,3,552,276,0,1327,1316,1,0,0,0,1327,1318,1,0,0,0,1327,
        1322,1,0,0,0,1327,1326,1,0,0,0,1328,147,1,0,0,0,1329,1334,3,150,
        75,0,1330,1331,5,137,0,0,1331,1333,3,150,75,0,1332,1330,1,0,0,0,
        1333,1336,1,0,0,0,1334,1332,1,0,0,0,1334,1335,1,0,0,0,1335,149,1,
        0,0,0,1336,1334,1,0,0,0,1337,1339,7,2,0,0,1338,1337,1,0,0,0,1338,
        1339,1,0,0,0,1339,1340,1,0,0,0,1340,1341,3,8,4,0,1341,1342,3,552,
        276,0,1342,151,1,0,0,0,1343,1348,3,552,276,0,1344,1345,5,137,0,0,
        1345,1347,3,552,276,0,1346,1344,1,0,0,0,1347,1350,1,0,0,0,1348,1346,
        1,0,0,0,1348,1349,1,0,0,0,1349,153,1,0,0,0,1350,1348,1,0,0,0,1351,
        1354,3,100,50,0,1352,1354,3,224,112,0,1353,1351,1,0,0,0,1353,1352,
        1,0,0,0,1354,155,1,0,0,0,1355,1356,3,158,79,0,1356,1357,3,160,80,
        0,1357,157,1,0,0,0,1358,1360,5,49,0,0,1359,1361,3,8,4,0,1360,1359,
        1,0,0,0,1360,1361,1,0,0,0,1361,1362,1,0,0,0,1362,1363,3,552,276,
        0,1363,1364,5,55,0,0,1364,1365,3,52,26,0,1365,159,1,0,0,0,1366,1368,
        3,162,81,0,1367,1366,1,0,0,0,1368,1371,1,0,0,0,1369,1367,1,0,0,0,
        1369,1370,1,0,0,0,1370,1372,1,0,0,0,1371,1369,1,0,0,0,1372,1374,
        3,174,87,0,1373,1375,3,176,88,0,1374,1373,1,0,0,0,1374,1375,1,0,
        0,0,1375,161,1,0,0,0,1376,1382,3,158,79,0,1377,1382,3,164,82,0,1378,
        1382,3,166,83,0,1379,1382,3,168,84,0,1380,1382,3,170,85,0,1381,1376,
        1,0,0,0,1381,1377,1,0,0,0,1381,1378,1,0,0,0,1381,1379,1,0,0,0,1381,
        1380,1,0,0,0,1382,163,1,0,0,0,1383,1384,5,63,0,0,1384,1385,3,552,
        276,0,1385,1386,5,150,0,0,1386,1387,3,52,26,0,1387,165,1,0,0,0,1388,
        1389,5,115,0,0,1389,1390,3,52,26,0,1390,167,1,0,0,0,1391,1393,5,
        62,0,0,1392,1394,3,8,4,0,1393,1392,1,0,0,0,1393,1394,1,0,0,0,1394,
        1395,1,0,0,0,1395,1396,3,552,276,0,1396,1397,5,55,0,0,1397,1398,
        3,52,26,0,1398,1399,5,72,0,0,1399,1400,3,52,26,0,1400,1401,5,39,
        0,0,1401,1404,3,52,26,0,1402,1403,5,60,0,0,1403,1405,3,552,276,0,
        1404,1402,1,0,0,0,1404,1405,1,0,0,0,1405,169,1,0,0,0,1406,1407,5,
        75,0,0,1407,1412,3,172,86,0,1408,1409,5,137,0,0,1409,1411,3,172,
        86,0,1410,1408,1,0,0,0,1411,1414,1,0,0,0,1412,1410,1,0,0,0,1412,
        1413,1,0,0,0,1413,171,1,0,0,0,1414,1412,1,0,0,0,1415,1417,3,52,26,
        0,1416,1418,7,8,0,0,1417,1416,1,0,0,0,1417,1418,1,0,0,0,1418,173,
        1,0,0,0,1419,1420,5,89,0,0,1420,1427,3,52,26,0,1421,1422,5,52,0,
        0,1422,1423,3,52,26,0,1423,1424,5,21,0,0,1424,1425,3,52,26,0,1425,
        1427,1,0,0,0,1426,1419,1,0,0,0,1426,1421,1,0,0,0,1427,175,1,0,0,
        0,1428,1429,5,60,0,0,1429,1430,3,552,276,0,1430,1431,3,160,80,0,
        1431,177,1,0,0,0,1432,1436,3,190,95,0,1433,1436,3,180,90,0,1434,
        1436,3,192,96,0,1435,1432,1,0,0,0,1435,1433,1,0,0,0,1435,1434,1,
        0,0,0,1436,179,1,0,0,0,1437,1438,3,226,113,0,1438,1439,5,139,0,0,
        1439,1445,1,0,0,0,1440,1441,3,238,119,0,1441,1442,5,139,0,0,1442,
        1445,1,0,0,0,1443,1445,3,182,91,0,1444,1437,1,0,0,0,1444,1440,1,
        0,0,0,1444,1443,1,0,0,0,1445,181,1,0,0,0,1446,1447,3,184,92,0,1447,
        1448,3,188,94,0,1448,183,1,0,0,0,1449,1451,3,186,93,0,1450,1449,
        1,0,0,0,1450,1451,1,0,0,0,1451,1452,1,0,0,0,1452,1453,3,364,182,
        0,1453,1455,3,552,276,0,1454,1456,3,296,148,0,1455,1454,1,0,0,0,
        1455,1456,1,0,0,0,1456,1457,1,0,0,0,1457,1459,5,134,0,0,1458,1460,
        3,370,185,0,1459,1458,1,0,0,0,1459,1460,1,0,0,0,1460,1461,1,0,0,
        0,1461,1463,5,135,0,0,1462,1464,3,304,152,0,1463,1462,1,0,0,0,1463,
        1464,1,0,0,0,1464,185,1,0,0,0,1465,1467,7,9,0,0,1466,1468,5,94,0,
        0,1467,1466,1,0,0,0,1467,1468,1,0,0,0,1468,1476,1,0,0,0,1469,1471,
        5,94,0,0,1470,1472,7,9,0,0,1471,1470,1,0,0,0,1471,1472,1,0,0,0,1472,
        1476,1,0,0,0,1473,1474,5,107,0,0,1474,1476,5,96,0,0,1475,1465,1,
        0,0,0,1475,1469,1,0,0,0,1475,1473,1,0,0,0,1476,187,1,0,0,0,1477,
        1483,3,224,112,0,1478,1479,3,464,232,0,1479,1480,3,100,50,0,1480,
        1481,5,139,0,0,1481,1483,1,0,0,0,1482,1477,1,0,0,0,1482,1478,1,0,
        0,0,1483,189,1,0,0,0,1484,1485,3,552,276,0,1485,1486,5,138,0,0,1486,
        1487,3,178,89,0,1487,191,1,0,0,0,1488,1582,3,224,112,0,1489,1582,
        3,194,97,0,1490,1491,3,52,26,0,1491,1492,5,139,0,0,1492,1582,1,0,
        0,0,1493,1582,3,196,98,0,1494,1495,5,97,0,0,1495,1496,5,134,0,0,
        1496,1497,3,52,26,0,1497,1498,5,135,0,0,1498,1502,5,130,0,0,1499,
        1501,3,240,120,0,1500,1499,1,0,0,0,1501,1504,1,0,0,0,1502,1500,1,
        0,0,0,1502,1503,1,0,0,0,1503,1505,1,0,0,0,1504,1502,1,0,0,0,1505,
        1506,5,131,0,0,1506,1582,1,0,0,0,1507,1508,5,116,0,0,1508,1509,5,
        134,0,0,1509,1510,3,52,26,0,1510,1511,5,135,0,0,1511,1512,3,192,
        96,0,1512,1582,1,0,0,0,1513,1514,5,34,0,0,1514,1515,3,192,96,0,1515,
        1516,5,116,0,0,1516,1517,5,134,0,0,1517,1518,3,52,26,0,1518,1519,
        5,135,0,0,1519,1520,5,139,0,0,1520,1582,1,0,0,0,1521,1522,5,47,0,
        0,1522,1524,5,134,0,0,1523,1525,3,248,124,0,1524,1523,1,0,0,0,1524,
        1525,1,0,0,0,1525,1526,1,0,0,0,1526,1528,5,139,0,0,1527,1529,3,52,
        26,0,1528,1527,1,0,0,0,1528,1529,1,0,0,0,1529,1530,1,0,0,0,1530,
        1532,5,139,0,0,1531,1533,3,250,125,0,1532,1531,1,0,0,0,1532,1533,
        1,0,0,0,1533,1534,1,0,0,0,1534,1535,5,135,0,0,1535,1582,3,192,96,
        0,1536,1538,5,17,0,0,1537,1536,1,0,0,0,1537,1538,1,0,0,0,1538,1539,
        1,0,0,0,1539,1540,5,48,0,0,1540,1541,5,134,0,0,1541,1544,3,232,116,
        0,1542,1545,3,552,276,0,1543,1545,3,22,11,0,1544,1542,1,0,0,0,1544,
        1543,1,0,0,0,1545,1546,1,0,0,0,1546,1547,5,55,0,0,1547,1548,3,52,
        26,0,1548,1549,5,135,0,0,1549,1550,3,192,96,0,1550,1582,1,0,0,0,
        1551,1552,5,20,0,0,1552,1582,5,139,0,0,1553,1554,5,29,0,0,1554,1582,
        5,139,0,0,1555,1560,5,51,0,0,1556,1561,3,552,276,0,1557,1558,5,23,
        0,0,1558,1561,3,52,26,0,1559,1561,5,31,0,0,1560,1556,1,0,0,0,1560,
        1557,1,0,0,0,1560,1559,1,0,0,0,1561,1562,1,0,0,0,1562,1582,5,139,
        0,0,1563,1565,5,86,0,0,1564,1566,3,52,26,0,1565,1564,1,0,0,0,1565,
        1566,1,0,0,0,1566,1567,1,0,0,0,1567,1582,5,139,0,0,1568,1570,5,99,
        0,0,1569,1571,3,52,26,0,1570,1569,1,0,0,0,1570,1571,1,0,0,0,1571,
        1572,1,0,0,0,1572,1582,5,139,0,0,1573,1582,3,222,111,0,1574,1582,
        3,198,99,0,1575,1582,3,200,100,0,1576,1582,3,202,101,0,1577,1582,
        3,214,107,0,1578,1582,3,216,108,0,1579,1582,3,220,110,0,1580,1582,
        3,218,109,0,1581,1488,1,0,0,0,1581,1489,1,0,0,0,1581,1490,1,0,0,
        0,1581,1493,1,0,0,0,1581,1494,1,0,0,0,1581,1507,1,0,0,0,1581,1513,
        1,0,0,0,1581,1521,1,0,0,0,1581,1537,1,0,0,0,1581,1551,1,0,0,0,1581,
        1553,1,0,0,0,1581,1555,1,0,0,0,1581,1563,1,0,0,0,1581,1568,1,0,0,
        0,1581,1573,1,0,0,0,1581,1574,1,0,0,0,1581,1575,1,0,0,0,1581,1576,
        1,0,0,0,1581,1577,1,0,0,0,1581,1578,1,0,0,0,1581,1579,1,0,0,0,1581,
        1580,1,0,0,0,1582,193,1,0,0,0,1583,1584,5,139,0,0,1584,195,1,0,0,
        0,1585,1586,5,53,0,0,1586,1587,5,134,0,0,1587,1588,3,52,26,0,1588,
        1589,5,135,0,0,1589,1590,3,192,96,0,1590,1600,1,0,0,0,1591,1592,
        5,53,0,0,1592,1593,5,134,0,0,1593,1594,3,52,26,0,1594,1595,5,135,
        0,0,1595,1596,3,192,96,0,1596,1597,5,37,0,0,1597,1598,3,192,96,0,
        1598,1600,1,0,0,0,1599,1585,1,0,0,0,1599,1591,1,0,0,0,1600,197,1,
        0,0,0,1601,1602,5,26,0,0,1602,1603,3,224,112,0,1603,199,1,0,0,0,
        1604,1605,5,105,0,0,1605,1606,3,224,112,0,1606,201,1,0,0,0,1607,
        1608,5,64,0,0,1608,1609,5,134,0,0,1609,1610,3,52,26,0,1610,1611,
        5,135,0,0,1611,1612,3,192,96,0,1612,203,1,0,0,0,1613,1616,3,8,4,
        0,1614,1616,3,454,227,0,1615,1613,1,0,0,0,1615,1614,1,0,0,0,1616,
        205,1,0,0,0,1617,1618,5,93,0,0,1618,1619,3,8,4,0,1619,1620,5,132,
        0,0,1620,1621,3,52,26,0,1621,1622,5,133,0,0,1622,1634,1,0,0,0,1623,
        1625,5,93,0,0,1624,1626,3,8,4,0,1625,1624,1,0,0,0,1625,1626,1,0,
        0,0,1626,1627,1,0,0,0,1627,1629,5,132,0,0,1628,1630,3,52,26,0,1629,
        1628,1,0,0,0,1629,1630,1,0,0,0,1630,1631,1,0,0,0,1631,1632,5,133,
        0,0,1632,1634,3,208,104,0,1633,1617,1,0,0,0,1633,1623,1,0,0,0,1634,
        207,1,0,0,0,1635,1636,5,130,0,0,1636,1637,3,210,105,0,1637,1638,
        5,131,0,0,1638,209,1,0,0,0,1639,1644,3,212,106,0,1640,1641,5,137,
        0,0,1641,1643,3,212,106,0,1642,1640,1,0,0,0,1643,1646,1,0,0,0,1644,
        1642,1,0,0,0,1644,1645,1,0,0,0,1645,1648,1,0,0,0,1646,1644,1,0,0,
        0,1647,1649,5,137,0,0,1648,1647,1,0,0,0,1648,1649,1,0,0,0,1649,211,
        1,0,0,0,1650,1651,3,52,26,0,1651,213,1,0,0,0,1652,1653,5,109,0,0,
        1653,1654,5,134,0,0,1654,1655,3,262,131,0,1655,1656,5,135,0,0,1656,
        1657,3,192,96,0,1657,215,1,0,0,0,1658,1659,5,117,0,0,1659,1660,5,
        86,0,0,1660,1661,3,52,26,0,1661,1662,5,139,0,0,1662,1667,1,0,0,0,
        1663,1664,5,117,0,0,1664,1665,5,20,0,0,1665,1667,5,139,0,0,1666,
        1658,1,0,0,0,1666,1663,1,0,0,0,1667,217,1,0,0,0,1668,1669,5,45,0,
        0,1669,1670,5,134,0,0,1670,1671,3,454,227,0,1671,1672,3,456,228,
        0,1672,1673,5,135,0,0,1673,1674,3,192,96,0,1674,219,1,0,0,0,1675,
        1676,5,107,0,0,1676,1677,3,224,112,0,1677,221,1,0,0,0,1678,1679,
        5,101,0,0,1679,1680,3,224,112,0,1680,1681,3,252,126,0,1681,1690,
        1,0,0,0,1682,1683,5,101,0,0,1683,1685,3,224,112,0,1684,1686,3,252,
        126,0,1685,1684,1,0,0,0,1685,1686,1,0,0,0,1686,1687,1,0,0,0,1687,
        1688,3,260,130,0,1688,1690,1,0,0,0,1689,1678,1,0,0,0,1689,1682,1,
        0,0,0,1690,223,1,0,0,0,1691,1693,5,130,0,0,1692,1694,3,246,123,0,
        1693,1692,1,0,0,0,1693,1694,1,0,0,0,1694,1695,1,0,0,0,1695,1696,
        5,131,0,0,1696,225,1,0,0,0,1697,1702,5,109,0,0,1698,1702,5,84,0,
        0,1699,1700,5,84,0,0,1700,1702,5,83,0,0,1701,1697,1,0,0,0,1701,1698,
        1,0,0,0,1701,1699,1,0,0,0,1701,1702,1,0,0,0,1702,1703,1,0,0,0,1703,
        1704,3,232,116,0,1704,1709,3,234,117,0,1705,1706,5,137,0,0,1706,
        1708,3,234,117,0,1707,1705,1,0,0,0,1708,1711,1,0,0,0,1709,1707,1,
        0,0,0,1709,1710,1,0,0,0,1710,1723,1,0,0,0,1711,1709,1,0,0,0,1712,
        1713,5,45,0,0,1713,1714,3,454,227,0,1714,1715,3,456,228,0,1715,1723,
        1,0,0,0,1716,1717,5,110,0,0,1717,1718,3,18,9,0,1718,1719,5,150,0,
        0,1719,1720,3,52,26,0,1720,1723,1,0,0,0,1721,1723,3,228,114,0,1722,
        1701,1,0,0,0,1722,1712,1,0,0,0,1722,1716,1,0,0,0,1722,1721,1,0,0,
        0,1723,227,1,0,0,0,1724,1725,5,107,0,0,1725,1726,5,130,0,0,1726,
        1727,3,230,115,0,1727,1728,5,131,0,0,1728,229,1,0,0,0,1729,1730,
        5,32,0,0,1730,1731,5,142,0,0,1731,1732,5,151,0,0,1732,1733,3,12,
        6,0,1733,1734,5,152,0,0,1734,1735,3,552,276,0,1735,1736,5,150,0,
        0,1736,1737,5,145,0,0,1737,1738,3,552,276,0,1738,1739,5,139,0,0,
        1739,231,1,0,0,0,1740,1743,5,110,0,0,1741,1743,3,8,4,0,1742,1740,
        1,0,0,0,1742,1741,1,0,0,0,1743,233,1,0,0,0,1744,1750,3,552,276,0,
        1745,1747,5,150,0,0,1746,1748,5,84,0,0,1747,1746,1,0,0,0,1747,1748,
        1,0,0,0,1748,1749,1,0,0,0,1749,1751,3,236,118,0,1750,1745,1,0,0,
        0,1750,1751,1,0,0,0,1751,235,1,0,0,0,1752,1757,3,52,26,0,1753,1757,
        3,416,208,0,1754,1757,3,208,104,0,1755,1757,3,22,11,0,1756,1752,
        1,0,0,0,1756,1753,1,0,0,0,1756,1754,1,0,0,0,1756,1755,1,0,0,0,1757,
        237,1,0,0,0,1758,1759,5,28,0,0,1759,1760,3,8,4,0,1760,1761,3,354,
        177,0,1761,239,1,0,0,0,1762,1764,3,242,121,0,1763,1762,1,0,0,0,1764,
        1765,1,0,0,0,1765,1763,1,0,0,0,1765,1766,1,0,0,0,1766,1767,1,0,0,
        0,1767,1768,3,246,123,0,1768,241,1,0,0,0,1769,1770,5,23,0,0,1770,
        1772,3,52,26,0,1771,1773,3,244,122,0,1772,1771,1,0,0,0,1772,1773,
        1,0,0,0,1773,1774,1,0,0,0,1774,1775,5,138,0,0,1775,1786,1,0,0,0,
        1776,1777,5,23,0,0,1777,1779,3,312,156,0,1778,1780,3,244,122,0,1779,
        1778,1,0,0,0,1779,1780,1,0,0,0,1780,1781,1,0,0,0,1781,1782,5,138,
        0,0,1782,1786,1,0,0,0,1783,1784,5,31,0,0,1784,1786,5,138,0,0,1785,
        1769,1,0,0,0,1785,1776,1,0,0,0,1785,1783,1,0,0,0,1786,243,1,0,0,
        0,1787,1788,5,114,0,0,1788,1789,3,52,26,0,1789,245,1,0,0,0,1790,
        1792,3,178,89,0,1791,1790,1,0,0,0,1792,1793,1,0,0,0,1793,1791,1,
        0,0,0,1793,1794,1,0,0,0,1794,247,1,0,0,0,1795,1805,3,226,113,0,1796,
        1801,3,52,26,0,1797,1798,5,137,0,0,1798,1800,3,52,26,0,1799,1797,
        1,0,0,0,1800,1803,1,0,0,0,1801,1799,1,0,0,0,1801,1802,1,0,0,0,1802,
        1805,1,0,0,0,1803,1801,1,0,0,0,1804,1795,1,0,0,0,1804,1796,1,0,0,
        0,1805,249,1,0,0,0,1806,1811,3,52,26,0,1807,1808,5,137,0,0,1808,
        1810,3,52,26,0,1809,1807,1,0,0,0,1810,1813,1,0,0,0,1811,1809,1,0,
        0,0,1811,1812,1,0,0,0,1812,251,1,0,0,0,1813,1811,1,0,0,0,1814,1818,
        3,254,127,0,1815,1817,3,254,127,0,1816,1815,1,0,0,0,1817,1820,1,
        0,0,0,1818,1816,1,0,0,0,1818,1819,1,0,0,0,1819,1822,1,0,0,0,1820,
        1818,1,0,0,0,1821,1823,3,256,128,0,1822,1821,1,0,0,0,1822,1823,1,
        0,0,0,1823,1826,1,0,0,0,1824,1826,3,256,128,0,1825,1814,1,0,0,0,
        1825,1824,1,0,0,0,1826,253,1,0,0,0,1827,1828,5,24,0,0,1828,1829,
        5,134,0,0,1829,1831,3,42,21,0,1830,1832,3,552,276,0,1831,1830,1,
        0,0,0,1831,1832,1,0,0,0,1832,1833,1,0,0,0,1833,1835,5,135,0,0,1834,
        1836,3,258,129,0,1835,1834,1,0,0,0,1835,1836,1,0,0,0,1836,1837,1,
        0,0,0,1837,1838,3,224,112,0,1838,255,1,0,0,0,1839,1841,5,24,0,0,
        1840,1842,3,258,129,0,1841,1840,1,0,0,0,1841,1842,1,0,0,0,1842,1843,
        1,0,0,0,1843,1844,3,224,112,0,1844,257,1,0,0,0,1845,1846,5,114,0,
        0,1846,1847,5,134,0,0,1847,1848,3,52,26,0,1848,1849,5,135,0,0,1849,
        259,1,0,0,0,1850,1851,5,44,0,0,1851,1852,3,224,112,0,1852,261,1,
        0,0,0,1853,1856,3,226,113,0,1854,1856,3,52,26,0,1855,1853,1,0,0,
        0,1855,1854,1,0,0,0,1856,263,1,0,0,0,1857,1858,5,67,0,0,1858,1859,
        3,266,133,0,1859,1861,3,268,134,0,1860,1862,5,139,0,0,1861,1860,
        1,0,0,0,1861,1862,1,0,0,0,1862,265,1,0,0,0,1863,1868,3,552,276,0,
        1864,1865,5,136,0,0,1865,1867,3,552,276,0,1866,1864,1,0,0,0,1867,
        1870,1,0,0,0,1868,1866,1,0,0,0,1868,1869,1,0,0,0,1869,267,1,0,0,
        0,1870,1868,1,0,0,0,1871,1873,5,130,0,0,1872,1874,3,270,135,0,1873,
        1872,1,0,0,0,1873,1874,1,0,0,0,1874,1876,1,0,0,0,1875,1877,3,274,
        137,0,1876,1875,1,0,0,0,1876,1877,1,0,0,0,1877,1879,1,0,0,0,1878,
        1880,3,278,139,0,1879,1878,1,0,0,0,1879,1880,1,0,0,0,1880,1881,1,
        0,0,0,1881,1884,5,131,0,0,1882,1884,5,139,0,0,1883,1871,1,0,0,0,
        1883,1882,1,0,0,0,1884,269,1,0,0,0,1885,1887,3,272,136,0,1886,1885,
        1,0,0,0,1887,1888,1,0,0,0,1888,1886,1,0,0,0,1888,1889,1,0,0,0,1889,
        271,1,0,0,0,1890,1891,5,42,0,0,1891,1892,5,12,0,0,1892,1893,3,552,
        276,0,1893,1894,5,139,0,0,1894,273,1,0,0,0,1895,1897,3,276,138,0,
        1896,1895,1,0,0,0,1897,1898,1,0,0,0,1898,1896,1,0,0,0,1898,1899,
        1,0,0,0,1899,275,1,0,0,0,1900,1901,5,109,0,0,1901,1902,3,552,276,
        0,1902,1903,5,150,0,0,1903,1904,3,6,3,0,1904,1905,5,139,0,0,1905,
        1916,1,0,0,0,1906,1907,5,109,0,0,1907,1908,3,6,3,0,1908,1909,5,139,
        0,0,1909,1916,1,0,0,0,1910,1911,5,109,0,0,1911,1912,5,94,0,0,1912,
        1913,3,6,3,0,1913,1914,5,139,0,0,1914,1916,1,0,0,0,1915,1900,1,0,
        0,0,1915,1906,1,0,0,0,1915,1910,1,0,0,0,1916,277,1,0,0,0,1917,1919,
        3,280,140,0,1918,1917,1,0,0,0,1919,1920,1,0,0,0,1920,1918,1,0,0,
        0,1920,1921,1,0,0,0,1921,279,1,0,0,0,1922,1927,3,264,132,0,1923,
        1927,3,282,141,0,1924,1927,3,334,167,0,1925,1927,3,350,175,0,1926,
        1922,1,0,0,0,1926,1923,1,0,0,0,1926,1924,1,0,0,0,1926,1925,1,0,0,
        0,1927,281,1,0,0,0,1928,1930,3,442,221,0,1929,1928,1,0,0,0,1929,
        1930,1,0,0,0,1930,1932,1,0,0,0,1931,1933,3,346,173,0,1932,1931,1,
        0,0,0,1932,1933,1,0,0,0,1933,1940,1,0,0,0,1934,1941,3,494,247,0,
        1935,1941,3,498,249,0,1936,1941,3,502,251,0,1937,1941,3,504,252,
        0,1938,1941,3,506,253,0,1939,1941,3,284,142,0,1940,1934,1,0,0,0,
        1940,1935,1,0,0,0,1940,1936,1,0,0,0,1940,1937,1,0,0,0,1940,1938,
        1,0,0,0,1940,1939,1,0,0,0,1941,283,1,0,0,0,1942,1944,5,118,0,0,1943,
        1945,5,96,0,0,1944,1943,1,0,0,0,1944,1945,1,0,0,0,1945,1946,1,0,
        0,0,1946,1948,3,552,276,0,1947,1949,3,296,148,0,1948,1947,1,0,0,
        0,1948,1949,1,0,0,0,1949,1951,1,0,0,0,1950,1952,3,286,143,0,1951,
        1950,1,0,0,0,1951,1952,1,0,0,0,1952,1954,1,0,0,0,1953,1955,3,304,
        152,0,1954,1953,1,0,0,0,1954,1955,1,0,0,0,1955,1956,1,0,0,0,1956,
        1958,5,134,0,0,1957,1959,3,290,145,0,1958,1957,1,0,0,0,1958,1959,
        1,0,0,0,1959,1960,1,0,0,0,1960,1961,5,135,0,0,1961,1962,3,288,144,
        0,1962,285,1,0,0,0,1963,1964,5,138,0,0,1964,1969,3,42,21,0,1965,
        1966,5,137,0,0,1966,1968,3,6,3,0,1967,1965,1,0,0,0,1968,1971,1,0,
        0,0,1969,1967,1,0,0,0,1969,1970,1,0,0,0,1970,287,1,0,0,0,1971,1969,
        1,0,0,0,1972,1974,5,130,0,0,1973,1975,3,342,171,0,1974,1973,1,0,
        0,0,1974,1975,1,0,0,0,1975,1976,1,0,0,0,1976,1979,5,131,0,0,1977,
        1979,5,139,0,0,1978,1972,1,0,0,0,1978,1977,1,0,0,0,1979,289,1,0,
        0,0,1980,1985,3,292,146,0,1981,1982,5,137,0,0,1982,1984,3,292,146,
        0,1983,1981,1,0,0,0,1984,1987,1,0,0,0,1985,1983,1,0,0,0,1985,1986,
        1,0,0,0,1986,291,1,0,0,0,1987,1985,1,0,0,0,1988,1990,3,442,221,0,
        1989,1988,1,0,0,0,1989,1990,1,0,0,0,1990,1991,1,0,0,0,1991,1992,
        3,8,4,0,1992,1993,3,552,276,0,1993,293,1,0,0,0,1994,1995,3,552,276,
        0,1995,1996,5,154,0,0,1996,1998,3,552,276,0,1997,1999,3,44,22,0,
        1998,1997,1,0,0,0,1998,1999,1,0,0,0,1999,295,1,0,0,0,2000,2001,5,
        151,0,0,2001,2006,3,298,149,0,2002,2003,5,137,0,0,2003,2005,3,298,
        149,0,2004,2002,1,0,0,0,2005,2008,1,0,0,0,2006,2004,1,0,0,0,2006,
        2007,1,0,0,0,2007,2009,1,0,0,0,2008,2006,1,0,0,0,2009,2010,5,152,
        0,0,2010,297,1,0,0,0,2011,2013,3,442,221,0,2012,2011,1,0,0,0,2012,
        2013,1,0,0,0,2013,2014,1,0,0,0,2014,2015,3,552,276,0,2015,299,1,
        0,0,0,2016,2017,5,138,0,0,2017,2022,3,42,21,0,2018,2019,5,137,0,
        0,2019,2021,3,6,3,0,2020,2018,1,0,0,0,2021,2024,1,0,0,0,2022,2020,
        1,0,0,0,2022,2023,1,0,0,0,2023,301,1,0,0,0,2024,2022,1,0,0,0,2025,
        2030,3,6,3,0,2026,2027,5,137,0,0,2027,2029,3,6,3,0,2028,2026,1,0,
        0,0,2029,2032,1,0,0,0,2030,2028,1,0,0,0,2030,2031,1,0,0,0,2031,303,
        1,0,0,0,2032,2030,1,0,0,0,2033,2035,3,306,153,0,2034,2033,1,0,0,
        0,2035,2036,1,0,0,0,2036,2034,1,0,0,0,2036,2037,1,0,0,0,2037,305,
        1,0,0,0,2038,2039,5,115,0,0,2039,2040,3,552,276,0,2040,2041,5,138,
        0,0,2041,2042,3,308,154,0,2042,307,1,0,0,0,2043,2054,3,338,169,0,
        2044,2047,3,310,155,0,2045,2046,5,137,0,0,2046,2048,3,336,168,0,
        2047,2045,1,0,0,0,2047,2048,1,0,0,0,2048,2051,1,0,0,0,2049,2050,
        5,137,0,0,2050,2052,3,338,169,0,2051,2049,1,0,0,0,2051,2052,1,0,
        0,0,2052,2054,1,0,0,0,2053,2043,1,0,0,0,2053,2044,1,0,0,0,2054,309,
        1,0,0,0,2055,2063,3,42,21,0,2056,2058,5,27,0,0,2057,2059,5,153,0,
        0,2058,2057,1,0,0,0,2058,2059,1,0,0,0,2059,2063,1,0,0,0,2060,2063,
        5,96,0,0,2061,2063,5,106,0,0,2062,2055,1,0,0,0,2062,2056,1,0,0,0,
        2062,2060,1,0,0,0,2062,2061,1,0,0,0,2063,311,1,0,0,0,2064,2073,3,
        322,161,0,2065,2073,3,328,164,0,2066,2073,3,330,165,0,2067,2073,
        3,314,157,0,2068,2073,3,316,158,0,2069,2073,3,318,159,0,2070,2073,
        3,320,160,0,2071,2073,3,52,26,0,2072,2064,1,0,0,0,2072,2065,1,0,
        0,0,2072,2066,1,0,0,0,2072,2067,1,0,0,0,2072,2068,1,0,0,0,2072,2069,
        1,0,0,0,2072,2070,1,0,0,0,2072,2071,1,0,0,0,2073,313,1,0,0,0,2074,
        2075,5,151,0,0,2075,2083,3,52,26,0,2076,2077,5,163,0,0,2077,2083,
        3,52,26,0,2078,2079,5,152,0,0,2079,2083,3,52,26,0,2080,2081,5,164,
        0,0,2081,2083,3,52,26,0,2082,2074,1,0,0,0,2082,2076,1,0,0,0,2082,
        2078,1,0,0,0,2082,2080,1,0,0,0,2083,315,1,0,0,0,2084,2085,3,314,
        157,0,2085,2086,5,11,0,0,2086,2087,3,312,156,0,2087,317,1,0,0,0,
        2088,2089,3,314,157,0,2089,2090,5,73,0,0,2090,2091,3,312,156,0,2091,
        319,1,0,0,0,2092,2093,5,69,0,0,2093,2094,3,312,156,0,2094,321,1,
        0,0,0,2095,2096,3,8,4,0,2096,2097,3,324,162,0,2097,323,1,0,0,0,2098,
        2099,3,326,163,0,2099,325,1,0,0,0,2100,2101,3,552,276,0,2101,327,
        1,0,0,0,2102,2103,3,490,245,0,2103,329,1,0,0,0,2104,2105,5,110,0,
        0,2105,2106,3,332,166,0,2106,331,1,0,0,0,2107,2108,3,324,162,0,2108,
        333,1,0,0,0,2109,2111,3,442,221,0,2110,2112,5,58,0,0,2111,2110,1,
        0,0,0,2111,2112,1,0,0,0,2112,2114,1,0,0,0,2113,2115,5,82,0,0,2114,
        2113,1,0,0,0,2114,2115,1,0,0,0,2115,2116,1,0,0,0,2116,2117,5,94,
        0,0,2117,2118,5,112,0,0,2118,2119,3,552,276,0,2119,2120,5,134,0,
        0,2120,2121,5,135,0,0,2121,2122,3,368,184,0,2122,335,1,0,0,0,2123,
        2128,3,6,3,0,2124,2125,5,137,0,0,2125,2127,3,6,3,0,2126,2124,1,0,
        0,0,2127,2130,1,0,0,0,2128,2126,1,0,0,0,2128,2129,1,0,0,0,2129,337,
        1,0,0,0,2130,2128,1,0,0,0,2131,2132,5,68,0,0,2132,2133,5,134,0,0,
        2133,2134,5,135,0,0,2134,339,1,0,0,0,2135,2137,5,130,0,0,2136,2138,
        3,342,171,0,2137,2136,1,0,0,0,2137,2138,1,0,0,0,2138,2139,1,0,0,
        0,2139,2140,5,131,0,0,2140,341,1,0,0,0,2141,2143,3,344,172,0,2142,
        2141,1,0,0,0,2143,2144,1,0,0,0,2144,2142,1,0,0,0,2144,2145,1,0,0,
        0,2145,343,1,0,0,0,2146,2148,3,442,221,0,2147,2146,1,0,0,0,2147,
        2148,1,0,0,0,2148,2150,1,0,0,0,2149,2151,3,346,173,0,2150,2149,1,
        0,0,0,2150,2151,1,0,0,0,2151,2154,1,0,0,0,2152,2155,3,350,175,0,
        2153,2155,3,518,259,0,2154,2152,1,0,0,0,2154,2153,1,0,0,0,2155,345,
        1,0,0,0,2156,2158,3,348,174,0,2157,2156,1,0,0,0,2158,2159,1,0,0,
        0,2159,2157,1,0,0,0,2159,2160,1,0,0,0,2160,347,1,0,0,0,2161,2162,
        7,10,0,0,2162,349,1,0,0,0,2163,2183,3,514,257,0,2164,2183,3,352,
        176,0,2165,2183,3,508,254,0,2166,2172,3,400,200,0,2167,2173,3,404,
        202,0,2168,2169,3,464,232,0,2169,2170,3,100,50,0,2170,2171,5,139,
        0,0,2171,2173,1,0,0,0,2172,2167,1,0,0,0,2172,2168,1,0,0,0,2173,2183,
        1,0,0,0,2174,2183,3,520,260,0,2175,2183,3,522,261,0,2176,2183,3,
        494,247,0,2177,2183,3,498,249,0,2178,2183,3,502,251,0,2179,2183,
        3,504,252,0,2180,2183,3,506,253,0,2181,2183,3,284,142,0,2182,2163,
        1,0,0,0,2182,2164,1,0,0,0,2182,2165,1,0,0,0,2182,2166,1,0,0,0,2182,
        2174,1,0,0,0,2182,2175,1,0,0,0,2182,2176,1,0,0,0,2182,2177,1,0,0,
        0,2182,2178,1,0,0,0,2182,2179,1,0,0,0,2182,2180,1,0,0,0,2182,2181,
        1,0,0,0,2183,351,1,0,0,0,2184,2190,5,84,0,0,2185,2186,5,83,0,0,2186,
        2190,5,84,0,0,2187,2188,5,84,0,0,2188,2190,5,83,0,0,2189,2184,1,
        0,0,0,2189,2185,1,0,0,0,2189,2187,1,0,0,0,2189,2190,1,0,0,0,2190,
        2191,1,0,0,0,2191,2201,3,8,4,0,2192,2193,3,6,3,0,2193,2194,5,136,
        0,0,2194,2195,3,516,258,0,2195,2202,1,0,0,0,2196,2202,3,522,261,
        0,2197,2202,3,512,256,0,2198,2202,3,516,258,0,2199,2202,3,542,271,
        0,2200,2202,3,510,255,0,2201,2192,1,0,0,0,2201,2196,1,0,0,0,2201,
        2197,1,0,0,0,2201,2198,1,0,0,0,2201,2199,1,0,0,0,2201,2200,1,0,0,
        0,2202,353,1,0,0,0,2203,2208,3,356,178,0,2204,2205,5,137,0,0,2205,
        2207,3,356,178,0,2206,2204,1,0,0,0,2207,2210,1,0,0,0,2208,2206,1,
        0,0,0,2208,2209,1,0,0,0,2209,355,1,0,0,0,2210,2208,1,0,0,0,2211,
        2212,3,552,276,0,2212,2213,5,150,0,0,2213,2214,3,52,26,0,2214,357,
        1,0,0,0,2215,2220,3,360,180,0,2216,2217,5,137,0,0,2217,2219,3,360,
        180,0,2218,2216,1,0,0,0,2219,2222,1,0,0,0,2220,2218,1,0,0,0,2220,
        2221,1,0,0,0,2221,359,1,0,0,0,2222,2220,1,0,0,0,2223,2226,3,552,
        276,0,2224,2225,5,150,0,0,2225,2227,3,362,181,0,2226,2224,1,0,0,
        0,2226,2227,1,0,0,0,2227,361,1,0,0,0,2228,2231,3,52,26,0,2229,2231,
        3,416,208,0,2230,2228,1,0,0,0,2230,2229,1,0,0,0,2231,363,1,0,0,0,
        2232,2235,3,8,4,0,2233,2235,5,112,0,0,2234,2232,1,0,0,0,2234,2233,
        1,0,0,0,2235,365,1,0,0,0,2236,2237,3,6,3,0,2237,367,1,0,0,0,2238,
        2245,3,224,112,0,2239,2245,5,139,0,0,2240,2241,3,464,232,0,2241,
        2242,3,52,26,0,2242,2243,5,139,0,0,2243,2245,1,0,0,0,2244,2238,1,
        0,0,0,2244,2239,1,0,0,0,2244,2240,1,0,0,0,2245,369,1,0,0,0,2246,
        2253,3,378,189,0,2247,2250,3,372,186,0,2248,2249,5,137,0,0,2249,
        2251,3,378,189,0,2250,2248,1,0,0,0,2250,2251,1,0,0,0,2251,2253,1,
        0,0,0,2252,2246,1,0,0,0,2252,2247,1,0,0,0,2253,371,1,0,0,0,2254,
        2259,3,374,187,0,2255,2256,5,137,0,0,2256,2258,3,374,187,0,2257,
        2255,1,0,0,0,2258,2261,1,0,0,0,2259,2257,1,0,0,0,2259,2260,1,0,0,
        0,2260,373,1,0,0,0,2261,2259,1,0,0,0,2262,2264,3,442,221,0,2263,
        2262,1,0,0,0,2263,2264,1,0,0,0,2264,2266,1,0,0,0,2265,2267,3,376,
        188,0,2266,2265,1,0,0,0,2266,2267,1,0,0,0,2267,2268,1,0,0,0,2268,
        2271,3,544,272,0,2269,2271,5,13,0,0,2270,2263,1,0,0,0,2270,2269,
        1,0,0,0,2271,375,1,0,0,0,2272,2281,5,84,0,0,2273,2281,5,76,0,0,2274,
        2281,5,55,0,0,2275,2276,5,84,0,0,2276,2281,5,98,0,0,2277,2278,5,
        55,0,0,2278,2281,5,98,0,0,2279,2281,5,98,0,0,2280,2272,1,0,0,0,2280,
        2273,1,0,0,0,2280,2274,1,0,0,0,2280,2275,1,0,0,0,2280,2277,1,0,0,
        0,2280,2279,1,0,0,0,2281,377,1,0,0,0,2282,2284,3,442,221,0,2283,
        2282,1,0,0,0,2283,2284,1,0,0,0,2284,2285,1,0,0,0,2285,2286,5,78,
        0,0,2286,2287,3,412,206,0,2287,2288,3,552,276,0,2288,379,1,0,0,0,
        2289,2291,3,442,221,0,2290,2289,1,0,0,0,2290,2291,1,0,0,0,2291,2293,
        1,0,0,0,2292,2294,3,388,194,0,2293,2292,1,0,0,0,2293,2294,1,0,0,
        0,2294,2315,1,0,0,0,2295,2296,5,50,0,0,2296,2298,3,390,195,0,2297,
        2299,3,386,193,0,2298,2297,1,0,0,0,2298,2299,1,0,0,0,2299,2316,1,
        0,0,0,2300,2301,5,90,0,0,2301,2303,3,390,195,0,2302,2304,3,384,192,
        0,2303,2302,1,0,0,0,2303,2304,1,0,0,0,2304,2316,1,0,0,0,2305,2306,
        5,50,0,0,2306,2308,3,390,195,0,2307,2309,3,382,191,0,2308,2307,1,
        0,0,0,2308,2309,1,0,0,0,2309,2316,1,0,0,0,2310,2311,5,59,0,0,2311,
        2313,3,390,195,0,2312,2314,3,384,192,0,2313,2312,1,0,0,0,2313,2314,
        1,0,0,0,2314,2316,1,0,0,0,2315,2295,1,0,0,0,2315,2300,1,0,0,0,2315,
        2305,1,0,0,0,2315,2310,1,0,0,0,2316,381,1,0,0,0,2317,2319,3,442,
        221,0,2318,2317,1,0,0,0,2318,2319,1,0,0,0,2319,2320,1,0,0,0,2320,
        2321,5,59,0,0,2321,2322,3,390,195,0,2322,383,1,0,0,0,2323,2325,3,
        442,221,0,2324,2323,1,0,0,0,2324,2325,1,0,0,0,2325,2327,1,0,0,0,
        2326,2328,3,388,194,0,2327,2326,1,0,0,0,2327,2328,1,0,0,0,2328,2329,
        1,0,0,0,2329,2330,5,50,0,0,2330,2331,3,390,195,0,2331,385,1,0,0,
        0,2332,2334,3,442,221,0,2333,2332,1,0,0,0,2333,2334,1,0,0,0,2334,
        2336,1,0,0,0,2335,2337,3,388,194,0,2336,2335,1,0,0,0,2336,2337,1,
        0,0,0,2337,2338,1,0,0,0,2338,2339,5,90,0,0,2339,2340,3,390,195,0,
        2340,387,1,0,0,0,2341,2354,5,81,0,0,2342,2354,5,58,0,0,2343,2354,
        5,80,0,0,2344,2345,5,81,0,0,2345,2354,5,58,0,0,2346,2347,5,58,0,
        0,2347,2354,5,81,0,0,2348,2349,5,81,0,0,2349,2354,5,80,0,0,2350,
        2351,5,80,0,0,2351,2354,5,81,0,0,2352,2354,5,83,0,0,2353,2341,1,
        0,0,0,2353,2342,1,0,0,0,2353,2343,1,0,0,0,2353,2344,1,0,0,0,2353,
        2346,1,0,0,0,2353,2348,1,0,0,0,2353,2350,1,0,0,0,2353,2352,1,0,0,
        0,2354,389,1,0,0,0,2355,2362,3,224,112,0,2356,2357,3,464,232,0,2357,
        2358,3,52,26,0,2358,2359,5,139,0,0,2359,2362,1,0,0,0,2360,2362,5,
        139,0,0,2361,2355,1,0,0,0,2361,2356,1,0,0,0,2361,2360,1,0,0,0,2362,
        391,1,0,0,0,2363,2365,3,442,221,0,2364,2363,1,0,0,0,2364,2365,1,
        0,0,0,2365,2374,1,0,0,0,2366,2367,5,10,0,0,2367,2368,3,224,112,0,
        2368,2369,3,396,198,0,2369,2375,1,0,0,0,2370,2371,5,85,0,0,2371,
        2372,3,224,112,0,2372,2373,3,394,197,0,2373,2375,1,0,0,0,2374,2366,
        1,0,0,0,2374,2370,1,0,0,0,2375,393,1,0,0,0,2376,2378,3,442,221,0,
        2377,2376,1,0,0,0,2377,2378,1,0,0,0,2378,2379,1,0,0,0,2379,2380,
        5,10,0,0,2380,2381,3,224,112,0,2381,395,1,0,0,0,2382,2384,3,442,
        221,0,2383,2382,1,0,0,0,2383,2384,1,0,0,0,2384,2385,1,0,0,0,2385,
        2386,5,85,0,0,2386,2387,3,224,112,0,2387,397,1,0,0,0,2388,2411,5,
        140,0,0,2389,2411,5,141,0,0,2390,2411,5,148,0,0,2391,2411,5,149,
        0,0,2392,2411,5,156,0,0,2393,2411,5,157,0,0,2394,2411,5,100,0,0,
        2395,2411,5,43,0,0,2396,2411,5,142,0,0,2397,2411,5,143,0,0,2398,
        2411,5,144,0,0,2399,2411,5,145,0,0,2400,2411,5,146,0,0,2401,2411,
        5,147,0,0,2402,2411,5,173,0,0,2403,2411,3,466,233,0,2404,2411,5,
        161,0,0,2405,2411,5,162,0,0,2406,2411,5,152,0,0,2407,2411,5,151,
        0,0,2408,2411,5,164,0,0,2409,2411,5,163,0,0,2410,2388,1,0,0,0,2410,
        2389,1,0,0,0,2410,2390,1,0,0,0,2410,2391,1,0,0,0,2410,2392,1,0,0,
        0,2410,2393,1,0,0,0,2410,2394,1,0,0,0,2410,2395,1,0,0,0,2410,2396,
        1,0,0,0,2410,2397,1,0,0,0,2410,2398,1,0,0,0,2410,2399,1,0,0,0,2410,
        2400,1,0,0,0,2410,2401,1,0,0,0,2410,2402,1,0,0,0,2410,2403,1,0,0,
        0,2410,2404,1,0,0,0,2410,2405,1,0,0,0,2410,2406,1,0,0,0,2410,2407,
        1,0,0,0,2410,2408,1,0,0,0,2410,2409,1,0,0,0,2411,399,1,0,0,0,2412,
        2413,7,11,0,0,2413,2414,5,74,0,0,2414,2415,3,8,4,0,2415,2416,5,134,
        0,0,2416,2417,3,544,272,0,2417,2418,5,135,0,0,2418,401,1,0,0,0,2419,
        2420,5,138,0,0,2420,2421,7,12,0,0,2421,2423,5,134,0,0,2422,2424,
        3,46,23,0,2423,2422,1,0,0,0,2423,2424,1,0,0,0,2424,2425,1,0,0,0,
        2425,2426,5,135,0,0,2426,403,1,0,0,0,2427,2434,3,224,112,0,2428,
        2434,5,139,0,0,2429,2430,3,464,232,0,2430,2431,3,52,26,0,2431,2432,
        5,139,0,0,2432,2434,1,0,0,0,2433,2427,1,0,0,0,2433,2428,1,0,0,0,
        2433,2429,1,0,0,0,2434,405,1,0,0,0,2435,2436,5,138,0,0,2436,2437,
        3,302,151,0,2437,407,1,0,0,0,2438,2442,5,130,0,0,2439,2441,3,410,
        205,0,2440,2439,1,0,0,0,2441,2444,1,0,0,0,2442,2440,1,0,0,0,2442,
        2443,1,0,0,0,2443,2445,1,0,0,0,2444,2442,1,0,0,0,2445,2448,5,131,
        0,0,2446,2448,5,139,0,0,2447,2438,1,0,0,0,2447,2446,1,0,0,0,2448,
        409,1,0,0,0,2449,2451,3,442,221,0,2450,2449,1,0,0,0,2450,2451,1,
        0,0,0,2451,2453,1,0,0,0,2452,2454,3,346,173,0,2453,2452,1,0,0,0,
        2453,2454,1,0,0,0,2454,2465,1,0,0,0,2455,2466,3,350,175,0,2456,2457,
        5,45,0,0,2457,2459,3,8,4,0,2458,2460,3,462,231,0,2459,2458,1,0,0,
        0,2460,2461,1,0,0,0,2461,2459,1,0,0,0,2461,2462,1,0,0,0,2462,2463,
        1,0,0,0,2463,2464,5,139,0,0,2464,2466,1,0,0,0,2465,2455,1,0,0,0,
        2465,2456,1,0,0,0,2466,411,1,0,0,0,2467,2475,3,14,7,0,2468,2470,
        7,13,0,0,2469,2468,1,0,0,0,2470,2473,1,0,0,0,2471,2469,1,0,0,0,2471,
        2472,1,0,0,0,2472,2474,1,0,0,0,2473,2471,1,0,0,0,2474,2476,3,414,
        207,0,2475,2471,1,0,0,0,2476,2477,1,0,0,0,2477,2475,1,0,0,0,2477,
        2478,1,0,0,0,2478,413,1,0,0,0,2479,2483,5,132,0,0,2480,2482,5,137,
        0,0,2481,2480,1,0,0,0,2482,2485,1,0,0,0,2483,2481,1,0,0,0,2483,2484,
        1,0,0,0,2484,2486,1,0,0,0,2485,2483,1,0,0,0,2486,2487,5,133,0,0,
        2487,415,1,0,0,0,2488,2500,5,130,0,0,2489,2494,3,362,181,0,2490,
        2491,5,137,0,0,2491,2493,3,362,181,0,2492,2490,1,0,0,0,2493,2496,
        1,0,0,0,2494,2492,1,0,0,0,2494,2495,1,0,0,0,2495,2498,1,0,0,0,2496,
        2494,1,0,0,0,2497,2499,5,137,0,0,2498,2497,1,0,0,0,2498,2499,1,0,
        0,0,2499,2501,1,0,0,0,2500,2489,1,0,0,0,2500,2501,1,0,0,0,2501,2502,
        1,0,0,0,2502,2503,5,131,0,0,2503,417,1,0,0,0,2504,2505,5,151,0,0,
        2505,2510,3,420,210,0,2506,2507,5,137,0,0,2507,2509,3,420,210,0,
        2508,2506,1,0,0,0,2509,2512,1,0,0,0,2510,2508,1,0,0,0,2510,2511,
        1,0,0,0,2511,2513,1,0,0,0,2512,2510,1,0,0,0,2513,2514,5,152,0,0,
        2514,419,1,0,0,0,2515,2517,3,442,221,0,2516,2515,1,0,0,0,2516,2517,
        1,0,0,0,2517,2519,1,0,0,0,2518,2520,3,422,211,0,2519,2518,1,0,0,
        0,2519,2520,1,0,0,0,2520,2521,1,0,0,0,2521,2522,3,552,276,0,2522,
        421,1,0,0,0,2523,2524,7,14,0,0,2524,423,1,0,0,0,2525,2526,5,138,
        0,0,2526,2527,3,302,151,0,2527,425,1,0,0,0,2528,2532,5,130,0,0,2529,
        2531,3,428,214,0,2530,2529,1,0,0,0,2531,2534,1,0,0,0,2532,2530,1,
        0,0,0,2532,2533,1,0,0,0,2533,2535,1,0,0,0,2534,2532,1,0,0,0,2535,
        2536,5,131,0,0,2536,427,1,0,0,0,2537,2539,3,442,221,0,2538,2537,
        1,0,0,0,2538,2539,1,0,0,0,2539,2541,1,0,0,0,2540,2542,5,68,0,0,2541,
        2540,1,0,0,0,2541,2542,1,0,0,0,2542,2606,1,0,0,0,2543,2545,5,107,
        0,0,2544,2543,1,0,0,0,2544,2545,1,0,0,0,2545,2551,1,0,0,0,2546,2552,
        5,84,0,0,2547,2548,5,84,0,0,2548,2552,5,83,0,0,2549,2550,5,83,0,
        0,2550,2552,5,84,0,0,2551,2546,1,0,0,0,2551,2547,1,0,0,0,2551,2549,
        1,0,0,0,2551,2552,1,0,0,0,2552,2553,1,0,0,0,2553,2581,3,8,4,0,2554,
        2556,3,552,276,0,2555,2557,3,296,148,0,2556,2555,1,0,0,0,2556,2557,
        1,0,0,0,2557,2558,1,0,0,0,2558,2560,5,134,0,0,2559,2561,3,370,185,
        0,2560,2559,1,0,0,0,2560,2561,1,0,0,0,2561,2562,1,0,0,0,2562,2564,
        5,135,0,0,2563,2565,3,304,152,0,2564,2563,1,0,0,0,2564,2565,1,0,
        0,0,2565,2566,1,0,0,0,2566,2567,5,139,0,0,2567,2582,1,0,0,0,2568,
        2569,3,552,276,0,2569,2570,5,130,0,0,2570,2571,3,430,215,0,2571,
        2572,5,131,0,0,2572,2582,1,0,0,0,2573,2574,5,98,0,0,2574,2575,5,
        132,0,0,2575,2576,3,370,185,0,2576,2577,5,133,0,0,2577,2578,5,130,
        0,0,2578,2579,3,430,215,0,2579,2580,5,131,0,0,2580,2582,1,0,0,0,
        2581,2554,1,0,0,0,2581,2568,1,0,0,0,2581,2573,1,0,0,0,2582,2607,
        1,0,0,0,2583,2585,5,107,0,0,2584,2583,1,0,0,0,2584,2585,1,0,0,0,
        2585,2586,1,0,0,0,2586,2587,5,112,0,0,2587,2589,3,552,276,0,2588,
        2590,3,296,148,0,2589,2588,1,0,0,0,2589,2590,1,0,0,0,2590,2591,1,
        0,0,0,2591,2593,5,134,0,0,2592,2594,3,370,185,0,2593,2592,1,0,0,
        0,2593,2594,1,0,0,0,2594,2595,1,0,0,0,2595,2597,5,135,0,0,2596,2598,
        3,304,152,0,2597,2596,1,0,0,0,2597,2598,1,0,0,0,2598,2599,1,0,0,
        0,2599,2600,5,139,0,0,2600,2607,1,0,0,0,2601,2602,5,40,0,0,2602,
        2603,3,8,4,0,2603,2604,3,552,276,0,2604,2605,5,139,0,0,2605,2607,
        1,0,0,0,2606,2544,1,0,0,0,2606,2584,1,0,0,0,2606,2601,1,0,0,0,2607,
        429,1,0,0,0,2608,2610,3,442,221,0,2609,2608,1,0,0,0,2609,2610,1,
        0,0,0,2610,2629,1,0,0,0,2611,2612,5,50,0,0,2612,2618,5,139,0,0,2613,
        2615,3,442,221,0,2614,2613,1,0,0,0,2614,2615,1,0,0,0,2615,2616,1,
        0,0,0,2616,2617,5,90,0,0,2617,2619,5,139,0,0,2618,2614,1,0,0,0,2618,
        2619,1,0,0,0,2619,2630,1,0,0,0,2620,2621,5,90,0,0,2621,2627,5,139,
        0,0,2622,2624,3,442,221,0,2623,2622,1,0,0,0,2623,2624,1,0,0,0,2624,
        2625,1,0,0,0,2625,2626,5,50,0,0,2626,2628,5,139,0,0,2627,2623,1,
        0,0,0,2627,2628,1,0,0,0,2628,2630,1,0,0,0,2629,2611,1,0,0,0,2629,
        2620,1,0,0,0,2630,431,1,0,0,0,2631,2632,5,138,0,0,2632,2633,3,8,
        4,0,2633,433,1,0,0,0,2634,2646,5,130,0,0,2635,2640,3,436,218,0,2636,
        2637,5,137,0,0,2637,2639,3,436,218,0,2638,2636,1,0,0,0,2639,2642,
        1,0,0,0,2640,2638,1,0,0,0,2640,2641,1,0,0,0,2641,2644,1,0,0,0,2642,
        2640,1,0,0,0,2643,2645,5,137,0,0,2644,2643,1,0,0,0,2644,2645,1,0,
        0,0,2645,2647,1,0,0,0,2646,2635,1,0,0,0,2646,2647,1,0,0,0,2647,2648,
        1,0,0,0,2648,2649,5,131,0,0,2649,435,1,0,0,0,2650,2652,3,442,221,
        0,2651,2650,1,0,0,0,2651,2652,1,0,0,0,2652,2653,1,0,0,0,2653,2656,
        3,552,276,0,2654,2655,5,150,0,0,2655,2657,3,52,26,0,2656,2654,1,
        0,0,0,2656,2657,1,0,0,0,2657,437,1,0,0,0,2658,2659,5,132,0,0,2659,
        2660,3,440,220,0,2660,2661,5,138,0,0,2661,2663,3,448,224,0,2662,
        2664,5,137,0,0,2663,2662,1,0,0,0,2663,2664,1,0,0,0,2664,2665,1,0,
        0,0,2665,2666,5,133,0,0,2666,439,1,0,0,0,2667,2670,3,492,246,0,2668,
        2670,3,552,276,0,2669,2667,1,0,0,0,2669,2668,1,0,0,0,2670,441,1,
        0,0,0,2671,2673,3,444,222,0,2672,2671,1,0,0,0,2673,2674,1,0,0,0,
        2674,2672,1,0,0,0,2674,2675,1,0,0,0,2675,443,1,0,0,0,2676,2680,5,
        132,0,0,2677,2678,3,446,223,0,2678,2679,5,138,0,0,2679,2681,1,0,
        0,0,2680,2677,1,0,0,0,2680,2681,1,0,0,0,2681,2682,1,0,0,0,2682,2684,
        3,448,224,0,2683,2685,5,137,0,0,2684,2683,1,0,0,0,2684,2685,1,0,
        0,0,2685,2686,1,0,0,0,2686,2687,5,133,0,0,2687,2702,1,0,0,0,2688,
        2689,5,132,0,0,2689,2690,3,448,224,0,2690,2698,5,133,0,0,2691,2692,
        5,137,0,0,2692,2693,5,132,0,0,2693,2694,3,448,224,0,2694,2695,5,
        133,0,0,2695,2697,1,0,0,0,2696,2691,1,0,0,0,2697,2700,1,0,0,0,2698,
        2696,1,0,0,0,2698,2699,1,0,0,0,2699,2702,1,0,0,0,2700,2698,1,0,0,
        0,2701,2676,1,0,0,0,2701,2688,1,0,0,0,2702,445,1,0,0,0,2703,2706,
        3,492,246,0,2704,2706,3,552,276,0,2705,2703,1,0,0,0,2705,2704,1,
        0,0,0,2706,447,1,0,0,0,2707,2712,3,450,225,0,2708,2709,5,137,0,0,
        2709,2711,3,450,225,0,2710,2708,1,0,0,0,2711,2714,1,0,0,0,2712,2710,
        1,0,0,0,2712,2713,1,0,0,0,2713,449,1,0,0,0,2714,2712,1,0,0,0,2715,
        2728,3,6,3,0,2716,2725,5,134,0,0,2717,2722,3,452,226,0,2718,2719,
        5,137,0,0,2719,2721,3,452,226,0,2720,2718,1,0,0,0,2721,2724,1,0,
        0,0,2722,2720,1,0,0,0,2722,2723,1,0,0,0,2723,2726,1,0,0,0,2724,2722,
        1,0,0,0,2725,2717,1,0,0,0,2725,2726,1,0,0,0,2726,2727,1,0,0,0,2727,
        2729,5,135,0,0,2728,2716,1,0,0,0,2728,2729,1,0,0,0,2729,451,1,0,
        0,0,2730,2731,3,552,276,0,2731,2732,5,138,0,0,2732,2734,1,0,0,0,
        2733,2730,1,0,0,0,2733,2734,1,0,0,0,2734,2735,1,0,0,0,2735,2736,
        3,52,26,0,2736,453,1,0,0,0,2737,2740,3,26,13,0,2738,2740,3,42,21,
        0,2739,2737,1,0,0,0,2739,2738,1,0,0,0,2740,2745,1,0,0,0,2741,2744,
        3,414,207,0,2742,2744,5,153,0,0,2743,2741,1,0,0,0,2743,2742,1,0,
        0,0,2744,2747,1,0,0,0,2745,2743,1,0,0,0,2745,2746,1,0,0,0,2746,2748,
        1,0,0,0,2747,2745,1,0,0,0,2748,2749,5,142,0,0,2749,2753,1,0,0,0,
        2750,2751,5,112,0,0,2751,2753,5,142,0,0,2752,2739,1,0,0,0,2752,2750,
        1,0,0,0,2753,455,1,0,0,0,2754,2759,3,458,229,0,2755,2756,5,137,0,
        0,2756,2758,3,458,229,0,2757,2755,1,0,0,0,2758,2761,1,0,0,0,2759,
        2757,1,0,0,0,2759,2760,1,0,0,0,2760,457,1,0,0,0,2761,2759,1,0,0,
        0,2762,2763,3,552,276,0,2763,2764,5,150,0,0,2764,2765,3,460,230,
        0,2765,459,1,0,0,0,2766,2768,5,145,0,0,2767,2766,1,0,0,0,2767,2768,
        1,0,0,0,2768,2769,1,0,0,0,2769,2772,3,52,26,0,2770,2772,3,208,104,
        0,2771,2767,1,0,0,0,2771,2770,1,0,0,0,2772,461,1,0,0,0,2773,2774,
        3,552,276,0,2774,2775,5,132,0,0,2775,2776,3,52,26,0,2776,2777,5,
        133,0,0,2777,463,1,0,0,0,2778,2779,5,150,0,0,2779,2780,5,152,0,0,
        2780,2781,4,232,0,1,2781,465,1,0,0,0,2782,2783,5,152,0,0,2783,2784,
        5,152,0,0,2784,2785,4,233,1,1,2785,467,1,0,0,0,2786,2787,5,152,0,
        0,2787,2788,5,164,0,0,2788,2789,4,234,2,1,2789,469,1,0,0,0,2790,
        2799,3,472,236,0,2791,2799,3,474,237,0,2792,2799,5,121,0,0,2793,
        2799,5,122,0,0,2794,2799,5,123,0,0,2795,2799,5,124,0,0,2796,2799,
        5,125,0,0,2797,2799,5,70,0,0,2798,2790,1,0,0,0,2798,2791,1,0,0,0,
        2798,2792,1,0,0,0,2798,2793,1,0,0,0,2798,2794,1,0,0,0,2798,2795,
        1,0,0,0,2798,2796,1,0,0,0,2798,2797,1,0,0,0,2799,471,1,0,0,0,2800,
        2801,7,15,0,0,2801,473,1,0,0,0,2802,2807,3,476,238,0,2803,2807,3,
        478,239,0,2804,2807,5,126,0,0,2805,2807,5,127,0,0,2806,2802,1,0,
        0,0,2806,2803,1,0,0,0,2806,2804,1,0,0,0,2806,2805,1,0,0,0,2807,475,
        1,0,0,0,2808,2812,5,128,0,0,2809,2811,3,480,240,0,2810,2809,1,0,
        0,0,2811,2814,1,0,0,0,2812,2810,1,0,0,0,2812,2813,1,0,0,0,2813,2815,
        1,0,0,0,2814,2812,1,0,0,0,2815,2816,5,181,0,0,2816,477,1,0,0,0,2817,
        2821,5,129,0,0,2818,2820,3,482,241,0,2819,2818,1,0,0,0,2820,2823,
        1,0,0,0,2821,2819,1,0,0,0,2821,2822,1,0,0,0,2822,2824,1,0,0,0,2823,
        2821,1,0,0,0,2824,2825,5,181,0,0,2825,479,1,0,0,0,2826,2835,3,484,
        242,0,2827,2835,5,177,0,0,2828,2835,5,179,0,0,2829,2835,5,182,0,
        0,2830,2835,5,178,0,0,2831,2835,5,184,0,0,2832,2835,5,181,0,0,2833,
        2835,5,183,0,0,2834,2826,1,0,0,0,2834,2827,1,0,0,0,2834,2828,1,0,
        0,0,2834,2829,1,0,0,0,2834,2830,1,0,0,0,2834,2831,1,0,0,0,2834,2832,
        1,0,0,0,2834,2833,1,0,0,0,2835,481,1,0,0,0,2836,2841,3,484,242,0,
        2837,2841,5,177,0,0,2838,2841,5,180,0,0,2839,2841,5,183,0,0,2840,
        2836,1,0,0,0,2840,2837,1,0,0,0,2840,2838,1,0,0,0,2840,2839,1,0,0,
        0,2841,483,1,0,0,0,2842,2843,5,130,0,0,2843,2846,3,52,26,0,2844,
        2845,5,137,0,0,2845,2847,3,486,243,0,2846,2844,1,0,0,0,2846,2847,
        1,0,0,0,2847,2849,1,0,0,0,2848,2850,3,488,244,0,2849,2848,1,0,0,
        0,2849,2850,1,0,0,0,2850,2851,1,0,0,0,2851,2852,5,131,0,0,2852,485,
        1,0,0,0,2853,2854,3,490,245,0,2854,487,1,0,0,0,2855,2857,5,138,0,
        0,2856,2858,5,185,0,0,2857,2856,1,0,0,0,2858,2859,1,0,0,0,2859,2857,
        1,0,0,0,2859,2860,1,0,0,0,2860,489,1,0,0,0,2861,2862,3,52,26,0,2862,
        491,1,0,0,0,2863,2864,7,16,0,0,2864,493,1,0,0,0,2865,2867,3,496,
        248,0,2866,2865,1,0,0,0,2867,2870,1,0,0,0,2868,2866,1,0,0,0,2868,
        2869,1,0,0,0,2869,2872,1,0,0,0,2870,2868,1,0,0,0,2871,2873,5,79,
        0,0,2872,2871,1,0,0,0,2872,2873,1,0,0,0,2873,2874,1,0,0,0,2874,2875,
        5,27,0,0,2875,2877,3,552,276,0,2876,2878,3,296,148,0,2877,2876,1,
        0,0,0,2877,2878,1,0,0,0,2878,2880,1,0,0,0,2879,2881,3,300,150,0,
        2880,2879,1,0,0,0,2880,2881,1,0,0,0,2881,2883,1,0,0,0,2882,2884,
        3,304,152,0,2883,2882,1,0,0,0,2883,2884,1,0,0,0,2884,2885,1,0,0,
        0,2885,2887,3,340,170,0,2886,2888,5,139,0,0,2887,2886,1,0,0,0,2887,
        2888,1,0,0,0,2888,495,1,0,0,0,2889,2890,7,17,0,0,2890,497,1,0,0,
        0,2891,2893,3,500,250,0,2892,2891,1,0,0,0,2893,2896,1,0,0,0,2894,
        2892,1,0,0,0,2894,2895,1,0,0,0,2895,2898,1,0,0,0,2896,2894,1,0,0,
        0,2897,2899,5,84,0,0,2898,2897,1,0,0,0,2898,2899,1,0,0,0,2899,2901,
        1,0,0,0,2900,2902,5,79,0,0,2901,2900,1,0,0,0,2901,2902,1,0,0,0,2902,
        2906,1,0,0,0,2903,2907,5,118,0,0,2904,2905,5,83,0,0,2905,2907,5,
        118,0,0,2906,2903,1,0,0,0,2906,2904,1,0,0,0,2906,2907,1,0,0,0,2907,
        2908,1,0,0,0,2908,2909,5,96,0,0,2909,2911,3,552,276,0,2910,2912,
        3,296,148,0,2911,2910,1,0,0,0,2911,2912,1,0,0,0,2912,2914,1,0,0,
        0,2913,2915,3,406,203,0,2914,2913,1,0,0,0,2914,2915,1,0,0,0,2915,
        2917,1,0,0,0,2916,2918,3,304,152,0,2917,2916,1,0,0,0,2917,2918,1,
        0,0,0,2918,2919,1,0,0,0,2919,2920,3,408,204,0,2920,499,1,0,0,0,2921,
        2922,7,18,0,0,2922,501,1,0,0,0,2923,2924,5,57,0,0,2924,2926,3,552,
        276,0,2925,2927,3,418,209,0,2926,2925,1,0,0,0,2926,2927,1,0,0,0,
        2927,2929,1,0,0,0,2928,2930,3,424,212,0,2929,2928,1,0,0,0,2929,2930,
        1,0,0,0,2930,2932,1,0,0,0,2931,2933,3,304,152,0,2932,2931,1,0,0,
        0,2932,2933,1,0,0,0,2933,2934,1,0,0,0,2934,2936,3,340,170,0,2935,
        2937,5,139,0,0,2936,2935,1,0,0,0,2936,2937,1,0,0,0,2937,503,1,0,
        0,0,2938,2939,5,38,0,0,2939,2941,3,552,276,0,2940,2942,3,432,216,
        0,2941,2940,1,0,0,0,2941,2942,1,0,0,0,2942,2943,1,0,0,0,2943,2945,
        3,434,217,0,2944,2946,5,139,0,0,2945,2944,1,0,0,0,2945,2946,1,0,
        0,0,2946,505,1,0,0,0,2947,2948,5,32,0,0,2948,2949,3,364,182,0,2949,
        2951,3,552,276,0,2950,2952,3,418,209,0,2951,2950,1,0,0,0,2951,2952,
        1,0,0,0,2952,2953,1,0,0,0,2953,2955,5,134,0,0,2954,2956,3,370,185,
        0,2955,2954,1,0,0,0,2955,2956,1,0,0,0,2956,2957,1,0,0,0,2957,2959,
        5,135,0,0,2958,2960,3,304,152,0,2959,2958,1,0,0,0,2959,2960,1,0,
        0,0,2960,2961,1,0,0,0,2961,2962,5,139,0,0,2962,507,1,0,0,0,2963,
        2964,5,40,0,0,2964,2973,3,8,4,0,2965,2966,3,358,179,0,2966,2967,
        5,139,0,0,2967,2974,1,0,0,0,2968,2969,3,366,183,0,2969,2970,5,130,
        0,0,2970,2971,3,392,196,0,2971,2972,5,131,0,0,2972,2974,1,0,0,0,
        2973,2965,1,0,0,0,2973,2968,1,0,0,0,2974,509,1,0,0,0,2975,2976,3,
        358,179,0,2976,2977,5,139,0,0,2977,511,1,0,0,0,2978,2992,3,366,183,
        0,2979,2980,5,130,0,0,2980,2981,3,380,190,0,2981,2986,5,131,0,0,
        2982,2983,5,150,0,0,2983,2984,3,362,181,0,2984,2985,5,139,0,0,2985,
        2987,1,0,0,0,2986,2982,1,0,0,0,2986,2987,1,0,0,0,2987,2993,1,0,0,
        0,2988,2989,3,464,232,0,2989,2990,3,100,50,0,2990,2991,5,139,0,0,
        2991,2993,1,0,0,0,2992,2979,1,0,0,0,2992,2988,1,0,0,0,2993,513,1,
        0,0,0,2994,2995,5,28,0,0,2995,2996,3,8,4,0,2996,2997,3,354,177,0,
        2997,2998,5,139,0,0,2998,515,1,0,0,0,2999,3000,5,98,0,0,3000,3001,
        5,132,0,0,3001,3002,3,370,185,0,3002,3011,5,133,0,0,3003,3004,5,
        130,0,0,3004,3005,3,380,190,0,3005,3006,5,131,0,0,3006,3012,1,0,
        0,0,3007,3008,3,464,232,0,3008,3009,3,100,50,0,3009,3010,5,139,0,
        0,3010,3012,1,0,0,0,3011,3003,1,0,0,0,3011,3007,1,0,0,0,3012,517,
        1,0,0,0,3013,3014,5,149,0,0,3014,3015,3,552,276,0,3015,3016,5,134,
        0,0,3016,3017,5,135,0,0,3017,3018,3,404,202,0,3018,519,1,0,0,0,3019,
        3020,3,552,276,0,3020,3022,5,134,0,0,3021,3023,3,370,185,0,3022,
        3021,1,0,0,0,3022,3023,1,0,0,0,3023,3024,1,0,0,0,3024,3026,5,135,
        0,0,3025,3027,3,402,201,0,3026,3025,1,0,0,0,3026,3027,1,0,0,0,3027,
        3028,1,0,0,0,3028,3029,3,404,202,0,3029,521,1,0,0,0,3030,3032,3,
        442,221,0,3031,3030,1,0,0,0,3031,3032,1,0,0,0,3032,3033,1,0,0,0,
        3033,3035,3,532,266,0,3034,3036,5,82,0,0,3035,3034,1,0,0,0,3035,
        3036,1,0,0,0,3036,3037,1,0,0,0,3037,3038,3,364,182,0,3038,3039,3,
        524,262,0,3039,3040,3,368,184,0,3040,3051,1,0,0,0,3041,3043,3,442,
        221,0,3042,3041,1,0,0,0,3042,3043,1,0,0,0,3043,3044,1,0,0,0,3044,
        3045,3,528,264,0,3045,3046,3,526,263,0,3046,3047,3,530,265,0,3047,
        3048,3,524,262,0,3048,3049,3,536,268,0,3049,3051,1,0,0,0,3050,3031,
        1,0,0,0,3050,3042,1,0,0,0,3051,523,1,0,0,0,3052,3053,3,540,270,0,
        3053,3055,5,134,0,0,3054,3056,3,370,185,0,3055,3054,1,0,0,0,3055,
        3056,1,0,0,0,3056,3057,1,0,0,0,3057,3058,5,135,0,0,3058,3073,1,0,
        0,0,3059,3060,3,540,270,0,3060,3061,3,296,148,0,3061,3063,5,134,
        0,0,3062,3064,3,370,185,0,3063,3062,1,0,0,0,3063,3064,1,0,0,0,3064,
        3065,1,0,0,0,3065,3069,5,135,0,0,3066,3068,3,306,153,0,3067,3066,
        1,0,0,0,3068,3071,1,0,0,0,3069,3067,1,0,0,0,3069,3070,1,0,0,0,3070,
        3073,1,0,0,0,3071,3069,1,0,0,0,3072,3052,1,0,0,0,3072,3059,1,0,0,
        0,3073,525,1,0,0,0,3074,3078,5,84,0,0,3075,3076,5,84,0,0,3076,3078,
        5,83,0,0,3077,3074,1,0,0,0,3077,3075,1,0,0,0,3078,527,1,0,0,0,3079,
        3081,3,538,269,0,3080,3079,1,0,0,0,3081,3084,1,0,0,0,3082,3080,1,
        0,0,0,3082,3083,1,0,0,0,3083,529,1,0,0,0,3084,3082,1,0,0,0,3085,
        3086,3,8,4,0,3086,531,1,0,0,0,3087,3089,3,534,267,0,3088,3087,1,
        0,0,0,3089,3092,1,0,0,0,3090,3088,1,0,0,0,3090,3091,1,0,0,0,3091,
        3094,1,0,0,0,3092,3090,1,0,0,0,3093,3095,5,79,0,0,3094,3093,1,0,
        0,0,3094,3095,1,0,0,0,3095,533,1,0,0,0,3096,3099,3,538,269,0,3097,
        3099,5,16,0,0,3098,3096,1,0,0,0,3098,3097,1,0,0,0,3099,535,1,0,0,
        0,3100,3108,3,224,112,0,3101,3102,3,464,232,0,3102,3103,5,84,0,0,
        3103,3104,3,40,20,0,3104,3105,5,139,0,0,3105,3108,1,0,0,0,3106,3108,
        5,139,0,0,3107,3100,1,0,0,0,3107,3101,1,0,0,0,3107,3106,1,0,0,0,
        3108,537,1,0,0,0,3109,3110,7,19,0,0,3110,539,1,0,0,0,3111,3117,3,
        552,276,0,3112,3113,3,552,276,0,3113,3114,5,154,0,0,3114,3115,3,
        552,276,0,3115,3117,1,0,0,0,3116,3111,1,0,0,0,3116,3112,1,0,0,0,
        3117,3125,1,0,0,0,3118,3120,3,44,22,0,3119,3118,1,0,0,0,3119,3120,
        1,0,0,0,3120,3121,1,0,0,0,3121,3122,5,136,0,0,3122,3124,3,552,276,
        0,3123,3119,1,0,0,0,3124,3127,1,0,0,0,3125,3123,1,0,0,0,3125,3126,
        1,0,0,0,3126,541,1,0,0,0,3127,3125,1,0,0,0,3128,3129,5,74,0,0,3129,
        3130,3,398,199,0,3130,3132,5,134,0,0,3131,3133,5,55,0,0,3132,3131,
        1,0,0,0,3132,3133,1,0,0,0,3133,3134,1,0,0,0,3134,3140,3,544,272,
        0,3135,3137,5,137,0,0,3136,3138,5,55,0,0,3137,3136,1,0,0,0,3137,
        3138,1,0,0,0,3138,3139,1,0,0,0,3139,3141,3,544,272,0,3140,3135,1,
        0,0,0,3140,3141,1,0,0,0,3141,3142,1,0,0,0,3142,3148,5,135,0,0,3143,
        3149,3,404,202,0,3144,3145,3,464,232,0,3145,3146,3,100,50,0,3146,
        3147,5,139,0,0,3147,3149,1,0,0,0,3148,3143,1,0,0,0,3148,3144,1,0,
        0,0,3149,543,1,0,0,0,3150,3151,3,8,4,0,3151,3154,3,552,276,0,3152,
        3153,5,150,0,0,3153,3155,3,52,26,0,3154,3152,1,0,0,0,3154,3155,1,
        0,0,0,3155,545,1,0,0,0,3156,3158,5,134,0,0,3157,3159,3,46,23,0,3158,
        3157,1,0,0,0,3158,3159,1,0,0,0,3159,3160,1,0,0,0,3160,3161,5,135,
        0,0,3161,547,1,0,0,0,3162,3164,5,134,0,0,3163,3165,3,46,23,0,3164,
        3163,1,0,0,0,3164,3165,1,0,0,0,3165,3166,1,0,0,0,3166,3168,5,135,
        0,0,3167,3169,3,114,57,0,3168,3167,1,0,0,0,3168,3169,1,0,0,0,3169,
        3185,1,0,0,0,3170,3185,3,114,57,0,3171,3185,3,550,275,0,3172,3173,
        5,132,0,0,3173,3174,3,112,56,0,3174,3178,5,133,0,0,3175,3177,3,414,
        207,0,3176,3175,1,0,0,0,3177,3180,1,0,0,0,3178,3176,1,0,0,0,3178,
        3179,1,0,0,0,3179,3182,1,0,0,0,3180,3178,1,0,0,0,3181,3183,3,416,
        208,0,3182,3181,1,0,0,0,3182,3183,1,0,0,0,3183,3185,1,0,0,0,3184,
        3162,1,0,0,0,3184,3170,1,0,0,0,3184,3171,1,0,0,0,3184,3172,1,0,0,
        0,3185,549,1,0,0,0,3186,3188,5,134,0,0,3187,3189,3,46,23,0,3188,
        3187,1,0,0,0,3188,3189,1,0,0,0,3189,3190,1,0,0,0,3190,3192,5,135,
        0,0,3191,3193,3,114,57,0,3192,3191,1,0,0,0,3192,3193,1,0,0,0,3193,
        551,1,0,0,0,3194,3195,7,20,0,0,3195,553,1,0,0,0,397,555,560,570,
        574,576,580,583,588,592,599,601,605,618,626,634,639,642,652,658,
        660,664,668,673,681,696,704,714,718,721,726,729,738,743,753,766,
        783,789,791,798,806,814,822,830,838,850,852,858,863,871,879,887,
        889,892,899,904,911,915,917,941,950,955,959,967,970,975,979,983,
        989,994,1008,1014,1026,1030,1035,1039,1045,1055,1064,1082,1085,1090,
        1093,1108,1114,1118,1124,1129,1132,1140,1148,1159,1164,1169,1171,
        1180,1188,1196,1204,1208,1218,1223,1225,1234,1242,1246,1251,1253,
        1258,1262,1269,1277,1279,1283,1286,1289,1297,1307,1310,1327,1334,
        1338,1348,1353,1360,1369,1374,1381,1393,1404,1412,1417,1426,1435,
        1444,1450,1455,1459,1463,1467,1471,1475,1482,1502,1524,1528,1532,
        1537,1544,1560,1565,1570,1581,1599,1615,1625,1629,1633,1644,1648,
        1666,1685,1689,1693,1701,1709,1722,1742,1747,1750,1756,1765,1772,
        1779,1785,1793,1801,1804,1811,1818,1822,1825,1831,1835,1841,1855,
        1861,1868,1873,1876,1879,1883,1888,1898,1915,1920,1926,1929,1932,
        1940,1944,1948,1951,1954,1958,1969,1974,1978,1985,1989,1998,2006,
        2012,2022,2030,2036,2047,2051,2053,2058,2062,2072,2082,2111,2114,
        2128,2137,2144,2147,2150,2154,2159,2172,2182,2189,2201,2208,2220,
        2226,2230,2234,2244,2250,2252,2259,2263,2266,2270,2280,2283,2290,
        2293,2298,2303,2308,2313,2315,2318,2324,2327,2333,2336,2353,2361,
        2364,2374,2377,2383,2410,2423,2433,2442,2447,2450,2453,2461,2465,
        2471,2477,2483,2494,2498,2500,2510,2516,2519,2532,2538,2541,2544,
        2551,2556,2560,2564,2581,2584,2589,2593,2597,2606,2609,2614,2618,
        2623,2627,2629,2640,2644,2646,2651,2656,2663,2669,2674,2680,2684,
        2698,2701,2705,2712,2722,2725,2728,2733,2739,2743,2745,2752,2759,
        2767,2771,2798,2806,2812,2821,2834,2840,2846,2849,2859,2868,2872,
        2877,2880,2883,2887,2894,2898,2901,2906,2911,2914,2917,2926,2929,
        2932,2936,2941,2945,2951,2955,2959,2973,2986,2992,3011,3022,3026,
        3031,3035,3042,3050,3055,3063,3069,3072,3077,3082,3090,3094,3098,
        3107,3116,3119,3125,3132,3137,3140,3148,3154,3158,3164,3168,3178,
        3182,3184,3188,3192
    ]

class CSharpParser ( CSharpParserBase ):

    grammarFileName = "CSharpParser.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "'\\u00EF\\u00BB\\u00BF'", "<INVALID>", 
                     "'/***/'", "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "'#'", "'abstract'", "'add'", "'and'", "'alias'", "'__arglist'", 
                     "'as'", "'ascending'", "'async'", "'await'", "'base'", 
                     "'bool'", "'break'", "'by'", "'byte'", "'case'", "'catch'", 
                     "'char'", "'checked'", "'class'", "'const'", "'continue'", 
                     "'decimal'", "'default'", "'delegate'", "'descending'", 
                     "'do'", "'double'", "'dynamic'", "'else'", "'enum'", 
                     "'equals'", "'event'", "'explicit'", "'extern'", "'false'", 
                     "'finally'", "'fixed'", "'float'", "'for'", "'foreach'", 
                     "'from'", "'get'", "'goto'", "'group'", "'if'", "'implicit'", 
                     "'in'", "'int'", "'interface'", "'internal'", "'init'", 
                     "'into'", "'is'", "'join'", "'let'", "'lock'", "'long'", 
                     "'nameof'", "'namespace'", "'new'", "'not'", "'null'", 
                     "'object'", "'on'", "'or'", "'operator'", "'orderby'", 
                     "'out'", "'override'", "'params'", "'partial'", "'private'", 
                     "'protected'", "'public'", "'readonly'", "'ref'", "'remove'", 
                     "'return'", "'sbyte'", "'sealed'", "'select'", "'set'", 
                     "'short'", "'sizeof'", "'stackalloc'", "'static'", 
                     "'string'", "'struct'", "'switch'", "'this'", "'throw'", 
                     "'true'", "'try'", "'typeof'", "'uint'", "'ulong'", 
                     "'unchecked'", "'unmanaged'", "'unsafe'", "'ushort'", 
                     "'using'", "'var'", "'virtual'", "'void'", "'volatile'", 
                     "'when'", "'where'", "'while'", "'yield'", "'record'", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "'{'", "'}'", 
                     "'['", "']'", "'('", "')'", "'.'", "','", "':'", "';'", 
                     "'+'", "'-'", "'*'", "'/'", "'%'", "'&'", "'|'", "'^'", 
                     "'!'", "'~'", "'='", "'<'", "'>'", "'?'", "'::'", "'??'", 
                     "'++'", "'--'", "'&&'", "'||'", "'->'", "'=='", "'!='", 
                     "'<='", "'>='", "'+='", "'-='", "'*='", "'/='", "'%='", 
                     "'&='", "'|='", "'^='", "'<<'", "'<<='", "'??='", "'..'", 
                     "'{{'", "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "'define'", "'undef'", "'elif'", 
                     "'endif'", "'line'", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "'hidden'", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "'}}'" ]

    symbolicNames = [ "<INVALID>", "BYTE_ORDER_MARK", "SINGLE_LINE_DOC_COMMENT", 
                      "EMPTY_DELIMITED_DOC_COMMENT", "DELIMITED_DOC_COMMENT", 
                      "SINGLE_LINE_COMMENT", "DELIMITED_COMMENT", "WHITESPACES", 
                      "SHARP", "ABSTRACT", "ADD", "AND", "ALIAS", "ARGLIST", 
                      "AS", "ASCENDING", "ASYNC", "AWAIT", "BASE", "BOOL", 
                      "BREAK", "BY", "BYTE", "CASE", "CATCH", "CHAR", "CHECKED", 
                      "CLASS", "CONST", "CONTINUE", "DECIMAL", "DEFAULT", 
                      "DELEGATE", "DESCENDING", "DO", "DOUBLE", "DYNAMIC", 
                      "ELSE", "ENUM", "EQUALS", "EVENT", "EXPLICIT", "EXTERN", 
                      "FALSE", "FINALLY", "FIXED", "FLOAT", "FOR", "FOREACH", 
                      "FROM", "GET", "GOTO", "GROUP", "IF", "IMPLICIT", 
                      "IN", "INT", "INTERFACE", "INTERNAL", "INIT", "INTO", 
                      "IS", "JOIN", "LET", "LOCK", "LONG", "NAMEOF", "NAMESPACE", 
                      "NEW", "NOT", "NULL_", "OBJECT", "ON", "OR", "OPERATOR", 
                      "ORDERBY", "OUT", "OVERRIDE", "PARAMS", "PARTIAL", 
                      "PRIVATE", "PROTECTED", "PUBLIC", "READONLY", "REF", 
                      "REMOVE", "RETURN", "SBYTE", "SEALED", "SELECT", "SET", 
                      "SHORT", "SIZEOF", "STACKALLOC", "STATIC", "STRING", 
                      "STRUCT", "SWITCH", "THIS", "THROW", "TRUE", "TRY", 
                      "TYPEOF", "UINT", "ULONG", "UNCHECKED", "UNMANAGED", 
                      "UNSAFE", "USHORT", "USING", "VAR", "VIRTUAL", "VOID", 
                      "VOLATILE", "WHEN", "WHERE", "WHILE", "YIELD", "RECORD", 
                      "IDENTIFIER", "LITERAL_ACCESS", "INTEGER_LITERAL", 
                      "HEX_INTEGER_LITERAL", "BIN_INTEGER_LITERAL", "REAL_LITERAL", 
                      "CHARACTER_LITERAL", "REGULAR_STRING", "VERBATIUM_STRING", 
                      "INTERPOLATED_REGULAR_STRING_START", "INTERPOLATED_VERBATIUM_STRING_START", 
                      "OPEN_BRACE", "CLOSE_BRACE", "OPEN_BRACKET", "CLOSE_BRACKET", 
                      "OPEN_PARENS", "CLOSE_PARENS", "DOT", "COMMA", "COLON", 
                      "SEMICOLON", "PLUS", "MINUS", "STAR", "DIV", "PERCENT", 
                      "AMP", "BITWISE_OR", "CARET", "BANG", "TILDE", "ASSIGNMENT", 
                      "LT", "GT", "INTERR", "DOUBLE_COLON", "OP_COALESCING", 
                      "OP_INC", "OP_DEC", "OP_AND", "OP_OR", "OP_PTR", "OP_EQ", 
                      "OP_NE", "OP_LE", "OP_GE", "OP_ADD_ASSIGNMENT", "OP_SUB_ASSIGNMENT", 
                      "OP_MULT_ASSIGNMENT", "OP_DIV_ASSIGNMENT", "OP_MOD_ASSIGNMENT", 
                      "OP_AND_ASSIGNMENT", "OP_OR_ASSIGNMENT", "OP_XOR_ASSIGNMENT", 
                      "OP_LEFT_SHIFT", "OP_LEFT_SHIFT_ASSIGNMENT", "OP_COALESCING_ASSIGNMENT", 
                      "OP_RANGE", "DOUBLE_CURLY_INSIDE", "OPEN_BRACE_INSIDE", 
                      "REGULAR_CHAR_INSIDE", "VERBATIUM_DOUBLE_QUOTE_INSIDE", 
                      "DOUBLE_QUOTE_INSIDE", "REGULAR_STRING_INSIDE", "VERBATIUM_INSIDE_STRING", 
                      "CLOSE_BRACE_INSIDE", "FORMAT_STRING", "DIRECTIVE_WHITESPACES", 
                      "DIGITS", "DEFINE", "UNDEF", "ELIF", "ENDIF", "LINE", 
                      "ERROR", "WARNING", "REGION", "ENDREGION", "PRAGMA", 
                      "NULLABLE", "DIRECTIVE_HIDDEN", "CONDITIONAL_SYMBOL", 
                      "DIRECTIVE_NEW_LINE", "TEXT", "DOUBLE_CURLY_CLOSE_INSIDE" ]

    RULE_compilation_unit = 0
    RULE_compilation_unit_element = 1
    RULE_top_level_statements = 2
    RULE_namespace_or_type_name = 3
    RULE_type_ = 4
    RULE_function_pointer_type = 5
    RULE_function_pointer_parameter_list = 6
    RULE_base_type = 7
    RULE_tuple_type = 8
    RULE_deconstruction_expression = 9
    RULE_deconstruction_tuple = 10
    RULE_deconstruction_element = 11
    RULE_tuple_element = 12
    RULE_simple_type = 13
    RULE_numeric_type = 14
    RULE_integral_type = 15
    RULE_floating_point_type = 16
    RULE_default_value_expression = 17
    RULE_explictly_typed_default = 18
    RULE_default_literal = 19
    RULE_variable_reference = 20
    RULE_class_type = 21
    RULE_type_argument_list = 22
    RULE_argument_list = 23
    RULE_argument = 24
    RULE_argument_name = 25
    RULE_expression = 26
    RULE_non_assignment_expression = 27
    RULE_assignment = 28
    RULE_assignment_operator = 29
    RULE_conditional_expression = 30
    RULE_null_coalescing_expression = 31
    RULE_conditional_or_expression = 32
    RULE_conditional_and_expression = 33
    RULE_inclusive_or_expression = 34
    RULE_exclusive_or_expression = 35
    RULE_and_expression = 36
    RULE_equality_expression = 37
    RULE_relational_expression = 38
    RULE_shift_expression = 39
    RULE_additive_expression = 40
    RULE_multiplicative_expression = 41
    RULE_switch_expression = 42
    RULE_switch_expression_arms = 43
    RULE_switch_expression_arm = 44
    RULE_range_expression = 45
    RULE_unary_expression = 46
    RULE_cast_expression = 47
    RULE_primary_expression = 48
    RULE_primary_expression_start = 49
    RULE_throwable_expression = 50
    RULE_throw_expression = 51
    RULE_member_access = 52
    RULE_bracket_expression = 53
    RULE_indexer_argument = 54
    RULE_predefined_type = 55
    RULE_expression_list = 56
    RULE_object_or_collection_initializer = 57
    RULE_object_initializer = 58
    RULE_member_initializer_list = 59
    RULE_member_initializer = 60
    RULE_initializer_value = 61
    RULE_collection_initializer = 62
    RULE_element_initializer = 63
    RULE_anonymous_object_initializer = 64
    RULE_member_declarator_list = 65
    RULE_member_declarator = 66
    RULE_unbound_type_name = 67
    RULE_generic_dimension_specifier = 68
    RULE_isType = 69
    RULE_isTypePatternArms = 70
    RULE_isTypePatternArm = 71
    RULE_lambda_expression = 72
    RULE_anonymous_function_signature = 73
    RULE_explicit_anonymous_function_parameter_list = 74
    RULE_explicit_anonymous_function_parameter = 75
    RULE_implicit_anonymous_function_parameter_list = 76
    RULE_anonymous_function_body = 77
    RULE_query_expression = 78
    RULE_from_clause = 79
    RULE_query_body = 80
    RULE_query_body_clause = 81
    RULE_let_clause = 82
    RULE_where_clause = 83
    RULE_combined_join_clause = 84
    RULE_orderby_clause = 85
    RULE_ordering = 86
    RULE_select_or_group_clause = 87
    RULE_query_continuation = 88
    RULE_statement = 89
    RULE_declarationStatement = 90
    RULE_local_function_declaration = 91
    RULE_local_function_header = 92
    RULE_local_function_modifiers = 93
    RULE_local_function_body = 94
    RULE_labeled_Statement = 95
    RULE_embedded_statement = 96
    RULE_empty_statement = 97
    RULE_if_statement = 98
    RULE_checked_statement = 99
    RULE_unchecked_statement = 100
    RULE_lock_statement = 101
    RULE_unmanaged_type = 102
    RULE_stackalloc_expression = 103
    RULE_stackalloc_initializer = 104
    RULE_stackalloc_initializer_element_list = 105
    RULE_stackalloc_element_initializer = 106
    RULE_using_statement = 107
    RULE_yield_statement = 108
    RULE_fixed_statement = 109
    RULE_unsafe_statement = 110
    RULE_try_statement = 111
    RULE_block = 112
    RULE_local_variable_declaration = 113
    RULE_unsafe_function_pointer = 114
    RULE_delegate_function_pointer = 115
    RULE_local_variable_type = 116
    RULE_local_variable_declarator = 117
    RULE_local_variable_initializer = 118
    RULE_local_constant_declaration = 119
    RULE_switch_section = 120
    RULE_switch_label = 121
    RULE_case_guard = 122
    RULE_statement_list = 123
    RULE_for_initializer = 124
    RULE_for_iterator = 125
    RULE_catch_clauses = 126
    RULE_specific_catch_clause = 127
    RULE_general_catch_clause = 128
    RULE_exception_filter = 129
    RULE_finally_clause = 130
    RULE_resource_acquisition = 131
    RULE_namespace_declaration = 132
    RULE_qualified_identifier = 133
    RULE_namespace_body = 134
    RULE_extern_alias_directives = 135
    RULE_extern_alias_directive = 136
    RULE_using_directives = 137
    RULE_using_directive = 138
    RULE_namespace_member_declarations = 139
    RULE_namespace_member_declaration = 140
    RULE_type_declaration = 141
    RULE_record_definition = 142
    RULE_record_base = 143
    RULE_record_body = 144
    RULE_record_parameters = 145
    RULE_record_parameter = 146
    RULE_qualified_alias_member = 147
    RULE_type_parameter_list = 148
    RULE_type_parameter = 149
    RULE_class_base = 150
    RULE_interface_type_list = 151
    RULE_type_parameter_constraints_clauses = 152
    RULE_type_parameter_constraints_clause = 153
    RULE_type_parameter_constraints = 154
    RULE_primary_constraint = 155
    RULE_pattern = 156
    RULE_relational_pattern = 157
    RULE_and_pattern = 158
    RULE_or_pattern = 159
    RULE_not_pattern = 160
    RULE_declaration_pattern = 161
    RULE_simple_designation = 162
    RULE_single_variable_designation = 163
    RULE_constant_pattern = 164
    RULE_var_pattern = 165
    RULE_designation = 166
    RULE_module_initializer_declaration = 167
    RULE_secondary_constraints = 168
    RULE_constructor_constraint = 169
    RULE_class_body = 170
    RULE_class_member_declarations = 171
    RULE_class_member_declaration = 172
    RULE_all_member_modifiers = 173
    RULE_all_member_modifier = 174
    RULE_common_member_declaration = 175
    RULE_typed_member_declaration = 176
    RULE_constant_declarators = 177
    RULE_constant_declarator = 178
    RULE_variable_declarators = 179
    RULE_variable_declarator = 180
    RULE_variable_initializer = 181
    RULE_return_type = 182
    RULE_member_name = 183
    RULE_method_body = 184
    RULE_formal_parameter_list = 185
    RULE_fixed_parameters = 186
    RULE_fixed_parameter = 187
    RULE_parameter_modifier = 188
    RULE_parameter_array = 189
    RULE_accessor_declarations = 190
    RULE_init_accessor_declaration = 191
    RULE_get_accessor_declaration = 192
    RULE_set_accessor_declaration = 193
    RULE_accessor_modifier = 194
    RULE_accessor_body = 195
    RULE_event_accessor_declarations = 196
    RULE_add_accessor_declaration = 197
    RULE_remove_accessor_declaration = 198
    RULE_overloadable_operator = 199
    RULE_conversion_operator_declarator = 200
    RULE_constructor_initializer = 201
    RULE_body = 202
    RULE_struct_interfaces = 203
    RULE_struct_body = 204
    RULE_struct_member_declaration = 205
    RULE_array_type = 206
    RULE_rank_specifier = 207
    RULE_array_initializer = 208
    RULE_variant_type_parameter_list = 209
    RULE_variant_type_parameter = 210
    RULE_variance_annotation = 211
    RULE_interface_base = 212
    RULE_interface_body = 213
    RULE_interface_member_declaration = 214
    RULE_interface_accessors = 215
    RULE_enum_base = 216
    RULE_enum_body = 217
    RULE_enum_member_declaration = 218
    RULE_global_attribute_section = 219
    RULE_global_attribute_target = 220
    RULE_attributes = 221
    RULE_attribute_section = 222
    RULE_attribute_target = 223
    RULE_attribute_list = 224
    RULE_attribute = 225
    RULE_attribute_argument = 226
    RULE_pointer_type = 227
    RULE_fixed_pointer_declarators = 228
    RULE_fixed_pointer_declarator = 229
    RULE_fixed_pointer_initializer = 230
    RULE_fixed_size_buffer_declarator = 231
    RULE_right_arrow = 232
    RULE_right_shift = 233
    RULE_right_shift_assignment = 234
    RULE_literal = 235
    RULE_boolean_literal = 236
    RULE_string_literal = 237
    RULE_interpolated_regular_string = 238
    RULE_interpolated_verbatium_string = 239
    RULE_interpolated_regular_string_part = 240
    RULE_interpolated_verbatium_string_part = 241
    RULE_interpolated_string_expression = 242
    RULE_interpolation_minimum_width = 243
    RULE_format_string = 244
    RULE_constant_expression = 245
    RULE_keyword = 246
    RULE_class_definition = 247
    RULE_class_modifier = 248
    RULE_struct_definition = 249
    RULE_struct_modifier = 250
    RULE_interface_definition = 251
    RULE_enum_definition = 252
    RULE_delegate_definition = 253
    RULE_event_declaration = 254
    RULE_field_declaration = 255
    RULE_property_declaration = 256
    RULE_constant_declaration = 257
    RULE_indexer_declaration = 258
    RULE_destructor_definition = 259
    RULE_constructor_declaration = 260
    RULE_method_declaration = 261
    RULE_method_header = 262
    RULE_ref_kind = 263
    RULE_ref_method_modifiers = 264
    RULE_ref_return_type = 265
    RULE_method_modifiers = 266
    RULE_method_modifier = 267
    RULE_ref_method_body = 268
    RULE_ref_method_modifier = 269
    RULE_method_member_name = 270
    RULE_operator_declaration = 271
    RULE_arg_declaration = 272
    RULE_method_invocation = 273
    RULE_object_creation_expression = 274
    RULE_target_typed_new = 275
    RULE_identifier = 276

    ruleNames =  [ "compilation_unit", "compilation_unit_element", "top_level_statements", 
                   "namespace_or_type_name", "type_", "function_pointer_type", 
                   "function_pointer_parameter_list", "base_type", "tuple_type", 
                   "deconstruction_expression", "deconstruction_tuple", 
                   "deconstruction_element", "tuple_element", "simple_type", 
                   "numeric_type", "integral_type", "floating_point_type", 
                   "default_value_expression", "explictly_typed_default", 
                   "default_literal", "variable_reference", "class_type", 
                   "type_argument_list", "argument_list", "argument", "argument_name", 
                   "expression", "non_assignment_expression", "assignment", 
                   "assignment_operator", "conditional_expression", "null_coalescing_expression", 
                   "conditional_or_expression", "conditional_and_expression", 
                   "inclusive_or_expression", "exclusive_or_expression", 
                   "and_expression", "equality_expression", "relational_expression", 
                   "shift_expression", "additive_expression", "multiplicative_expression", 
                   "switch_expression", "switch_expression_arms", "switch_expression_arm", 
                   "range_expression", "unary_expression", "cast_expression", 
                   "primary_expression", "primary_expression_start", "throwable_expression", 
                   "throw_expression", "member_access", "bracket_expression", 
                   "indexer_argument", "predefined_type", "expression_list", 
                   "object_or_collection_initializer", "object_initializer", 
                   "member_initializer_list", "member_initializer", "initializer_value", 
                   "collection_initializer", "element_initializer", "anonymous_object_initializer", 
                   "member_declarator_list", "member_declarator", "unbound_type_name", 
                   "generic_dimension_specifier", "isType", "isTypePatternArms", 
                   "isTypePatternArm", "lambda_expression", "anonymous_function_signature", 
                   "explicit_anonymous_function_parameter_list", "explicit_anonymous_function_parameter", 
                   "implicit_anonymous_function_parameter_list", "anonymous_function_body", 
                   "query_expression", "from_clause", "query_body", "query_body_clause", 
                   "let_clause", "where_clause", "combined_join_clause", 
                   "orderby_clause", "ordering", "select_or_group_clause", 
                   "query_continuation", "statement", "declarationStatement", 
                   "local_function_declaration", "local_function_header", 
                   "local_function_modifiers", "local_function_body", "labeled_Statement", 
                   "embedded_statement", "empty_statement", "if_statement", 
                   "checked_statement", "unchecked_statement", "lock_statement", 
                   "unmanaged_type", "stackalloc_expression", "stackalloc_initializer", 
                   "stackalloc_initializer_element_list", "stackalloc_element_initializer", 
                   "using_statement", "yield_statement", "fixed_statement", 
                   "unsafe_statement", "try_statement", "block", "local_variable_declaration", 
                   "unsafe_function_pointer", "delegate_function_pointer", 
                   "local_variable_type", "local_variable_declarator", "local_variable_initializer", 
                   "local_constant_declaration", "switch_section", "switch_label", 
                   "case_guard", "statement_list", "for_initializer", "for_iterator", 
                   "catch_clauses", "specific_catch_clause", "general_catch_clause", 
                   "exception_filter", "finally_clause", "resource_acquisition", 
                   "namespace_declaration", "qualified_identifier", "namespace_body", 
                   "extern_alias_directives", "extern_alias_directive", 
                   "using_directives", "using_directive", "namespace_member_declarations", 
                   "namespace_member_declaration", "type_declaration", "record_definition", 
                   "record_base", "record_body", "record_parameters", "record_parameter", 
                   "qualified_alias_member", "type_parameter_list", "type_parameter", 
                   "class_base", "interface_type_list", "type_parameter_constraints_clauses", 
                   "type_parameter_constraints_clause", "type_parameter_constraints", 
                   "primary_constraint", "pattern", "relational_pattern", 
                   "and_pattern", "or_pattern", "not_pattern", "declaration_pattern", 
                   "simple_designation", "single_variable_designation", 
                   "constant_pattern", "var_pattern", "designation", "module_initializer_declaration", 
                   "secondary_constraints", "constructor_constraint", "class_body", 
                   "class_member_declarations", "class_member_declaration", 
                   "all_member_modifiers", "all_member_modifier", "common_member_declaration", 
                   "typed_member_declaration", "constant_declarators", "constant_declarator", 
                   "variable_declarators", "variable_declarator", "variable_initializer", 
                   "return_type", "member_name", "method_body", "formal_parameter_list", 
                   "fixed_parameters", "fixed_parameter", "parameter_modifier", 
                   "parameter_array", "accessor_declarations", "init_accessor_declaration", 
                   "get_accessor_declaration", "set_accessor_declaration", 
                   "accessor_modifier", "accessor_body", "event_accessor_declarations", 
                   "add_accessor_declaration", "remove_accessor_declaration", 
                   "overloadable_operator", "conversion_operator_declarator", 
                   "constructor_initializer", "body", "struct_interfaces", 
                   "struct_body", "struct_member_declaration", "array_type", 
                   "rank_specifier", "array_initializer", "variant_type_parameter_list", 
                   "variant_type_parameter", "variance_annotation", "interface_base", 
                   "interface_body", "interface_member_declaration", "interface_accessors", 
                   "enum_base", "enum_body", "enum_member_declaration", 
                   "global_attribute_section", "global_attribute_target", 
                   "attributes", "attribute_section", "attribute_target", 
                   "attribute_list", "attribute", "attribute_argument", 
                   "pointer_type", "fixed_pointer_declarators", "fixed_pointer_declarator", 
                   "fixed_pointer_initializer", "fixed_size_buffer_declarator", 
                   "right_arrow", "right_shift", "right_shift_assignment", 
                   "literal", "boolean_literal", "string_literal", "interpolated_regular_string", 
                   "interpolated_verbatium_string", "interpolated_regular_string_part", 
                   "interpolated_verbatium_string_part", "interpolated_string_expression", 
                   "interpolation_minimum_width", "format_string", "constant_expression", 
                   "keyword", "class_definition", "class_modifier", "struct_definition", 
                   "struct_modifier", "interface_definition", "enum_definition", 
                   "delegate_definition", "event_declaration", "field_declaration", 
                   "property_declaration", "constant_declaration", "indexer_declaration", 
                   "destructor_definition", "constructor_declaration", "method_declaration", 
                   "method_header", "ref_kind", "ref_method_modifiers", 
                   "ref_return_type", "method_modifiers", "method_modifier", 
                   "ref_method_body", "ref_method_modifier", "method_member_name", 
                   "operator_declaration", "arg_declaration", "method_invocation", 
                   "object_creation_expression", "target_typed_new", "identifier" ]

    EOF = Token.EOF
    BYTE_ORDER_MARK=1
    SINGLE_LINE_DOC_COMMENT=2
    EMPTY_DELIMITED_DOC_COMMENT=3
    DELIMITED_DOC_COMMENT=4
    SINGLE_LINE_COMMENT=5
    DELIMITED_COMMENT=6
    WHITESPACES=7
    SHARP=8
    ABSTRACT=9
    ADD=10
    AND=11
    ALIAS=12
    ARGLIST=13
    AS=14
    ASCENDING=15
    ASYNC=16
    AWAIT=17
    BASE=18
    BOOL=19
    BREAK=20
    BY=21
    BYTE=22
    CASE=23
    CATCH=24
    CHAR=25
    CHECKED=26
    CLASS=27
    CONST=28
    CONTINUE=29
    DECIMAL=30
    DEFAULT=31
    DELEGATE=32
    DESCENDING=33
    DO=34
    DOUBLE=35
    DYNAMIC=36
    ELSE=37
    ENUM=38
    EQUALS=39
    EVENT=40
    EXPLICIT=41
    EXTERN=42
    FALSE=43
    FINALLY=44
    FIXED=45
    FLOAT=46
    FOR=47
    FOREACH=48
    FROM=49
    GET=50
    GOTO=51
    GROUP=52
    IF=53
    IMPLICIT=54
    IN=55
    INT=56
    INTERFACE=57
    INTERNAL=58
    INIT=59
    INTO=60
    IS=61
    JOIN=62
    LET=63
    LOCK=64
    LONG=65
    NAMEOF=66
    NAMESPACE=67
    NEW=68
    NOT=69
    NULL_=70
    OBJECT=71
    ON=72
    OR=73
    OPERATOR=74
    ORDERBY=75
    OUT=76
    OVERRIDE=77
    PARAMS=78
    PARTIAL=79
    PRIVATE=80
    PROTECTED=81
    PUBLIC=82
    READONLY=83
    REF=84
    REMOVE=85
    RETURN=86
    SBYTE=87
    SEALED=88
    SELECT=89
    SET=90
    SHORT=91
    SIZEOF=92
    STACKALLOC=93
    STATIC=94
    STRING=95
    STRUCT=96
    SWITCH=97
    THIS=98
    THROW=99
    TRUE=100
    TRY=101
    TYPEOF=102
    UINT=103
    ULONG=104
    UNCHECKED=105
    UNMANAGED=106
    UNSAFE=107
    USHORT=108
    USING=109
    VAR=110
    VIRTUAL=111
    VOID=112
    VOLATILE=113
    WHEN=114
    WHERE=115
    WHILE=116
    YIELD=117
    RECORD=118
    IDENTIFIER=119
    LITERAL_ACCESS=120
    INTEGER_LITERAL=121
    HEX_INTEGER_LITERAL=122
    BIN_INTEGER_LITERAL=123
    REAL_LITERAL=124
    CHARACTER_LITERAL=125
    REGULAR_STRING=126
    VERBATIUM_STRING=127
    INTERPOLATED_REGULAR_STRING_START=128
    INTERPOLATED_VERBATIUM_STRING_START=129
    OPEN_BRACE=130
    CLOSE_BRACE=131
    OPEN_BRACKET=132
    CLOSE_BRACKET=133
    OPEN_PARENS=134
    CLOSE_PARENS=135
    DOT=136
    COMMA=137
    COLON=138
    SEMICOLON=139
    PLUS=140
    MINUS=141
    STAR=142
    DIV=143
    PERCENT=144
    AMP=145
    BITWISE_OR=146
    CARET=147
    BANG=148
    TILDE=149
    ASSIGNMENT=150
    LT=151
    GT=152
    INTERR=153
    DOUBLE_COLON=154
    OP_COALESCING=155
    OP_INC=156
    OP_DEC=157
    OP_AND=158
    OP_OR=159
    OP_PTR=160
    OP_EQ=161
    OP_NE=162
    OP_LE=163
    OP_GE=164
    OP_ADD_ASSIGNMENT=165
    OP_SUB_ASSIGNMENT=166
    OP_MULT_ASSIGNMENT=167
    OP_DIV_ASSIGNMENT=168
    OP_MOD_ASSIGNMENT=169
    OP_AND_ASSIGNMENT=170
    OP_OR_ASSIGNMENT=171
    OP_XOR_ASSIGNMENT=172
    OP_LEFT_SHIFT=173
    OP_LEFT_SHIFT_ASSIGNMENT=174
    OP_COALESCING_ASSIGNMENT=175
    OP_RANGE=176
    DOUBLE_CURLY_INSIDE=177
    OPEN_BRACE_INSIDE=178
    REGULAR_CHAR_INSIDE=179
    VERBATIUM_DOUBLE_QUOTE_INSIDE=180
    DOUBLE_QUOTE_INSIDE=181
    REGULAR_STRING_INSIDE=182
    VERBATIUM_INSIDE_STRING=183
    CLOSE_BRACE_INSIDE=184
    FORMAT_STRING=185
    DIRECTIVE_WHITESPACES=186
    DIGITS=187
    DEFINE=188
    UNDEF=189
    ELIF=190
    ENDIF=191
    LINE=192
    ERROR=193
    WARNING=194
    REGION=195
    ENDREGION=196
    PRAGMA=197
    NULLABLE=198
    DIRECTIVE_HIDDEN=199
    CONDITIONAL_SYMBOL=200
    DIRECTIVE_NEW_LINE=201
    TEXT=202
    DOUBLE_CURLY_CLOSE_INSIDE=203

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.2")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class Compilation_unitContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(CSharpParser.EOF, 0)

        def BYTE_ORDER_MARK(self):
            return self.getToken(CSharpParser.BYTE_ORDER_MARK, 0)

        def compilation_unit_element(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Compilation_unit_elementContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Compilation_unit_elementContext,i)


        def getRuleIndex(self):
            return CSharpParser.RULE_compilation_unit

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCompilation_unit" ):
                listener.enterCompilation_unit(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCompilation_unit" ):
                listener.exitCompilation_unit(self)




    def compilation_unit(self):

        localctx = CSharpParser.Compilation_unitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_compilation_unit)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 555
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==1:
                self.state = 554
                self.match(CSharpParser.BYTE_ORDER_MARK)


            self.state = 560
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & -2918350288186264064) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -22049) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & 281475785848919) != 0):
                self.state = 557
                self.compilation_unit_element()
                self.state = 562
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 563
            self.match(CSharpParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Compilation_unit_elementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def extern_alias_directives(self):
            return self.getTypedRuleContext(CSharpParser.Extern_alias_directivesContext,0)


        def using_directives(self):
            return self.getTypedRuleContext(CSharpParser.Using_directivesContext,0)


        def global_attribute_section(self):
            return self.getTypedRuleContext(CSharpParser.Global_attribute_sectionContext,0)


        def top_level_statements(self):
            return self.getTypedRuleContext(CSharpParser.Top_level_statementsContext,0)


        def namespace_member_declarations(self):
            return self.getTypedRuleContext(CSharpParser.Namespace_member_declarationsContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_compilation_unit_element

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCompilation_unit_element" ):
                listener.enterCompilation_unit_element(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCompilation_unit_element" ):
                listener.exitCompilation_unit_element(self)




    def compilation_unit_element(self):

        localctx = CSharpParser.Compilation_unit_elementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_compilation_unit_element)
        try:
            self.state = 570
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,2,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 565
                self.extern_alias_directives()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 566
                self.using_directives()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 567
                self.global_attribute_section()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 568
                self.top_level_statements()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 569
                self.namespace_member_declarations()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Top_level_statementsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.StatementContext)
            else:
                return self.getTypedRuleContext(CSharpParser.StatementContext,i)


        def type_declaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Type_declarationContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Type_declarationContext,i)


        def getRuleIndex(self):
            return CSharpParser.RULE_top_level_statements

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTop_level_statements" ):
                listener.enterTop_level_statements(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTop_level_statements" ):
                listener.exitTop_level_statements(self)




    def top_level_statements(self):

        localctx = CSharpParser.Top_level_statementsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_top_level_statements)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 574 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 574
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,3,self._ctx)
                    if la_ == 1:
                        self.state = 572
                        self.statement()
                        pass

                    elif la_ == 2:
                        self.state = 573
                        self.type_declaration()
                        pass



                else:
                    raise NoViableAltException(self)
                self.state = 576 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,4,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Namespace_or_type_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(CSharpParser.IdentifierContext,i)


        def qualified_alias_member(self):
            return self.getTypedRuleContext(CSharpParser.Qualified_alias_memberContext,0)


        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.DOT)
            else:
                return self.getToken(CSharpParser.DOT, i)

        def type_argument_list(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Type_argument_listContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Type_argument_listContext,i)


        def getRuleIndex(self):
            return CSharpParser.RULE_namespace_or_type_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNamespace_or_type_name" ):
                listener.enterNamespace_or_type_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNamespace_or_type_name" ):
                listener.exitNamespace_or_type_name(self)




    def namespace_or_type_name(self):

        localctx = CSharpParser.Namespace_or_type_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_namespace_or_type_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 583
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,6,self._ctx)
            if la_ == 1:
                self.state = 578
                self.identifier()
                self.state = 580
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,5,self._ctx)
                if la_ == 1:
                    self.state = 579
                    self.type_argument_list()


                pass

            elif la_ == 2:
                self.state = 582
                self.qualified_alias_member()
                pass


            self.state = 592
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,8,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 585
                    self.match(CSharpParser.DOT)
                    self.state = 586
                    self.identifier()
                    self.state = 588
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,7,self._ctx)
                    if la_ == 1:
                        self.state = 587
                        self.type_argument_list()

             
                self.state = 594
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,8,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Type_Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def base_type(self):
            return self.getTypedRuleContext(CSharpParser.Base_typeContext,0)


        def INTERR(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.INTERR)
            else:
                return self.getToken(CSharpParser.INTERR, i)

        def rank_specifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Rank_specifierContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Rank_specifierContext,i)


        def STAR(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.STAR)
            else:
                return self.getToken(CSharpParser.STAR, i)

        def function_pointer_type(self):
            return self.getTypedRuleContext(CSharpParser.Function_pointer_typeContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_type_

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterType_" ):
                listener.enterType_(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitType_" ):
                listener.exitType_(self)




    def type_(self):

        localctx = CSharpParser.Type_Context(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_type_)
        try:
            self.state = 605
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [10, 12, 13, 15, 16, 17, 19, 21, 22, 25, 30, 33, 35, 36, 39, 46, 49, 50, 52, 56, 60, 62, 63, 65, 66, 71, 72, 75, 79, 85, 87, 89, 90, 91, 95, 103, 104, 106, 108, 110, 112, 114, 115, 117, 119, 134]:
                self.enterOuterAlt(localctx, 1)
                self.state = 595
                self.base_type()
                self.state = 601
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,10,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 599
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [153]:
                            self.state = 596
                            self.match(CSharpParser.INTERR)
                            pass
                        elif token in [132]:
                            self.state = 597
                            self.rank_specifier()
                            pass
                        elif token in [142]:
                            self.state = 598
                            self.match(CSharpParser.STAR)
                            pass
                        else:
                            raise NoViableAltException(self)
                 
                    self.state = 603
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,10,self._ctx)

                pass
            elif token in [32]:
                self.enterOuterAlt(localctx, 2)
                self.state = 604
                self.function_pointer_type()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Function_pointer_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DELEGATE(self):
            return self.getToken(CSharpParser.DELEGATE, 0)

        def STAR(self):
            return self.getToken(CSharpParser.STAR, 0)

        def LT(self):
            return self.getToken(CSharpParser.LT, 0)

        def function_pointer_parameter_list(self):
            return self.getTypedRuleContext(CSharpParser.Function_pointer_parameter_listContext,0)


        def GT(self):
            return self.getToken(CSharpParser.GT, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_function_pointer_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunction_pointer_type" ):
                listener.enterFunction_pointer_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunction_pointer_type" ):
                listener.exitFunction_pointer_type(self)




    def function_pointer_type(self):

        localctx = CSharpParser.Function_pointer_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_function_pointer_type)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 607
            self.match(CSharpParser.DELEGATE)
            self.state = 608
            self.match(CSharpParser.STAR)
            self.state = 609
            self.match(CSharpParser.LT)
            self.state = 610
            self.function_pointer_parameter_list()
            self.state = 611
            self.match(CSharpParser.GT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Function_pointer_parameter_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def type_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Type_Context)
            else:
                return self.getTypedRuleContext(CSharpParser.Type_Context,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.COMMA)
            else:
                return self.getToken(CSharpParser.COMMA, i)

        def getRuleIndex(self):
            return CSharpParser.RULE_function_pointer_parameter_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunction_pointer_parameter_list" ):
                listener.enterFunction_pointer_parameter_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunction_pointer_parameter_list" ):
                listener.exitFunction_pointer_parameter_list(self)




    def function_pointer_parameter_list(self):

        localctx = CSharpParser.Function_pointer_parameter_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_function_pointer_parameter_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 613
            self.type_()
            self.state = 618
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==137:
                self.state = 614
                self.match(CSharpParser.COMMA)
                self.state = 615
                self.type_()
                self.state = 620
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Base_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simple_type(self):
            return self.getTypedRuleContext(CSharpParser.Simple_typeContext,0)


        def class_type(self):
            return self.getTypedRuleContext(CSharpParser.Class_typeContext,0)


        def VOID(self):
            return self.getToken(CSharpParser.VOID, 0)

        def STAR(self):
            return self.getToken(CSharpParser.STAR, 0)

        def tuple_type(self):
            return self.getTypedRuleContext(CSharpParser.Tuple_typeContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_base_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBase_type" ):
                listener.enterBase_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBase_type" ):
                listener.exitBase_type(self)




    def base_type(self):

        localctx = CSharpParser.Base_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_base_type)
        try:
            self.state = 626
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,13,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 621
                self.simple_type()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 622
                self.class_type()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 623
                self.match(CSharpParser.VOID)
                self.state = 624
                self.match(CSharpParser.STAR)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 625
                self.tuple_type()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Tuple_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PARENS(self):
            return self.getToken(CSharpParser.OPEN_PARENS, 0)

        def tuple_element(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Tuple_elementContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Tuple_elementContext,i)


        def CLOSE_PARENS(self):
            return self.getToken(CSharpParser.CLOSE_PARENS, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.COMMA)
            else:
                return self.getToken(CSharpParser.COMMA, i)

        def deconstruction_expression(self):
            return self.getTypedRuleContext(CSharpParser.Deconstruction_expressionContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_tuple_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTuple_type" ):
                listener.enterTuple_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTuple_type" ):
                listener.exitTuple_type(self)




    def tuple_type(self):

        localctx = CSharpParser.Tuple_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_tuple_type)
        self._la = 0 # Token type
        try:
            self.state = 639
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,15,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 628
                self.match(CSharpParser.OPEN_PARENS)
                self.state = 629
                self.tuple_element()
                self.state = 632 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 630
                    self.match(CSharpParser.COMMA)
                    self.state = 631
                    self.tuple_element()
                    self.state = 634 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==137):
                        break

                self.state = 636
                self.match(CSharpParser.CLOSE_PARENS)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 638
                self.deconstruction_expression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Deconstruction_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def deconstruction_tuple(self):
            return self.getTypedRuleContext(CSharpParser.Deconstruction_tupleContext,0)


        def VAR(self):
            return self.getToken(CSharpParser.VAR, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_deconstruction_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeconstruction_expression" ):
                listener.enterDeconstruction_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeconstruction_expression" ):
                listener.exitDeconstruction_expression(self)




    def deconstruction_expression(self):

        localctx = CSharpParser.Deconstruction_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_deconstruction_expression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 642
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==110:
                self.state = 641
                self.match(CSharpParser.VAR)


            self.state = 644
            self.deconstruction_tuple()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Deconstruction_tupleContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PARENS(self):
            return self.getToken(CSharpParser.OPEN_PARENS, 0)

        def deconstruction_element(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Deconstruction_elementContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Deconstruction_elementContext,i)


        def CLOSE_PARENS(self):
            return self.getToken(CSharpParser.CLOSE_PARENS, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.COMMA)
            else:
                return self.getToken(CSharpParser.COMMA, i)

        def getRuleIndex(self):
            return CSharpParser.RULE_deconstruction_tuple

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeconstruction_tuple" ):
                listener.enterDeconstruction_tuple(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeconstruction_tuple" ):
                listener.exitDeconstruction_tuple(self)




    def deconstruction_tuple(self):

        localctx = CSharpParser.Deconstruction_tupleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_deconstruction_tuple)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 646
            self.match(CSharpParser.OPEN_PARENS)
            self.state = 647
            self.deconstruction_element()
            self.state = 650 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 648
                self.match(CSharpParser.COMMA)
                self.state = 649
                self.deconstruction_element()
                self.state = 652 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==137):
                    break

            self.state = 654
            self.match(CSharpParser.CLOSE_PARENS)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Deconstruction_elementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def deconstruction_tuple(self):
            return self.getTypedRuleContext(CSharpParser.Deconstruction_tupleContext,0)


        def identifier(self):
            return self.getTypedRuleContext(CSharpParser.IdentifierContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_deconstruction_element

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeconstruction_element" ):
                listener.enterDeconstruction_element(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeconstruction_element" ):
                listener.exitDeconstruction_element(self)




    def deconstruction_element(self):

        localctx = CSharpParser.Deconstruction_elementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_deconstruction_element)
        self._la = 0 # Token type
        try:
            self.state = 660
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [134]:
                self.enterOuterAlt(localctx, 1)
                self.state = 656
                self.deconstruction_tuple()
                pass
            elif token in [10, 12, 13, 15, 16, 17, 21, 33, 36, 39, 49, 50, 52, 55, 60, 62, 63, 66, 72, 75, 79, 85, 89, 90, 106, 110, 114, 115, 117, 119, 135, 137, 139]:
                self.enterOuterAlt(localctx, 2)
                self.state = 658
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -3452571437265341440) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & 12122115721929281) != 0):
                    self.state = 657
                    self.identifier()


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Tuple_elementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def type_(self):
            return self.getTypedRuleContext(CSharpParser.Type_Context,0)


        def identifier(self):
            return self.getTypedRuleContext(CSharpParser.IdentifierContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_tuple_element

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTuple_element" ):
                listener.enterTuple_element(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTuple_element" ):
                listener.exitTuple_element(self)




    def tuple_element(self):

        localctx = CSharpParser.Tuple_elementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_tuple_element)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 662
            self.type_()
            self.state = 664
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & -3452571437265341440) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & 12122115721929281) != 0):
                self.state = 663
                self.identifier()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Simple_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def numeric_type(self):
            return self.getTypedRuleContext(CSharpParser.Numeric_typeContext,0)


        def BOOL(self):
            return self.getToken(CSharpParser.BOOL, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_simple_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimple_type" ):
                listener.enterSimple_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimple_type" ):
                listener.exitSimple_type(self)




    def simple_type(self):

        localctx = CSharpParser.Simple_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_simple_type)
        try:
            self.state = 668
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [22, 25, 30, 35, 46, 56, 65, 87, 91, 103, 104, 108]:
                self.enterOuterAlt(localctx, 1)
                self.state = 666
                self.numeric_type()
                pass
            elif token in [19]:
                self.enterOuterAlt(localctx, 2)
                self.state = 667
                self.match(CSharpParser.BOOL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Numeric_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def integral_type(self):
            return self.getTypedRuleContext(CSharpParser.Integral_typeContext,0)


        def floating_point_type(self):
            return self.getTypedRuleContext(CSharpParser.Floating_point_typeContext,0)


        def DECIMAL(self):
            return self.getToken(CSharpParser.DECIMAL, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_numeric_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNumeric_type" ):
                listener.enterNumeric_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNumeric_type" ):
                listener.exitNumeric_type(self)




    def numeric_type(self):

        localctx = CSharpParser.Numeric_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_numeric_type)
        try:
            self.state = 673
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [22, 25, 56, 65, 87, 91, 103, 104, 108]:
                self.enterOuterAlt(localctx, 1)
                self.state = 670
                self.integral_type()
                pass
            elif token in [35, 46]:
                self.enterOuterAlt(localctx, 2)
                self.state = 671
                self.floating_point_type()
                pass
            elif token in [30]:
                self.enterOuterAlt(localctx, 3)
                self.state = 672
                self.match(CSharpParser.DECIMAL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Integral_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SBYTE(self):
            return self.getToken(CSharpParser.SBYTE, 0)

        def BYTE(self):
            return self.getToken(CSharpParser.BYTE, 0)

        def SHORT(self):
            return self.getToken(CSharpParser.SHORT, 0)

        def USHORT(self):
            return self.getToken(CSharpParser.USHORT, 0)

        def INT(self):
            return self.getToken(CSharpParser.INT, 0)

        def UINT(self):
            return self.getToken(CSharpParser.UINT, 0)

        def LONG(self):
            return self.getToken(CSharpParser.LONG, 0)

        def ULONG(self):
            return self.getToken(CSharpParser.ULONG, 0)

        def CHAR(self):
            return self.getToken(CSharpParser.CHAR, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_integral_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIntegral_type" ):
                listener.enterIntegral_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIntegral_type" ):
                listener.exitIntegral_type(self)




    def integral_type(self):

        localctx = CSharpParser.Integral_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_integral_type)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 675
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 72057594075676672) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & 9620798046209) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Floating_point_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FLOAT(self):
            return self.getToken(CSharpParser.FLOAT, 0)

        def DOUBLE(self):
            return self.getToken(CSharpParser.DOUBLE, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_floating_point_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFloating_point_type" ):
                listener.enterFloating_point_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFloating_point_type" ):
                listener.exitFloating_point_type(self)




    def floating_point_type(self):

        localctx = CSharpParser.Floating_point_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_floating_point_type)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 677
            _la = self._input.LA(1)
            if not(_la==35 or _la==46):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Default_value_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def explictly_typed_default(self):
            return self.getTypedRuleContext(CSharpParser.Explictly_typed_defaultContext,0)


        def default_literal(self):
            return self.getTypedRuleContext(CSharpParser.Default_literalContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_default_value_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDefault_value_expression" ):
                listener.enterDefault_value_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDefault_value_expression" ):
                listener.exitDefault_value_expression(self)




    def default_value_expression(self):

        localctx = CSharpParser.Default_value_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_default_value_expression)
        try:
            self.state = 681
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,23,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 679
                self.explictly_typed_default()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 680
                self.default_literal()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Explictly_typed_defaultContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DEFAULT(self):
            return self.getToken(CSharpParser.DEFAULT, 0)

        def OPEN_PARENS(self):
            return self.getToken(CSharpParser.OPEN_PARENS, 0)

        def type_(self):
            return self.getTypedRuleContext(CSharpParser.Type_Context,0)


        def CLOSE_PARENS(self):
            return self.getToken(CSharpParser.CLOSE_PARENS, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_explictly_typed_default

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExplictly_typed_default" ):
                listener.enterExplictly_typed_default(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExplictly_typed_default" ):
                listener.exitExplictly_typed_default(self)




    def explictly_typed_default(self):

        localctx = CSharpParser.Explictly_typed_defaultContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_explictly_typed_default)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 683
            self.match(CSharpParser.DEFAULT)
            self.state = 684
            self.match(CSharpParser.OPEN_PARENS)
            self.state = 685
            self.type_()
            self.state = 686
            self.match(CSharpParser.CLOSE_PARENS)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Default_literalContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DEFAULT(self):
            return self.getToken(CSharpParser.DEFAULT, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_default_literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDefault_literal" ):
                listener.enterDefault_literal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDefault_literal" ):
                listener.exitDefault_literal(self)




    def default_literal(self):

        localctx = CSharpParser.Default_literalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_default_literal)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 688
            self.match(CSharpParser.DEFAULT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Variable_referenceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(CSharpParser.ExpressionContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_variable_reference

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariable_reference" ):
                listener.enterVariable_reference(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariable_reference" ):
                listener.exitVariable_reference(self)




    def variable_reference(self):

        localctx = CSharpParser.Variable_referenceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_variable_reference)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 690
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Class_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def namespace_or_type_name(self):
            return self.getTypedRuleContext(CSharpParser.Namespace_or_type_nameContext,0)


        def OBJECT(self):
            return self.getToken(CSharpParser.OBJECT, 0)

        def DYNAMIC(self):
            return self.getToken(CSharpParser.DYNAMIC, 0)

        def STRING(self):
            return self.getToken(CSharpParser.STRING, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_class_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClass_type" ):
                listener.enterClass_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClass_type" ):
                listener.exitClass_type(self)




    def class_type(self):

        localctx = CSharpParser.Class_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_class_type)
        try:
            self.state = 696
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,24,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 692
                self.namespace_or_type_name()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 693
                self.match(CSharpParser.OBJECT)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 694
                self.match(CSharpParser.DYNAMIC)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 695
                self.match(CSharpParser.STRING)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Type_argument_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LT(self):
            return self.getToken(CSharpParser.LT, 0)

        def type_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Type_Context)
            else:
                return self.getTypedRuleContext(CSharpParser.Type_Context,i)


        def GT(self):
            return self.getToken(CSharpParser.GT, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.COMMA)
            else:
                return self.getToken(CSharpParser.COMMA, i)

        def getRuleIndex(self):
            return CSharpParser.RULE_type_argument_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterType_argument_list" ):
                listener.enterType_argument_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitType_argument_list" ):
                listener.exitType_argument_list(self)




    def type_argument_list(self):

        localctx = CSharpParser.Type_argument_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_type_argument_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 698
            self.match(CSharpParser.LT)
            self.state = 699
            self.type_()
            self.state = 704
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==137:
                self.state = 700
                self.match(CSharpParser.COMMA)
                self.state = 701
                self.type_()
                self.state = 706
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 707
            self.match(CSharpParser.GT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Argument_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def argument(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.ArgumentContext)
            else:
                return self.getTypedRuleContext(CSharpParser.ArgumentContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.COMMA)
            else:
                return self.getToken(CSharpParser.COMMA, i)

        def getRuleIndex(self):
            return CSharpParser.RULE_argument_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArgument_list" ):
                listener.enterArgument_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArgument_list" ):
                listener.exitArgument_list(self)




    def argument_list(self):

        localctx = CSharpParser.Argument_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_argument_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 709
            self.argument()
            self.state = 714
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==137:
                self.state = 710
                self.match(CSharpParser.COMMA)
                self.state = 711
                self.argument()
                self.state = 716
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArgumentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.refout = None # Token

        def expression(self):
            return self.getTypedRuleContext(CSharpParser.ExpressionContext,0)


        def argument_name(self):
            return self.getTypedRuleContext(CSharpParser.Argument_nameContext,0)


        def VAR(self):
            return self.getToken(CSharpParser.VAR, 0)

        def type_(self):
            return self.getTypedRuleContext(CSharpParser.Type_Context,0)


        def REF(self):
            return self.getToken(CSharpParser.REF, 0)

        def OUT(self):
            return self.getToken(CSharpParser.OUT, 0)

        def IN(self):
            return self.getToken(CSharpParser.IN, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_argument

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArgument" ):
                listener.enterArgument(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArgument" ):
                listener.exitArgument(self)




    def argument(self):

        localctx = CSharpParser.ArgumentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_argument)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 718
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,27,self._ctx)
            if la_ == 1:
                self.state = 717
                self.argument_name()


            self.state = 721
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,28,self._ctx)
            if la_ == 1:
                self.state = 720
                localctx.refout = self._input.LT(1)
                _la = self._input.LA(1)
                if not(((((_la - 55)) & ~0x3f) == 0 and ((1 << (_la - 55)) & 538968065) != 0)):
                    localctx.refout = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 729
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,30,self._ctx)
            if la_ == 1:
                self.state = 723
                self.expression()
                pass

            elif la_ == 2:
                self.state = 726
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,29,self._ctx)
                if la_ == 1:
                    self.state = 724
                    self.match(CSharpParser.VAR)
                    pass

                elif la_ == 2:
                    self.state = 725
                    self.type_()
                    pass


                self.state = 728
                self.expression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Argument_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(CSharpParser.IdentifierContext,0)


        def COLON(self):
            return self.getToken(CSharpParser.COLON, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_argument_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArgument_name" ):
                listener.enterArgument_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArgument_name" ):
                listener.exitArgument_name(self)




    def argument_name(self):

        localctx = CSharpParser.Argument_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_argument_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 731
            self.identifier()
            self.state = 732
            self.match(CSharpParser.COLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assignment(self):
            return self.getTypedRuleContext(CSharpParser.AssignmentContext,0)


        def non_assignment_expression(self):
            return self.getTypedRuleContext(CSharpParser.Non_assignment_expressionContext,0)


        def REF(self):
            return self.getToken(CSharpParser.REF, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpression" ):
                listener.enterExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpression" ):
                listener.exitExpression(self)




    def expression(self):

        localctx = CSharpParser.ExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_expression)
        try:
            self.state = 738
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,31,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 734
                self.assignment()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 735
                self.non_assignment_expression()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 736
                self.match(CSharpParser.REF)
                self.state = 737
                self.non_assignment_expression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Non_assignment_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def lambda_expression(self):
            return self.getTypedRuleContext(CSharpParser.Lambda_expressionContext,0)


        def query_expression(self):
            return self.getTypedRuleContext(CSharpParser.Query_expressionContext,0)


        def conditional_expression(self):
            return self.getTypedRuleContext(CSharpParser.Conditional_expressionContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_non_assignment_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNon_assignment_expression" ):
                listener.enterNon_assignment_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNon_assignment_expression" ):
                listener.exitNon_assignment_expression(self)




    def non_assignment_expression(self):

        localctx = CSharpParser.Non_assignment_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_non_assignment_expression)
        try:
            self.state = 743
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,32,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 740
                self.lambda_expression()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 741
                self.query_expression()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 742
                self.conditional_expression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssignmentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def unary_expression(self):
            return self.getTypedRuleContext(CSharpParser.Unary_expressionContext,0)


        def assignment_operator(self):
            return self.getTypedRuleContext(CSharpParser.Assignment_operatorContext,0)


        def expression(self):
            return self.getTypedRuleContext(CSharpParser.ExpressionContext,0)


        def OP_COALESCING_ASSIGNMENT(self):
            return self.getToken(CSharpParser.OP_COALESCING_ASSIGNMENT, 0)

        def throwable_expression(self):
            return self.getTypedRuleContext(CSharpParser.Throwable_expressionContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_assignment

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssignment" ):
                listener.enterAssignment(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssignment" ):
                listener.exitAssignment(self)




    def assignment(self):

        localctx = CSharpParser.AssignmentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_assignment)
        try:
            self.state = 753
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,33,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 745
                self.unary_expression()
                self.state = 746
                self.assignment_operator()
                self.state = 747
                self.expression()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 749
                self.unary_expression()
                self.state = 750
                self.match(CSharpParser.OP_COALESCING_ASSIGNMENT)
                self.state = 751
                self.throwable_expression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Assignment_operatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ASSIGNMENT(self):
            return self.getToken(CSharpParser.ASSIGNMENT, 0)

        def OP_ADD_ASSIGNMENT(self):
            return self.getToken(CSharpParser.OP_ADD_ASSIGNMENT, 0)

        def OP_SUB_ASSIGNMENT(self):
            return self.getToken(CSharpParser.OP_SUB_ASSIGNMENT, 0)

        def OP_MULT_ASSIGNMENT(self):
            return self.getToken(CSharpParser.OP_MULT_ASSIGNMENT, 0)

        def OP_DIV_ASSIGNMENT(self):
            return self.getToken(CSharpParser.OP_DIV_ASSIGNMENT, 0)

        def OP_MOD_ASSIGNMENT(self):
            return self.getToken(CSharpParser.OP_MOD_ASSIGNMENT, 0)

        def OP_AND_ASSIGNMENT(self):
            return self.getToken(CSharpParser.OP_AND_ASSIGNMENT, 0)

        def OP_OR_ASSIGNMENT(self):
            return self.getToken(CSharpParser.OP_OR_ASSIGNMENT, 0)

        def OP_XOR_ASSIGNMENT(self):
            return self.getToken(CSharpParser.OP_XOR_ASSIGNMENT, 0)

        def OP_LEFT_SHIFT_ASSIGNMENT(self):
            return self.getToken(CSharpParser.OP_LEFT_SHIFT_ASSIGNMENT, 0)

        def right_shift_assignment(self):
            return self.getTypedRuleContext(CSharpParser.Right_shift_assignmentContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_assignment_operator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssignment_operator" ):
                listener.enterAssignment_operator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssignment_operator" ):
                listener.exitAssignment_operator(self)




    def assignment_operator(self):

        localctx = CSharpParser.Assignment_operatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_assignment_operator)
        try:
            self.state = 766
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [150]:
                self.enterOuterAlt(localctx, 1)
                self.state = 755
                self.match(CSharpParser.ASSIGNMENT)
                pass
            elif token in [165]:
                self.enterOuterAlt(localctx, 2)
                self.state = 756
                self.match(CSharpParser.OP_ADD_ASSIGNMENT)
                pass
            elif token in [166]:
                self.enterOuterAlt(localctx, 3)
                self.state = 757
                self.match(CSharpParser.OP_SUB_ASSIGNMENT)
                pass
            elif token in [167]:
                self.enterOuterAlt(localctx, 4)
                self.state = 758
                self.match(CSharpParser.OP_MULT_ASSIGNMENT)
                pass
            elif token in [168]:
                self.enterOuterAlt(localctx, 5)
                self.state = 759
                self.match(CSharpParser.OP_DIV_ASSIGNMENT)
                pass
            elif token in [169]:
                self.enterOuterAlt(localctx, 6)
                self.state = 760
                self.match(CSharpParser.OP_MOD_ASSIGNMENT)
                pass
            elif token in [170]:
                self.enterOuterAlt(localctx, 7)
                self.state = 761
                self.match(CSharpParser.OP_AND_ASSIGNMENT)
                pass
            elif token in [171]:
                self.enterOuterAlt(localctx, 8)
                self.state = 762
                self.match(CSharpParser.OP_OR_ASSIGNMENT)
                pass
            elif token in [172]:
                self.enterOuterAlt(localctx, 9)
                self.state = 763
                self.match(CSharpParser.OP_XOR_ASSIGNMENT)
                pass
            elif token in [174]:
                self.enterOuterAlt(localctx, 10)
                self.state = 764
                self.match(CSharpParser.OP_LEFT_SHIFT_ASSIGNMENT)
                pass
            elif token in [152]:
                self.enterOuterAlt(localctx, 11)
                self.state = 765
                self.right_shift_assignment()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Conditional_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def null_coalescing_expression(self):
            return self.getTypedRuleContext(CSharpParser.Null_coalescing_expressionContext,0)


        def INTERR(self):
            return self.getToken(CSharpParser.INTERR, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(CSharpParser.ExpressionContext,i)


        def COLON(self):
            return self.getToken(CSharpParser.COLON, 0)

        def REF(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.REF)
            else:
                return self.getToken(CSharpParser.REF, i)

        def variable_reference(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Variable_referenceContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Variable_referenceContext,i)


        def getRuleIndex(self):
            return CSharpParser.RULE_conditional_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConditional_expression" ):
                listener.enterConditional_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConditional_expression" ):
                listener.exitConditional_expression(self)




    def conditional_expression(self):

        localctx = CSharpParser.Conditional_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_conditional_expression)
        try:
            self.state = 783
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,35,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 768
                self.null_coalescing_expression()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 769
                self.null_coalescing_expression()
                self.state = 770
                self.match(CSharpParser.INTERR)
                self.state = 771
                self.expression()
                self.state = 772
                self.match(CSharpParser.COLON)
                self.state = 773
                self.expression()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 775
                self.null_coalescing_expression()
                self.state = 776
                self.match(CSharpParser.INTERR)
                self.state = 777
                self.match(CSharpParser.REF)
                self.state = 778
                self.variable_reference()
                self.state = 779
                self.match(CSharpParser.COLON)
                self.state = 780
                self.match(CSharpParser.REF)
                self.state = 781
                self.variable_reference()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Null_coalescing_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def conditional_or_expression(self):
            return self.getTypedRuleContext(CSharpParser.Conditional_or_expressionContext,0)


        def OP_COALESCING(self):
            return self.getToken(CSharpParser.OP_COALESCING, 0)

        def null_coalescing_expression(self):
            return self.getTypedRuleContext(CSharpParser.Null_coalescing_expressionContext,0)


        def throw_expression(self):
            return self.getTypedRuleContext(CSharpParser.Throw_expressionContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_null_coalescing_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNull_coalescing_expression" ):
                listener.enterNull_coalescing_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNull_coalescing_expression" ):
                listener.exitNull_coalescing_expression(self)




    def null_coalescing_expression(self):

        localctx = CSharpParser.Null_coalescing_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_null_coalescing_expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 785
            self.conditional_or_expression()
            self.state = 791
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,37,self._ctx)
            if la_ == 1:
                self.state = 786
                self.match(CSharpParser.OP_COALESCING)
                self.state = 789
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [10, 12, 13, 15, 16, 17, 18, 19, 21, 22, 25, 26, 30, 31, 32, 33, 35, 36, 39, 43, 46, 49, 50, 52, 56, 60, 62, 63, 65, 66, 68, 70, 71, 72, 75, 79, 85, 87, 89, 90, 91, 92, 93, 95, 98, 100, 102, 103, 104, 105, 106, 108, 110, 114, 115, 117, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 134, 140, 141, 142, 145, 147, 148, 149, 156, 157, 176]:
                    self.state = 787
                    self.null_coalescing_expression()
                    pass
                elif token in [99]:
                    self.state = 788
                    self.throw_expression()
                    pass
                else:
                    raise NoViableAltException(self)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Conditional_or_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def conditional_and_expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Conditional_and_expressionContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Conditional_and_expressionContext,i)


        def OP_OR(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.OP_OR)
            else:
                return self.getToken(CSharpParser.OP_OR, i)

        def getRuleIndex(self):
            return CSharpParser.RULE_conditional_or_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConditional_or_expression" ):
                listener.enterConditional_or_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConditional_or_expression" ):
                listener.exitConditional_or_expression(self)




    def conditional_or_expression(self):

        localctx = CSharpParser.Conditional_or_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_conditional_or_expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 793
            self.conditional_and_expression()
            self.state = 798
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,38,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 794
                    self.match(CSharpParser.OP_OR)
                    self.state = 795
                    self.conditional_and_expression() 
                self.state = 800
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,38,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Conditional_and_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def inclusive_or_expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Inclusive_or_expressionContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Inclusive_or_expressionContext,i)


        def OP_AND(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.OP_AND)
            else:
                return self.getToken(CSharpParser.OP_AND, i)

        def getRuleIndex(self):
            return CSharpParser.RULE_conditional_and_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConditional_and_expression" ):
                listener.enterConditional_and_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConditional_and_expression" ):
                listener.exitConditional_and_expression(self)




    def conditional_and_expression(self):

        localctx = CSharpParser.Conditional_and_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_conditional_and_expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 801
            self.inclusive_or_expression()
            self.state = 806
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,39,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 802
                    self.match(CSharpParser.OP_AND)
                    self.state = 803
                    self.inclusive_or_expression() 
                self.state = 808
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,39,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Inclusive_or_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def exclusive_or_expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Exclusive_or_expressionContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Exclusive_or_expressionContext,i)


        def BITWISE_OR(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.BITWISE_OR)
            else:
                return self.getToken(CSharpParser.BITWISE_OR, i)

        def getRuleIndex(self):
            return CSharpParser.RULE_inclusive_or_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInclusive_or_expression" ):
                listener.enterInclusive_or_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInclusive_or_expression" ):
                listener.exitInclusive_or_expression(self)




    def inclusive_or_expression(self):

        localctx = CSharpParser.Inclusive_or_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_inclusive_or_expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 809
            self.exclusive_or_expression()
            self.state = 814
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,40,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 810
                    self.match(CSharpParser.BITWISE_OR)
                    self.state = 811
                    self.exclusive_or_expression() 
                self.state = 816
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,40,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Exclusive_or_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def and_expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.And_expressionContext)
            else:
                return self.getTypedRuleContext(CSharpParser.And_expressionContext,i)


        def CARET(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.CARET)
            else:
                return self.getToken(CSharpParser.CARET, i)

        def getRuleIndex(self):
            return CSharpParser.RULE_exclusive_or_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExclusive_or_expression" ):
                listener.enterExclusive_or_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExclusive_or_expression" ):
                listener.exitExclusive_or_expression(self)




    def exclusive_or_expression(self):

        localctx = CSharpParser.Exclusive_or_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_exclusive_or_expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 817
            self.and_expression()
            self.state = 822
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,41,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 818
                    self.match(CSharpParser.CARET)
                    self.state = 819
                    self.and_expression() 
                self.state = 824
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,41,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class And_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def equality_expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Equality_expressionContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Equality_expressionContext,i)


        def AMP(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.AMP)
            else:
                return self.getToken(CSharpParser.AMP, i)

        def getRuleIndex(self):
            return CSharpParser.RULE_and_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnd_expression" ):
                listener.enterAnd_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnd_expression" ):
                listener.exitAnd_expression(self)




    def and_expression(self):

        localctx = CSharpParser.And_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_and_expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 825
            self.equality_expression()
            self.state = 830
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,42,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 826
                    self.match(CSharpParser.AMP)
                    self.state = 827
                    self.equality_expression() 
                self.state = 832
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,42,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Equality_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def relational_expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Relational_expressionContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Relational_expressionContext,i)


        def OP_EQ(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.OP_EQ)
            else:
                return self.getToken(CSharpParser.OP_EQ, i)

        def OP_NE(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.OP_NE)
            else:
                return self.getToken(CSharpParser.OP_NE, i)

        def getRuleIndex(self):
            return CSharpParser.RULE_equality_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEquality_expression" ):
                listener.enterEquality_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEquality_expression" ):
                listener.exitEquality_expression(self)




    def equality_expression(self):

        localctx = CSharpParser.Equality_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_equality_expression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 833
            self.relational_expression()
            self.state = 838
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,43,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 834
                    _la = self._input.LA(1)
                    if not(_la==161 or _la==162):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 835
                    self.relational_expression() 
                self.state = 840
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,43,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Relational_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def shift_expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Shift_expressionContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Shift_expressionContext,i)


        def IS(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.IS)
            else:
                return self.getToken(CSharpParser.IS, i)

        def isType(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.IsTypeContext)
            else:
                return self.getTypedRuleContext(CSharpParser.IsTypeContext,i)


        def AS(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.AS)
            else:
                return self.getToken(CSharpParser.AS, i)

        def pattern(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.PatternContext)
            else:
                return self.getTypedRuleContext(CSharpParser.PatternContext,i)


        def LT(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.LT)
            else:
                return self.getToken(CSharpParser.LT, i)

        def GT(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.GT)
            else:
                return self.getToken(CSharpParser.GT, i)

        def OP_LE(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.OP_LE)
            else:
                return self.getToken(CSharpParser.OP_LE, i)

        def OP_GE(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.OP_GE)
            else:
                return self.getToken(CSharpParser.OP_GE, i)

        def getRuleIndex(self):
            return CSharpParser.RULE_relational_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRelational_expression" ):
                listener.enterRelational_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRelational_expression" ):
                listener.exitRelational_expression(self)




    def relational_expression(self):

        localctx = CSharpParser.Relational_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_relational_expression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 841
            self.shift_expression()
            self.state = 852
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,45,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 850
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,44,self._ctx)
                    if la_ == 1:
                        self.state = 842
                        _la = self._input.LA(1)
                        if not(((((_la - 151)) & ~0x3f) == 0 and ((1 << (_la - 151)) & 12291) != 0)):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 843
                        self.shift_expression()
                        pass

                    elif la_ == 2:
                        self.state = 844
                        self.match(CSharpParser.IS)
                        self.state = 845
                        self.isType()
                        pass

                    elif la_ == 3:
                        self.state = 846
                        self.match(CSharpParser.AS)
                        self.state = 847
                        self.isType()
                        pass

                    elif la_ == 4:
                        self.state = 848
                        self.match(CSharpParser.IS)
                        self.state = 849
                        self.pattern()
                        pass

             
                self.state = 854
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,45,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Shift_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def additive_expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Additive_expressionContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Additive_expressionContext,i)


        def OP_LEFT_SHIFT(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.OP_LEFT_SHIFT)
            else:
                return self.getToken(CSharpParser.OP_LEFT_SHIFT, i)

        def right_shift(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Right_shiftContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Right_shiftContext,i)


        def getRuleIndex(self):
            return CSharpParser.RULE_shift_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShift_expression" ):
                listener.enterShift_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShift_expression" ):
                listener.exitShift_expression(self)




    def shift_expression(self):

        localctx = CSharpParser.Shift_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_shift_expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 855
            self.additive_expression()
            self.state = 863
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,47,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 858
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [173]:
                        self.state = 856
                        self.match(CSharpParser.OP_LEFT_SHIFT)
                        pass
                    elif token in [152]:
                        self.state = 857
                        self.right_shift()
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 860
                    self.additive_expression() 
                self.state = 865
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,47,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Additive_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def multiplicative_expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Multiplicative_expressionContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Multiplicative_expressionContext,i)


        def PLUS(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.PLUS)
            else:
                return self.getToken(CSharpParser.PLUS, i)

        def MINUS(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.MINUS)
            else:
                return self.getToken(CSharpParser.MINUS, i)

        def getRuleIndex(self):
            return CSharpParser.RULE_additive_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAdditive_expression" ):
                listener.enterAdditive_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAdditive_expression" ):
                listener.exitAdditive_expression(self)




    def additive_expression(self):

        localctx = CSharpParser.Additive_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_additive_expression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 866
            self.multiplicative_expression()
            self.state = 871
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==140 or _la==141:
                self.state = 867
                _la = self._input.LA(1)
                if not(_la==140 or _la==141):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 868
                self.multiplicative_expression()
                self.state = 873
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Multiplicative_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def switch_expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Switch_expressionContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Switch_expressionContext,i)


        def STAR(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.STAR)
            else:
                return self.getToken(CSharpParser.STAR, i)

        def DIV(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.DIV)
            else:
                return self.getToken(CSharpParser.DIV, i)

        def PERCENT(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.PERCENT)
            else:
                return self.getToken(CSharpParser.PERCENT, i)

        def getRuleIndex(self):
            return CSharpParser.RULE_multiplicative_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMultiplicative_expression" ):
                listener.enterMultiplicative_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMultiplicative_expression" ):
                listener.exitMultiplicative_expression(self)




    def multiplicative_expression(self):

        localctx = CSharpParser.Multiplicative_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_multiplicative_expression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 874
            self.switch_expression()
            self.state = 879
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 142)) & ~0x3f) == 0 and ((1 << (_la - 142)) & 7) != 0):
                self.state = 875
                _la = self._input.LA(1)
                if not(((((_la - 142)) & ~0x3f) == 0 and ((1 << (_la - 142)) & 7) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 876
                self.switch_expression()
                self.state = 881
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Switch_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def range_expression(self):
            return self.getTypedRuleContext(CSharpParser.Range_expressionContext,0)


        def SWITCH(self):
            return self.getToken(CSharpParser.SWITCH, 0)

        def OPEN_BRACE(self):
            return self.getToken(CSharpParser.OPEN_BRACE, 0)

        def CLOSE_BRACE(self):
            return self.getToken(CSharpParser.CLOSE_BRACE, 0)

        def switch_expression_arms(self):
            return self.getTypedRuleContext(CSharpParser.Switch_expression_armsContext,0)


        def COMMA(self):
            return self.getToken(CSharpParser.COMMA, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_switch_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSwitch_expression" ):
                listener.enterSwitch_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSwitch_expression" ):
                listener.exitSwitch_expression(self)




    def switch_expression(self):

        localctx = CSharpParser.Switch_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_switch_expression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 882
            self.range_expression()
            self.state = 892
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==97:
                self.state = 883
                self.match(CSharpParser.SWITCH)
                self.state = 884
                self.match(CSharpParser.OPEN_BRACE)
                self.state = 889
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -3380434636408638464) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & -11632925374659333) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & 140789445113889) != 0):
                    self.state = 885
                    self.switch_expression_arms()
                    self.state = 887
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==137:
                        self.state = 886
                        self.match(CSharpParser.COMMA)




                self.state = 891
                self.match(CSharpParser.CLOSE_BRACE)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Switch_expression_armsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def switch_expression_arm(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Switch_expression_armContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Switch_expression_armContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.COMMA)
            else:
                return self.getToken(CSharpParser.COMMA, i)

        def getRuleIndex(self):
            return CSharpParser.RULE_switch_expression_arms

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSwitch_expression_arms" ):
                listener.enterSwitch_expression_arms(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSwitch_expression_arms" ):
                listener.exitSwitch_expression_arms(self)




    def switch_expression_arms(self):

        localctx = CSharpParser.Switch_expression_armsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_switch_expression_arms)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 894
            self.switch_expression_arm()
            self.state = 899
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,53,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 895
                    self.match(CSharpParser.COMMA)
                    self.state = 896
                    self.switch_expression_arm() 
                self.state = 901
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,53,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Switch_expression_armContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pattern(self):
            return self.getTypedRuleContext(CSharpParser.PatternContext,0)


        def right_arrow(self):
            return self.getTypedRuleContext(CSharpParser.Right_arrowContext,0)


        def throwable_expression(self):
            return self.getTypedRuleContext(CSharpParser.Throwable_expressionContext,0)


        def case_guard(self):
            return self.getTypedRuleContext(CSharpParser.Case_guardContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_switch_expression_arm

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSwitch_expression_arm" ):
                listener.enterSwitch_expression_arm(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSwitch_expression_arm" ):
                listener.exitSwitch_expression_arm(self)




    def switch_expression_arm(self):

        localctx = CSharpParser.Switch_expression_armContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_switch_expression_arm)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 902
            self.pattern()
            self.state = 904
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==114:
                self.state = 903
                self.case_guard()


            self.state = 906
            self.right_arrow()
            self.state = 907
            self.throwable_expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Range_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def unary_expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Unary_expressionContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Unary_expressionContext,i)


        def OP_RANGE(self):
            return self.getToken(CSharpParser.OP_RANGE, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_range_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRange_expression" ):
                listener.enterRange_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRange_expression" ):
                listener.exitRange_expression(self)




    def range_expression(self):

        localctx = CSharpParser.Range_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_range_expression)
        self._la = 0 # Token type
        try:
            self.state = 917
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,57,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 909
                self.unary_expression()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 911
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -3380434636408638464) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & -11773663400409877) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & 404568097) != 0):
                    self.state = 910
                    self.unary_expression()


                self.state = 913
                self.match(CSharpParser.OP_RANGE)
                self.state = 915
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,56,self._ctx)
                if la_ == 1:
                    self.state = 914
                    self.unary_expression()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Unary_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def cast_expression(self):
            return self.getTypedRuleContext(CSharpParser.Cast_expressionContext,0)


        def primary_expression(self):
            return self.getTypedRuleContext(CSharpParser.Primary_expressionContext,0)


        def PLUS(self):
            return self.getToken(CSharpParser.PLUS, 0)

        def unary_expression(self):
            return self.getTypedRuleContext(CSharpParser.Unary_expressionContext,0)


        def MINUS(self):
            return self.getToken(CSharpParser.MINUS, 0)

        def BANG(self):
            return self.getToken(CSharpParser.BANG, 0)

        def TILDE(self):
            return self.getToken(CSharpParser.TILDE, 0)

        def OP_INC(self):
            return self.getToken(CSharpParser.OP_INC, 0)

        def OP_DEC(self):
            return self.getToken(CSharpParser.OP_DEC, 0)

        def AWAIT(self):
            return self.getToken(CSharpParser.AWAIT, 0)

        def AMP(self):
            return self.getToken(CSharpParser.AMP, 0)

        def STAR(self):
            return self.getToken(CSharpParser.STAR, 0)

        def CARET(self):
            return self.getToken(CSharpParser.CARET, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_unary_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnary_expression" ):
                listener.enterUnary_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnary_expression" ):
                listener.exitUnary_expression(self)




    def unary_expression(self):

        localctx = CSharpParser.Unary_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_unary_expression)
        try:
            self.state = 941
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,58,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 919
                self.cast_expression()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 920
                self.primary_expression()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 921
                self.match(CSharpParser.PLUS)
                self.state = 922
                self.unary_expression()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 923
                self.match(CSharpParser.MINUS)
                self.state = 924
                self.unary_expression()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 925
                self.match(CSharpParser.BANG)
                self.state = 926
                self.unary_expression()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 927
                self.match(CSharpParser.TILDE)
                self.state = 928
                self.unary_expression()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 929
                self.match(CSharpParser.OP_INC)
                self.state = 930
                self.unary_expression()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 931
                self.match(CSharpParser.OP_DEC)
                self.state = 932
                self.unary_expression()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 933
                self.match(CSharpParser.AWAIT)
                self.state = 934
                self.unary_expression()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 935
                self.match(CSharpParser.AMP)
                self.state = 936
                self.unary_expression()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 937
                self.match(CSharpParser.STAR)
                self.state = 938
                self.unary_expression()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 939
                self.match(CSharpParser.CARET)
                self.state = 940
                self.unary_expression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Cast_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PARENS(self):
            return self.getToken(CSharpParser.OPEN_PARENS, 0)

        def type_(self):
            return self.getTypedRuleContext(CSharpParser.Type_Context,0)


        def CLOSE_PARENS(self):
            return self.getToken(CSharpParser.CLOSE_PARENS, 0)

        def unary_expression(self):
            return self.getTypedRuleContext(CSharpParser.Unary_expressionContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_cast_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCast_expression" ):
                listener.enterCast_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCast_expression" ):
                listener.exitCast_expression(self)




    def cast_expression(self):

        localctx = CSharpParser.Cast_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_cast_expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 943
            self.match(CSharpParser.OPEN_PARENS)
            self.state = 944
            self.type_()
            self.state = 945
            self.match(CSharpParser.CLOSE_PARENS)
            self.state = 946
            self.unary_expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Primary_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.pe = None # Primary_expression_startContext

        def primary_expression_start(self):
            return self.getTypedRuleContext(CSharpParser.Primary_expression_startContext,0)


        def BANG(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.BANG)
            else:
                return self.getToken(CSharpParser.BANG, i)

        def bracket_expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Bracket_expressionContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Bracket_expressionContext,i)


        def member_access(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Member_accessContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Member_accessContext,i)


        def method_invocation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Method_invocationContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Method_invocationContext,i)


        def OP_INC(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.OP_INC)
            else:
                return self.getToken(CSharpParser.OP_INC, i)

        def OP_DEC(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.OP_DEC)
            else:
                return self.getToken(CSharpParser.OP_DEC, i)

        def OP_PTR(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.OP_PTR)
            else:
                return self.getToken(CSharpParser.OP_PTR, i)

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(CSharpParser.IdentifierContext,i)


        def tuple_type(self):
            return self.getTypedRuleContext(CSharpParser.Tuple_typeContext,0)


        def default_value_expression(self):
            return self.getTypedRuleContext(CSharpParser.Default_value_expressionContext,0)


        def stackalloc_expression(self):
            return self.getTypedRuleContext(CSharpParser.Stackalloc_expressionContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_primary_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrimary_expression" ):
                listener.enterPrimary_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrimary_expression" ):
                listener.exitPrimary_expression(self)




    def primary_expression(self):

        localctx = CSharpParser.Primary_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_primary_expression)
        self._la = 0 # Token type
        try:
            self.state = 989
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,67,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 948
                localctx.pe = self.primary_expression_start()
                self.state = 950
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,59,self._ctx)
                if la_ == 1:
                    self.state = 949
                    self.match(CSharpParser.BANG)


                self.state = 955
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,60,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 952
                        self.bracket_expression() 
                    self.state = 957
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,60,self._ctx)

                self.state = 959
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==148:
                    self.state = 958
                    self.match(CSharpParser.BANG)


                self.state = 983
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,66,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 967
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [136, 153]:
                            self.state = 961
                            self.member_access()
                            pass
                        elif token in [134]:
                            self.state = 962
                            self.method_invocation()
                            pass
                        elif token in [156]:
                            self.state = 963
                            self.match(CSharpParser.OP_INC)
                            pass
                        elif token in [157]:
                            self.state = 964
                            self.match(CSharpParser.OP_DEC)
                            pass
                        elif token in [160]:
                            self.state = 965
                            self.match(CSharpParser.OP_PTR)
                            self.state = 966
                            self.identifier()
                            pass
                        else:
                            raise NoViableAltException(self)

                        self.state = 970
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,63,self._ctx)
                        if la_ == 1:
                            self.state = 969
                            self.match(CSharpParser.BANG)


                        self.state = 975
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,64,self._ctx)
                        while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                            if _alt==1:
                                self.state = 972
                                self.bracket_expression() 
                            self.state = 977
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input,64,self._ctx)

                        self.state = 979
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==148:
                            self.state = 978
                            self.match(CSharpParser.BANG)

                 
                    self.state = 985
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,66,self._ctx)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 986
                self.tuple_type()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 987
                self.default_value_expression()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 988
                self.stackalloc_expression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Primary_expression_startContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CSharpParser.RULE_primary_expression_start

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class LiteralAccessExpressionContext(Primary_expression_startContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CSharpParser.Primary_expression_startContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LITERAL_ACCESS(self):
            return self.getToken(CSharpParser.LITERAL_ACCESS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLiteralAccessExpression" ):
                listener.enterLiteralAccessExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLiteralAccessExpression" ):
                listener.exitLiteralAccessExpression(self)


    class DefaultValueExpressionContext(Primary_expression_startContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CSharpParser.Primary_expression_startContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DEFAULT(self):
            return self.getToken(CSharpParser.DEFAULT, 0)
        def OPEN_PARENS(self):
            return self.getToken(CSharpParser.OPEN_PARENS, 0)
        def type_(self):
            return self.getTypedRuleContext(CSharpParser.Type_Context,0)

        def CLOSE_PARENS(self):
            return self.getToken(CSharpParser.CLOSE_PARENS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDefaultValueExpression" ):
                listener.enterDefaultValueExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDefaultValueExpression" ):
                listener.exitDefaultValueExpression(self)


    class BaseAccessExpressionContext(Primary_expression_startContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CSharpParser.Primary_expression_startContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def BASE(self):
            return self.getToken(CSharpParser.BASE, 0)
        def DOT(self):
            return self.getToken(CSharpParser.DOT, 0)
        def identifier(self):
            return self.getTypedRuleContext(CSharpParser.IdentifierContext,0)

        def OPEN_BRACKET(self):
            return self.getToken(CSharpParser.OPEN_BRACKET, 0)
        def expression_list(self):
            return self.getTypedRuleContext(CSharpParser.Expression_listContext,0)

        def CLOSE_BRACKET(self):
            return self.getToken(CSharpParser.CLOSE_BRACKET, 0)
        def type_argument_list(self):
            return self.getTypedRuleContext(CSharpParser.Type_argument_listContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBaseAccessExpression" ):
                listener.enterBaseAccessExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBaseAccessExpression" ):
                listener.exitBaseAccessExpression(self)


    class SizeofExpressionContext(Primary_expression_startContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CSharpParser.Primary_expression_startContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SIZEOF(self):
            return self.getToken(CSharpParser.SIZEOF, 0)
        def OPEN_PARENS(self):
            return self.getToken(CSharpParser.OPEN_PARENS, 0)
        def type_(self):
            return self.getTypedRuleContext(CSharpParser.Type_Context,0)

        def CLOSE_PARENS(self):
            return self.getToken(CSharpParser.CLOSE_PARENS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSizeofExpression" ):
                listener.enterSizeofExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSizeofExpression" ):
                listener.exitSizeofExpression(self)


    class ParenthesisExpressionsContext(Primary_expression_startContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CSharpParser.Primary_expression_startContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def OPEN_PARENS(self):
            return self.getToken(CSharpParser.OPEN_PARENS, 0)
        def expression(self):
            return self.getTypedRuleContext(CSharpParser.ExpressionContext,0)

        def CLOSE_PARENS(self):
            return self.getToken(CSharpParser.CLOSE_PARENS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParenthesisExpressions" ):
                listener.enterParenthesisExpressions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParenthesisExpressions" ):
                listener.exitParenthesisExpressions(self)


    class TargetTypedNewExpressionContext(Primary_expression_startContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CSharpParser.Primary_expression_startContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def NEW(self):
            return self.getToken(CSharpParser.NEW, 0)
        def target_typed_new(self):
            return self.getTypedRuleContext(CSharpParser.Target_typed_newContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTargetTypedNewExpression" ):
                listener.enterTargetTypedNewExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTargetTypedNewExpression" ):
                listener.exitTargetTypedNewExpression(self)


    class ThisReferenceExpressionContext(Primary_expression_startContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CSharpParser.Primary_expression_startContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def THIS(self):
            return self.getToken(CSharpParser.THIS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterThisReferenceExpression" ):
                listener.enterThisReferenceExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitThisReferenceExpression" ):
                listener.exitThisReferenceExpression(self)


    class ObjectCreationExpressionContext(Primary_expression_startContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CSharpParser.Primary_expression_startContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def NEW(self):
            return self.getToken(CSharpParser.NEW, 0)
        def type_(self):
            return self.getTypedRuleContext(CSharpParser.Type_Context,0)

        def anonymous_object_initializer(self):
            return self.getTypedRuleContext(CSharpParser.Anonymous_object_initializerContext,0)

        def rank_specifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Rank_specifierContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Rank_specifierContext,i)

        def array_initializer(self):
            return self.getTypedRuleContext(CSharpParser.Array_initializerContext,0)

        def object_creation_expression(self):
            return self.getTypedRuleContext(CSharpParser.Object_creation_expressionContext,0)

        def object_or_collection_initializer(self):
            return self.getTypedRuleContext(CSharpParser.Object_or_collection_initializerContext,0)

        def OPEN_BRACKET(self):
            return self.getToken(CSharpParser.OPEN_BRACKET, 0)
        def expression_list(self):
            return self.getTypedRuleContext(CSharpParser.Expression_listContext,0)

        def CLOSE_BRACKET(self):
            return self.getToken(CSharpParser.CLOSE_BRACKET, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterObjectCreationExpression" ):
                listener.enterObjectCreationExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitObjectCreationExpression" ):
                listener.exitObjectCreationExpression(self)


    class AnonymousMethodExpressionContext(Primary_expression_startContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CSharpParser.Primary_expression_startContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DELEGATE(self):
            return self.getToken(CSharpParser.DELEGATE, 0)
        def block(self):
            return self.getTypedRuleContext(CSharpParser.BlockContext,0)

        def ASYNC(self):
            return self.getToken(CSharpParser.ASYNC, 0)
        def OPEN_PARENS(self):
            return self.getToken(CSharpParser.OPEN_PARENS, 0)
        def CLOSE_PARENS(self):
            return self.getToken(CSharpParser.CLOSE_PARENS, 0)
        def explicit_anonymous_function_parameter_list(self):
            return self.getTypedRuleContext(CSharpParser.Explicit_anonymous_function_parameter_listContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnonymousMethodExpression" ):
                listener.enterAnonymousMethodExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnonymousMethodExpression" ):
                listener.exitAnonymousMethodExpression(self)


    class TypeofExpressionContext(Primary_expression_startContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CSharpParser.Primary_expression_startContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def TYPEOF(self):
            return self.getToken(CSharpParser.TYPEOF, 0)
        def OPEN_PARENS(self):
            return self.getToken(CSharpParser.OPEN_PARENS, 0)
        def CLOSE_PARENS(self):
            return self.getToken(CSharpParser.CLOSE_PARENS, 0)
        def unbound_type_name(self):
            return self.getTypedRuleContext(CSharpParser.Unbound_type_nameContext,0)

        def type_(self):
            return self.getTypedRuleContext(CSharpParser.Type_Context,0)

        def VOID(self):
            return self.getToken(CSharpParser.VOID, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeofExpression" ):
                listener.enterTypeofExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeofExpression" ):
                listener.exitTypeofExpression(self)


    class TupleExpressionContext(Primary_expression_startContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CSharpParser.Primary_expression_startContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def OPEN_PARENS(self):
            return self.getToken(CSharpParser.OPEN_PARENS, 0)
        def argument(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.ArgumentContext)
            else:
                return self.getTypedRuleContext(CSharpParser.ArgumentContext,i)

        def CLOSE_PARENS(self):
            return self.getToken(CSharpParser.CLOSE_PARENS, 0)
        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.COMMA)
            else:
                return self.getToken(CSharpParser.COMMA, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTupleExpression" ):
                listener.enterTupleExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTupleExpression" ):
                listener.exitTupleExpression(self)


    class UncheckedExpressionContext(Primary_expression_startContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CSharpParser.Primary_expression_startContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def UNCHECKED(self):
            return self.getToken(CSharpParser.UNCHECKED, 0)
        def OPEN_PARENS(self):
            return self.getToken(CSharpParser.OPEN_PARENS, 0)
        def expression(self):
            return self.getTypedRuleContext(CSharpParser.ExpressionContext,0)

        def CLOSE_PARENS(self):
            return self.getToken(CSharpParser.CLOSE_PARENS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUncheckedExpression" ):
                listener.enterUncheckedExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUncheckedExpression" ):
                listener.exitUncheckedExpression(self)


    class SimpleNameExpressionContext(Primary_expression_startContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CSharpParser.Primary_expression_startContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def identifier(self):
            return self.getTypedRuleContext(CSharpParser.IdentifierContext,0)

        def type_argument_list(self):
            return self.getTypedRuleContext(CSharpParser.Type_argument_listContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleNameExpression" ):
                listener.enterSimpleNameExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleNameExpression" ):
                listener.exitSimpleNameExpression(self)


    class MemberAccessExpressionContext(Primary_expression_startContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CSharpParser.Primary_expression_startContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def predefined_type(self):
            return self.getTypedRuleContext(CSharpParser.Predefined_typeContext,0)

        def qualified_alias_member(self):
            return self.getTypedRuleContext(CSharpParser.Qualified_alias_memberContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMemberAccessExpression" ):
                listener.enterMemberAccessExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMemberAccessExpression" ):
                listener.exitMemberAccessExpression(self)


    class CheckedExpressionContext(Primary_expression_startContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CSharpParser.Primary_expression_startContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CHECKED(self):
            return self.getToken(CSharpParser.CHECKED, 0)
        def OPEN_PARENS(self):
            return self.getToken(CSharpParser.OPEN_PARENS, 0)
        def expression(self):
            return self.getTypedRuleContext(CSharpParser.ExpressionContext,0)

        def CLOSE_PARENS(self):
            return self.getToken(CSharpParser.CLOSE_PARENS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCheckedExpression" ):
                listener.enterCheckedExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCheckedExpression" ):
                listener.exitCheckedExpression(self)


    class LiteralExpressionContext(Primary_expression_startContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CSharpParser.Primary_expression_startContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def literal(self):
            return self.getTypedRuleContext(CSharpParser.LiteralContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLiteralExpression" ):
                listener.enterLiteralExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLiteralExpression" ):
                listener.exitLiteralExpression(self)


    class NameofExpressionContext(Primary_expression_startContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CSharpParser.Primary_expression_startContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def NAMEOF(self):
            return self.getToken(CSharpParser.NAMEOF, 0)
        def OPEN_PARENS(self):
            return self.getToken(CSharpParser.OPEN_PARENS, 0)
        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(CSharpParser.IdentifierContext,i)

        def CLOSE_PARENS(self):
            return self.getToken(CSharpParser.CLOSE_PARENS, 0)
        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.DOT)
            else:
                return self.getToken(CSharpParser.DOT, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNameofExpression" ):
                listener.enterNameofExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNameofExpression" ):
                listener.exitNameofExpression(self)



    def primary_expression_start(self):

        localctx = CSharpParser.Primary_expression_startContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_primary_expression_start)
        self._la = 0 # Token type
        try:
            self.state = 1114
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,83,self._ctx)
            if la_ == 1:
                localctx = CSharpParser.LiteralExpressionContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 991
                self.literal()
                pass

            elif la_ == 2:
                localctx = CSharpParser.SimpleNameExpressionContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 992
                self.identifier()
                self.state = 994
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,68,self._ctx)
                if la_ == 1:
                    self.state = 993
                    self.type_argument_list()


                pass

            elif la_ == 3:
                localctx = CSharpParser.ParenthesisExpressionsContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 996
                self.match(CSharpParser.OPEN_PARENS)
                self.state = 997
                self.expression()
                self.state = 998
                self.match(CSharpParser.CLOSE_PARENS)
                pass

            elif la_ == 4:
                localctx = CSharpParser.MemberAccessExpressionContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 1000
                self.predefined_type()
                pass

            elif la_ == 5:
                localctx = CSharpParser.MemberAccessExpressionContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 1001
                self.qualified_alias_member()
                pass

            elif la_ == 6:
                localctx = CSharpParser.LiteralAccessExpressionContext(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 1002
                self.match(CSharpParser.LITERAL_ACCESS)
                pass

            elif la_ == 7:
                localctx = CSharpParser.ThisReferenceExpressionContext(self, localctx)
                self.enterOuterAlt(localctx, 7)
                self.state = 1003
                self.match(CSharpParser.THIS)
                pass

            elif la_ == 8:
                localctx = CSharpParser.BaseAccessExpressionContext(self, localctx)
                self.enterOuterAlt(localctx, 8)
                self.state = 1004
                self.match(CSharpParser.BASE)
                self.state = 1014
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [136]:
                    self.state = 1005
                    self.match(CSharpParser.DOT)
                    self.state = 1006
                    self.identifier()
                    self.state = 1008
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,69,self._ctx)
                    if la_ == 1:
                        self.state = 1007
                        self.type_argument_list()


                    pass
                elif token in [132]:
                    self.state = 1010
                    self.match(CSharpParser.OPEN_BRACKET)
                    self.state = 1011
                    self.expression_list()
                    self.state = 1012
                    self.match(CSharpParser.CLOSE_BRACKET)
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 9:
                localctx = CSharpParser.ObjectCreationExpressionContext(self, localctx)
                self.enterOuterAlt(localctx, 9)
                self.state = 1016
                self.match(CSharpParser.NEW)
                self.state = 1045
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,75,self._ctx)
                if la_ == 1:
                    self.state = 1017
                    self.type_()
                    self.state = 1039
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,74,self._ctx)
                    if la_ == 1:
                        self.state = 1018
                        self.object_creation_expression()
                        pass

                    elif la_ == 2:
                        self.state = 1019
                        self.object_or_collection_initializer()
                        pass

                    elif la_ == 3:
                        self.state = 1020
                        self.match(CSharpParser.OPEN_BRACKET)
                        self.state = 1021
                        self.expression_list()
                        self.state = 1022
                        self.match(CSharpParser.CLOSE_BRACKET)
                        self.state = 1026
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,71,self._ctx)
                        while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                            if _alt==1:
                                self.state = 1023
                                self.rank_specifier() 
                            self.state = 1028
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input,71,self._ctx)

                        self.state = 1030
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==130:
                            self.state = 1029
                            self.array_initializer()


                        pass

                    elif la_ == 4:
                        self.state = 1033 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while True:
                            self.state = 1032
                            self.rank_specifier()
                            self.state = 1035 
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if not (_la==132):
                                break

                        self.state = 1037
                        self.array_initializer()
                        pass



                elif la_ == 2:
                    self.state = 1041
                    self.anonymous_object_initializer()

                elif la_ == 3:
                    self.state = 1042
                    self.rank_specifier()
                    self.state = 1043
                    self.array_initializer()


                pass

            elif la_ == 10:
                localctx = CSharpParser.TargetTypedNewExpressionContext(self, localctx)
                self.enterOuterAlt(localctx, 10)
                self.state = 1047
                self.match(CSharpParser.NEW)
                self.state = 1048
                self.target_typed_new()
                pass

            elif la_ == 11:
                localctx = CSharpParser.TupleExpressionContext(self, localctx)
                self.enterOuterAlt(localctx, 11)
                self.state = 1049
                self.match(CSharpParser.OPEN_PARENS)
                self.state = 1050
                self.argument()
                self.state = 1053 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 1051
                    self.match(CSharpParser.COMMA)
                    self.state = 1052
                    self.argument()
                    self.state = 1055 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==137):
                        break

                self.state = 1057
                self.match(CSharpParser.CLOSE_PARENS)
                pass

            elif la_ == 12:
                localctx = CSharpParser.TypeofExpressionContext(self, localctx)
                self.enterOuterAlt(localctx, 12)
                self.state = 1059
                self.match(CSharpParser.TYPEOF)
                self.state = 1060
                self.match(CSharpParser.OPEN_PARENS)
                self.state = 1064
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,77,self._ctx)
                if la_ == 1:
                    self.state = 1061
                    self.unbound_type_name()
                    pass

                elif la_ == 2:
                    self.state = 1062
                    self.type_()
                    pass

                elif la_ == 3:
                    self.state = 1063
                    self.match(CSharpParser.VOID)
                    pass


                self.state = 1066
                self.match(CSharpParser.CLOSE_PARENS)
                pass

            elif la_ == 13:
                localctx = CSharpParser.CheckedExpressionContext(self, localctx)
                self.enterOuterAlt(localctx, 13)
                self.state = 1067
                self.match(CSharpParser.CHECKED)
                self.state = 1068
                self.match(CSharpParser.OPEN_PARENS)
                self.state = 1069
                self.expression()
                self.state = 1070
                self.match(CSharpParser.CLOSE_PARENS)
                pass

            elif la_ == 14:
                localctx = CSharpParser.UncheckedExpressionContext(self, localctx)
                self.enterOuterAlt(localctx, 14)
                self.state = 1072
                self.match(CSharpParser.UNCHECKED)
                self.state = 1073
                self.match(CSharpParser.OPEN_PARENS)
                self.state = 1074
                self.expression()
                self.state = 1075
                self.match(CSharpParser.CLOSE_PARENS)
                pass

            elif la_ == 15:
                localctx = CSharpParser.DefaultValueExpressionContext(self, localctx)
                self.enterOuterAlt(localctx, 15)
                self.state = 1077
                self.match(CSharpParser.DEFAULT)
                self.state = 1082
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,78,self._ctx)
                if la_ == 1:
                    self.state = 1078
                    self.match(CSharpParser.OPEN_PARENS)
                    self.state = 1079
                    self.type_()
                    self.state = 1080
                    self.match(CSharpParser.CLOSE_PARENS)


                pass

            elif la_ == 16:
                localctx = CSharpParser.AnonymousMethodExpressionContext(self, localctx)
                self.enterOuterAlt(localctx, 16)
                self.state = 1085
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==16:
                    self.state = 1084
                    self.match(CSharpParser.ASYNC)


                self.state = 1087
                self.match(CSharpParser.DELEGATE)
                self.state = 1093
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==134:
                    self.state = 1088
                    self.match(CSharpParser.OPEN_PARENS)
                    self.state = 1090
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if ((((_la - 10)) & ~0x3f) == 0 and ((1 << (_la - 10)) & 7040363787287829229) != 0) or ((((_la - 75)) & ~0x3f) == 0 and ((1 << (_la - 75)) & 576484575146006035) != 0):
                        self.state = 1089
                        self.explicit_anonymous_function_parameter_list()


                    self.state = 1092
                    self.match(CSharpParser.CLOSE_PARENS)


                self.state = 1095
                self.block()
                pass

            elif la_ == 17:
                localctx = CSharpParser.SizeofExpressionContext(self, localctx)
                self.enterOuterAlt(localctx, 17)
                self.state = 1096
                self.match(CSharpParser.SIZEOF)
                self.state = 1097
                self.match(CSharpParser.OPEN_PARENS)
                self.state = 1098
                self.type_()
                self.state = 1099
                self.match(CSharpParser.CLOSE_PARENS)
                pass

            elif la_ == 18:
                localctx = CSharpParser.NameofExpressionContext(self, localctx)
                self.enterOuterAlt(localctx, 18)
                self.state = 1101
                self.match(CSharpParser.NAMEOF)
                self.state = 1102
                self.match(CSharpParser.OPEN_PARENS)
                self.state = 1108
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,82,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1103
                        self.identifier()
                        self.state = 1104
                        self.match(CSharpParser.DOT) 
                    self.state = 1110
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,82,self._ctx)

                self.state = 1111
                self.identifier()
                self.state = 1112
                self.match(CSharpParser.CLOSE_PARENS)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Throwable_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(CSharpParser.ExpressionContext,0)


        def throw_expression(self):
            return self.getTypedRuleContext(CSharpParser.Throw_expressionContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_throwable_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterThrowable_expression" ):
                listener.enterThrowable_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitThrowable_expression" ):
                listener.exitThrowable_expression(self)




    def throwable_expression(self):

        localctx = CSharpParser.Throwable_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_throwable_expression)
        try:
            self.state = 1118
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [10, 12, 13, 15, 16, 17, 18, 19, 21, 22, 25, 26, 30, 31, 32, 33, 35, 36, 39, 43, 46, 49, 50, 52, 56, 60, 62, 63, 65, 66, 68, 70, 71, 72, 75, 79, 84, 85, 87, 89, 90, 91, 92, 93, 94, 95, 98, 100, 102, 103, 104, 105, 106, 108, 110, 114, 115, 117, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 134, 140, 141, 142, 145, 147, 148, 149, 156, 157, 176]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1116
                self.expression()
                pass
            elif token in [99]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1117
                self.throw_expression()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Throw_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def THROW(self):
            return self.getToken(CSharpParser.THROW, 0)

        def expression(self):
            return self.getTypedRuleContext(CSharpParser.ExpressionContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_throw_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterThrow_expression" ):
                listener.enterThrow_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitThrow_expression" ):
                listener.exitThrow_expression(self)




    def throw_expression(self):

        localctx = CSharpParser.Throw_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_throw_expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1120
            self.match(CSharpParser.THROW)
            self.state = 1121
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Member_accessContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DOT(self):
            return self.getToken(CSharpParser.DOT, 0)

        def identifier(self):
            return self.getTypedRuleContext(CSharpParser.IdentifierContext,0)


        def INTERR(self):
            return self.getToken(CSharpParser.INTERR, 0)

        def type_argument_list(self):
            return self.getTypedRuleContext(CSharpParser.Type_argument_listContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_member_access

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMember_access" ):
                listener.enterMember_access(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMember_access" ):
                listener.exitMember_access(self)




    def member_access(self):

        localctx = CSharpParser.Member_accessContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_member_access)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1124
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==153:
                self.state = 1123
                self.match(CSharpParser.INTERR)


            self.state = 1126
            self.match(CSharpParser.DOT)
            self.state = 1127
            self.identifier()
            self.state = 1129
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,86,self._ctx)
            if la_ == 1:
                self.state = 1128
                self.type_argument_list()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Bracket_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_BRACKET(self):
            return self.getToken(CSharpParser.OPEN_BRACKET, 0)

        def indexer_argument(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Indexer_argumentContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Indexer_argumentContext,i)


        def CLOSE_BRACKET(self):
            return self.getToken(CSharpParser.CLOSE_BRACKET, 0)

        def INTERR(self):
            return self.getToken(CSharpParser.INTERR, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.COMMA)
            else:
                return self.getToken(CSharpParser.COMMA, i)

        def getRuleIndex(self):
            return CSharpParser.RULE_bracket_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBracket_expression" ):
                listener.enterBracket_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBracket_expression" ):
                listener.exitBracket_expression(self)




    def bracket_expression(self):

        localctx = CSharpParser.Bracket_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_bracket_expression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1132
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==153:
                self.state = 1131
                self.match(CSharpParser.INTERR)


            self.state = 1134
            self.match(CSharpParser.OPEN_BRACKET)
            self.state = 1135
            self.indexer_argument()
            self.state = 1140
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==137:
                self.state = 1136
                self.match(CSharpParser.COMMA)
                self.state = 1137
                self.indexer_argument()
                self.state = 1142
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1143
            self.match(CSharpParser.CLOSE_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Indexer_argumentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(CSharpParser.ExpressionContext,0)


        def identifier(self):
            return self.getTypedRuleContext(CSharpParser.IdentifierContext,0)


        def COLON(self):
            return self.getToken(CSharpParser.COLON, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_indexer_argument

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndexer_argument" ):
                listener.enterIndexer_argument(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndexer_argument" ):
                listener.exitIndexer_argument(self)




    def indexer_argument(self):

        localctx = CSharpParser.Indexer_argumentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_indexer_argument)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1148
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,89,self._ctx)
            if la_ == 1:
                self.state = 1145
                self.identifier()
                self.state = 1146
                self.match(CSharpParser.COLON)


            self.state = 1150
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Predefined_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BOOL(self):
            return self.getToken(CSharpParser.BOOL, 0)

        def BYTE(self):
            return self.getToken(CSharpParser.BYTE, 0)

        def CHAR(self):
            return self.getToken(CSharpParser.CHAR, 0)

        def DECIMAL(self):
            return self.getToken(CSharpParser.DECIMAL, 0)

        def DOUBLE(self):
            return self.getToken(CSharpParser.DOUBLE, 0)

        def FLOAT(self):
            return self.getToken(CSharpParser.FLOAT, 0)

        def INT(self):
            return self.getToken(CSharpParser.INT, 0)

        def LONG(self):
            return self.getToken(CSharpParser.LONG, 0)

        def OBJECT(self):
            return self.getToken(CSharpParser.OBJECT, 0)

        def SBYTE(self):
            return self.getToken(CSharpParser.SBYTE, 0)

        def SHORT(self):
            return self.getToken(CSharpParser.SHORT, 0)

        def STRING(self):
            return self.getToken(CSharpParser.STRING, 0)

        def UINT(self):
            return self.getToken(CSharpParser.UINT, 0)

        def ULONG(self):
            return self.getToken(CSharpParser.ULONG, 0)

        def USHORT(self):
            return self.getToken(CSharpParser.USHORT, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_predefined_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPredefined_type" ):
                listener.enterPredefined_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPredefined_type" ):
                listener.exitPredefined_type(self)




    def predefined_type(self):

        localctx = CSharpParser.Predefined_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_predefined_type)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1152
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 72127998253858816) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & 9621871788097) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Expression_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(CSharpParser.ExpressionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.COMMA)
            else:
                return self.getToken(CSharpParser.COMMA, i)

        def getRuleIndex(self):
            return CSharpParser.RULE_expression_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpression_list" ):
                listener.enterExpression_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpression_list" ):
                listener.exitExpression_list(self)




    def expression_list(self):

        localctx = CSharpParser.Expression_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_expression_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1154
            self.expression()
            self.state = 1159
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==137:
                self.state = 1155
                self.match(CSharpParser.COMMA)
                self.state = 1156
                self.expression()
                self.state = 1161
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Object_or_collection_initializerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def object_initializer(self):
            return self.getTypedRuleContext(CSharpParser.Object_initializerContext,0)


        def collection_initializer(self):
            return self.getTypedRuleContext(CSharpParser.Collection_initializerContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_object_or_collection_initializer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterObject_or_collection_initializer" ):
                listener.enterObject_or_collection_initializer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitObject_or_collection_initializer" ):
                listener.exitObject_or_collection_initializer(self)




    def object_or_collection_initializer(self):

        localctx = CSharpParser.Object_or_collection_initializerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_object_or_collection_initializer)
        try:
            self.state = 1164
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,91,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1162
                self.object_initializer()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1163
                self.collection_initializer()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Object_initializerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_BRACE(self):
            return self.getToken(CSharpParser.OPEN_BRACE, 0)

        def CLOSE_BRACE(self):
            return self.getToken(CSharpParser.CLOSE_BRACE, 0)

        def member_initializer_list(self):
            return self.getTypedRuleContext(CSharpParser.Member_initializer_listContext,0)


        def COMMA(self):
            return self.getToken(CSharpParser.COMMA, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_object_initializer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterObject_initializer" ):
                listener.enterObject_initializer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitObject_initializer" ):
                listener.exitObject_initializer(self)




    def object_initializer(self):

        localctx = CSharpParser.Object_initializerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_object_initializer)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1166
            self.match(CSharpParser.OPEN_BRACE)
            self.state = 1171
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 10)) & ~0x3f) == 0 and ((1 << (_la - 10)) & 4698386359180593389) != 0) or ((((_la - 75)) & ~0x3f) == 0 and ((1 << (_la - 75)) & 144138864083125265) != 0):
                self.state = 1167
                self.member_initializer_list()
                self.state = 1169
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==137:
                    self.state = 1168
                    self.match(CSharpParser.COMMA)




            self.state = 1173
            self.match(CSharpParser.CLOSE_BRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Member_initializer_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def member_initializer(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Member_initializerContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Member_initializerContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.COMMA)
            else:
                return self.getToken(CSharpParser.COMMA, i)

        def getRuleIndex(self):
            return CSharpParser.RULE_member_initializer_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMember_initializer_list" ):
                listener.enterMember_initializer_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMember_initializer_list" ):
                listener.exitMember_initializer_list(self)




    def member_initializer_list(self):

        localctx = CSharpParser.Member_initializer_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_member_initializer_list)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1175
            self.member_initializer()
            self.state = 1180
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,94,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1176
                    self.match(CSharpParser.COMMA)
                    self.state = 1177
                    self.member_initializer() 
                self.state = 1182
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,94,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Member_initializerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ASSIGNMENT(self):
            return self.getToken(CSharpParser.ASSIGNMENT, 0)

        def initializer_value(self):
            return self.getTypedRuleContext(CSharpParser.Initializer_valueContext,0)


        def identifier(self):
            return self.getTypedRuleContext(CSharpParser.IdentifierContext,0)


        def OPEN_BRACKET(self):
            return self.getToken(CSharpParser.OPEN_BRACKET, 0)

        def expression(self):
            return self.getTypedRuleContext(CSharpParser.ExpressionContext,0)


        def CLOSE_BRACKET(self):
            return self.getToken(CSharpParser.CLOSE_BRACKET, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_member_initializer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMember_initializer" ):
                listener.enterMember_initializer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMember_initializer" ):
                listener.exitMember_initializer(self)




    def member_initializer(self):

        localctx = CSharpParser.Member_initializerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_member_initializer)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1188
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [10, 12, 13, 15, 16, 17, 21, 33, 36, 39, 49, 50, 52, 60, 62, 63, 66, 72, 75, 79, 85, 89, 90, 106, 110, 114, 115, 117, 119]:
                self.state = 1183
                self.identifier()
                pass
            elif token in [132]:
                self.state = 1184
                self.match(CSharpParser.OPEN_BRACKET)
                self.state = 1185
                self.expression()
                self.state = 1186
                self.match(CSharpParser.CLOSE_BRACKET)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 1190
            self.match(CSharpParser.ASSIGNMENT)
            self.state = 1191
            self.initializer_value()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Initializer_valueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(CSharpParser.ExpressionContext,0)


        def object_or_collection_initializer(self):
            return self.getTypedRuleContext(CSharpParser.Object_or_collection_initializerContext,0)


        def tuple_type(self):
            return self.getTypedRuleContext(CSharpParser.Tuple_typeContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_initializer_value

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInitializer_value" ):
                listener.enterInitializer_value(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInitializer_value" ):
                listener.exitInitializer_value(self)




    def initializer_value(self):

        localctx = CSharpParser.Initializer_valueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_initializer_value)
        try:
            self.state = 1196
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,96,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1193
                self.expression()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1194
                self.object_or_collection_initializer()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1195
                self.tuple_type()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Collection_initializerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_BRACE(self):
            return self.getToken(CSharpParser.OPEN_BRACE, 0)

        def element_initializer(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Element_initializerContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Element_initializerContext,i)


        def CLOSE_BRACE(self):
            return self.getToken(CSharpParser.CLOSE_BRACE, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.COMMA)
            else:
                return self.getToken(CSharpParser.COMMA, i)

        def getRuleIndex(self):
            return CSharpParser.RULE_collection_initializer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCollection_initializer" ):
                listener.enterCollection_initializer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCollection_initializer" ):
                listener.exitCollection_initializer(self)




    def collection_initializer(self):

        localctx = CSharpParser.Collection_initializerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_collection_initializer)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1198
            self.match(CSharpParser.OPEN_BRACE)
            self.state = 1199
            self.element_initializer()
            self.state = 1204
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,97,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1200
                    self.match(CSharpParser.COMMA)
                    self.state = 1201
                    self.element_initializer() 
                self.state = 1206
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,97,self._ctx)

            self.state = 1208
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==137:
                self.state = 1207
                self.match(CSharpParser.COMMA)


            self.state = 1210
            self.match(CSharpParser.CLOSE_BRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Element_initializerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def non_assignment_expression(self):
            return self.getTypedRuleContext(CSharpParser.Non_assignment_expressionContext,0)


        def OPEN_BRACE(self):
            return self.getToken(CSharpParser.OPEN_BRACE, 0)

        def expression_list(self):
            return self.getTypedRuleContext(CSharpParser.Expression_listContext,0)


        def CLOSE_BRACE(self):
            return self.getToken(CSharpParser.CLOSE_BRACE, 0)

        def expression(self):
            return self.getTypedRuleContext(CSharpParser.ExpressionContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_element_initializer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElement_initializer" ):
                listener.enterElement_initializer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElement_initializer" ):
                listener.exitElement_initializer(self)




    def element_initializer(self):

        localctx = CSharpParser.Element_initializerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_element_initializer)
        try:
            self.state = 1218
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,99,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1212
                self.non_assignment_expression()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1213
                self.match(CSharpParser.OPEN_BRACE)
                self.state = 1214
                self.expression_list()
                self.state = 1215
                self.match(CSharpParser.CLOSE_BRACE)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1217
                self.expression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Anonymous_object_initializerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_BRACE(self):
            return self.getToken(CSharpParser.OPEN_BRACE, 0)

        def CLOSE_BRACE(self):
            return self.getToken(CSharpParser.CLOSE_BRACE, 0)

        def member_declarator_list(self):
            return self.getTypedRuleContext(CSharpParser.Member_declarator_listContext,0)


        def COMMA(self):
            return self.getToken(CSharpParser.COMMA, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_anonymous_object_initializer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnonymous_object_initializer" ):
                listener.enterAnonymous_object_initializer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnonymous_object_initializer" ):
                listener.exitAnonymous_object_initializer(self)




    def anonymous_object_initializer(self):

        localctx = CSharpParser.Anonymous_object_initializerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_anonymous_object_initializer)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1220
            self.match(CSharpParser.OPEN_BRACE)
            self.state = 1225
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 10)) & ~0x3f) == 0 and ((1 << (_la - 10)) & 8481480492266396653) != 0) or ((((_la - 75)) & ~0x3f) == 0 and ((1 << (_la - 75)) & 612478051604222993) != 0):
                self.state = 1221
                self.member_declarator_list()
                self.state = 1223
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==137:
                    self.state = 1222
                    self.match(CSharpParser.COMMA)




            self.state = 1227
            self.match(CSharpParser.CLOSE_BRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Member_declarator_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def member_declarator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Member_declaratorContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Member_declaratorContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.COMMA)
            else:
                return self.getToken(CSharpParser.COMMA, i)

        def getRuleIndex(self):
            return CSharpParser.RULE_member_declarator_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMember_declarator_list" ):
                listener.enterMember_declarator_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMember_declarator_list" ):
                listener.exitMember_declarator_list(self)




    def member_declarator_list(self):

        localctx = CSharpParser.Member_declarator_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_member_declarator_list)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1229
            self.member_declarator()
            self.state = 1234
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,102,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1230
                    self.match(CSharpParser.COMMA)
                    self.state = 1231
                    self.member_declarator() 
                self.state = 1236
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,102,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Member_declaratorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def primary_expression(self):
            return self.getTypedRuleContext(CSharpParser.Primary_expressionContext,0)


        def identifier(self):
            return self.getTypedRuleContext(CSharpParser.IdentifierContext,0)


        def ASSIGNMENT(self):
            return self.getToken(CSharpParser.ASSIGNMENT, 0)

        def expression(self):
            return self.getTypedRuleContext(CSharpParser.ExpressionContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_member_declarator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMember_declarator" ):
                listener.enterMember_declarator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMember_declarator" ):
                listener.exitMember_declarator(self)




    def member_declarator(self):

        localctx = CSharpParser.Member_declaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_member_declarator)
        try:
            self.state = 1242
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,103,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1237
                self.primary_expression()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1238
                self.identifier()
                self.state = 1239
                self.match(CSharpParser.ASSIGNMENT)
                self.state = 1240
                self.expression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Unbound_type_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(CSharpParser.IdentifierContext,i)


        def DOUBLE_COLON(self):
            return self.getToken(CSharpParser.DOUBLE_COLON, 0)

        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.DOT)
            else:
                return self.getToken(CSharpParser.DOT, i)

        def generic_dimension_specifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Generic_dimension_specifierContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Generic_dimension_specifierContext,i)


        def getRuleIndex(self):
            return CSharpParser.RULE_unbound_type_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnbound_type_name" ):
                listener.enterUnbound_type_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnbound_type_name" ):
                listener.exitUnbound_type_name(self)




    def unbound_type_name(self):

        localctx = CSharpParser.Unbound_type_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_unbound_type_name)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1244
            self.identifier()
            self.state = 1253
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [135, 136, 151]:
                self.state = 1246
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==151:
                    self.state = 1245
                    self.generic_dimension_specifier()


                pass
            elif token in [154]:
                self.state = 1248
                self.match(CSharpParser.DOUBLE_COLON)
                self.state = 1249
                self.identifier()
                self.state = 1251
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==151:
                    self.state = 1250
                    self.generic_dimension_specifier()


                pass
            else:
                raise NoViableAltException(self)

            self.state = 1262
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==136:
                self.state = 1255
                self.match(CSharpParser.DOT)
                self.state = 1256
                self.identifier()
                self.state = 1258
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==151:
                    self.state = 1257
                    self.generic_dimension_specifier()


                self.state = 1264
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Generic_dimension_specifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LT(self):
            return self.getToken(CSharpParser.LT, 0)

        def GT(self):
            return self.getToken(CSharpParser.GT, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.COMMA)
            else:
                return self.getToken(CSharpParser.COMMA, i)

        def getRuleIndex(self):
            return CSharpParser.RULE_generic_dimension_specifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGeneric_dimension_specifier" ):
                listener.enterGeneric_dimension_specifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGeneric_dimension_specifier" ):
                listener.exitGeneric_dimension_specifier(self)




    def generic_dimension_specifier(self):

        localctx = CSharpParser.Generic_dimension_specifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_generic_dimension_specifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1265
            self.match(CSharpParser.LT)
            self.state = 1269
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==137:
                self.state = 1266
                self.match(CSharpParser.COMMA)
                self.state = 1271
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1272
            self.match(CSharpParser.GT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IsTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def base_type(self):
            return self.getTypedRuleContext(CSharpParser.Base_typeContext,0)


        def rank_specifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Rank_specifierContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Rank_specifierContext,i)


        def STAR(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.STAR)
            else:
                return self.getToken(CSharpParser.STAR, i)

        def INTERR(self):
            return self.getToken(CSharpParser.INTERR, 0)

        def isTypePatternArms(self):
            return self.getTypedRuleContext(CSharpParser.IsTypePatternArmsContext,0)


        def identifier(self):
            return self.getTypedRuleContext(CSharpParser.IdentifierContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_isType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIsType" ):
                listener.enterIsType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIsType" ):
                listener.exitIsType(self)




    def isType(self):

        localctx = CSharpParser.IsTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_isType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1274
            self.base_type()
            self.state = 1279
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==132 or _la==142:
                self.state = 1277
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [132]:
                    self.state = 1275
                    self.rank_specifier()
                    pass
                elif token in [142]:
                    self.state = 1276
                    self.match(CSharpParser.STAR)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1281
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1283
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,112,self._ctx)
            if la_ == 1:
                self.state = 1282
                self.match(CSharpParser.INTERR)


            self.state = 1286
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==130:
                self.state = 1285
                self.isTypePatternArms()


            self.state = 1289
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,114,self._ctx)
            if la_ == 1:
                self.state = 1288
                self.identifier()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IsTypePatternArmsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_BRACE(self):
            return self.getToken(CSharpParser.OPEN_BRACE, 0)

        def isTypePatternArm(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.IsTypePatternArmContext)
            else:
                return self.getTypedRuleContext(CSharpParser.IsTypePatternArmContext,i)


        def CLOSE_BRACE(self):
            return self.getToken(CSharpParser.CLOSE_BRACE, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.COMMA)
            else:
                return self.getToken(CSharpParser.COMMA, i)

        def getRuleIndex(self):
            return CSharpParser.RULE_isTypePatternArms

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIsTypePatternArms" ):
                listener.enterIsTypePatternArms(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIsTypePatternArms" ):
                listener.exitIsTypePatternArms(self)




    def isTypePatternArms(self):

        localctx = CSharpParser.IsTypePatternArmsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_isTypePatternArms)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1291
            self.match(CSharpParser.OPEN_BRACE)
            self.state = 1292
            self.isTypePatternArm()
            self.state = 1297
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==137:
                self.state = 1293
                self.match(CSharpParser.COMMA)
                self.state = 1294
                self.isTypePatternArm()
                self.state = 1299
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1300
            self.match(CSharpParser.CLOSE_BRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IsTypePatternArmContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(CSharpParser.IdentifierContext,0)


        def COLON(self):
            return self.getToken(CSharpParser.COLON, 0)

        def expression(self):
            return self.getTypedRuleContext(CSharpParser.ExpressionContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_isTypePatternArm

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIsTypePatternArm" ):
                listener.enterIsTypePatternArm(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIsTypePatternArm" ):
                listener.exitIsTypePatternArm(self)




    def isTypePatternArm(self):

        localctx = CSharpParser.IsTypePatternArmContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_isTypePatternArm)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1302
            self.identifier()
            self.state = 1303
            self.match(CSharpParser.COLON)
            self.state = 1304
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Lambda_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def anonymous_function_signature(self):
            return self.getTypedRuleContext(CSharpParser.Anonymous_function_signatureContext,0)


        def right_arrow(self):
            return self.getTypedRuleContext(CSharpParser.Right_arrowContext,0)


        def anonymous_function_body(self):
            return self.getTypedRuleContext(CSharpParser.Anonymous_function_bodyContext,0)


        def ASYNC(self):
            return self.getToken(CSharpParser.ASYNC, 0)

        def STATIC(self):
            return self.getToken(CSharpParser.STATIC, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_lambda_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLambda_expression" ):
                listener.enterLambda_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLambda_expression" ):
                listener.exitLambda_expression(self)




    def lambda_expression(self):

        localctx = CSharpParser.Lambda_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_lambda_expression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1307
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,116,self._ctx)
            if la_ == 1:
                self.state = 1306
                self.match(CSharpParser.ASYNC)


            self.state = 1310
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==94:
                self.state = 1309
                self.match(CSharpParser.STATIC)


            self.state = 1312
            self.anonymous_function_signature()
            self.state = 1313
            self.right_arrow()
            self.state = 1314
            self.anonymous_function_body()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Anonymous_function_signatureContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PARENS(self):
            return self.getToken(CSharpParser.OPEN_PARENS, 0)

        def CLOSE_PARENS(self):
            return self.getToken(CSharpParser.CLOSE_PARENS, 0)

        def explicit_anonymous_function_parameter_list(self):
            return self.getTypedRuleContext(CSharpParser.Explicit_anonymous_function_parameter_listContext,0)


        def implicit_anonymous_function_parameter_list(self):
            return self.getTypedRuleContext(CSharpParser.Implicit_anonymous_function_parameter_listContext,0)


        def identifier(self):
            return self.getTypedRuleContext(CSharpParser.IdentifierContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_anonymous_function_signature

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnonymous_function_signature" ):
                listener.enterAnonymous_function_signature(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnonymous_function_signature" ):
                listener.exitAnonymous_function_signature(self)




    def anonymous_function_signature(self):

        localctx = CSharpParser.Anonymous_function_signatureContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_anonymous_function_signature)
        try:
            self.state = 1327
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,118,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1316
                self.match(CSharpParser.OPEN_PARENS)
                self.state = 1317
                self.match(CSharpParser.CLOSE_PARENS)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1318
                self.match(CSharpParser.OPEN_PARENS)
                self.state = 1319
                self.explicit_anonymous_function_parameter_list()
                self.state = 1320
                self.match(CSharpParser.CLOSE_PARENS)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1322
                self.match(CSharpParser.OPEN_PARENS)
                self.state = 1323
                self.implicit_anonymous_function_parameter_list()
                self.state = 1324
                self.match(CSharpParser.CLOSE_PARENS)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1326
                self.identifier()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Explicit_anonymous_function_parameter_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def explicit_anonymous_function_parameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Explicit_anonymous_function_parameterContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Explicit_anonymous_function_parameterContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.COMMA)
            else:
                return self.getToken(CSharpParser.COMMA, i)

        def getRuleIndex(self):
            return CSharpParser.RULE_explicit_anonymous_function_parameter_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExplicit_anonymous_function_parameter_list" ):
                listener.enterExplicit_anonymous_function_parameter_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExplicit_anonymous_function_parameter_list" ):
                listener.exitExplicit_anonymous_function_parameter_list(self)




    def explicit_anonymous_function_parameter_list(self):

        localctx = CSharpParser.Explicit_anonymous_function_parameter_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_explicit_anonymous_function_parameter_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1329
            self.explicit_anonymous_function_parameter()
            self.state = 1334
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==137:
                self.state = 1330
                self.match(CSharpParser.COMMA)
                self.state = 1331
                self.explicit_anonymous_function_parameter()
                self.state = 1336
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Explicit_anonymous_function_parameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.refout = None # Token

        def type_(self):
            return self.getTypedRuleContext(CSharpParser.Type_Context,0)


        def identifier(self):
            return self.getTypedRuleContext(CSharpParser.IdentifierContext,0)


        def REF(self):
            return self.getToken(CSharpParser.REF, 0)

        def OUT(self):
            return self.getToken(CSharpParser.OUT, 0)

        def IN(self):
            return self.getToken(CSharpParser.IN, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_explicit_anonymous_function_parameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExplicit_anonymous_function_parameter" ):
                listener.enterExplicit_anonymous_function_parameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExplicit_anonymous_function_parameter" ):
                listener.exitExplicit_anonymous_function_parameter(self)




    def explicit_anonymous_function_parameter(self):

        localctx = CSharpParser.Explicit_anonymous_function_parameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_explicit_anonymous_function_parameter)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1338
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 55)) & ~0x3f) == 0 and ((1 << (_la - 55)) & 538968065) != 0):
                self.state = 1337
                localctx.refout = self._input.LT(1)
                _la = self._input.LA(1)
                if not(((((_la - 55)) & ~0x3f) == 0 and ((1 << (_la - 55)) & 538968065) != 0)):
                    localctx.refout = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 1340
            self.type_()
            self.state = 1341
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Implicit_anonymous_function_parameter_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(CSharpParser.IdentifierContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.COMMA)
            else:
                return self.getToken(CSharpParser.COMMA, i)

        def getRuleIndex(self):
            return CSharpParser.RULE_implicit_anonymous_function_parameter_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImplicit_anonymous_function_parameter_list" ):
                listener.enterImplicit_anonymous_function_parameter_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImplicit_anonymous_function_parameter_list" ):
                listener.exitImplicit_anonymous_function_parameter_list(self)




    def implicit_anonymous_function_parameter_list(self):

        localctx = CSharpParser.Implicit_anonymous_function_parameter_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_implicit_anonymous_function_parameter_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1343
            self.identifier()
            self.state = 1348
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==137:
                self.state = 1344
                self.match(CSharpParser.COMMA)
                self.state = 1345
                self.identifier()
                self.state = 1350
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Anonymous_function_bodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def throwable_expression(self):
            return self.getTypedRuleContext(CSharpParser.Throwable_expressionContext,0)


        def block(self):
            return self.getTypedRuleContext(CSharpParser.BlockContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_anonymous_function_body

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnonymous_function_body" ):
                listener.enterAnonymous_function_body(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnonymous_function_body" ):
                listener.exitAnonymous_function_body(self)




    def anonymous_function_body(self):

        localctx = CSharpParser.Anonymous_function_bodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_anonymous_function_body)
        try:
            self.state = 1353
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [10, 12, 13, 15, 16, 17, 18, 19, 21, 22, 25, 26, 30, 31, 32, 33, 35, 36, 39, 43, 46, 49, 50, 52, 56, 60, 62, 63, 65, 66, 68, 70, 71, 72, 75, 79, 84, 85, 87, 89, 90, 91, 92, 93, 94, 95, 98, 99, 100, 102, 103, 104, 105, 106, 108, 110, 114, 115, 117, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 134, 140, 141, 142, 145, 147, 148, 149, 156, 157, 176]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1351
                self.throwable_expression()
                pass
            elif token in [130]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1352
                self.block()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Query_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def from_clause(self):
            return self.getTypedRuleContext(CSharpParser.From_clauseContext,0)


        def query_body(self):
            return self.getTypedRuleContext(CSharpParser.Query_bodyContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_query_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuery_expression" ):
                listener.enterQuery_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuery_expression" ):
                listener.exitQuery_expression(self)




    def query_expression(self):

        localctx = CSharpParser.Query_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_query_expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1355
            self.from_clause()
            self.state = 1356
            self.query_body()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class From_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FROM(self):
            return self.getToken(CSharpParser.FROM, 0)

        def identifier(self):
            return self.getTypedRuleContext(CSharpParser.IdentifierContext,0)


        def IN(self):
            return self.getToken(CSharpParser.IN, 0)

        def expression(self):
            return self.getTypedRuleContext(CSharpParser.ExpressionContext,0)


        def type_(self):
            return self.getTypedRuleContext(CSharpParser.Type_Context,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_from_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFrom_clause" ):
                listener.enterFrom_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFrom_clause" ):
                listener.exitFrom_clause(self)




    def from_clause(self):

        localctx = CSharpParser.From_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_from_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1358
            self.match(CSharpParser.FROM)
            self.state = 1360
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,123,self._ctx)
            if la_ == 1:
                self.state = 1359
                self.type_()


            self.state = 1362
            self.identifier()
            self.state = 1363
            self.match(CSharpParser.IN)
            self.state = 1364
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Query_bodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def select_or_group_clause(self):
            return self.getTypedRuleContext(CSharpParser.Select_or_group_clauseContext,0)


        def query_body_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Query_body_clauseContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Query_body_clauseContext,i)


        def query_continuation(self):
            return self.getTypedRuleContext(CSharpParser.Query_continuationContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_query_body

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuery_body" ):
                listener.enterQuery_body(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuery_body" ):
                listener.exitQuery_body(self)




    def query_body(self):

        localctx = CSharpParser.Query_bodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_query_body)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1369
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & -4611123068473966592) != 0) or _la==75 or _la==115:
                self.state = 1366
                self.query_body_clause()
                self.state = 1371
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1372
            self.select_or_group_clause()
            self.state = 1374
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,125,self._ctx)
            if la_ == 1:
                self.state = 1373
                self.query_continuation()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Query_body_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def from_clause(self):
            return self.getTypedRuleContext(CSharpParser.From_clauseContext,0)


        def let_clause(self):
            return self.getTypedRuleContext(CSharpParser.Let_clauseContext,0)


        def where_clause(self):
            return self.getTypedRuleContext(CSharpParser.Where_clauseContext,0)


        def combined_join_clause(self):
            return self.getTypedRuleContext(CSharpParser.Combined_join_clauseContext,0)


        def orderby_clause(self):
            return self.getTypedRuleContext(CSharpParser.Orderby_clauseContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_query_body_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuery_body_clause" ):
                listener.enterQuery_body_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuery_body_clause" ):
                listener.exitQuery_body_clause(self)




    def query_body_clause(self):

        localctx = CSharpParser.Query_body_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_query_body_clause)
        try:
            self.state = 1381
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [49]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1376
                self.from_clause()
                pass
            elif token in [63]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1377
                self.let_clause()
                pass
            elif token in [115]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1378
                self.where_clause()
                pass
            elif token in [62]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1379
                self.combined_join_clause()
                pass
            elif token in [75]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1380
                self.orderby_clause()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Let_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LET(self):
            return self.getToken(CSharpParser.LET, 0)

        def identifier(self):
            return self.getTypedRuleContext(CSharpParser.IdentifierContext,0)


        def ASSIGNMENT(self):
            return self.getToken(CSharpParser.ASSIGNMENT, 0)

        def expression(self):
            return self.getTypedRuleContext(CSharpParser.ExpressionContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_let_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLet_clause" ):
                listener.enterLet_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLet_clause" ):
                listener.exitLet_clause(self)




    def let_clause(self):

        localctx = CSharpParser.Let_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_let_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1383
            self.match(CSharpParser.LET)
            self.state = 1384
            self.identifier()
            self.state = 1385
            self.match(CSharpParser.ASSIGNMENT)
            self.state = 1386
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Where_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHERE(self):
            return self.getToken(CSharpParser.WHERE, 0)

        def expression(self):
            return self.getTypedRuleContext(CSharpParser.ExpressionContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_where_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhere_clause" ):
                listener.enterWhere_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhere_clause" ):
                listener.exitWhere_clause(self)




    def where_clause(self):

        localctx = CSharpParser.Where_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_where_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1388
            self.match(CSharpParser.WHERE)
            self.state = 1389
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Combined_join_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def JOIN(self):
            return self.getToken(CSharpParser.JOIN, 0)

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(CSharpParser.IdentifierContext,i)


        def IN(self):
            return self.getToken(CSharpParser.IN, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(CSharpParser.ExpressionContext,i)


        def ON(self):
            return self.getToken(CSharpParser.ON, 0)

        def EQUALS(self):
            return self.getToken(CSharpParser.EQUALS, 0)

        def type_(self):
            return self.getTypedRuleContext(CSharpParser.Type_Context,0)


        def INTO(self):
            return self.getToken(CSharpParser.INTO, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_combined_join_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCombined_join_clause" ):
                listener.enterCombined_join_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCombined_join_clause" ):
                listener.exitCombined_join_clause(self)




    def combined_join_clause(self):

        localctx = CSharpParser.Combined_join_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_combined_join_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1391
            self.match(CSharpParser.JOIN)
            self.state = 1393
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,127,self._ctx)
            if la_ == 1:
                self.state = 1392
                self.type_()


            self.state = 1395
            self.identifier()
            self.state = 1396
            self.match(CSharpParser.IN)
            self.state = 1397
            self.expression()
            self.state = 1398
            self.match(CSharpParser.ON)
            self.state = 1399
            self.expression()
            self.state = 1400
            self.match(CSharpParser.EQUALS)
            self.state = 1401
            self.expression()
            self.state = 1404
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==60:
                self.state = 1402
                self.match(CSharpParser.INTO)
                self.state = 1403
                self.identifier()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Orderby_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ORDERBY(self):
            return self.getToken(CSharpParser.ORDERBY, 0)

        def ordering(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.OrderingContext)
            else:
                return self.getTypedRuleContext(CSharpParser.OrderingContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.COMMA)
            else:
                return self.getToken(CSharpParser.COMMA, i)

        def getRuleIndex(self):
            return CSharpParser.RULE_orderby_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOrderby_clause" ):
                listener.enterOrderby_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOrderby_clause" ):
                listener.exitOrderby_clause(self)




    def orderby_clause(self):

        localctx = CSharpParser.Orderby_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_orderby_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1406
            self.match(CSharpParser.ORDERBY)
            self.state = 1407
            self.ordering()
            self.state = 1412
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==137:
                self.state = 1408
                self.match(CSharpParser.COMMA)
                self.state = 1409
                self.ordering()
                self.state = 1414
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OrderingContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.dir_ = None # Token

        def expression(self):
            return self.getTypedRuleContext(CSharpParser.ExpressionContext,0)


        def ASCENDING(self):
            return self.getToken(CSharpParser.ASCENDING, 0)

        def DESCENDING(self):
            return self.getToken(CSharpParser.DESCENDING, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_ordering

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOrdering" ):
                listener.enterOrdering(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOrdering" ):
                listener.exitOrdering(self)




    def ordering(self):

        localctx = CSharpParser.OrderingContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_ordering)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1415
            self.expression()
            self.state = 1417
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==15 or _la==33:
                self.state = 1416
                localctx.dir_ = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==15 or _la==33):
                    localctx.dir_ = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Select_or_group_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SELECT(self):
            return self.getToken(CSharpParser.SELECT, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(CSharpParser.ExpressionContext,i)


        def GROUP(self):
            return self.getToken(CSharpParser.GROUP, 0)

        def BY(self):
            return self.getToken(CSharpParser.BY, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_select_or_group_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelect_or_group_clause" ):
                listener.enterSelect_or_group_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelect_or_group_clause" ):
                listener.exitSelect_or_group_clause(self)




    def select_or_group_clause(self):

        localctx = CSharpParser.Select_or_group_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_select_or_group_clause)
        try:
            self.state = 1426
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [89]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1419
                self.match(CSharpParser.SELECT)
                self.state = 1420
                self.expression()
                pass
            elif token in [52]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1421
                self.match(CSharpParser.GROUP)
                self.state = 1422
                self.expression()
                self.state = 1423
                self.match(CSharpParser.BY)
                self.state = 1424
                self.expression()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Query_continuationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INTO(self):
            return self.getToken(CSharpParser.INTO, 0)

        def identifier(self):
            return self.getTypedRuleContext(CSharpParser.IdentifierContext,0)


        def query_body(self):
            return self.getTypedRuleContext(CSharpParser.Query_bodyContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_query_continuation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuery_continuation" ):
                listener.enterQuery_continuation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuery_continuation" ):
                listener.exitQuery_continuation(self)




    def query_continuation(self):

        localctx = CSharpParser.Query_continuationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_query_continuation)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1428
            self.match(CSharpParser.INTO)
            self.state = 1429
            self.identifier()
            self.state = 1430
            self.query_body()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def labeled_Statement(self):
            return self.getTypedRuleContext(CSharpParser.Labeled_StatementContext,0)


        def declarationStatement(self):
            return self.getTypedRuleContext(CSharpParser.DeclarationStatementContext,0)


        def embedded_statement(self):
            return self.getTypedRuleContext(CSharpParser.Embedded_statementContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatement" ):
                listener.enterStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatement" ):
                listener.exitStatement(self)




    def statement(self):

        localctx = CSharpParser.StatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_statement)
        try:
            self.state = 1435
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,132,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1432
                self.labeled_Statement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1433
                self.declarationStatement()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1434
                self.embedded_statement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeclarationStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def local_variable_declaration(self):
            return self.getTypedRuleContext(CSharpParser.Local_variable_declarationContext,0)


        def SEMICOLON(self):
            return self.getToken(CSharpParser.SEMICOLON, 0)

        def local_constant_declaration(self):
            return self.getTypedRuleContext(CSharpParser.Local_constant_declarationContext,0)


        def local_function_declaration(self):
            return self.getTypedRuleContext(CSharpParser.Local_function_declarationContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_declarationStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclarationStatement" ):
                listener.enterDeclarationStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclarationStatement" ):
                listener.exitDeclarationStatement(self)




    def declarationStatement(self):

        localctx = CSharpParser.DeclarationStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_declarationStatement)
        try:
            self.state = 1444
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,133,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1437
                self.local_variable_declaration()
                self.state = 1438
                self.match(CSharpParser.SEMICOLON)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1440
                self.local_constant_declaration()
                self.state = 1441
                self.match(CSharpParser.SEMICOLON)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1443
                self.local_function_declaration()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Local_function_declarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def local_function_header(self):
            return self.getTypedRuleContext(CSharpParser.Local_function_headerContext,0)


        def local_function_body(self):
            return self.getTypedRuleContext(CSharpParser.Local_function_bodyContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_local_function_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLocal_function_declaration" ):
                listener.enterLocal_function_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLocal_function_declaration" ):
                listener.exitLocal_function_declaration(self)




    def local_function_declaration(self):

        localctx = CSharpParser.Local_function_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 182, self.RULE_local_function_declaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1446
            self.local_function_header()
            self.state = 1447
            self.local_function_body()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Local_function_headerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def return_type(self):
            return self.getTypedRuleContext(CSharpParser.Return_typeContext,0)


        def identifier(self):
            return self.getTypedRuleContext(CSharpParser.IdentifierContext,0)


        def OPEN_PARENS(self):
            return self.getToken(CSharpParser.OPEN_PARENS, 0)

        def CLOSE_PARENS(self):
            return self.getToken(CSharpParser.CLOSE_PARENS, 0)

        def local_function_modifiers(self):
            return self.getTypedRuleContext(CSharpParser.Local_function_modifiersContext,0)


        def type_parameter_list(self):
            return self.getTypedRuleContext(CSharpParser.Type_parameter_listContext,0)


        def formal_parameter_list(self):
            return self.getTypedRuleContext(CSharpParser.Formal_parameter_listContext,0)


        def type_parameter_constraints_clauses(self):
            return self.getTypedRuleContext(CSharpParser.Type_parameter_constraints_clausesContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_local_function_header

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLocal_function_header" ):
                listener.enterLocal_function_header(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLocal_function_header" ):
                listener.exitLocal_function_header(self)




    def local_function_header(self):

        localctx = CSharpParser.Local_function_headerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 184, self.RULE_local_function_header)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1450
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,134,self._ctx)
            if la_ == 1:
                self.state = 1449
                self.local_function_modifiers()


            self.state = 1452
            self.return_type()
            self.state = 1453
            self.identifier()
            self.state = 1455
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==151:
                self.state = 1454
                self.type_parameter_list()


            self.state = 1457
            self.match(CSharpParser.OPEN_PARENS)
            self.state = 1459
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 10)) & ~0x3f) == 0 and ((1 << (_la - 10)) & 7040363787287829229) != 0) or ((((_la - 75)) & ~0x3f) == 0 and ((1 << (_la - 75)) & 720599763230250523) != 0):
                self.state = 1458
                self.formal_parameter_list()


            self.state = 1461
            self.match(CSharpParser.CLOSE_PARENS)
            self.state = 1463
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==115:
                self.state = 1462
                self.type_parameter_constraints_clauses()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Local_function_modifiersContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ASYNC(self):
            return self.getToken(CSharpParser.ASYNC, 0)

        def UNSAFE(self):
            return self.getToken(CSharpParser.UNSAFE, 0)

        def STATIC(self):
            return self.getToken(CSharpParser.STATIC, 0)

        def STRUCT(self):
            return self.getToken(CSharpParser.STRUCT, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_local_function_modifiers

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLocal_function_modifiers" ):
                listener.enterLocal_function_modifiers(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLocal_function_modifiers" ):
                listener.exitLocal_function_modifiers(self)




    def local_function_modifiers(self):

        localctx = CSharpParser.Local_function_modifiersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 186, self.RULE_local_function_modifiers)
        self._la = 0 # Token type
        try:
            self.state = 1475
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,140,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1465
                _la = self._input.LA(1)
                if not(_la==16 or _la==107):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1467
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==94:
                    self.state = 1466
                    self.match(CSharpParser.STATIC)


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1469
                self.match(CSharpParser.STATIC)
                self.state = 1471
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,139,self._ctx)
                if la_ == 1:
                    self.state = 1470
                    _la = self._input.LA(1)
                    if not(_la==16 or _la==107):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1473
                self.match(CSharpParser.UNSAFE)
                self.state = 1474
                self.match(CSharpParser.STRUCT)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Local_function_bodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def block(self):
            return self.getTypedRuleContext(CSharpParser.BlockContext,0)


        def right_arrow(self):
            return self.getTypedRuleContext(CSharpParser.Right_arrowContext,0)


        def throwable_expression(self):
            return self.getTypedRuleContext(CSharpParser.Throwable_expressionContext,0)


        def SEMICOLON(self):
            return self.getToken(CSharpParser.SEMICOLON, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_local_function_body

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLocal_function_body" ):
                listener.enterLocal_function_body(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLocal_function_body" ):
                listener.exitLocal_function_body(self)




    def local_function_body(self):

        localctx = CSharpParser.Local_function_bodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 188, self.RULE_local_function_body)
        try:
            self.state = 1482
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [130]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1477
                self.block()
                pass
            elif token in [150]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1478
                self.right_arrow()
                self.state = 1479
                self.throwable_expression()
                self.state = 1480
                self.match(CSharpParser.SEMICOLON)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Labeled_StatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(CSharpParser.IdentifierContext,0)


        def COLON(self):
            return self.getToken(CSharpParser.COLON, 0)

        def statement(self):
            return self.getTypedRuleContext(CSharpParser.StatementContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_labeled_Statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLabeled_Statement" ):
                listener.enterLabeled_Statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLabeled_Statement" ):
                listener.exitLabeled_Statement(self)




    def labeled_Statement(self):

        localctx = CSharpParser.Labeled_StatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 190, self.RULE_labeled_Statement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1484
            self.identifier()
            self.state = 1485
            self.match(CSharpParser.COLON)
            self.state = 1486
            self.statement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Embedded_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def block(self):
            return self.getTypedRuleContext(CSharpParser.BlockContext,0)


        def empty_statement(self):
            return self.getTypedRuleContext(CSharpParser.Empty_statementContext,0)


        def expression(self):
            return self.getTypedRuleContext(CSharpParser.ExpressionContext,0)


        def SEMICOLON(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.SEMICOLON)
            else:
                return self.getToken(CSharpParser.SEMICOLON, i)

        def if_statement(self):
            return self.getTypedRuleContext(CSharpParser.If_statementContext,0)


        def SWITCH(self):
            return self.getToken(CSharpParser.SWITCH, 0)

        def OPEN_PARENS(self):
            return self.getToken(CSharpParser.OPEN_PARENS, 0)

        def CLOSE_PARENS(self):
            return self.getToken(CSharpParser.CLOSE_PARENS, 0)

        def OPEN_BRACE(self):
            return self.getToken(CSharpParser.OPEN_BRACE, 0)

        def CLOSE_BRACE(self):
            return self.getToken(CSharpParser.CLOSE_BRACE, 0)

        def switch_section(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Switch_sectionContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Switch_sectionContext,i)


        def WHILE(self):
            return self.getToken(CSharpParser.WHILE, 0)

        def embedded_statement(self):
            return self.getTypedRuleContext(CSharpParser.Embedded_statementContext,0)


        def DO(self):
            return self.getToken(CSharpParser.DO, 0)

        def FOR(self):
            return self.getToken(CSharpParser.FOR, 0)

        def for_initializer(self):
            return self.getTypedRuleContext(CSharpParser.For_initializerContext,0)


        def for_iterator(self):
            return self.getTypedRuleContext(CSharpParser.For_iteratorContext,0)


        def FOREACH(self):
            return self.getToken(CSharpParser.FOREACH, 0)

        def local_variable_type(self):
            return self.getTypedRuleContext(CSharpParser.Local_variable_typeContext,0)


        def IN(self):
            return self.getToken(CSharpParser.IN, 0)

        def identifier(self):
            return self.getTypedRuleContext(CSharpParser.IdentifierContext,0)


        def deconstruction_element(self):
            return self.getTypedRuleContext(CSharpParser.Deconstruction_elementContext,0)


        def AWAIT(self):
            return self.getToken(CSharpParser.AWAIT, 0)

        def BREAK(self):
            return self.getToken(CSharpParser.BREAK, 0)

        def CONTINUE(self):
            return self.getToken(CSharpParser.CONTINUE, 0)

        def GOTO(self):
            return self.getToken(CSharpParser.GOTO, 0)

        def CASE(self):
            return self.getToken(CSharpParser.CASE, 0)

        def DEFAULT(self):
            return self.getToken(CSharpParser.DEFAULT, 0)

        def RETURN(self):
            return self.getToken(CSharpParser.RETURN, 0)

        def THROW(self):
            return self.getToken(CSharpParser.THROW, 0)

        def try_statement(self):
            return self.getTypedRuleContext(CSharpParser.Try_statementContext,0)


        def checked_statement(self):
            return self.getTypedRuleContext(CSharpParser.Checked_statementContext,0)


        def unchecked_statement(self):
            return self.getTypedRuleContext(CSharpParser.Unchecked_statementContext,0)


        def lock_statement(self):
            return self.getTypedRuleContext(CSharpParser.Lock_statementContext,0)


        def using_statement(self):
            return self.getTypedRuleContext(CSharpParser.Using_statementContext,0)


        def yield_statement(self):
            return self.getTypedRuleContext(CSharpParser.Yield_statementContext,0)


        def unsafe_statement(self):
            return self.getTypedRuleContext(CSharpParser.Unsafe_statementContext,0)


        def fixed_statement(self):
            return self.getTypedRuleContext(CSharpParser.Fixed_statementContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_embedded_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEmbedded_statement" ):
                listener.enterEmbedded_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEmbedded_statement" ):
                listener.exitEmbedded_statement(self)




    def embedded_statement(self):

        localctx = CSharpParser.Embedded_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 192, self.RULE_embedded_statement)
        self._la = 0 # Token type
        try:
            self.state = 1581
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,151,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1488
                self.block()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1489
                self.empty_statement()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1490
                self.expression()
                self.state = 1491
                self.match(CSharpParser.SEMICOLON)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1493
                self.if_statement()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1494
                self.match(CSharpParser.SWITCH)
                self.state = 1495
                self.match(CSharpParser.OPEN_PARENS)
                self.state = 1496
                self.expression()
                self.state = 1497
                self.match(CSharpParser.CLOSE_PARENS)
                self.state = 1498
                self.match(CSharpParser.OPEN_BRACE)
                self.state = 1502
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==23 or _la==31:
                    self.state = 1499
                    self.switch_section()
                    self.state = 1504
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1505
                self.match(CSharpParser.CLOSE_BRACE)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1507
                self.match(CSharpParser.WHILE)
                self.state = 1508
                self.match(CSharpParser.OPEN_PARENS)
                self.state = 1509
                self.expression()
                self.state = 1510
                self.match(CSharpParser.CLOSE_PARENS)
                self.state = 1511
                self.embedded_statement()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1513
                self.match(CSharpParser.DO)
                self.state = 1514
                self.embedded_statement()
                self.state = 1515
                self.match(CSharpParser.WHILE)
                self.state = 1516
                self.match(CSharpParser.OPEN_PARENS)
                self.state = 1517
                self.expression()
                self.state = 1518
                self.match(CSharpParser.CLOSE_PARENS)
                self.state = 1519
                self.match(CSharpParser.SEMICOLON)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 1521
                self.match(CSharpParser.FOR)
                self.state = 1522
                self.match(CSharpParser.OPEN_PARENS)
                self.state = 1524
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -3380399452036549632) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & -11610935142103829) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & 140737892923425) != 0):
                    self.state = 1523
                    self.for_initializer()


                self.state = 1526
                self.match(CSharpParser.SEMICOLON)
                self.state = 1528
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -3380434636408638464) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & -11773662863014677) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & 140737892923425) != 0):
                    self.state = 1527
                    self.expression()


                self.state = 1530
                self.match(CSharpParser.SEMICOLON)
                self.state = 1532
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -3380434636408638464) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & -11773662863014677) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & 140737892923425) != 0):
                    self.state = 1531
                    self.for_iterator()


                self.state = 1534
                self.match(CSharpParser.CLOSE_PARENS)
                self.state = 1535
                self.embedded_statement()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 1537
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==17:
                    self.state = 1536
                    self.match(CSharpParser.AWAIT)


                self.state = 1539
                self.match(CSharpParser.FOREACH)
                self.state = 1540
                self.match(CSharpParser.OPEN_PARENS)
                self.state = 1541
                self.local_variable_type()
                self.state = 1544
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,147,self._ctx)
                if la_ == 1:
                    self.state = 1542
                    self.identifier()
                    pass

                elif la_ == 2:
                    self.state = 1543
                    self.deconstruction_element()
                    pass


                self.state = 1546
                self.match(CSharpParser.IN)
                self.state = 1547
                self.expression()
                self.state = 1548
                self.match(CSharpParser.CLOSE_PARENS)
                self.state = 1549
                self.embedded_statement()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 1551
                self.match(CSharpParser.BREAK)
                self.state = 1552
                self.match(CSharpParser.SEMICOLON)
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 1553
                self.match(CSharpParser.CONTINUE)
                self.state = 1554
                self.match(CSharpParser.SEMICOLON)
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 1555
                self.match(CSharpParser.GOTO)
                self.state = 1560
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [10, 12, 13, 15, 16, 17, 21, 33, 36, 39, 49, 50, 52, 60, 62, 63, 66, 72, 75, 79, 85, 89, 90, 106, 110, 114, 115, 117, 119]:
                    self.state = 1556
                    self.identifier()
                    pass
                elif token in [23]:
                    self.state = 1557
                    self.match(CSharpParser.CASE)
                    self.state = 1558
                    self.expression()
                    pass
                elif token in [31]:
                    self.state = 1559
                    self.match(CSharpParser.DEFAULT)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1562
                self.match(CSharpParser.SEMICOLON)
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 1563
                self.match(CSharpParser.RETURN)
                self.state = 1565
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -3380434636408638464) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & -11773662863014677) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & 140737892923425) != 0):
                    self.state = 1564
                    self.expression()


                self.state = 1567
                self.match(CSharpParser.SEMICOLON)
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 1568
                self.match(CSharpParser.THROW)
                self.state = 1570
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -3380434636408638464) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & -11773662863014677) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & 140737892923425) != 0):
                    self.state = 1569
                    self.expression()


                self.state = 1572
                self.match(CSharpParser.SEMICOLON)
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 1573
                self.try_statement()
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 1574
                self.checked_statement()
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 1575
                self.unchecked_statement()
                pass

            elif la_ == 18:
                self.enterOuterAlt(localctx, 18)
                self.state = 1576
                self.lock_statement()
                pass

            elif la_ == 19:
                self.enterOuterAlt(localctx, 19)
                self.state = 1577
                self.using_statement()
                pass

            elif la_ == 20:
                self.enterOuterAlt(localctx, 20)
                self.state = 1578
                self.yield_statement()
                pass

            elif la_ == 21:
                self.enterOuterAlt(localctx, 21)
                self.state = 1579
                self.unsafe_statement()
                pass

            elif la_ == 22:
                self.enterOuterAlt(localctx, 22)
                self.state = 1580
                self.fixed_statement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Empty_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SEMICOLON(self):
            return self.getToken(CSharpParser.SEMICOLON, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_empty_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEmpty_statement" ):
                listener.enterEmpty_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEmpty_statement" ):
                listener.exitEmpty_statement(self)




    def empty_statement(self):

        localctx = CSharpParser.Empty_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 194, self.RULE_empty_statement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1583
            self.match(CSharpParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class If_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IF(self):
            return self.getToken(CSharpParser.IF, 0)

        def OPEN_PARENS(self):
            return self.getToken(CSharpParser.OPEN_PARENS, 0)

        def expression(self):
            return self.getTypedRuleContext(CSharpParser.ExpressionContext,0)


        def CLOSE_PARENS(self):
            return self.getToken(CSharpParser.CLOSE_PARENS, 0)

        def embedded_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Embedded_statementContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Embedded_statementContext,i)


        def ELSE(self):
            return self.getToken(CSharpParser.ELSE, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_if_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIf_statement" ):
                listener.enterIf_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIf_statement" ):
                listener.exitIf_statement(self)




    def if_statement(self):

        localctx = CSharpParser.If_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 196, self.RULE_if_statement)
        try:
            self.state = 1599
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,152,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1585
                self.match(CSharpParser.IF)
                self.state = 1586
                self.match(CSharpParser.OPEN_PARENS)
                self.state = 1587
                self.expression()
                self.state = 1588
                self.match(CSharpParser.CLOSE_PARENS)
                self.state = 1589
                self.embedded_statement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1591
                self.match(CSharpParser.IF)
                self.state = 1592
                self.match(CSharpParser.OPEN_PARENS)
                self.state = 1593
                self.expression()
                self.state = 1594
                self.match(CSharpParser.CLOSE_PARENS)
                self.state = 1595
                self.embedded_statement()
                self.state = 1596
                self.match(CSharpParser.ELSE)
                self.state = 1597
                self.embedded_statement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Checked_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CHECKED(self):
            return self.getToken(CSharpParser.CHECKED, 0)

        def block(self):
            return self.getTypedRuleContext(CSharpParser.BlockContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_checked_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterChecked_statement" ):
                listener.enterChecked_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitChecked_statement" ):
                listener.exitChecked_statement(self)




    def checked_statement(self):

        localctx = CSharpParser.Checked_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 198, self.RULE_checked_statement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1601
            self.match(CSharpParser.CHECKED)
            self.state = 1602
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Unchecked_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UNCHECKED(self):
            return self.getToken(CSharpParser.UNCHECKED, 0)

        def block(self):
            return self.getTypedRuleContext(CSharpParser.BlockContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_unchecked_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnchecked_statement" ):
                listener.enterUnchecked_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnchecked_statement" ):
                listener.exitUnchecked_statement(self)




    def unchecked_statement(self):

        localctx = CSharpParser.Unchecked_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 200, self.RULE_unchecked_statement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1604
            self.match(CSharpParser.UNCHECKED)
            self.state = 1605
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Lock_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LOCK(self):
            return self.getToken(CSharpParser.LOCK, 0)

        def OPEN_PARENS(self):
            return self.getToken(CSharpParser.OPEN_PARENS, 0)

        def expression(self):
            return self.getTypedRuleContext(CSharpParser.ExpressionContext,0)


        def CLOSE_PARENS(self):
            return self.getToken(CSharpParser.CLOSE_PARENS, 0)

        def embedded_statement(self):
            return self.getTypedRuleContext(CSharpParser.Embedded_statementContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_lock_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLock_statement" ):
                listener.enterLock_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLock_statement" ):
                listener.exitLock_statement(self)




    def lock_statement(self):

        localctx = CSharpParser.Lock_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 202, self.RULE_lock_statement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1607
            self.match(CSharpParser.LOCK)
            self.state = 1608
            self.match(CSharpParser.OPEN_PARENS)
            self.state = 1609
            self.expression()
            self.state = 1610
            self.match(CSharpParser.CLOSE_PARENS)
            self.state = 1611
            self.embedded_statement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Unmanaged_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def type_(self):
            return self.getTypedRuleContext(CSharpParser.Type_Context,0)


        def pointer_type(self):
            return self.getTypedRuleContext(CSharpParser.Pointer_typeContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_unmanaged_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnmanaged_type" ):
                listener.enterUnmanaged_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnmanaged_type" ):
                listener.exitUnmanaged_type(self)




    def unmanaged_type(self):

        localctx = CSharpParser.Unmanaged_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 204, self.RULE_unmanaged_type)
        try:
            self.state = 1615
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,153,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1613
                self.type_()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1614
                self.pointer_type()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Stackalloc_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STACKALLOC(self):
            return self.getToken(CSharpParser.STACKALLOC, 0)

        def type_(self):
            return self.getTypedRuleContext(CSharpParser.Type_Context,0)


        def OPEN_BRACKET(self):
            return self.getToken(CSharpParser.OPEN_BRACKET, 0)

        def expression(self):
            return self.getTypedRuleContext(CSharpParser.ExpressionContext,0)


        def CLOSE_BRACKET(self):
            return self.getToken(CSharpParser.CLOSE_BRACKET, 0)

        def stackalloc_initializer(self):
            return self.getTypedRuleContext(CSharpParser.Stackalloc_initializerContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_stackalloc_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStackalloc_expression" ):
                listener.enterStackalloc_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStackalloc_expression" ):
                listener.exitStackalloc_expression(self)




    def stackalloc_expression(self):

        localctx = CSharpParser.Stackalloc_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 206, self.RULE_stackalloc_expression)
        self._la = 0 # Token type
        try:
            self.state = 1633
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,156,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1617
                self.match(CSharpParser.STACKALLOC)
                self.state = 1618
                self.type_()
                self.state = 1619
                self.match(CSharpParser.OPEN_BRACKET)
                self.state = 1620
                self.expression()
                self.state = 1621
                self.match(CSharpParser.CLOSE_BRACKET)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1623
                self.match(CSharpParser.STACKALLOC)
                self.state = 1625
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 10)) & ~0x3f) == 0 and ((1 << (_la - 10)) & 7040328602915740397) != 0) or ((((_la - 75)) & ~0x3f) == 0 and ((1 << (_la - 75)) & 576484575146005521) != 0):
                    self.state = 1624
                    self.type_()


                self.state = 1627
                self.match(CSharpParser.OPEN_BRACKET)
                self.state = 1629
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -3380434636408638464) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & -11773662863014677) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & 140737892923425) != 0):
                    self.state = 1628
                    self.expression()


                self.state = 1631
                self.match(CSharpParser.CLOSE_BRACKET)
                self.state = 1632
                self.stackalloc_initializer()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Stackalloc_initializerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_BRACE(self):
            return self.getToken(CSharpParser.OPEN_BRACE, 0)

        def stackalloc_initializer_element_list(self):
            return self.getTypedRuleContext(CSharpParser.Stackalloc_initializer_element_listContext,0)


        def CLOSE_BRACE(self):
            return self.getToken(CSharpParser.CLOSE_BRACE, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_stackalloc_initializer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStackalloc_initializer" ):
                listener.enterStackalloc_initializer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStackalloc_initializer" ):
                listener.exitStackalloc_initializer(self)




    def stackalloc_initializer(self):

        localctx = CSharpParser.Stackalloc_initializerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 208, self.RULE_stackalloc_initializer)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1635
            self.match(CSharpParser.OPEN_BRACE)
            self.state = 1636
            self.stackalloc_initializer_element_list()
            self.state = 1637
            self.match(CSharpParser.CLOSE_BRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Stackalloc_initializer_element_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def stackalloc_element_initializer(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Stackalloc_element_initializerContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Stackalloc_element_initializerContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.COMMA)
            else:
                return self.getToken(CSharpParser.COMMA, i)

        def getRuleIndex(self):
            return CSharpParser.RULE_stackalloc_initializer_element_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStackalloc_initializer_element_list" ):
                listener.enterStackalloc_initializer_element_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStackalloc_initializer_element_list" ):
                listener.exitStackalloc_initializer_element_list(self)




    def stackalloc_initializer_element_list(self):

        localctx = CSharpParser.Stackalloc_initializer_element_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 210, self.RULE_stackalloc_initializer_element_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1639
            self.stackalloc_element_initializer()
            self.state = 1644
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,157,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1640
                    self.match(CSharpParser.COMMA)
                    self.state = 1641
                    self.stackalloc_element_initializer() 
                self.state = 1646
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,157,self._ctx)

            self.state = 1648
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==137:
                self.state = 1647
                self.match(CSharpParser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Stackalloc_element_initializerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(CSharpParser.ExpressionContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_stackalloc_element_initializer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStackalloc_element_initializer" ):
                listener.enterStackalloc_element_initializer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStackalloc_element_initializer" ):
                listener.exitStackalloc_element_initializer(self)




    def stackalloc_element_initializer(self):

        localctx = CSharpParser.Stackalloc_element_initializerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 212, self.RULE_stackalloc_element_initializer)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1650
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Using_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def USING(self):
            return self.getToken(CSharpParser.USING, 0)

        def OPEN_PARENS(self):
            return self.getToken(CSharpParser.OPEN_PARENS, 0)

        def resource_acquisition(self):
            return self.getTypedRuleContext(CSharpParser.Resource_acquisitionContext,0)


        def CLOSE_PARENS(self):
            return self.getToken(CSharpParser.CLOSE_PARENS, 0)

        def embedded_statement(self):
            return self.getTypedRuleContext(CSharpParser.Embedded_statementContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_using_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUsing_statement" ):
                listener.enterUsing_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUsing_statement" ):
                listener.exitUsing_statement(self)




    def using_statement(self):

        localctx = CSharpParser.Using_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 214, self.RULE_using_statement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1652
            self.match(CSharpParser.USING)
            self.state = 1653
            self.match(CSharpParser.OPEN_PARENS)
            self.state = 1654
            self.resource_acquisition()
            self.state = 1655
            self.match(CSharpParser.CLOSE_PARENS)
            self.state = 1656
            self.embedded_statement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Yield_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def YIELD(self):
            return self.getToken(CSharpParser.YIELD, 0)

        def RETURN(self):
            return self.getToken(CSharpParser.RETURN, 0)

        def expression(self):
            return self.getTypedRuleContext(CSharpParser.ExpressionContext,0)


        def SEMICOLON(self):
            return self.getToken(CSharpParser.SEMICOLON, 0)

        def BREAK(self):
            return self.getToken(CSharpParser.BREAK, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_yield_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterYield_statement" ):
                listener.enterYield_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitYield_statement" ):
                listener.exitYield_statement(self)




    def yield_statement(self):

        localctx = CSharpParser.Yield_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 216, self.RULE_yield_statement)
        try:
            self.state = 1666
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,159,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1658
                self.match(CSharpParser.YIELD)
                self.state = 1659
                self.match(CSharpParser.RETURN)
                self.state = 1660
                self.expression()
                self.state = 1661
                self.match(CSharpParser.SEMICOLON)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1663
                self.match(CSharpParser.YIELD)
                self.state = 1664
                self.match(CSharpParser.BREAK)
                self.state = 1665
                self.match(CSharpParser.SEMICOLON)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Fixed_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FIXED(self):
            return self.getToken(CSharpParser.FIXED, 0)

        def OPEN_PARENS(self):
            return self.getToken(CSharpParser.OPEN_PARENS, 0)

        def pointer_type(self):
            return self.getTypedRuleContext(CSharpParser.Pointer_typeContext,0)


        def fixed_pointer_declarators(self):
            return self.getTypedRuleContext(CSharpParser.Fixed_pointer_declaratorsContext,0)


        def CLOSE_PARENS(self):
            return self.getToken(CSharpParser.CLOSE_PARENS, 0)

        def embedded_statement(self):
            return self.getTypedRuleContext(CSharpParser.Embedded_statementContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_fixed_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFixed_statement" ):
                listener.enterFixed_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFixed_statement" ):
                listener.exitFixed_statement(self)




    def fixed_statement(self):

        localctx = CSharpParser.Fixed_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 218, self.RULE_fixed_statement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1668
            self.match(CSharpParser.FIXED)
            self.state = 1669
            self.match(CSharpParser.OPEN_PARENS)
            self.state = 1670
            self.pointer_type()
            self.state = 1671
            self.fixed_pointer_declarators()
            self.state = 1672
            self.match(CSharpParser.CLOSE_PARENS)
            self.state = 1673
            self.embedded_statement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Unsafe_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UNSAFE(self):
            return self.getToken(CSharpParser.UNSAFE, 0)

        def block(self):
            return self.getTypedRuleContext(CSharpParser.BlockContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_unsafe_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnsafe_statement" ):
                listener.enterUnsafe_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnsafe_statement" ):
                listener.exitUnsafe_statement(self)




    def unsafe_statement(self):

        localctx = CSharpParser.Unsafe_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 220, self.RULE_unsafe_statement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1675
            self.match(CSharpParser.UNSAFE)
            self.state = 1676
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Try_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TRY(self):
            return self.getToken(CSharpParser.TRY, 0)

        def block(self):
            return self.getTypedRuleContext(CSharpParser.BlockContext,0)


        def catch_clauses(self):
            return self.getTypedRuleContext(CSharpParser.Catch_clausesContext,0)


        def finally_clause(self):
            return self.getTypedRuleContext(CSharpParser.Finally_clauseContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_try_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTry_statement" ):
                listener.enterTry_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTry_statement" ):
                listener.exitTry_statement(self)




    def try_statement(self):

        localctx = CSharpParser.Try_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 222, self.RULE_try_statement)
        self._la = 0 # Token type
        try:
            self.state = 1689
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,161,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1678
                self.match(CSharpParser.TRY)
                self.state = 1679
                self.block()
                self.state = 1680
                self.catch_clauses()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1682
                self.match(CSharpParser.TRY)
                self.state = 1683
                self.block()
                self.state = 1685
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==24:
                    self.state = 1684
                    self.catch_clauses()


                self.state = 1687
                self.finally_clause()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BlockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_BRACE(self):
            return self.getToken(CSharpParser.OPEN_BRACE, 0)

        def CLOSE_BRACE(self):
            return self.getToken(CSharpParser.CLOSE_BRACE, 0)

        def statement_list(self):
            return self.getTypedRuleContext(CSharpParser.Statement_listContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_block

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBlock" ):
                listener.enterBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBlock" ):
                listener.exitBlock(self)




    def block(self):

        localctx = CSharpParser.BlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 224, self.RULE_block)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1691
            self.match(CSharpParser.OPEN_BRACE)
            self.state = 1693
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & -3368718222516833280) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -18718090264016425) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & 281475785848903) != 0):
                self.state = 1692
                self.statement_list()


            self.state = 1695
            self.match(CSharpParser.CLOSE_BRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Local_variable_declarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def local_variable_type(self):
            return self.getTypedRuleContext(CSharpParser.Local_variable_typeContext,0)


        def local_variable_declarator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Local_variable_declaratorContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Local_variable_declaratorContext,i)


        def USING(self):
            return self.getToken(CSharpParser.USING, 0)

        def REF(self):
            return self.getToken(CSharpParser.REF, 0)

        def READONLY(self):
            return self.getToken(CSharpParser.READONLY, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.COMMA)
            else:
                return self.getToken(CSharpParser.COMMA, i)

        def FIXED(self):
            return self.getToken(CSharpParser.FIXED, 0)

        def pointer_type(self):
            return self.getTypedRuleContext(CSharpParser.Pointer_typeContext,0)


        def fixed_pointer_declarators(self):
            return self.getTypedRuleContext(CSharpParser.Fixed_pointer_declaratorsContext,0)


        def VAR(self):
            return self.getToken(CSharpParser.VAR, 0)

        def deconstruction_expression(self):
            return self.getTypedRuleContext(CSharpParser.Deconstruction_expressionContext,0)


        def ASSIGNMENT(self):
            return self.getToken(CSharpParser.ASSIGNMENT, 0)

        def expression(self):
            return self.getTypedRuleContext(CSharpParser.ExpressionContext,0)


        def unsafe_function_pointer(self):
            return self.getTypedRuleContext(CSharpParser.Unsafe_function_pointerContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_local_variable_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLocal_variable_declaration" ):
                listener.enterLocal_variable_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLocal_variable_declaration" ):
                listener.exitLocal_variable_declaration(self)




    def local_variable_declaration(self):

        localctx = CSharpParser.Local_variable_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 226, self.RULE_local_variable_declaration)
        self._la = 0 # Token type
        try:
            self.state = 1722
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,165,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1701
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,163,self._ctx)
                if la_ == 1:
                    self.state = 1697
                    self.match(CSharpParser.USING)

                elif la_ == 2:
                    self.state = 1698
                    self.match(CSharpParser.REF)

                elif la_ == 3:
                    self.state = 1699
                    self.match(CSharpParser.REF)
                    self.state = 1700
                    self.match(CSharpParser.READONLY)


                self.state = 1703
                self.local_variable_type()
                self.state = 1704
                self.local_variable_declarator()
                self.state = 1709
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==137:
                    self.state = 1705
                    self.match(CSharpParser.COMMA)
                    self.state = 1706
                    self.local_variable_declarator()
                    self.state = 1711
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1712
                self.match(CSharpParser.FIXED)
                self.state = 1713
                self.pointer_type()
                self.state = 1714
                self.fixed_pointer_declarators()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1716
                self.match(CSharpParser.VAR)
                self.state = 1717
                self.deconstruction_expression()
                self.state = 1718
                self.match(CSharpParser.ASSIGNMENT)
                self.state = 1719
                self.expression()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1721
                self.unsafe_function_pointer()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Unsafe_function_pointerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UNSAFE(self):
            return self.getToken(CSharpParser.UNSAFE, 0)

        def OPEN_BRACE(self):
            return self.getToken(CSharpParser.OPEN_BRACE, 0)

        def delegate_function_pointer(self):
            return self.getTypedRuleContext(CSharpParser.Delegate_function_pointerContext,0)


        def CLOSE_BRACE(self):
            return self.getToken(CSharpParser.CLOSE_BRACE, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_unsafe_function_pointer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnsafe_function_pointer" ):
                listener.enterUnsafe_function_pointer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnsafe_function_pointer" ):
                listener.exitUnsafe_function_pointer(self)




    def unsafe_function_pointer(self):

        localctx = CSharpParser.Unsafe_function_pointerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 228, self.RULE_unsafe_function_pointer)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1724
            self.match(CSharpParser.UNSAFE)
            self.state = 1725
            self.match(CSharpParser.OPEN_BRACE)
            self.state = 1726
            self.delegate_function_pointer()
            self.state = 1727
            self.match(CSharpParser.CLOSE_BRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Delegate_function_pointerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DELEGATE(self):
            return self.getToken(CSharpParser.DELEGATE, 0)

        def STAR(self):
            return self.getToken(CSharpParser.STAR, 0)

        def LT(self):
            return self.getToken(CSharpParser.LT, 0)

        def function_pointer_parameter_list(self):
            return self.getTypedRuleContext(CSharpParser.Function_pointer_parameter_listContext,0)


        def GT(self):
            return self.getToken(CSharpParser.GT, 0)

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(CSharpParser.IdentifierContext,i)


        def ASSIGNMENT(self):
            return self.getToken(CSharpParser.ASSIGNMENT, 0)

        def AMP(self):
            return self.getToken(CSharpParser.AMP, 0)

        def SEMICOLON(self):
            return self.getToken(CSharpParser.SEMICOLON, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_delegate_function_pointer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDelegate_function_pointer" ):
                listener.enterDelegate_function_pointer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDelegate_function_pointer" ):
                listener.exitDelegate_function_pointer(self)




    def delegate_function_pointer(self):

        localctx = CSharpParser.Delegate_function_pointerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 230, self.RULE_delegate_function_pointer)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1729
            self.match(CSharpParser.DELEGATE)
            self.state = 1730
            self.match(CSharpParser.STAR)
            self.state = 1731
            self.match(CSharpParser.LT)
            self.state = 1732
            self.function_pointer_parameter_list()
            self.state = 1733
            self.match(CSharpParser.GT)
            self.state = 1734
            self.identifier()
            self.state = 1735
            self.match(CSharpParser.ASSIGNMENT)
            self.state = 1736
            self.match(CSharpParser.AMP)
            self.state = 1737
            self.identifier()
            self.state = 1738
            self.match(CSharpParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Local_variable_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VAR(self):
            return self.getToken(CSharpParser.VAR, 0)

        def type_(self):
            return self.getTypedRuleContext(CSharpParser.Type_Context,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_local_variable_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLocal_variable_type" ):
                listener.enterLocal_variable_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLocal_variable_type" ):
                listener.exitLocal_variable_type(self)




    def local_variable_type(self):

        localctx = CSharpParser.Local_variable_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 232, self.RULE_local_variable_type)
        try:
            self.state = 1742
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,166,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1740
                self.match(CSharpParser.VAR)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1741
                self.type_()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Local_variable_declaratorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(CSharpParser.IdentifierContext,0)


        def ASSIGNMENT(self):
            return self.getToken(CSharpParser.ASSIGNMENT, 0)

        def local_variable_initializer(self):
            return self.getTypedRuleContext(CSharpParser.Local_variable_initializerContext,0)


        def REF(self):
            return self.getToken(CSharpParser.REF, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_local_variable_declarator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLocal_variable_declarator" ):
                listener.enterLocal_variable_declarator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLocal_variable_declarator" ):
                listener.exitLocal_variable_declarator(self)




    def local_variable_declarator(self):

        localctx = CSharpParser.Local_variable_declaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 234, self.RULE_local_variable_declarator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1744
            self.identifier()
            self.state = 1750
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==150:
                self.state = 1745
                self.match(CSharpParser.ASSIGNMENT)
                self.state = 1747
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,167,self._ctx)
                if la_ == 1:
                    self.state = 1746
                    self.match(CSharpParser.REF)


                self.state = 1749
                self.local_variable_initializer()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Local_variable_initializerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(CSharpParser.ExpressionContext,0)


        def array_initializer(self):
            return self.getTypedRuleContext(CSharpParser.Array_initializerContext,0)


        def stackalloc_initializer(self):
            return self.getTypedRuleContext(CSharpParser.Stackalloc_initializerContext,0)


        def deconstruction_element(self):
            return self.getTypedRuleContext(CSharpParser.Deconstruction_elementContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_local_variable_initializer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLocal_variable_initializer" ):
                listener.enterLocal_variable_initializer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLocal_variable_initializer" ):
                listener.exitLocal_variable_initializer(self)




    def local_variable_initializer(self):

        localctx = CSharpParser.Local_variable_initializerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 236, self.RULE_local_variable_initializer)
        try:
            self.state = 1756
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,169,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1752
                self.expression()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1753
                self.array_initializer()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1754
                self.stackalloc_initializer()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1755
                self.deconstruction_element()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Local_constant_declarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CONST(self):
            return self.getToken(CSharpParser.CONST, 0)

        def type_(self):
            return self.getTypedRuleContext(CSharpParser.Type_Context,0)


        def constant_declarators(self):
            return self.getTypedRuleContext(CSharpParser.Constant_declaratorsContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_local_constant_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLocal_constant_declaration" ):
                listener.enterLocal_constant_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLocal_constant_declaration" ):
                listener.exitLocal_constant_declaration(self)




    def local_constant_declaration(self):

        localctx = CSharpParser.Local_constant_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 238, self.RULE_local_constant_declaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1758
            self.match(CSharpParser.CONST)
            self.state = 1759
            self.type_()
            self.state = 1760
            self.constant_declarators()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Switch_sectionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def statement_list(self):
            return self.getTypedRuleContext(CSharpParser.Statement_listContext,0)


        def switch_label(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Switch_labelContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Switch_labelContext,i)


        def getRuleIndex(self):
            return CSharpParser.RULE_switch_section

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSwitch_section" ):
                listener.enterSwitch_section(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSwitch_section" ):
                listener.exitSwitch_section(self)




    def switch_section(self):

        localctx = CSharpParser.Switch_sectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 240, self.RULE_switch_section)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1763 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 1762
                    self.switch_label()

                else:
                    raise NoViableAltException(self)
                self.state = 1765 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,170,self._ctx)

            self.state = 1767
            self.statement_list()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Switch_labelContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CASE(self):
            return self.getToken(CSharpParser.CASE, 0)

        def expression(self):
            return self.getTypedRuleContext(CSharpParser.ExpressionContext,0)


        def COLON(self):
            return self.getToken(CSharpParser.COLON, 0)

        def case_guard(self):
            return self.getTypedRuleContext(CSharpParser.Case_guardContext,0)


        def pattern(self):
            return self.getTypedRuleContext(CSharpParser.PatternContext,0)


        def DEFAULT(self):
            return self.getToken(CSharpParser.DEFAULT, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_switch_label

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSwitch_label" ):
                listener.enterSwitch_label(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSwitch_label" ):
                listener.exitSwitch_label(self)




    def switch_label(self):

        localctx = CSharpParser.Switch_labelContext(self, self._ctx, self.state)
        self.enterRule(localctx, 242, self.RULE_switch_label)
        self._la = 0 # Token type
        try:
            self.state = 1785
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,173,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1769
                self.match(CSharpParser.CASE)
                self.state = 1770
                self.expression()
                self.state = 1772
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==114:
                    self.state = 1771
                    self.case_guard()


                self.state = 1774
                self.match(CSharpParser.COLON)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1776
                self.match(CSharpParser.CASE)
                self.state = 1777
                self.pattern()
                self.state = 1779
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==114:
                    self.state = 1778
                    self.case_guard()


                self.state = 1781
                self.match(CSharpParser.COLON)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1783
                self.match(CSharpParser.DEFAULT)
                self.state = 1784
                self.match(CSharpParser.COLON)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Case_guardContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHEN(self):
            return self.getToken(CSharpParser.WHEN, 0)

        def expression(self):
            return self.getTypedRuleContext(CSharpParser.ExpressionContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_case_guard

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCase_guard" ):
                listener.enterCase_guard(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCase_guard" ):
                listener.exitCase_guard(self)




    def case_guard(self):

        localctx = CSharpParser.Case_guardContext(self, self._ctx, self.state)
        self.enterRule(localctx, 244, self.RULE_case_guard)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1787
            self.match(CSharpParser.WHEN)
            self.state = 1788
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Statement_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.StatementContext)
            else:
                return self.getTypedRuleContext(CSharpParser.StatementContext,i)


        def getRuleIndex(self):
            return CSharpParser.RULE_statement_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatement_list" ):
                listener.enterStatement_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatement_list" ):
                listener.exitStatement_list(self)




    def statement_list(self):

        localctx = CSharpParser.Statement_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 246, self.RULE_statement_list)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1791 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 1790
                    self.statement()

                else:
                    raise NoViableAltException(self)
                self.state = 1793 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,174,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class For_initializerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def local_variable_declaration(self):
            return self.getTypedRuleContext(CSharpParser.Local_variable_declarationContext,0)


        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(CSharpParser.ExpressionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.COMMA)
            else:
                return self.getToken(CSharpParser.COMMA, i)

        def getRuleIndex(self):
            return CSharpParser.RULE_for_initializer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFor_initializer" ):
                listener.enterFor_initializer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFor_initializer" ):
                listener.exitFor_initializer(self)




    def for_initializer(self):

        localctx = CSharpParser.For_initializerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 248, self.RULE_for_initializer)
        self._la = 0 # Token type
        try:
            self.state = 1804
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,176,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1795
                self.local_variable_declaration()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1796
                self.expression()
                self.state = 1801
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==137:
                    self.state = 1797
                    self.match(CSharpParser.COMMA)
                    self.state = 1798
                    self.expression()
                    self.state = 1803
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class For_iteratorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(CSharpParser.ExpressionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.COMMA)
            else:
                return self.getToken(CSharpParser.COMMA, i)

        def getRuleIndex(self):
            return CSharpParser.RULE_for_iterator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFor_iterator" ):
                listener.enterFor_iterator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFor_iterator" ):
                listener.exitFor_iterator(self)




    def for_iterator(self):

        localctx = CSharpParser.For_iteratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 250, self.RULE_for_iterator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1806
            self.expression()
            self.state = 1811
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==137:
                self.state = 1807
                self.match(CSharpParser.COMMA)
                self.state = 1808
                self.expression()
                self.state = 1813
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Catch_clausesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def specific_catch_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Specific_catch_clauseContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Specific_catch_clauseContext,i)


        def general_catch_clause(self):
            return self.getTypedRuleContext(CSharpParser.General_catch_clauseContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_catch_clauses

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCatch_clauses" ):
                listener.enterCatch_clauses(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCatch_clauses" ):
                listener.exitCatch_clauses(self)




    def catch_clauses(self):

        localctx = CSharpParser.Catch_clausesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 252, self.RULE_catch_clauses)
        self._la = 0 # Token type
        try:
            self.state = 1825
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,180,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1814
                self.specific_catch_clause()
                self.state = 1818
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,178,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1815
                        self.specific_catch_clause() 
                    self.state = 1820
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,178,self._ctx)

                self.state = 1822
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==24:
                    self.state = 1821
                    self.general_catch_clause()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1824
                self.general_catch_clause()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Specific_catch_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CATCH(self):
            return self.getToken(CSharpParser.CATCH, 0)

        def OPEN_PARENS(self):
            return self.getToken(CSharpParser.OPEN_PARENS, 0)

        def class_type(self):
            return self.getTypedRuleContext(CSharpParser.Class_typeContext,0)


        def CLOSE_PARENS(self):
            return self.getToken(CSharpParser.CLOSE_PARENS, 0)

        def block(self):
            return self.getTypedRuleContext(CSharpParser.BlockContext,0)


        def identifier(self):
            return self.getTypedRuleContext(CSharpParser.IdentifierContext,0)


        def exception_filter(self):
            return self.getTypedRuleContext(CSharpParser.Exception_filterContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_specific_catch_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSpecific_catch_clause" ):
                listener.enterSpecific_catch_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSpecific_catch_clause" ):
                listener.exitSpecific_catch_clause(self)




    def specific_catch_clause(self):

        localctx = CSharpParser.Specific_catch_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 254, self.RULE_specific_catch_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1827
            self.match(CSharpParser.CATCH)
            self.state = 1828
            self.match(CSharpParser.OPEN_PARENS)
            self.state = 1829
            self.class_type()
            self.state = 1831
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & -3452571437265341440) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & 12122115721929281) != 0):
                self.state = 1830
                self.identifier()


            self.state = 1833
            self.match(CSharpParser.CLOSE_PARENS)
            self.state = 1835
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==114:
                self.state = 1834
                self.exception_filter()


            self.state = 1837
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class General_catch_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CATCH(self):
            return self.getToken(CSharpParser.CATCH, 0)

        def block(self):
            return self.getTypedRuleContext(CSharpParser.BlockContext,0)


        def exception_filter(self):
            return self.getTypedRuleContext(CSharpParser.Exception_filterContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_general_catch_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGeneral_catch_clause" ):
                listener.enterGeneral_catch_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGeneral_catch_clause" ):
                listener.exitGeneral_catch_clause(self)




    def general_catch_clause(self):

        localctx = CSharpParser.General_catch_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 256, self.RULE_general_catch_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1839
            self.match(CSharpParser.CATCH)
            self.state = 1841
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==114:
                self.state = 1840
                self.exception_filter()


            self.state = 1843
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Exception_filterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHEN(self):
            return self.getToken(CSharpParser.WHEN, 0)

        def OPEN_PARENS(self):
            return self.getToken(CSharpParser.OPEN_PARENS, 0)

        def expression(self):
            return self.getTypedRuleContext(CSharpParser.ExpressionContext,0)


        def CLOSE_PARENS(self):
            return self.getToken(CSharpParser.CLOSE_PARENS, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_exception_filter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterException_filter" ):
                listener.enterException_filter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitException_filter" ):
                listener.exitException_filter(self)




    def exception_filter(self):

        localctx = CSharpParser.Exception_filterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 258, self.RULE_exception_filter)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1845
            self.match(CSharpParser.WHEN)
            self.state = 1846
            self.match(CSharpParser.OPEN_PARENS)
            self.state = 1847
            self.expression()
            self.state = 1848
            self.match(CSharpParser.CLOSE_PARENS)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Finally_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FINALLY(self):
            return self.getToken(CSharpParser.FINALLY, 0)

        def block(self):
            return self.getTypedRuleContext(CSharpParser.BlockContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_finally_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFinally_clause" ):
                listener.enterFinally_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFinally_clause" ):
                listener.exitFinally_clause(self)




    def finally_clause(self):

        localctx = CSharpParser.Finally_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 260, self.RULE_finally_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1850
            self.match(CSharpParser.FINALLY)
            self.state = 1851
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Resource_acquisitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def local_variable_declaration(self):
            return self.getTypedRuleContext(CSharpParser.Local_variable_declarationContext,0)


        def expression(self):
            return self.getTypedRuleContext(CSharpParser.ExpressionContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_resource_acquisition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterResource_acquisition" ):
                listener.enterResource_acquisition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitResource_acquisition" ):
                listener.exitResource_acquisition(self)




    def resource_acquisition(self):

        localctx = CSharpParser.Resource_acquisitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 262, self.RULE_resource_acquisition)
        try:
            self.state = 1855
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,184,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1853
                self.local_variable_declaration()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1854
                self.expression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Namespace_declarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.qi = None # Qualified_identifierContext

        def NAMESPACE(self):
            return self.getToken(CSharpParser.NAMESPACE, 0)

        def namespace_body(self):
            return self.getTypedRuleContext(CSharpParser.Namespace_bodyContext,0)


        def qualified_identifier(self):
            return self.getTypedRuleContext(CSharpParser.Qualified_identifierContext,0)


        def SEMICOLON(self):
            return self.getToken(CSharpParser.SEMICOLON, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_namespace_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNamespace_declaration" ):
                listener.enterNamespace_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNamespace_declaration" ):
                listener.exitNamespace_declaration(self)




    def namespace_declaration(self):

        localctx = CSharpParser.Namespace_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 264, self.RULE_namespace_declaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1857
            self.match(CSharpParser.NAMESPACE)
            self.state = 1858
            localctx.qi = self.qualified_identifier()
            self.state = 1859
            self.namespace_body()
            self.state = 1861
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,185,self._ctx)
            if la_ == 1:
                self.state = 1860
                self.match(CSharpParser.SEMICOLON)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Qualified_identifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(CSharpParser.IdentifierContext,i)


        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.DOT)
            else:
                return self.getToken(CSharpParser.DOT, i)

        def getRuleIndex(self):
            return CSharpParser.RULE_qualified_identifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQualified_identifier" ):
                listener.enterQualified_identifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQualified_identifier" ):
                listener.exitQualified_identifier(self)




    def qualified_identifier(self):

        localctx = CSharpParser.Qualified_identifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 266, self.RULE_qualified_identifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1863
            self.identifier()
            self.state = 1868
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==136:
                self.state = 1864
                self.match(CSharpParser.DOT)
                self.state = 1865
                self.identifier()
                self.state = 1870
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Namespace_bodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_BRACE(self):
            return self.getToken(CSharpParser.OPEN_BRACE, 0)

        def CLOSE_BRACE(self):
            return self.getToken(CSharpParser.CLOSE_BRACE, 0)

        def extern_alias_directives(self):
            return self.getTypedRuleContext(CSharpParser.Extern_alias_directivesContext,0)


        def using_directives(self):
            return self.getTypedRuleContext(CSharpParser.Using_directivesContext,0)


        def namespace_member_declarations(self):
            return self.getTypedRuleContext(CSharpParser.Namespace_member_declarationsContext,0)


        def SEMICOLON(self):
            return self.getToken(CSharpParser.SEMICOLON, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_namespace_body

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNamespace_body" ):
                listener.enterNamespace_body(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNamespace_body" ):
                listener.exitNamespace_body(self)




    def namespace_body(self):

        localctx = CSharpParser.Namespace_bodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 268, self.RULE_namespace_body)
        self._la = 0 # Token type
        try:
            self.state = 1883
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [130]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1871
                self.match(CSharpParser.OPEN_BRACE)
                self.state = 1873
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,187,self._ctx)
                if la_ == 1:
                    self.state = 1872
                    self.extern_alias_directives()


                self.state = 1876
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==109:
                    self.state = 1875
                    self.using_directives()


                self.state = 1879
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 9)) & ~0x3f) == 0 and ((1 << (_la - 9)) & -3500516114550671909) != 0) or ((((_la - 75)) & ~0x3f) == 0 and ((1 << (_la - 75)) & 720608907209865205) != 0):
                    self.state = 1878
                    self.namespace_member_declarations()


                self.state = 1881
                self.match(CSharpParser.CLOSE_BRACE)
                pass
            elif token in [139]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1882
                self.match(CSharpParser.SEMICOLON)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Extern_alias_directivesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def extern_alias_directive(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Extern_alias_directiveContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Extern_alias_directiveContext,i)


        def getRuleIndex(self):
            return CSharpParser.RULE_extern_alias_directives

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExtern_alias_directives" ):
                listener.enterExtern_alias_directives(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExtern_alias_directives" ):
                listener.exitExtern_alias_directives(self)




    def extern_alias_directives(self):

        localctx = CSharpParser.Extern_alias_directivesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 270, self.RULE_extern_alias_directives)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1886 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 1885
                    self.extern_alias_directive()

                else:
                    raise NoViableAltException(self)
                self.state = 1888 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,191,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Extern_alias_directiveContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXTERN(self):
            return self.getToken(CSharpParser.EXTERN, 0)

        def ALIAS(self):
            return self.getToken(CSharpParser.ALIAS, 0)

        def identifier(self):
            return self.getTypedRuleContext(CSharpParser.IdentifierContext,0)


        def SEMICOLON(self):
            return self.getToken(CSharpParser.SEMICOLON, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_extern_alias_directive

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExtern_alias_directive" ):
                listener.enterExtern_alias_directive(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExtern_alias_directive" ):
                listener.exitExtern_alias_directive(self)




    def extern_alias_directive(self):

        localctx = CSharpParser.Extern_alias_directiveContext(self, self._ctx, self.state)
        self.enterRule(localctx, 272, self.RULE_extern_alias_directive)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1890
            self.match(CSharpParser.EXTERN)
            self.state = 1891
            self.match(CSharpParser.ALIAS)
            self.state = 1892
            self.identifier()
            self.state = 1893
            self.match(CSharpParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Using_directivesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def using_directive(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Using_directiveContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Using_directiveContext,i)


        def getRuleIndex(self):
            return CSharpParser.RULE_using_directives

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUsing_directives" ):
                listener.enterUsing_directives(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUsing_directives" ):
                listener.exitUsing_directives(self)




    def using_directives(self):

        localctx = CSharpParser.Using_directivesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 274, self.RULE_using_directives)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1896 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 1895
                    self.using_directive()

                else:
                    raise NoViableAltException(self)
                self.state = 1898 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,192,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Using_directiveContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CSharpParser.RULE_using_directive

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class UsingAliasDirectiveContext(Using_directiveContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CSharpParser.Using_directiveContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def USING(self):
            return self.getToken(CSharpParser.USING, 0)
        def identifier(self):
            return self.getTypedRuleContext(CSharpParser.IdentifierContext,0)

        def ASSIGNMENT(self):
            return self.getToken(CSharpParser.ASSIGNMENT, 0)
        def namespace_or_type_name(self):
            return self.getTypedRuleContext(CSharpParser.Namespace_or_type_nameContext,0)

        def SEMICOLON(self):
            return self.getToken(CSharpParser.SEMICOLON, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUsingAliasDirective" ):
                listener.enterUsingAliasDirective(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUsingAliasDirective" ):
                listener.exitUsingAliasDirective(self)


    class UsingNamespaceDirectiveContext(Using_directiveContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CSharpParser.Using_directiveContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def USING(self):
            return self.getToken(CSharpParser.USING, 0)
        def namespace_or_type_name(self):
            return self.getTypedRuleContext(CSharpParser.Namespace_or_type_nameContext,0)

        def SEMICOLON(self):
            return self.getToken(CSharpParser.SEMICOLON, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUsingNamespaceDirective" ):
                listener.enterUsingNamespaceDirective(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUsingNamespaceDirective" ):
                listener.exitUsingNamespaceDirective(self)


    class UsingStaticDirectiveContext(Using_directiveContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CSharpParser.Using_directiveContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def USING(self):
            return self.getToken(CSharpParser.USING, 0)
        def STATIC(self):
            return self.getToken(CSharpParser.STATIC, 0)
        def namespace_or_type_name(self):
            return self.getTypedRuleContext(CSharpParser.Namespace_or_type_nameContext,0)

        def SEMICOLON(self):
            return self.getToken(CSharpParser.SEMICOLON, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUsingStaticDirective" ):
                listener.enterUsingStaticDirective(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUsingStaticDirective" ):
                listener.exitUsingStaticDirective(self)



    def using_directive(self):

        localctx = CSharpParser.Using_directiveContext(self, self._ctx, self.state)
        self.enterRule(localctx, 276, self.RULE_using_directive)
        try:
            self.state = 1915
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,193,self._ctx)
            if la_ == 1:
                localctx = CSharpParser.UsingAliasDirectiveContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1900
                self.match(CSharpParser.USING)
                self.state = 1901
                self.identifier()
                self.state = 1902
                self.match(CSharpParser.ASSIGNMENT)
                self.state = 1903
                self.namespace_or_type_name()
                self.state = 1904
                self.match(CSharpParser.SEMICOLON)
                pass

            elif la_ == 2:
                localctx = CSharpParser.UsingNamespaceDirectiveContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1906
                self.match(CSharpParser.USING)
                self.state = 1907
                self.namespace_or_type_name()
                self.state = 1908
                self.match(CSharpParser.SEMICOLON)
                pass

            elif la_ == 3:
                localctx = CSharpParser.UsingStaticDirectiveContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 1910
                self.match(CSharpParser.USING)
                self.state = 1911
                self.match(CSharpParser.STATIC)
                self.state = 1912
                self.namespace_or_type_name()
                self.state = 1913
                self.match(CSharpParser.SEMICOLON)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Namespace_member_declarationsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def namespace_member_declaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Namespace_member_declarationContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Namespace_member_declarationContext,i)


        def getRuleIndex(self):
            return CSharpParser.RULE_namespace_member_declarations

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNamespace_member_declarations" ):
                listener.enterNamespace_member_declarations(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNamespace_member_declarations" ):
                listener.exitNamespace_member_declarations(self)




    def namespace_member_declarations(self):

        localctx = CSharpParser.Namespace_member_declarationsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 278, self.RULE_namespace_member_declarations)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1918 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 1917
                    self.namespace_member_declaration()

                else:
                    raise NoViableAltException(self)
                self.state = 1920 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,194,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Namespace_member_declarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def namespace_declaration(self):
            return self.getTypedRuleContext(CSharpParser.Namespace_declarationContext,0)


        def type_declaration(self):
            return self.getTypedRuleContext(CSharpParser.Type_declarationContext,0)


        def module_initializer_declaration(self):
            return self.getTypedRuleContext(CSharpParser.Module_initializer_declarationContext,0)


        def common_member_declaration(self):
            return self.getTypedRuleContext(CSharpParser.Common_member_declarationContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_namespace_member_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNamespace_member_declaration" ):
                listener.enterNamespace_member_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNamespace_member_declaration" ):
                listener.exitNamespace_member_declaration(self)




    def namespace_member_declaration(self):

        localctx = CSharpParser.Namespace_member_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 280, self.RULE_namespace_member_declaration)
        try:
            self.state = 1926
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,195,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1922
                self.namespace_declaration()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1923
                self.type_declaration()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1924
                self.module_initializer_declaration()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1925
                self.common_member_declaration()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Type_declarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def class_definition(self):
            return self.getTypedRuleContext(CSharpParser.Class_definitionContext,0)


        def struct_definition(self):
            return self.getTypedRuleContext(CSharpParser.Struct_definitionContext,0)


        def interface_definition(self):
            return self.getTypedRuleContext(CSharpParser.Interface_definitionContext,0)


        def enum_definition(self):
            return self.getTypedRuleContext(CSharpParser.Enum_definitionContext,0)


        def delegate_definition(self):
            return self.getTypedRuleContext(CSharpParser.Delegate_definitionContext,0)


        def record_definition(self):
            return self.getTypedRuleContext(CSharpParser.Record_definitionContext,0)


        def attributes(self):
            return self.getTypedRuleContext(CSharpParser.AttributesContext,0)


        def all_member_modifiers(self):
            return self.getTypedRuleContext(CSharpParser.All_member_modifiersContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_type_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterType_declaration" ):
                listener.enterType_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitType_declaration" ):
                listener.exitType_declaration(self)




    def type_declaration(self):

        localctx = CSharpParser.Type_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 282, self.RULE_type_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1929
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==132:
                self.state = 1928
                self.attributes()


            self.state = 1932
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,197,self._ctx)
            if la_ == 1:
                self.state = 1931
                self.all_member_modifiers()


            self.state = 1940
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,198,self._ctx)
            if la_ == 1:
                self.state = 1934
                self.class_definition()
                pass

            elif la_ == 2:
                self.state = 1935
                self.struct_definition()
                pass

            elif la_ == 3:
                self.state = 1936
                self.interface_definition()
                pass

            elif la_ == 4:
                self.state = 1937
                self.enum_definition()
                pass

            elif la_ == 5:
                self.state = 1938
                self.delegate_definition()
                pass

            elif la_ == 6:
                self.state = 1939
                self.record_definition()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Record_definitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RECORD(self):
            return self.getToken(CSharpParser.RECORD, 0)

        def identifier(self):
            return self.getTypedRuleContext(CSharpParser.IdentifierContext,0)


        def OPEN_PARENS(self):
            return self.getToken(CSharpParser.OPEN_PARENS, 0)

        def CLOSE_PARENS(self):
            return self.getToken(CSharpParser.CLOSE_PARENS, 0)

        def record_body(self):
            return self.getTypedRuleContext(CSharpParser.Record_bodyContext,0)


        def STRUCT(self):
            return self.getToken(CSharpParser.STRUCT, 0)

        def type_parameter_list(self):
            return self.getTypedRuleContext(CSharpParser.Type_parameter_listContext,0)


        def record_base(self):
            return self.getTypedRuleContext(CSharpParser.Record_baseContext,0)


        def type_parameter_constraints_clauses(self):
            return self.getTypedRuleContext(CSharpParser.Type_parameter_constraints_clausesContext,0)


        def record_parameters(self):
            return self.getTypedRuleContext(CSharpParser.Record_parametersContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_record_definition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRecord_definition" ):
                listener.enterRecord_definition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRecord_definition" ):
                listener.exitRecord_definition(self)




    def record_definition(self):

        localctx = CSharpParser.Record_definitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 284, self.RULE_record_definition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1942
            self.match(CSharpParser.RECORD)
            self.state = 1944
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==96:
                self.state = 1943
                self.match(CSharpParser.STRUCT)


            self.state = 1946
            self.identifier()
            self.state = 1948
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==151:
                self.state = 1947
                self.type_parameter_list()


            self.state = 1951
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==138:
                self.state = 1950
                self.record_base()


            self.state = 1954
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==115:
                self.state = 1953
                self.type_parameter_constraints_clauses()


            self.state = 1956
            self.match(CSharpParser.OPEN_PARENS)
            self.state = 1958
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 10)) & ~0x3f) == 0 and ((1 << (_la - 10)) & 7040328602915740397) != 0) or ((((_la - 75)) & ~0x3f) == 0 and ((1 << (_la - 75)) & 720599763221861393) != 0):
                self.state = 1957
                self.record_parameters()


            self.state = 1960
            self.match(CSharpParser.CLOSE_PARENS)
            self.state = 1961
            self.record_body()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Record_baseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COLON(self):
            return self.getToken(CSharpParser.COLON, 0)

        def class_type(self):
            return self.getTypedRuleContext(CSharpParser.Class_typeContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.COMMA)
            else:
                return self.getToken(CSharpParser.COMMA, i)

        def namespace_or_type_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Namespace_or_type_nameContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Namespace_or_type_nameContext,i)


        def getRuleIndex(self):
            return CSharpParser.RULE_record_base

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRecord_base" ):
                listener.enterRecord_base(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRecord_base" ):
                listener.exitRecord_base(self)




    def record_base(self):

        localctx = CSharpParser.Record_baseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 286, self.RULE_record_base)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1963
            self.match(CSharpParser.COLON)
            self.state = 1964
            self.class_type()
            self.state = 1969
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==137:
                self.state = 1965
                self.match(CSharpParser.COMMA)
                self.state = 1966
                self.namespace_or_type_name()
                self.state = 1971
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Record_bodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_BRACE(self):
            return self.getToken(CSharpParser.OPEN_BRACE, 0)

        def CLOSE_BRACE(self):
            return self.getToken(CSharpParser.CLOSE_BRACE, 0)

        def class_member_declarations(self):
            return self.getTypedRuleContext(CSharpParser.Class_member_declarationsContext,0)


        def SEMICOLON(self):
            return self.getToken(CSharpParser.SEMICOLON, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_record_body

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRecord_body" ):
                listener.enterRecord_body(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRecord_body" ):
                listener.exitRecord_body(self)




    def record_body(self):

        localctx = CSharpParser.Record_bodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 288, self.RULE_record_body)
        self._la = 0 # Token type
        try:
            self.state = 1978
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [130]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1972
                self.match(CSharpParser.OPEN_BRACE)
                self.state = 1974
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -2930075500117510656) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & 33758034519905483) != 0) or ((((_la - 132)) & ~0x3f) == 0 and ((1 << (_la - 132)) & 131077) != 0):
                    self.state = 1973
                    self.class_member_declarations()


                self.state = 1976
                self.match(CSharpParser.CLOSE_BRACE)
                pass
            elif token in [139]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1977
                self.match(CSharpParser.SEMICOLON)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Record_parametersContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def record_parameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Record_parameterContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Record_parameterContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.COMMA)
            else:
                return self.getToken(CSharpParser.COMMA, i)

        def getRuleIndex(self):
            return CSharpParser.RULE_record_parameters

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRecord_parameters" ):
                listener.enterRecord_parameters(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRecord_parameters" ):
                listener.exitRecord_parameters(self)




    def record_parameters(self):

        localctx = CSharpParser.Record_parametersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 290, self.RULE_record_parameters)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1980
            self.record_parameter()
            self.state = 1985
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==137:
                self.state = 1981
                self.match(CSharpParser.COMMA)
                self.state = 1982
                self.record_parameter()
                self.state = 1987
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Record_parameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def type_(self):
            return self.getTypedRuleContext(CSharpParser.Type_Context,0)


        def identifier(self):
            return self.getTypedRuleContext(CSharpParser.IdentifierContext,0)


        def attributes(self):
            return self.getTypedRuleContext(CSharpParser.AttributesContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_record_parameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRecord_parameter" ):
                listener.enterRecord_parameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRecord_parameter" ):
                listener.exitRecord_parameter(self)




    def record_parameter(self):

        localctx = CSharpParser.Record_parameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 292, self.RULE_record_parameter)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1989
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==132:
                self.state = 1988
                self.attributes()


            self.state = 1991
            self.type_()
            self.state = 1992
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Qualified_alias_memberContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(CSharpParser.IdentifierContext,i)


        def DOUBLE_COLON(self):
            return self.getToken(CSharpParser.DOUBLE_COLON, 0)

        def type_argument_list(self):
            return self.getTypedRuleContext(CSharpParser.Type_argument_listContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_qualified_alias_member

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQualified_alias_member" ):
                listener.enterQualified_alias_member(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQualified_alias_member" ):
                listener.exitQualified_alias_member(self)




    def qualified_alias_member(self):

        localctx = CSharpParser.Qualified_alias_memberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 294, self.RULE_qualified_alias_member)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1994
            self.identifier()
            self.state = 1995
            self.match(CSharpParser.DOUBLE_COLON)
            self.state = 1996
            self.identifier()
            self.state = 1998
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,209,self._ctx)
            if la_ == 1:
                self.state = 1997
                self.type_argument_list()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Type_parameter_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LT(self):
            return self.getToken(CSharpParser.LT, 0)

        def type_parameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Type_parameterContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Type_parameterContext,i)


        def GT(self):
            return self.getToken(CSharpParser.GT, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.COMMA)
            else:
                return self.getToken(CSharpParser.COMMA, i)

        def getRuleIndex(self):
            return CSharpParser.RULE_type_parameter_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterType_parameter_list" ):
                listener.enterType_parameter_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitType_parameter_list" ):
                listener.exitType_parameter_list(self)




    def type_parameter_list(self):

        localctx = CSharpParser.Type_parameter_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 296, self.RULE_type_parameter_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2000
            self.match(CSharpParser.LT)
            self.state = 2001
            self.type_parameter()
            self.state = 2006
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==137:
                self.state = 2002
                self.match(CSharpParser.COMMA)
                self.state = 2003
                self.type_parameter()
                self.state = 2008
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2009
            self.match(CSharpParser.GT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Type_parameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(CSharpParser.IdentifierContext,0)


        def attributes(self):
            return self.getTypedRuleContext(CSharpParser.AttributesContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_type_parameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterType_parameter" ):
                listener.enterType_parameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitType_parameter" ):
                listener.exitType_parameter(self)




    def type_parameter(self):

        localctx = CSharpParser.Type_parameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 298, self.RULE_type_parameter)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2012
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==132:
                self.state = 2011
                self.attributes()


            self.state = 2014
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Class_baseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COLON(self):
            return self.getToken(CSharpParser.COLON, 0)

        def class_type(self):
            return self.getTypedRuleContext(CSharpParser.Class_typeContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.COMMA)
            else:
                return self.getToken(CSharpParser.COMMA, i)

        def namespace_or_type_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Namespace_or_type_nameContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Namespace_or_type_nameContext,i)


        def getRuleIndex(self):
            return CSharpParser.RULE_class_base

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClass_base" ):
                listener.enterClass_base(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClass_base" ):
                listener.exitClass_base(self)




    def class_base(self):

        localctx = CSharpParser.Class_baseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 300, self.RULE_class_base)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2016
            self.match(CSharpParser.COLON)
            self.state = 2017
            self.class_type()
            self.state = 2022
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==137:
                self.state = 2018
                self.match(CSharpParser.COMMA)
                self.state = 2019
                self.namespace_or_type_name()
                self.state = 2024
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Interface_type_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def namespace_or_type_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Namespace_or_type_nameContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Namespace_or_type_nameContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.COMMA)
            else:
                return self.getToken(CSharpParser.COMMA, i)

        def getRuleIndex(self):
            return CSharpParser.RULE_interface_type_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterface_type_list" ):
                listener.enterInterface_type_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterface_type_list" ):
                listener.exitInterface_type_list(self)




    def interface_type_list(self):

        localctx = CSharpParser.Interface_type_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 302, self.RULE_interface_type_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2025
            self.namespace_or_type_name()
            self.state = 2030
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==137:
                self.state = 2026
                self.match(CSharpParser.COMMA)
                self.state = 2027
                self.namespace_or_type_name()
                self.state = 2032
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Type_parameter_constraints_clausesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def type_parameter_constraints_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Type_parameter_constraints_clauseContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Type_parameter_constraints_clauseContext,i)


        def getRuleIndex(self):
            return CSharpParser.RULE_type_parameter_constraints_clauses

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterType_parameter_constraints_clauses" ):
                listener.enterType_parameter_constraints_clauses(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitType_parameter_constraints_clauses" ):
                listener.exitType_parameter_constraints_clauses(self)




    def type_parameter_constraints_clauses(self):

        localctx = CSharpParser.Type_parameter_constraints_clausesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 304, self.RULE_type_parameter_constraints_clauses)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2034 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 2033
                self.type_parameter_constraints_clause()
                self.state = 2036 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==115):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Type_parameter_constraints_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHERE(self):
            return self.getToken(CSharpParser.WHERE, 0)

        def identifier(self):
            return self.getTypedRuleContext(CSharpParser.IdentifierContext,0)


        def COLON(self):
            return self.getToken(CSharpParser.COLON, 0)

        def type_parameter_constraints(self):
            return self.getTypedRuleContext(CSharpParser.Type_parameter_constraintsContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_type_parameter_constraints_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterType_parameter_constraints_clause" ):
                listener.enterType_parameter_constraints_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitType_parameter_constraints_clause" ):
                listener.exitType_parameter_constraints_clause(self)




    def type_parameter_constraints_clause(self):

        localctx = CSharpParser.Type_parameter_constraints_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 306, self.RULE_type_parameter_constraints_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2038
            self.match(CSharpParser.WHERE)
            self.state = 2039
            self.identifier()
            self.state = 2040
            self.match(CSharpParser.COLON)
            self.state = 2041
            self.type_parameter_constraints()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Type_parameter_constraintsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def constructor_constraint(self):
            return self.getTypedRuleContext(CSharpParser.Constructor_constraintContext,0)


        def primary_constraint(self):
            return self.getTypedRuleContext(CSharpParser.Primary_constraintContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.COMMA)
            else:
                return self.getToken(CSharpParser.COMMA, i)

        def secondary_constraints(self):
            return self.getTypedRuleContext(CSharpParser.Secondary_constraintsContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_type_parameter_constraints

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterType_parameter_constraints" ):
                listener.enterType_parameter_constraints(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitType_parameter_constraints" ):
                listener.exitType_parameter_constraints(self)




    def type_parameter_constraints(self):

        localctx = CSharpParser.Type_parameter_constraintsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 308, self.RULE_type_parameter_constraints)
        self._la = 0 # Token type
        try:
            self.state = 2053
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [68]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2043
                self.constructor_constraint()
                pass
            elif token in [10, 12, 13, 15, 16, 17, 21, 27, 33, 36, 39, 49, 50, 52, 60, 62, 63, 66, 71, 72, 75, 79, 85, 89, 90, 95, 96, 106, 110, 114, 115, 117, 119]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2044
                self.primary_constraint()
                self.state = 2047
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,215,self._ctx)
                if la_ == 1:
                    self.state = 2045
                    self.match(CSharpParser.COMMA)
                    self.state = 2046
                    self.secondary_constraints()


                self.state = 2051
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==137:
                    self.state = 2049
                    self.match(CSharpParser.COMMA)
                    self.state = 2050
                    self.constructor_constraint()


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Primary_constraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def class_type(self):
            return self.getTypedRuleContext(CSharpParser.Class_typeContext,0)


        def CLASS(self):
            return self.getToken(CSharpParser.CLASS, 0)

        def INTERR(self):
            return self.getToken(CSharpParser.INTERR, 0)

        def STRUCT(self):
            return self.getToken(CSharpParser.STRUCT, 0)

        def UNMANAGED(self):
            return self.getToken(CSharpParser.UNMANAGED, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_primary_constraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrimary_constraint" ):
                listener.enterPrimary_constraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrimary_constraint" ):
                listener.exitPrimary_constraint(self)




    def primary_constraint(self):

        localctx = CSharpParser.Primary_constraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 310, self.RULE_primary_constraint)
        self._la = 0 # Token type
        try:
            self.state = 2062
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,219,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2055
                self.class_type()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2056
                self.match(CSharpParser.CLASS)
                self.state = 2058
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==153:
                    self.state = 2057
                    self.match(CSharpParser.INTERR)


                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2060
                self.match(CSharpParser.STRUCT)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2061
                self.match(CSharpParser.UNMANAGED)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PatternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declaration_pattern(self):
            return self.getTypedRuleContext(CSharpParser.Declaration_patternContext,0)


        def constant_pattern(self):
            return self.getTypedRuleContext(CSharpParser.Constant_patternContext,0)


        def var_pattern(self):
            return self.getTypedRuleContext(CSharpParser.Var_patternContext,0)


        def relational_pattern(self):
            return self.getTypedRuleContext(CSharpParser.Relational_patternContext,0)


        def and_pattern(self):
            return self.getTypedRuleContext(CSharpParser.And_patternContext,0)


        def or_pattern(self):
            return self.getTypedRuleContext(CSharpParser.Or_patternContext,0)


        def not_pattern(self):
            return self.getTypedRuleContext(CSharpParser.Not_patternContext,0)


        def expression(self):
            return self.getTypedRuleContext(CSharpParser.ExpressionContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_pattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPattern" ):
                listener.enterPattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPattern" ):
                listener.exitPattern(self)




    def pattern(self):

        localctx = CSharpParser.PatternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 312, self.RULE_pattern)
        try:
            self.state = 2072
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,220,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2064
                self.declaration_pattern()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2065
                self.constant_pattern()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2066
                self.var_pattern()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2067
                self.relational_pattern()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 2068
                self.and_pattern()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 2069
                self.or_pattern()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 2070
                self.not_pattern()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 2071
                self.expression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Relational_patternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LT(self):
            return self.getToken(CSharpParser.LT, 0)

        def expression(self):
            return self.getTypedRuleContext(CSharpParser.ExpressionContext,0)


        def OP_LE(self):
            return self.getToken(CSharpParser.OP_LE, 0)

        def GT(self):
            return self.getToken(CSharpParser.GT, 0)

        def OP_GE(self):
            return self.getToken(CSharpParser.OP_GE, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_relational_pattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRelational_pattern" ):
                listener.enterRelational_pattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRelational_pattern" ):
                listener.exitRelational_pattern(self)




    def relational_pattern(self):

        localctx = CSharpParser.Relational_patternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 314, self.RULE_relational_pattern)
        try:
            self.state = 2082
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [151]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2074
                self.match(CSharpParser.LT)
                self.state = 2075
                self.expression()
                pass
            elif token in [163]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2076
                self.match(CSharpParser.OP_LE)
                self.state = 2077
                self.expression()
                pass
            elif token in [152]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2078
                self.match(CSharpParser.GT)
                self.state = 2079
                self.expression()
                pass
            elif token in [164]:
                self.enterOuterAlt(localctx, 4)
                self.state = 2080
                self.match(CSharpParser.OP_GE)
                self.state = 2081
                self.expression()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class And_patternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def relational_pattern(self):
            return self.getTypedRuleContext(CSharpParser.Relational_patternContext,0)


        def AND(self):
            return self.getToken(CSharpParser.AND, 0)

        def pattern(self):
            return self.getTypedRuleContext(CSharpParser.PatternContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_and_pattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnd_pattern" ):
                listener.enterAnd_pattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnd_pattern" ):
                listener.exitAnd_pattern(self)




    def and_pattern(self):

        localctx = CSharpParser.And_patternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 316, self.RULE_and_pattern)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2084
            self.relational_pattern()
            self.state = 2085
            self.match(CSharpParser.AND)
            self.state = 2086
            self.pattern()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Or_patternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def relational_pattern(self):
            return self.getTypedRuleContext(CSharpParser.Relational_patternContext,0)


        def OR(self):
            return self.getToken(CSharpParser.OR, 0)

        def pattern(self):
            return self.getTypedRuleContext(CSharpParser.PatternContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_or_pattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOr_pattern" ):
                listener.enterOr_pattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOr_pattern" ):
                listener.exitOr_pattern(self)




    def or_pattern(self):

        localctx = CSharpParser.Or_patternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 318, self.RULE_or_pattern)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2088
            self.relational_pattern()
            self.state = 2089
            self.match(CSharpParser.OR)
            self.state = 2090
            self.pattern()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Not_patternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NOT(self):
            return self.getToken(CSharpParser.NOT, 0)

        def pattern(self):
            return self.getTypedRuleContext(CSharpParser.PatternContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_not_pattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNot_pattern" ):
                listener.enterNot_pattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNot_pattern" ):
                listener.exitNot_pattern(self)




    def not_pattern(self):

        localctx = CSharpParser.Not_patternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 320, self.RULE_not_pattern)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2092
            self.match(CSharpParser.NOT)
            self.state = 2093
            self.pattern()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Declaration_patternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def type_(self):
            return self.getTypedRuleContext(CSharpParser.Type_Context,0)


        def simple_designation(self):
            return self.getTypedRuleContext(CSharpParser.Simple_designationContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_declaration_pattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclaration_pattern" ):
                listener.enterDeclaration_pattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclaration_pattern" ):
                listener.exitDeclaration_pattern(self)




    def declaration_pattern(self):

        localctx = CSharpParser.Declaration_patternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 322, self.RULE_declaration_pattern)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2095
            self.type_()
            self.state = 2096
            self.simple_designation()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Simple_designationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def single_variable_designation(self):
            return self.getTypedRuleContext(CSharpParser.Single_variable_designationContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_simple_designation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimple_designation" ):
                listener.enterSimple_designation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimple_designation" ):
                listener.exitSimple_designation(self)




    def simple_designation(self):

        localctx = CSharpParser.Simple_designationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 324, self.RULE_simple_designation)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2098
            self.single_variable_designation()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Single_variable_designationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(CSharpParser.IdentifierContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_single_variable_designation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSingle_variable_designation" ):
                listener.enterSingle_variable_designation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSingle_variable_designation" ):
                listener.exitSingle_variable_designation(self)




    def single_variable_designation(self):

        localctx = CSharpParser.Single_variable_designationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 326, self.RULE_single_variable_designation)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2100
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Constant_patternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def constant_expression(self):
            return self.getTypedRuleContext(CSharpParser.Constant_expressionContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_constant_pattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstant_pattern" ):
                listener.enterConstant_pattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstant_pattern" ):
                listener.exitConstant_pattern(self)




    def constant_pattern(self):

        localctx = CSharpParser.Constant_patternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 328, self.RULE_constant_pattern)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2102
            self.constant_expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Var_patternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VAR(self):
            return self.getToken(CSharpParser.VAR, 0)

        def designation(self):
            return self.getTypedRuleContext(CSharpParser.DesignationContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_var_pattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVar_pattern" ):
                listener.enterVar_pattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVar_pattern" ):
                listener.exitVar_pattern(self)




    def var_pattern(self):

        localctx = CSharpParser.Var_patternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 330, self.RULE_var_pattern)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2104
            self.match(CSharpParser.VAR)
            self.state = 2105
            self.designation()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DesignationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simple_designation(self):
            return self.getTypedRuleContext(CSharpParser.Simple_designationContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_designation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDesignation" ):
                listener.enterDesignation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDesignation" ):
                listener.exitDesignation(self)




    def designation(self):

        localctx = CSharpParser.DesignationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 332, self.RULE_designation)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2107
            self.simple_designation()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Module_initializer_declarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def attributes(self):
            return self.getTypedRuleContext(CSharpParser.AttributesContext,0)


        def STATIC(self):
            return self.getToken(CSharpParser.STATIC, 0)

        def VOID(self):
            return self.getToken(CSharpParser.VOID, 0)

        def identifier(self):
            return self.getTypedRuleContext(CSharpParser.IdentifierContext,0)


        def OPEN_PARENS(self):
            return self.getToken(CSharpParser.OPEN_PARENS, 0)

        def CLOSE_PARENS(self):
            return self.getToken(CSharpParser.CLOSE_PARENS, 0)

        def method_body(self):
            return self.getTypedRuleContext(CSharpParser.Method_bodyContext,0)


        def INTERNAL(self):
            return self.getToken(CSharpParser.INTERNAL, 0)

        def PUBLIC(self):
            return self.getToken(CSharpParser.PUBLIC, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_module_initializer_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModule_initializer_declaration" ):
                listener.enterModule_initializer_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModule_initializer_declaration" ):
                listener.exitModule_initializer_declaration(self)




    def module_initializer_declaration(self):

        localctx = CSharpParser.Module_initializer_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 334, self.RULE_module_initializer_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2109
            self.attributes()
            self.state = 2111
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==58:
                self.state = 2110
                self.match(CSharpParser.INTERNAL)


            self.state = 2114
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==82:
                self.state = 2113
                self.match(CSharpParser.PUBLIC)


            self.state = 2116
            self.match(CSharpParser.STATIC)
            self.state = 2117
            self.match(CSharpParser.VOID)
            self.state = 2118
            self.identifier()
            self.state = 2119
            self.match(CSharpParser.OPEN_PARENS)
            self.state = 2120
            self.match(CSharpParser.CLOSE_PARENS)
            self.state = 2121
            self.method_body()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Secondary_constraintsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def namespace_or_type_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Namespace_or_type_nameContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Namespace_or_type_nameContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.COMMA)
            else:
                return self.getToken(CSharpParser.COMMA, i)

        def getRuleIndex(self):
            return CSharpParser.RULE_secondary_constraints

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSecondary_constraints" ):
                listener.enterSecondary_constraints(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSecondary_constraints" ):
                listener.exitSecondary_constraints(self)




    def secondary_constraints(self):

        localctx = CSharpParser.Secondary_constraintsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 336, self.RULE_secondary_constraints)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2123
            self.namespace_or_type_name()
            self.state = 2128
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,224,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2124
                    self.match(CSharpParser.COMMA)
                    self.state = 2125
                    self.namespace_or_type_name() 
                self.state = 2130
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,224,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Constructor_constraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NEW(self):
            return self.getToken(CSharpParser.NEW, 0)

        def OPEN_PARENS(self):
            return self.getToken(CSharpParser.OPEN_PARENS, 0)

        def CLOSE_PARENS(self):
            return self.getToken(CSharpParser.CLOSE_PARENS, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_constructor_constraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstructor_constraint" ):
                listener.enterConstructor_constraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstructor_constraint" ):
                listener.exitConstructor_constraint(self)




    def constructor_constraint(self):

        localctx = CSharpParser.Constructor_constraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 338, self.RULE_constructor_constraint)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2131
            self.match(CSharpParser.NEW)
            self.state = 2132
            self.match(CSharpParser.OPEN_PARENS)
            self.state = 2133
            self.match(CSharpParser.CLOSE_PARENS)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Class_bodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_BRACE(self):
            return self.getToken(CSharpParser.OPEN_BRACE, 0)

        def CLOSE_BRACE(self):
            return self.getToken(CSharpParser.CLOSE_BRACE, 0)

        def class_member_declarations(self):
            return self.getTypedRuleContext(CSharpParser.Class_member_declarationsContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_class_body

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClass_body" ):
                listener.enterClass_body(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClass_body" ):
                listener.exitClass_body(self)




    def class_body(self):

        localctx = CSharpParser.Class_bodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 340, self.RULE_class_body)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2135
            self.match(CSharpParser.OPEN_BRACE)
            self.state = 2137
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & -2930075500117510656) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & 33758034519905483) != 0) or ((((_la - 132)) & ~0x3f) == 0 and ((1 << (_la - 132)) & 131077) != 0):
                self.state = 2136
                self.class_member_declarations()


            self.state = 2139
            self.match(CSharpParser.CLOSE_BRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Class_member_declarationsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def class_member_declaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Class_member_declarationContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Class_member_declarationContext,i)


        def getRuleIndex(self):
            return CSharpParser.RULE_class_member_declarations

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClass_member_declarations" ):
                listener.enterClass_member_declarations(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClass_member_declarations" ):
                listener.exitClass_member_declarations(self)




    def class_member_declarations(self):

        localctx = CSharpParser.Class_member_declarationsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 342, self.RULE_class_member_declarations)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2142 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 2141
                self.class_member_declaration()
                self.state = 2144 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & -2930075500117510656) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & 33758034519905483) != 0) or ((((_la - 132)) & ~0x3f) == 0 and ((1 << (_la - 132)) & 131077) != 0)):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Class_member_declarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def common_member_declaration(self):
            return self.getTypedRuleContext(CSharpParser.Common_member_declarationContext,0)


        def destructor_definition(self):
            return self.getTypedRuleContext(CSharpParser.Destructor_definitionContext,0)


        def attributes(self):
            return self.getTypedRuleContext(CSharpParser.AttributesContext,0)


        def all_member_modifiers(self):
            return self.getTypedRuleContext(CSharpParser.All_member_modifiersContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_class_member_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClass_member_declaration" ):
                listener.enterClass_member_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClass_member_declaration" ):
                listener.exitClass_member_declaration(self)




    def class_member_declaration(self):

        localctx = CSharpParser.Class_member_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 344, self.RULE_class_member_declaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2147
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,227,self._ctx)
            if la_ == 1:
                self.state = 2146
                self.attributes()


            self.state = 2150
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,228,self._ctx)
            if la_ == 1:
                self.state = 2149
                self.all_member_modifiers()


            self.state = 2154
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [9, 10, 12, 13, 15, 16, 17, 19, 21, 22, 25, 27, 28, 30, 32, 33, 35, 36, 38, 39, 40, 41, 42, 46, 49, 50, 52, 54, 56, 57, 58, 60, 62, 63, 65, 66, 68, 71, 72, 75, 77, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 91, 94, 95, 96, 103, 104, 106, 107, 108, 110, 111, 112, 114, 115, 117, 118, 119, 132, 134]:
                self.state = 2152
                self.common_member_declaration()
                pass
            elif token in [149]:
                self.state = 2153
                self.destructor_definition()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class All_member_modifiersContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def all_member_modifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.All_member_modifierContext)
            else:
                return self.getTypedRuleContext(CSharpParser.All_member_modifierContext,i)


        def getRuleIndex(self):
            return CSharpParser.RULE_all_member_modifiers

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAll_member_modifiers" ):
                listener.enterAll_member_modifiers(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAll_member_modifiers" ):
                listener.exitAll_member_modifiers(self)




    def all_member_modifiers(self):

        localctx = CSharpParser.All_member_modifiersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 346, self.RULE_all_member_modifiers)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2157 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 2156
                    self.all_member_modifier()

                else:
                    raise NoViableAltException(self)
                self.state = 2159 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,230,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class All_member_modifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NEW(self):
            return self.getToken(CSharpParser.NEW, 0)

        def PUBLIC(self):
            return self.getToken(CSharpParser.PUBLIC, 0)

        def PROTECTED(self):
            return self.getToken(CSharpParser.PROTECTED, 0)

        def INTERNAL(self):
            return self.getToken(CSharpParser.INTERNAL, 0)

        def PRIVATE(self):
            return self.getToken(CSharpParser.PRIVATE, 0)

        def READONLY(self):
            return self.getToken(CSharpParser.READONLY, 0)

        def VOLATILE(self):
            return self.getToken(CSharpParser.VOLATILE, 0)

        def VIRTUAL(self):
            return self.getToken(CSharpParser.VIRTUAL, 0)

        def SEALED(self):
            return self.getToken(CSharpParser.SEALED, 0)

        def OVERRIDE(self):
            return self.getToken(CSharpParser.OVERRIDE, 0)

        def ABSTRACT(self):
            return self.getToken(CSharpParser.ABSTRACT, 0)

        def STATIC(self):
            return self.getToken(CSharpParser.STATIC, 0)

        def UNSAFE(self):
            return self.getToken(CSharpParser.UNSAFE, 0)

        def EXTERN(self):
            return self.getToken(CSharpParser.EXTERN, 0)

        def PARTIAL(self):
            return self.getToken(CSharpParser.PARTIAL, 0)

        def ASYNC(self):
            return self.getToken(CSharpParser.ASYNC, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_all_member_modifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAll_member_modifier" ):
                listener.enterAll_member_modifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAll_member_modifier" ):
                listener.exitAll_member_modifier(self)




    def all_member_modifier(self):

        localctx = CSharpParser.All_member_modifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 348, self.RULE_all_member_modifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2161
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 288234774198288896) != 0) or ((((_la - 68)) & ~0x3f) == 0 and ((1 << (_la - 68)) & 44530289146369) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Common_member_declarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def constant_declaration(self):
            return self.getTypedRuleContext(CSharpParser.Constant_declarationContext,0)


        def typed_member_declaration(self):
            return self.getTypedRuleContext(CSharpParser.Typed_member_declarationContext,0)


        def event_declaration(self):
            return self.getTypedRuleContext(CSharpParser.Event_declarationContext,0)


        def conversion_operator_declarator(self):
            return self.getTypedRuleContext(CSharpParser.Conversion_operator_declaratorContext,0)


        def body(self):
            return self.getTypedRuleContext(CSharpParser.BodyContext,0)


        def right_arrow(self):
            return self.getTypedRuleContext(CSharpParser.Right_arrowContext,0)


        def throwable_expression(self):
            return self.getTypedRuleContext(CSharpParser.Throwable_expressionContext,0)


        def SEMICOLON(self):
            return self.getToken(CSharpParser.SEMICOLON, 0)

        def constructor_declaration(self):
            return self.getTypedRuleContext(CSharpParser.Constructor_declarationContext,0)


        def method_declaration(self):
            return self.getTypedRuleContext(CSharpParser.Method_declarationContext,0)


        def class_definition(self):
            return self.getTypedRuleContext(CSharpParser.Class_definitionContext,0)


        def struct_definition(self):
            return self.getTypedRuleContext(CSharpParser.Struct_definitionContext,0)


        def interface_definition(self):
            return self.getTypedRuleContext(CSharpParser.Interface_definitionContext,0)


        def enum_definition(self):
            return self.getTypedRuleContext(CSharpParser.Enum_definitionContext,0)


        def delegate_definition(self):
            return self.getTypedRuleContext(CSharpParser.Delegate_definitionContext,0)


        def record_definition(self):
            return self.getTypedRuleContext(CSharpParser.Record_definitionContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_common_member_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCommon_member_declaration" ):
                listener.enterCommon_member_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCommon_member_declaration" ):
                listener.exitCommon_member_declaration(self)




    def common_member_declaration(self):

        localctx = CSharpParser.Common_member_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 350, self.RULE_common_member_declaration)
        try:
            self.state = 2182
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,232,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2163
                self.constant_declaration()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2164
                self.typed_member_declaration()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2165
                self.event_declaration()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2166
                self.conversion_operator_declarator()
                self.state = 2172
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,231,self._ctx)
                if la_ == 1:
                    self.state = 2167
                    self.body()
                    pass

                elif la_ == 2:
                    self.state = 2168
                    self.right_arrow()
                    self.state = 2169
                    self.throwable_expression()
                    self.state = 2170
                    self.match(CSharpParser.SEMICOLON)
                    pass


                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 2174
                self.constructor_declaration()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 2175
                self.method_declaration()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 2176
                self.class_definition()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 2177
                self.struct_definition()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 2178
                self.interface_definition()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 2179
                self.enum_definition()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 2180
                self.delegate_definition()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 2181
                self.record_definition()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Typed_member_declarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def type_(self):
            return self.getTypedRuleContext(CSharpParser.Type_Context,0)


        def namespace_or_type_name(self):
            return self.getTypedRuleContext(CSharpParser.Namespace_or_type_nameContext,0)


        def DOT(self):
            return self.getToken(CSharpParser.DOT, 0)

        def indexer_declaration(self):
            return self.getTypedRuleContext(CSharpParser.Indexer_declarationContext,0)


        def method_declaration(self):
            return self.getTypedRuleContext(CSharpParser.Method_declarationContext,0)


        def property_declaration(self):
            return self.getTypedRuleContext(CSharpParser.Property_declarationContext,0)


        def operator_declaration(self):
            return self.getTypedRuleContext(CSharpParser.Operator_declarationContext,0)


        def field_declaration(self):
            return self.getTypedRuleContext(CSharpParser.Field_declarationContext,0)


        def REF(self):
            return self.getToken(CSharpParser.REF, 0)

        def READONLY(self):
            return self.getToken(CSharpParser.READONLY, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_typed_member_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTyped_member_declaration" ):
                listener.enterTyped_member_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTyped_member_declaration" ):
                listener.exitTyped_member_declaration(self)




    def typed_member_declaration(self):

        localctx = CSharpParser.Typed_member_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 352, self.RULE_typed_member_declaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2189
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,233,self._ctx)
            if la_ == 1:
                self.state = 2184
                self.match(CSharpParser.REF)

            elif la_ == 2:
                self.state = 2185
                self.match(CSharpParser.READONLY)
                self.state = 2186
                self.match(CSharpParser.REF)

            elif la_ == 3:
                self.state = 2187
                self.match(CSharpParser.REF)
                self.state = 2188
                self.match(CSharpParser.READONLY)


            self.state = 2191
            self.type_()
            self.state = 2201
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,234,self._ctx)
            if la_ == 1:
                self.state = 2192
                self.namespace_or_type_name()
                self.state = 2193
                self.match(CSharpParser.DOT)
                self.state = 2194
                self.indexer_declaration()
                pass

            elif la_ == 2:
                self.state = 2196
                self.method_declaration()
                pass

            elif la_ == 3:
                self.state = 2197
                self.property_declaration()
                pass

            elif la_ == 4:
                self.state = 2198
                self.indexer_declaration()
                pass

            elif la_ == 5:
                self.state = 2199
                self.operator_declaration()
                pass

            elif la_ == 6:
                self.state = 2200
                self.field_declaration()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Constant_declaratorsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def constant_declarator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Constant_declaratorContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Constant_declaratorContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.COMMA)
            else:
                return self.getToken(CSharpParser.COMMA, i)

        def getRuleIndex(self):
            return CSharpParser.RULE_constant_declarators

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstant_declarators" ):
                listener.enterConstant_declarators(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstant_declarators" ):
                listener.exitConstant_declarators(self)




    def constant_declarators(self):

        localctx = CSharpParser.Constant_declaratorsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 354, self.RULE_constant_declarators)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2203
            self.constant_declarator()
            self.state = 2208
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==137:
                self.state = 2204
                self.match(CSharpParser.COMMA)
                self.state = 2205
                self.constant_declarator()
                self.state = 2210
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Constant_declaratorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(CSharpParser.IdentifierContext,0)


        def ASSIGNMENT(self):
            return self.getToken(CSharpParser.ASSIGNMENT, 0)

        def expression(self):
            return self.getTypedRuleContext(CSharpParser.ExpressionContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_constant_declarator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstant_declarator" ):
                listener.enterConstant_declarator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstant_declarator" ):
                listener.exitConstant_declarator(self)




    def constant_declarator(self):

        localctx = CSharpParser.Constant_declaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 356, self.RULE_constant_declarator)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2211
            self.identifier()
            self.state = 2212
            self.match(CSharpParser.ASSIGNMENT)
            self.state = 2213
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Variable_declaratorsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def variable_declarator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Variable_declaratorContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Variable_declaratorContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.COMMA)
            else:
                return self.getToken(CSharpParser.COMMA, i)

        def getRuleIndex(self):
            return CSharpParser.RULE_variable_declarators

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariable_declarators" ):
                listener.enterVariable_declarators(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariable_declarators" ):
                listener.exitVariable_declarators(self)




    def variable_declarators(self):

        localctx = CSharpParser.Variable_declaratorsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 358, self.RULE_variable_declarators)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2215
            self.variable_declarator()
            self.state = 2220
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==137:
                self.state = 2216
                self.match(CSharpParser.COMMA)
                self.state = 2217
                self.variable_declarator()
                self.state = 2222
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Variable_declaratorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(CSharpParser.IdentifierContext,0)


        def ASSIGNMENT(self):
            return self.getToken(CSharpParser.ASSIGNMENT, 0)

        def variable_initializer(self):
            return self.getTypedRuleContext(CSharpParser.Variable_initializerContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_variable_declarator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariable_declarator" ):
                listener.enterVariable_declarator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariable_declarator" ):
                listener.exitVariable_declarator(self)




    def variable_declarator(self):

        localctx = CSharpParser.Variable_declaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 360, self.RULE_variable_declarator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2223
            self.identifier()
            self.state = 2226
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==150:
                self.state = 2224
                self.match(CSharpParser.ASSIGNMENT)
                self.state = 2225
                self.variable_initializer()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Variable_initializerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(CSharpParser.ExpressionContext,0)


        def array_initializer(self):
            return self.getTypedRuleContext(CSharpParser.Array_initializerContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_variable_initializer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariable_initializer" ):
                listener.enterVariable_initializer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariable_initializer" ):
                listener.exitVariable_initializer(self)




    def variable_initializer(self):

        localctx = CSharpParser.Variable_initializerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 362, self.RULE_variable_initializer)
        try:
            self.state = 2230
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [10, 12, 13, 15, 16, 17, 18, 19, 21, 22, 25, 26, 30, 31, 32, 33, 35, 36, 39, 43, 46, 49, 50, 52, 56, 60, 62, 63, 65, 66, 68, 70, 71, 72, 75, 79, 84, 85, 87, 89, 90, 91, 92, 93, 94, 95, 98, 100, 102, 103, 104, 105, 106, 108, 110, 114, 115, 117, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 134, 140, 141, 142, 145, 147, 148, 149, 156, 157, 176]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2228
                self.expression()
                pass
            elif token in [130]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2229
                self.array_initializer()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Return_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def type_(self):
            return self.getTypedRuleContext(CSharpParser.Type_Context,0)


        def VOID(self):
            return self.getToken(CSharpParser.VOID, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_return_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReturn_type" ):
                listener.enterReturn_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReturn_type" ):
                listener.exitReturn_type(self)




    def return_type(self):

        localctx = CSharpParser.Return_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 364, self.RULE_return_type)
        try:
            self.state = 2234
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,239,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2232
                self.type_()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2233
                self.match(CSharpParser.VOID)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Member_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def namespace_or_type_name(self):
            return self.getTypedRuleContext(CSharpParser.Namespace_or_type_nameContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_member_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMember_name" ):
                listener.enterMember_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMember_name" ):
                listener.exitMember_name(self)




    def member_name(self):

        localctx = CSharpParser.Member_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 366, self.RULE_member_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2236
            self.namespace_or_type_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Method_bodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def block(self):
            return self.getTypedRuleContext(CSharpParser.BlockContext,0)


        def SEMICOLON(self):
            return self.getToken(CSharpParser.SEMICOLON, 0)

        def right_arrow(self):
            return self.getTypedRuleContext(CSharpParser.Right_arrowContext,0)


        def expression(self):
            return self.getTypedRuleContext(CSharpParser.ExpressionContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_method_body

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMethod_body" ):
                listener.enterMethod_body(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMethod_body" ):
                listener.exitMethod_body(self)




    def method_body(self):

        localctx = CSharpParser.Method_bodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 368, self.RULE_method_body)
        try:
            self.state = 2244
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [130]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2238
                self.block()
                pass
            elif token in [139]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2239
                self.match(CSharpParser.SEMICOLON)
                pass
            elif token in [150]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2240
                self.right_arrow()
                self.state = 2241
                self.expression()
                self.state = 2242
                self.match(CSharpParser.SEMICOLON)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Formal_parameter_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def parameter_array(self):
            return self.getTypedRuleContext(CSharpParser.Parameter_arrayContext,0)


        def fixed_parameters(self):
            return self.getTypedRuleContext(CSharpParser.Fixed_parametersContext,0)


        def COMMA(self):
            return self.getToken(CSharpParser.COMMA, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_formal_parameter_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFormal_parameter_list" ):
                listener.enterFormal_parameter_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFormal_parameter_list" ):
                listener.exitFormal_parameter_list(self)




    def formal_parameter_list(self):

        localctx = CSharpParser.Formal_parameter_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 370, self.RULE_formal_parameter_list)
        self._la = 0 # Token type
        try:
            self.state = 2252
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,242,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2246
                self.parameter_array()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2247
                self.fixed_parameters()
                self.state = 2250
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==137:
                    self.state = 2248
                    self.match(CSharpParser.COMMA)
                    self.state = 2249
                    self.parameter_array()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Fixed_parametersContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fixed_parameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Fixed_parameterContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Fixed_parameterContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.COMMA)
            else:
                return self.getToken(CSharpParser.COMMA, i)

        def getRuleIndex(self):
            return CSharpParser.RULE_fixed_parameters

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFixed_parameters" ):
                listener.enterFixed_parameters(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFixed_parameters" ):
                listener.exitFixed_parameters(self)




    def fixed_parameters(self):

        localctx = CSharpParser.Fixed_parametersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 372, self.RULE_fixed_parameters)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2254
            self.fixed_parameter()
            self.state = 2259
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,243,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2255
                    self.match(CSharpParser.COMMA)
                    self.state = 2256
                    self.fixed_parameter() 
                self.state = 2261
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,243,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Fixed_parameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def arg_declaration(self):
            return self.getTypedRuleContext(CSharpParser.Arg_declarationContext,0)


        def attributes(self):
            return self.getTypedRuleContext(CSharpParser.AttributesContext,0)


        def parameter_modifier(self):
            return self.getTypedRuleContext(CSharpParser.Parameter_modifierContext,0)


        def ARGLIST(self):
            return self.getToken(CSharpParser.ARGLIST, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_fixed_parameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFixed_parameter" ):
                listener.enterFixed_parameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFixed_parameter" ):
                listener.exitFixed_parameter(self)




    def fixed_parameter(self):

        localctx = CSharpParser.Fixed_parameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 374, self.RULE_fixed_parameter)
        self._la = 0 # Token type
        try:
            self.state = 2270
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,246,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2263
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==132:
                    self.state = 2262
                    self.attributes()


                self.state = 2266
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 55)) & ~0x3f) == 0 and ((1 << (_la - 55)) & 8796631990273) != 0):
                    self.state = 2265
                    self.parameter_modifier()


                self.state = 2268
                self.arg_declaration()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2269
                self.match(CSharpParser.ARGLIST)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Parameter_modifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REF(self):
            return self.getToken(CSharpParser.REF, 0)

        def OUT(self):
            return self.getToken(CSharpParser.OUT, 0)

        def IN(self):
            return self.getToken(CSharpParser.IN, 0)

        def THIS(self):
            return self.getToken(CSharpParser.THIS, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_parameter_modifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParameter_modifier" ):
                listener.enterParameter_modifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParameter_modifier" ):
                listener.exitParameter_modifier(self)




    def parameter_modifier(self):

        localctx = CSharpParser.Parameter_modifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 376, self.RULE_parameter_modifier)
        try:
            self.state = 2280
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,247,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2272
                self.match(CSharpParser.REF)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2273
                self.match(CSharpParser.OUT)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2274
                self.match(CSharpParser.IN)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2275
                self.match(CSharpParser.REF)
                self.state = 2276
                self.match(CSharpParser.THIS)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 2277
                self.match(CSharpParser.IN)
                self.state = 2278
                self.match(CSharpParser.THIS)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 2279
                self.match(CSharpParser.THIS)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Parameter_arrayContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PARAMS(self):
            return self.getToken(CSharpParser.PARAMS, 0)

        def array_type(self):
            return self.getTypedRuleContext(CSharpParser.Array_typeContext,0)


        def identifier(self):
            return self.getTypedRuleContext(CSharpParser.IdentifierContext,0)


        def attributes(self):
            return self.getTypedRuleContext(CSharpParser.AttributesContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_parameter_array

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParameter_array" ):
                listener.enterParameter_array(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParameter_array" ):
                listener.exitParameter_array(self)




    def parameter_array(self):

        localctx = CSharpParser.Parameter_arrayContext(self, self._ctx, self.state)
        self.enterRule(localctx, 378, self.RULE_parameter_array)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2283
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==132:
                self.state = 2282
                self.attributes()


            self.state = 2285
            self.match(CSharpParser.PARAMS)
            self.state = 2286
            self.array_type()
            self.state = 2287
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Accessor_declarationsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.attrs = None # AttributesContext
            self.mods = None # Accessor_modifierContext

        def GET(self):
            return self.getToken(CSharpParser.GET, 0)

        def accessor_body(self):
            return self.getTypedRuleContext(CSharpParser.Accessor_bodyContext,0)


        def SET(self):
            return self.getToken(CSharpParser.SET, 0)

        def INIT(self):
            return self.getToken(CSharpParser.INIT, 0)

        def attributes(self):
            return self.getTypedRuleContext(CSharpParser.AttributesContext,0)


        def accessor_modifier(self):
            return self.getTypedRuleContext(CSharpParser.Accessor_modifierContext,0)


        def set_accessor_declaration(self):
            return self.getTypedRuleContext(CSharpParser.Set_accessor_declarationContext,0)


        def get_accessor_declaration(self):
            return self.getTypedRuleContext(CSharpParser.Get_accessor_declarationContext,0)


        def init_accessor_declaration(self):
            return self.getTypedRuleContext(CSharpParser.Init_accessor_declarationContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_accessor_declarations

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAccessor_declarations" ):
                listener.enterAccessor_declarations(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAccessor_declarations" ):
                listener.exitAccessor_declarations(self)




    def accessor_declarations(self):

        localctx = CSharpParser.Accessor_declarationsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 380, self.RULE_accessor_declarations)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2290
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==132:
                self.state = 2289
                localctx.attrs = self.attributes()


            self.state = 2293
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 58)) & ~0x3f) == 0 and ((1 << (_la - 58)) & 46137345) != 0):
                self.state = 2292
                localctx.mods = self.accessor_modifier()


            self.state = 2315
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,255,self._ctx)
            if la_ == 1:
                self.state = 2295
                self.match(CSharpParser.GET)
                self.state = 2296
                self.accessor_body()
                self.state = 2298
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==58 or ((((_la - 80)) & ~0x3f) == 0 and ((1 << (_la - 80)) & 4503599627371531) != 0):
                    self.state = 2297
                    self.set_accessor_declaration()


                pass

            elif la_ == 2:
                self.state = 2300
                self.match(CSharpParser.SET)
                self.state = 2301
                self.accessor_body()
                self.state = 2303
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==50 or _la==58 or ((((_la - 80)) & ~0x3f) == 0 and ((1 << (_la - 80)) & 4503599627370507) != 0):
                    self.state = 2302
                    self.get_accessor_declaration()


                pass

            elif la_ == 3:
                self.state = 2305
                self.match(CSharpParser.GET)
                self.state = 2306
                self.accessor_body()
                self.state = 2308
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==59 or _la==132:
                    self.state = 2307
                    self.init_accessor_declaration()


                pass

            elif la_ == 4:
                self.state = 2310
                self.match(CSharpParser.INIT)
                self.state = 2311
                self.accessor_body()
                self.state = 2313
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==50 or _la==58 or ((((_la - 80)) & ~0x3f) == 0 and ((1 << (_la - 80)) & 4503599627370507) != 0):
                    self.state = 2312
                    self.get_accessor_declaration()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Init_accessor_declarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INIT(self):
            return self.getToken(CSharpParser.INIT, 0)

        def accessor_body(self):
            return self.getTypedRuleContext(CSharpParser.Accessor_bodyContext,0)


        def attributes(self):
            return self.getTypedRuleContext(CSharpParser.AttributesContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_init_accessor_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInit_accessor_declaration" ):
                listener.enterInit_accessor_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInit_accessor_declaration" ):
                listener.exitInit_accessor_declaration(self)




    def init_accessor_declaration(self):

        localctx = CSharpParser.Init_accessor_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 382, self.RULE_init_accessor_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2318
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==132:
                self.state = 2317
                self.attributes()


            self.state = 2320
            self.match(CSharpParser.INIT)
            self.state = 2321
            self.accessor_body()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Get_accessor_declarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GET(self):
            return self.getToken(CSharpParser.GET, 0)

        def accessor_body(self):
            return self.getTypedRuleContext(CSharpParser.Accessor_bodyContext,0)


        def attributes(self):
            return self.getTypedRuleContext(CSharpParser.AttributesContext,0)


        def accessor_modifier(self):
            return self.getTypedRuleContext(CSharpParser.Accessor_modifierContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_get_accessor_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGet_accessor_declaration" ):
                listener.enterGet_accessor_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGet_accessor_declaration" ):
                listener.exitGet_accessor_declaration(self)




    def get_accessor_declaration(self):

        localctx = CSharpParser.Get_accessor_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 384, self.RULE_get_accessor_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2324
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==132:
                self.state = 2323
                self.attributes()


            self.state = 2327
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 58)) & ~0x3f) == 0 and ((1 << (_la - 58)) & 46137345) != 0):
                self.state = 2326
                self.accessor_modifier()


            self.state = 2329
            self.match(CSharpParser.GET)
            self.state = 2330
            self.accessor_body()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Set_accessor_declarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SET(self):
            return self.getToken(CSharpParser.SET, 0)

        def accessor_body(self):
            return self.getTypedRuleContext(CSharpParser.Accessor_bodyContext,0)


        def attributes(self):
            return self.getTypedRuleContext(CSharpParser.AttributesContext,0)


        def accessor_modifier(self):
            return self.getTypedRuleContext(CSharpParser.Accessor_modifierContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_set_accessor_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSet_accessor_declaration" ):
                listener.enterSet_accessor_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSet_accessor_declaration" ):
                listener.exitSet_accessor_declaration(self)




    def set_accessor_declaration(self):

        localctx = CSharpParser.Set_accessor_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 386, self.RULE_set_accessor_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2333
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==132:
                self.state = 2332
                self.attributes()


            self.state = 2336
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 58)) & ~0x3f) == 0 and ((1 << (_la - 58)) & 46137345) != 0):
                self.state = 2335
                self.accessor_modifier()


            self.state = 2338
            self.match(CSharpParser.SET)
            self.state = 2339
            self.accessor_body()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Accessor_modifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PROTECTED(self):
            return self.getToken(CSharpParser.PROTECTED, 0)

        def INTERNAL(self):
            return self.getToken(CSharpParser.INTERNAL, 0)

        def PRIVATE(self):
            return self.getToken(CSharpParser.PRIVATE, 0)

        def READONLY(self):
            return self.getToken(CSharpParser.READONLY, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_accessor_modifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAccessor_modifier" ):
                listener.enterAccessor_modifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAccessor_modifier" ):
                listener.exitAccessor_modifier(self)




    def accessor_modifier(self):

        localctx = CSharpParser.Accessor_modifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 388, self.RULE_accessor_modifier)
        try:
            self.state = 2353
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,261,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2341
                self.match(CSharpParser.PROTECTED)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2342
                self.match(CSharpParser.INTERNAL)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2343
                self.match(CSharpParser.PRIVATE)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2344
                self.match(CSharpParser.PROTECTED)
                self.state = 2345
                self.match(CSharpParser.INTERNAL)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 2346
                self.match(CSharpParser.INTERNAL)
                self.state = 2347
                self.match(CSharpParser.PROTECTED)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 2348
                self.match(CSharpParser.PROTECTED)
                self.state = 2349
                self.match(CSharpParser.PRIVATE)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 2350
                self.match(CSharpParser.PRIVATE)
                self.state = 2351
                self.match(CSharpParser.PROTECTED)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 2352
                self.match(CSharpParser.READONLY)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Accessor_bodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def block(self):
            return self.getTypedRuleContext(CSharpParser.BlockContext,0)


        def right_arrow(self):
            return self.getTypedRuleContext(CSharpParser.Right_arrowContext,0)


        def expression(self):
            return self.getTypedRuleContext(CSharpParser.ExpressionContext,0)


        def SEMICOLON(self):
            return self.getToken(CSharpParser.SEMICOLON, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_accessor_body

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAccessor_body" ):
                listener.enterAccessor_body(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAccessor_body" ):
                listener.exitAccessor_body(self)




    def accessor_body(self):

        localctx = CSharpParser.Accessor_bodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 390, self.RULE_accessor_body)
        try:
            self.state = 2361
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [130]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2355
                self.block()
                pass
            elif token in [150]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2356
                self.right_arrow()
                self.state = 2357
                self.expression()
                self.state = 2358
                self.match(CSharpParser.SEMICOLON)
                pass
            elif token in [139]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2360
                self.match(CSharpParser.SEMICOLON)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Event_accessor_declarationsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ADD(self):
            return self.getToken(CSharpParser.ADD, 0)

        def block(self):
            return self.getTypedRuleContext(CSharpParser.BlockContext,0)


        def remove_accessor_declaration(self):
            return self.getTypedRuleContext(CSharpParser.Remove_accessor_declarationContext,0)


        def REMOVE(self):
            return self.getToken(CSharpParser.REMOVE, 0)

        def add_accessor_declaration(self):
            return self.getTypedRuleContext(CSharpParser.Add_accessor_declarationContext,0)


        def attributes(self):
            return self.getTypedRuleContext(CSharpParser.AttributesContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_event_accessor_declarations

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEvent_accessor_declarations" ):
                listener.enterEvent_accessor_declarations(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEvent_accessor_declarations" ):
                listener.exitEvent_accessor_declarations(self)




    def event_accessor_declarations(self):

        localctx = CSharpParser.Event_accessor_declarationsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 392, self.RULE_event_accessor_declarations)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2364
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==132:
                self.state = 2363
                self.attributes()


            self.state = 2374
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [10]:
                self.state = 2366
                self.match(CSharpParser.ADD)
                self.state = 2367
                self.block()
                self.state = 2368
                self.remove_accessor_declaration()
                pass
            elif token in [85]:
                self.state = 2370
                self.match(CSharpParser.REMOVE)
                self.state = 2371
                self.block()
                self.state = 2372
                self.add_accessor_declaration()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Add_accessor_declarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ADD(self):
            return self.getToken(CSharpParser.ADD, 0)

        def block(self):
            return self.getTypedRuleContext(CSharpParser.BlockContext,0)


        def attributes(self):
            return self.getTypedRuleContext(CSharpParser.AttributesContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_add_accessor_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAdd_accessor_declaration" ):
                listener.enterAdd_accessor_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAdd_accessor_declaration" ):
                listener.exitAdd_accessor_declaration(self)




    def add_accessor_declaration(self):

        localctx = CSharpParser.Add_accessor_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 394, self.RULE_add_accessor_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2377
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==132:
                self.state = 2376
                self.attributes()


            self.state = 2379
            self.match(CSharpParser.ADD)
            self.state = 2380
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Remove_accessor_declarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REMOVE(self):
            return self.getToken(CSharpParser.REMOVE, 0)

        def block(self):
            return self.getTypedRuleContext(CSharpParser.BlockContext,0)


        def attributes(self):
            return self.getTypedRuleContext(CSharpParser.AttributesContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_remove_accessor_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRemove_accessor_declaration" ):
                listener.enterRemove_accessor_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRemove_accessor_declaration" ):
                listener.exitRemove_accessor_declaration(self)




    def remove_accessor_declaration(self):

        localctx = CSharpParser.Remove_accessor_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 396, self.RULE_remove_accessor_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2383
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==132:
                self.state = 2382
                self.attributes()


            self.state = 2385
            self.match(CSharpParser.REMOVE)
            self.state = 2386
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Overloadable_operatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PLUS(self):
            return self.getToken(CSharpParser.PLUS, 0)

        def MINUS(self):
            return self.getToken(CSharpParser.MINUS, 0)

        def BANG(self):
            return self.getToken(CSharpParser.BANG, 0)

        def TILDE(self):
            return self.getToken(CSharpParser.TILDE, 0)

        def OP_INC(self):
            return self.getToken(CSharpParser.OP_INC, 0)

        def OP_DEC(self):
            return self.getToken(CSharpParser.OP_DEC, 0)

        def TRUE(self):
            return self.getToken(CSharpParser.TRUE, 0)

        def FALSE(self):
            return self.getToken(CSharpParser.FALSE, 0)

        def STAR(self):
            return self.getToken(CSharpParser.STAR, 0)

        def DIV(self):
            return self.getToken(CSharpParser.DIV, 0)

        def PERCENT(self):
            return self.getToken(CSharpParser.PERCENT, 0)

        def AMP(self):
            return self.getToken(CSharpParser.AMP, 0)

        def BITWISE_OR(self):
            return self.getToken(CSharpParser.BITWISE_OR, 0)

        def CARET(self):
            return self.getToken(CSharpParser.CARET, 0)

        def OP_LEFT_SHIFT(self):
            return self.getToken(CSharpParser.OP_LEFT_SHIFT, 0)

        def right_shift(self):
            return self.getTypedRuleContext(CSharpParser.Right_shiftContext,0)


        def OP_EQ(self):
            return self.getToken(CSharpParser.OP_EQ, 0)

        def OP_NE(self):
            return self.getToken(CSharpParser.OP_NE, 0)

        def GT(self):
            return self.getToken(CSharpParser.GT, 0)

        def LT(self):
            return self.getToken(CSharpParser.LT, 0)

        def OP_GE(self):
            return self.getToken(CSharpParser.OP_GE, 0)

        def OP_LE(self):
            return self.getToken(CSharpParser.OP_LE, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_overloadable_operator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOverloadable_operator" ):
                listener.enterOverloadable_operator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOverloadable_operator" ):
                listener.exitOverloadable_operator(self)




    def overloadable_operator(self):

        localctx = CSharpParser.Overloadable_operatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 398, self.RULE_overloadable_operator)
        try:
            self.state = 2410
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,267,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2388
                self.match(CSharpParser.PLUS)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2389
                self.match(CSharpParser.MINUS)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2390
                self.match(CSharpParser.BANG)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2391
                self.match(CSharpParser.TILDE)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 2392
                self.match(CSharpParser.OP_INC)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 2393
                self.match(CSharpParser.OP_DEC)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 2394
                self.match(CSharpParser.TRUE)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 2395
                self.match(CSharpParser.FALSE)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 2396
                self.match(CSharpParser.STAR)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 2397
                self.match(CSharpParser.DIV)
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 2398
                self.match(CSharpParser.PERCENT)
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 2399
                self.match(CSharpParser.AMP)
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 2400
                self.match(CSharpParser.BITWISE_OR)
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 2401
                self.match(CSharpParser.CARET)
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 2402
                self.match(CSharpParser.OP_LEFT_SHIFT)
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 2403
                self.right_shift()
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 2404
                self.match(CSharpParser.OP_EQ)
                pass

            elif la_ == 18:
                self.enterOuterAlt(localctx, 18)
                self.state = 2405
                self.match(CSharpParser.OP_NE)
                pass

            elif la_ == 19:
                self.enterOuterAlt(localctx, 19)
                self.state = 2406
                self.match(CSharpParser.GT)
                pass

            elif la_ == 20:
                self.enterOuterAlt(localctx, 20)
                self.state = 2407
                self.match(CSharpParser.LT)
                pass

            elif la_ == 21:
                self.enterOuterAlt(localctx, 21)
                self.state = 2408
                self.match(CSharpParser.OP_GE)
                pass

            elif la_ == 22:
                self.enterOuterAlt(localctx, 22)
                self.state = 2409
                self.match(CSharpParser.OP_LE)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Conversion_operator_declaratorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPERATOR(self):
            return self.getToken(CSharpParser.OPERATOR, 0)

        def type_(self):
            return self.getTypedRuleContext(CSharpParser.Type_Context,0)


        def OPEN_PARENS(self):
            return self.getToken(CSharpParser.OPEN_PARENS, 0)

        def arg_declaration(self):
            return self.getTypedRuleContext(CSharpParser.Arg_declarationContext,0)


        def CLOSE_PARENS(self):
            return self.getToken(CSharpParser.CLOSE_PARENS, 0)

        def IMPLICIT(self):
            return self.getToken(CSharpParser.IMPLICIT, 0)

        def EXPLICIT(self):
            return self.getToken(CSharpParser.EXPLICIT, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_conversion_operator_declarator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConversion_operator_declarator" ):
                listener.enterConversion_operator_declarator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConversion_operator_declarator" ):
                listener.exitConversion_operator_declarator(self)




    def conversion_operator_declarator(self):

        localctx = CSharpParser.Conversion_operator_declaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 400, self.RULE_conversion_operator_declarator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2412
            _la = self._input.LA(1)
            if not(_la==41 or _la==54):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 2413
            self.match(CSharpParser.OPERATOR)
            self.state = 2414
            self.type_()
            self.state = 2415
            self.match(CSharpParser.OPEN_PARENS)
            self.state = 2416
            self.arg_declaration()
            self.state = 2417
            self.match(CSharpParser.CLOSE_PARENS)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Constructor_initializerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COLON(self):
            return self.getToken(CSharpParser.COLON, 0)

        def OPEN_PARENS(self):
            return self.getToken(CSharpParser.OPEN_PARENS, 0)

        def CLOSE_PARENS(self):
            return self.getToken(CSharpParser.CLOSE_PARENS, 0)

        def BASE(self):
            return self.getToken(CSharpParser.BASE, 0)

        def THIS(self):
            return self.getToken(CSharpParser.THIS, 0)

        def argument_list(self):
            return self.getTypedRuleContext(CSharpParser.Argument_listContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_constructor_initializer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstructor_initializer" ):
                listener.enterConstructor_initializer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstructor_initializer" ):
                listener.exitConstructor_initializer(self)




    def constructor_initializer(self):

        localctx = CSharpParser.Constructor_initializerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 402, self.RULE_constructor_initializer)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2419
            self.match(CSharpParser.COLON)
            self.state = 2420
            _la = self._input.LA(1)
            if not(_la==18 or _la==98):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 2421
            self.match(CSharpParser.OPEN_PARENS)
            self.state = 2423
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & -3344405839389674496) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & -11632925374657301) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & 140737892923425) != 0):
                self.state = 2422
                self.argument_list()


            self.state = 2425
            self.match(CSharpParser.CLOSE_PARENS)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def block(self):
            return self.getTypedRuleContext(CSharpParser.BlockContext,0)


        def SEMICOLON(self):
            return self.getToken(CSharpParser.SEMICOLON, 0)

        def right_arrow(self):
            return self.getTypedRuleContext(CSharpParser.Right_arrowContext,0)


        def expression(self):
            return self.getTypedRuleContext(CSharpParser.ExpressionContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_body

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBody" ):
                listener.enterBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBody" ):
                listener.exitBody(self)




    def body(self):

        localctx = CSharpParser.BodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 404, self.RULE_body)
        try:
            self.state = 2433
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [130]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2427
                self.block()
                pass
            elif token in [139]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2428
                self.match(CSharpParser.SEMICOLON)
                pass
            elif token in [150]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2429
                self.right_arrow()
                self.state = 2430
                self.expression()
                self.state = 2431
                self.match(CSharpParser.SEMICOLON)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Struct_interfacesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COLON(self):
            return self.getToken(CSharpParser.COLON, 0)

        def interface_type_list(self):
            return self.getTypedRuleContext(CSharpParser.Interface_type_listContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_struct_interfaces

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStruct_interfaces" ):
                listener.enterStruct_interfaces(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStruct_interfaces" ):
                listener.exitStruct_interfaces(self)




    def struct_interfaces(self):

        localctx = CSharpParser.Struct_interfacesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 406, self.RULE_struct_interfaces)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2435
            self.match(CSharpParser.COLON)
            self.state = 2436
            self.interface_type_list()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Struct_bodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_BRACE(self):
            return self.getToken(CSharpParser.OPEN_BRACE, 0)

        def CLOSE_BRACE(self):
            return self.getToken(CSharpParser.CLOSE_BRACE, 0)

        def struct_member_declaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Struct_member_declarationContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Struct_member_declarationContext,i)


        def SEMICOLON(self):
            return self.getToken(CSharpParser.SEMICOLON, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_struct_body

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStruct_body" ):
                listener.enterStruct_body(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStruct_body" ):
                listener.exitStruct_body(self)




    def struct_body(self):

        localctx = CSharpParser.Struct_bodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 408, self.RULE_struct_body)
        self._la = 0 # Token type
        try:
            self.state = 2447
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [130]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2438
                self.match(CSharpParser.OPEN_BRACE)
                self.state = 2442
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while ((((_la - 9)) & ~0x3f) == 0 and ((1 << (_la - 9)) & -3788746421982906917) != 0) or ((((_la - 75)) & ~0x3f) == 0 and ((1 << (_la - 75)) & 720608907209865205) != 0):
                    self.state = 2439
                    self.struct_member_declaration()
                    self.state = 2444
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2445
                self.match(CSharpParser.CLOSE_BRACE)
                pass
            elif token in [139]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2446
                self.match(CSharpParser.SEMICOLON)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Struct_member_declarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def common_member_declaration(self):
            return self.getTypedRuleContext(CSharpParser.Common_member_declarationContext,0)


        def FIXED(self):
            return self.getToken(CSharpParser.FIXED, 0)

        def type_(self):
            return self.getTypedRuleContext(CSharpParser.Type_Context,0)


        def SEMICOLON(self):
            return self.getToken(CSharpParser.SEMICOLON, 0)

        def attributes(self):
            return self.getTypedRuleContext(CSharpParser.AttributesContext,0)


        def all_member_modifiers(self):
            return self.getTypedRuleContext(CSharpParser.All_member_modifiersContext,0)


        def fixed_size_buffer_declarator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Fixed_size_buffer_declaratorContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Fixed_size_buffer_declaratorContext,i)


        def getRuleIndex(self):
            return CSharpParser.RULE_struct_member_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStruct_member_declaration" ):
                listener.enterStruct_member_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStruct_member_declaration" ):
                listener.exitStruct_member_declaration(self)




    def struct_member_declaration(self):

        localctx = CSharpParser.Struct_member_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 410, self.RULE_struct_member_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2450
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,272,self._ctx)
            if la_ == 1:
                self.state = 2449
                self.attributes()


            self.state = 2453
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,273,self._ctx)
            if la_ == 1:
                self.state = 2452
                self.all_member_modifiers()


            self.state = 2465
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [9, 10, 12, 13, 15, 16, 17, 19, 21, 22, 25, 27, 28, 30, 32, 33, 35, 36, 38, 39, 40, 41, 42, 46, 49, 50, 52, 54, 56, 57, 58, 60, 62, 63, 65, 66, 68, 71, 72, 75, 77, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 91, 94, 95, 96, 103, 104, 106, 107, 108, 110, 111, 112, 114, 115, 117, 118, 119, 132, 134]:
                self.state = 2455
                self.common_member_declaration()
                pass
            elif token in [45]:
                self.state = 2456
                self.match(CSharpParser.FIXED)
                self.state = 2457
                self.type_()
                self.state = 2459 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 2458
                    self.fixed_size_buffer_declarator()
                    self.state = 2461 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & -3452571437265341440) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & 12122115721929281) != 0)):
                        break

                self.state = 2463
                self.match(CSharpParser.SEMICOLON)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Array_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def base_type(self):
            return self.getTypedRuleContext(CSharpParser.Base_typeContext,0)


        def rank_specifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Rank_specifierContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Rank_specifierContext,i)


        def STAR(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.STAR)
            else:
                return self.getToken(CSharpParser.STAR, i)

        def INTERR(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.INTERR)
            else:
                return self.getToken(CSharpParser.INTERR, i)

        def getRuleIndex(self):
            return CSharpParser.RULE_array_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArray_type" ):
                listener.enterArray_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArray_type" ):
                listener.exitArray_type(self)




    def array_type(self):

        localctx = CSharpParser.Array_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 412, self.RULE_array_type)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2467
            self.base_type()
            self.state = 2475 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 2471
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==142 or _la==153:
                    self.state = 2468
                    _la = self._input.LA(1)
                    if not(_la==142 or _la==153):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 2473
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2474
                self.rank_specifier()
                self.state = 2477 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (((((_la - 132)) & ~0x3f) == 0 and ((1 << (_la - 132)) & 2098177) != 0)):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Rank_specifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_BRACKET(self):
            return self.getToken(CSharpParser.OPEN_BRACKET, 0)

        def CLOSE_BRACKET(self):
            return self.getToken(CSharpParser.CLOSE_BRACKET, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.COMMA)
            else:
                return self.getToken(CSharpParser.COMMA, i)

        def getRuleIndex(self):
            return CSharpParser.RULE_rank_specifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRank_specifier" ):
                listener.enterRank_specifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRank_specifier" ):
                listener.exitRank_specifier(self)




    def rank_specifier(self):

        localctx = CSharpParser.Rank_specifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 414, self.RULE_rank_specifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2479
            self.match(CSharpParser.OPEN_BRACKET)
            self.state = 2483
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==137:
                self.state = 2480
                self.match(CSharpParser.COMMA)
                self.state = 2485
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2486
            self.match(CSharpParser.CLOSE_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Array_initializerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_BRACE(self):
            return self.getToken(CSharpParser.OPEN_BRACE, 0)

        def CLOSE_BRACE(self):
            return self.getToken(CSharpParser.CLOSE_BRACE, 0)

        def variable_initializer(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Variable_initializerContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Variable_initializerContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.COMMA)
            else:
                return self.getToken(CSharpParser.COMMA, i)

        def getRuleIndex(self):
            return CSharpParser.RULE_array_initializer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArray_initializer" ):
                listener.enterArray_initializer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArray_initializer" ):
                listener.exitArray_initializer(self)




    def array_initializer(self):

        localctx = CSharpParser.Array_initializerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 416, self.RULE_array_initializer)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2488
            self.match(CSharpParser.OPEN_BRACE)
            self.state = 2500
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & -3380434636408638464) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & -11773662863014677) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & 140737892923427) != 0):
                self.state = 2489
                self.variable_initializer()
                self.state = 2494
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,279,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2490
                        self.match(CSharpParser.COMMA)
                        self.state = 2491
                        self.variable_initializer() 
                    self.state = 2496
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,279,self._ctx)

                self.state = 2498
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==137:
                    self.state = 2497
                    self.match(CSharpParser.COMMA)




            self.state = 2502
            self.match(CSharpParser.CLOSE_BRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Variant_type_parameter_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LT(self):
            return self.getToken(CSharpParser.LT, 0)

        def variant_type_parameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Variant_type_parameterContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Variant_type_parameterContext,i)


        def GT(self):
            return self.getToken(CSharpParser.GT, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.COMMA)
            else:
                return self.getToken(CSharpParser.COMMA, i)

        def getRuleIndex(self):
            return CSharpParser.RULE_variant_type_parameter_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariant_type_parameter_list" ):
                listener.enterVariant_type_parameter_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariant_type_parameter_list" ):
                listener.exitVariant_type_parameter_list(self)




    def variant_type_parameter_list(self):

        localctx = CSharpParser.Variant_type_parameter_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 418, self.RULE_variant_type_parameter_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2504
            self.match(CSharpParser.LT)
            self.state = 2505
            self.variant_type_parameter()
            self.state = 2510
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==137:
                self.state = 2506
                self.match(CSharpParser.COMMA)
                self.state = 2507
                self.variant_type_parameter()
                self.state = 2512
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2513
            self.match(CSharpParser.GT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Variant_type_parameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(CSharpParser.IdentifierContext,0)


        def attributes(self):
            return self.getTypedRuleContext(CSharpParser.AttributesContext,0)


        def variance_annotation(self):
            return self.getTypedRuleContext(CSharpParser.Variance_annotationContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_variant_type_parameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariant_type_parameter" ):
                listener.enterVariant_type_parameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariant_type_parameter" ):
                listener.exitVariant_type_parameter(self)




    def variant_type_parameter(self):

        localctx = CSharpParser.Variant_type_parameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 420, self.RULE_variant_type_parameter)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2516
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==132:
                self.state = 2515
                self.attributes()


            self.state = 2519
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==55 or _la==76:
                self.state = 2518
                self.variance_annotation()


            self.state = 2521
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Variance_annotationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IN(self):
            return self.getToken(CSharpParser.IN, 0)

        def OUT(self):
            return self.getToken(CSharpParser.OUT, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_variance_annotation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariance_annotation" ):
                listener.enterVariance_annotation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariance_annotation" ):
                listener.exitVariance_annotation(self)




    def variance_annotation(self):

        localctx = CSharpParser.Variance_annotationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 422, self.RULE_variance_annotation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2523
            _la = self._input.LA(1)
            if not(_la==55 or _la==76):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Interface_baseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COLON(self):
            return self.getToken(CSharpParser.COLON, 0)

        def interface_type_list(self):
            return self.getTypedRuleContext(CSharpParser.Interface_type_listContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_interface_base

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterface_base" ):
                listener.enterInterface_base(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterface_base" ):
                listener.exitInterface_base(self)




    def interface_base(self):

        localctx = CSharpParser.Interface_baseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 424, self.RULE_interface_base)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2525
            self.match(CSharpParser.COLON)
            self.state = 2526
            self.interface_type_list()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Interface_bodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_BRACE(self):
            return self.getToken(CSharpParser.OPEN_BRACE, 0)

        def CLOSE_BRACE(self):
            return self.getToken(CSharpParser.CLOSE_BRACE, 0)

        def interface_member_declaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Interface_member_declarationContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Interface_member_declarationContext,i)


        def getRuleIndex(self):
            return CSharpParser.RULE_interface_body

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterface_body" ):
                listener.enterInterface_body(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterface_body" ):
                listener.exitInterface_body(self)




    def interface_body(self):

        localctx = CSharpParser.Interface_bodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 426, self.RULE_interface_body)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2528
            self.match(CSharpParser.OPEN_BRACE)
            self.state = 2532
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 10)) & ~0x3f) == 0 and ((1 << (_la - 10)) & 7328558980141193965) != 0) or ((((_la - 75)) & ~0x3f) == 0 and ((1 << (_la - 75)) & 720599767516829457) != 0):
                self.state = 2529
                self.interface_member_declaration()
                self.state = 2534
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2535
            self.match(CSharpParser.CLOSE_BRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Interface_member_declarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def type_(self):
            return self.getTypedRuleContext(CSharpParser.Type_Context,0)


        def VOID(self):
            return self.getToken(CSharpParser.VOID, 0)

        def identifier(self):
            return self.getTypedRuleContext(CSharpParser.IdentifierContext,0)


        def OPEN_PARENS(self):
            return self.getToken(CSharpParser.OPEN_PARENS, 0)

        def CLOSE_PARENS(self):
            return self.getToken(CSharpParser.CLOSE_PARENS, 0)

        def SEMICOLON(self):
            return self.getToken(CSharpParser.SEMICOLON, 0)

        def EVENT(self):
            return self.getToken(CSharpParser.EVENT, 0)

        def attributes(self):
            return self.getTypedRuleContext(CSharpParser.AttributesContext,0)


        def NEW(self):
            return self.getToken(CSharpParser.NEW, 0)

        def OPEN_BRACE(self):
            return self.getToken(CSharpParser.OPEN_BRACE, 0)

        def interface_accessors(self):
            return self.getTypedRuleContext(CSharpParser.Interface_accessorsContext,0)


        def CLOSE_BRACE(self):
            return self.getToken(CSharpParser.CLOSE_BRACE, 0)

        def THIS(self):
            return self.getToken(CSharpParser.THIS, 0)

        def OPEN_BRACKET(self):
            return self.getToken(CSharpParser.OPEN_BRACKET, 0)

        def formal_parameter_list(self):
            return self.getTypedRuleContext(CSharpParser.Formal_parameter_listContext,0)


        def CLOSE_BRACKET(self):
            return self.getToken(CSharpParser.CLOSE_BRACKET, 0)

        def UNSAFE(self):
            return self.getToken(CSharpParser.UNSAFE, 0)

        def REF(self):
            return self.getToken(CSharpParser.REF, 0)

        def READONLY(self):
            return self.getToken(CSharpParser.READONLY, 0)

        def type_parameter_list(self):
            return self.getTypedRuleContext(CSharpParser.Type_parameter_listContext,0)


        def type_parameter_constraints_clauses(self):
            return self.getTypedRuleContext(CSharpParser.Type_parameter_constraints_clausesContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_interface_member_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterface_member_declaration" ):
                listener.enterInterface_member_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterface_member_declaration" ):
                listener.exitInterface_member_declaration(self)




    def interface_member_declaration(self):

        localctx = CSharpParser.Interface_member_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 428, self.RULE_interface_member_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2538
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==132:
                self.state = 2537
                self.attributes()


            self.state = 2541
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==68:
                self.state = 2540
                self.match(CSharpParser.NEW)


            self.state = 2606
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,298,self._ctx)
            if la_ == 1:
                self.state = 2544
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==107:
                    self.state = 2543
                    self.match(CSharpParser.UNSAFE)


                self.state = 2551
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,289,self._ctx)
                if la_ == 1:
                    self.state = 2546
                    self.match(CSharpParser.REF)

                elif la_ == 2:
                    self.state = 2547
                    self.match(CSharpParser.REF)
                    self.state = 2548
                    self.match(CSharpParser.READONLY)

                elif la_ == 3:
                    self.state = 2549
                    self.match(CSharpParser.READONLY)
                    self.state = 2550
                    self.match(CSharpParser.REF)


                self.state = 2553
                self.type_()
                self.state = 2581
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,293,self._ctx)
                if la_ == 1:
                    self.state = 2554
                    self.identifier()
                    self.state = 2556
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==151:
                        self.state = 2555
                        self.type_parameter_list()


                    self.state = 2558
                    self.match(CSharpParser.OPEN_PARENS)
                    self.state = 2560
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if ((((_la - 10)) & ~0x3f) == 0 and ((1 << (_la - 10)) & 7040363787287829229) != 0) or ((((_la - 75)) & ~0x3f) == 0 and ((1 << (_la - 75)) & 720599763230250523) != 0):
                        self.state = 2559
                        self.formal_parameter_list()


                    self.state = 2562
                    self.match(CSharpParser.CLOSE_PARENS)
                    self.state = 2564
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==115:
                        self.state = 2563
                        self.type_parameter_constraints_clauses()


                    self.state = 2566
                    self.match(CSharpParser.SEMICOLON)
                    pass

                elif la_ == 2:
                    self.state = 2568
                    self.identifier()
                    self.state = 2569
                    self.match(CSharpParser.OPEN_BRACE)
                    self.state = 2570
                    self.interface_accessors()
                    self.state = 2571
                    self.match(CSharpParser.CLOSE_BRACE)
                    pass

                elif la_ == 3:
                    self.state = 2573
                    self.match(CSharpParser.THIS)
                    self.state = 2574
                    self.match(CSharpParser.OPEN_BRACKET)
                    self.state = 2575
                    self.formal_parameter_list()
                    self.state = 2576
                    self.match(CSharpParser.CLOSE_BRACKET)
                    self.state = 2577
                    self.match(CSharpParser.OPEN_BRACE)
                    self.state = 2578
                    self.interface_accessors()
                    self.state = 2579
                    self.match(CSharpParser.CLOSE_BRACE)
                    pass


                pass

            elif la_ == 2:
                self.state = 2584
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==107:
                    self.state = 2583
                    self.match(CSharpParser.UNSAFE)


                self.state = 2586
                self.match(CSharpParser.VOID)
                self.state = 2587
                self.identifier()
                self.state = 2589
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==151:
                    self.state = 2588
                    self.type_parameter_list()


                self.state = 2591
                self.match(CSharpParser.OPEN_PARENS)
                self.state = 2593
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 10)) & ~0x3f) == 0 and ((1 << (_la - 10)) & 7040363787287829229) != 0) or ((((_la - 75)) & ~0x3f) == 0 and ((1 << (_la - 75)) & 720599763230250523) != 0):
                    self.state = 2592
                    self.formal_parameter_list()


                self.state = 2595
                self.match(CSharpParser.CLOSE_PARENS)
                self.state = 2597
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==115:
                    self.state = 2596
                    self.type_parameter_constraints_clauses()


                self.state = 2599
                self.match(CSharpParser.SEMICOLON)
                pass

            elif la_ == 3:
                self.state = 2601
                self.match(CSharpParser.EVENT)
                self.state = 2602
                self.type_()
                self.state = 2603
                self.identifier()
                self.state = 2604
                self.match(CSharpParser.SEMICOLON)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Interface_accessorsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GET(self):
            return self.getToken(CSharpParser.GET, 0)

        def SEMICOLON(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.SEMICOLON)
            else:
                return self.getToken(CSharpParser.SEMICOLON, i)

        def SET(self):
            return self.getToken(CSharpParser.SET, 0)

        def attributes(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.AttributesContext)
            else:
                return self.getTypedRuleContext(CSharpParser.AttributesContext,i)


        def getRuleIndex(self):
            return CSharpParser.RULE_interface_accessors

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterface_accessors" ):
                listener.enterInterface_accessors(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterface_accessors" ):
                listener.exitInterface_accessors(self)




    def interface_accessors(self):

        localctx = CSharpParser.Interface_accessorsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 430, self.RULE_interface_accessors)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2609
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==132:
                self.state = 2608
                self.attributes()


            self.state = 2629
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [50]:
                self.state = 2611
                self.match(CSharpParser.GET)
                self.state = 2612
                self.match(CSharpParser.SEMICOLON)
                self.state = 2618
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==90 or _la==132:
                    self.state = 2614
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==132:
                        self.state = 2613
                        self.attributes()


                    self.state = 2616
                    self.match(CSharpParser.SET)
                    self.state = 2617
                    self.match(CSharpParser.SEMICOLON)


                pass
            elif token in [90]:
                self.state = 2620
                self.match(CSharpParser.SET)
                self.state = 2621
                self.match(CSharpParser.SEMICOLON)
                self.state = 2627
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==50 or _la==132:
                    self.state = 2623
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==132:
                        self.state = 2622
                        self.attributes()


                    self.state = 2625
                    self.match(CSharpParser.GET)
                    self.state = 2626
                    self.match(CSharpParser.SEMICOLON)


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Enum_baseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COLON(self):
            return self.getToken(CSharpParser.COLON, 0)

        def type_(self):
            return self.getTypedRuleContext(CSharpParser.Type_Context,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_enum_base

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnum_base" ):
                listener.enterEnum_base(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnum_base" ):
                listener.exitEnum_base(self)




    def enum_base(self):

        localctx = CSharpParser.Enum_baseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 432, self.RULE_enum_base)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2631
            self.match(CSharpParser.COLON)
            self.state = 2632
            self.type_()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Enum_bodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_BRACE(self):
            return self.getToken(CSharpParser.OPEN_BRACE, 0)

        def CLOSE_BRACE(self):
            return self.getToken(CSharpParser.CLOSE_BRACE, 0)

        def enum_member_declaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Enum_member_declarationContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Enum_member_declarationContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.COMMA)
            else:
                return self.getToken(CSharpParser.COMMA, i)

        def getRuleIndex(self):
            return CSharpParser.RULE_enum_body

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnum_body" ):
                listener.enterEnum_body(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnum_body" ):
                listener.exitEnum_body(self)




    def enum_body(self):

        localctx = CSharpParser.Enum_bodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 434, self.RULE_enum_body)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2634
            self.match(CSharpParser.OPEN_BRACE)
            self.state = 2646
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 10)) & ~0x3f) == 0 and ((1 << (_la - 10)) & 4698386359180593389) != 0) or ((((_la - 75)) & ~0x3f) == 0 and ((1 << (_la - 75)) & 144138864083125265) != 0):
                self.state = 2635
                self.enum_member_declaration()
                self.state = 2640
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,305,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2636
                        self.match(CSharpParser.COMMA)
                        self.state = 2637
                        self.enum_member_declaration() 
                    self.state = 2642
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,305,self._ctx)

                self.state = 2644
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==137:
                    self.state = 2643
                    self.match(CSharpParser.COMMA)




            self.state = 2648
            self.match(CSharpParser.CLOSE_BRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Enum_member_declarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(CSharpParser.IdentifierContext,0)


        def attributes(self):
            return self.getTypedRuleContext(CSharpParser.AttributesContext,0)


        def ASSIGNMENT(self):
            return self.getToken(CSharpParser.ASSIGNMENT, 0)

        def expression(self):
            return self.getTypedRuleContext(CSharpParser.ExpressionContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_enum_member_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnum_member_declaration" ):
                listener.enterEnum_member_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnum_member_declaration" ):
                listener.exitEnum_member_declaration(self)




    def enum_member_declaration(self):

        localctx = CSharpParser.Enum_member_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 436, self.RULE_enum_member_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2651
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==132:
                self.state = 2650
                self.attributes()


            self.state = 2653
            self.identifier()
            self.state = 2656
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==150:
                self.state = 2654
                self.match(CSharpParser.ASSIGNMENT)
                self.state = 2655
                self.expression()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Global_attribute_sectionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_BRACKET(self):
            return self.getToken(CSharpParser.OPEN_BRACKET, 0)

        def global_attribute_target(self):
            return self.getTypedRuleContext(CSharpParser.Global_attribute_targetContext,0)


        def COLON(self):
            return self.getToken(CSharpParser.COLON, 0)

        def attribute_list(self):
            return self.getTypedRuleContext(CSharpParser.Attribute_listContext,0)


        def CLOSE_BRACKET(self):
            return self.getToken(CSharpParser.CLOSE_BRACKET, 0)

        def COMMA(self):
            return self.getToken(CSharpParser.COMMA, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_global_attribute_section

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGlobal_attribute_section" ):
                listener.enterGlobal_attribute_section(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGlobal_attribute_section" ):
                listener.exitGlobal_attribute_section(self)




    def global_attribute_section(self):

        localctx = CSharpParser.Global_attribute_sectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 438, self.RULE_global_attribute_section)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2658
            self.match(CSharpParser.OPEN_BRACKET)
            self.state = 2659
            self.global_attribute_target()
            self.state = 2660
            self.match(CSharpParser.COLON)
            self.state = 2661
            self.attribute_list()
            self.state = 2663
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==137:
                self.state = 2662
                self.match(CSharpParser.COMMA)


            self.state = 2665
            self.match(CSharpParser.CLOSE_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Global_attribute_targetContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def keyword(self):
            return self.getTypedRuleContext(CSharpParser.KeywordContext,0)


        def identifier(self):
            return self.getTypedRuleContext(CSharpParser.IdentifierContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_global_attribute_target

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGlobal_attribute_target" ):
                listener.enterGlobal_attribute_target(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGlobal_attribute_target" ):
                listener.exitGlobal_attribute_target(self)




    def global_attribute_target(self):

        localctx = CSharpParser.Global_attribute_targetContext(self, self._ctx, self.state)
        self.enterRule(localctx, 440, self.RULE_global_attribute_target)
        try:
            self.state = 2669
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,311,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2667
                self.keyword()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2668
                self.identifier()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AttributesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def attribute_section(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Attribute_sectionContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Attribute_sectionContext,i)


        def getRuleIndex(self):
            return CSharpParser.RULE_attributes

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttributes" ):
                listener.enterAttributes(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttributes" ):
                listener.exitAttributes(self)




    def attributes(self):

        localctx = CSharpParser.AttributesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 442, self.RULE_attributes)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2672 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 2671
                    self.attribute_section()

                else:
                    raise NoViableAltException(self)
                self.state = 2674 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,312,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Attribute_sectionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_BRACKET(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.OPEN_BRACKET)
            else:
                return self.getToken(CSharpParser.OPEN_BRACKET, i)

        def attribute_list(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Attribute_listContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Attribute_listContext,i)


        def CLOSE_BRACKET(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.CLOSE_BRACKET)
            else:
                return self.getToken(CSharpParser.CLOSE_BRACKET, i)

        def attribute_target(self):
            return self.getTypedRuleContext(CSharpParser.Attribute_targetContext,0)


        def COLON(self):
            return self.getToken(CSharpParser.COLON, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.COMMA)
            else:
                return self.getToken(CSharpParser.COMMA, i)

        def getRuleIndex(self):
            return CSharpParser.RULE_attribute_section

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttribute_section" ):
                listener.enterAttribute_section(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttribute_section" ):
                listener.exitAttribute_section(self)




    def attribute_section(self):

        localctx = CSharpParser.Attribute_sectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 444, self.RULE_attribute_section)
        self._la = 0 # Token type
        try:
            self.state = 2701
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,316,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2676
                self.match(CSharpParser.OPEN_BRACKET)
                self.state = 2680
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,313,self._ctx)
                if la_ == 1:
                    self.state = 2677
                    self.attribute_target()
                    self.state = 2678
                    self.match(CSharpParser.COLON)


                self.state = 2682
                self.attribute_list()
                self.state = 2684
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==137:
                    self.state = 2683
                    self.match(CSharpParser.COMMA)


                self.state = 2686
                self.match(CSharpParser.CLOSE_BRACKET)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2688
                self.match(CSharpParser.OPEN_BRACKET)
                self.state = 2689
                self.attribute_list()
                self.state = 2690
                self.match(CSharpParser.CLOSE_BRACKET)
                self.state = 2698
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==137:
                    self.state = 2691
                    self.match(CSharpParser.COMMA)
                    self.state = 2692
                    self.match(CSharpParser.OPEN_BRACKET)
                    self.state = 2693
                    self.attribute_list()
                    self.state = 2694
                    self.match(CSharpParser.CLOSE_BRACKET)
                    self.state = 2700
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Attribute_targetContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def keyword(self):
            return self.getTypedRuleContext(CSharpParser.KeywordContext,0)


        def identifier(self):
            return self.getTypedRuleContext(CSharpParser.IdentifierContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_attribute_target

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttribute_target" ):
                listener.enterAttribute_target(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttribute_target" ):
                listener.exitAttribute_target(self)




    def attribute_target(self):

        localctx = CSharpParser.Attribute_targetContext(self, self._ctx, self.state)
        self.enterRule(localctx, 446, self.RULE_attribute_target)
        try:
            self.state = 2705
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,317,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2703
                self.keyword()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2704
                self.identifier()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Attribute_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def attribute(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.AttributeContext)
            else:
                return self.getTypedRuleContext(CSharpParser.AttributeContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.COMMA)
            else:
                return self.getToken(CSharpParser.COMMA, i)

        def getRuleIndex(self):
            return CSharpParser.RULE_attribute_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttribute_list" ):
                listener.enterAttribute_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttribute_list" ):
                listener.exitAttribute_list(self)




    def attribute_list(self):

        localctx = CSharpParser.Attribute_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 448, self.RULE_attribute_list)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2707
            self.attribute()
            self.state = 2712
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,318,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2708
                    self.match(CSharpParser.COMMA)
                    self.state = 2709
                    self.attribute() 
                self.state = 2714
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,318,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AttributeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def namespace_or_type_name(self):
            return self.getTypedRuleContext(CSharpParser.Namespace_or_type_nameContext,0)


        def OPEN_PARENS(self):
            return self.getToken(CSharpParser.OPEN_PARENS, 0)

        def CLOSE_PARENS(self):
            return self.getToken(CSharpParser.CLOSE_PARENS, 0)

        def attribute_argument(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Attribute_argumentContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Attribute_argumentContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.COMMA)
            else:
                return self.getToken(CSharpParser.COMMA, i)

        def getRuleIndex(self):
            return CSharpParser.RULE_attribute

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttribute" ):
                listener.enterAttribute(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttribute" ):
                listener.exitAttribute(self)




    def attribute(self):

        localctx = CSharpParser.AttributeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 450, self.RULE_attribute)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2715
            self.namespace_or_type_name()
            self.state = 2728
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==134:
                self.state = 2716
                self.match(CSharpParser.OPEN_PARENS)
                self.state = 2725
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -3380434636408638464) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & -11773662863014677) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & 140737892923425) != 0):
                    self.state = 2717
                    self.attribute_argument()
                    self.state = 2722
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==137:
                        self.state = 2718
                        self.match(CSharpParser.COMMA)
                        self.state = 2719
                        self.attribute_argument()
                        self.state = 2724
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 2727
                self.match(CSharpParser.CLOSE_PARENS)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Attribute_argumentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(CSharpParser.ExpressionContext,0)


        def identifier(self):
            return self.getTypedRuleContext(CSharpParser.IdentifierContext,0)


        def COLON(self):
            return self.getToken(CSharpParser.COLON, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_attribute_argument

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttribute_argument" ):
                listener.enterAttribute_argument(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttribute_argument" ):
                listener.exitAttribute_argument(self)




    def attribute_argument(self):

        localctx = CSharpParser.Attribute_argumentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 452, self.RULE_attribute_argument)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2733
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,322,self._ctx)
            if la_ == 1:
                self.state = 2730
                self.identifier()
                self.state = 2731
                self.match(CSharpParser.COLON)


            self.state = 2735
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pointer_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STAR(self):
            return self.getToken(CSharpParser.STAR, 0)

        def simple_type(self):
            return self.getTypedRuleContext(CSharpParser.Simple_typeContext,0)


        def class_type(self):
            return self.getTypedRuleContext(CSharpParser.Class_typeContext,0)


        def rank_specifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Rank_specifierContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Rank_specifierContext,i)


        def INTERR(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.INTERR)
            else:
                return self.getToken(CSharpParser.INTERR, i)

        def VOID(self):
            return self.getToken(CSharpParser.VOID, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_pointer_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPointer_type" ):
                listener.enterPointer_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPointer_type" ):
                listener.exitPointer_type(self)




    def pointer_type(self):

        localctx = CSharpParser.Pointer_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 454, self.RULE_pointer_type)
        self._la = 0 # Token type
        try:
            self.state = 2752
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [10, 12, 13, 15, 16, 17, 19, 21, 22, 25, 30, 33, 35, 36, 39, 46, 49, 50, 52, 56, 60, 62, 63, 65, 66, 71, 72, 75, 79, 85, 87, 89, 90, 91, 95, 103, 104, 106, 108, 110, 114, 115, 117, 119]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2739
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [19, 22, 25, 30, 35, 46, 56, 65, 87, 91, 103, 104, 108]:
                    self.state = 2737
                    self.simple_type()
                    pass
                elif token in [10, 12, 13, 15, 16, 17, 21, 33, 36, 39, 49, 50, 52, 60, 62, 63, 66, 71, 72, 75, 79, 85, 89, 90, 95, 106, 110, 114, 115, 117, 119]:
                    self.state = 2738
                    self.class_type()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 2745
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==132 or _la==153:
                    self.state = 2743
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [132]:
                        self.state = 2741
                        self.rank_specifier()
                        pass
                    elif token in [153]:
                        self.state = 2742
                        self.match(CSharpParser.INTERR)
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 2747
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2748
                self.match(CSharpParser.STAR)
                pass
            elif token in [112]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2750
                self.match(CSharpParser.VOID)
                self.state = 2751
                self.match(CSharpParser.STAR)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Fixed_pointer_declaratorsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fixed_pointer_declarator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Fixed_pointer_declaratorContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Fixed_pointer_declaratorContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.COMMA)
            else:
                return self.getToken(CSharpParser.COMMA, i)

        def getRuleIndex(self):
            return CSharpParser.RULE_fixed_pointer_declarators

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFixed_pointer_declarators" ):
                listener.enterFixed_pointer_declarators(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFixed_pointer_declarators" ):
                listener.exitFixed_pointer_declarators(self)




    def fixed_pointer_declarators(self):

        localctx = CSharpParser.Fixed_pointer_declaratorsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 456, self.RULE_fixed_pointer_declarators)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2754
            self.fixed_pointer_declarator()
            self.state = 2759
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==137:
                self.state = 2755
                self.match(CSharpParser.COMMA)
                self.state = 2756
                self.fixed_pointer_declarator()
                self.state = 2761
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Fixed_pointer_declaratorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(CSharpParser.IdentifierContext,0)


        def ASSIGNMENT(self):
            return self.getToken(CSharpParser.ASSIGNMENT, 0)

        def fixed_pointer_initializer(self):
            return self.getTypedRuleContext(CSharpParser.Fixed_pointer_initializerContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_fixed_pointer_declarator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFixed_pointer_declarator" ):
                listener.enterFixed_pointer_declarator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFixed_pointer_declarator" ):
                listener.exitFixed_pointer_declarator(self)




    def fixed_pointer_declarator(self):

        localctx = CSharpParser.Fixed_pointer_declaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 458, self.RULE_fixed_pointer_declarator)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2762
            self.identifier()
            self.state = 2763
            self.match(CSharpParser.ASSIGNMENT)
            self.state = 2764
            self.fixed_pointer_initializer()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Fixed_pointer_initializerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(CSharpParser.ExpressionContext,0)


        def AMP(self):
            return self.getToken(CSharpParser.AMP, 0)

        def stackalloc_initializer(self):
            return self.getTypedRuleContext(CSharpParser.Stackalloc_initializerContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_fixed_pointer_initializer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFixed_pointer_initializer" ):
                listener.enterFixed_pointer_initializer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFixed_pointer_initializer" ):
                listener.exitFixed_pointer_initializer(self)




    def fixed_pointer_initializer(self):

        localctx = CSharpParser.Fixed_pointer_initializerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 460, self.RULE_fixed_pointer_initializer)
        try:
            self.state = 2771
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [10, 12, 13, 15, 16, 17, 18, 19, 21, 22, 25, 26, 30, 31, 32, 33, 35, 36, 39, 43, 46, 49, 50, 52, 56, 60, 62, 63, 65, 66, 68, 70, 71, 72, 75, 79, 84, 85, 87, 89, 90, 91, 92, 93, 94, 95, 98, 100, 102, 103, 104, 105, 106, 108, 110, 114, 115, 117, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 134, 140, 141, 142, 145, 147, 148, 149, 156, 157, 176]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2767
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,328,self._ctx)
                if la_ == 1:
                    self.state = 2766
                    self.match(CSharpParser.AMP)


                self.state = 2769
                self.expression()
                pass
            elif token in [130]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2770
                self.stackalloc_initializer()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Fixed_size_buffer_declaratorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(CSharpParser.IdentifierContext,0)


        def OPEN_BRACKET(self):
            return self.getToken(CSharpParser.OPEN_BRACKET, 0)

        def expression(self):
            return self.getTypedRuleContext(CSharpParser.ExpressionContext,0)


        def CLOSE_BRACKET(self):
            return self.getToken(CSharpParser.CLOSE_BRACKET, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_fixed_size_buffer_declarator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFixed_size_buffer_declarator" ):
                listener.enterFixed_size_buffer_declarator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFixed_size_buffer_declarator" ):
                listener.exitFixed_size_buffer_declarator(self)




    def fixed_size_buffer_declarator(self):

        localctx = CSharpParser.Fixed_size_buffer_declaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 462, self.RULE_fixed_size_buffer_declarator)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2773
            self.identifier()
            self.state = 2774
            self.match(CSharpParser.OPEN_BRACKET)
            self.state = 2775
            self.expression()
            self.state = 2776
            self.match(CSharpParser.CLOSE_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Right_arrowContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.first = None # Token
            self.second = None # Token

        def ASSIGNMENT(self):
            return self.getToken(CSharpParser.ASSIGNMENT, 0)

        def GT(self):
            return self.getToken(CSharpParser.GT, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_right_arrow

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRight_arrow" ):
                listener.enterRight_arrow(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRight_arrow" ):
                listener.exitRight_arrow(self)




    def right_arrow(self):

        localctx = CSharpParser.Right_arrowContext(self, self._ctx, self.state)
        self.enterRule(localctx, 464, self.RULE_right_arrow)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2778
            localctx.first = self.match(CSharpParser.ASSIGNMENT)
            self.state = 2779
            localctx.second = self.match(CSharpParser.GT)
            self.state = 2780
            if not (0 if localctx.first is None else localctx.first.tokenIndex) + 1 == (0 if localctx.second is None else localctx.second.tokenIndex):
                from antlr4.error.Errors import FailedPredicateException
                raise FailedPredicateException(self, "$first.index + 1 == $second.index")
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Right_shiftContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.first = None # Token
            self.second = None # Token

        def GT(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.GT)
            else:
                return self.getToken(CSharpParser.GT, i)

        def getRuleIndex(self):
            return CSharpParser.RULE_right_shift

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRight_shift" ):
                listener.enterRight_shift(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRight_shift" ):
                listener.exitRight_shift(self)




    def right_shift(self):

        localctx = CSharpParser.Right_shiftContext(self, self._ctx, self.state)
        self.enterRule(localctx, 466, self.RULE_right_shift)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2782
            localctx.first = self.match(CSharpParser.GT)
            self.state = 2783
            localctx.second = self.match(CSharpParser.GT)
            self.state = 2784
            if not (0 if localctx.first is None else localctx.first.tokenIndex) + 1 == (0 if localctx.second is None else localctx.second.tokenIndex):
                from antlr4.error.Errors import FailedPredicateException
                raise FailedPredicateException(self, "$first.index + 1 == $second.index")
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Right_shift_assignmentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.first = None # Token
            self.second = None # Token

        def GT(self):
            return self.getToken(CSharpParser.GT, 0)

        def OP_GE(self):
            return self.getToken(CSharpParser.OP_GE, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_right_shift_assignment

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRight_shift_assignment" ):
                listener.enterRight_shift_assignment(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRight_shift_assignment" ):
                listener.exitRight_shift_assignment(self)




    def right_shift_assignment(self):

        localctx = CSharpParser.Right_shift_assignmentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 468, self.RULE_right_shift_assignment)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2786
            localctx.first = self.match(CSharpParser.GT)
            self.state = 2787
            localctx.second = self.match(CSharpParser.OP_GE)
            self.state = 2788
            if not (0 if localctx.first is None else localctx.first.tokenIndex) + 1 == (0 if localctx.second is None else localctx.second.tokenIndex):
                from antlr4.error.Errors import FailedPredicateException
                raise FailedPredicateException(self, "$first.index + 1 == $second.index")
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def boolean_literal(self):
            return self.getTypedRuleContext(CSharpParser.Boolean_literalContext,0)


        def string_literal(self):
            return self.getTypedRuleContext(CSharpParser.String_literalContext,0)


        def INTEGER_LITERAL(self):
            return self.getToken(CSharpParser.INTEGER_LITERAL, 0)

        def HEX_INTEGER_LITERAL(self):
            return self.getToken(CSharpParser.HEX_INTEGER_LITERAL, 0)

        def BIN_INTEGER_LITERAL(self):
            return self.getToken(CSharpParser.BIN_INTEGER_LITERAL, 0)

        def REAL_LITERAL(self):
            return self.getToken(CSharpParser.REAL_LITERAL, 0)

        def CHARACTER_LITERAL(self):
            return self.getToken(CSharpParser.CHARACTER_LITERAL, 0)

        def NULL_(self):
            return self.getToken(CSharpParser.NULL_, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLiteral" ):
                listener.enterLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLiteral" ):
                listener.exitLiteral(self)




    def literal(self):

        localctx = CSharpParser.LiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 470, self.RULE_literal)
        try:
            self.state = 2798
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [43, 100]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2790
                self.boolean_literal()
                pass
            elif token in [126, 127, 128, 129]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2791
                self.string_literal()
                pass
            elif token in [121]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2792
                self.match(CSharpParser.INTEGER_LITERAL)
                pass
            elif token in [122]:
                self.enterOuterAlt(localctx, 4)
                self.state = 2793
                self.match(CSharpParser.HEX_INTEGER_LITERAL)
                pass
            elif token in [123]:
                self.enterOuterAlt(localctx, 5)
                self.state = 2794
                self.match(CSharpParser.BIN_INTEGER_LITERAL)
                pass
            elif token in [124]:
                self.enterOuterAlt(localctx, 6)
                self.state = 2795
                self.match(CSharpParser.REAL_LITERAL)
                pass
            elif token in [125]:
                self.enterOuterAlt(localctx, 7)
                self.state = 2796
                self.match(CSharpParser.CHARACTER_LITERAL)
                pass
            elif token in [70]:
                self.enterOuterAlt(localctx, 8)
                self.state = 2797
                self.match(CSharpParser.NULL_)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Boolean_literalContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TRUE(self):
            return self.getToken(CSharpParser.TRUE, 0)

        def FALSE(self):
            return self.getToken(CSharpParser.FALSE, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_boolean_literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBoolean_literal" ):
                listener.enterBoolean_literal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBoolean_literal" ):
                listener.exitBoolean_literal(self)




    def boolean_literal(self):

        localctx = CSharpParser.Boolean_literalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 472, self.RULE_boolean_literal)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2800
            _la = self._input.LA(1)
            if not(_la==43 or _la==100):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class String_literalContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def interpolated_regular_string(self):
            return self.getTypedRuleContext(CSharpParser.Interpolated_regular_stringContext,0)


        def interpolated_verbatium_string(self):
            return self.getTypedRuleContext(CSharpParser.Interpolated_verbatium_stringContext,0)


        def REGULAR_STRING(self):
            return self.getToken(CSharpParser.REGULAR_STRING, 0)

        def VERBATIUM_STRING(self):
            return self.getToken(CSharpParser.VERBATIUM_STRING, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_string_literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterString_literal" ):
                listener.enterString_literal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitString_literal" ):
                listener.exitString_literal(self)




    def string_literal(self):

        localctx = CSharpParser.String_literalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 474, self.RULE_string_literal)
        try:
            self.state = 2806
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [128]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2802
                self.interpolated_regular_string()
                pass
            elif token in [129]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2803
                self.interpolated_verbatium_string()
                pass
            elif token in [126]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2804
                self.match(CSharpParser.REGULAR_STRING)
                pass
            elif token in [127]:
                self.enterOuterAlt(localctx, 4)
                self.state = 2805
                self.match(CSharpParser.VERBATIUM_STRING)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Interpolated_regular_stringContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INTERPOLATED_REGULAR_STRING_START(self):
            return self.getToken(CSharpParser.INTERPOLATED_REGULAR_STRING_START, 0)

        def DOUBLE_QUOTE_INSIDE(self):
            return self.getToken(CSharpParser.DOUBLE_QUOTE_INSIDE, 0)

        def interpolated_regular_string_part(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Interpolated_regular_string_partContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Interpolated_regular_string_partContext,i)


        def getRuleIndex(self):
            return CSharpParser.RULE_interpolated_regular_string

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterpolated_regular_string" ):
                listener.enterInterpolated_regular_string(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterpolated_regular_string" ):
                listener.exitInterpolated_regular_string(self)




    def interpolated_regular_string(self):

        localctx = CSharpParser.Interpolated_regular_stringContext(self, self._ctx, self.state)
        self.enterRule(localctx, 476, self.RULE_interpolated_regular_string)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2808
            self.match(CSharpParser.INTERPOLATED_REGULAR_STRING_START)
            self.state = 2812
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,332,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2809
                    self.interpolated_regular_string_part() 
                self.state = 2814
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,332,self._ctx)

            self.state = 2815
            self.match(CSharpParser.DOUBLE_QUOTE_INSIDE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Interpolated_verbatium_stringContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INTERPOLATED_VERBATIUM_STRING_START(self):
            return self.getToken(CSharpParser.INTERPOLATED_VERBATIUM_STRING_START, 0)

        def DOUBLE_QUOTE_INSIDE(self):
            return self.getToken(CSharpParser.DOUBLE_QUOTE_INSIDE, 0)

        def interpolated_verbatium_string_part(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Interpolated_verbatium_string_partContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Interpolated_verbatium_string_partContext,i)


        def getRuleIndex(self):
            return CSharpParser.RULE_interpolated_verbatium_string

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterpolated_verbatium_string" ):
                listener.enterInterpolated_verbatium_string(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterpolated_verbatium_string" ):
                listener.exitInterpolated_verbatium_string(self)




    def interpolated_verbatium_string(self):

        localctx = CSharpParser.Interpolated_verbatium_stringContext(self, self._ctx, self.state)
        self.enterRule(localctx, 478, self.RULE_interpolated_verbatium_string)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2817
            self.match(CSharpParser.INTERPOLATED_VERBATIUM_STRING_START)
            self.state = 2821
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 130)) & ~0x3f) == 0 and ((1 << (_la - 130)) & 10273836649938945) != 0):
                self.state = 2818
                self.interpolated_verbatium_string_part()
                self.state = 2823
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2824
            self.match(CSharpParser.DOUBLE_QUOTE_INSIDE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Interpolated_regular_string_partContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def interpolated_string_expression(self):
            return self.getTypedRuleContext(CSharpParser.Interpolated_string_expressionContext,0)


        def DOUBLE_CURLY_INSIDE(self):
            return self.getToken(CSharpParser.DOUBLE_CURLY_INSIDE, 0)

        def REGULAR_CHAR_INSIDE(self):
            return self.getToken(CSharpParser.REGULAR_CHAR_INSIDE, 0)

        def REGULAR_STRING_INSIDE(self):
            return self.getToken(CSharpParser.REGULAR_STRING_INSIDE, 0)

        def OPEN_BRACE_INSIDE(self):
            return self.getToken(CSharpParser.OPEN_BRACE_INSIDE, 0)

        def CLOSE_BRACE_INSIDE(self):
            return self.getToken(CSharpParser.CLOSE_BRACE_INSIDE, 0)

        def DOUBLE_QUOTE_INSIDE(self):
            return self.getToken(CSharpParser.DOUBLE_QUOTE_INSIDE, 0)

        def VERBATIUM_INSIDE_STRING(self):
            return self.getToken(CSharpParser.VERBATIUM_INSIDE_STRING, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_interpolated_regular_string_part

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterpolated_regular_string_part" ):
                listener.enterInterpolated_regular_string_part(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterpolated_regular_string_part" ):
                listener.exitInterpolated_regular_string_part(self)




    def interpolated_regular_string_part(self):

        localctx = CSharpParser.Interpolated_regular_string_partContext(self, self._ctx, self.state)
        self.enterRule(localctx, 480, self.RULE_interpolated_regular_string_part)
        try:
            self.state = 2834
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [130]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2826
                self.interpolated_string_expression()
                pass
            elif token in [177]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2827
                self.match(CSharpParser.DOUBLE_CURLY_INSIDE)
                pass
            elif token in [179]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2828
                self.match(CSharpParser.REGULAR_CHAR_INSIDE)
                pass
            elif token in [182]:
                self.enterOuterAlt(localctx, 4)
                self.state = 2829
                self.match(CSharpParser.REGULAR_STRING_INSIDE)
                pass
            elif token in [178]:
                self.enterOuterAlt(localctx, 5)
                self.state = 2830
                self.match(CSharpParser.OPEN_BRACE_INSIDE)
                pass
            elif token in [184]:
                self.enterOuterAlt(localctx, 6)
                self.state = 2831
                self.match(CSharpParser.CLOSE_BRACE_INSIDE)
                pass
            elif token in [181]:
                self.enterOuterAlt(localctx, 7)
                self.state = 2832
                self.match(CSharpParser.DOUBLE_QUOTE_INSIDE)
                pass
            elif token in [183]:
                self.enterOuterAlt(localctx, 8)
                self.state = 2833
                self.match(CSharpParser.VERBATIUM_INSIDE_STRING)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Interpolated_verbatium_string_partContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def interpolated_string_expression(self):
            return self.getTypedRuleContext(CSharpParser.Interpolated_string_expressionContext,0)


        def DOUBLE_CURLY_INSIDE(self):
            return self.getToken(CSharpParser.DOUBLE_CURLY_INSIDE, 0)

        def VERBATIUM_DOUBLE_QUOTE_INSIDE(self):
            return self.getToken(CSharpParser.VERBATIUM_DOUBLE_QUOTE_INSIDE, 0)

        def VERBATIUM_INSIDE_STRING(self):
            return self.getToken(CSharpParser.VERBATIUM_INSIDE_STRING, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_interpolated_verbatium_string_part

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterpolated_verbatium_string_part" ):
                listener.enterInterpolated_verbatium_string_part(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterpolated_verbatium_string_part" ):
                listener.exitInterpolated_verbatium_string_part(self)




    def interpolated_verbatium_string_part(self):

        localctx = CSharpParser.Interpolated_verbatium_string_partContext(self, self._ctx, self.state)
        self.enterRule(localctx, 482, self.RULE_interpolated_verbatium_string_part)
        try:
            self.state = 2840
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [130]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2836
                self.interpolated_string_expression()
                pass
            elif token in [177]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2837
                self.match(CSharpParser.DOUBLE_CURLY_INSIDE)
                pass
            elif token in [180]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2838
                self.match(CSharpParser.VERBATIUM_DOUBLE_QUOTE_INSIDE)
                pass
            elif token in [183]:
                self.enterOuterAlt(localctx, 4)
                self.state = 2839
                self.match(CSharpParser.VERBATIUM_INSIDE_STRING)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Interpolated_string_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_BRACE(self):
            return self.getToken(CSharpParser.OPEN_BRACE, 0)

        def expression(self):
            return self.getTypedRuleContext(CSharpParser.ExpressionContext,0)


        def CLOSE_BRACE(self):
            return self.getToken(CSharpParser.CLOSE_BRACE, 0)

        def COMMA(self):
            return self.getToken(CSharpParser.COMMA, 0)

        def interpolation_minimum_width(self):
            return self.getTypedRuleContext(CSharpParser.Interpolation_minimum_widthContext,0)


        def format_string(self):
            return self.getTypedRuleContext(CSharpParser.Format_stringContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_interpolated_string_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterpolated_string_expression" ):
                listener.enterInterpolated_string_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterpolated_string_expression" ):
                listener.exitInterpolated_string_expression(self)




    def interpolated_string_expression(self):

        localctx = CSharpParser.Interpolated_string_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 484, self.RULE_interpolated_string_expression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2842
            self.match(CSharpParser.OPEN_BRACE)
            self.state = 2843
            self.expression()
            self.state = 2846
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==137:
                self.state = 2844
                self.match(CSharpParser.COMMA)
                self.state = 2845
                self.interpolation_minimum_width()


            self.state = 2849
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==138:
                self.state = 2848
                self.format_string()


            self.state = 2851
            self.match(CSharpParser.CLOSE_BRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Interpolation_minimum_widthContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def constant_expression(self):
            return self.getTypedRuleContext(CSharpParser.Constant_expressionContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_interpolation_minimum_width

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterpolation_minimum_width" ):
                listener.enterInterpolation_minimum_width(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterpolation_minimum_width" ):
                listener.exitInterpolation_minimum_width(self)




    def interpolation_minimum_width(self):

        localctx = CSharpParser.Interpolation_minimum_widthContext(self, self._ctx, self.state)
        self.enterRule(localctx, 486, self.RULE_interpolation_minimum_width)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2853
            self.constant_expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Format_stringContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COLON(self):
            return self.getToken(CSharpParser.COLON, 0)

        def FORMAT_STRING(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.FORMAT_STRING)
            else:
                return self.getToken(CSharpParser.FORMAT_STRING, i)

        def getRuleIndex(self):
            return CSharpParser.RULE_format_string

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFormat_string" ):
                listener.enterFormat_string(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFormat_string" ):
                listener.exitFormat_string(self)




    def format_string(self):

        localctx = CSharpParser.Format_stringContext(self, self._ctx, self.state)
        self.enterRule(localctx, 488, self.RULE_format_string)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2855
            self.match(CSharpParser.COLON)
            self.state = 2857 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 2856
                self.match(CSharpParser.FORMAT_STRING)
                self.state = 2859 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==185):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Constant_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(CSharpParser.ExpressionContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_constant_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstant_expression" ):
                listener.enterConstant_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstant_expression" ):
                listener.exitConstant_expression(self)




    def constant_expression(self):

        localctx = CSharpParser.Constant_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 490, self.RULE_constant_expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2861
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class KeywordContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ABSTRACT(self):
            return self.getToken(CSharpParser.ABSTRACT, 0)

        def AS(self):
            return self.getToken(CSharpParser.AS, 0)

        def BASE(self):
            return self.getToken(CSharpParser.BASE, 0)

        def BOOL(self):
            return self.getToken(CSharpParser.BOOL, 0)

        def BREAK(self):
            return self.getToken(CSharpParser.BREAK, 0)

        def BYTE(self):
            return self.getToken(CSharpParser.BYTE, 0)

        def CASE(self):
            return self.getToken(CSharpParser.CASE, 0)

        def CATCH(self):
            return self.getToken(CSharpParser.CATCH, 0)

        def CHAR(self):
            return self.getToken(CSharpParser.CHAR, 0)

        def CHECKED(self):
            return self.getToken(CSharpParser.CHECKED, 0)

        def CLASS(self):
            return self.getToken(CSharpParser.CLASS, 0)

        def CONST(self):
            return self.getToken(CSharpParser.CONST, 0)

        def CONTINUE(self):
            return self.getToken(CSharpParser.CONTINUE, 0)

        def DECIMAL(self):
            return self.getToken(CSharpParser.DECIMAL, 0)

        def DEFAULT(self):
            return self.getToken(CSharpParser.DEFAULT, 0)

        def DELEGATE(self):
            return self.getToken(CSharpParser.DELEGATE, 0)

        def DO(self):
            return self.getToken(CSharpParser.DO, 0)

        def DOUBLE(self):
            return self.getToken(CSharpParser.DOUBLE, 0)

        def ELSE(self):
            return self.getToken(CSharpParser.ELSE, 0)

        def ENUM(self):
            return self.getToken(CSharpParser.ENUM, 0)

        def EVENT(self):
            return self.getToken(CSharpParser.EVENT, 0)

        def EXPLICIT(self):
            return self.getToken(CSharpParser.EXPLICIT, 0)

        def EXTERN(self):
            return self.getToken(CSharpParser.EXTERN, 0)

        def FALSE(self):
            return self.getToken(CSharpParser.FALSE, 0)

        def FINALLY(self):
            return self.getToken(CSharpParser.FINALLY, 0)

        def FIXED(self):
            return self.getToken(CSharpParser.FIXED, 0)

        def FLOAT(self):
            return self.getToken(CSharpParser.FLOAT, 0)

        def FOR(self):
            return self.getToken(CSharpParser.FOR, 0)

        def FOREACH(self):
            return self.getToken(CSharpParser.FOREACH, 0)

        def GOTO(self):
            return self.getToken(CSharpParser.GOTO, 0)

        def IF(self):
            return self.getToken(CSharpParser.IF, 0)

        def IMPLICIT(self):
            return self.getToken(CSharpParser.IMPLICIT, 0)

        def IN(self):
            return self.getToken(CSharpParser.IN, 0)

        def INT(self):
            return self.getToken(CSharpParser.INT, 0)

        def INTERFACE(self):
            return self.getToken(CSharpParser.INTERFACE, 0)

        def INTERNAL(self):
            return self.getToken(CSharpParser.INTERNAL, 0)

        def IS(self):
            return self.getToken(CSharpParser.IS, 0)

        def LOCK(self):
            return self.getToken(CSharpParser.LOCK, 0)

        def LONG(self):
            return self.getToken(CSharpParser.LONG, 0)

        def NAMESPACE(self):
            return self.getToken(CSharpParser.NAMESPACE, 0)

        def NEW(self):
            return self.getToken(CSharpParser.NEW, 0)

        def NULL_(self):
            return self.getToken(CSharpParser.NULL_, 0)

        def OBJECT(self):
            return self.getToken(CSharpParser.OBJECT, 0)

        def OPERATOR(self):
            return self.getToken(CSharpParser.OPERATOR, 0)

        def OUT(self):
            return self.getToken(CSharpParser.OUT, 0)

        def OVERRIDE(self):
            return self.getToken(CSharpParser.OVERRIDE, 0)

        def PARAMS(self):
            return self.getToken(CSharpParser.PARAMS, 0)

        def PRIVATE(self):
            return self.getToken(CSharpParser.PRIVATE, 0)

        def PROTECTED(self):
            return self.getToken(CSharpParser.PROTECTED, 0)

        def PUBLIC(self):
            return self.getToken(CSharpParser.PUBLIC, 0)

        def READONLY(self):
            return self.getToken(CSharpParser.READONLY, 0)

        def REF(self):
            return self.getToken(CSharpParser.REF, 0)

        def RETURN(self):
            return self.getToken(CSharpParser.RETURN, 0)

        def SBYTE(self):
            return self.getToken(CSharpParser.SBYTE, 0)

        def SEALED(self):
            return self.getToken(CSharpParser.SEALED, 0)

        def SHORT(self):
            return self.getToken(CSharpParser.SHORT, 0)

        def SIZEOF(self):
            return self.getToken(CSharpParser.SIZEOF, 0)

        def STACKALLOC(self):
            return self.getToken(CSharpParser.STACKALLOC, 0)

        def STATIC(self):
            return self.getToken(CSharpParser.STATIC, 0)

        def STRING(self):
            return self.getToken(CSharpParser.STRING, 0)

        def STRUCT(self):
            return self.getToken(CSharpParser.STRUCT, 0)

        def SWITCH(self):
            return self.getToken(CSharpParser.SWITCH, 0)

        def THIS(self):
            return self.getToken(CSharpParser.THIS, 0)

        def THROW(self):
            return self.getToken(CSharpParser.THROW, 0)

        def TRUE(self):
            return self.getToken(CSharpParser.TRUE, 0)

        def TRY(self):
            return self.getToken(CSharpParser.TRY, 0)

        def TYPEOF(self):
            return self.getToken(CSharpParser.TYPEOF, 0)

        def UINT(self):
            return self.getToken(CSharpParser.UINT, 0)

        def ULONG(self):
            return self.getToken(CSharpParser.ULONG, 0)

        def UNCHECKED(self):
            return self.getToken(CSharpParser.UNCHECKED, 0)

        def UNMANAGED(self):
            return self.getToken(CSharpParser.UNMANAGED, 0)

        def UNSAFE(self):
            return self.getToken(CSharpParser.UNSAFE, 0)

        def USHORT(self):
            return self.getToken(CSharpParser.USHORT, 0)

        def USING(self):
            return self.getToken(CSharpParser.USING, 0)

        def VIRTUAL(self):
            return self.getToken(CSharpParser.VIRTUAL, 0)

        def VOID(self):
            return self.getToken(CSharpParser.VOID, 0)

        def VOLATILE(self):
            return self.getToken(CSharpParser.VOLATILE, 0)

        def WHILE(self):
            return self.getToken(CSharpParser.WHILE, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_keyword

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterKeyword" ):
                listener.enterKeyword(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitKeyword" ):
                listener.exitKeyword(self)




    def keyword(self):

        localctx = CSharpParser.KeywordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 492, self.RULE_keyword)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2863
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 2876110684961915392) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 5559130687239387) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Class_definitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CLASS(self):
            return self.getToken(CSharpParser.CLASS, 0)

        def identifier(self):
            return self.getTypedRuleContext(CSharpParser.IdentifierContext,0)


        def class_body(self):
            return self.getTypedRuleContext(CSharpParser.Class_bodyContext,0)


        def class_modifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Class_modifierContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Class_modifierContext,i)


        def PARTIAL(self):
            return self.getToken(CSharpParser.PARTIAL, 0)

        def type_parameter_list(self):
            return self.getTypedRuleContext(CSharpParser.Type_parameter_listContext,0)


        def class_base(self):
            return self.getTypedRuleContext(CSharpParser.Class_baseContext,0)


        def type_parameter_constraints_clauses(self):
            return self.getTypedRuleContext(CSharpParser.Type_parameter_constraints_clausesContext,0)


        def SEMICOLON(self):
            return self.getToken(CSharpParser.SEMICOLON, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_class_definition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClass_definition" ):
                listener.enterClass_definition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClass_definition" ):
                listener.exitClass_definition(self)




    def class_definition(self):

        localctx = CSharpParser.Class_definitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 494, self.RULE_class_definition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2868
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==9 or _la==58 or ((((_la - 68)) & ~0x3f) == 0 and ((1 << (_la - 68)) & 549824000001) != 0):
                self.state = 2865
                self.class_modifier()
                self.state = 2870
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2872
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==79:
                self.state = 2871
                self.match(CSharpParser.PARTIAL)


            self.state = 2874
            self.match(CSharpParser.CLASS)
            self.state = 2875
            self.identifier()
            self.state = 2877
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==151:
                self.state = 2876
                self.type_parameter_list()


            self.state = 2880
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==138:
                self.state = 2879
                self.class_base()


            self.state = 2883
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==115:
                self.state = 2882
                self.type_parameter_constraints_clauses()


            self.state = 2885
            self.class_body()
            self.state = 2887
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,344,self._ctx)
            if la_ == 1:
                self.state = 2886
                self.match(CSharpParser.SEMICOLON)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Class_modifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NEW(self):
            return self.getToken(CSharpParser.NEW, 0)

        def PUBLIC(self):
            return self.getToken(CSharpParser.PUBLIC, 0)

        def PROTECTED(self):
            return self.getToken(CSharpParser.PROTECTED, 0)

        def INTERNAL(self):
            return self.getToken(CSharpParser.INTERNAL, 0)

        def PRIVATE(self):
            return self.getToken(CSharpParser.PRIVATE, 0)

        def ABSTRACT(self):
            return self.getToken(CSharpParser.ABSTRACT, 0)

        def SEALED(self):
            return self.getToken(CSharpParser.SEALED, 0)

        def STATIC(self):
            return self.getToken(CSharpParser.STATIC, 0)

        def UNSAFE(self):
            return self.getToken(CSharpParser.UNSAFE, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_class_modifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClass_modifier" ):
                listener.enterClass_modifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClass_modifier" ):
                listener.exitClass_modifier(self)




    def class_modifier(self):

        localctx = CSharpParser.Class_modifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 496, self.RULE_class_modifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2889
            _la = self._input.LA(1)
            if not(_la==9 or _la==58 or ((((_la - 68)) & ~0x3f) == 0 and ((1 << (_la - 68)) & 549824000001) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Struct_definitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STRUCT(self):
            return self.getToken(CSharpParser.STRUCT, 0)

        def identifier(self):
            return self.getTypedRuleContext(CSharpParser.IdentifierContext,0)


        def struct_body(self):
            return self.getTypedRuleContext(CSharpParser.Struct_bodyContext,0)


        def struct_modifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Struct_modifierContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Struct_modifierContext,i)


        def REF(self):
            return self.getToken(CSharpParser.REF, 0)

        def PARTIAL(self):
            return self.getToken(CSharpParser.PARTIAL, 0)

        def RECORD(self):
            return self.getToken(CSharpParser.RECORD, 0)

        def READONLY(self):
            return self.getToken(CSharpParser.READONLY, 0)

        def type_parameter_list(self):
            return self.getTypedRuleContext(CSharpParser.Type_parameter_listContext,0)


        def struct_interfaces(self):
            return self.getTypedRuleContext(CSharpParser.Struct_interfacesContext,0)


        def type_parameter_constraints_clauses(self):
            return self.getTypedRuleContext(CSharpParser.Type_parameter_constraints_clausesContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_struct_definition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStruct_definition" ):
                listener.enterStruct_definition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStruct_definition" ):
                listener.exitStruct_definition(self)




    def struct_definition(self):

        localctx = CSharpParser.Struct_definitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 498, self.RULE_struct_definition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2894
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,345,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2891
                    self.struct_modifier() 
                self.state = 2896
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,345,self._ctx)

            self.state = 2898
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==84:
                self.state = 2897
                self.match(CSharpParser.REF)


            self.state = 2901
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==79:
                self.state = 2900
                self.match(CSharpParser.PARTIAL)


            self.state = 2906
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [118]:
                self.state = 2903
                self.match(CSharpParser.RECORD)
                pass
            elif token in [83]:
                self.state = 2904
                self.match(CSharpParser.READONLY)
                self.state = 2905
                self.match(CSharpParser.RECORD)
                pass
            elif token in [96]:
                pass
            else:
                pass
            self.state = 2908
            self.match(CSharpParser.STRUCT)
            self.state = 2909
            self.identifier()
            self.state = 2911
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==151:
                self.state = 2910
                self.type_parameter_list()


            self.state = 2914
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==138:
                self.state = 2913
                self.struct_interfaces()


            self.state = 2917
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==115:
                self.state = 2916
                self.type_parameter_constraints_clauses()


            self.state = 2919
            self.struct_body()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Struct_modifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NEW(self):
            return self.getToken(CSharpParser.NEW, 0)

        def PUBLIC(self):
            return self.getToken(CSharpParser.PUBLIC, 0)

        def PROTECTED(self):
            return self.getToken(CSharpParser.PROTECTED, 0)

        def INTERNAL(self):
            return self.getToken(CSharpParser.INTERNAL, 0)

        def PRIVATE(self):
            return self.getToken(CSharpParser.PRIVATE, 0)

        def READONLY(self):
            return self.getToken(CSharpParser.READONLY, 0)

        def UNSAFE(self):
            return self.getToken(CSharpParser.UNSAFE, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_struct_modifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStruct_modifier" ):
                listener.enterStruct_modifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStruct_modifier" ):
                listener.exitStruct_modifier(self)




    def struct_modifier(self):

        localctx = CSharpParser.Struct_modifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 500, self.RULE_struct_modifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2921
            _la = self._input.LA(1)
            if not(((((_la - 58)) & ~0x3f) == 0 and ((1 << (_la - 58)) & 562950016336897) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Interface_definitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INTERFACE(self):
            return self.getToken(CSharpParser.INTERFACE, 0)

        def identifier(self):
            return self.getTypedRuleContext(CSharpParser.IdentifierContext,0)


        def class_body(self):
            return self.getTypedRuleContext(CSharpParser.Class_bodyContext,0)


        def variant_type_parameter_list(self):
            return self.getTypedRuleContext(CSharpParser.Variant_type_parameter_listContext,0)


        def interface_base(self):
            return self.getTypedRuleContext(CSharpParser.Interface_baseContext,0)


        def type_parameter_constraints_clauses(self):
            return self.getTypedRuleContext(CSharpParser.Type_parameter_constraints_clausesContext,0)


        def SEMICOLON(self):
            return self.getToken(CSharpParser.SEMICOLON, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_interface_definition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterface_definition" ):
                listener.enterInterface_definition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterface_definition" ):
                listener.exitInterface_definition(self)




    def interface_definition(self):

        localctx = CSharpParser.Interface_definitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 502, self.RULE_interface_definition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2923
            self.match(CSharpParser.INTERFACE)
            self.state = 2924
            self.identifier()
            self.state = 2926
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==151:
                self.state = 2925
                self.variant_type_parameter_list()


            self.state = 2929
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==138:
                self.state = 2928
                self.interface_base()


            self.state = 2932
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==115:
                self.state = 2931
                self.type_parameter_constraints_clauses()


            self.state = 2934
            self.class_body()
            self.state = 2936
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,355,self._ctx)
            if la_ == 1:
                self.state = 2935
                self.match(CSharpParser.SEMICOLON)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Enum_definitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ENUM(self):
            return self.getToken(CSharpParser.ENUM, 0)

        def identifier(self):
            return self.getTypedRuleContext(CSharpParser.IdentifierContext,0)


        def enum_body(self):
            return self.getTypedRuleContext(CSharpParser.Enum_bodyContext,0)


        def enum_base(self):
            return self.getTypedRuleContext(CSharpParser.Enum_baseContext,0)


        def SEMICOLON(self):
            return self.getToken(CSharpParser.SEMICOLON, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_enum_definition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnum_definition" ):
                listener.enterEnum_definition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnum_definition" ):
                listener.exitEnum_definition(self)




    def enum_definition(self):

        localctx = CSharpParser.Enum_definitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 504, self.RULE_enum_definition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2938
            self.match(CSharpParser.ENUM)
            self.state = 2939
            self.identifier()
            self.state = 2941
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==138:
                self.state = 2940
                self.enum_base()


            self.state = 2943
            self.enum_body()
            self.state = 2945
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,357,self._ctx)
            if la_ == 1:
                self.state = 2944
                self.match(CSharpParser.SEMICOLON)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Delegate_definitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DELEGATE(self):
            return self.getToken(CSharpParser.DELEGATE, 0)

        def return_type(self):
            return self.getTypedRuleContext(CSharpParser.Return_typeContext,0)


        def identifier(self):
            return self.getTypedRuleContext(CSharpParser.IdentifierContext,0)


        def OPEN_PARENS(self):
            return self.getToken(CSharpParser.OPEN_PARENS, 0)

        def CLOSE_PARENS(self):
            return self.getToken(CSharpParser.CLOSE_PARENS, 0)

        def SEMICOLON(self):
            return self.getToken(CSharpParser.SEMICOLON, 0)

        def variant_type_parameter_list(self):
            return self.getTypedRuleContext(CSharpParser.Variant_type_parameter_listContext,0)


        def formal_parameter_list(self):
            return self.getTypedRuleContext(CSharpParser.Formal_parameter_listContext,0)


        def type_parameter_constraints_clauses(self):
            return self.getTypedRuleContext(CSharpParser.Type_parameter_constraints_clausesContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_delegate_definition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDelegate_definition" ):
                listener.enterDelegate_definition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDelegate_definition" ):
                listener.exitDelegate_definition(self)




    def delegate_definition(self):

        localctx = CSharpParser.Delegate_definitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 506, self.RULE_delegate_definition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2947
            self.match(CSharpParser.DELEGATE)
            self.state = 2948
            self.return_type()
            self.state = 2949
            self.identifier()
            self.state = 2951
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==151:
                self.state = 2950
                self.variant_type_parameter_list()


            self.state = 2953
            self.match(CSharpParser.OPEN_PARENS)
            self.state = 2955
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 10)) & ~0x3f) == 0 and ((1 << (_la - 10)) & 7040363787287829229) != 0) or ((((_la - 75)) & ~0x3f) == 0 and ((1 << (_la - 75)) & 720599763230250523) != 0):
                self.state = 2954
                self.formal_parameter_list()


            self.state = 2957
            self.match(CSharpParser.CLOSE_PARENS)
            self.state = 2959
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==115:
                self.state = 2958
                self.type_parameter_constraints_clauses()


            self.state = 2961
            self.match(CSharpParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Event_declarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EVENT(self):
            return self.getToken(CSharpParser.EVENT, 0)

        def type_(self):
            return self.getTypedRuleContext(CSharpParser.Type_Context,0)


        def variable_declarators(self):
            return self.getTypedRuleContext(CSharpParser.Variable_declaratorsContext,0)


        def SEMICOLON(self):
            return self.getToken(CSharpParser.SEMICOLON, 0)

        def member_name(self):
            return self.getTypedRuleContext(CSharpParser.Member_nameContext,0)


        def OPEN_BRACE(self):
            return self.getToken(CSharpParser.OPEN_BRACE, 0)

        def event_accessor_declarations(self):
            return self.getTypedRuleContext(CSharpParser.Event_accessor_declarationsContext,0)


        def CLOSE_BRACE(self):
            return self.getToken(CSharpParser.CLOSE_BRACE, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_event_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEvent_declaration" ):
                listener.enterEvent_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEvent_declaration" ):
                listener.exitEvent_declaration(self)




    def event_declaration(self):

        localctx = CSharpParser.Event_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 508, self.RULE_event_declaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2963
            self.match(CSharpParser.EVENT)
            self.state = 2964
            self.type_()
            self.state = 2973
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,361,self._ctx)
            if la_ == 1:
                self.state = 2965
                self.variable_declarators()
                self.state = 2966
                self.match(CSharpParser.SEMICOLON)
                pass

            elif la_ == 2:
                self.state = 2968
                self.member_name()
                self.state = 2969
                self.match(CSharpParser.OPEN_BRACE)
                self.state = 2970
                self.event_accessor_declarations()
                self.state = 2971
                self.match(CSharpParser.CLOSE_BRACE)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Field_declarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def variable_declarators(self):
            return self.getTypedRuleContext(CSharpParser.Variable_declaratorsContext,0)


        def SEMICOLON(self):
            return self.getToken(CSharpParser.SEMICOLON, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_field_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterField_declaration" ):
                listener.enterField_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitField_declaration" ):
                listener.exitField_declaration(self)




    def field_declaration(self):

        localctx = CSharpParser.Field_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 510, self.RULE_field_declaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2975
            self.variable_declarators()
            self.state = 2976
            self.match(CSharpParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Property_declarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def member_name(self):
            return self.getTypedRuleContext(CSharpParser.Member_nameContext,0)


        def OPEN_BRACE(self):
            return self.getToken(CSharpParser.OPEN_BRACE, 0)

        def accessor_declarations(self):
            return self.getTypedRuleContext(CSharpParser.Accessor_declarationsContext,0)


        def CLOSE_BRACE(self):
            return self.getToken(CSharpParser.CLOSE_BRACE, 0)

        def right_arrow(self):
            return self.getTypedRuleContext(CSharpParser.Right_arrowContext,0)


        def throwable_expression(self):
            return self.getTypedRuleContext(CSharpParser.Throwable_expressionContext,0)


        def SEMICOLON(self):
            return self.getToken(CSharpParser.SEMICOLON, 0)

        def ASSIGNMENT(self):
            return self.getToken(CSharpParser.ASSIGNMENT, 0)

        def variable_initializer(self):
            return self.getTypedRuleContext(CSharpParser.Variable_initializerContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_property_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProperty_declaration" ):
                listener.enterProperty_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProperty_declaration" ):
                listener.exitProperty_declaration(self)




    def property_declaration(self):

        localctx = CSharpParser.Property_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 512, self.RULE_property_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2978
            self.member_name()
            self.state = 2992
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [130]:
                self.state = 2979
                self.match(CSharpParser.OPEN_BRACE)
                self.state = 2980
                self.accessor_declarations()
                self.state = 2981
                self.match(CSharpParser.CLOSE_BRACE)
                self.state = 2986
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==150:
                    self.state = 2982
                    self.match(CSharpParser.ASSIGNMENT)
                    self.state = 2983
                    self.variable_initializer()
                    self.state = 2984
                    self.match(CSharpParser.SEMICOLON)


                pass
            elif token in [150]:
                self.state = 2988
                self.right_arrow()
                self.state = 2989
                self.throwable_expression()
                self.state = 2990
                self.match(CSharpParser.SEMICOLON)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Constant_declarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CONST(self):
            return self.getToken(CSharpParser.CONST, 0)

        def type_(self):
            return self.getTypedRuleContext(CSharpParser.Type_Context,0)


        def constant_declarators(self):
            return self.getTypedRuleContext(CSharpParser.Constant_declaratorsContext,0)


        def SEMICOLON(self):
            return self.getToken(CSharpParser.SEMICOLON, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_constant_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstant_declaration" ):
                listener.enterConstant_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstant_declaration" ):
                listener.exitConstant_declaration(self)




    def constant_declaration(self):

        localctx = CSharpParser.Constant_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 514, self.RULE_constant_declaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2994
            self.match(CSharpParser.CONST)
            self.state = 2995
            self.type_()
            self.state = 2996
            self.constant_declarators()
            self.state = 2997
            self.match(CSharpParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Indexer_declarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def THIS(self):
            return self.getToken(CSharpParser.THIS, 0)

        def OPEN_BRACKET(self):
            return self.getToken(CSharpParser.OPEN_BRACKET, 0)

        def formal_parameter_list(self):
            return self.getTypedRuleContext(CSharpParser.Formal_parameter_listContext,0)


        def CLOSE_BRACKET(self):
            return self.getToken(CSharpParser.CLOSE_BRACKET, 0)

        def OPEN_BRACE(self):
            return self.getToken(CSharpParser.OPEN_BRACE, 0)

        def accessor_declarations(self):
            return self.getTypedRuleContext(CSharpParser.Accessor_declarationsContext,0)


        def CLOSE_BRACE(self):
            return self.getToken(CSharpParser.CLOSE_BRACE, 0)

        def right_arrow(self):
            return self.getTypedRuleContext(CSharpParser.Right_arrowContext,0)


        def throwable_expression(self):
            return self.getTypedRuleContext(CSharpParser.Throwable_expressionContext,0)


        def SEMICOLON(self):
            return self.getToken(CSharpParser.SEMICOLON, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_indexer_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndexer_declaration" ):
                listener.enterIndexer_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndexer_declaration" ):
                listener.exitIndexer_declaration(self)




    def indexer_declaration(self):

        localctx = CSharpParser.Indexer_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 516, self.RULE_indexer_declaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2999
            self.match(CSharpParser.THIS)
            self.state = 3000
            self.match(CSharpParser.OPEN_BRACKET)
            self.state = 3001
            self.formal_parameter_list()
            self.state = 3002
            self.match(CSharpParser.CLOSE_BRACKET)
            self.state = 3011
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [130]:
                self.state = 3003
                self.match(CSharpParser.OPEN_BRACE)
                self.state = 3004
                self.accessor_declarations()
                self.state = 3005
                self.match(CSharpParser.CLOSE_BRACE)
                pass
            elif token in [150]:
                self.state = 3007
                self.right_arrow()
                self.state = 3008
                self.throwable_expression()
                self.state = 3009
                self.match(CSharpParser.SEMICOLON)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Destructor_definitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TILDE(self):
            return self.getToken(CSharpParser.TILDE, 0)

        def identifier(self):
            return self.getTypedRuleContext(CSharpParser.IdentifierContext,0)


        def OPEN_PARENS(self):
            return self.getToken(CSharpParser.OPEN_PARENS, 0)

        def CLOSE_PARENS(self):
            return self.getToken(CSharpParser.CLOSE_PARENS, 0)

        def body(self):
            return self.getTypedRuleContext(CSharpParser.BodyContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_destructor_definition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDestructor_definition" ):
                listener.enterDestructor_definition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDestructor_definition" ):
                listener.exitDestructor_definition(self)




    def destructor_definition(self):

        localctx = CSharpParser.Destructor_definitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 518, self.RULE_destructor_definition)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3013
            self.match(CSharpParser.TILDE)
            self.state = 3014
            self.identifier()
            self.state = 3015
            self.match(CSharpParser.OPEN_PARENS)
            self.state = 3016
            self.match(CSharpParser.CLOSE_PARENS)
            self.state = 3017
            self.body()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Constructor_declarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(CSharpParser.IdentifierContext,0)


        def OPEN_PARENS(self):
            return self.getToken(CSharpParser.OPEN_PARENS, 0)

        def CLOSE_PARENS(self):
            return self.getToken(CSharpParser.CLOSE_PARENS, 0)

        def body(self):
            return self.getTypedRuleContext(CSharpParser.BodyContext,0)


        def formal_parameter_list(self):
            return self.getTypedRuleContext(CSharpParser.Formal_parameter_listContext,0)


        def constructor_initializer(self):
            return self.getTypedRuleContext(CSharpParser.Constructor_initializerContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_constructor_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstructor_declaration" ):
                listener.enterConstructor_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstructor_declaration" ):
                listener.exitConstructor_declaration(self)




    def constructor_declaration(self):

        localctx = CSharpParser.Constructor_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 520, self.RULE_constructor_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3019
            self.identifier()
            self.state = 3020
            self.match(CSharpParser.OPEN_PARENS)
            self.state = 3022
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 10)) & ~0x3f) == 0 and ((1 << (_la - 10)) & 7040363787287829229) != 0) or ((((_la - 75)) & ~0x3f) == 0 and ((1 << (_la - 75)) & 720599763230250523) != 0):
                self.state = 3021
                self.formal_parameter_list()


            self.state = 3024
            self.match(CSharpParser.CLOSE_PARENS)
            self.state = 3026
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==138:
                self.state = 3025
                self.constructor_initializer()


            self.state = 3028
            self.body()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Method_declarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def method_modifiers(self):
            return self.getTypedRuleContext(CSharpParser.Method_modifiersContext,0)


        def return_type(self):
            return self.getTypedRuleContext(CSharpParser.Return_typeContext,0)


        def method_header(self):
            return self.getTypedRuleContext(CSharpParser.Method_headerContext,0)


        def method_body(self):
            return self.getTypedRuleContext(CSharpParser.Method_bodyContext,0)


        def attributes(self):
            return self.getTypedRuleContext(CSharpParser.AttributesContext,0)


        def PUBLIC(self):
            return self.getToken(CSharpParser.PUBLIC, 0)

        def ref_method_modifiers(self):
            return self.getTypedRuleContext(CSharpParser.Ref_method_modifiersContext,0)


        def ref_kind(self):
            return self.getTypedRuleContext(CSharpParser.Ref_kindContext,0)


        def ref_return_type(self):
            return self.getTypedRuleContext(CSharpParser.Ref_return_typeContext,0)


        def ref_method_body(self):
            return self.getTypedRuleContext(CSharpParser.Ref_method_bodyContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_method_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMethod_declaration" ):
                listener.enterMethod_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMethod_declaration" ):
                listener.exitMethod_declaration(self)




    def method_declaration(self):

        localctx = CSharpParser.Method_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 522, self.RULE_method_declaration)
        self._la = 0 # Token type
        try:
            self.state = 3050
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,370,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3031
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==132:
                    self.state = 3030
                    self.attributes()


                self.state = 3033
                self.method_modifiers()
                self.state = 3035
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==82:
                    self.state = 3034
                    self.match(CSharpParser.PUBLIC)


                self.state = 3037
                self.return_type()
                self.state = 3038
                self.method_header()
                self.state = 3039
                self.method_body()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3042
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==132:
                    self.state = 3041
                    self.attributes()


                self.state = 3044
                self.ref_method_modifiers()
                self.state = 3045
                self.ref_kind()
                self.state = 3046
                self.ref_return_type()
                self.state = 3047
                self.method_header()
                self.state = 3048
                self.ref_method_body()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Method_headerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def method_member_name(self):
            return self.getTypedRuleContext(CSharpParser.Method_member_nameContext,0)


        def OPEN_PARENS(self):
            return self.getToken(CSharpParser.OPEN_PARENS, 0)

        def CLOSE_PARENS(self):
            return self.getToken(CSharpParser.CLOSE_PARENS, 0)

        def formal_parameter_list(self):
            return self.getTypedRuleContext(CSharpParser.Formal_parameter_listContext,0)


        def type_parameter_list(self):
            return self.getTypedRuleContext(CSharpParser.Type_parameter_listContext,0)


        def type_parameter_constraints_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Type_parameter_constraints_clauseContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Type_parameter_constraints_clauseContext,i)


        def getRuleIndex(self):
            return CSharpParser.RULE_method_header

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMethod_header" ):
                listener.enterMethod_header(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMethod_header" ):
                listener.exitMethod_header(self)




    def method_header(self):

        localctx = CSharpParser.Method_headerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 524, self.RULE_method_header)
        self._la = 0 # Token type
        try:
            self.state = 3072
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,374,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3052
                self.method_member_name()
                self.state = 3053
                self.match(CSharpParser.OPEN_PARENS)
                self.state = 3055
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 10)) & ~0x3f) == 0 and ((1 << (_la - 10)) & 7040363787287829229) != 0) or ((((_la - 75)) & ~0x3f) == 0 and ((1 << (_la - 75)) & 720599763230250523) != 0):
                    self.state = 3054
                    self.formal_parameter_list()


                self.state = 3057
                self.match(CSharpParser.CLOSE_PARENS)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3059
                self.method_member_name()
                self.state = 3060
                self.type_parameter_list()
                self.state = 3061
                self.match(CSharpParser.OPEN_PARENS)
                self.state = 3063
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 10)) & ~0x3f) == 0 and ((1 << (_la - 10)) & 7040363787287829229) != 0) or ((((_la - 75)) & ~0x3f) == 0 and ((1 << (_la - 75)) & 720599763230250523) != 0):
                    self.state = 3062
                    self.formal_parameter_list()


                self.state = 3065
                self.match(CSharpParser.CLOSE_PARENS)
                self.state = 3069
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==115:
                    self.state = 3066
                    self.type_parameter_constraints_clause()
                    self.state = 3071
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Ref_kindContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REF(self):
            return self.getToken(CSharpParser.REF, 0)

        def READONLY(self):
            return self.getToken(CSharpParser.READONLY, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_ref_kind

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRef_kind" ):
                listener.enterRef_kind(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRef_kind" ):
                listener.exitRef_kind(self)




    def ref_kind(self):

        localctx = CSharpParser.Ref_kindContext(self, self._ctx, self.state)
        self.enterRule(localctx, 526, self.RULE_ref_kind)
        try:
            self.state = 3077
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,375,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3074
                self.match(CSharpParser.REF)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3075
                self.match(CSharpParser.REF)
                self.state = 3076
                self.match(CSharpParser.READONLY)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Ref_method_modifiersContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ref_method_modifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Ref_method_modifierContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Ref_method_modifierContext,i)


        def getRuleIndex(self):
            return CSharpParser.RULE_ref_method_modifiers

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRef_method_modifiers" ):
                listener.enterRef_method_modifiers(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRef_method_modifiers" ):
                listener.exitRef_method_modifiers(self)




    def ref_method_modifiers(self):

        localctx = CSharpParser.Ref_method_modifiersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 528, self.RULE_ref_method_modifiers)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3082
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & 288234774198223360) != 0) or ((((_la - 68)) & ~0x3f) == 0 and ((1 << (_la - 68)) & 9345917022721) != 0):
                self.state = 3079
                self.ref_method_modifier()
                self.state = 3084
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Ref_return_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def type_(self):
            return self.getTypedRuleContext(CSharpParser.Type_Context,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_ref_return_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRef_return_type" ):
                listener.enterRef_return_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRef_return_type" ):
                listener.exitRef_return_type(self)




    def ref_return_type(self):

        localctx = CSharpParser.Ref_return_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 530, self.RULE_ref_return_type)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3085
            self.type_()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Method_modifiersContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def method_modifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Method_modifierContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Method_modifierContext,i)


        def PARTIAL(self):
            return self.getToken(CSharpParser.PARTIAL, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_method_modifiers

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMethod_modifiers" ):
                listener.enterMethod_modifiers(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMethod_modifiers" ):
                listener.exitMethod_modifiers(self)




    def method_modifiers(self):

        localctx = CSharpParser.Method_modifiersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 532, self.RULE_method_modifiers)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3090
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,377,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 3087
                    self.method_modifier() 
                self.state = 3092
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,377,self._ctx)

            self.state = 3094
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,378,self._ctx)
            if la_ == 1:
                self.state = 3093
                self.match(CSharpParser.PARTIAL)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Method_modifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ref_method_modifier(self):
            return self.getTypedRuleContext(CSharpParser.Ref_method_modifierContext,0)


        def ASYNC(self):
            return self.getToken(CSharpParser.ASYNC, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_method_modifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMethod_modifier" ):
                listener.enterMethod_modifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMethod_modifier" ):
                listener.exitMethod_modifier(self)




    def method_modifier(self):

        localctx = CSharpParser.Method_modifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 534, self.RULE_method_modifier)
        try:
            self.state = 3098
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [9, 42, 58, 68, 77, 80, 81, 82, 88, 94, 107, 111]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3096
                self.ref_method_modifier()
                pass
            elif token in [16]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3097
                self.match(CSharpParser.ASYNC)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Ref_method_bodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def block(self):
            return self.getTypedRuleContext(CSharpParser.BlockContext,0)


        def right_arrow(self):
            return self.getTypedRuleContext(CSharpParser.Right_arrowContext,0)


        def REF(self):
            return self.getToken(CSharpParser.REF, 0)

        def variable_reference(self):
            return self.getTypedRuleContext(CSharpParser.Variable_referenceContext,0)


        def SEMICOLON(self):
            return self.getToken(CSharpParser.SEMICOLON, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_ref_method_body

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRef_method_body" ):
                listener.enterRef_method_body(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRef_method_body" ):
                listener.exitRef_method_body(self)




    def ref_method_body(self):

        localctx = CSharpParser.Ref_method_bodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 536, self.RULE_ref_method_body)
        try:
            self.state = 3107
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [130]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3100
                self.block()
                pass
            elif token in [150]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3101
                self.right_arrow()
                self.state = 3102
                self.match(CSharpParser.REF)
                self.state = 3103
                self.variable_reference()
                self.state = 3104
                self.match(CSharpParser.SEMICOLON)
                pass
            elif token in [139]:
                self.enterOuterAlt(localctx, 3)
                self.state = 3106
                self.match(CSharpParser.SEMICOLON)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Ref_method_modifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NEW(self):
            return self.getToken(CSharpParser.NEW, 0)

        def PUBLIC(self):
            return self.getToken(CSharpParser.PUBLIC, 0)

        def PROTECTED(self):
            return self.getToken(CSharpParser.PROTECTED, 0)

        def INTERNAL(self):
            return self.getToken(CSharpParser.INTERNAL, 0)

        def PRIVATE(self):
            return self.getToken(CSharpParser.PRIVATE, 0)

        def STATIC(self):
            return self.getToken(CSharpParser.STATIC, 0)

        def VIRTUAL(self):
            return self.getToken(CSharpParser.VIRTUAL, 0)

        def SEALED(self):
            return self.getToken(CSharpParser.SEALED, 0)

        def OVERRIDE(self):
            return self.getToken(CSharpParser.OVERRIDE, 0)

        def ABSTRACT(self):
            return self.getToken(CSharpParser.ABSTRACT, 0)

        def EXTERN(self):
            return self.getToken(CSharpParser.EXTERN, 0)

        def UNSAFE(self):
            return self.getToken(CSharpParser.UNSAFE, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_ref_method_modifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRef_method_modifier" ):
                listener.enterRef_method_modifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRef_method_modifier" ):
                listener.exitRef_method_modifier(self)




    def ref_method_modifier(self):

        localctx = CSharpParser.Ref_method_modifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 538, self.RULE_ref_method_modifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3109
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 288234774198223360) != 0) or ((((_la - 68)) & ~0x3f) == 0 and ((1 << (_la - 68)) & 9345917022721) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Method_member_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(CSharpParser.IdentifierContext,i)


        def DOUBLE_COLON(self):
            return self.getToken(CSharpParser.DOUBLE_COLON, 0)

        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.DOT)
            else:
                return self.getToken(CSharpParser.DOT, i)

        def type_argument_list(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Type_argument_listContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Type_argument_listContext,i)


        def getRuleIndex(self):
            return CSharpParser.RULE_method_member_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMethod_member_name" ):
                listener.enterMethod_member_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMethod_member_name" ):
                listener.exitMethod_member_name(self)




    def method_member_name(self):

        localctx = CSharpParser.Method_member_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 540, self.RULE_method_member_name)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3116
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,381,self._ctx)
            if la_ == 1:
                self.state = 3111
                self.identifier()
                pass

            elif la_ == 2:
                self.state = 3112
                self.identifier()
                self.state = 3113
                self.match(CSharpParser.DOUBLE_COLON)
                self.state = 3114
                self.identifier()
                pass


            self.state = 3125
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,383,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 3119
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==151:
                        self.state = 3118
                        self.type_argument_list()


                    self.state = 3121
                    self.match(CSharpParser.DOT)
                    self.state = 3122
                    self.identifier() 
                self.state = 3127
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,383,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Operator_declarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPERATOR(self):
            return self.getToken(CSharpParser.OPERATOR, 0)

        def overloadable_operator(self):
            return self.getTypedRuleContext(CSharpParser.Overloadable_operatorContext,0)


        def OPEN_PARENS(self):
            return self.getToken(CSharpParser.OPEN_PARENS, 0)

        def arg_declaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Arg_declarationContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Arg_declarationContext,i)


        def CLOSE_PARENS(self):
            return self.getToken(CSharpParser.CLOSE_PARENS, 0)

        def body(self):
            return self.getTypedRuleContext(CSharpParser.BodyContext,0)


        def right_arrow(self):
            return self.getTypedRuleContext(CSharpParser.Right_arrowContext,0)


        def throwable_expression(self):
            return self.getTypedRuleContext(CSharpParser.Throwable_expressionContext,0)


        def SEMICOLON(self):
            return self.getToken(CSharpParser.SEMICOLON, 0)

        def IN(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.IN)
            else:
                return self.getToken(CSharpParser.IN, i)

        def COMMA(self):
            return self.getToken(CSharpParser.COMMA, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_operator_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOperator_declaration" ):
                listener.enterOperator_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOperator_declaration" ):
                listener.exitOperator_declaration(self)




    def operator_declaration(self):

        localctx = CSharpParser.Operator_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 542, self.RULE_operator_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3128
            self.match(CSharpParser.OPERATOR)
            self.state = 3129
            self.overloadable_operator()
            self.state = 3130
            self.match(CSharpParser.OPEN_PARENS)
            self.state = 3132
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==55:
                self.state = 3131
                self.match(CSharpParser.IN)


            self.state = 3134
            self.arg_declaration()
            self.state = 3140
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==137:
                self.state = 3135
                self.match(CSharpParser.COMMA)
                self.state = 3137
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==55:
                    self.state = 3136
                    self.match(CSharpParser.IN)


                self.state = 3139
                self.arg_declaration()


            self.state = 3142
            self.match(CSharpParser.CLOSE_PARENS)
            self.state = 3148
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,387,self._ctx)
            if la_ == 1:
                self.state = 3143
                self.body()
                pass

            elif la_ == 2:
                self.state = 3144
                self.right_arrow()
                self.state = 3145
                self.throwable_expression()
                self.state = 3146
                self.match(CSharpParser.SEMICOLON)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Arg_declarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def type_(self):
            return self.getTypedRuleContext(CSharpParser.Type_Context,0)


        def identifier(self):
            return self.getTypedRuleContext(CSharpParser.IdentifierContext,0)


        def ASSIGNMENT(self):
            return self.getToken(CSharpParser.ASSIGNMENT, 0)

        def expression(self):
            return self.getTypedRuleContext(CSharpParser.ExpressionContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_arg_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArg_declaration" ):
                listener.enterArg_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArg_declaration" ):
                listener.exitArg_declaration(self)




    def arg_declaration(self):

        localctx = CSharpParser.Arg_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 544, self.RULE_arg_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3150
            self.type_()
            self.state = 3151
            self.identifier()
            self.state = 3154
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==150:
                self.state = 3152
                self.match(CSharpParser.ASSIGNMENT)
                self.state = 3153
                self.expression()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Method_invocationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PARENS(self):
            return self.getToken(CSharpParser.OPEN_PARENS, 0)

        def CLOSE_PARENS(self):
            return self.getToken(CSharpParser.CLOSE_PARENS, 0)

        def argument_list(self):
            return self.getTypedRuleContext(CSharpParser.Argument_listContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_method_invocation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMethod_invocation" ):
                listener.enterMethod_invocation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMethod_invocation" ):
                listener.exitMethod_invocation(self)




    def method_invocation(self):

        localctx = CSharpParser.Method_invocationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 546, self.RULE_method_invocation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3156
            self.match(CSharpParser.OPEN_PARENS)
            self.state = 3158
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & -3344405839389674496) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & -11632925374657301) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & 140737892923425) != 0):
                self.state = 3157
                self.argument_list()


            self.state = 3160
            self.match(CSharpParser.CLOSE_PARENS)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Object_creation_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PARENS(self):
            return self.getToken(CSharpParser.OPEN_PARENS, 0)

        def CLOSE_PARENS(self):
            return self.getToken(CSharpParser.CLOSE_PARENS, 0)

        def argument_list(self):
            return self.getTypedRuleContext(CSharpParser.Argument_listContext,0)


        def object_or_collection_initializer(self):
            return self.getTypedRuleContext(CSharpParser.Object_or_collection_initializerContext,0)


        def target_typed_new(self):
            return self.getTypedRuleContext(CSharpParser.Target_typed_newContext,0)


        def OPEN_BRACKET(self):
            return self.getToken(CSharpParser.OPEN_BRACKET, 0)

        def expression_list(self):
            return self.getTypedRuleContext(CSharpParser.Expression_listContext,0)


        def CLOSE_BRACKET(self):
            return self.getToken(CSharpParser.CLOSE_BRACKET, 0)

        def rank_specifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Rank_specifierContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Rank_specifierContext,i)


        def array_initializer(self):
            return self.getTypedRuleContext(CSharpParser.Array_initializerContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_object_creation_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterObject_creation_expression" ):
                listener.enterObject_creation_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitObject_creation_expression" ):
                listener.exitObject_creation_expression(self)




    def object_creation_expression(self):

        localctx = CSharpParser.Object_creation_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 548, self.RULE_object_creation_expression)
        self._la = 0 # Token type
        try:
            self.state = 3184
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,394,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3162
                self.match(CSharpParser.OPEN_PARENS)
                self.state = 3164
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -3344405839389674496) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & -11632925374657301) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & 140737892923425) != 0):
                    self.state = 3163
                    self.argument_list()


                self.state = 3166
                self.match(CSharpParser.CLOSE_PARENS)
                self.state = 3168
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==130:
                    self.state = 3167
                    self.object_or_collection_initializer()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3170
                self.object_or_collection_initializer()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 3171
                self.target_typed_new()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 3172
                self.match(CSharpParser.OPEN_BRACKET)
                self.state = 3173
                self.expression_list()
                self.state = 3174
                self.match(CSharpParser.CLOSE_BRACKET)
                self.state = 3178
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,392,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 3175
                        self.rank_specifier() 
                    self.state = 3180
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,392,self._ctx)

                self.state = 3182
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==130:
                    self.state = 3181
                    self.array_initializer()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Target_typed_newContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PARENS(self):
            return self.getToken(CSharpParser.OPEN_PARENS, 0)

        def CLOSE_PARENS(self):
            return self.getToken(CSharpParser.CLOSE_PARENS, 0)

        def argument_list(self):
            return self.getTypedRuleContext(CSharpParser.Argument_listContext,0)


        def object_or_collection_initializer(self):
            return self.getTypedRuleContext(CSharpParser.Object_or_collection_initializerContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_target_typed_new

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTarget_typed_new" ):
                listener.enterTarget_typed_new(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTarget_typed_new" ):
                listener.exitTarget_typed_new(self)




    def target_typed_new(self):

        localctx = CSharpParser.Target_typed_newContext(self, self._ctx, self.state)
        self.enterRule(localctx, 550, self.RULE_target_typed_new)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3186
            self.match(CSharpParser.OPEN_PARENS)
            self.state = 3188
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & -3344405839389674496) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & -11632925374657301) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & 140737892923425) != 0):
                self.state = 3187
                self.argument_list()


            self.state = 3190
            self.match(CSharpParser.CLOSE_PARENS)
            self.state = 3192
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==130:
                self.state = 3191
                self.object_or_collection_initializer()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self):
            return self.getToken(CSharpParser.IDENTIFIER, 0)

        def ADD(self):
            return self.getToken(CSharpParser.ADD, 0)

        def ALIAS(self):
            return self.getToken(CSharpParser.ALIAS, 0)

        def ARGLIST(self):
            return self.getToken(CSharpParser.ARGLIST, 0)

        def ASCENDING(self):
            return self.getToken(CSharpParser.ASCENDING, 0)

        def ASYNC(self):
            return self.getToken(CSharpParser.ASYNC, 0)

        def AWAIT(self):
            return self.getToken(CSharpParser.AWAIT, 0)

        def BY(self):
            return self.getToken(CSharpParser.BY, 0)

        def DESCENDING(self):
            return self.getToken(CSharpParser.DESCENDING, 0)

        def DYNAMIC(self):
            return self.getToken(CSharpParser.DYNAMIC, 0)

        def EQUALS(self):
            return self.getToken(CSharpParser.EQUALS, 0)

        def FROM(self):
            return self.getToken(CSharpParser.FROM, 0)

        def GET(self):
            return self.getToken(CSharpParser.GET, 0)

        def GROUP(self):
            return self.getToken(CSharpParser.GROUP, 0)

        def INTO(self):
            return self.getToken(CSharpParser.INTO, 0)

        def JOIN(self):
            return self.getToken(CSharpParser.JOIN, 0)

        def LET(self):
            return self.getToken(CSharpParser.LET, 0)

        def NAMEOF(self):
            return self.getToken(CSharpParser.NAMEOF, 0)

        def ON(self):
            return self.getToken(CSharpParser.ON, 0)

        def ORDERBY(self):
            return self.getToken(CSharpParser.ORDERBY, 0)

        def PARTIAL(self):
            return self.getToken(CSharpParser.PARTIAL, 0)

        def REMOVE(self):
            return self.getToken(CSharpParser.REMOVE, 0)

        def SELECT(self):
            return self.getToken(CSharpParser.SELECT, 0)

        def SET(self):
            return self.getToken(CSharpParser.SET, 0)

        def UNMANAGED(self):
            return self.getToken(CSharpParser.UNMANAGED, 0)

        def VAR(self):
            return self.getToken(CSharpParser.VAR, 0)

        def WHEN(self):
            return self.getToken(CSharpParser.WHEN, 0)

        def WHERE(self):
            return self.getToken(CSharpParser.WHERE, 0)

        def YIELD(self):
            return self.getToken(CSharpParser.YIELD, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_identifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentifier" ):
                listener.enterIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentifier" ):
                listener.exitIdentifier(self)




    def identifier(self):

        localctx = CSharpParser.IdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 552, self.RULE_identifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3194
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & -3452571437265341440) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & 12122115721929281) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[232] = self.right_arrow_sempred
        self._predicates[233] = self.right_shift_sempred
        self._predicates[234] = self.right_shift_assignment_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def right_arrow_sempred(self, localctx:Right_arrowContext, predIndex:int):
            if predIndex == 0:
                return (0 if localctx.first is None else localctx.first.tokenIndex) + 1 == (0 if localctx.second is None else localctx.second.tokenIndex)
         

    def right_shift_sempred(self, localctx:Right_shiftContext, predIndex:int):
            if predIndex == 1:
                return (0 if localctx.first is None else localctx.first.tokenIndex) + 1 == (0 if localctx.second is None else localctx.second.tokenIndex)
         

    def right_shift_assignment_sempred(self, localctx:Right_shift_assignmentContext, predIndex:int):
            if predIndex == 2:
                return (0 if localctx.first is None else localctx.first.tokenIndex) + 1 == (0 if localctx.second is None else localctx.second.tokenIndex)
         





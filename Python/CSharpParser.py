# Generated from CSharpParser.g4 by ANTLR 4.13.2
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO

if "." in __name__:
    from .CSharpParserBase import CSharpParserBase
else:
    from CSharpParserBase import CSharpParserBase

def serializedATN():
    return [
        4,1,204,3280,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,
        7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,
        13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
        20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,
        26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,
        33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,
        39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,
        46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,
        52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,2,
        59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,65,7,
        65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,2,71,7,71,2,
        72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,78,7,
        78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,2,
        85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,
        91,2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,
        98,7,98,2,99,7,99,2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,
        2,104,7,104,2,105,7,105,2,106,7,106,2,107,7,107,2,108,7,108,2,109,
        7,109,2,110,7,110,2,111,7,111,2,112,7,112,2,113,7,113,2,114,7,114,
        2,115,7,115,2,116,7,116,2,117,7,117,2,118,7,118,2,119,7,119,2,120,
        7,120,2,121,7,121,2,122,7,122,2,123,7,123,2,124,7,124,2,125,7,125,
        2,126,7,126,2,127,7,127,2,128,7,128,2,129,7,129,2,130,7,130,2,131,
        7,131,2,132,7,132,2,133,7,133,2,134,7,134,2,135,7,135,2,136,7,136,
        2,137,7,137,2,138,7,138,2,139,7,139,2,140,7,140,2,141,7,141,2,142,
        7,142,2,143,7,143,2,144,7,144,2,145,7,145,2,146,7,146,2,147,7,147,
        2,148,7,148,2,149,7,149,2,150,7,150,2,151,7,151,2,152,7,152,2,153,
        7,153,2,154,7,154,2,155,7,155,2,156,7,156,2,157,7,157,2,158,7,158,
        2,159,7,159,2,160,7,160,2,161,7,161,2,162,7,162,2,163,7,163,2,164,
        7,164,2,165,7,165,2,166,7,166,2,167,7,167,2,168,7,168,2,169,7,169,
        2,170,7,170,2,171,7,171,2,172,7,172,2,173,7,173,2,174,7,174,2,175,
        7,175,2,176,7,176,2,177,7,177,2,178,7,178,2,179,7,179,2,180,7,180,
        2,181,7,181,2,182,7,182,2,183,7,183,2,184,7,184,2,185,7,185,2,186,
        7,186,2,187,7,187,2,188,7,188,2,189,7,189,2,190,7,190,2,191,7,191,
        2,192,7,192,2,193,7,193,2,194,7,194,2,195,7,195,2,196,7,196,2,197,
        7,197,2,198,7,198,2,199,7,199,2,200,7,200,2,201,7,201,2,202,7,202,
        2,203,7,203,2,204,7,204,2,205,7,205,2,206,7,206,2,207,7,207,2,208,
        7,208,2,209,7,209,2,210,7,210,2,211,7,211,2,212,7,212,2,213,7,213,
        2,214,7,214,2,215,7,215,2,216,7,216,2,217,7,217,2,218,7,218,2,219,
        7,219,2,220,7,220,2,221,7,221,2,222,7,222,2,223,7,223,2,224,7,224,
        2,225,7,225,2,226,7,226,2,227,7,227,2,228,7,228,2,229,7,229,2,230,
        7,230,2,231,7,231,2,232,7,232,2,233,7,233,2,234,7,234,2,235,7,235,
        2,236,7,236,2,237,7,237,2,238,7,238,2,239,7,239,2,240,7,240,2,241,
        7,241,2,242,7,242,2,243,7,243,2,244,7,244,2,245,7,245,2,246,7,246,
        2,247,7,247,2,248,7,248,2,249,7,249,2,250,7,250,2,251,7,251,2,252,
        7,252,2,253,7,253,2,254,7,254,2,255,7,255,2,256,7,256,2,257,7,257,
        2,258,7,258,2,259,7,259,2,260,7,260,2,261,7,261,2,262,7,262,2,263,
        7,263,2,264,7,264,2,265,7,265,2,266,7,266,2,267,7,267,2,268,7,268,
        2,269,7,269,2,270,7,270,2,271,7,271,2,272,7,272,2,273,7,273,2,274,
        7,274,2,275,7,275,2,276,7,276,2,277,7,277,2,278,7,278,2,279,7,279,
        2,280,7,280,2,281,7,281,1,0,3,0,566,8,0,1,0,5,0,569,8,0,10,0,12,
        0,572,9,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,3,1,582,8,1,1,2,1,2,4,
        2,586,8,2,11,2,12,2,587,1,3,4,3,591,8,3,11,3,12,3,592,1,4,1,4,1,
        4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,3,
        4,613,8,4,1,5,1,5,3,5,617,8,5,1,5,3,5,620,8,5,1,5,1,5,1,5,3,5,625,
        8,5,5,5,627,8,5,10,5,12,5,630,9,5,1,6,1,6,1,6,1,6,5,6,636,8,6,10,
        6,12,6,639,9,6,1,6,3,6,642,8,6,1,7,1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,
        8,5,8,653,8,8,10,8,12,8,656,9,8,1,9,1,9,1,9,1,9,1,9,3,9,663,8,9,
        1,10,1,10,1,10,1,10,4,10,669,8,10,11,10,12,10,670,1,10,1,10,1,10,
        3,10,676,8,10,1,11,3,11,679,8,11,1,11,1,11,1,12,1,12,1,12,1,12,4,
        12,687,8,12,11,12,12,12,688,1,12,1,12,1,13,1,13,3,13,695,8,13,3,
        13,697,8,13,1,14,1,14,3,14,701,8,14,1,15,1,15,3,15,705,8,15,1,16,
        1,16,1,16,3,16,710,8,16,1,17,1,17,1,18,1,18,1,19,1,19,3,19,718,8,
        19,1,20,1,20,1,20,1,20,1,20,1,21,1,21,1,22,1,22,1,23,1,23,1,23,1,
        23,3,23,733,8,23,1,24,1,24,1,24,1,24,5,24,739,8,24,10,24,12,24,742,
        9,24,1,24,1,24,1,25,1,25,1,25,5,25,749,8,25,10,25,12,25,752,9,25,
        1,26,3,26,755,8,26,1,26,3,26,758,8,26,1,26,1,26,1,26,3,26,763,8,
        26,1,26,3,26,766,8,26,1,27,1,27,1,27,1,28,1,28,1,28,1,28,1,28,3,
        28,776,8,28,1,29,1,29,1,29,3,29,781,8,29,1,30,1,30,1,30,1,30,1,30,
        1,30,1,30,1,30,3,30,791,8,30,1,31,1,31,1,31,1,31,1,31,1,31,1,31,
        1,31,1,31,1,31,1,31,3,31,804,8,31,1,32,1,32,1,32,1,32,1,32,1,32,
        1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,3,32,821,8,32,1,33,
        1,33,1,33,1,33,3,33,827,8,33,3,33,829,8,33,1,34,1,34,1,34,5,34,834,
        8,34,10,34,12,34,837,9,34,1,35,1,35,1,35,5,35,842,8,35,10,35,12,
        35,845,9,35,1,36,1,36,1,36,5,36,850,8,36,10,36,12,36,853,9,36,1,
        37,1,37,1,37,5,37,858,8,37,10,37,12,37,861,9,37,1,38,1,38,1,38,5,
        38,866,8,38,10,38,12,38,869,9,38,1,39,1,39,1,39,5,39,874,8,39,10,
        39,12,39,877,9,39,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,5,
        40,888,8,40,10,40,12,40,891,9,40,1,41,1,41,1,41,3,41,896,8,41,1,
        41,5,41,899,8,41,10,41,12,41,902,9,41,1,42,1,42,1,42,5,42,907,8,
        42,10,42,12,42,910,9,42,1,43,1,43,1,43,5,43,915,8,43,10,43,12,43,
        918,9,43,1,44,1,44,1,44,1,44,1,44,3,44,925,8,44,3,44,927,8,44,1,
        44,3,44,930,8,44,1,45,1,45,1,45,5,45,935,8,45,10,45,12,45,938,9,
        45,1,46,1,46,3,46,942,8,46,1,46,1,46,1,46,1,47,1,47,3,47,949,8,47,
        1,47,1,47,3,47,953,8,47,3,47,955,8,47,1,48,1,48,1,48,1,48,1,48,1,
        48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,
        48,1,48,1,48,1,48,3,48,979,8,48,1,49,1,49,1,49,1,49,1,49,1,50,1,
        50,3,50,988,8,50,1,50,5,50,991,8,50,10,50,12,50,994,9,50,1,50,3,
        50,997,8,50,1,50,1,50,1,50,1,50,1,50,1,50,3,50,1005,8,50,1,50,3,
        50,1008,8,50,1,50,5,50,1011,8,50,10,50,12,50,1014,9,50,1,50,3,50,
        1017,8,50,5,50,1019,8,50,10,50,12,50,1022,9,50,1,50,1,50,1,50,3,
        50,1027,8,50,1,51,1,51,1,51,3,51,1032,8,51,1,51,1,51,1,51,1,51,1,
        51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,3,51,1046,8,51,1,51,1,51,1,
        51,1,51,3,51,1052,8,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,5,
        51,1062,8,51,10,51,12,51,1065,9,51,1,51,3,51,1068,8,51,1,51,4,51,
        1071,8,51,11,51,12,51,1072,1,51,1,51,3,51,1077,8,51,1,51,1,51,1,
        51,1,51,3,51,1083,8,51,1,51,1,51,1,51,1,51,1,51,1,51,4,51,1091,8,
        51,11,51,12,51,1092,1,51,1,51,1,51,1,51,1,51,1,51,1,51,3,51,1102,
        8,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,
        1,51,1,51,1,51,1,51,3,51,1120,8,51,1,51,3,51,1123,8,51,1,51,1,51,
        1,51,3,51,1128,8,51,1,51,3,51,1131,8,51,1,51,1,51,1,51,1,51,1,51,
        1,51,1,51,1,51,1,51,1,51,1,51,5,51,1144,8,51,10,51,12,51,1147,9,
        51,1,51,1,51,1,51,3,51,1152,8,51,1,52,1,52,3,52,1156,8,52,1,53,1,
        53,1,53,1,54,3,54,1162,8,54,1,54,1,54,1,54,3,54,1167,8,54,1,55,3,
        55,1170,8,55,1,55,1,55,1,55,1,55,5,55,1176,8,55,10,55,12,55,1179,
        9,55,1,55,1,55,1,56,1,56,1,56,3,56,1186,8,56,1,56,1,56,1,57,1,57,
        1,58,1,58,1,58,5,58,1195,8,58,10,58,12,58,1198,9,58,1,59,1,59,3,
        59,1202,8,59,1,60,1,60,1,60,3,60,1207,8,60,3,60,1209,8,60,1,60,1,
        60,1,61,1,61,1,61,5,61,1216,8,61,10,61,12,61,1219,9,61,1,62,1,62,
        1,62,1,62,1,62,3,62,1226,8,62,1,62,1,62,1,62,1,63,1,63,1,63,3,63,
        1234,8,63,1,64,1,64,1,64,1,64,5,64,1240,8,64,10,64,12,64,1243,9,
        64,1,64,3,64,1246,8,64,1,64,1,64,1,65,1,65,1,65,1,65,1,65,1,65,3,
        65,1256,8,65,1,66,1,66,1,66,3,66,1261,8,66,3,66,1263,8,66,1,66,1,
        66,1,67,1,67,1,67,5,67,1270,8,67,10,67,12,67,1273,9,67,1,68,1,68,
        1,68,1,68,1,68,3,68,1280,8,68,1,69,1,69,3,69,1284,8,69,1,69,1,69,
        1,69,3,69,1289,8,69,3,69,1291,8,69,1,69,1,69,1,69,3,69,1296,8,69,
        5,69,1298,8,69,10,69,12,69,1301,9,69,1,70,1,70,5,70,1305,8,70,10,
        70,12,70,1308,9,70,1,70,1,70,1,71,1,71,1,71,5,71,1315,8,71,10,71,
        12,71,1318,9,71,1,71,3,71,1321,8,71,1,71,3,71,1324,8,71,1,71,3,71,
        1327,8,71,1,72,1,72,1,72,1,72,5,72,1333,8,72,10,72,12,72,1336,9,
        72,1,72,1,72,1,73,1,73,1,73,1,73,1,74,3,74,1345,8,74,1,74,3,74,1348,
        8,74,1,74,3,74,1351,8,74,1,74,1,74,1,74,1,74,1,75,1,75,1,75,1,75,
        1,75,1,75,1,75,1,75,1,75,1,75,1,75,3,75,1368,8,75,1,76,1,76,1,76,
        5,76,1373,8,76,10,76,12,76,1376,9,76,1,77,3,77,1379,8,77,1,77,1,
        77,1,77,1,78,1,78,1,78,5,78,1387,8,78,10,78,12,78,1390,9,78,1,79,
        1,79,3,79,1394,8,79,1,80,1,80,1,80,1,81,1,81,3,81,1401,8,81,1,81,
        1,81,1,81,1,81,1,82,5,82,1408,8,82,10,82,12,82,1411,9,82,1,82,1,
        82,3,82,1415,8,82,1,83,1,83,1,83,1,83,1,83,3,83,1422,8,83,1,84,1,
        84,1,84,1,84,1,84,1,85,1,85,1,85,1,86,1,86,3,86,1434,8,86,1,86,1,
        86,1,86,1,86,1,86,1,86,1,86,1,86,1,86,3,86,1445,8,86,1,87,1,87,1,
        87,1,87,5,87,1451,8,87,10,87,12,87,1454,9,87,1,88,1,88,3,88,1458,
        8,88,1,89,1,89,1,89,1,89,1,89,1,89,1,89,3,89,1467,8,89,1,90,1,90,
        1,90,1,90,1,91,1,91,1,91,3,91,1476,8,91,1,92,1,92,1,92,1,92,1,92,
        1,92,1,92,3,92,1485,8,92,1,93,1,93,1,93,1,94,3,94,1491,8,94,1,94,
        1,94,1,94,3,94,1496,8,94,1,94,1,94,3,94,1500,8,94,1,94,1,94,3,94,
        1504,8,94,1,95,1,95,3,95,1508,8,95,1,95,1,95,3,95,1512,8,95,1,95,
        1,95,3,95,1516,8,95,1,96,1,96,1,96,1,96,1,96,3,96,1523,8,96,1,97,
        1,97,1,97,1,97,1,98,1,98,1,98,1,98,1,98,1,98,1,98,1,98,1,98,1,98,
        1,98,1,98,5,98,1541,8,98,10,98,12,98,1544,9,98,1,98,1,98,1,98,1,
        98,1,98,1,98,1,98,1,98,1,98,1,98,1,98,1,98,1,98,1,98,1,98,1,98,1,
        98,1,98,1,98,3,98,1565,8,98,1,98,1,98,3,98,1569,8,98,1,98,1,98,3,
        98,1573,8,98,1,98,1,98,1,98,3,98,1578,8,98,1,98,1,98,1,98,1,98,1,
        98,3,98,1585,8,98,1,98,1,98,1,98,1,98,1,98,1,98,1,98,1,98,1,98,1,
        98,1,98,1,98,1,98,1,98,3,98,1601,8,98,1,98,1,98,1,98,3,98,1606,8,
        98,1,98,1,98,1,98,3,98,1611,8,98,1,98,1,98,1,98,1,98,1,98,1,98,1,
        98,1,98,1,98,3,98,1622,8,98,1,99,1,99,1,100,1,100,1,100,1,100,1,
        100,1,100,1,100,1,100,1,100,1,100,1,100,1,100,1,100,1,100,3,100,
        1640,8,100,1,101,1,101,1,101,1,102,1,102,1,102,1,103,1,103,1,103,
        1,103,1,103,1,103,1,104,1,104,3,104,1656,8,104,1,105,1,105,1,105,
        1,105,1,105,1,105,1,105,1,105,3,105,1666,8,105,1,105,1,105,3,105,
        1670,8,105,1,105,1,105,3,105,1674,8,105,1,106,1,106,1,106,1,106,
        1,107,1,107,1,107,5,107,1683,8,107,10,107,12,107,1686,9,107,1,107,
        3,107,1689,8,107,1,108,1,108,1,109,1,109,1,109,1,109,1,109,1,109,
        1,110,1,110,1,110,1,110,1,110,1,110,1,110,1,110,3,110,1707,8,110,
        1,111,1,111,1,111,1,111,1,111,1,111,1,111,1,112,1,112,1,112,1,113,
        1,113,1,113,1,113,1,113,1,113,1,113,3,113,1726,8,113,1,113,1,113,
        3,113,1730,8,113,1,114,1,114,3,114,1734,8,114,1,114,1,114,1,115,
        1,115,1,115,1,115,3,115,1742,8,115,1,115,1,115,1,115,1,115,5,115,
        1748,8,115,10,115,12,115,1751,9,115,1,115,1,115,1,115,1,115,1,115,
        1,115,1,115,1,115,1,115,1,115,1,115,3,115,1764,8,115,1,115,1,115,
        1,115,1,115,1,115,3,115,1771,8,115,1,116,1,116,1,116,1,116,1,116,
        1,117,1,117,1,117,1,117,1,117,1,117,1,117,1,117,1,117,1,117,1,117,
        1,118,1,118,3,118,1791,8,118,1,119,1,119,1,119,3,119,1796,8,119,
        1,119,3,119,1799,8,119,1,120,1,120,1,120,1,120,1,120,3,120,1806,
        8,120,1,121,1,121,1,121,1,121,1,122,4,122,1813,8,122,11,122,12,122,
        1814,1,122,1,122,1,123,1,123,1,123,3,123,1822,8,123,1,123,1,123,
        1,123,1,123,1,123,3,123,1829,8,123,1,123,1,123,1,123,1,123,3,123,
        1835,8,123,1,124,1,124,1,124,1,125,4,125,1841,8,125,11,125,12,125,
        1842,1,126,1,126,1,126,1,126,5,126,1849,8,126,10,126,12,126,1852,
        9,126,3,126,1854,8,126,1,127,1,127,1,127,5,127,1859,8,127,10,127,
        12,127,1862,9,127,1,128,1,128,5,128,1866,8,128,10,128,12,128,1869,
        9,128,1,128,3,128,1872,8,128,1,128,3,128,1875,8,128,1,129,1,129,
        1,129,1,129,3,129,1881,8,129,1,129,1,129,3,129,1885,8,129,1,129,
        1,129,1,130,1,130,3,130,1891,8,130,1,130,1,130,1,131,1,131,1,131,
        1,131,1,131,1,132,1,132,1,132,1,133,1,133,3,133,1905,8,133,1,134,
        1,134,1,134,1,134,3,134,1911,8,134,1,135,1,135,1,135,5,135,1916,
        8,135,10,135,12,135,1919,9,135,1,136,1,136,3,136,1923,8,136,1,136,
        3,136,1926,8,136,1,136,3,136,1929,8,136,1,136,1,136,3,136,1933,8,
        136,1,137,4,137,1936,8,137,11,137,12,137,1937,1,138,1,138,1,138,
        1,138,1,138,1,139,4,139,1946,8,139,11,139,12,139,1947,1,140,3,140,
        1951,8,140,1,140,1,140,1,140,1,140,1,140,1,140,1,140,3,140,1960,
        8,140,1,140,1,140,1,140,1,140,1,140,3,140,1967,8,140,1,140,1,140,
        1,140,1,140,1,140,3,140,1974,8,140,1,141,4,141,1977,8,141,11,141,
        12,141,1978,1,142,1,142,1,142,1,142,3,142,1985,8,142,1,143,3,143,
        1988,8,143,1,143,3,143,1991,8,143,1,143,1,143,1,143,1,143,1,143,
        1,143,3,143,1999,8,143,1,144,1,144,3,144,2003,8,144,1,144,1,144,
        3,144,2007,8,144,1,144,3,144,2010,8,144,1,144,3,144,2013,8,144,1,
        144,1,144,3,144,2017,8,144,1,144,1,144,1,144,1,145,1,145,1,145,1,
        145,5,145,2026,8,145,10,145,12,145,2029,9,145,1,146,1,146,3,146,
        2033,8,146,1,146,1,146,3,146,2037,8,146,1,147,1,147,1,147,5,147,
        2042,8,147,10,147,12,147,2045,9,147,1,148,3,148,2048,8,148,1,148,
        1,148,1,148,1,149,1,149,1,149,1,149,3,149,2057,8,149,1,150,1,150,
        1,150,1,150,5,150,2063,8,150,10,150,12,150,2066,9,150,1,150,1,150,
        1,151,3,151,2071,8,151,1,151,1,151,1,152,1,152,1,152,1,152,5,152,
        2079,8,152,10,152,12,152,2082,9,152,1,153,1,153,1,153,5,153,2087,
        8,153,10,153,12,153,2090,9,153,1,154,4,154,2093,8,154,11,154,12,
        154,2094,1,155,1,155,1,155,1,155,1,155,1,156,1,156,1,156,1,156,3,
        156,2106,8,156,1,156,1,156,3,156,2110,8,156,3,156,2112,8,156,1,157,
        1,157,1,157,3,157,2117,8,157,1,157,1,157,3,157,2121,8,157,1,158,
        1,158,1,158,1,158,1,158,1,158,1,158,1,158,1,158,3,158,2132,8,158,
        1,159,3,159,2135,8,159,1,159,3,159,2138,8,159,1,159,3,159,2141,8,
        159,1,160,1,160,1,160,1,160,5,160,2147,8,160,10,160,12,160,2150,
        9,160,1,160,1,160,1,161,1,161,1,161,1,161,1,162,1,162,1,162,1,162,
        1,162,1,162,1,162,1,162,3,162,2166,8,162,1,163,1,163,1,163,1,163,
        1,164,1,164,1,164,1,164,1,165,1,165,1,165,1,166,1,166,1,166,1,167,
        1,167,1,168,1,168,1,169,1,169,1,170,1,170,1,170,1,171,1,171,1,172,
        1,172,3,172,2195,8,172,1,172,3,172,2198,8,172,1,172,1,172,1,172,
        1,172,1,172,1,172,1,172,1,173,1,173,1,173,5,173,2210,8,173,10,173,
        12,173,2213,9,173,1,174,1,174,1,174,1,174,1,175,1,175,3,175,2221,
        8,175,1,175,1,175,1,176,4,176,2226,8,176,11,176,12,176,2227,1,177,
        3,177,2231,8,177,1,177,3,177,2234,8,177,1,177,1,177,3,177,2238,8,
        177,1,178,4,178,2241,8,178,11,178,12,178,2242,1,179,1,179,1,180,
        1,180,1,180,1,180,1,180,1,180,1,180,1,180,1,180,3,180,2256,8,180,
        1,180,1,180,1,180,1,180,1,180,1,180,1,180,1,180,3,180,2266,8,180,
        1,181,1,181,1,181,1,181,1,181,3,181,2273,8,181,1,181,1,181,1,181,
        1,181,1,181,1,181,1,181,1,181,1,181,1,181,3,181,2285,8,181,1,182,
        1,182,1,182,5,182,2290,8,182,10,182,12,182,2293,9,182,1,183,1,183,
        1,183,1,183,1,184,1,184,1,184,5,184,2302,8,184,10,184,12,184,2305,
        9,184,1,185,1,185,1,185,3,185,2310,8,185,1,186,1,186,3,186,2314,
        8,186,1,187,1,187,3,187,2318,8,187,1,188,1,188,1,189,1,189,1,189,
        1,189,1,189,1,189,3,189,2328,8,189,1,190,1,190,1,190,1,190,3,190,
        2334,8,190,3,190,2336,8,190,1,191,1,191,1,191,5,191,2341,8,191,10,
        191,12,191,2344,9,191,1,192,3,192,2347,8,192,1,192,3,192,2350,8,
        192,1,192,1,192,3,192,2354,8,192,1,193,1,193,1,193,1,193,1,193,1,
        193,1,193,1,193,3,193,2364,8,193,1,194,3,194,2367,8,194,1,194,1,
        194,1,194,1,194,1,195,3,195,2374,8,195,1,195,3,195,2377,8,195,1,
        195,1,195,1,195,3,195,2382,8,195,1,195,1,195,1,195,3,195,2387,8,
        195,1,195,1,195,1,195,3,195,2392,8,195,1,195,1,195,1,195,3,195,2397,
        8,195,3,195,2399,8,195,1,196,3,196,2402,8,196,1,196,1,196,1,196,
        1,197,3,197,2408,8,197,1,197,3,197,2411,8,197,1,197,1,197,1,197,
        1,198,3,198,2417,8,198,1,198,3,198,2420,8,198,1,198,1,198,1,198,
        1,199,1,199,1,199,1,199,1,199,1,199,1,199,1,199,1,199,1,199,1,199,
        1,199,3,199,2437,8,199,1,200,1,200,1,200,1,200,1,200,1,200,3,200,
        2445,8,200,1,201,3,201,2448,8,201,1,201,1,201,1,201,1,201,1,201,
        1,201,1,201,1,201,3,201,2458,8,201,1,202,3,202,2461,8,202,1,202,
        1,202,1,202,1,203,3,203,2467,8,203,1,203,1,203,1,203,1,204,1,204,
        1,204,1,204,1,204,1,204,1,204,1,204,1,204,1,204,1,204,1,204,1,204,
        1,204,1,204,1,204,1,204,1,204,1,204,1,204,1,204,1,204,3,204,2494,
        8,204,1,205,1,205,1,205,1,205,1,205,1,205,1,205,1,206,1,206,1,206,
        1,206,3,206,2507,8,206,1,206,1,206,1,207,1,207,1,207,1,207,1,207,
        1,207,3,207,2517,8,207,1,208,1,208,1,208,1,209,1,209,5,209,2524,
        8,209,10,209,12,209,2527,9,209,1,209,1,209,3,209,2531,8,209,1,210,
        3,210,2534,8,210,1,210,3,210,2537,8,210,1,210,1,210,1,210,1,210,
        4,210,2543,8,210,11,210,12,210,2544,1,210,1,210,3,210,2549,8,210,
        1,211,1,211,5,211,2553,8,211,10,211,12,211,2556,9,211,1,211,4,211,
        2559,8,211,11,211,12,211,2560,1,212,1,212,5,212,2565,8,212,10,212,
        12,212,2568,9,212,1,212,1,212,1,213,1,213,1,213,1,213,5,213,2576,
        8,213,10,213,12,213,2579,9,213,1,213,3,213,2582,8,213,3,213,2584,
        8,213,1,213,1,213,1,214,1,214,1,214,1,214,5,214,2592,8,214,10,214,
        12,214,2595,9,214,1,214,1,214,1,215,3,215,2600,8,215,1,215,3,215,
        2603,8,215,1,215,1,215,1,216,1,216,1,217,1,217,1,217,1,218,1,218,
        5,218,2614,8,218,10,218,12,218,2617,9,218,1,218,1,218,1,219,3,219,
        2622,8,219,1,219,3,219,2625,8,219,1,219,3,219,2628,8,219,1,219,1,
        219,1,219,1,219,1,219,3,219,2635,8,219,1,219,1,219,1,219,3,219,2640,
        8,219,1,219,1,219,3,219,2644,8,219,1,219,1,219,3,219,2648,8,219,
        1,219,1,219,1,219,1,219,1,219,1,219,1,219,1,219,1,219,1,219,1,219,
        1,219,1,219,1,219,1,219,3,219,2665,8,219,1,219,3,219,2668,8,219,
        1,219,1,219,1,219,3,219,2673,8,219,1,219,1,219,3,219,2677,8,219,
        1,219,1,219,3,219,2681,8,219,1,219,1,219,1,219,1,219,1,219,1,219,
        1,219,3,219,2690,8,219,1,220,3,220,2693,8,220,1,220,1,220,1,220,
        3,220,2698,8,220,1,220,1,220,3,220,2702,8,220,1,220,1,220,1,220,
        3,220,2707,8,220,1,220,1,220,3,220,2711,8,220,3,220,2713,8,220,1,
        221,1,221,1,221,1,222,1,222,1,222,1,222,5,222,2722,8,222,10,222,
        12,222,2725,9,222,1,222,3,222,2728,8,222,3,222,2730,8,222,1,222,
        1,222,1,223,3,223,2735,8,223,1,223,1,223,1,223,3,223,2740,8,223,
        1,224,1,224,1,224,1,224,1,224,3,224,2747,8,224,1,224,1,224,1,225,
        1,225,3,225,2753,8,225,1,226,4,226,2756,8,226,11,226,12,226,2757,
        1,227,1,227,1,227,1,227,3,227,2764,8,227,1,227,1,227,3,227,2768,
        8,227,1,227,1,227,1,227,1,227,1,227,1,227,1,227,1,227,1,227,1,227,
        5,227,2780,8,227,10,227,12,227,2783,9,227,3,227,2785,8,227,1,228,
        1,228,3,228,2789,8,228,1,229,1,229,1,229,5,229,2794,8,229,10,229,
        12,229,2797,9,229,1,230,1,230,1,230,1,230,1,230,5,230,2804,8,230,
        10,230,12,230,2807,9,230,3,230,2809,8,230,1,230,3,230,2812,8,230,
        1,231,1,231,1,231,3,231,2817,8,231,1,231,1,231,1,232,1,232,3,232,
        2823,8,232,1,232,1,232,5,232,2827,8,232,10,232,12,232,2830,9,232,
        1,232,1,232,1,232,1,232,3,232,2836,8,232,1,233,1,233,1,233,5,233,
        2841,8,233,10,233,12,233,2844,9,233,1,234,1,234,1,234,1,234,1,235,
        3,235,2851,8,235,1,235,1,235,3,235,2855,8,235,1,236,1,236,1,236,
        1,236,1,236,1,237,1,237,1,237,1,237,1,238,1,238,1,238,1,238,1,239,
        1,239,1,239,1,239,1,240,1,240,1,240,1,240,1,240,1,240,1,240,1,240,
        3,240,2882,8,240,1,241,1,241,1,242,1,242,1,242,1,242,3,242,2890,
        8,242,1,243,1,243,5,243,2894,8,243,10,243,12,243,2897,9,243,1,243,
        1,243,1,244,1,244,5,244,2903,8,244,10,244,12,244,2906,9,244,1,244,
        1,244,1,245,1,245,1,245,1,245,1,245,1,245,1,245,1,245,3,245,2918,
        8,245,1,246,1,246,1,246,1,246,3,246,2924,8,246,1,247,1,247,1,247,
        1,247,3,247,2930,8,247,1,247,3,247,2933,8,247,1,247,1,247,1,248,
        1,248,1,249,1,249,4,249,2941,8,249,11,249,12,249,2942,1,250,1,250,
        1,251,1,251,1,252,5,252,2950,8,252,10,252,12,252,2953,9,252,1,252,
        3,252,2956,8,252,1,252,1,252,1,252,3,252,2961,8,252,1,252,3,252,
        2964,8,252,1,252,3,252,2967,8,252,1,252,1,252,3,252,2971,8,252,1,
        253,1,253,1,254,5,254,2976,8,254,10,254,12,254,2979,9,254,1,254,
        3,254,2982,8,254,1,254,3,254,2985,8,254,1,254,1,254,1,254,3,254,
        2990,8,254,1,254,1,254,1,254,3,254,2995,8,254,1,254,3,254,2998,8,
        254,1,254,3,254,3001,8,254,1,254,1,254,1,255,1,255,1,256,1,256,1,
        256,3,256,3010,8,256,1,256,3,256,3013,8,256,1,256,3,256,3016,8,256,
        1,256,1,256,3,256,3020,8,256,1,257,1,257,1,257,3,257,3025,8,257,
        1,257,1,257,3,257,3029,8,257,1,258,1,258,1,258,1,258,3,258,3035,
        8,258,1,258,1,258,3,258,3039,8,258,1,258,1,258,3,258,3043,8,258,
        1,258,1,258,1,259,1,259,1,259,1,259,1,259,1,259,1,259,1,259,1,259,
        1,259,3,259,3057,8,259,1,260,1,260,1,260,1,261,1,261,1,261,1,261,
        1,261,1,261,1,261,1,261,3,261,3070,8,261,1,261,1,261,1,261,1,261,
        3,261,3076,8,261,1,262,1,262,1,262,1,262,1,262,1,263,1,263,1,263,
        1,263,1,263,1,263,1,263,1,263,1,263,1,263,1,263,1,263,3,263,3095,
        8,263,1,264,1,264,1,264,1,264,1,264,1,264,1,265,1,265,1,265,3,265,
        3106,8,265,1,265,1,265,3,265,3110,8,265,1,265,1,265,1,266,3,266,
        3115,8,266,1,266,1,266,3,266,3119,8,266,1,266,1,266,1,266,1,266,
        1,266,3,266,3126,8,266,1,266,1,266,1,266,1,266,1,266,1,266,3,266,
        3134,8,266,1,267,1,267,1,267,3,267,3139,8,267,1,267,1,267,1,267,
        1,267,1,267,1,267,3,267,3147,8,267,1,267,1,267,5,267,3151,8,267,
        10,267,12,267,3154,9,267,3,267,3156,8,267,1,268,1,268,1,268,3,268,
        3161,8,268,1,269,5,269,3164,8,269,10,269,12,269,3167,9,269,1,270,
        1,270,1,271,5,271,3172,8,271,10,271,12,271,3175,9,271,1,271,3,271,
        3178,8,271,1,272,1,272,3,272,3182,8,272,1,273,1,273,1,273,1,273,
        1,273,1,273,1,273,3,273,3191,8,273,1,274,1,274,1,275,1,275,1,275,
        1,275,1,275,3,275,3200,8,275,1,275,3,275,3203,8,275,1,275,1,275,
        5,275,3207,8,275,10,275,12,275,3210,9,275,1,276,1,276,1,276,1,276,
        3,276,3216,8,276,1,276,1,276,1,276,3,276,3221,8,276,1,276,3,276,
        3224,8,276,1,276,1,276,1,276,1,276,1,276,1,276,3,276,3232,8,276,
        1,277,1,277,1,277,1,277,3,277,3238,8,277,1,278,1,278,3,278,3242,
        8,278,1,278,1,278,1,279,1,279,3,279,3248,8,279,1,279,1,279,3,279,
        3252,8,279,1,279,1,279,1,279,1,279,1,279,1,279,5,279,3260,8,279,
        10,279,12,279,3263,9,279,1,279,3,279,3266,8,279,3,279,3268,8,279,
        1,280,1,280,3,280,3272,8,280,1,280,1,280,3,280,3276,8,280,1,281,
        1,281,1,281,0,0,282,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,
        34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,
        78,80,82,84,86,88,90,92,94,96,98,100,102,104,106,108,110,112,114,
        116,118,120,122,124,126,128,130,132,134,136,138,140,142,144,146,
        148,150,152,154,156,158,160,162,164,166,168,170,172,174,176,178,
        180,182,184,186,188,190,192,194,196,198,200,202,204,206,208,210,
        212,214,216,218,220,222,224,226,228,230,232,234,236,238,240,242,
        244,246,248,250,252,254,256,258,260,262,264,266,268,270,272,274,
        276,278,280,282,284,286,288,290,292,294,296,298,300,302,304,306,
        308,310,312,314,316,318,320,322,324,326,328,330,332,334,336,338,
        340,342,344,346,348,350,352,354,356,358,360,362,364,366,368,370,
        372,374,376,378,380,382,384,386,388,390,392,394,396,398,400,402,
        404,406,408,410,412,414,416,418,420,422,424,426,428,430,432,434,
        436,438,440,442,444,446,448,450,452,454,456,458,460,462,464,466,
        468,470,472,474,476,478,480,482,484,486,488,490,492,494,496,498,
        500,502,504,506,508,510,512,514,516,518,520,522,524,526,528,530,
        532,534,536,538,540,542,544,546,548,550,552,554,556,558,560,562,
        0,21,8,0,22,22,25,25,57,57,66,66,88,88,92,92,104,105,109,109,2,0,
        35,35,46,46,3,0,56,56,77,77,85,85,1,0,162,163,2,0,152,153,164,165,
        1,0,141,142,1,0,143,145,14,0,19,19,22,22,25,25,30,30,35,35,46,46,
        57,57,66,66,72,72,88,88,92,92,96,96,104,105,109,109,2,0,15,15,33,
        33,2,0,16,16,108,108,12,0,9,9,16,16,42,42,59,59,69,69,78,78,80,84,
        89,89,95,95,108,108,112,112,114,114,2,0,41,41,55,55,2,0,18,18,99,
        99,2,0,143,143,154,154,2,0,56,56,77,77,2,0,43,43,101,101,20,0,9,
        9,14,14,18,20,22,32,34,35,37,38,40,48,51,51,54,59,62,62,65,66,68,
        69,71,72,75,75,77,79,81,85,87,89,92,110,112,114,117,117,7,0,9,9,
        59,59,69,69,81,83,89,89,95,95,108,108,4,0,59,59,69,69,81,84,108,
        108,10,0,9,9,42,42,59,59,69,69,78,78,81,83,89,89,95,95,108,108,112,
        112,22,0,10,10,12,13,15,17,21,21,33,33,36,36,39,39,49,50,53,53,61,
        61,63,64,67,67,73,73,76,76,80,80,86,86,90,91,107,107,111,111,115,
        116,118,118,120,120,3600,0,565,1,0,0,0,2,581,1,0,0,0,4,585,1,0,0,
        0,6,590,1,0,0,0,8,612,1,0,0,0,10,619,1,0,0,0,12,641,1,0,0,0,14,643,
        1,0,0,0,16,649,1,0,0,0,18,662,1,0,0,0,20,675,1,0,0,0,22,678,1,0,
        0,0,24,682,1,0,0,0,26,696,1,0,0,0,28,698,1,0,0,0,30,704,1,0,0,0,
        32,709,1,0,0,0,34,711,1,0,0,0,36,713,1,0,0,0,38,717,1,0,0,0,40,719,
        1,0,0,0,42,724,1,0,0,0,44,726,1,0,0,0,46,732,1,0,0,0,48,734,1,0,
        0,0,50,745,1,0,0,0,52,754,1,0,0,0,54,767,1,0,0,0,56,775,1,0,0,0,
        58,780,1,0,0,0,60,790,1,0,0,0,62,803,1,0,0,0,64,820,1,0,0,0,66,822,
        1,0,0,0,68,830,1,0,0,0,70,838,1,0,0,0,72,846,1,0,0,0,74,854,1,0,
        0,0,76,862,1,0,0,0,78,870,1,0,0,0,80,878,1,0,0,0,82,892,1,0,0,0,
        84,903,1,0,0,0,86,911,1,0,0,0,88,919,1,0,0,0,90,931,1,0,0,0,92,939,
        1,0,0,0,94,954,1,0,0,0,96,978,1,0,0,0,98,980,1,0,0,0,100,1026,1,
        0,0,0,102,1151,1,0,0,0,104,1155,1,0,0,0,106,1157,1,0,0,0,108,1161,
        1,0,0,0,110,1169,1,0,0,0,112,1185,1,0,0,0,114,1189,1,0,0,0,116,1191,
        1,0,0,0,118,1201,1,0,0,0,120,1203,1,0,0,0,122,1212,1,0,0,0,124,1225,
        1,0,0,0,126,1233,1,0,0,0,128,1235,1,0,0,0,130,1255,1,0,0,0,132,1257,
        1,0,0,0,134,1266,1,0,0,0,136,1279,1,0,0,0,138,1281,1,0,0,0,140,1302,
        1,0,0,0,142,1311,1,0,0,0,144,1328,1,0,0,0,146,1339,1,0,0,0,148,1344,
        1,0,0,0,150,1367,1,0,0,0,152,1369,1,0,0,0,154,1378,1,0,0,0,156,1383,
        1,0,0,0,158,1393,1,0,0,0,160,1395,1,0,0,0,162,1398,1,0,0,0,164,1409,
        1,0,0,0,166,1421,1,0,0,0,168,1423,1,0,0,0,170,1428,1,0,0,0,172,1431,
        1,0,0,0,174,1446,1,0,0,0,176,1455,1,0,0,0,178,1466,1,0,0,0,180,1468,
        1,0,0,0,182,1475,1,0,0,0,184,1484,1,0,0,0,186,1486,1,0,0,0,188,1490,
        1,0,0,0,190,1515,1,0,0,0,192,1522,1,0,0,0,194,1524,1,0,0,0,196,1621,
        1,0,0,0,198,1623,1,0,0,0,200,1639,1,0,0,0,202,1641,1,0,0,0,204,1644,
        1,0,0,0,206,1647,1,0,0,0,208,1655,1,0,0,0,210,1673,1,0,0,0,212,1675,
        1,0,0,0,214,1679,1,0,0,0,216,1690,1,0,0,0,218,1692,1,0,0,0,220,1706,
        1,0,0,0,222,1708,1,0,0,0,224,1715,1,0,0,0,226,1729,1,0,0,0,228,1731,
        1,0,0,0,230,1770,1,0,0,0,232,1772,1,0,0,0,234,1777,1,0,0,0,236,1790,
        1,0,0,0,238,1792,1,0,0,0,240,1805,1,0,0,0,242,1807,1,0,0,0,244,1812,
        1,0,0,0,246,1834,1,0,0,0,248,1836,1,0,0,0,250,1840,1,0,0,0,252,1853,
        1,0,0,0,254,1855,1,0,0,0,256,1874,1,0,0,0,258,1876,1,0,0,0,260,1888,
        1,0,0,0,262,1894,1,0,0,0,264,1899,1,0,0,0,266,1904,1,0,0,0,268,1906,
        1,0,0,0,270,1912,1,0,0,0,272,1932,1,0,0,0,274,1935,1,0,0,0,276,1939,
        1,0,0,0,278,1945,1,0,0,0,280,1973,1,0,0,0,282,1976,1,0,0,0,284,1984,
        1,0,0,0,286,1987,1,0,0,0,288,2000,1,0,0,0,290,2021,1,0,0,0,292,2036,
        1,0,0,0,294,2038,1,0,0,0,296,2047,1,0,0,0,298,2052,1,0,0,0,300,2058,
        1,0,0,0,302,2070,1,0,0,0,304,2074,1,0,0,0,306,2083,1,0,0,0,308,2092,
        1,0,0,0,310,2096,1,0,0,0,312,2111,1,0,0,0,314,2120,1,0,0,0,316,2131,
        1,0,0,0,318,2134,1,0,0,0,320,2142,1,0,0,0,322,2153,1,0,0,0,324,2165,
        1,0,0,0,326,2167,1,0,0,0,328,2171,1,0,0,0,330,2175,1,0,0,0,332,2178,
        1,0,0,0,334,2181,1,0,0,0,336,2183,1,0,0,0,338,2185,1,0,0,0,340,2187,
        1,0,0,0,342,2190,1,0,0,0,344,2192,1,0,0,0,346,2206,1,0,0,0,348,2214,
        1,0,0,0,350,2218,1,0,0,0,352,2225,1,0,0,0,354,2230,1,0,0,0,356,2240,
        1,0,0,0,358,2244,1,0,0,0,360,2265,1,0,0,0,362,2272,1,0,0,0,364,2286,
        1,0,0,0,366,2294,1,0,0,0,368,2298,1,0,0,0,370,2306,1,0,0,0,372,2313,
        1,0,0,0,374,2317,1,0,0,0,376,2319,1,0,0,0,378,2327,1,0,0,0,380,2335,
        1,0,0,0,382,2337,1,0,0,0,384,2353,1,0,0,0,386,2363,1,0,0,0,388,2366,
        1,0,0,0,390,2373,1,0,0,0,392,2401,1,0,0,0,394,2407,1,0,0,0,396,2416,
        1,0,0,0,398,2436,1,0,0,0,400,2444,1,0,0,0,402,2447,1,0,0,0,404,2460,
        1,0,0,0,406,2466,1,0,0,0,408,2493,1,0,0,0,410,2495,1,0,0,0,412,2502,
        1,0,0,0,414,2516,1,0,0,0,416,2518,1,0,0,0,418,2530,1,0,0,0,420,2533,
        1,0,0,0,422,2550,1,0,0,0,424,2562,1,0,0,0,426,2571,1,0,0,0,428,2587,
        1,0,0,0,430,2599,1,0,0,0,432,2606,1,0,0,0,434,2608,1,0,0,0,436,2611,
        1,0,0,0,438,2621,1,0,0,0,440,2692,1,0,0,0,442,2714,1,0,0,0,444,2717,
        1,0,0,0,446,2734,1,0,0,0,448,2741,1,0,0,0,450,2752,1,0,0,0,452,2755,
        1,0,0,0,454,2784,1,0,0,0,456,2788,1,0,0,0,458,2790,1,0,0,0,460,2798,
        1,0,0,0,462,2816,1,0,0,0,464,2835,1,0,0,0,466,2837,1,0,0,0,468,2845,
        1,0,0,0,470,2854,1,0,0,0,472,2856,1,0,0,0,474,2861,1,0,0,0,476,2865,
        1,0,0,0,478,2869,1,0,0,0,480,2881,1,0,0,0,482,2883,1,0,0,0,484,2889,
        1,0,0,0,486,2891,1,0,0,0,488,2900,1,0,0,0,490,2917,1,0,0,0,492,2923,
        1,0,0,0,494,2925,1,0,0,0,496,2936,1,0,0,0,498,2938,1,0,0,0,500,2944,
        1,0,0,0,502,2946,1,0,0,0,504,2951,1,0,0,0,506,2972,1,0,0,0,508,2977,
        1,0,0,0,510,3004,1,0,0,0,512,3006,1,0,0,0,514,3021,1,0,0,0,516,3030,
        1,0,0,0,518,3046,1,0,0,0,520,3058,1,0,0,0,522,3061,1,0,0,0,524,3077,
        1,0,0,0,526,3082,1,0,0,0,528,3096,1,0,0,0,530,3102,1,0,0,0,532,3133,
        1,0,0,0,534,3155,1,0,0,0,536,3160,1,0,0,0,538,3165,1,0,0,0,540,3168,
        1,0,0,0,542,3173,1,0,0,0,544,3181,1,0,0,0,546,3190,1,0,0,0,548,3192,
        1,0,0,0,550,3199,1,0,0,0,552,3211,1,0,0,0,554,3233,1,0,0,0,556,3239,
        1,0,0,0,558,3267,1,0,0,0,560,3269,1,0,0,0,562,3277,1,0,0,0,564,566,
        5,1,0,0,565,564,1,0,0,0,565,566,1,0,0,0,566,570,1,0,0,0,567,569,
        3,2,1,0,568,567,1,0,0,0,569,572,1,0,0,0,570,568,1,0,0,0,570,571,
        1,0,0,0,571,573,1,0,0,0,572,570,1,0,0,0,573,574,5,0,0,1,574,1,1,
        0,0,0,575,582,3,274,137,0,576,582,3,278,139,0,577,582,3,448,224,
        0,578,582,3,4,2,0,579,582,3,282,141,0,580,582,3,6,3,0,581,575,1,
        0,0,0,581,576,1,0,0,0,581,577,1,0,0,0,581,578,1,0,0,0,581,579,1,
        0,0,0,581,580,1,0,0,0,582,3,1,0,0,0,583,586,3,182,91,0,584,586,3,
        286,143,0,585,583,1,0,0,0,585,584,1,0,0,0,586,587,1,0,0,0,587,585,
        1,0,0,0,587,588,1,0,0,0,588,5,1,0,0,0,589,591,3,8,4,0,590,589,1,
        0,0,0,591,592,1,0,0,0,592,590,1,0,0,0,592,593,1,0,0,0,593,7,1,0,
        0,0,594,595,5,52,0,0,595,596,5,110,0,0,596,597,3,562,281,0,597,598,
        5,151,0,0,598,599,3,10,5,0,599,600,5,140,0,0,600,613,1,0,0,0,601,
        602,5,52,0,0,602,603,5,110,0,0,603,604,3,10,5,0,604,605,5,140,0,
        0,605,613,1,0,0,0,606,607,5,52,0,0,607,608,5,110,0,0,608,609,5,95,
        0,0,609,610,3,10,5,0,610,611,5,140,0,0,611,613,1,0,0,0,612,594,1,
        0,0,0,612,601,1,0,0,0,612,606,1,0,0,0,613,9,1,0,0,0,614,616,3,562,
        281,0,615,617,3,48,24,0,616,615,1,0,0,0,616,617,1,0,0,0,617,620,
        1,0,0,0,618,620,3,298,149,0,619,614,1,0,0,0,619,618,1,0,0,0,620,
        628,1,0,0,0,621,622,5,137,0,0,622,624,3,562,281,0,623,625,3,48,24,
        0,624,623,1,0,0,0,624,625,1,0,0,0,625,627,1,0,0,0,626,621,1,0,0,
        0,627,630,1,0,0,0,628,626,1,0,0,0,628,629,1,0,0,0,629,11,1,0,0,0,
        630,628,1,0,0,0,631,637,3,18,9,0,632,636,5,154,0,0,633,636,3,424,
        212,0,634,636,5,143,0,0,635,632,1,0,0,0,635,633,1,0,0,0,635,634,
        1,0,0,0,636,639,1,0,0,0,637,635,1,0,0,0,637,638,1,0,0,0,638,642,
        1,0,0,0,639,637,1,0,0,0,640,642,3,14,7,0,641,631,1,0,0,0,641,640,
        1,0,0,0,642,13,1,0,0,0,643,644,5,32,0,0,644,645,5,143,0,0,645,646,
        5,152,0,0,646,647,3,16,8,0,647,648,5,153,0,0,648,15,1,0,0,0,649,
        654,3,12,6,0,650,651,5,138,0,0,651,653,3,12,6,0,652,650,1,0,0,0,
        653,656,1,0,0,0,654,652,1,0,0,0,654,655,1,0,0,0,655,17,1,0,0,0,656,
        654,1,0,0,0,657,663,3,30,15,0,658,663,3,46,23,0,659,660,5,113,0,
        0,660,663,5,143,0,0,661,663,3,20,10,0,662,657,1,0,0,0,662,658,1,
        0,0,0,662,659,1,0,0,0,662,661,1,0,0,0,663,19,1,0,0,0,664,665,5,135,
        0,0,665,668,3,28,14,0,666,667,5,138,0,0,667,669,3,28,14,0,668,666,
        1,0,0,0,669,670,1,0,0,0,670,668,1,0,0,0,670,671,1,0,0,0,671,672,
        1,0,0,0,672,673,5,136,0,0,673,676,1,0,0,0,674,676,3,22,11,0,675,
        664,1,0,0,0,675,674,1,0,0,0,676,21,1,0,0,0,677,679,5,111,0,0,678,
        677,1,0,0,0,678,679,1,0,0,0,679,680,1,0,0,0,680,681,3,24,12,0,681,
        23,1,0,0,0,682,683,5,135,0,0,683,686,3,26,13,0,684,685,5,138,0,0,
        685,687,3,26,13,0,686,684,1,0,0,0,687,688,1,0,0,0,688,686,1,0,0,
        0,688,689,1,0,0,0,689,690,1,0,0,0,690,691,5,136,0,0,691,25,1,0,0,
        0,692,697,3,24,12,0,693,695,3,562,281,0,694,693,1,0,0,0,694,695,
        1,0,0,0,695,697,1,0,0,0,696,692,1,0,0,0,696,694,1,0,0,0,697,27,1,
        0,0,0,698,700,3,12,6,0,699,701,3,562,281,0,700,699,1,0,0,0,700,701,
        1,0,0,0,701,29,1,0,0,0,702,705,3,32,16,0,703,705,5,19,0,0,704,702,
        1,0,0,0,704,703,1,0,0,0,705,31,1,0,0,0,706,710,3,34,17,0,707,710,
        3,36,18,0,708,710,5,30,0,0,709,706,1,0,0,0,709,707,1,0,0,0,709,708,
        1,0,0,0,710,33,1,0,0,0,711,712,7,0,0,0,712,35,1,0,0,0,713,714,7,
        1,0,0,714,37,1,0,0,0,715,718,3,40,20,0,716,718,3,42,21,0,717,715,
        1,0,0,0,717,716,1,0,0,0,718,39,1,0,0,0,719,720,5,31,0,0,720,721,
        5,135,0,0,721,722,3,12,6,0,722,723,5,136,0,0,723,41,1,0,0,0,724,
        725,5,31,0,0,725,43,1,0,0,0,726,727,3,56,28,0,727,45,1,0,0,0,728,
        733,3,10,5,0,729,733,5,72,0,0,730,733,5,36,0,0,731,733,5,96,0,0,
        732,728,1,0,0,0,732,729,1,0,0,0,732,730,1,0,0,0,732,731,1,0,0,0,
        733,47,1,0,0,0,734,735,5,152,0,0,735,740,3,12,6,0,736,737,5,138,
        0,0,737,739,3,12,6,0,738,736,1,0,0,0,739,742,1,0,0,0,740,738,1,0,
        0,0,740,741,1,0,0,0,741,743,1,0,0,0,742,740,1,0,0,0,743,744,5,153,
        0,0,744,49,1,0,0,0,745,750,3,52,26,0,746,747,5,138,0,0,747,749,3,
        52,26,0,748,746,1,0,0,0,749,752,1,0,0,0,750,748,1,0,0,0,750,751,
        1,0,0,0,751,51,1,0,0,0,752,750,1,0,0,0,753,755,3,54,27,0,754,753,
        1,0,0,0,754,755,1,0,0,0,755,757,1,0,0,0,756,758,7,2,0,0,757,756,
        1,0,0,0,757,758,1,0,0,0,758,765,1,0,0,0,759,766,3,56,28,0,760,763,
        5,111,0,0,761,763,3,12,6,0,762,760,1,0,0,0,762,761,1,0,0,0,763,764,
        1,0,0,0,764,766,3,56,28,0,765,759,1,0,0,0,765,762,1,0,0,0,766,53,
        1,0,0,0,767,768,3,562,281,0,768,769,5,139,0,0,769,55,1,0,0,0,770,
        776,3,60,30,0,771,776,3,58,29,0,772,773,5,85,0,0,773,776,3,58,29,
        0,774,776,3,148,74,0,775,770,1,0,0,0,775,771,1,0,0,0,775,772,1,0,
        0,0,775,774,1,0,0,0,776,57,1,0,0,0,777,781,3,148,74,0,778,781,3,
        160,80,0,779,781,3,64,32,0,780,777,1,0,0,0,780,778,1,0,0,0,780,779,
        1,0,0,0,781,59,1,0,0,0,782,783,3,96,48,0,783,784,3,62,31,0,784,785,
        3,56,28,0,785,791,1,0,0,0,786,787,3,96,48,0,787,788,5,176,0,0,788,
        789,3,104,52,0,789,791,1,0,0,0,790,782,1,0,0,0,790,786,1,0,0,0,791,
        61,1,0,0,0,792,804,5,151,0,0,793,804,5,166,0,0,794,804,5,167,0,0,
        795,804,5,168,0,0,796,804,5,169,0,0,797,804,5,170,0,0,798,804,5,
        171,0,0,799,804,5,172,0,0,800,804,5,173,0,0,801,804,5,175,0,0,802,
        804,3,478,239,0,803,792,1,0,0,0,803,793,1,0,0,0,803,794,1,0,0,0,
        803,795,1,0,0,0,803,796,1,0,0,0,803,797,1,0,0,0,803,798,1,0,0,0,
        803,799,1,0,0,0,803,800,1,0,0,0,803,801,1,0,0,0,803,802,1,0,0,0,
        804,63,1,0,0,0,805,821,3,66,33,0,806,807,3,66,33,0,807,808,5,154,
        0,0,808,809,3,56,28,0,809,810,5,139,0,0,810,811,3,56,28,0,811,821,
        1,0,0,0,812,813,3,66,33,0,813,814,5,154,0,0,814,815,5,85,0,0,815,
        816,3,44,22,0,816,817,5,139,0,0,817,818,5,85,0,0,818,819,3,44,22,
        0,819,821,1,0,0,0,820,805,1,0,0,0,820,806,1,0,0,0,820,812,1,0,0,
        0,821,65,1,0,0,0,822,828,3,68,34,0,823,826,5,156,0,0,824,827,3,66,
        33,0,825,827,3,106,53,0,826,824,1,0,0,0,826,825,1,0,0,0,827,829,
        1,0,0,0,828,823,1,0,0,0,828,829,1,0,0,0,829,67,1,0,0,0,830,835,3,
        70,35,0,831,832,5,160,0,0,832,834,3,70,35,0,833,831,1,0,0,0,834,
        837,1,0,0,0,835,833,1,0,0,0,835,836,1,0,0,0,836,69,1,0,0,0,837,835,
        1,0,0,0,838,843,3,72,36,0,839,840,5,159,0,0,840,842,3,72,36,0,841,
        839,1,0,0,0,842,845,1,0,0,0,843,841,1,0,0,0,843,844,1,0,0,0,844,
        71,1,0,0,0,845,843,1,0,0,0,846,851,3,74,37,0,847,848,5,147,0,0,848,
        850,3,74,37,0,849,847,1,0,0,0,850,853,1,0,0,0,851,849,1,0,0,0,851,
        852,1,0,0,0,852,73,1,0,0,0,853,851,1,0,0,0,854,859,3,76,38,0,855,
        856,5,148,0,0,856,858,3,76,38,0,857,855,1,0,0,0,858,861,1,0,0,0,
        859,857,1,0,0,0,859,860,1,0,0,0,860,75,1,0,0,0,861,859,1,0,0,0,862,
        867,3,78,39,0,863,864,5,146,0,0,864,866,3,78,39,0,865,863,1,0,0,
        0,866,869,1,0,0,0,867,865,1,0,0,0,867,868,1,0,0,0,868,77,1,0,0,0,
        869,867,1,0,0,0,870,875,3,80,40,0,871,872,7,3,0,0,872,874,3,80,40,
        0,873,871,1,0,0,0,874,877,1,0,0,0,875,873,1,0,0,0,875,876,1,0,0,
        0,876,79,1,0,0,0,877,875,1,0,0,0,878,889,3,82,41,0,879,880,7,4,0,
        0,880,888,3,82,41,0,881,882,5,62,0,0,882,888,3,142,71,0,883,884,
        5,14,0,0,884,888,3,142,71,0,885,886,5,62,0,0,886,888,3,316,158,0,
        887,879,1,0,0,0,887,881,1,0,0,0,887,883,1,0,0,0,887,885,1,0,0,0,
        888,891,1,0,0,0,889,887,1,0,0,0,889,890,1,0,0,0,890,81,1,0,0,0,891,
        889,1,0,0,0,892,900,3,84,42,0,893,896,5,174,0,0,894,896,3,476,238,
        0,895,893,1,0,0,0,895,894,1,0,0,0,896,897,1,0,0,0,897,899,3,84,42,
        0,898,895,1,0,0,0,899,902,1,0,0,0,900,898,1,0,0,0,900,901,1,0,0,
        0,901,83,1,0,0,0,902,900,1,0,0,0,903,908,3,86,43,0,904,905,7,5,0,
        0,905,907,3,86,43,0,906,904,1,0,0,0,907,910,1,0,0,0,908,906,1,0,
        0,0,908,909,1,0,0,0,909,85,1,0,0,0,910,908,1,0,0,0,911,916,3,88,
        44,0,912,913,7,6,0,0,913,915,3,88,44,0,914,912,1,0,0,0,915,918,1,
        0,0,0,916,914,1,0,0,0,916,917,1,0,0,0,917,87,1,0,0,0,918,916,1,0,
        0,0,919,929,3,94,47,0,920,921,5,98,0,0,921,926,5,131,0,0,922,924,
        3,90,45,0,923,925,5,138,0,0,924,923,1,0,0,0,924,925,1,0,0,0,925,
        927,1,0,0,0,926,922,1,0,0,0,926,927,1,0,0,0,927,928,1,0,0,0,928,
        930,5,132,0,0,929,920,1,0,0,0,929,930,1,0,0,0,930,89,1,0,0,0,931,
        936,3,92,46,0,932,933,5,138,0,0,933,935,3,92,46,0,934,932,1,0,0,
        0,935,938,1,0,0,0,936,934,1,0,0,0,936,937,1,0,0,0,937,91,1,0,0,0,
        938,936,1,0,0,0,939,941,3,316,158,0,940,942,3,248,124,0,941,940,
        1,0,0,0,941,942,1,0,0,0,942,943,1,0,0,0,943,944,3,474,237,0,944,
        945,3,104,52,0,945,93,1,0,0,0,946,955,3,96,48,0,947,949,3,96,48,
        0,948,947,1,0,0,0,948,949,1,0,0,0,949,950,1,0,0,0,950,952,5,177,
        0,0,951,953,3,96,48,0,952,951,1,0,0,0,952,953,1,0,0,0,953,955,1,
        0,0,0,954,946,1,0,0,0,954,948,1,0,0,0,955,95,1,0,0,0,956,979,3,98,
        49,0,957,979,3,100,50,0,958,959,5,141,0,0,959,979,3,96,48,0,960,
        961,5,142,0,0,961,979,3,96,48,0,962,963,5,149,0,0,963,979,3,96,48,
        0,964,965,5,150,0,0,965,979,3,96,48,0,966,967,5,157,0,0,967,979,
        3,96,48,0,968,969,5,158,0,0,969,979,3,96,48,0,970,971,5,17,0,0,971,
        979,3,96,48,0,972,973,5,146,0,0,973,979,3,96,48,0,974,975,5,143,
        0,0,975,979,3,96,48,0,976,977,5,148,0,0,977,979,3,96,48,0,978,956,
        1,0,0,0,978,957,1,0,0,0,978,958,1,0,0,0,978,960,1,0,0,0,978,962,
        1,0,0,0,978,964,1,0,0,0,978,966,1,0,0,0,978,968,1,0,0,0,978,970,
        1,0,0,0,978,972,1,0,0,0,978,974,1,0,0,0,978,976,1,0,0,0,979,97,1,
        0,0,0,980,981,5,135,0,0,981,982,3,12,6,0,982,983,5,136,0,0,983,984,
        3,96,48,0,984,99,1,0,0,0,985,987,3,102,51,0,986,988,5,149,0,0,987,
        986,1,0,0,0,987,988,1,0,0,0,988,992,1,0,0,0,989,991,3,110,55,0,990,
        989,1,0,0,0,991,994,1,0,0,0,992,990,1,0,0,0,992,993,1,0,0,0,993,
        996,1,0,0,0,994,992,1,0,0,0,995,997,5,149,0,0,996,995,1,0,0,0,996,
        997,1,0,0,0,997,1020,1,0,0,0,998,1005,3,108,54,0,999,1005,3,556,
        278,0,1000,1005,5,157,0,0,1001,1005,5,158,0,0,1002,1003,5,161,0,
        0,1003,1005,3,562,281,0,1004,998,1,0,0,0,1004,999,1,0,0,0,1004,1000,
        1,0,0,0,1004,1001,1,0,0,0,1004,1002,1,0,0,0,1005,1007,1,0,0,0,1006,
        1008,5,149,0,0,1007,1006,1,0,0,0,1007,1008,1,0,0,0,1008,1012,1,0,
        0,0,1009,1011,3,110,55,0,1010,1009,1,0,0,0,1011,1014,1,0,0,0,1012,
        1010,1,0,0,0,1012,1013,1,0,0,0,1013,1016,1,0,0,0,1014,1012,1,0,0,
        0,1015,1017,5,149,0,0,1016,1015,1,0,0,0,1016,1017,1,0,0,0,1017,1019,
        1,0,0,0,1018,1004,1,0,0,0,1019,1022,1,0,0,0,1020,1018,1,0,0,0,1020,
        1021,1,0,0,0,1021,1027,1,0,0,0,1022,1020,1,0,0,0,1023,1027,3,20,
        10,0,1024,1027,3,38,19,0,1025,1027,3,210,105,0,1026,985,1,0,0,0,
        1026,1023,1,0,0,0,1026,1024,1,0,0,0,1026,1025,1,0,0,0,1027,101,1,
        0,0,0,1028,1152,3,480,240,0,1029,1031,3,562,281,0,1030,1032,3,48,
        24,0,1031,1030,1,0,0,0,1031,1032,1,0,0,0,1032,1152,1,0,0,0,1033,
        1034,5,135,0,0,1034,1035,3,56,28,0,1035,1036,5,136,0,0,1036,1152,
        1,0,0,0,1037,1152,3,114,57,0,1038,1152,3,298,149,0,1039,1152,5,121,
        0,0,1040,1152,5,99,0,0,1041,1051,5,18,0,0,1042,1043,5,137,0,0,1043,
        1045,3,562,281,0,1044,1046,3,48,24,0,1045,1044,1,0,0,0,1045,1046,
        1,0,0,0,1046,1052,1,0,0,0,1047,1048,5,133,0,0,1048,1049,3,116,58,
        0,1049,1050,5,134,0,0,1050,1052,1,0,0,0,1051,1042,1,0,0,0,1051,1047,
        1,0,0,0,1052,1152,1,0,0,0,1053,1082,5,69,0,0,1054,1076,3,12,6,0,
        1055,1077,3,558,279,0,1056,1077,3,118,59,0,1057,1058,5,133,0,0,1058,
        1059,3,116,58,0,1059,1063,5,134,0,0,1060,1062,3,424,212,0,1061,1060,
        1,0,0,0,1062,1065,1,0,0,0,1063,1061,1,0,0,0,1063,1064,1,0,0,0,1064,
        1067,1,0,0,0,1065,1063,1,0,0,0,1066,1068,3,426,213,0,1067,1066,1,
        0,0,0,1067,1068,1,0,0,0,1068,1077,1,0,0,0,1069,1071,3,424,212,0,
        1070,1069,1,0,0,0,1071,1072,1,0,0,0,1072,1070,1,0,0,0,1072,1073,
        1,0,0,0,1073,1074,1,0,0,0,1074,1075,3,426,213,0,1075,1077,1,0,0,
        0,1076,1055,1,0,0,0,1076,1056,1,0,0,0,1076,1057,1,0,0,0,1076,1070,
        1,0,0,0,1077,1083,1,0,0,0,1078,1083,3,132,66,0,1079,1080,3,424,212,
        0,1080,1081,3,426,213,0,1081,1083,1,0,0,0,1082,1054,1,0,0,0,1082,
        1078,1,0,0,0,1082,1079,1,0,0,0,1082,1083,1,0,0,0,1083,1152,1,0,0,
        0,1084,1085,5,69,0,0,1085,1152,3,560,280,0,1086,1087,5,135,0,0,1087,
        1090,3,52,26,0,1088,1089,5,138,0,0,1089,1091,3,52,26,0,1090,1088,
        1,0,0,0,1091,1092,1,0,0,0,1092,1090,1,0,0,0,1092,1093,1,0,0,0,1093,
        1094,1,0,0,0,1094,1095,5,136,0,0,1095,1152,1,0,0,0,1096,1097,5,103,
        0,0,1097,1101,5,135,0,0,1098,1102,3,138,69,0,1099,1102,3,12,6,0,
        1100,1102,5,113,0,0,1101,1098,1,0,0,0,1101,1099,1,0,0,0,1101,1100,
        1,0,0,0,1102,1103,1,0,0,0,1103,1152,5,136,0,0,1104,1105,5,26,0,0,
        1105,1106,5,135,0,0,1106,1107,3,56,28,0,1107,1108,5,136,0,0,1108,
        1152,1,0,0,0,1109,1110,5,106,0,0,1110,1111,5,135,0,0,1111,1112,3,
        56,28,0,1112,1113,5,136,0,0,1113,1152,1,0,0,0,1114,1119,5,31,0,0,
        1115,1116,5,135,0,0,1116,1117,3,12,6,0,1117,1118,5,136,0,0,1118,
        1120,1,0,0,0,1119,1115,1,0,0,0,1119,1120,1,0,0,0,1120,1152,1,0,0,
        0,1121,1123,5,16,0,0,1122,1121,1,0,0,0,1122,1123,1,0,0,0,1123,1124,
        1,0,0,0,1124,1130,5,32,0,0,1125,1127,5,135,0,0,1126,1128,3,152,76,
        0,1127,1126,1,0,0,0,1127,1128,1,0,0,0,1128,1129,1,0,0,0,1129,1131,
        5,136,0,0,1130,1125,1,0,0,0,1130,1131,1,0,0,0,1131,1132,1,0,0,0,
        1132,1152,3,228,114,0,1133,1134,5,93,0,0,1134,1135,5,135,0,0,1135,
        1136,3,12,6,0,1136,1137,5,136,0,0,1137,1152,1,0,0,0,1138,1139,5,
        67,0,0,1139,1145,5,135,0,0,1140,1141,3,562,281,0,1141,1142,5,137,
        0,0,1142,1144,1,0,0,0,1143,1140,1,0,0,0,1144,1147,1,0,0,0,1145,1143,
        1,0,0,0,1145,1146,1,0,0,0,1146,1148,1,0,0,0,1147,1145,1,0,0,0,1148,
        1149,3,562,281,0,1149,1150,5,136,0,0,1150,1152,1,0,0,0,1151,1028,
        1,0,0,0,1151,1029,1,0,0,0,1151,1033,1,0,0,0,1151,1037,1,0,0,0,1151,
        1038,1,0,0,0,1151,1039,1,0,0,0,1151,1040,1,0,0,0,1151,1041,1,0,0,
        0,1151,1053,1,0,0,0,1151,1084,1,0,0,0,1151,1086,1,0,0,0,1151,1096,
        1,0,0,0,1151,1104,1,0,0,0,1151,1109,1,0,0,0,1151,1114,1,0,0,0,1151,
        1122,1,0,0,0,1151,1133,1,0,0,0,1151,1138,1,0,0,0,1152,103,1,0,0,
        0,1153,1156,3,56,28,0,1154,1156,3,106,53,0,1155,1153,1,0,0,0,1155,
        1154,1,0,0,0,1156,105,1,0,0,0,1157,1158,5,100,0,0,1158,1159,3,56,
        28,0,1159,107,1,0,0,0,1160,1162,5,154,0,0,1161,1160,1,0,0,0,1161,
        1162,1,0,0,0,1162,1163,1,0,0,0,1163,1164,5,137,0,0,1164,1166,3,562,
        281,0,1165,1167,3,48,24,0,1166,1165,1,0,0,0,1166,1167,1,0,0,0,1167,
        109,1,0,0,0,1168,1170,5,154,0,0,1169,1168,1,0,0,0,1169,1170,1,0,
        0,0,1170,1171,1,0,0,0,1171,1172,5,133,0,0,1172,1177,3,112,56,0,1173,
        1174,5,138,0,0,1174,1176,3,112,56,0,1175,1173,1,0,0,0,1176,1179,
        1,0,0,0,1177,1175,1,0,0,0,1177,1178,1,0,0,0,1178,1180,1,0,0,0,1179,
        1177,1,0,0,0,1180,1181,5,134,0,0,1181,111,1,0,0,0,1182,1183,3,562,
        281,0,1183,1184,5,139,0,0,1184,1186,1,0,0,0,1185,1182,1,0,0,0,1185,
        1186,1,0,0,0,1186,1187,1,0,0,0,1187,1188,3,56,28,0,1188,113,1,0,
        0,0,1189,1190,7,7,0,0,1190,115,1,0,0,0,1191,1196,3,56,28,0,1192,
        1193,5,138,0,0,1193,1195,3,56,28,0,1194,1192,1,0,0,0,1195,1198,1,
        0,0,0,1196,1194,1,0,0,0,1196,1197,1,0,0,0,1197,117,1,0,0,0,1198,
        1196,1,0,0,0,1199,1202,3,120,60,0,1200,1202,3,128,64,0,1201,1199,
        1,0,0,0,1201,1200,1,0,0,0,1202,119,1,0,0,0,1203,1208,5,131,0,0,1204,
        1206,3,122,61,0,1205,1207,5,138,0,0,1206,1205,1,0,0,0,1206,1207,
        1,0,0,0,1207,1209,1,0,0,0,1208,1204,1,0,0,0,1208,1209,1,0,0,0,1209,
        1210,1,0,0,0,1210,1211,5,132,0,0,1211,121,1,0,0,0,1212,1217,3,124,
        62,0,1213,1214,5,138,0,0,1214,1216,3,124,62,0,1215,1213,1,0,0,0,
        1216,1219,1,0,0,0,1217,1215,1,0,0,0,1217,1218,1,0,0,0,1218,123,1,
        0,0,0,1219,1217,1,0,0,0,1220,1226,3,562,281,0,1221,1222,5,133,0,
        0,1222,1223,3,56,28,0,1223,1224,5,134,0,0,1224,1226,1,0,0,0,1225,
        1220,1,0,0,0,1225,1221,1,0,0,0,1226,1227,1,0,0,0,1227,1228,5,151,
        0,0,1228,1229,3,126,63,0,1229,125,1,0,0,0,1230,1234,3,56,28,0,1231,
        1234,3,118,59,0,1232,1234,3,20,10,0,1233,1230,1,0,0,0,1233,1231,
        1,0,0,0,1233,1232,1,0,0,0,1234,127,1,0,0,0,1235,1236,5,131,0,0,1236,
        1241,3,130,65,0,1237,1238,5,138,0,0,1238,1240,3,130,65,0,1239,1237,
        1,0,0,0,1240,1243,1,0,0,0,1241,1239,1,0,0,0,1241,1242,1,0,0,0,1242,
        1245,1,0,0,0,1243,1241,1,0,0,0,1244,1246,5,138,0,0,1245,1244,1,0,
        0,0,1245,1246,1,0,0,0,1246,1247,1,0,0,0,1247,1248,5,132,0,0,1248,
        129,1,0,0,0,1249,1256,3,58,29,0,1250,1251,5,131,0,0,1251,1252,3,
        116,58,0,1252,1253,5,132,0,0,1253,1256,1,0,0,0,1254,1256,3,56,28,
        0,1255,1249,1,0,0,0,1255,1250,1,0,0,0,1255,1254,1,0,0,0,1256,131,
        1,0,0,0,1257,1262,5,131,0,0,1258,1260,3,134,67,0,1259,1261,5,138,
        0,0,1260,1259,1,0,0,0,1260,1261,1,0,0,0,1261,1263,1,0,0,0,1262,1258,
        1,0,0,0,1262,1263,1,0,0,0,1263,1264,1,0,0,0,1264,1265,5,132,0,0,
        1265,133,1,0,0,0,1266,1271,3,136,68,0,1267,1268,5,138,0,0,1268,1270,
        3,136,68,0,1269,1267,1,0,0,0,1270,1273,1,0,0,0,1271,1269,1,0,0,0,
        1271,1272,1,0,0,0,1272,135,1,0,0,0,1273,1271,1,0,0,0,1274,1280,3,
        100,50,0,1275,1276,3,562,281,0,1276,1277,5,151,0,0,1277,1278,3,56,
        28,0,1278,1280,1,0,0,0,1279,1274,1,0,0,0,1279,1275,1,0,0,0,1280,
        137,1,0,0,0,1281,1290,3,562,281,0,1282,1284,3,140,70,0,1283,1282,
        1,0,0,0,1283,1284,1,0,0,0,1284,1291,1,0,0,0,1285,1286,5,155,0,0,
        1286,1288,3,562,281,0,1287,1289,3,140,70,0,1288,1287,1,0,0,0,1288,
        1289,1,0,0,0,1289,1291,1,0,0,0,1290,1283,1,0,0,0,1290,1285,1,0,0,
        0,1291,1299,1,0,0,0,1292,1293,5,137,0,0,1293,1295,3,562,281,0,1294,
        1296,3,140,70,0,1295,1294,1,0,0,0,1295,1296,1,0,0,0,1296,1298,1,
        0,0,0,1297,1292,1,0,0,0,1298,1301,1,0,0,0,1299,1297,1,0,0,0,1299,
        1300,1,0,0,0,1300,139,1,0,0,0,1301,1299,1,0,0,0,1302,1306,5,152,
        0,0,1303,1305,5,138,0,0,1304,1303,1,0,0,0,1305,1308,1,0,0,0,1306,
        1304,1,0,0,0,1306,1307,1,0,0,0,1307,1309,1,0,0,0,1308,1306,1,0,0,
        0,1309,1310,5,153,0,0,1310,141,1,0,0,0,1311,1316,3,18,9,0,1312,1315,
        3,424,212,0,1313,1315,5,143,0,0,1314,1312,1,0,0,0,1314,1313,1,0,
        0,0,1315,1318,1,0,0,0,1316,1314,1,0,0,0,1316,1317,1,0,0,0,1317,1320,
        1,0,0,0,1318,1316,1,0,0,0,1319,1321,5,154,0,0,1320,1319,1,0,0,0,
        1320,1321,1,0,0,0,1321,1323,1,0,0,0,1322,1324,3,144,72,0,1323,1322,
        1,0,0,0,1323,1324,1,0,0,0,1324,1326,1,0,0,0,1325,1327,3,562,281,
        0,1326,1325,1,0,0,0,1326,1327,1,0,0,0,1327,143,1,0,0,0,1328,1329,
        5,131,0,0,1329,1334,3,146,73,0,1330,1331,5,138,0,0,1331,1333,3,146,
        73,0,1332,1330,1,0,0,0,1333,1336,1,0,0,0,1334,1332,1,0,0,0,1334,
        1335,1,0,0,0,1335,1337,1,0,0,0,1336,1334,1,0,0,0,1337,1338,5,132,
        0,0,1338,145,1,0,0,0,1339,1340,3,562,281,0,1340,1341,5,139,0,0,1341,
        1342,3,56,28,0,1342,147,1,0,0,0,1343,1345,3,452,226,0,1344,1343,
        1,0,0,0,1344,1345,1,0,0,0,1345,1347,1,0,0,0,1346,1348,5,16,0,0,1347,
        1346,1,0,0,0,1347,1348,1,0,0,0,1348,1350,1,0,0,0,1349,1351,5,95,
        0,0,1350,1349,1,0,0,0,1350,1351,1,0,0,0,1351,1352,1,0,0,0,1352,1353,
        3,150,75,0,1353,1354,3,474,237,0,1354,1355,3,158,79,0,1355,149,1,
        0,0,0,1356,1357,5,135,0,0,1357,1368,5,136,0,0,1358,1359,5,135,0,
        0,1359,1360,3,152,76,0,1360,1361,5,136,0,0,1361,1368,1,0,0,0,1362,
        1363,5,135,0,0,1363,1364,3,156,78,0,1364,1365,5,136,0,0,1365,1368,
        1,0,0,0,1366,1368,3,562,281,0,1367,1356,1,0,0,0,1367,1358,1,0,0,
        0,1367,1362,1,0,0,0,1367,1366,1,0,0,0,1368,151,1,0,0,0,1369,1374,
        3,154,77,0,1370,1371,5,138,0,0,1371,1373,3,154,77,0,1372,1370,1,
        0,0,0,1373,1376,1,0,0,0,1374,1372,1,0,0,0,1374,1375,1,0,0,0,1375,
        153,1,0,0,0,1376,1374,1,0,0,0,1377,1379,7,2,0,0,1378,1377,1,0,0,
        0,1378,1379,1,0,0,0,1379,1380,1,0,0,0,1380,1381,3,12,6,0,1381,1382,
        3,562,281,0,1382,155,1,0,0,0,1383,1388,3,562,281,0,1384,1385,5,138,
        0,0,1385,1387,3,562,281,0,1386,1384,1,0,0,0,1387,1390,1,0,0,0,1388,
        1386,1,0,0,0,1388,1389,1,0,0,0,1389,157,1,0,0,0,1390,1388,1,0,0,
        0,1391,1394,3,104,52,0,1392,1394,3,228,114,0,1393,1391,1,0,0,0,1393,
        1392,1,0,0,0,1394,159,1,0,0,0,1395,1396,3,162,81,0,1396,1397,3,164,
        82,0,1397,161,1,0,0,0,1398,1400,5,49,0,0,1399,1401,3,12,6,0,1400,
        1399,1,0,0,0,1400,1401,1,0,0,0,1401,1402,1,0,0,0,1402,1403,3,562,
        281,0,1403,1404,5,56,0,0,1404,1405,3,56,28,0,1405,163,1,0,0,0,1406,
        1408,3,166,83,0,1407,1406,1,0,0,0,1408,1411,1,0,0,0,1409,1407,1,
        0,0,0,1409,1410,1,0,0,0,1410,1412,1,0,0,0,1411,1409,1,0,0,0,1412,
        1414,3,178,89,0,1413,1415,3,180,90,0,1414,1413,1,0,0,0,1414,1415,
        1,0,0,0,1415,165,1,0,0,0,1416,1422,3,162,81,0,1417,1422,3,168,84,
        0,1418,1422,3,170,85,0,1419,1422,3,172,86,0,1420,1422,3,174,87,0,
        1421,1416,1,0,0,0,1421,1417,1,0,0,0,1421,1418,1,0,0,0,1421,1419,
        1,0,0,0,1421,1420,1,0,0,0,1422,167,1,0,0,0,1423,1424,5,64,0,0,1424,
        1425,3,562,281,0,1425,1426,5,151,0,0,1426,1427,3,56,28,0,1427,169,
        1,0,0,0,1428,1429,5,116,0,0,1429,1430,3,56,28,0,1430,171,1,0,0,0,
        1431,1433,5,63,0,0,1432,1434,3,12,6,0,1433,1432,1,0,0,0,1433,1434,
        1,0,0,0,1434,1435,1,0,0,0,1435,1436,3,562,281,0,1436,1437,5,56,0,
        0,1437,1438,3,56,28,0,1438,1439,5,73,0,0,1439,1440,3,56,28,0,1440,
        1441,5,39,0,0,1441,1444,3,56,28,0,1442,1443,5,61,0,0,1443,1445,3,
        562,281,0,1444,1442,1,0,0,0,1444,1445,1,0,0,0,1445,173,1,0,0,0,1446,
        1447,5,76,0,0,1447,1452,3,176,88,0,1448,1449,5,138,0,0,1449,1451,
        3,176,88,0,1450,1448,1,0,0,0,1451,1454,1,0,0,0,1452,1450,1,0,0,0,
        1452,1453,1,0,0,0,1453,175,1,0,0,0,1454,1452,1,0,0,0,1455,1457,3,
        56,28,0,1456,1458,7,8,0,0,1457,1456,1,0,0,0,1457,1458,1,0,0,0,1458,
        177,1,0,0,0,1459,1460,5,90,0,0,1460,1467,3,56,28,0,1461,1462,5,53,
        0,0,1462,1463,3,56,28,0,1463,1464,5,21,0,0,1464,1465,3,56,28,0,1465,
        1467,1,0,0,0,1466,1459,1,0,0,0,1466,1461,1,0,0,0,1467,179,1,0,0,
        0,1468,1469,5,61,0,0,1469,1470,3,562,281,0,1470,1471,3,164,82,0,
        1471,181,1,0,0,0,1472,1476,3,194,97,0,1473,1476,3,184,92,0,1474,
        1476,3,196,98,0,1475,1472,1,0,0,0,1475,1473,1,0,0,0,1475,1474,1,
        0,0,0,1476,183,1,0,0,0,1477,1478,3,230,115,0,1478,1479,5,140,0,0,
        1479,1485,1,0,0,0,1480,1481,3,242,121,0,1481,1482,5,140,0,0,1482,
        1485,1,0,0,0,1483,1485,3,186,93,0,1484,1477,1,0,0,0,1484,1480,1,
        0,0,0,1484,1483,1,0,0,0,1485,185,1,0,0,0,1486,1487,3,188,94,0,1487,
        1488,3,192,96,0,1488,187,1,0,0,0,1489,1491,3,190,95,0,1490,1489,
        1,0,0,0,1490,1491,1,0,0,0,1491,1492,1,0,0,0,1492,1493,3,374,187,
        0,1493,1495,3,562,281,0,1494,1496,3,300,150,0,1495,1494,1,0,0,0,
        1495,1496,1,0,0,0,1496,1497,1,0,0,0,1497,1499,5,135,0,0,1498,1500,
        3,380,190,0,1499,1498,1,0,0,0,1499,1500,1,0,0,0,1500,1501,1,0,0,
        0,1501,1503,5,136,0,0,1502,1504,3,308,154,0,1503,1502,1,0,0,0,1503,
        1504,1,0,0,0,1504,189,1,0,0,0,1505,1507,7,9,0,0,1506,1508,5,95,0,
        0,1507,1506,1,0,0,0,1507,1508,1,0,0,0,1508,1516,1,0,0,0,1509,1511,
        5,95,0,0,1510,1512,7,9,0,0,1511,1510,1,0,0,0,1511,1512,1,0,0,0,1512,
        1516,1,0,0,0,1513,1514,5,108,0,0,1514,1516,5,97,0,0,1515,1505,1,
        0,0,0,1515,1509,1,0,0,0,1515,1513,1,0,0,0,1516,191,1,0,0,0,1517,
        1523,3,228,114,0,1518,1519,3,474,237,0,1519,1520,3,104,52,0,1520,
        1521,5,140,0,0,1521,1523,1,0,0,0,1522,1517,1,0,0,0,1522,1518,1,0,
        0,0,1523,193,1,0,0,0,1524,1525,3,562,281,0,1525,1526,5,139,0,0,1526,
        1527,3,182,91,0,1527,195,1,0,0,0,1528,1622,3,228,114,0,1529,1622,
        3,198,99,0,1530,1531,3,56,28,0,1531,1532,5,140,0,0,1532,1622,1,0,
        0,0,1533,1622,3,200,100,0,1534,1535,5,98,0,0,1535,1536,5,135,0,0,
        1536,1537,3,56,28,0,1537,1538,5,136,0,0,1538,1542,5,131,0,0,1539,
        1541,3,244,122,0,1540,1539,1,0,0,0,1541,1544,1,0,0,0,1542,1540,1,
        0,0,0,1542,1543,1,0,0,0,1543,1545,1,0,0,0,1544,1542,1,0,0,0,1545,
        1546,5,132,0,0,1546,1622,1,0,0,0,1547,1548,5,117,0,0,1548,1549,5,
        135,0,0,1549,1550,3,56,28,0,1550,1551,5,136,0,0,1551,1552,3,196,
        98,0,1552,1622,1,0,0,0,1553,1554,5,34,0,0,1554,1555,3,196,98,0,1555,
        1556,5,117,0,0,1556,1557,5,135,0,0,1557,1558,3,56,28,0,1558,1559,
        5,136,0,0,1559,1560,5,140,0,0,1560,1622,1,0,0,0,1561,1562,5,47,0,
        0,1562,1564,5,135,0,0,1563,1565,3,252,126,0,1564,1563,1,0,0,0,1564,
        1565,1,0,0,0,1565,1566,1,0,0,0,1566,1568,5,140,0,0,1567,1569,3,56,
        28,0,1568,1567,1,0,0,0,1568,1569,1,0,0,0,1569,1570,1,0,0,0,1570,
        1572,5,140,0,0,1571,1573,3,254,127,0,1572,1571,1,0,0,0,1572,1573,
        1,0,0,0,1573,1574,1,0,0,0,1574,1575,5,136,0,0,1575,1622,3,196,98,
        0,1576,1578,5,17,0,0,1577,1576,1,0,0,0,1577,1578,1,0,0,0,1578,1579,
        1,0,0,0,1579,1580,5,48,0,0,1580,1581,5,135,0,0,1581,1584,3,236,118,
        0,1582,1585,3,562,281,0,1583,1585,3,26,13,0,1584,1582,1,0,0,0,1584,
        1583,1,0,0,0,1585,1586,1,0,0,0,1586,1587,5,56,0,0,1587,1588,3,56,
        28,0,1588,1589,5,136,0,0,1589,1590,3,196,98,0,1590,1622,1,0,0,0,
        1591,1592,5,20,0,0,1592,1622,5,140,0,0,1593,1594,5,29,0,0,1594,1622,
        5,140,0,0,1595,1600,5,51,0,0,1596,1601,3,562,281,0,1597,1598,5,23,
        0,0,1598,1601,3,56,28,0,1599,1601,5,31,0,0,1600,1596,1,0,0,0,1600,
        1597,1,0,0,0,1600,1599,1,0,0,0,1601,1602,1,0,0,0,1602,1622,5,140,
        0,0,1603,1605,5,87,0,0,1604,1606,3,56,28,0,1605,1604,1,0,0,0,1605,
        1606,1,0,0,0,1606,1607,1,0,0,0,1607,1622,5,140,0,0,1608,1610,5,100,
        0,0,1609,1611,3,56,28,0,1610,1609,1,0,0,0,1610,1611,1,0,0,0,1611,
        1612,1,0,0,0,1612,1622,5,140,0,0,1613,1622,3,226,113,0,1614,1622,
        3,202,101,0,1615,1622,3,204,102,0,1616,1622,3,206,103,0,1617,1622,
        3,218,109,0,1618,1622,3,220,110,0,1619,1622,3,224,112,0,1620,1622,
        3,222,111,0,1621,1528,1,0,0,0,1621,1529,1,0,0,0,1621,1530,1,0,0,
        0,1621,1533,1,0,0,0,1621,1534,1,0,0,0,1621,1547,1,0,0,0,1621,1553,
        1,0,0,0,1621,1561,1,0,0,0,1621,1577,1,0,0,0,1621,1591,1,0,0,0,1621,
        1593,1,0,0,0,1621,1595,1,0,0,0,1621,1603,1,0,0,0,1621,1608,1,0,0,
        0,1621,1613,1,0,0,0,1621,1614,1,0,0,0,1621,1615,1,0,0,0,1621,1616,
        1,0,0,0,1621,1617,1,0,0,0,1621,1618,1,0,0,0,1621,1619,1,0,0,0,1621,
        1620,1,0,0,0,1622,197,1,0,0,0,1623,1624,5,140,0,0,1624,199,1,0,0,
        0,1625,1626,5,54,0,0,1626,1627,5,135,0,0,1627,1628,3,56,28,0,1628,
        1629,5,136,0,0,1629,1630,3,196,98,0,1630,1640,1,0,0,0,1631,1632,
        5,54,0,0,1632,1633,5,135,0,0,1633,1634,3,56,28,0,1634,1635,5,136,
        0,0,1635,1636,3,196,98,0,1636,1637,5,37,0,0,1637,1638,3,196,98,0,
        1638,1640,1,0,0,0,1639,1625,1,0,0,0,1639,1631,1,0,0,0,1640,201,1,
        0,0,0,1641,1642,5,26,0,0,1642,1643,3,228,114,0,1643,203,1,0,0,0,
        1644,1645,5,106,0,0,1645,1646,3,228,114,0,1646,205,1,0,0,0,1647,
        1648,5,65,0,0,1648,1649,5,135,0,0,1649,1650,3,56,28,0,1650,1651,
        5,136,0,0,1651,1652,3,196,98,0,1652,207,1,0,0,0,1653,1656,3,12,6,
        0,1654,1656,3,464,232,0,1655,1653,1,0,0,0,1655,1654,1,0,0,0,1656,
        209,1,0,0,0,1657,1658,5,94,0,0,1658,1659,3,12,6,0,1659,1660,5,133,
        0,0,1660,1661,3,56,28,0,1661,1662,5,134,0,0,1662,1674,1,0,0,0,1663,
        1665,5,94,0,0,1664,1666,3,12,6,0,1665,1664,1,0,0,0,1665,1666,1,0,
        0,0,1666,1667,1,0,0,0,1667,1669,5,133,0,0,1668,1670,3,56,28,0,1669,
        1668,1,0,0,0,1669,1670,1,0,0,0,1670,1671,1,0,0,0,1671,1672,5,134,
        0,0,1672,1674,3,212,106,0,1673,1657,1,0,0,0,1673,1663,1,0,0,0,1674,
        211,1,0,0,0,1675,1676,5,131,0,0,1676,1677,3,214,107,0,1677,1678,
        5,132,0,0,1678,213,1,0,0,0,1679,1684,3,216,108,0,1680,1681,5,138,
        0,0,1681,1683,3,216,108,0,1682,1680,1,0,0,0,1683,1686,1,0,0,0,1684,
        1682,1,0,0,0,1684,1685,1,0,0,0,1685,1688,1,0,0,0,1686,1684,1,0,0,
        0,1687,1689,5,138,0,0,1688,1687,1,0,0,0,1688,1689,1,0,0,0,1689,215,
        1,0,0,0,1690,1691,3,56,28,0,1691,217,1,0,0,0,1692,1693,5,110,0,0,
        1693,1694,5,135,0,0,1694,1695,3,266,133,0,1695,1696,5,136,0,0,1696,
        1697,3,196,98,0,1697,219,1,0,0,0,1698,1699,5,118,0,0,1699,1700,5,
        87,0,0,1700,1701,3,56,28,0,1701,1702,5,140,0,0,1702,1707,1,0,0,0,
        1703,1704,5,118,0,0,1704,1705,5,20,0,0,1705,1707,5,140,0,0,1706,
        1698,1,0,0,0,1706,1703,1,0,0,0,1707,221,1,0,0,0,1708,1709,5,45,0,
        0,1709,1710,5,135,0,0,1710,1711,3,464,232,0,1711,1712,3,466,233,
        0,1712,1713,5,136,0,0,1713,1714,3,196,98,0,1714,223,1,0,0,0,1715,
        1716,5,108,0,0,1716,1717,3,228,114,0,1717,225,1,0,0,0,1718,1719,
        5,102,0,0,1719,1720,3,228,114,0,1720,1721,3,256,128,0,1721,1730,
        1,0,0,0,1722,1723,5,102,0,0,1723,1725,3,228,114,0,1724,1726,3,256,
        128,0,1725,1724,1,0,0,0,1725,1726,1,0,0,0,1726,1727,1,0,0,0,1727,
        1728,3,264,132,0,1728,1730,1,0,0,0,1729,1718,1,0,0,0,1729,1722,1,
        0,0,0,1730,227,1,0,0,0,1731,1733,5,131,0,0,1732,1734,3,250,125,0,
        1733,1732,1,0,0,0,1733,1734,1,0,0,0,1734,1735,1,0,0,0,1735,1736,
        5,132,0,0,1736,229,1,0,0,0,1737,1742,5,110,0,0,1738,1742,5,85,0,
        0,1739,1740,5,85,0,0,1740,1742,5,84,0,0,1741,1737,1,0,0,0,1741,1738,
        1,0,0,0,1741,1739,1,0,0,0,1741,1742,1,0,0,0,1742,1743,1,0,0,0,1743,
        1744,3,236,118,0,1744,1749,3,238,119,0,1745,1746,5,138,0,0,1746,
        1748,3,238,119,0,1747,1745,1,0,0,0,1748,1751,1,0,0,0,1749,1747,1,
        0,0,0,1749,1750,1,0,0,0,1750,1771,1,0,0,0,1751,1749,1,0,0,0,1752,
        1753,5,45,0,0,1753,1754,3,464,232,0,1754,1755,3,466,233,0,1755,1771,
        1,0,0,0,1756,1757,5,111,0,0,1757,1758,3,22,11,0,1758,1759,5,151,
        0,0,1759,1760,3,56,28,0,1760,1771,1,0,0,0,1761,1771,3,232,116,0,
        1762,1764,3,452,226,0,1763,1762,1,0,0,0,1763,1764,1,0,0,0,1764,1765,
        1,0,0,0,1765,1766,3,12,6,0,1766,1767,3,562,281,0,1767,1768,5,151,
        0,0,1768,1769,3,148,74,0,1769,1771,1,0,0,0,1770,1741,1,0,0,0,1770,
        1752,1,0,0,0,1770,1756,1,0,0,0,1770,1761,1,0,0,0,1770,1763,1,0,0,
        0,1771,231,1,0,0,0,1772,1773,5,108,0,0,1773,1774,5,131,0,0,1774,
        1775,3,234,117,0,1775,1776,5,132,0,0,1776,233,1,0,0,0,1777,1778,
        5,32,0,0,1778,1779,5,143,0,0,1779,1780,5,152,0,0,1780,1781,3,16,
        8,0,1781,1782,5,153,0,0,1782,1783,3,562,281,0,1783,1784,5,151,0,
        0,1784,1785,5,146,0,0,1785,1786,3,562,281,0,1786,1787,5,140,0,0,
        1787,235,1,0,0,0,1788,1791,5,111,0,0,1789,1791,3,12,6,0,1790,1788,
        1,0,0,0,1790,1789,1,0,0,0,1791,237,1,0,0,0,1792,1798,3,562,281,0,
        1793,1795,5,151,0,0,1794,1796,5,85,0,0,1795,1794,1,0,0,0,1795,1796,
        1,0,0,0,1796,1797,1,0,0,0,1797,1799,3,240,120,0,1798,1793,1,0,0,
        0,1798,1799,1,0,0,0,1799,239,1,0,0,0,1800,1806,3,56,28,0,1801,1806,
        3,426,213,0,1802,1806,3,212,106,0,1803,1806,3,26,13,0,1804,1806,
        3,148,74,0,1805,1800,1,0,0,0,1805,1801,1,0,0,0,1805,1802,1,0,0,0,
        1805,1803,1,0,0,0,1805,1804,1,0,0,0,1806,241,1,0,0,0,1807,1808,5,
        28,0,0,1808,1809,3,12,6,0,1809,1810,3,364,182,0,1810,243,1,0,0,0,
        1811,1813,3,246,123,0,1812,1811,1,0,0,0,1813,1814,1,0,0,0,1814,1812,
        1,0,0,0,1814,1815,1,0,0,0,1815,1816,1,0,0,0,1816,1817,3,250,125,
        0,1817,245,1,0,0,0,1818,1819,5,23,0,0,1819,1821,3,56,28,0,1820,1822,
        3,248,124,0,1821,1820,1,0,0,0,1821,1822,1,0,0,0,1822,1823,1,0,0,
        0,1823,1824,5,139,0,0,1824,1835,1,0,0,0,1825,1826,5,23,0,0,1826,
        1828,3,316,158,0,1827,1829,3,248,124,0,1828,1827,1,0,0,0,1828,1829,
        1,0,0,0,1829,1830,1,0,0,0,1830,1831,5,139,0,0,1831,1835,1,0,0,0,
        1832,1833,5,31,0,0,1833,1835,5,139,0,0,1834,1818,1,0,0,0,1834,1825,
        1,0,0,0,1834,1832,1,0,0,0,1835,247,1,0,0,0,1836,1837,5,115,0,0,1837,
        1838,3,56,28,0,1838,249,1,0,0,0,1839,1841,3,182,91,0,1840,1839,1,
        0,0,0,1841,1842,1,0,0,0,1842,1840,1,0,0,0,1842,1843,1,0,0,0,1843,
        251,1,0,0,0,1844,1854,3,230,115,0,1845,1850,3,56,28,0,1846,1847,
        5,138,0,0,1847,1849,3,56,28,0,1848,1846,1,0,0,0,1849,1852,1,0,0,
        0,1850,1848,1,0,0,0,1850,1851,1,0,0,0,1851,1854,1,0,0,0,1852,1850,
        1,0,0,0,1853,1844,1,0,0,0,1853,1845,1,0,0,0,1854,253,1,0,0,0,1855,
        1860,3,56,28,0,1856,1857,5,138,0,0,1857,1859,3,56,28,0,1858,1856,
        1,0,0,0,1859,1862,1,0,0,0,1860,1858,1,0,0,0,1860,1861,1,0,0,0,1861,
        255,1,0,0,0,1862,1860,1,0,0,0,1863,1867,3,258,129,0,1864,1866,3,
        258,129,0,1865,1864,1,0,0,0,1866,1869,1,0,0,0,1867,1865,1,0,0,0,
        1867,1868,1,0,0,0,1868,1871,1,0,0,0,1869,1867,1,0,0,0,1870,1872,
        3,260,130,0,1871,1870,1,0,0,0,1871,1872,1,0,0,0,1872,1875,1,0,0,
        0,1873,1875,3,260,130,0,1874,1863,1,0,0,0,1874,1873,1,0,0,0,1875,
        257,1,0,0,0,1876,1877,5,24,0,0,1877,1878,5,135,0,0,1878,1880,3,46,
        23,0,1879,1881,3,562,281,0,1880,1879,1,0,0,0,1880,1881,1,0,0,0,1881,
        1882,1,0,0,0,1882,1884,5,136,0,0,1883,1885,3,262,131,0,1884,1883,
        1,0,0,0,1884,1885,1,0,0,0,1885,1886,1,0,0,0,1886,1887,3,228,114,
        0,1887,259,1,0,0,0,1888,1890,5,24,0,0,1889,1891,3,262,131,0,1890,
        1889,1,0,0,0,1890,1891,1,0,0,0,1891,1892,1,0,0,0,1892,1893,3,228,
        114,0,1893,261,1,0,0,0,1894,1895,5,115,0,0,1895,1896,5,135,0,0,1896,
        1897,3,56,28,0,1897,1898,5,136,0,0,1898,263,1,0,0,0,1899,1900,5,
        44,0,0,1900,1901,3,228,114,0,1901,265,1,0,0,0,1902,1905,3,230,115,
        0,1903,1905,3,56,28,0,1904,1902,1,0,0,0,1904,1903,1,0,0,0,1905,267,
        1,0,0,0,1906,1907,5,68,0,0,1907,1908,3,270,135,0,1908,1910,3,272,
        136,0,1909,1911,5,140,0,0,1910,1909,1,0,0,0,1910,1911,1,0,0,0,1911,
        269,1,0,0,0,1912,1917,3,562,281,0,1913,1914,5,137,0,0,1914,1916,
        3,562,281,0,1915,1913,1,0,0,0,1916,1919,1,0,0,0,1917,1915,1,0,0,
        0,1917,1918,1,0,0,0,1918,271,1,0,0,0,1919,1917,1,0,0,0,1920,1922,
        5,131,0,0,1921,1923,3,274,137,0,1922,1921,1,0,0,0,1922,1923,1,0,
        0,0,1923,1925,1,0,0,0,1924,1926,3,278,139,0,1925,1924,1,0,0,0,1925,
        1926,1,0,0,0,1926,1928,1,0,0,0,1927,1929,3,282,141,0,1928,1927,1,
        0,0,0,1928,1929,1,0,0,0,1929,1930,1,0,0,0,1930,1933,5,132,0,0,1931,
        1933,5,140,0,0,1932,1920,1,0,0,0,1932,1931,1,0,0,0,1933,273,1,0,
        0,0,1934,1936,3,276,138,0,1935,1934,1,0,0,0,1936,1937,1,0,0,0,1937,
        1935,1,0,0,0,1937,1938,1,0,0,0,1938,275,1,0,0,0,1939,1940,5,42,0,
        0,1940,1941,5,12,0,0,1941,1942,3,562,281,0,1942,1943,5,140,0,0,1943,
        277,1,0,0,0,1944,1946,3,280,140,0,1945,1944,1,0,0,0,1946,1947,1,
        0,0,0,1947,1945,1,0,0,0,1947,1948,1,0,0,0,1948,279,1,0,0,0,1949,
        1951,5,52,0,0,1950,1949,1,0,0,0,1950,1951,1,0,0,0,1951,1952,1,0,
        0,0,1952,1953,5,110,0,0,1953,1954,3,562,281,0,1954,1955,5,151,0,
        0,1955,1956,3,10,5,0,1956,1957,5,140,0,0,1957,1974,1,0,0,0,1958,
        1960,5,52,0,0,1959,1958,1,0,0,0,1959,1960,1,0,0,0,1960,1961,1,0,
        0,0,1961,1962,5,110,0,0,1962,1963,3,10,5,0,1963,1964,5,140,0,0,1964,
        1974,1,0,0,0,1965,1967,5,52,0,0,1966,1965,1,0,0,0,1966,1967,1,0,
        0,0,1967,1968,1,0,0,0,1968,1969,5,110,0,0,1969,1970,5,95,0,0,1970,
        1971,3,10,5,0,1971,1972,5,140,0,0,1972,1974,1,0,0,0,1973,1950,1,
        0,0,0,1973,1959,1,0,0,0,1973,1966,1,0,0,0,1974,281,1,0,0,0,1975,
        1977,3,284,142,0,1976,1975,1,0,0,0,1977,1978,1,0,0,0,1978,1976,1,
        0,0,0,1978,1979,1,0,0,0,1979,283,1,0,0,0,1980,1985,3,268,134,0,1981,
        1985,3,286,143,0,1982,1985,3,344,172,0,1983,1985,3,360,180,0,1984,
        1980,1,0,0,0,1984,1981,1,0,0,0,1984,1982,1,0,0,0,1984,1983,1,0,0,
        0,1985,285,1,0,0,0,1986,1988,3,452,226,0,1987,1986,1,0,0,0,1987,
        1988,1,0,0,0,1988,1990,1,0,0,0,1989,1991,3,356,178,0,1990,1989,1,
        0,0,0,1990,1991,1,0,0,0,1991,1998,1,0,0,0,1992,1999,3,504,252,0,
        1993,1999,3,508,254,0,1994,1999,3,512,256,0,1995,1999,3,514,257,
        0,1996,1999,3,516,258,0,1997,1999,3,288,144,0,1998,1992,1,0,0,0,
        1998,1993,1,0,0,0,1998,1994,1,0,0,0,1998,1995,1,0,0,0,1998,1996,
        1,0,0,0,1998,1997,1,0,0,0,1999,287,1,0,0,0,2000,2002,5,119,0,0,2001,
        2003,5,97,0,0,2002,2001,1,0,0,0,2002,2003,1,0,0,0,2003,2004,1,0,
        0,0,2004,2006,3,562,281,0,2005,2007,3,300,150,0,2006,2005,1,0,0,
        0,2006,2007,1,0,0,0,2007,2009,1,0,0,0,2008,2010,3,290,145,0,2009,
        2008,1,0,0,0,2009,2010,1,0,0,0,2010,2012,1,0,0,0,2011,2013,3,308,
        154,0,2012,2011,1,0,0,0,2012,2013,1,0,0,0,2013,2014,1,0,0,0,2014,
        2016,5,135,0,0,2015,2017,3,294,147,0,2016,2015,1,0,0,0,2016,2017,
        1,0,0,0,2017,2018,1,0,0,0,2018,2019,5,136,0,0,2019,2020,3,292,146,
        0,2020,289,1,0,0,0,2021,2022,5,139,0,0,2022,2027,3,46,23,0,2023,
        2024,5,138,0,0,2024,2026,3,10,5,0,2025,2023,1,0,0,0,2026,2029,1,
        0,0,0,2027,2025,1,0,0,0,2027,2028,1,0,0,0,2028,291,1,0,0,0,2029,
        2027,1,0,0,0,2030,2032,5,131,0,0,2031,2033,3,352,176,0,2032,2031,
        1,0,0,0,2032,2033,1,0,0,0,2033,2034,1,0,0,0,2034,2037,5,132,0,0,
        2035,2037,5,140,0,0,2036,2030,1,0,0,0,2036,2035,1,0,0,0,2037,293,
        1,0,0,0,2038,2043,3,296,148,0,2039,2040,5,138,0,0,2040,2042,3,296,
        148,0,2041,2039,1,0,0,0,2042,2045,1,0,0,0,2043,2041,1,0,0,0,2043,
        2044,1,0,0,0,2044,295,1,0,0,0,2045,2043,1,0,0,0,2046,2048,3,452,
        226,0,2047,2046,1,0,0,0,2047,2048,1,0,0,0,2048,2049,1,0,0,0,2049,
        2050,3,12,6,0,2050,2051,3,562,281,0,2051,297,1,0,0,0,2052,2053,3,
        562,281,0,2053,2054,5,155,0,0,2054,2056,3,562,281,0,2055,2057,3,
        48,24,0,2056,2055,1,0,0,0,2056,2057,1,0,0,0,2057,299,1,0,0,0,2058,
        2059,5,152,0,0,2059,2064,3,302,151,0,2060,2061,5,138,0,0,2061,2063,
        3,302,151,0,2062,2060,1,0,0,0,2063,2066,1,0,0,0,2064,2062,1,0,0,
        0,2064,2065,1,0,0,0,2065,2067,1,0,0,0,2066,2064,1,0,0,0,2067,2068,
        5,153,0,0,2068,301,1,0,0,0,2069,2071,3,452,226,0,2070,2069,1,0,0,
        0,2070,2071,1,0,0,0,2071,2072,1,0,0,0,2072,2073,3,562,281,0,2073,
        303,1,0,0,0,2074,2075,5,139,0,0,2075,2080,3,46,23,0,2076,2077,5,
        138,0,0,2077,2079,3,10,5,0,2078,2076,1,0,0,0,2079,2082,1,0,0,0,2080,
        2078,1,0,0,0,2080,2081,1,0,0,0,2081,305,1,0,0,0,2082,2080,1,0,0,
        0,2083,2088,3,10,5,0,2084,2085,5,138,0,0,2085,2087,3,10,5,0,2086,
        2084,1,0,0,0,2087,2090,1,0,0,0,2088,2086,1,0,0,0,2088,2089,1,0,0,
        0,2089,307,1,0,0,0,2090,2088,1,0,0,0,2091,2093,3,310,155,0,2092,
        2091,1,0,0,0,2093,2094,1,0,0,0,2094,2092,1,0,0,0,2094,2095,1,0,0,
        0,2095,309,1,0,0,0,2096,2097,5,116,0,0,2097,2098,3,562,281,0,2098,
        2099,5,139,0,0,2099,2100,3,312,156,0,2100,311,1,0,0,0,2101,2112,
        3,348,174,0,2102,2105,3,314,157,0,2103,2104,5,138,0,0,2104,2106,
        3,346,173,0,2105,2103,1,0,0,0,2105,2106,1,0,0,0,2106,2109,1,0,0,
        0,2107,2108,5,138,0,0,2108,2110,3,348,174,0,2109,2107,1,0,0,0,2109,
        2110,1,0,0,0,2110,2112,1,0,0,0,2111,2101,1,0,0,0,2111,2102,1,0,0,
        0,2112,313,1,0,0,0,2113,2121,3,46,23,0,2114,2116,5,27,0,0,2115,2117,
        5,154,0,0,2116,2115,1,0,0,0,2116,2117,1,0,0,0,2117,2121,1,0,0,0,
        2118,2121,5,97,0,0,2119,2121,5,107,0,0,2120,2113,1,0,0,0,2120,2114,
        1,0,0,0,2120,2118,1,0,0,0,2120,2119,1,0,0,0,2121,315,1,0,0,0,2122,
        2132,3,332,166,0,2123,2132,3,338,169,0,2124,2132,3,340,170,0,2125,
        2132,3,324,162,0,2126,2132,3,326,163,0,2127,2132,3,328,164,0,2128,
        2132,3,330,165,0,2129,2132,3,56,28,0,2130,2132,3,318,159,0,2131,
        2122,1,0,0,0,2131,2123,1,0,0,0,2131,2124,1,0,0,0,2131,2125,1,0,0,
        0,2131,2126,1,0,0,0,2131,2127,1,0,0,0,2131,2128,1,0,0,0,2131,2129,
        1,0,0,0,2131,2130,1,0,0,0,2132,317,1,0,0,0,2133,2135,3,12,6,0,2134,
        2133,1,0,0,0,2134,2135,1,0,0,0,2135,2137,1,0,0,0,2136,2138,3,334,
        167,0,2137,2136,1,0,0,0,2137,2138,1,0,0,0,2138,2140,1,0,0,0,2139,
        2141,3,320,160,0,2140,2139,1,0,0,0,2140,2141,1,0,0,0,2141,319,1,
        0,0,0,2142,2143,5,131,0,0,2143,2148,3,322,161,0,2144,2145,5,138,
        0,0,2145,2147,3,322,161,0,2146,2144,1,0,0,0,2147,2150,1,0,0,0,2148,
        2146,1,0,0,0,2148,2149,1,0,0,0,2149,2151,1,0,0,0,2150,2148,1,0,0,
        0,2151,2152,5,132,0,0,2152,321,1,0,0,0,2153,2154,3,562,281,0,2154,
        2155,5,139,0,0,2155,2156,3,316,158,0,2156,323,1,0,0,0,2157,2158,
        5,152,0,0,2158,2166,3,56,28,0,2159,2160,5,164,0,0,2160,2166,3,56,
        28,0,2161,2162,5,153,0,0,2162,2166,3,56,28,0,2163,2164,5,165,0,0,
        2164,2166,3,56,28,0,2165,2157,1,0,0,0,2165,2159,1,0,0,0,2165,2161,
        1,0,0,0,2165,2163,1,0,0,0,2166,325,1,0,0,0,2167,2168,3,324,162,0,
        2168,2169,5,11,0,0,2169,2170,3,316,158,0,2170,327,1,0,0,0,2171,2172,
        3,324,162,0,2172,2173,5,74,0,0,2173,2174,3,316,158,0,2174,329,1,
        0,0,0,2175,2176,5,70,0,0,2176,2177,3,316,158,0,2177,331,1,0,0,0,
        2178,2179,3,12,6,0,2179,2180,3,334,167,0,2180,333,1,0,0,0,2181,2182,
        3,336,168,0,2182,335,1,0,0,0,2183,2184,3,562,281,0,2184,337,1,0,
        0,0,2185,2186,3,500,250,0,2186,339,1,0,0,0,2187,2188,5,111,0,0,2188,
        2189,3,342,171,0,2189,341,1,0,0,0,2190,2191,3,334,167,0,2191,343,
        1,0,0,0,2192,2194,3,452,226,0,2193,2195,5,59,0,0,2194,2193,1,0,0,
        0,2194,2195,1,0,0,0,2195,2197,1,0,0,0,2196,2198,5,83,0,0,2197,2196,
        1,0,0,0,2197,2198,1,0,0,0,2198,2199,1,0,0,0,2199,2200,5,95,0,0,2200,
        2201,5,113,0,0,2201,2202,3,562,281,0,2202,2203,5,135,0,0,2203,2204,
        5,136,0,0,2204,2205,3,378,189,0,2205,345,1,0,0,0,2206,2211,3,10,
        5,0,2207,2208,5,138,0,0,2208,2210,3,10,5,0,2209,2207,1,0,0,0,2210,
        2213,1,0,0,0,2211,2209,1,0,0,0,2211,2212,1,0,0,0,2212,347,1,0,0,
        0,2213,2211,1,0,0,0,2214,2215,5,69,0,0,2215,2216,5,135,0,0,2216,
        2217,5,136,0,0,2217,349,1,0,0,0,2218,2220,5,131,0,0,2219,2221,3,
        352,176,0,2220,2219,1,0,0,0,2220,2221,1,0,0,0,2221,2222,1,0,0,0,
        2222,2223,5,132,0,0,2223,351,1,0,0,0,2224,2226,3,354,177,0,2225,
        2224,1,0,0,0,2226,2227,1,0,0,0,2227,2225,1,0,0,0,2227,2228,1,0,0,
        0,2228,353,1,0,0,0,2229,2231,3,452,226,0,2230,2229,1,0,0,0,2230,
        2231,1,0,0,0,2231,2233,1,0,0,0,2232,2234,3,356,178,0,2233,2232,1,
        0,0,0,2233,2234,1,0,0,0,2234,2237,1,0,0,0,2235,2238,3,360,180,0,
        2236,2238,3,528,264,0,2237,2235,1,0,0,0,2237,2236,1,0,0,0,2238,355,
        1,0,0,0,2239,2241,3,358,179,0,2240,2239,1,0,0,0,2241,2242,1,0,0,
        0,2242,2240,1,0,0,0,2242,2243,1,0,0,0,2243,357,1,0,0,0,2244,2245,
        7,10,0,0,2245,359,1,0,0,0,2246,2266,3,524,262,0,2247,2266,3,362,
        181,0,2248,2266,3,518,259,0,2249,2255,3,410,205,0,2250,2256,3,414,
        207,0,2251,2252,3,474,237,0,2252,2253,3,104,52,0,2253,2254,5,140,
        0,0,2254,2256,1,0,0,0,2255,2250,1,0,0,0,2255,2251,1,0,0,0,2256,2266,
        1,0,0,0,2257,2266,3,530,265,0,2258,2266,3,532,266,0,2259,2266,3,
        504,252,0,2260,2266,3,508,254,0,2261,2266,3,512,256,0,2262,2266,
        3,514,257,0,2263,2266,3,516,258,0,2264,2266,3,288,144,0,2265,2246,
        1,0,0,0,2265,2247,1,0,0,0,2265,2248,1,0,0,0,2265,2249,1,0,0,0,2265,
        2257,1,0,0,0,2265,2258,1,0,0,0,2265,2259,1,0,0,0,2265,2260,1,0,0,
        0,2265,2261,1,0,0,0,2265,2262,1,0,0,0,2265,2263,1,0,0,0,2265,2264,
        1,0,0,0,2266,361,1,0,0,0,2267,2273,5,85,0,0,2268,2269,5,84,0,0,2269,
        2273,5,85,0,0,2270,2271,5,85,0,0,2271,2273,5,84,0,0,2272,2267,1,
        0,0,0,2272,2268,1,0,0,0,2272,2270,1,0,0,0,2272,2273,1,0,0,0,2273,
        2274,1,0,0,0,2274,2284,3,12,6,0,2275,2276,3,10,5,0,2276,2277,5,137,
        0,0,2277,2278,3,526,263,0,2278,2285,1,0,0,0,2279,2285,3,532,266,
        0,2280,2285,3,522,261,0,2281,2285,3,526,263,0,2282,2285,3,552,276,
        0,2283,2285,3,520,260,0,2284,2275,1,0,0,0,2284,2279,1,0,0,0,2284,
        2280,1,0,0,0,2284,2281,1,0,0,0,2284,2282,1,0,0,0,2284,2283,1,0,0,
        0,2285,363,1,0,0,0,2286,2291,3,366,183,0,2287,2288,5,138,0,0,2288,
        2290,3,366,183,0,2289,2287,1,0,0,0,2290,2293,1,0,0,0,2291,2289,1,
        0,0,0,2291,2292,1,0,0,0,2292,365,1,0,0,0,2293,2291,1,0,0,0,2294,
        2295,3,562,281,0,2295,2296,5,151,0,0,2296,2297,3,56,28,0,2297,367,
        1,0,0,0,2298,2303,3,370,185,0,2299,2300,5,138,0,0,2300,2302,3,370,
        185,0,2301,2299,1,0,0,0,2302,2305,1,0,0,0,2303,2301,1,0,0,0,2303,
        2304,1,0,0,0,2304,369,1,0,0,0,2305,2303,1,0,0,0,2306,2309,3,562,
        281,0,2307,2308,5,151,0,0,2308,2310,3,372,186,0,2309,2307,1,0,0,
        0,2309,2310,1,0,0,0,2310,371,1,0,0,0,2311,2314,3,56,28,0,2312,2314,
        3,426,213,0,2313,2311,1,0,0,0,2313,2312,1,0,0,0,2314,373,1,0,0,0,
        2315,2318,3,12,6,0,2316,2318,5,113,0,0,2317,2315,1,0,0,0,2317,2316,
        1,0,0,0,2318,375,1,0,0,0,2319,2320,3,10,5,0,2320,377,1,0,0,0,2321,
        2328,3,228,114,0,2322,2328,5,140,0,0,2323,2324,3,474,237,0,2324,
        2325,3,56,28,0,2325,2326,5,140,0,0,2326,2328,1,0,0,0,2327,2321,1,
        0,0,0,2327,2322,1,0,0,0,2327,2323,1,0,0,0,2328,379,1,0,0,0,2329,
        2336,3,388,194,0,2330,2333,3,382,191,0,2331,2332,5,138,0,0,2332,
        2334,3,388,194,0,2333,2331,1,0,0,0,2333,2334,1,0,0,0,2334,2336,1,
        0,0,0,2335,2329,1,0,0,0,2335,2330,1,0,0,0,2336,381,1,0,0,0,2337,
        2342,3,384,192,0,2338,2339,5,138,0,0,2339,2341,3,384,192,0,2340,
        2338,1,0,0,0,2341,2344,1,0,0,0,2342,2340,1,0,0,0,2342,2343,1,0,0,
        0,2343,383,1,0,0,0,2344,2342,1,0,0,0,2345,2347,3,452,226,0,2346,
        2345,1,0,0,0,2346,2347,1,0,0,0,2347,2349,1,0,0,0,2348,2350,3,386,
        193,0,2349,2348,1,0,0,0,2349,2350,1,0,0,0,2350,2351,1,0,0,0,2351,
        2354,3,554,277,0,2352,2354,5,13,0,0,2353,2346,1,0,0,0,2353,2352,
        1,0,0,0,2354,385,1,0,0,0,2355,2364,5,85,0,0,2356,2364,5,77,0,0,2357,
        2364,5,56,0,0,2358,2359,5,85,0,0,2359,2364,5,99,0,0,2360,2361,5,
        56,0,0,2361,2364,5,99,0,0,2362,2364,5,99,0,0,2363,2355,1,0,0,0,2363,
        2356,1,0,0,0,2363,2357,1,0,0,0,2363,2358,1,0,0,0,2363,2360,1,0,0,
        0,2363,2362,1,0,0,0,2364,387,1,0,0,0,2365,2367,3,452,226,0,2366,
        2365,1,0,0,0,2366,2367,1,0,0,0,2367,2368,1,0,0,0,2368,2369,5,79,
        0,0,2369,2370,3,422,211,0,2370,2371,3,562,281,0,2371,389,1,0,0,0,
        2372,2374,3,452,226,0,2373,2372,1,0,0,0,2373,2374,1,0,0,0,2374,2376,
        1,0,0,0,2375,2377,3,398,199,0,2376,2375,1,0,0,0,2376,2377,1,0,0,
        0,2377,2398,1,0,0,0,2378,2379,5,50,0,0,2379,2381,3,400,200,0,2380,
        2382,3,396,198,0,2381,2380,1,0,0,0,2381,2382,1,0,0,0,2382,2399,1,
        0,0,0,2383,2384,5,91,0,0,2384,2386,3,400,200,0,2385,2387,3,394,197,
        0,2386,2385,1,0,0,0,2386,2387,1,0,0,0,2387,2399,1,0,0,0,2388,2389,
        5,50,0,0,2389,2391,3,400,200,0,2390,2392,3,392,196,0,2391,2390,1,
        0,0,0,2391,2392,1,0,0,0,2392,2399,1,0,0,0,2393,2394,5,60,0,0,2394,
        2396,3,400,200,0,2395,2397,3,394,197,0,2396,2395,1,0,0,0,2396,2397,
        1,0,0,0,2397,2399,1,0,0,0,2398,2378,1,0,0,0,2398,2383,1,0,0,0,2398,
        2388,1,0,0,0,2398,2393,1,0,0,0,2399,391,1,0,0,0,2400,2402,3,452,
        226,0,2401,2400,1,0,0,0,2401,2402,1,0,0,0,2402,2403,1,0,0,0,2403,
        2404,5,60,0,0,2404,2405,3,400,200,0,2405,393,1,0,0,0,2406,2408,3,
        452,226,0,2407,2406,1,0,0,0,2407,2408,1,0,0,0,2408,2410,1,0,0,0,
        2409,2411,3,398,199,0,2410,2409,1,0,0,0,2410,2411,1,0,0,0,2411,2412,
        1,0,0,0,2412,2413,5,50,0,0,2413,2414,3,400,200,0,2414,395,1,0,0,
        0,2415,2417,3,452,226,0,2416,2415,1,0,0,0,2416,2417,1,0,0,0,2417,
        2419,1,0,0,0,2418,2420,3,398,199,0,2419,2418,1,0,0,0,2419,2420,1,
        0,0,0,2420,2421,1,0,0,0,2421,2422,5,91,0,0,2422,2423,3,400,200,0,
        2423,397,1,0,0,0,2424,2437,5,82,0,0,2425,2437,5,59,0,0,2426,2437,
        5,81,0,0,2427,2428,5,82,0,0,2428,2437,5,59,0,0,2429,2430,5,59,0,
        0,2430,2437,5,82,0,0,2431,2432,5,82,0,0,2432,2437,5,81,0,0,2433,
        2434,5,81,0,0,2434,2437,5,82,0,0,2435,2437,5,84,0,0,2436,2424,1,
        0,0,0,2436,2425,1,0,0,0,2436,2426,1,0,0,0,2436,2427,1,0,0,0,2436,
        2429,1,0,0,0,2436,2431,1,0,0,0,2436,2433,1,0,0,0,2436,2435,1,0,0,
        0,2437,399,1,0,0,0,2438,2445,3,228,114,0,2439,2440,3,474,237,0,2440,
        2441,3,56,28,0,2441,2442,5,140,0,0,2442,2445,1,0,0,0,2443,2445,5,
        140,0,0,2444,2438,1,0,0,0,2444,2439,1,0,0,0,2444,2443,1,0,0,0,2445,
        401,1,0,0,0,2446,2448,3,452,226,0,2447,2446,1,0,0,0,2447,2448,1,
        0,0,0,2448,2457,1,0,0,0,2449,2450,5,10,0,0,2450,2451,3,228,114,0,
        2451,2452,3,406,203,0,2452,2458,1,0,0,0,2453,2454,5,86,0,0,2454,
        2455,3,228,114,0,2455,2456,3,404,202,0,2456,2458,1,0,0,0,2457,2449,
        1,0,0,0,2457,2453,1,0,0,0,2458,403,1,0,0,0,2459,2461,3,452,226,0,
        2460,2459,1,0,0,0,2460,2461,1,0,0,0,2461,2462,1,0,0,0,2462,2463,
        5,10,0,0,2463,2464,3,228,114,0,2464,405,1,0,0,0,2465,2467,3,452,
        226,0,2466,2465,1,0,0,0,2466,2467,1,0,0,0,2467,2468,1,0,0,0,2468,
        2469,5,86,0,0,2469,2470,3,228,114,0,2470,407,1,0,0,0,2471,2494,5,
        141,0,0,2472,2494,5,142,0,0,2473,2494,5,149,0,0,2474,2494,5,150,
        0,0,2475,2494,5,157,0,0,2476,2494,5,158,0,0,2477,2494,5,101,0,0,
        2478,2494,5,43,0,0,2479,2494,5,143,0,0,2480,2494,5,144,0,0,2481,
        2494,5,145,0,0,2482,2494,5,146,0,0,2483,2494,5,147,0,0,2484,2494,
        5,148,0,0,2485,2494,5,174,0,0,2486,2494,3,476,238,0,2487,2494,5,
        162,0,0,2488,2494,5,163,0,0,2489,2494,5,153,0,0,2490,2494,5,152,
        0,0,2491,2494,5,165,0,0,2492,2494,5,164,0,0,2493,2471,1,0,0,0,2493,
        2472,1,0,0,0,2493,2473,1,0,0,0,2493,2474,1,0,0,0,2493,2475,1,0,0,
        0,2493,2476,1,0,0,0,2493,2477,1,0,0,0,2493,2478,1,0,0,0,2493,2479,
        1,0,0,0,2493,2480,1,0,0,0,2493,2481,1,0,0,0,2493,2482,1,0,0,0,2493,
        2483,1,0,0,0,2493,2484,1,0,0,0,2493,2485,1,0,0,0,2493,2486,1,0,0,
        0,2493,2487,1,0,0,0,2493,2488,1,0,0,0,2493,2489,1,0,0,0,2493,2490,
        1,0,0,0,2493,2491,1,0,0,0,2493,2492,1,0,0,0,2494,409,1,0,0,0,2495,
        2496,7,11,0,0,2496,2497,5,75,0,0,2497,2498,3,12,6,0,2498,2499,5,
        135,0,0,2499,2500,3,554,277,0,2500,2501,5,136,0,0,2501,411,1,0,0,
        0,2502,2503,5,139,0,0,2503,2504,7,12,0,0,2504,2506,5,135,0,0,2505,
        2507,3,50,25,0,2506,2505,1,0,0,0,2506,2507,1,0,0,0,2507,2508,1,0,
        0,0,2508,2509,5,136,0,0,2509,413,1,0,0,0,2510,2517,3,228,114,0,2511,
        2517,5,140,0,0,2512,2513,3,474,237,0,2513,2514,3,56,28,0,2514,2515,
        5,140,0,0,2515,2517,1,0,0,0,2516,2510,1,0,0,0,2516,2511,1,0,0,0,
        2516,2512,1,0,0,0,2517,415,1,0,0,0,2518,2519,5,139,0,0,2519,2520,
        3,306,153,0,2520,417,1,0,0,0,2521,2525,5,131,0,0,2522,2524,3,420,
        210,0,2523,2522,1,0,0,0,2524,2527,1,0,0,0,2525,2523,1,0,0,0,2525,
        2526,1,0,0,0,2526,2528,1,0,0,0,2527,2525,1,0,0,0,2528,2531,5,132,
        0,0,2529,2531,5,140,0,0,2530,2521,1,0,0,0,2530,2529,1,0,0,0,2531,
        419,1,0,0,0,2532,2534,3,452,226,0,2533,2532,1,0,0,0,2533,2534,1,
        0,0,0,2534,2536,1,0,0,0,2535,2537,3,356,178,0,2536,2535,1,0,0,0,
        2536,2537,1,0,0,0,2537,2548,1,0,0,0,2538,2549,3,360,180,0,2539,2540,
        5,45,0,0,2540,2542,3,12,6,0,2541,2543,3,472,236,0,2542,2541,1,0,
        0,0,2543,2544,1,0,0,0,2544,2542,1,0,0,0,2544,2545,1,0,0,0,2545,2546,
        1,0,0,0,2546,2547,5,140,0,0,2547,2549,1,0,0,0,2548,2538,1,0,0,0,
        2548,2539,1,0,0,0,2549,421,1,0,0,0,2550,2558,3,18,9,0,2551,2553,
        7,13,0,0,2552,2551,1,0,0,0,2553,2556,1,0,0,0,2554,2552,1,0,0,0,2554,
        2555,1,0,0,0,2555,2557,1,0,0,0,2556,2554,1,0,0,0,2557,2559,3,424,
        212,0,2558,2554,1,0,0,0,2559,2560,1,0,0,0,2560,2558,1,0,0,0,2560,
        2561,1,0,0,0,2561,423,1,0,0,0,2562,2566,5,133,0,0,2563,2565,5,138,
        0,0,2564,2563,1,0,0,0,2565,2568,1,0,0,0,2566,2564,1,0,0,0,2566,2567,
        1,0,0,0,2567,2569,1,0,0,0,2568,2566,1,0,0,0,2569,2570,5,134,0,0,
        2570,425,1,0,0,0,2571,2583,5,131,0,0,2572,2577,3,372,186,0,2573,
        2574,5,138,0,0,2574,2576,3,372,186,0,2575,2573,1,0,0,0,2576,2579,
        1,0,0,0,2577,2575,1,0,0,0,2577,2578,1,0,0,0,2578,2581,1,0,0,0,2579,
        2577,1,0,0,0,2580,2582,5,138,0,0,2581,2580,1,0,0,0,2581,2582,1,0,
        0,0,2582,2584,1,0,0,0,2583,2572,1,0,0,0,2583,2584,1,0,0,0,2584,2585,
        1,0,0,0,2585,2586,5,132,0,0,2586,427,1,0,0,0,2587,2588,5,152,0,0,
        2588,2593,3,430,215,0,2589,2590,5,138,0,0,2590,2592,3,430,215,0,
        2591,2589,1,0,0,0,2592,2595,1,0,0,0,2593,2591,1,0,0,0,2593,2594,
        1,0,0,0,2594,2596,1,0,0,0,2595,2593,1,0,0,0,2596,2597,5,153,0,0,
        2597,429,1,0,0,0,2598,2600,3,452,226,0,2599,2598,1,0,0,0,2599,2600,
        1,0,0,0,2600,2602,1,0,0,0,2601,2603,3,432,216,0,2602,2601,1,0,0,
        0,2602,2603,1,0,0,0,2603,2604,1,0,0,0,2604,2605,3,562,281,0,2605,
        431,1,0,0,0,2606,2607,7,14,0,0,2607,433,1,0,0,0,2608,2609,5,139,
        0,0,2609,2610,3,306,153,0,2610,435,1,0,0,0,2611,2615,5,131,0,0,2612,
        2614,3,438,219,0,2613,2612,1,0,0,0,2614,2617,1,0,0,0,2615,2613,1,
        0,0,0,2615,2616,1,0,0,0,2616,2618,1,0,0,0,2617,2615,1,0,0,0,2618,
        2619,5,132,0,0,2619,437,1,0,0,0,2620,2622,3,452,226,0,2621,2620,
        1,0,0,0,2621,2622,1,0,0,0,2622,2624,1,0,0,0,2623,2625,5,69,0,0,2624,
        2623,1,0,0,0,2624,2625,1,0,0,0,2625,2689,1,0,0,0,2626,2628,5,108,
        0,0,2627,2626,1,0,0,0,2627,2628,1,0,0,0,2628,2634,1,0,0,0,2629,2635,
        5,85,0,0,2630,2631,5,85,0,0,2631,2635,5,84,0,0,2632,2633,5,84,0,
        0,2633,2635,5,85,0,0,2634,2629,1,0,0,0,2634,2630,1,0,0,0,2634,2632,
        1,0,0,0,2634,2635,1,0,0,0,2635,2636,1,0,0,0,2636,2664,3,12,6,0,2637,
        2639,3,562,281,0,2638,2640,3,300,150,0,2639,2638,1,0,0,0,2639,2640,
        1,0,0,0,2640,2641,1,0,0,0,2641,2643,5,135,0,0,2642,2644,3,380,190,
        0,2643,2642,1,0,0,0,2643,2644,1,0,0,0,2644,2645,1,0,0,0,2645,2647,
        5,136,0,0,2646,2648,3,308,154,0,2647,2646,1,0,0,0,2647,2648,1,0,
        0,0,2648,2649,1,0,0,0,2649,2650,5,140,0,0,2650,2665,1,0,0,0,2651,
        2652,3,562,281,0,2652,2653,5,131,0,0,2653,2654,3,440,220,0,2654,
        2655,5,132,0,0,2655,2665,1,0,0,0,2656,2657,5,99,0,0,2657,2658,5,
        133,0,0,2658,2659,3,380,190,0,2659,2660,5,134,0,0,2660,2661,5,131,
        0,0,2661,2662,3,440,220,0,2662,2663,5,132,0,0,2663,2665,1,0,0,0,
        2664,2637,1,0,0,0,2664,2651,1,0,0,0,2664,2656,1,0,0,0,2665,2690,
        1,0,0,0,2666,2668,5,108,0,0,2667,2666,1,0,0,0,2667,2668,1,0,0,0,
        2668,2669,1,0,0,0,2669,2670,5,113,0,0,2670,2672,3,562,281,0,2671,
        2673,3,300,150,0,2672,2671,1,0,0,0,2672,2673,1,0,0,0,2673,2674,1,
        0,0,0,2674,2676,5,135,0,0,2675,2677,3,380,190,0,2676,2675,1,0,0,
        0,2676,2677,1,0,0,0,2677,2678,1,0,0,0,2678,2680,5,136,0,0,2679,2681,
        3,308,154,0,2680,2679,1,0,0,0,2680,2681,1,0,0,0,2681,2682,1,0,0,
        0,2682,2683,5,140,0,0,2683,2690,1,0,0,0,2684,2685,5,40,0,0,2685,
        2686,3,12,6,0,2686,2687,3,562,281,0,2687,2688,5,140,0,0,2688,2690,
        1,0,0,0,2689,2627,1,0,0,0,2689,2667,1,0,0,0,2689,2684,1,0,0,0,2690,
        439,1,0,0,0,2691,2693,3,452,226,0,2692,2691,1,0,0,0,2692,2693,1,
        0,0,0,2693,2712,1,0,0,0,2694,2695,5,50,0,0,2695,2701,5,140,0,0,2696,
        2698,3,452,226,0,2697,2696,1,0,0,0,2697,2698,1,0,0,0,2698,2699,1,
        0,0,0,2699,2700,5,91,0,0,2700,2702,5,140,0,0,2701,2697,1,0,0,0,2701,
        2702,1,0,0,0,2702,2713,1,0,0,0,2703,2704,5,91,0,0,2704,2710,5,140,
        0,0,2705,2707,3,452,226,0,2706,2705,1,0,0,0,2706,2707,1,0,0,0,2707,
        2708,1,0,0,0,2708,2709,5,50,0,0,2709,2711,5,140,0,0,2710,2706,1,
        0,0,0,2710,2711,1,0,0,0,2711,2713,1,0,0,0,2712,2694,1,0,0,0,2712,
        2703,1,0,0,0,2713,441,1,0,0,0,2714,2715,5,139,0,0,2715,2716,3,12,
        6,0,2716,443,1,0,0,0,2717,2729,5,131,0,0,2718,2723,3,446,223,0,2719,
        2720,5,138,0,0,2720,2722,3,446,223,0,2721,2719,1,0,0,0,2722,2725,
        1,0,0,0,2723,2721,1,0,0,0,2723,2724,1,0,0,0,2724,2727,1,0,0,0,2725,
        2723,1,0,0,0,2726,2728,5,138,0,0,2727,2726,1,0,0,0,2727,2728,1,0,
        0,0,2728,2730,1,0,0,0,2729,2718,1,0,0,0,2729,2730,1,0,0,0,2730,2731,
        1,0,0,0,2731,2732,5,132,0,0,2732,445,1,0,0,0,2733,2735,3,452,226,
        0,2734,2733,1,0,0,0,2734,2735,1,0,0,0,2735,2736,1,0,0,0,2736,2739,
        3,562,281,0,2737,2738,5,151,0,0,2738,2740,3,56,28,0,2739,2737,1,
        0,0,0,2739,2740,1,0,0,0,2740,447,1,0,0,0,2741,2742,5,133,0,0,2742,
        2743,3,450,225,0,2743,2744,5,139,0,0,2744,2746,3,458,229,0,2745,
        2747,5,138,0,0,2746,2745,1,0,0,0,2746,2747,1,0,0,0,2747,2748,1,0,
        0,0,2748,2749,5,134,0,0,2749,449,1,0,0,0,2750,2753,3,502,251,0,2751,
        2753,3,562,281,0,2752,2750,1,0,0,0,2752,2751,1,0,0,0,2753,451,1,
        0,0,0,2754,2756,3,454,227,0,2755,2754,1,0,0,0,2756,2757,1,0,0,0,
        2757,2755,1,0,0,0,2757,2758,1,0,0,0,2758,453,1,0,0,0,2759,2763,5,
        133,0,0,2760,2761,3,456,228,0,2761,2762,5,139,0,0,2762,2764,1,0,
        0,0,2763,2760,1,0,0,0,2763,2764,1,0,0,0,2764,2765,1,0,0,0,2765,2767,
        3,458,229,0,2766,2768,5,138,0,0,2767,2766,1,0,0,0,2767,2768,1,0,
        0,0,2768,2769,1,0,0,0,2769,2770,5,134,0,0,2770,2785,1,0,0,0,2771,
        2772,5,133,0,0,2772,2773,3,458,229,0,2773,2781,5,134,0,0,2774,2775,
        5,138,0,0,2775,2776,5,133,0,0,2776,2777,3,458,229,0,2777,2778,5,
        134,0,0,2778,2780,1,0,0,0,2779,2774,1,0,0,0,2780,2783,1,0,0,0,2781,
        2779,1,0,0,0,2781,2782,1,0,0,0,2782,2785,1,0,0,0,2783,2781,1,0,0,
        0,2784,2759,1,0,0,0,2784,2771,1,0,0,0,2785,455,1,0,0,0,2786,2789,
        3,502,251,0,2787,2789,3,562,281,0,2788,2786,1,0,0,0,2788,2787,1,
        0,0,0,2789,457,1,0,0,0,2790,2795,3,460,230,0,2791,2792,5,138,0,0,
        2792,2794,3,460,230,0,2793,2791,1,0,0,0,2794,2797,1,0,0,0,2795,2793,
        1,0,0,0,2795,2796,1,0,0,0,2796,459,1,0,0,0,2797,2795,1,0,0,0,2798,
        2811,3,10,5,0,2799,2808,5,135,0,0,2800,2805,3,462,231,0,2801,2802,
        5,138,0,0,2802,2804,3,462,231,0,2803,2801,1,0,0,0,2804,2807,1,0,
        0,0,2805,2803,1,0,0,0,2805,2806,1,0,0,0,2806,2809,1,0,0,0,2807,2805,
        1,0,0,0,2808,2800,1,0,0,0,2808,2809,1,0,0,0,2809,2810,1,0,0,0,2810,
        2812,5,136,0,0,2811,2799,1,0,0,0,2811,2812,1,0,0,0,2812,461,1,0,
        0,0,2813,2814,3,562,281,0,2814,2815,5,139,0,0,2815,2817,1,0,0,0,
        2816,2813,1,0,0,0,2816,2817,1,0,0,0,2817,2818,1,0,0,0,2818,2819,
        3,56,28,0,2819,463,1,0,0,0,2820,2823,3,30,15,0,2821,2823,3,46,23,
        0,2822,2820,1,0,0,0,2822,2821,1,0,0,0,2823,2828,1,0,0,0,2824,2827,
        3,424,212,0,2825,2827,5,154,0,0,2826,2824,1,0,0,0,2826,2825,1,0,
        0,0,2827,2830,1,0,0,0,2828,2826,1,0,0,0,2828,2829,1,0,0,0,2829,2831,
        1,0,0,0,2830,2828,1,0,0,0,2831,2832,5,143,0,0,2832,2836,1,0,0,0,
        2833,2834,5,113,0,0,2834,2836,5,143,0,0,2835,2822,1,0,0,0,2835,2833,
        1,0,0,0,2836,465,1,0,0,0,2837,2842,3,468,234,0,2838,2839,5,138,0,
        0,2839,2841,3,468,234,0,2840,2838,1,0,0,0,2841,2844,1,0,0,0,2842,
        2840,1,0,0,0,2842,2843,1,0,0,0,2843,467,1,0,0,0,2844,2842,1,0,0,
        0,2845,2846,3,562,281,0,2846,2847,5,151,0,0,2847,2848,3,470,235,
        0,2848,469,1,0,0,0,2849,2851,5,146,0,0,2850,2849,1,0,0,0,2850,2851,
        1,0,0,0,2851,2852,1,0,0,0,2852,2855,3,56,28,0,2853,2855,3,212,106,
        0,2854,2850,1,0,0,0,2854,2853,1,0,0,0,2855,471,1,0,0,0,2856,2857,
        3,562,281,0,2857,2858,5,133,0,0,2858,2859,3,56,28,0,2859,2860,5,
        134,0,0,2860,473,1,0,0,0,2861,2862,5,151,0,0,2862,2863,5,153,0,0,
        2863,2864,4,237,0,1,2864,475,1,0,0,0,2865,2866,5,153,0,0,2866,2867,
        5,153,0,0,2867,2868,4,238,1,1,2868,477,1,0,0,0,2869,2870,5,153,0,
        0,2870,2871,5,165,0,0,2871,2872,4,239,2,1,2872,479,1,0,0,0,2873,
        2882,3,482,241,0,2874,2882,3,484,242,0,2875,2882,5,122,0,0,2876,
        2882,5,123,0,0,2877,2882,5,124,0,0,2878,2882,5,125,0,0,2879,2882,
        5,126,0,0,2880,2882,5,71,0,0,2881,2873,1,0,0,0,2881,2874,1,0,0,0,
        2881,2875,1,0,0,0,2881,2876,1,0,0,0,2881,2877,1,0,0,0,2881,2878,
        1,0,0,0,2881,2879,1,0,0,0,2881,2880,1,0,0,0,2882,481,1,0,0,0,2883,
        2884,7,15,0,0,2884,483,1,0,0,0,2885,2890,3,486,243,0,2886,2890,3,
        488,244,0,2887,2890,5,127,0,0,2888,2890,5,128,0,0,2889,2885,1,0,
        0,0,2889,2886,1,0,0,0,2889,2887,1,0,0,0,2889,2888,1,0,0,0,2890,485,
        1,0,0,0,2891,2895,5,129,0,0,2892,2894,3,490,245,0,2893,2892,1,0,
        0,0,2894,2897,1,0,0,0,2895,2893,1,0,0,0,2895,2896,1,0,0,0,2896,2898,
        1,0,0,0,2897,2895,1,0,0,0,2898,2899,5,182,0,0,2899,487,1,0,0,0,2900,
        2904,5,130,0,0,2901,2903,3,492,246,0,2902,2901,1,0,0,0,2903,2906,
        1,0,0,0,2904,2902,1,0,0,0,2904,2905,1,0,0,0,2905,2907,1,0,0,0,2906,
        2904,1,0,0,0,2907,2908,5,182,0,0,2908,489,1,0,0,0,2909,2918,3,494,
        247,0,2910,2918,5,178,0,0,2911,2918,5,180,0,0,2912,2918,5,183,0,
        0,2913,2918,5,179,0,0,2914,2918,5,185,0,0,2915,2918,5,182,0,0,2916,
        2918,5,184,0,0,2917,2909,1,0,0,0,2917,2910,1,0,0,0,2917,2911,1,0,
        0,0,2917,2912,1,0,0,0,2917,2913,1,0,0,0,2917,2914,1,0,0,0,2917,2915,
        1,0,0,0,2917,2916,1,0,0,0,2918,491,1,0,0,0,2919,2924,3,494,247,0,
        2920,2924,5,178,0,0,2921,2924,5,181,0,0,2922,2924,5,184,0,0,2923,
        2919,1,0,0,0,2923,2920,1,0,0,0,2923,2921,1,0,0,0,2923,2922,1,0,0,
        0,2924,493,1,0,0,0,2925,2926,5,131,0,0,2926,2929,3,56,28,0,2927,
        2928,5,138,0,0,2928,2930,3,496,248,0,2929,2927,1,0,0,0,2929,2930,
        1,0,0,0,2930,2932,1,0,0,0,2931,2933,3,498,249,0,2932,2931,1,0,0,
        0,2932,2933,1,0,0,0,2933,2934,1,0,0,0,2934,2935,5,132,0,0,2935,495,
        1,0,0,0,2936,2937,3,500,250,0,2937,497,1,0,0,0,2938,2940,5,139,0,
        0,2939,2941,5,186,0,0,2940,2939,1,0,0,0,2941,2942,1,0,0,0,2942,2940,
        1,0,0,0,2942,2943,1,0,0,0,2943,499,1,0,0,0,2944,2945,3,56,28,0,2945,
        501,1,0,0,0,2946,2947,7,16,0,0,2947,503,1,0,0,0,2948,2950,3,506,
        253,0,2949,2948,1,0,0,0,2950,2953,1,0,0,0,2951,2949,1,0,0,0,2951,
        2952,1,0,0,0,2952,2955,1,0,0,0,2953,2951,1,0,0,0,2954,2956,5,80,
        0,0,2955,2954,1,0,0,0,2955,2956,1,0,0,0,2956,2957,1,0,0,0,2957,2958,
        5,27,0,0,2958,2960,3,562,281,0,2959,2961,3,300,150,0,2960,2959,1,
        0,0,0,2960,2961,1,0,0,0,2961,2963,1,0,0,0,2962,2964,3,304,152,0,
        2963,2962,1,0,0,0,2963,2964,1,0,0,0,2964,2966,1,0,0,0,2965,2967,
        3,308,154,0,2966,2965,1,0,0,0,2966,2967,1,0,0,0,2967,2968,1,0,0,
        0,2968,2970,3,350,175,0,2969,2971,5,140,0,0,2970,2969,1,0,0,0,2970,
        2971,1,0,0,0,2971,505,1,0,0,0,2972,2973,7,17,0,0,2973,507,1,0,0,
        0,2974,2976,3,510,255,0,2975,2974,1,0,0,0,2976,2979,1,0,0,0,2977,
        2975,1,0,0,0,2977,2978,1,0,0,0,2978,2981,1,0,0,0,2979,2977,1,0,0,
        0,2980,2982,5,85,0,0,2981,2980,1,0,0,0,2981,2982,1,0,0,0,2982,2984,
        1,0,0,0,2983,2985,5,80,0,0,2984,2983,1,0,0,0,2984,2985,1,0,0,0,2985,
        2989,1,0,0,0,2986,2990,5,119,0,0,2987,2988,5,84,0,0,2988,2990,5,
        119,0,0,2989,2986,1,0,0,0,2989,2987,1,0,0,0,2989,2990,1,0,0,0,2990,
        2991,1,0,0,0,2991,2992,5,97,0,0,2992,2994,3,562,281,0,2993,2995,
        3,300,150,0,2994,2993,1,0,0,0,2994,2995,1,0,0,0,2995,2997,1,0,0,
        0,2996,2998,3,416,208,0,2997,2996,1,0,0,0,2997,2998,1,0,0,0,2998,
        3000,1,0,0,0,2999,3001,3,308,154,0,3000,2999,1,0,0,0,3000,3001,1,
        0,0,0,3001,3002,1,0,0,0,3002,3003,3,418,209,0,3003,509,1,0,0,0,3004,
        3005,7,18,0,0,3005,511,1,0,0,0,3006,3007,5,58,0,0,3007,3009,3,562,
        281,0,3008,3010,3,428,214,0,3009,3008,1,0,0,0,3009,3010,1,0,0,0,
        3010,3012,1,0,0,0,3011,3013,3,434,217,0,3012,3011,1,0,0,0,3012,3013,
        1,0,0,0,3013,3015,1,0,0,0,3014,3016,3,308,154,0,3015,3014,1,0,0,
        0,3015,3016,1,0,0,0,3016,3017,1,0,0,0,3017,3019,3,350,175,0,3018,
        3020,5,140,0,0,3019,3018,1,0,0,0,3019,3020,1,0,0,0,3020,513,1,0,
        0,0,3021,3022,5,38,0,0,3022,3024,3,562,281,0,3023,3025,3,442,221,
        0,3024,3023,1,0,0,0,3024,3025,1,0,0,0,3025,3026,1,0,0,0,3026,3028,
        3,444,222,0,3027,3029,5,140,0,0,3028,3027,1,0,0,0,3028,3029,1,0,
        0,0,3029,515,1,0,0,0,3030,3031,5,32,0,0,3031,3032,3,374,187,0,3032,
        3034,3,562,281,0,3033,3035,3,428,214,0,3034,3033,1,0,0,0,3034,3035,
        1,0,0,0,3035,3036,1,0,0,0,3036,3038,5,135,0,0,3037,3039,3,380,190,
        0,3038,3037,1,0,0,0,3038,3039,1,0,0,0,3039,3040,1,0,0,0,3040,3042,
        5,136,0,0,3041,3043,3,308,154,0,3042,3041,1,0,0,0,3042,3043,1,0,
        0,0,3043,3044,1,0,0,0,3044,3045,5,140,0,0,3045,517,1,0,0,0,3046,
        3047,5,40,0,0,3047,3056,3,12,6,0,3048,3049,3,368,184,0,3049,3050,
        5,140,0,0,3050,3057,1,0,0,0,3051,3052,3,376,188,0,3052,3053,5,131,
        0,0,3053,3054,3,402,201,0,3054,3055,5,132,0,0,3055,3057,1,0,0,0,
        3056,3048,1,0,0,0,3056,3051,1,0,0,0,3057,519,1,0,0,0,3058,3059,3,
        368,184,0,3059,3060,5,140,0,0,3060,521,1,0,0,0,3061,3075,3,376,188,
        0,3062,3063,5,131,0,0,3063,3064,3,390,195,0,3064,3069,5,132,0,0,
        3065,3066,5,151,0,0,3066,3067,3,372,186,0,3067,3068,5,140,0,0,3068,
        3070,1,0,0,0,3069,3065,1,0,0,0,3069,3070,1,0,0,0,3070,3076,1,0,0,
        0,3071,3072,3,474,237,0,3072,3073,3,104,52,0,3073,3074,5,140,0,0,
        3074,3076,1,0,0,0,3075,3062,1,0,0,0,3075,3071,1,0,0,0,3076,523,1,
        0,0,0,3077,3078,5,28,0,0,3078,3079,3,12,6,0,3079,3080,3,364,182,
        0,3080,3081,5,140,0,0,3081,525,1,0,0,0,3082,3083,5,99,0,0,3083,3084,
        5,133,0,0,3084,3085,3,380,190,0,3085,3094,5,134,0,0,3086,3087,5,
        131,0,0,3087,3088,3,390,195,0,3088,3089,5,132,0,0,3089,3095,1,0,
        0,0,3090,3091,3,474,237,0,3091,3092,3,104,52,0,3092,3093,5,140,0,
        0,3093,3095,1,0,0,0,3094,3086,1,0,0,0,3094,3090,1,0,0,0,3095,527,
        1,0,0,0,3096,3097,5,150,0,0,3097,3098,3,562,281,0,3098,3099,5,135,
        0,0,3099,3100,5,136,0,0,3100,3101,3,414,207,0,3101,529,1,0,0,0,3102,
        3103,3,562,281,0,3103,3105,5,135,0,0,3104,3106,3,380,190,0,3105,
        3104,1,0,0,0,3105,3106,1,0,0,0,3106,3107,1,0,0,0,3107,3109,5,136,
        0,0,3108,3110,3,412,206,0,3109,3108,1,0,0,0,3109,3110,1,0,0,0,3110,
        3111,1,0,0,0,3111,3112,3,414,207,0,3112,531,1,0,0,0,3113,3115,3,
        452,226,0,3114,3113,1,0,0,0,3114,3115,1,0,0,0,3115,3116,1,0,0,0,
        3116,3118,3,542,271,0,3117,3119,5,83,0,0,3118,3117,1,0,0,0,3118,
        3119,1,0,0,0,3119,3120,1,0,0,0,3120,3121,3,374,187,0,3121,3122,3,
        534,267,0,3122,3123,3,378,189,0,3123,3134,1,0,0,0,3124,3126,3,452,
        226,0,3125,3124,1,0,0,0,3125,3126,1,0,0,0,3126,3127,1,0,0,0,3127,
        3128,3,538,269,0,3128,3129,3,536,268,0,3129,3130,3,540,270,0,3130,
        3131,3,534,267,0,3131,3132,3,546,273,0,3132,3134,1,0,0,0,3133,3114,
        1,0,0,0,3133,3125,1,0,0,0,3134,533,1,0,0,0,3135,3136,3,550,275,0,
        3136,3138,5,135,0,0,3137,3139,3,380,190,0,3138,3137,1,0,0,0,3138,
        3139,1,0,0,0,3139,3140,1,0,0,0,3140,3141,5,136,0,0,3141,3156,1,0,
        0,0,3142,3143,3,550,275,0,3143,3144,3,300,150,0,3144,3146,5,135,
        0,0,3145,3147,3,380,190,0,3146,3145,1,0,0,0,3146,3147,1,0,0,0,3147,
        3148,1,0,0,0,3148,3152,5,136,0,0,3149,3151,3,310,155,0,3150,3149,
        1,0,0,0,3151,3154,1,0,0,0,3152,3150,1,0,0,0,3152,3153,1,0,0,0,3153,
        3156,1,0,0,0,3154,3152,1,0,0,0,3155,3135,1,0,0,0,3155,3142,1,0,0,
        0,3156,535,1,0,0,0,3157,3161,5,85,0,0,3158,3159,5,85,0,0,3159,3161,
        5,84,0,0,3160,3157,1,0,0,0,3160,3158,1,0,0,0,3161,537,1,0,0,0,3162,
        3164,3,548,274,0,3163,3162,1,0,0,0,3164,3167,1,0,0,0,3165,3163,1,
        0,0,0,3165,3166,1,0,0,0,3166,539,1,0,0,0,3167,3165,1,0,0,0,3168,
        3169,3,12,6,0,3169,541,1,0,0,0,3170,3172,3,544,272,0,3171,3170,1,
        0,0,0,3172,3175,1,0,0,0,3173,3171,1,0,0,0,3173,3174,1,0,0,0,3174,
        3177,1,0,0,0,3175,3173,1,0,0,0,3176,3178,5,80,0,0,3177,3176,1,0,
        0,0,3177,3178,1,0,0,0,3178,543,1,0,0,0,3179,3182,3,548,274,0,3180,
        3182,5,16,0,0,3181,3179,1,0,0,0,3181,3180,1,0,0,0,3182,545,1,0,0,
        0,3183,3191,3,228,114,0,3184,3185,3,474,237,0,3185,3186,5,85,0,0,
        3186,3187,3,44,22,0,3187,3188,5,140,0,0,3188,3191,1,0,0,0,3189,3191,
        5,140,0,0,3190,3183,1,0,0,0,3190,3184,1,0,0,0,3190,3189,1,0,0,0,
        3191,547,1,0,0,0,3192,3193,7,19,0,0,3193,549,1,0,0,0,3194,3200,3,
        562,281,0,3195,3196,3,562,281,0,3196,3197,5,155,0,0,3197,3198,3,
        562,281,0,3198,3200,1,0,0,0,3199,3194,1,0,0,0,3199,3195,1,0,0,0,
        3200,3208,1,0,0,0,3201,3203,3,48,24,0,3202,3201,1,0,0,0,3202,3203,
        1,0,0,0,3203,3204,1,0,0,0,3204,3205,5,137,0,0,3205,3207,3,562,281,
        0,3206,3202,1,0,0,0,3207,3210,1,0,0,0,3208,3206,1,0,0,0,3208,3209,
        1,0,0,0,3209,551,1,0,0,0,3210,3208,1,0,0,0,3211,3212,5,75,0,0,3212,
        3213,3,408,204,0,3213,3215,5,135,0,0,3214,3216,5,56,0,0,3215,3214,
        1,0,0,0,3215,3216,1,0,0,0,3216,3217,1,0,0,0,3217,3223,3,554,277,
        0,3218,3220,5,138,0,0,3219,3221,5,56,0,0,3220,3219,1,0,0,0,3220,
        3221,1,0,0,0,3221,3222,1,0,0,0,3222,3224,3,554,277,0,3223,3218,1,
        0,0,0,3223,3224,1,0,0,0,3224,3225,1,0,0,0,3225,3231,5,136,0,0,3226,
        3232,3,414,207,0,3227,3228,3,474,237,0,3228,3229,3,104,52,0,3229,
        3230,5,140,0,0,3230,3232,1,0,0,0,3231,3226,1,0,0,0,3231,3227,1,0,
        0,0,3232,553,1,0,0,0,3233,3234,3,12,6,0,3234,3237,3,562,281,0,3235,
        3236,5,151,0,0,3236,3238,3,56,28,0,3237,3235,1,0,0,0,3237,3238,1,
        0,0,0,3238,555,1,0,0,0,3239,3241,5,135,0,0,3240,3242,3,50,25,0,3241,
        3240,1,0,0,0,3241,3242,1,0,0,0,3242,3243,1,0,0,0,3243,3244,5,136,
        0,0,3244,557,1,0,0,0,3245,3247,5,135,0,0,3246,3248,3,50,25,0,3247,
        3246,1,0,0,0,3247,3248,1,0,0,0,3248,3249,1,0,0,0,3249,3251,5,136,
        0,0,3250,3252,3,118,59,0,3251,3250,1,0,0,0,3251,3252,1,0,0,0,3252,
        3268,1,0,0,0,3253,3268,3,118,59,0,3254,3268,3,560,280,0,3255,3256,
        5,133,0,0,3256,3257,3,116,58,0,3257,3261,5,134,0,0,3258,3260,3,424,
        212,0,3259,3258,1,0,0,0,3260,3263,1,0,0,0,3261,3259,1,0,0,0,3261,
        3262,1,0,0,0,3262,3265,1,0,0,0,3263,3261,1,0,0,0,3264,3266,3,426,
        213,0,3265,3264,1,0,0,0,3265,3266,1,0,0,0,3266,3268,1,0,0,0,3267,
        3245,1,0,0,0,3267,3253,1,0,0,0,3267,3254,1,0,0,0,3267,3255,1,0,0,
        0,3268,559,1,0,0,0,3269,3271,5,135,0,0,3270,3272,3,50,25,0,3271,
        3270,1,0,0,0,3271,3272,1,0,0,0,3272,3273,1,0,0,0,3273,3275,5,136,
        0,0,3274,3276,3,118,59,0,3275,3274,1,0,0,0,3275,3276,1,0,0,0,3276,
        561,1,0,0,0,3277,3278,7,20,0,0,3278,563,1,0,0,0,408,565,570,581,
        585,587,592,612,616,619,624,628,635,637,641,654,662,670,675,678,
        688,694,696,700,704,709,717,732,740,750,754,757,762,765,775,780,
        790,803,820,826,828,835,843,851,859,867,875,887,889,895,900,908,
        916,924,926,929,936,941,948,952,954,978,987,992,996,1004,1007,1012,
        1016,1020,1026,1031,1045,1051,1063,1067,1072,1076,1082,1092,1101,
        1119,1122,1127,1130,1145,1151,1155,1161,1166,1169,1177,1185,1196,
        1201,1206,1208,1217,1225,1233,1241,1245,1255,1260,1262,1271,1279,
        1283,1288,1290,1295,1299,1306,1314,1316,1320,1323,1326,1334,1344,
        1347,1350,1367,1374,1378,1388,1393,1400,1409,1414,1421,1433,1444,
        1452,1457,1466,1475,1484,1490,1495,1499,1503,1507,1511,1515,1522,
        1542,1564,1568,1572,1577,1584,1600,1605,1610,1621,1639,1655,1665,
        1669,1673,1684,1688,1706,1725,1729,1733,1741,1749,1763,1770,1790,
        1795,1798,1805,1814,1821,1828,1834,1842,1850,1853,1860,1867,1871,
        1874,1880,1884,1890,1904,1910,1917,1922,1925,1928,1932,1937,1947,
        1950,1959,1966,1973,1978,1984,1987,1990,1998,2002,2006,2009,2012,
        2016,2027,2032,2036,2043,2047,2056,2064,2070,2080,2088,2094,2105,
        2109,2111,2116,2120,2131,2134,2137,2140,2148,2165,2194,2197,2211,
        2220,2227,2230,2233,2237,2242,2255,2265,2272,2284,2291,2303,2309,
        2313,2317,2327,2333,2335,2342,2346,2349,2353,2363,2366,2373,2376,
        2381,2386,2391,2396,2398,2401,2407,2410,2416,2419,2436,2444,2447,
        2457,2460,2466,2493,2506,2516,2525,2530,2533,2536,2544,2548,2554,
        2560,2566,2577,2581,2583,2593,2599,2602,2615,2621,2624,2627,2634,
        2639,2643,2647,2664,2667,2672,2676,2680,2689,2692,2697,2701,2706,
        2710,2712,2723,2727,2729,2734,2739,2746,2752,2757,2763,2767,2781,
        2784,2788,2795,2805,2808,2811,2816,2822,2826,2828,2835,2842,2850,
        2854,2881,2889,2895,2904,2917,2923,2929,2932,2942,2951,2955,2960,
        2963,2966,2970,2977,2981,2984,2989,2994,2997,3000,3009,3012,3015,
        3019,3024,3028,3034,3038,3042,3056,3069,3075,3094,3105,3109,3114,
        3118,3125,3133,3138,3146,3152,3155,3160,3165,3173,3177,3181,3190,
        3199,3202,3208,3215,3220,3223,3231,3237,3241,3247,3251,3261,3265,
        3267,3271,3275
    ]

class CSharpParser ( CSharpParserBase ):

    grammarFileName = "CSharpParser.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "'\\u00EF\\u00BB\\u00BF'", "<INVALID>", 
                     "'/***/'", "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "'#'", "'abstract'", "'add'", "'and'", "'alias'", "'__arglist'", 
                     "'as'", "'ascending'", "'async'", "'await'", "'base'", 
                     "'bool'", "'break'", "'by'", "'byte'", "'case'", "'catch'", 
                     "'char'", "'checked'", "'class'", "'const'", "'continue'", 
                     "'decimal'", "'default'", "'delegate'", "'descending'", 
                     "'do'", "'double'", "'dynamic'", "'else'", "'enum'", 
                     "'equals'", "'event'", "'explicit'", "'extern'", "'false'", 
                     "'finally'", "'fixed'", "'float'", "'for'", "'foreach'", 
                     "'from'", "'get'", "'goto'", "'global'", "'group'", 
                     "'if'", "'implicit'", "'in'", "'int'", "'interface'", 
                     "'internal'", "'init'", "'into'", "'is'", "'join'", 
                     "'let'", "'lock'", "'long'", "'nameof'", "'namespace'", 
                     "'new'", "'not'", "'null'", "'object'", "'on'", "'or'", 
                     "'operator'", "'orderby'", "'out'", "'override'", "'params'", 
                     "'partial'", "'private'", "'protected'", "'public'", 
                     "'readonly'", "'ref'", "'remove'", "'return'", "'sbyte'", 
                     "'sealed'", "'select'", "'set'", "'short'", "'sizeof'", 
                     "'stackalloc'", "'static'", "'string'", "'struct'", 
                     "'switch'", "'this'", "'throw'", "'true'", "'try'", 
                     "'typeof'", "'uint'", "'ulong'", "'unchecked'", "'unmanaged'", 
                     "'unsafe'", "'ushort'", "'using'", "'var'", "'virtual'", 
                     "'void'", "'volatile'", "'when'", "'where'", "'while'", 
                     "'yield'", "'record'", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "'{'", "'}'", "'['", "']'", "'('", "')'", "'.'", "','", 
                     "':'", "';'", "'+'", "'-'", "'*'", "'/'", "'%'", "'&'", 
                     "'|'", "'^'", "'!'", "'~'", "'='", "'<'", "'>'", "'?'", 
                     "'::'", "'??'", "'++'", "'--'", "'&&'", "'||'", "'->'", 
                     "'=='", "'!='", "'<='", "'>='", "'+='", "'-='", "'*='", 
                     "'/='", "'%='", "'&='", "'|='", "'^='", "'<<'", "'<<='", 
                     "'??='", "'..'", "'{{'", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "'define'", "'undef'", "'elif'", "'endif'", "'line'", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "'hidden'", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "'}}'" ]

    symbolicNames = [ "<INVALID>", "BYTE_ORDER_MARK", "SINGLE_LINE_DOC_COMMENT", 
                      "EMPTY_DELIMITED_DOC_COMMENT", "DELIMITED_DOC_COMMENT", 
                      "SINGLE_LINE_COMMENT", "DELIMITED_COMMENT", "WHITESPACES", 
                      "SHARP", "ABSTRACT", "ADD", "AND", "ALIAS", "ARGLIST", 
                      "AS", "ASCENDING", "ASYNC", "AWAIT", "BASE", "BOOL", 
                      "BREAK", "BY", "BYTE", "CASE", "CATCH", "CHAR", "CHECKED", 
                      "CLASS", "CONST", "CONTINUE", "DECIMAL", "DEFAULT", 
                      "DELEGATE", "DESCENDING", "DO", "DOUBLE", "DYNAMIC", 
                      "ELSE", "ENUM", "EQUALS", "EVENT", "EXPLICIT", "EXTERN", 
                      "FALSE", "FINALLY", "FIXED", "FLOAT", "FOR", "FOREACH", 
                      "FROM", "GET", "GOTO", "GLOBAL", "GROUP", "IF", "IMPLICIT", 
                      "IN", "INT", "INTERFACE", "INTERNAL", "INIT", "INTO", 
                      "IS", "JOIN", "LET", "LOCK", "LONG", "NAMEOF", "NAMESPACE", 
                      "NEW", "NOT", "NULL_", "OBJECT", "ON", "OR", "OPERATOR", 
                      "ORDERBY", "OUT", "OVERRIDE", "PARAMS", "PARTIAL", 
                      "PRIVATE", "PROTECTED", "PUBLIC", "READONLY", "REF", 
                      "REMOVE", "RETURN", "SBYTE", "SEALED", "SELECT", "SET", 
                      "SHORT", "SIZEOF", "STACKALLOC", "STATIC", "STRING", 
                      "STRUCT", "SWITCH", "THIS", "THROW", "TRUE", "TRY", 
                      "TYPEOF", "UINT", "ULONG", "UNCHECKED", "UNMANAGED", 
                      "UNSAFE", "USHORT", "USING", "VAR", "VIRTUAL", "VOID", 
                      "VOLATILE", "WHEN", "WHERE", "WHILE", "YIELD", "RECORD", 
                      "IDENTIFIER", "LITERAL_ACCESS", "INTEGER_LITERAL", 
                      "HEX_INTEGER_LITERAL", "BIN_INTEGER_LITERAL", "REAL_LITERAL", 
                      "CHARACTER_LITERAL", "REGULAR_STRING", "VERBATIUM_STRING", 
                      "INTERPOLATED_REGULAR_STRING_START", "INTERPOLATED_VERBATIUM_STRING_START", 
                      "OPEN_BRACE", "CLOSE_BRACE", "OPEN_BRACKET", "CLOSE_BRACKET", 
                      "OPEN_PARENS", "CLOSE_PARENS", "DOT", "COMMA", "COLON", 
                      "SEMICOLON", "PLUS", "MINUS", "STAR", "DIV", "PERCENT", 
                      "AMP", "BITWISE_OR", "CARET", "BANG", "TILDE", "ASSIGNMENT", 
                      "LT", "GT", "INTERR", "DOUBLE_COLON", "OP_COALESCING", 
                      "OP_INC", "OP_DEC", "OP_AND", "OP_OR", "OP_PTR", "OP_EQ", 
                      "OP_NE", "OP_LE", "OP_GE", "OP_ADD_ASSIGNMENT", "OP_SUB_ASSIGNMENT", 
                      "OP_MULT_ASSIGNMENT", "OP_DIV_ASSIGNMENT", "OP_MOD_ASSIGNMENT", 
                      "OP_AND_ASSIGNMENT", "OP_OR_ASSIGNMENT", "OP_XOR_ASSIGNMENT", 
                      "OP_LEFT_SHIFT", "OP_LEFT_SHIFT_ASSIGNMENT", "OP_COALESCING_ASSIGNMENT", 
                      "OP_RANGE", "DOUBLE_CURLY_INSIDE", "OPEN_BRACE_INSIDE", 
                      "REGULAR_CHAR_INSIDE", "VERBATIUM_DOUBLE_QUOTE_INSIDE", 
                      "DOUBLE_QUOTE_INSIDE", "REGULAR_STRING_INSIDE", "VERBATIUM_INSIDE_STRING", 
                      "CLOSE_BRACE_INSIDE", "FORMAT_STRING", "DIRECTIVE_WHITESPACES", 
                      "DIGITS", "DEFINE", "UNDEF", "ELIF", "ENDIF", "LINE", 
                      "ERROR", "WARNING", "REGION", "ENDREGION", "PRAGMA", 
                      "NULLABLE", "DIRECTIVE_HIDDEN", "CONDITIONAL_SYMBOL", 
                      "DIRECTIVE_NEW_LINE", "TEXT", "DOUBLE_CURLY_CLOSE_INSIDE" ]

    RULE_compilation_unit = 0
    RULE_compilation_unit_element = 1
    RULE_top_level_statements = 2
    RULE_global_using_directives = 3
    RULE_global_using_directive = 4
    RULE_namespace_or_type_name = 5
    RULE_type_ = 6
    RULE_function_pointer_type = 7
    RULE_function_pointer_parameter_list = 8
    RULE_base_type = 9
    RULE_tuple_type = 10
    RULE_deconstruction_expression = 11
    RULE_deconstruction_tuple = 12
    RULE_deconstruction_element = 13
    RULE_tuple_element = 14
    RULE_simple_type = 15
    RULE_numeric_type = 16
    RULE_integral_type = 17
    RULE_floating_point_type = 18
    RULE_default_value_expression = 19
    RULE_explictly_typed_default = 20
    RULE_default_literal = 21
    RULE_variable_reference = 22
    RULE_class_type = 23
    RULE_type_argument_list = 24
    RULE_argument_list = 25
    RULE_argument = 26
    RULE_argument_name = 27
    RULE_expression = 28
    RULE_non_assignment_expression = 29
    RULE_assignment = 30
    RULE_assignment_operator = 31
    RULE_conditional_expression = 32
    RULE_null_coalescing_expression = 33
    RULE_conditional_or_expression = 34
    RULE_conditional_and_expression = 35
    RULE_inclusive_or_expression = 36
    RULE_exclusive_or_expression = 37
    RULE_and_expression = 38
    RULE_equality_expression = 39
    RULE_relational_expression = 40
    RULE_shift_expression = 41
    RULE_additive_expression = 42
    RULE_multiplicative_expression = 43
    RULE_switch_expression = 44
    RULE_switch_expression_arms = 45
    RULE_switch_expression_arm = 46
    RULE_range_expression = 47
    RULE_unary_expression = 48
    RULE_cast_expression = 49
    RULE_primary_expression = 50
    RULE_primary_expression_start = 51
    RULE_throwable_expression = 52
    RULE_throw_expression = 53
    RULE_member_access = 54
    RULE_bracket_expression = 55
    RULE_indexer_argument = 56
    RULE_predefined_type = 57
    RULE_expression_list = 58
    RULE_object_or_collection_initializer = 59
    RULE_object_initializer = 60
    RULE_member_initializer_list = 61
    RULE_member_initializer = 62
    RULE_initializer_value = 63
    RULE_collection_initializer = 64
    RULE_element_initializer = 65
    RULE_anonymous_object_initializer = 66
    RULE_member_declarator_list = 67
    RULE_member_declarator = 68
    RULE_unbound_type_name = 69
    RULE_generic_dimension_specifier = 70
    RULE_isType = 71
    RULE_isTypePatternArms = 72
    RULE_isTypePatternArm = 73
    RULE_lambda_expression = 74
    RULE_anonymous_function_signature = 75
    RULE_explicit_anonymous_function_parameter_list = 76
    RULE_explicit_anonymous_function_parameter = 77
    RULE_implicit_anonymous_function_parameter_list = 78
    RULE_anonymous_function_body = 79
    RULE_query_expression = 80
    RULE_from_clause = 81
    RULE_query_body = 82
    RULE_query_body_clause = 83
    RULE_let_clause = 84
    RULE_where_clause = 85
    RULE_combined_join_clause = 86
    RULE_orderby_clause = 87
    RULE_ordering = 88
    RULE_select_or_group_clause = 89
    RULE_query_continuation = 90
    RULE_statement = 91
    RULE_declarationStatement = 92
    RULE_local_function_declaration = 93
    RULE_local_function_header = 94
    RULE_local_function_modifiers = 95
    RULE_local_function_body = 96
    RULE_labeled_Statement = 97
    RULE_embedded_statement = 98
    RULE_empty_statement = 99
    RULE_if_statement = 100
    RULE_checked_statement = 101
    RULE_unchecked_statement = 102
    RULE_lock_statement = 103
    RULE_unmanaged_type = 104
    RULE_stackalloc_expression = 105
    RULE_stackalloc_initializer = 106
    RULE_stackalloc_initializer_element_list = 107
    RULE_stackalloc_element_initializer = 108
    RULE_using_statement = 109
    RULE_yield_statement = 110
    RULE_fixed_statement = 111
    RULE_unsafe_statement = 112
    RULE_try_statement = 113
    RULE_block = 114
    RULE_local_variable_declaration = 115
    RULE_unsafe_function_pointer = 116
    RULE_delegate_function_pointer = 117
    RULE_local_variable_type = 118
    RULE_local_variable_declarator = 119
    RULE_local_variable_initializer = 120
    RULE_local_constant_declaration = 121
    RULE_switch_section = 122
    RULE_switch_label = 123
    RULE_case_guard = 124
    RULE_statement_list = 125
    RULE_for_initializer = 126
    RULE_for_iterator = 127
    RULE_catch_clauses = 128
    RULE_specific_catch_clause = 129
    RULE_general_catch_clause = 130
    RULE_exception_filter = 131
    RULE_finally_clause = 132
    RULE_resource_acquisition = 133
    RULE_namespace_declaration = 134
    RULE_qualified_identifier = 135
    RULE_namespace_body = 136
    RULE_extern_alias_directives = 137
    RULE_extern_alias_directive = 138
    RULE_using_directives = 139
    RULE_using_directive = 140
    RULE_namespace_member_declarations = 141
    RULE_namespace_member_declaration = 142
    RULE_type_declaration = 143
    RULE_record_definition = 144
    RULE_record_base = 145
    RULE_record_body = 146
    RULE_record_parameters = 147
    RULE_record_parameter = 148
    RULE_qualified_alias_member = 149
    RULE_type_parameter_list = 150
    RULE_type_parameter = 151
    RULE_class_base = 152
    RULE_interface_type_list = 153
    RULE_type_parameter_constraints_clauses = 154
    RULE_type_parameter_constraints_clause = 155
    RULE_type_parameter_constraints = 156
    RULE_primary_constraint = 157
    RULE_pattern = 158
    RULE_is_pattern = 159
    RULE_property_pattern = 160
    RULE_property_pattern_clause = 161
    RULE_relational_pattern = 162
    RULE_and_pattern = 163
    RULE_or_pattern = 164
    RULE_not_pattern = 165
    RULE_declaration_pattern = 166
    RULE_simple_designation = 167
    RULE_single_variable_designation = 168
    RULE_constant_pattern = 169
    RULE_var_pattern = 170
    RULE_designation = 171
    RULE_module_initializer_declaration = 172
    RULE_secondary_constraints = 173
    RULE_constructor_constraint = 174
    RULE_class_body = 175
    RULE_class_member_declarations = 176
    RULE_class_member_declaration = 177
    RULE_all_member_modifiers = 178
    RULE_all_member_modifier = 179
    RULE_common_member_declaration = 180
    RULE_typed_member_declaration = 181
    RULE_constant_declarators = 182
    RULE_constant_declarator = 183
    RULE_variable_declarators = 184
    RULE_variable_declarator = 185
    RULE_variable_initializer = 186
    RULE_return_type = 187
    RULE_member_name = 188
    RULE_method_body = 189
    RULE_formal_parameter_list = 190
    RULE_fixed_parameters = 191
    RULE_fixed_parameter = 192
    RULE_parameter_modifier = 193
    RULE_parameter_array = 194
    RULE_accessor_declarations = 195
    RULE_init_accessor_declaration = 196
    RULE_get_accessor_declaration = 197
    RULE_set_accessor_declaration = 198
    RULE_accessor_modifier = 199
    RULE_accessor_body = 200
    RULE_event_accessor_declarations = 201
    RULE_add_accessor_declaration = 202
    RULE_remove_accessor_declaration = 203
    RULE_overloadable_operator = 204
    RULE_conversion_operator_declarator = 205
    RULE_constructor_initializer = 206
    RULE_body = 207
    RULE_struct_interfaces = 208
    RULE_struct_body = 209
    RULE_struct_member_declaration = 210
    RULE_array_type = 211
    RULE_rank_specifier = 212
    RULE_array_initializer = 213
    RULE_variant_type_parameter_list = 214
    RULE_variant_type_parameter = 215
    RULE_variance_annotation = 216
    RULE_interface_base = 217
    RULE_interface_body = 218
    RULE_interface_member_declaration = 219
    RULE_interface_accessors = 220
    RULE_enum_base = 221
    RULE_enum_body = 222
    RULE_enum_member_declaration = 223
    RULE_global_attribute_section = 224
    RULE_global_attribute_target = 225
    RULE_attributes = 226
    RULE_attribute_section = 227
    RULE_attribute_target = 228
    RULE_attribute_list = 229
    RULE_attribute = 230
    RULE_attribute_argument = 231
    RULE_pointer_type = 232
    RULE_fixed_pointer_declarators = 233
    RULE_fixed_pointer_declarator = 234
    RULE_fixed_pointer_initializer = 235
    RULE_fixed_size_buffer_declarator = 236
    RULE_right_arrow = 237
    RULE_right_shift = 238
    RULE_right_shift_assignment = 239
    RULE_literal = 240
    RULE_boolean_literal = 241
    RULE_string_literal = 242
    RULE_interpolated_regular_string = 243
    RULE_interpolated_verbatium_string = 244
    RULE_interpolated_regular_string_part = 245
    RULE_interpolated_verbatium_string_part = 246
    RULE_interpolated_string_expression = 247
    RULE_interpolation_minimum_width = 248
    RULE_format_string = 249
    RULE_constant_expression = 250
    RULE_keyword = 251
    RULE_class_definition = 252
    RULE_class_modifier = 253
    RULE_struct_definition = 254
    RULE_struct_modifier = 255
    RULE_interface_definition = 256
    RULE_enum_definition = 257
    RULE_delegate_definition = 258
    RULE_event_declaration = 259
    RULE_field_declaration = 260
    RULE_property_declaration = 261
    RULE_constant_declaration = 262
    RULE_indexer_declaration = 263
    RULE_destructor_definition = 264
    RULE_constructor_declaration = 265
    RULE_method_declaration = 266
    RULE_method_header = 267
    RULE_ref_kind = 268
    RULE_ref_method_modifiers = 269
    RULE_ref_return_type = 270
    RULE_method_modifiers = 271
    RULE_method_modifier = 272
    RULE_ref_method_body = 273
    RULE_ref_method_modifier = 274
    RULE_method_member_name = 275
    RULE_operator_declaration = 276
    RULE_arg_declaration = 277
    RULE_method_invocation = 278
    RULE_object_creation_expression = 279
    RULE_target_typed_new = 280
    RULE_identifier = 281

    ruleNames =  [ "compilation_unit", "compilation_unit_element", "top_level_statements", 
                   "global_using_directives", "global_using_directive", 
                   "namespace_or_type_name", "type_", "function_pointer_type", 
                   "function_pointer_parameter_list", "base_type", "tuple_type", 
                   "deconstruction_expression", "deconstruction_tuple", 
                   "deconstruction_element", "tuple_element", "simple_type", 
                   "numeric_type", "integral_type", "floating_point_type", 
                   "default_value_expression", "explictly_typed_default", 
                   "default_literal", "variable_reference", "class_type", 
                   "type_argument_list", "argument_list", "argument", "argument_name", 
                   "expression", "non_assignment_expression", "assignment", 
                   "assignment_operator", "conditional_expression", "null_coalescing_expression", 
                   "conditional_or_expression", "conditional_and_expression", 
                   "inclusive_or_expression", "exclusive_or_expression", 
                   "and_expression", "equality_expression", "relational_expression", 
                   "shift_expression", "additive_expression", "multiplicative_expression", 
                   "switch_expression", "switch_expression_arms", "switch_expression_arm", 
                   "range_expression", "unary_expression", "cast_expression", 
                   "primary_expression", "primary_expression_start", "throwable_expression", 
                   "throw_expression", "member_access", "bracket_expression", 
                   "indexer_argument", "predefined_type", "expression_list", 
                   "object_or_collection_initializer", "object_initializer", 
                   "member_initializer_list", "member_initializer", "initializer_value", 
                   "collection_initializer", "element_initializer", "anonymous_object_initializer", 
                   "member_declarator_list", "member_declarator", "unbound_type_name", 
                   "generic_dimension_specifier", "isType", "isTypePatternArms", 
                   "isTypePatternArm", "lambda_expression", "anonymous_function_signature", 
                   "explicit_anonymous_function_parameter_list", "explicit_anonymous_function_parameter", 
                   "implicit_anonymous_function_parameter_list", "anonymous_function_body", 
                   "query_expression", "from_clause", "query_body", "query_body_clause", 
                   "let_clause", "where_clause", "combined_join_clause", 
                   "orderby_clause", "ordering", "select_or_group_clause", 
                   "query_continuation", "statement", "declarationStatement", 
                   "local_function_declaration", "local_function_header", 
                   "local_function_modifiers", "local_function_body", "labeled_Statement", 
                   "embedded_statement", "empty_statement", "if_statement", 
                   "checked_statement", "unchecked_statement", "lock_statement", 
                   "unmanaged_type", "stackalloc_expression", "stackalloc_initializer", 
                   "stackalloc_initializer_element_list", "stackalloc_element_initializer", 
                   "using_statement", "yield_statement", "fixed_statement", 
                   "unsafe_statement", "try_statement", "block", "local_variable_declaration", 
                   "unsafe_function_pointer", "delegate_function_pointer", 
                   "local_variable_type", "local_variable_declarator", "local_variable_initializer", 
                   "local_constant_declaration", "switch_section", "switch_label", 
                   "case_guard", "statement_list", "for_initializer", "for_iterator", 
                   "catch_clauses", "specific_catch_clause", "general_catch_clause", 
                   "exception_filter", "finally_clause", "resource_acquisition", 
                   "namespace_declaration", "qualified_identifier", "namespace_body", 
                   "extern_alias_directives", "extern_alias_directive", 
                   "using_directives", "using_directive", "namespace_member_declarations", 
                   "namespace_member_declaration", "type_declaration", "record_definition", 
                   "record_base", "record_body", "record_parameters", "record_parameter", 
                   "qualified_alias_member", "type_parameter_list", "type_parameter", 
                   "class_base", "interface_type_list", "type_parameter_constraints_clauses", 
                   "type_parameter_constraints_clause", "type_parameter_constraints", 
                   "primary_constraint", "pattern", "is_pattern", "property_pattern", 
                   "property_pattern_clause", "relational_pattern", "and_pattern", 
                   "or_pattern", "not_pattern", "declaration_pattern", "simple_designation", 
                   "single_variable_designation", "constant_pattern", "var_pattern", 
                   "designation", "module_initializer_declaration", "secondary_constraints", 
                   "constructor_constraint", "class_body", "class_member_declarations", 
                   "class_member_declaration", "all_member_modifiers", "all_member_modifier", 
                   "common_member_declaration", "typed_member_declaration", 
                   "constant_declarators", "constant_declarator", "variable_declarators", 
                   "variable_declarator", "variable_initializer", "return_type", 
                   "member_name", "method_body", "formal_parameter_list", 
                   "fixed_parameters", "fixed_parameter", "parameter_modifier", 
                   "parameter_array", "accessor_declarations", "init_accessor_declaration", 
                   "get_accessor_declaration", "set_accessor_declaration", 
                   "accessor_modifier", "accessor_body", "event_accessor_declarations", 
                   "add_accessor_declaration", "remove_accessor_declaration", 
                   "overloadable_operator", "conversion_operator_declarator", 
                   "constructor_initializer", "body", "struct_interfaces", 
                   "struct_body", "struct_member_declaration", "array_type", 
                   "rank_specifier", "array_initializer", "variant_type_parameter_list", 
                   "variant_type_parameter", "variance_annotation", "interface_base", 
                   "interface_body", "interface_member_declaration", "interface_accessors", 
                   "enum_base", "enum_body", "enum_member_declaration", 
                   "global_attribute_section", "global_attribute_target", 
                   "attributes", "attribute_section", "attribute_target", 
                   "attribute_list", "attribute", "attribute_argument", 
                   "pointer_type", "fixed_pointer_declarators", "fixed_pointer_declarator", 
                   "fixed_pointer_initializer", "fixed_size_buffer_declarator", 
                   "right_arrow", "right_shift", "right_shift_assignment", 
                   "literal", "boolean_literal", "string_literal", "interpolated_regular_string", 
                   "interpolated_verbatium_string", "interpolated_regular_string_part", 
                   "interpolated_verbatium_string_part", "interpolated_string_expression", 
                   "interpolation_minimum_width", "format_string", "constant_expression", 
                   "keyword", "class_definition", "class_modifier", "struct_definition", 
                   "struct_modifier", "interface_definition", "enum_definition", 
                   "delegate_definition", "event_declaration", "field_declaration", 
                   "property_declaration", "constant_declaration", "indexer_declaration", 
                   "destructor_definition", "constructor_declaration", "method_declaration", 
                   "method_header", "ref_kind", "ref_method_modifiers", 
                   "ref_return_type", "method_modifiers", "method_modifier", 
                   "ref_method_body", "ref_method_modifier", "method_member_name", 
                   "operator_declaration", "arg_declaration", "method_invocation", 
                   "object_creation_expression", "target_typed_new", "identifier" ]

    EOF = Token.EOF
    BYTE_ORDER_MARK=1
    SINGLE_LINE_DOC_COMMENT=2
    EMPTY_DELIMITED_DOC_COMMENT=3
    DELIMITED_DOC_COMMENT=4
    SINGLE_LINE_COMMENT=5
    DELIMITED_COMMENT=6
    WHITESPACES=7
    SHARP=8
    ABSTRACT=9
    ADD=10
    AND=11
    ALIAS=12
    ARGLIST=13
    AS=14
    ASCENDING=15
    ASYNC=16
    AWAIT=17
    BASE=18
    BOOL=19
    BREAK=20
    BY=21
    BYTE=22
    CASE=23
    CATCH=24
    CHAR=25
    CHECKED=26
    CLASS=27
    CONST=28
    CONTINUE=29
    DECIMAL=30
    DEFAULT=31
    DELEGATE=32
    DESCENDING=33
    DO=34
    DOUBLE=35
    DYNAMIC=36
    ELSE=37
    ENUM=38
    EQUALS=39
    EVENT=40
    EXPLICIT=41
    EXTERN=42
    FALSE=43
    FINALLY=44
    FIXED=45
    FLOAT=46
    FOR=47
    FOREACH=48
    FROM=49
    GET=50
    GOTO=51
    GLOBAL=52
    GROUP=53
    IF=54
    IMPLICIT=55
    IN=56
    INT=57
    INTERFACE=58
    INTERNAL=59
    INIT=60
    INTO=61
    IS=62
    JOIN=63
    LET=64
    LOCK=65
    LONG=66
    NAMEOF=67
    NAMESPACE=68
    NEW=69
    NOT=70
    NULL_=71
    OBJECT=72
    ON=73
    OR=74
    OPERATOR=75
    ORDERBY=76
    OUT=77
    OVERRIDE=78
    PARAMS=79
    PARTIAL=80
    PRIVATE=81
    PROTECTED=82
    PUBLIC=83
    READONLY=84
    REF=85
    REMOVE=86
    RETURN=87
    SBYTE=88
    SEALED=89
    SELECT=90
    SET=91
    SHORT=92
    SIZEOF=93
    STACKALLOC=94
    STATIC=95
    STRING=96
    STRUCT=97
    SWITCH=98
    THIS=99
    THROW=100
    TRUE=101
    TRY=102
    TYPEOF=103
    UINT=104
    ULONG=105
    UNCHECKED=106
    UNMANAGED=107
    UNSAFE=108
    USHORT=109
    USING=110
    VAR=111
    VIRTUAL=112
    VOID=113
    VOLATILE=114
    WHEN=115
    WHERE=116
    WHILE=117
    YIELD=118
    RECORD=119
    IDENTIFIER=120
    LITERAL_ACCESS=121
    INTEGER_LITERAL=122
    HEX_INTEGER_LITERAL=123
    BIN_INTEGER_LITERAL=124
    REAL_LITERAL=125
    CHARACTER_LITERAL=126
    REGULAR_STRING=127
    VERBATIUM_STRING=128
    INTERPOLATED_REGULAR_STRING_START=129
    INTERPOLATED_VERBATIUM_STRING_START=130
    OPEN_BRACE=131
    CLOSE_BRACE=132
    OPEN_BRACKET=133
    CLOSE_BRACKET=134
    OPEN_PARENS=135
    CLOSE_PARENS=136
    DOT=137
    COMMA=138
    COLON=139
    SEMICOLON=140
    PLUS=141
    MINUS=142
    STAR=143
    DIV=144
    PERCENT=145
    AMP=146
    BITWISE_OR=147
    CARET=148
    BANG=149
    TILDE=150
    ASSIGNMENT=151
    LT=152
    GT=153
    INTERR=154
    DOUBLE_COLON=155
    OP_COALESCING=156
    OP_INC=157
    OP_DEC=158
    OP_AND=159
    OP_OR=160
    OP_PTR=161
    OP_EQ=162
    OP_NE=163
    OP_LE=164
    OP_GE=165
    OP_ADD_ASSIGNMENT=166
    OP_SUB_ASSIGNMENT=167
    OP_MULT_ASSIGNMENT=168
    OP_DIV_ASSIGNMENT=169
    OP_MOD_ASSIGNMENT=170
    OP_AND_ASSIGNMENT=171
    OP_OR_ASSIGNMENT=172
    OP_XOR_ASSIGNMENT=173
    OP_LEFT_SHIFT=174
    OP_LEFT_SHIFT_ASSIGNMENT=175
    OP_COALESCING_ASSIGNMENT=176
    OP_RANGE=177
    DOUBLE_CURLY_INSIDE=178
    OPEN_BRACE_INSIDE=179
    REGULAR_CHAR_INSIDE=180
    VERBATIUM_DOUBLE_QUOTE_INSIDE=181
    DOUBLE_QUOTE_INSIDE=182
    REGULAR_STRING_INSIDE=183
    VERBATIUM_INSIDE_STRING=184
    CLOSE_BRACE_INSIDE=185
    FORMAT_STRING=186
    DIRECTIVE_WHITESPACES=187
    DIGITS=188
    DEFINE=189
    UNDEF=190
    ELIF=191
    ENDIF=192
    LINE=193
    ERROR=194
    WARNING=195
    REGION=196
    ENDREGION=197
    PRAGMA=198
    NULLABLE=199
    DIRECTIVE_HIDDEN=200
    CONDITIONAL_SYMBOL=201
    DIRECTIVE_NEW_LINE=202
    TEXT=203
    DOUBLE_CURLY_CLOSE_INSIDE=204

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.2")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class Compilation_unitContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(CSharpParser.EOF, 0)

        def BYTE_ORDER_MARK(self):
            return self.getToken(CSharpParser.BYTE_ORDER_MARK, 0)

        def compilation_unit_element(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Compilation_unit_elementContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Compilation_unit_elementContext,i)


        def getRuleIndex(self):
            return CSharpParser.RULE_compilation_unit

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCompilation_unit" ):
                listener.enterCompilation_unit(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCompilation_unit" ):
                listener.exitCompilation_unit(self)




    def compilation_unit(self):

        localctx = CSharpParser.Compilation_unitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_compilation_unit)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 565
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==1:
                self.state = 564
                self.match(CSharpParser.BYTE_ORDER_MARK)


            self.state = 570
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & -5836682846722345472) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -44097) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & 562951571697839) != 0):
                self.state = 567
                self.compilation_unit_element()
                self.state = 572
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 573
            self.match(CSharpParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Compilation_unit_elementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def extern_alias_directives(self):
            return self.getTypedRuleContext(CSharpParser.Extern_alias_directivesContext,0)


        def using_directives(self):
            return self.getTypedRuleContext(CSharpParser.Using_directivesContext,0)


        def global_attribute_section(self):
            return self.getTypedRuleContext(CSharpParser.Global_attribute_sectionContext,0)


        def top_level_statements(self):
            return self.getTypedRuleContext(CSharpParser.Top_level_statementsContext,0)


        def namespace_member_declarations(self):
            return self.getTypedRuleContext(CSharpParser.Namespace_member_declarationsContext,0)


        def global_using_directives(self):
            return self.getTypedRuleContext(CSharpParser.Global_using_directivesContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_compilation_unit_element

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCompilation_unit_element" ):
                listener.enterCompilation_unit_element(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCompilation_unit_element" ):
                listener.exitCompilation_unit_element(self)




    def compilation_unit_element(self):

        localctx = CSharpParser.Compilation_unit_elementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_compilation_unit_element)
        try:
            self.state = 581
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,2,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 575
                self.extern_alias_directives()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 576
                self.using_directives()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 577
                self.global_attribute_section()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 578
                self.top_level_statements()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 579
                self.namespace_member_declarations()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 580
                self.global_using_directives()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Top_level_statementsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.StatementContext)
            else:
                return self.getTypedRuleContext(CSharpParser.StatementContext,i)


        def type_declaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Type_declarationContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Type_declarationContext,i)


        def getRuleIndex(self):
            return CSharpParser.RULE_top_level_statements

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTop_level_statements" ):
                listener.enterTop_level_statements(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTop_level_statements" ):
                listener.exitTop_level_statements(self)




    def top_level_statements(self):

        localctx = CSharpParser.Top_level_statementsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_top_level_statements)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 585 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 585
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,3,self._ctx)
                    if la_ == 1:
                        self.state = 583
                        self.statement()
                        pass

                    elif la_ == 2:
                        self.state = 584
                        self.type_declaration()
                        pass



                else:
                    raise NoViableAltException(self)
                self.state = 587 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,4,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Global_using_directivesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def global_using_directive(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Global_using_directiveContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Global_using_directiveContext,i)


        def getRuleIndex(self):
            return CSharpParser.RULE_global_using_directives

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGlobal_using_directives" ):
                listener.enterGlobal_using_directives(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGlobal_using_directives" ):
                listener.exitGlobal_using_directives(self)




    def global_using_directives(self):

        localctx = CSharpParser.Global_using_directivesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_global_using_directives)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 590 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 589
                    self.global_using_directive()

                else:
                    raise NoViableAltException(self)
                self.state = 592 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,5,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Global_using_directiveContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GLOBAL(self):
            return self.getToken(CSharpParser.GLOBAL, 0)

        def USING(self):
            return self.getToken(CSharpParser.USING, 0)

        def identifier(self):
            return self.getTypedRuleContext(CSharpParser.IdentifierContext,0)


        def ASSIGNMENT(self):
            return self.getToken(CSharpParser.ASSIGNMENT, 0)

        def namespace_or_type_name(self):
            return self.getTypedRuleContext(CSharpParser.Namespace_or_type_nameContext,0)


        def SEMICOLON(self):
            return self.getToken(CSharpParser.SEMICOLON, 0)

        def STATIC(self):
            return self.getToken(CSharpParser.STATIC, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_global_using_directive

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGlobal_using_directive" ):
                listener.enterGlobal_using_directive(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGlobal_using_directive" ):
                listener.exitGlobal_using_directive(self)




    def global_using_directive(self):

        localctx = CSharpParser.Global_using_directiveContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_global_using_directive)
        try:
            self.state = 612
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,6,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 594
                self.match(CSharpParser.GLOBAL)
                self.state = 595
                self.match(CSharpParser.USING)
                self.state = 596
                self.identifier()
                self.state = 597
                self.match(CSharpParser.ASSIGNMENT)
                self.state = 598
                self.namespace_or_type_name()
                self.state = 599
                self.match(CSharpParser.SEMICOLON)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 601
                self.match(CSharpParser.GLOBAL)
                self.state = 602
                self.match(CSharpParser.USING)
                self.state = 603
                self.namespace_or_type_name()
                self.state = 604
                self.match(CSharpParser.SEMICOLON)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 606
                self.match(CSharpParser.GLOBAL)
                self.state = 607
                self.match(CSharpParser.USING)
                self.state = 608
                self.match(CSharpParser.STATIC)
                self.state = 609
                self.namespace_or_type_name()
                self.state = 610
                self.match(CSharpParser.SEMICOLON)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Namespace_or_type_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(CSharpParser.IdentifierContext,i)


        def qualified_alias_member(self):
            return self.getTypedRuleContext(CSharpParser.Qualified_alias_memberContext,0)


        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.DOT)
            else:
                return self.getToken(CSharpParser.DOT, i)

        def type_argument_list(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Type_argument_listContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Type_argument_listContext,i)


        def getRuleIndex(self):
            return CSharpParser.RULE_namespace_or_type_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNamespace_or_type_name" ):
                listener.enterNamespace_or_type_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNamespace_or_type_name" ):
                listener.exitNamespace_or_type_name(self)




    def namespace_or_type_name(self):

        localctx = CSharpParser.Namespace_or_type_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_namespace_or_type_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 619
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,8,self._ctx)
            if la_ == 1:
                self.state = 614
                self.identifier()
                self.state = 616
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,7,self._ctx)
                if la_ == 1:
                    self.state = 615
                    self.type_argument_list()


                pass

            elif la_ == 2:
                self.state = 618
                self.qualified_alias_member()
                pass


            self.state = 628
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,10,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 621
                    self.match(CSharpParser.DOT)
                    self.state = 622
                    self.identifier()
                    self.state = 624
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,9,self._ctx)
                    if la_ == 1:
                        self.state = 623
                        self.type_argument_list()

             
                self.state = 630
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,10,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Type_Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def base_type(self):
            return self.getTypedRuleContext(CSharpParser.Base_typeContext,0)


        def INTERR(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.INTERR)
            else:
                return self.getToken(CSharpParser.INTERR, i)

        def rank_specifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Rank_specifierContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Rank_specifierContext,i)


        def STAR(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.STAR)
            else:
                return self.getToken(CSharpParser.STAR, i)

        def function_pointer_type(self):
            return self.getTypedRuleContext(CSharpParser.Function_pointer_typeContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_type_

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterType_" ):
                listener.enterType_(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitType_" ):
                listener.exitType_(self)




    def type_(self):

        localctx = CSharpParser.Type_Context(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_type_)
        try:
            self.state = 641
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [10, 12, 13, 15, 16, 17, 19, 21, 22, 25, 30, 33, 35, 36, 39, 46, 49, 50, 53, 57, 61, 63, 64, 66, 67, 72, 73, 76, 80, 86, 88, 90, 91, 92, 96, 104, 105, 107, 109, 111, 113, 115, 116, 118, 120, 135]:
                self.enterOuterAlt(localctx, 1)
                self.state = 631
                self.base_type()
                self.state = 637
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,12,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 635
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [154]:
                            self.state = 632
                            self.match(CSharpParser.INTERR)
                            pass
                        elif token in [133]:
                            self.state = 633
                            self.rank_specifier()
                            pass
                        elif token in [143]:
                            self.state = 634
                            self.match(CSharpParser.STAR)
                            pass
                        else:
                            raise NoViableAltException(self)
                 
                    self.state = 639
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,12,self._ctx)

                pass
            elif token in [32]:
                self.enterOuterAlt(localctx, 2)
                self.state = 640
                self.function_pointer_type()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Function_pointer_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DELEGATE(self):
            return self.getToken(CSharpParser.DELEGATE, 0)

        def STAR(self):
            return self.getToken(CSharpParser.STAR, 0)

        def LT(self):
            return self.getToken(CSharpParser.LT, 0)

        def function_pointer_parameter_list(self):
            return self.getTypedRuleContext(CSharpParser.Function_pointer_parameter_listContext,0)


        def GT(self):
            return self.getToken(CSharpParser.GT, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_function_pointer_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunction_pointer_type" ):
                listener.enterFunction_pointer_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunction_pointer_type" ):
                listener.exitFunction_pointer_type(self)




    def function_pointer_type(self):

        localctx = CSharpParser.Function_pointer_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_function_pointer_type)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 643
            self.match(CSharpParser.DELEGATE)
            self.state = 644
            self.match(CSharpParser.STAR)
            self.state = 645
            self.match(CSharpParser.LT)
            self.state = 646
            self.function_pointer_parameter_list()
            self.state = 647
            self.match(CSharpParser.GT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Function_pointer_parameter_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def type_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Type_Context)
            else:
                return self.getTypedRuleContext(CSharpParser.Type_Context,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.COMMA)
            else:
                return self.getToken(CSharpParser.COMMA, i)

        def getRuleIndex(self):
            return CSharpParser.RULE_function_pointer_parameter_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunction_pointer_parameter_list" ):
                listener.enterFunction_pointer_parameter_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunction_pointer_parameter_list" ):
                listener.exitFunction_pointer_parameter_list(self)




    def function_pointer_parameter_list(self):

        localctx = CSharpParser.Function_pointer_parameter_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_function_pointer_parameter_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 649
            self.type_()
            self.state = 654
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==138:
                self.state = 650
                self.match(CSharpParser.COMMA)
                self.state = 651
                self.type_()
                self.state = 656
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Base_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simple_type(self):
            return self.getTypedRuleContext(CSharpParser.Simple_typeContext,0)


        def class_type(self):
            return self.getTypedRuleContext(CSharpParser.Class_typeContext,0)


        def VOID(self):
            return self.getToken(CSharpParser.VOID, 0)

        def STAR(self):
            return self.getToken(CSharpParser.STAR, 0)

        def tuple_type(self):
            return self.getTypedRuleContext(CSharpParser.Tuple_typeContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_base_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBase_type" ):
                listener.enterBase_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBase_type" ):
                listener.exitBase_type(self)




    def base_type(self):

        localctx = CSharpParser.Base_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_base_type)
        try:
            self.state = 662
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,15,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 657
                self.simple_type()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 658
                self.class_type()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 659
                self.match(CSharpParser.VOID)
                self.state = 660
                self.match(CSharpParser.STAR)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 661
                self.tuple_type()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Tuple_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PARENS(self):
            return self.getToken(CSharpParser.OPEN_PARENS, 0)

        def tuple_element(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Tuple_elementContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Tuple_elementContext,i)


        def CLOSE_PARENS(self):
            return self.getToken(CSharpParser.CLOSE_PARENS, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.COMMA)
            else:
                return self.getToken(CSharpParser.COMMA, i)

        def deconstruction_expression(self):
            return self.getTypedRuleContext(CSharpParser.Deconstruction_expressionContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_tuple_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTuple_type" ):
                listener.enterTuple_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTuple_type" ):
                listener.exitTuple_type(self)




    def tuple_type(self):

        localctx = CSharpParser.Tuple_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_tuple_type)
        self._la = 0 # Token type
        try:
            self.state = 675
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,17,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 664
                self.match(CSharpParser.OPEN_PARENS)
                self.state = 665
                self.tuple_element()
                self.state = 668 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 666
                    self.match(CSharpParser.COMMA)
                    self.state = 667
                    self.tuple_element()
                    self.state = 670 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==138):
                        break

                self.state = 672
                self.match(CSharpParser.CLOSE_PARENS)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 674
                self.deconstruction_expression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Deconstruction_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def deconstruction_tuple(self):
            return self.getTypedRuleContext(CSharpParser.Deconstruction_tupleContext,0)


        def VAR(self):
            return self.getToken(CSharpParser.VAR, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_deconstruction_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeconstruction_expression" ):
                listener.enterDeconstruction_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeconstruction_expression" ):
                listener.exitDeconstruction_expression(self)




    def deconstruction_expression(self):

        localctx = CSharpParser.Deconstruction_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_deconstruction_expression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 678
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==111:
                self.state = 677
                self.match(CSharpParser.VAR)


            self.state = 680
            self.deconstruction_tuple()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Deconstruction_tupleContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PARENS(self):
            return self.getToken(CSharpParser.OPEN_PARENS, 0)

        def deconstruction_element(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Deconstruction_elementContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Deconstruction_elementContext,i)


        def CLOSE_PARENS(self):
            return self.getToken(CSharpParser.CLOSE_PARENS, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.COMMA)
            else:
                return self.getToken(CSharpParser.COMMA, i)

        def getRuleIndex(self):
            return CSharpParser.RULE_deconstruction_tuple

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeconstruction_tuple" ):
                listener.enterDeconstruction_tuple(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeconstruction_tuple" ):
                listener.exitDeconstruction_tuple(self)




    def deconstruction_tuple(self):

        localctx = CSharpParser.Deconstruction_tupleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_deconstruction_tuple)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 682
            self.match(CSharpParser.OPEN_PARENS)
            self.state = 683
            self.deconstruction_element()
            self.state = 686 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 684
                self.match(CSharpParser.COMMA)
                self.state = 685
                self.deconstruction_element()
                self.state = 688 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==138):
                    break

            self.state = 690
            self.match(CSharpParser.CLOSE_PARENS)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Deconstruction_elementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def deconstruction_tuple(self):
            return self.getTypedRuleContext(CSharpParser.Deconstruction_tupleContext,0)


        def identifier(self):
            return self.getTypedRuleContext(CSharpParser.IdentifierContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_deconstruction_element

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeconstruction_element" ):
                listener.enterDeconstruction_element(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeconstruction_element" ):
                listener.exitDeconstruction_element(self)




    def deconstruction_element(self):

        localctx = CSharpParser.Deconstruction_elementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_deconstruction_element)
        self._la = 0 # Token type
        try:
            self.state = 696
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [135]:
                self.enterOuterAlt(localctx, 1)
                self.state = 692
                self.deconstruction_tuple()
                pass
            elif token in [10, 12, 13, 15, 16, 17, 21, 33, 36, 39, 49, 50, 53, 56, 61, 63, 64, 67, 73, 76, 80, 86, 90, 91, 107, 111, 115, 116, 118, 120, 136, 138, 140]:
                self.enterOuterAlt(localctx, 2)
                self.state = 694
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -6906832351458511872) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 96976925775434249) != 0):
                    self.state = 693
                    self.identifier()


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Tuple_elementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def type_(self):
            return self.getTypedRuleContext(CSharpParser.Type_Context,0)


        def identifier(self):
            return self.getTypedRuleContext(CSharpParser.IdentifierContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_tuple_element

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTuple_element" ):
                listener.enterTuple_element(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTuple_element" ):
                listener.exitTuple_element(self)




    def tuple_element(self):

        localctx = CSharpParser.Tuple_elementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_tuple_element)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 698
            self.type_()
            self.state = 700
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & -6906832351458511872) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 96976925775434249) != 0):
                self.state = 699
                self.identifier()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Simple_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def numeric_type(self):
            return self.getTypedRuleContext(CSharpParser.Numeric_typeContext,0)


        def BOOL(self):
            return self.getToken(CSharpParser.BOOL, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_simple_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimple_type" ):
                listener.enterSimple_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimple_type" ):
                listener.exitSimple_type(self)




    def simple_type(self):

        localctx = CSharpParser.Simple_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_simple_type)
        try:
            self.state = 704
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [22, 25, 30, 35, 46, 57, 66, 88, 92, 104, 105, 109]:
                self.enterOuterAlt(localctx, 1)
                self.state = 702
                self.numeric_type()
                pass
            elif token in [19]:
                self.enterOuterAlt(localctx, 2)
                self.state = 703
                self.match(CSharpParser.BOOL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Numeric_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def integral_type(self):
            return self.getTypedRuleContext(CSharpParser.Integral_typeContext,0)


        def floating_point_type(self):
            return self.getTypedRuleContext(CSharpParser.Floating_point_typeContext,0)


        def DECIMAL(self):
            return self.getToken(CSharpParser.DECIMAL, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_numeric_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNumeric_type" ):
                listener.enterNumeric_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNumeric_type" ):
                listener.exitNumeric_type(self)




    def numeric_type(self):

        localctx = CSharpParser.Numeric_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_numeric_type)
        try:
            self.state = 709
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [22, 25, 57, 66, 88, 92, 104, 105, 109]:
                self.enterOuterAlt(localctx, 1)
                self.state = 706
                self.integral_type()
                pass
            elif token in [35, 46]:
                self.enterOuterAlt(localctx, 2)
                self.state = 707
                self.floating_point_type()
                pass
            elif token in [30]:
                self.enterOuterAlt(localctx, 3)
                self.state = 708
                self.match(CSharpParser.DECIMAL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Integral_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SBYTE(self):
            return self.getToken(CSharpParser.SBYTE, 0)

        def BYTE(self):
            return self.getToken(CSharpParser.BYTE, 0)

        def SHORT(self):
            return self.getToken(CSharpParser.SHORT, 0)

        def USHORT(self):
            return self.getToken(CSharpParser.USHORT, 0)

        def INT(self):
            return self.getToken(CSharpParser.INT, 0)

        def UINT(self):
            return self.getToken(CSharpParser.UINT, 0)

        def LONG(self):
            return self.getToken(CSharpParser.LONG, 0)

        def ULONG(self):
            return self.getToken(CSharpParser.ULONG, 0)

        def CHAR(self):
            return self.getToken(CSharpParser.CHAR, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_integral_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIntegral_type" ):
                listener.enterIntegral_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIntegral_type" ):
                listener.exitIntegral_type(self)




    def integral_type(self):

        localctx = CSharpParser.Integral_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_integral_type)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 711
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 144115188113604608) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & 9620798046209) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Floating_point_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FLOAT(self):
            return self.getToken(CSharpParser.FLOAT, 0)

        def DOUBLE(self):
            return self.getToken(CSharpParser.DOUBLE, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_floating_point_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFloating_point_type" ):
                listener.enterFloating_point_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFloating_point_type" ):
                listener.exitFloating_point_type(self)




    def floating_point_type(self):

        localctx = CSharpParser.Floating_point_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_floating_point_type)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 713
            _la = self._input.LA(1)
            if not(_la==35 or _la==46):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Default_value_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def explictly_typed_default(self):
            return self.getTypedRuleContext(CSharpParser.Explictly_typed_defaultContext,0)


        def default_literal(self):
            return self.getTypedRuleContext(CSharpParser.Default_literalContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_default_value_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDefault_value_expression" ):
                listener.enterDefault_value_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDefault_value_expression" ):
                listener.exitDefault_value_expression(self)




    def default_value_expression(self):

        localctx = CSharpParser.Default_value_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_default_value_expression)
        try:
            self.state = 717
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,25,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 715
                self.explictly_typed_default()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 716
                self.default_literal()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Explictly_typed_defaultContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DEFAULT(self):
            return self.getToken(CSharpParser.DEFAULT, 0)

        def OPEN_PARENS(self):
            return self.getToken(CSharpParser.OPEN_PARENS, 0)

        def type_(self):
            return self.getTypedRuleContext(CSharpParser.Type_Context,0)


        def CLOSE_PARENS(self):
            return self.getToken(CSharpParser.CLOSE_PARENS, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_explictly_typed_default

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExplictly_typed_default" ):
                listener.enterExplictly_typed_default(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExplictly_typed_default" ):
                listener.exitExplictly_typed_default(self)




    def explictly_typed_default(self):

        localctx = CSharpParser.Explictly_typed_defaultContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_explictly_typed_default)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 719
            self.match(CSharpParser.DEFAULT)
            self.state = 720
            self.match(CSharpParser.OPEN_PARENS)
            self.state = 721
            self.type_()
            self.state = 722
            self.match(CSharpParser.CLOSE_PARENS)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Default_literalContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DEFAULT(self):
            return self.getToken(CSharpParser.DEFAULT, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_default_literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDefault_literal" ):
                listener.enterDefault_literal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDefault_literal" ):
                listener.exitDefault_literal(self)




    def default_literal(self):

        localctx = CSharpParser.Default_literalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_default_literal)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 724
            self.match(CSharpParser.DEFAULT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Variable_referenceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(CSharpParser.ExpressionContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_variable_reference

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariable_reference" ):
                listener.enterVariable_reference(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariable_reference" ):
                listener.exitVariable_reference(self)




    def variable_reference(self):

        localctx = CSharpParser.Variable_referenceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_variable_reference)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 726
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Class_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def namespace_or_type_name(self):
            return self.getTypedRuleContext(CSharpParser.Namespace_or_type_nameContext,0)


        def OBJECT(self):
            return self.getToken(CSharpParser.OBJECT, 0)

        def DYNAMIC(self):
            return self.getToken(CSharpParser.DYNAMIC, 0)

        def STRING(self):
            return self.getToken(CSharpParser.STRING, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_class_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClass_type" ):
                listener.enterClass_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClass_type" ):
                listener.exitClass_type(self)




    def class_type(self):

        localctx = CSharpParser.Class_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_class_type)
        try:
            self.state = 732
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,26,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 728
                self.namespace_or_type_name()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 729
                self.match(CSharpParser.OBJECT)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 730
                self.match(CSharpParser.DYNAMIC)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 731
                self.match(CSharpParser.STRING)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Type_argument_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LT(self):
            return self.getToken(CSharpParser.LT, 0)

        def type_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Type_Context)
            else:
                return self.getTypedRuleContext(CSharpParser.Type_Context,i)


        def GT(self):
            return self.getToken(CSharpParser.GT, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.COMMA)
            else:
                return self.getToken(CSharpParser.COMMA, i)

        def getRuleIndex(self):
            return CSharpParser.RULE_type_argument_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterType_argument_list" ):
                listener.enterType_argument_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitType_argument_list" ):
                listener.exitType_argument_list(self)




    def type_argument_list(self):

        localctx = CSharpParser.Type_argument_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_type_argument_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 734
            self.match(CSharpParser.LT)
            self.state = 735
            self.type_()
            self.state = 740
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==138:
                self.state = 736
                self.match(CSharpParser.COMMA)
                self.state = 737
                self.type_()
                self.state = 742
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 743
            self.match(CSharpParser.GT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Argument_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def argument(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.ArgumentContext)
            else:
                return self.getTypedRuleContext(CSharpParser.ArgumentContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.COMMA)
            else:
                return self.getToken(CSharpParser.COMMA, i)

        def getRuleIndex(self):
            return CSharpParser.RULE_argument_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArgument_list" ):
                listener.enterArgument_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArgument_list" ):
                listener.exitArgument_list(self)




    def argument_list(self):

        localctx = CSharpParser.Argument_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_argument_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 745
            self.argument()
            self.state = 750
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==138:
                self.state = 746
                self.match(CSharpParser.COMMA)
                self.state = 747
                self.argument()
                self.state = 752
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArgumentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.refout = None # Token

        def expression(self):
            return self.getTypedRuleContext(CSharpParser.ExpressionContext,0)


        def argument_name(self):
            return self.getTypedRuleContext(CSharpParser.Argument_nameContext,0)


        def VAR(self):
            return self.getToken(CSharpParser.VAR, 0)

        def type_(self):
            return self.getTypedRuleContext(CSharpParser.Type_Context,0)


        def REF(self):
            return self.getToken(CSharpParser.REF, 0)

        def OUT(self):
            return self.getToken(CSharpParser.OUT, 0)

        def IN(self):
            return self.getToken(CSharpParser.IN, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_argument

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArgument" ):
                listener.enterArgument(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArgument" ):
                listener.exitArgument(self)




    def argument(self):

        localctx = CSharpParser.ArgumentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_argument)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 754
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,29,self._ctx)
            if la_ == 1:
                self.state = 753
                self.argument_name()


            self.state = 757
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,30,self._ctx)
            if la_ == 1:
                self.state = 756
                localctx.refout = self._input.LT(1)
                _la = self._input.LA(1)
                if not(((((_la - 56)) & ~0x3f) == 0 and ((1 << (_la - 56)) & 538968065) != 0)):
                    localctx.refout = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 765
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,32,self._ctx)
            if la_ == 1:
                self.state = 759
                self.expression()
                pass

            elif la_ == 2:
                self.state = 762
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,31,self._ctx)
                if la_ == 1:
                    self.state = 760
                    self.match(CSharpParser.VAR)
                    pass

                elif la_ == 2:
                    self.state = 761
                    self.type_()
                    pass


                self.state = 764
                self.expression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Argument_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(CSharpParser.IdentifierContext,0)


        def COLON(self):
            return self.getToken(CSharpParser.COLON, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_argument_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArgument_name" ):
                listener.enterArgument_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArgument_name" ):
                listener.exitArgument_name(self)




    def argument_name(self):

        localctx = CSharpParser.Argument_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_argument_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 767
            self.identifier()
            self.state = 768
            self.match(CSharpParser.COLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assignment(self):
            return self.getTypedRuleContext(CSharpParser.AssignmentContext,0)


        def non_assignment_expression(self):
            return self.getTypedRuleContext(CSharpParser.Non_assignment_expressionContext,0)


        def REF(self):
            return self.getToken(CSharpParser.REF, 0)

        def lambda_expression(self):
            return self.getTypedRuleContext(CSharpParser.Lambda_expressionContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpression" ):
                listener.enterExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpression" ):
                listener.exitExpression(self)




    def expression(self):

        localctx = CSharpParser.ExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_expression)
        try:
            self.state = 775
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,33,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 770
                self.assignment()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 771
                self.non_assignment_expression()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 772
                self.match(CSharpParser.REF)
                self.state = 773
                self.non_assignment_expression()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 774
                self.lambda_expression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Non_assignment_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def lambda_expression(self):
            return self.getTypedRuleContext(CSharpParser.Lambda_expressionContext,0)


        def query_expression(self):
            return self.getTypedRuleContext(CSharpParser.Query_expressionContext,0)


        def conditional_expression(self):
            return self.getTypedRuleContext(CSharpParser.Conditional_expressionContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_non_assignment_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNon_assignment_expression" ):
                listener.enterNon_assignment_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNon_assignment_expression" ):
                listener.exitNon_assignment_expression(self)




    def non_assignment_expression(self):

        localctx = CSharpParser.Non_assignment_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_non_assignment_expression)
        try:
            self.state = 780
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,34,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 777
                self.lambda_expression()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 778
                self.query_expression()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 779
                self.conditional_expression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssignmentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def unary_expression(self):
            return self.getTypedRuleContext(CSharpParser.Unary_expressionContext,0)


        def assignment_operator(self):
            return self.getTypedRuleContext(CSharpParser.Assignment_operatorContext,0)


        def expression(self):
            return self.getTypedRuleContext(CSharpParser.ExpressionContext,0)


        def OP_COALESCING_ASSIGNMENT(self):
            return self.getToken(CSharpParser.OP_COALESCING_ASSIGNMENT, 0)

        def throwable_expression(self):
            return self.getTypedRuleContext(CSharpParser.Throwable_expressionContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_assignment

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssignment" ):
                listener.enterAssignment(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssignment" ):
                listener.exitAssignment(self)




    def assignment(self):

        localctx = CSharpParser.AssignmentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_assignment)
        try:
            self.state = 790
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,35,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 782
                self.unary_expression()
                self.state = 783
                self.assignment_operator()
                self.state = 784
                self.expression()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 786
                self.unary_expression()
                self.state = 787
                self.match(CSharpParser.OP_COALESCING_ASSIGNMENT)
                self.state = 788
                self.throwable_expression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Assignment_operatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ASSIGNMENT(self):
            return self.getToken(CSharpParser.ASSIGNMENT, 0)

        def OP_ADD_ASSIGNMENT(self):
            return self.getToken(CSharpParser.OP_ADD_ASSIGNMENT, 0)

        def OP_SUB_ASSIGNMENT(self):
            return self.getToken(CSharpParser.OP_SUB_ASSIGNMENT, 0)

        def OP_MULT_ASSIGNMENT(self):
            return self.getToken(CSharpParser.OP_MULT_ASSIGNMENT, 0)

        def OP_DIV_ASSIGNMENT(self):
            return self.getToken(CSharpParser.OP_DIV_ASSIGNMENT, 0)

        def OP_MOD_ASSIGNMENT(self):
            return self.getToken(CSharpParser.OP_MOD_ASSIGNMENT, 0)

        def OP_AND_ASSIGNMENT(self):
            return self.getToken(CSharpParser.OP_AND_ASSIGNMENT, 0)

        def OP_OR_ASSIGNMENT(self):
            return self.getToken(CSharpParser.OP_OR_ASSIGNMENT, 0)

        def OP_XOR_ASSIGNMENT(self):
            return self.getToken(CSharpParser.OP_XOR_ASSIGNMENT, 0)

        def OP_LEFT_SHIFT_ASSIGNMENT(self):
            return self.getToken(CSharpParser.OP_LEFT_SHIFT_ASSIGNMENT, 0)

        def right_shift_assignment(self):
            return self.getTypedRuleContext(CSharpParser.Right_shift_assignmentContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_assignment_operator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssignment_operator" ):
                listener.enterAssignment_operator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssignment_operator" ):
                listener.exitAssignment_operator(self)




    def assignment_operator(self):

        localctx = CSharpParser.Assignment_operatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_assignment_operator)
        try:
            self.state = 803
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [151]:
                self.enterOuterAlt(localctx, 1)
                self.state = 792
                self.match(CSharpParser.ASSIGNMENT)
                pass
            elif token in [166]:
                self.enterOuterAlt(localctx, 2)
                self.state = 793
                self.match(CSharpParser.OP_ADD_ASSIGNMENT)
                pass
            elif token in [167]:
                self.enterOuterAlt(localctx, 3)
                self.state = 794
                self.match(CSharpParser.OP_SUB_ASSIGNMENT)
                pass
            elif token in [168]:
                self.enterOuterAlt(localctx, 4)
                self.state = 795
                self.match(CSharpParser.OP_MULT_ASSIGNMENT)
                pass
            elif token in [169]:
                self.enterOuterAlt(localctx, 5)
                self.state = 796
                self.match(CSharpParser.OP_DIV_ASSIGNMENT)
                pass
            elif token in [170]:
                self.enterOuterAlt(localctx, 6)
                self.state = 797
                self.match(CSharpParser.OP_MOD_ASSIGNMENT)
                pass
            elif token in [171]:
                self.enterOuterAlt(localctx, 7)
                self.state = 798
                self.match(CSharpParser.OP_AND_ASSIGNMENT)
                pass
            elif token in [172]:
                self.enterOuterAlt(localctx, 8)
                self.state = 799
                self.match(CSharpParser.OP_OR_ASSIGNMENT)
                pass
            elif token in [173]:
                self.enterOuterAlt(localctx, 9)
                self.state = 800
                self.match(CSharpParser.OP_XOR_ASSIGNMENT)
                pass
            elif token in [175]:
                self.enterOuterAlt(localctx, 10)
                self.state = 801
                self.match(CSharpParser.OP_LEFT_SHIFT_ASSIGNMENT)
                pass
            elif token in [153]:
                self.enterOuterAlt(localctx, 11)
                self.state = 802
                self.right_shift_assignment()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Conditional_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def null_coalescing_expression(self):
            return self.getTypedRuleContext(CSharpParser.Null_coalescing_expressionContext,0)


        def INTERR(self):
            return self.getToken(CSharpParser.INTERR, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(CSharpParser.ExpressionContext,i)


        def COLON(self):
            return self.getToken(CSharpParser.COLON, 0)

        def REF(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.REF)
            else:
                return self.getToken(CSharpParser.REF, i)

        def variable_reference(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Variable_referenceContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Variable_referenceContext,i)


        def getRuleIndex(self):
            return CSharpParser.RULE_conditional_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConditional_expression" ):
                listener.enterConditional_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConditional_expression" ):
                listener.exitConditional_expression(self)




    def conditional_expression(self):

        localctx = CSharpParser.Conditional_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_conditional_expression)
        try:
            self.state = 820
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,37,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 805
                self.null_coalescing_expression()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 806
                self.null_coalescing_expression()
                self.state = 807
                self.match(CSharpParser.INTERR)
                self.state = 808
                self.expression()
                self.state = 809
                self.match(CSharpParser.COLON)
                self.state = 810
                self.expression()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 812
                self.null_coalescing_expression()
                self.state = 813
                self.match(CSharpParser.INTERR)
                self.state = 814
                self.match(CSharpParser.REF)
                self.state = 815
                self.variable_reference()
                self.state = 816
                self.match(CSharpParser.COLON)
                self.state = 817
                self.match(CSharpParser.REF)
                self.state = 818
                self.variable_reference()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Null_coalescing_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def conditional_or_expression(self):
            return self.getTypedRuleContext(CSharpParser.Conditional_or_expressionContext,0)


        def OP_COALESCING(self):
            return self.getToken(CSharpParser.OP_COALESCING, 0)

        def null_coalescing_expression(self):
            return self.getTypedRuleContext(CSharpParser.Null_coalescing_expressionContext,0)


        def throw_expression(self):
            return self.getTypedRuleContext(CSharpParser.Throw_expressionContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_null_coalescing_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNull_coalescing_expression" ):
                listener.enterNull_coalescing_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNull_coalescing_expression" ):
                listener.exitNull_coalescing_expression(self)




    def null_coalescing_expression(self):

        localctx = CSharpParser.Null_coalescing_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_null_coalescing_expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 822
            self.conditional_or_expression()
            self.state = 828
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,39,self._ctx)
            if la_ == 1:
                self.state = 823
                self.match(CSharpParser.OP_COALESCING)
                self.state = 826
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [10, 12, 13, 15, 16, 17, 18, 19, 21, 22, 25, 26, 30, 31, 32, 33, 35, 36, 39, 43, 46, 49, 50, 53, 57, 61, 63, 64, 66, 67, 69, 71, 72, 73, 76, 80, 86, 88, 90, 91, 92, 93, 94, 96, 99, 101, 103, 104, 105, 106, 107, 109, 111, 115, 116, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 135, 141, 142, 143, 146, 148, 149, 150, 157, 158, 177]:
                    self.state = 824
                    self.null_coalescing_expression()
                    pass
                elif token in [100]:
                    self.state = 825
                    self.throw_expression()
                    pass
                else:
                    raise NoViableAltException(self)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Conditional_or_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def conditional_and_expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Conditional_and_expressionContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Conditional_and_expressionContext,i)


        def OP_OR(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.OP_OR)
            else:
                return self.getToken(CSharpParser.OP_OR, i)

        def getRuleIndex(self):
            return CSharpParser.RULE_conditional_or_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConditional_or_expression" ):
                listener.enterConditional_or_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConditional_or_expression" ):
                listener.exitConditional_or_expression(self)




    def conditional_or_expression(self):

        localctx = CSharpParser.Conditional_or_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_conditional_or_expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 830
            self.conditional_and_expression()
            self.state = 835
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,40,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 831
                    self.match(CSharpParser.OP_OR)
                    self.state = 832
                    self.conditional_and_expression() 
                self.state = 837
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,40,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Conditional_and_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def inclusive_or_expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Inclusive_or_expressionContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Inclusive_or_expressionContext,i)


        def OP_AND(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.OP_AND)
            else:
                return self.getToken(CSharpParser.OP_AND, i)

        def getRuleIndex(self):
            return CSharpParser.RULE_conditional_and_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConditional_and_expression" ):
                listener.enterConditional_and_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConditional_and_expression" ):
                listener.exitConditional_and_expression(self)




    def conditional_and_expression(self):

        localctx = CSharpParser.Conditional_and_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_conditional_and_expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 838
            self.inclusive_or_expression()
            self.state = 843
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,41,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 839
                    self.match(CSharpParser.OP_AND)
                    self.state = 840
                    self.inclusive_or_expression() 
                self.state = 845
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,41,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Inclusive_or_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def exclusive_or_expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Exclusive_or_expressionContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Exclusive_or_expressionContext,i)


        def BITWISE_OR(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.BITWISE_OR)
            else:
                return self.getToken(CSharpParser.BITWISE_OR, i)

        def getRuleIndex(self):
            return CSharpParser.RULE_inclusive_or_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInclusive_or_expression" ):
                listener.enterInclusive_or_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInclusive_or_expression" ):
                listener.exitInclusive_or_expression(self)




    def inclusive_or_expression(self):

        localctx = CSharpParser.Inclusive_or_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_inclusive_or_expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 846
            self.exclusive_or_expression()
            self.state = 851
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,42,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 847
                    self.match(CSharpParser.BITWISE_OR)
                    self.state = 848
                    self.exclusive_or_expression() 
                self.state = 853
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,42,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Exclusive_or_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def and_expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.And_expressionContext)
            else:
                return self.getTypedRuleContext(CSharpParser.And_expressionContext,i)


        def CARET(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.CARET)
            else:
                return self.getToken(CSharpParser.CARET, i)

        def getRuleIndex(self):
            return CSharpParser.RULE_exclusive_or_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExclusive_or_expression" ):
                listener.enterExclusive_or_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExclusive_or_expression" ):
                listener.exitExclusive_or_expression(self)




    def exclusive_or_expression(self):

        localctx = CSharpParser.Exclusive_or_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_exclusive_or_expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 854
            self.and_expression()
            self.state = 859
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,43,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 855
                    self.match(CSharpParser.CARET)
                    self.state = 856
                    self.and_expression() 
                self.state = 861
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,43,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class And_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def equality_expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Equality_expressionContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Equality_expressionContext,i)


        def AMP(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.AMP)
            else:
                return self.getToken(CSharpParser.AMP, i)

        def getRuleIndex(self):
            return CSharpParser.RULE_and_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnd_expression" ):
                listener.enterAnd_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnd_expression" ):
                listener.exitAnd_expression(self)




    def and_expression(self):

        localctx = CSharpParser.And_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_and_expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 862
            self.equality_expression()
            self.state = 867
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,44,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 863
                    self.match(CSharpParser.AMP)
                    self.state = 864
                    self.equality_expression() 
                self.state = 869
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,44,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Equality_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def relational_expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Relational_expressionContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Relational_expressionContext,i)


        def OP_EQ(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.OP_EQ)
            else:
                return self.getToken(CSharpParser.OP_EQ, i)

        def OP_NE(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.OP_NE)
            else:
                return self.getToken(CSharpParser.OP_NE, i)

        def getRuleIndex(self):
            return CSharpParser.RULE_equality_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEquality_expression" ):
                listener.enterEquality_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEquality_expression" ):
                listener.exitEquality_expression(self)




    def equality_expression(self):

        localctx = CSharpParser.Equality_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_equality_expression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 870
            self.relational_expression()
            self.state = 875
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,45,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 871
                    _la = self._input.LA(1)
                    if not(_la==162 or _la==163):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 872
                    self.relational_expression() 
                self.state = 877
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,45,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Relational_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def shift_expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Shift_expressionContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Shift_expressionContext,i)


        def IS(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.IS)
            else:
                return self.getToken(CSharpParser.IS, i)

        def isType(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.IsTypeContext)
            else:
                return self.getTypedRuleContext(CSharpParser.IsTypeContext,i)


        def AS(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.AS)
            else:
                return self.getToken(CSharpParser.AS, i)

        def pattern(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.PatternContext)
            else:
                return self.getTypedRuleContext(CSharpParser.PatternContext,i)


        def LT(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.LT)
            else:
                return self.getToken(CSharpParser.LT, i)

        def GT(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.GT)
            else:
                return self.getToken(CSharpParser.GT, i)

        def OP_LE(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.OP_LE)
            else:
                return self.getToken(CSharpParser.OP_LE, i)

        def OP_GE(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.OP_GE)
            else:
                return self.getToken(CSharpParser.OP_GE, i)

        def getRuleIndex(self):
            return CSharpParser.RULE_relational_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRelational_expression" ):
                listener.enterRelational_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRelational_expression" ):
                listener.exitRelational_expression(self)




    def relational_expression(self):

        localctx = CSharpParser.Relational_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_relational_expression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 878
            self.shift_expression()
            self.state = 889
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,47,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 887
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,46,self._ctx)
                    if la_ == 1:
                        self.state = 879
                        _la = self._input.LA(1)
                        if not(((((_la - 152)) & ~0x3f) == 0 and ((1 << (_la - 152)) & 12291) != 0)):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 880
                        self.shift_expression()
                        pass

                    elif la_ == 2:
                        self.state = 881
                        self.match(CSharpParser.IS)
                        self.state = 882
                        self.isType()
                        pass

                    elif la_ == 3:
                        self.state = 883
                        self.match(CSharpParser.AS)
                        self.state = 884
                        self.isType()
                        pass

                    elif la_ == 4:
                        self.state = 885
                        self.match(CSharpParser.IS)
                        self.state = 886
                        self.pattern()
                        pass

             
                self.state = 891
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,47,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Shift_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def additive_expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Additive_expressionContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Additive_expressionContext,i)


        def OP_LEFT_SHIFT(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.OP_LEFT_SHIFT)
            else:
                return self.getToken(CSharpParser.OP_LEFT_SHIFT, i)

        def right_shift(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Right_shiftContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Right_shiftContext,i)


        def getRuleIndex(self):
            return CSharpParser.RULE_shift_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShift_expression" ):
                listener.enterShift_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShift_expression" ):
                listener.exitShift_expression(self)




    def shift_expression(self):

        localctx = CSharpParser.Shift_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_shift_expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 892
            self.additive_expression()
            self.state = 900
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,49,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 895
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [174]:
                        self.state = 893
                        self.match(CSharpParser.OP_LEFT_SHIFT)
                        pass
                    elif token in [153]:
                        self.state = 894
                        self.right_shift()
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 897
                    self.additive_expression() 
                self.state = 902
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,49,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Additive_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def multiplicative_expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Multiplicative_expressionContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Multiplicative_expressionContext,i)


        def PLUS(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.PLUS)
            else:
                return self.getToken(CSharpParser.PLUS, i)

        def MINUS(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.MINUS)
            else:
                return self.getToken(CSharpParser.MINUS, i)

        def getRuleIndex(self):
            return CSharpParser.RULE_additive_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAdditive_expression" ):
                listener.enterAdditive_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAdditive_expression" ):
                listener.exitAdditive_expression(self)




    def additive_expression(self):

        localctx = CSharpParser.Additive_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_additive_expression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 903
            self.multiplicative_expression()
            self.state = 908
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==141 or _la==142:
                self.state = 904
                _la = self._input.LA(1)
                if not(_la==141 or _la==142):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 905
                self.multiplicative_expression()
                self.state = 910
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Multiplicative_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def switch_expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Switch_expressionContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Switch_expressionContext,i)


        def STAR(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.STAR)
            else:
                return self.getToken(CSharpParser.STAR, i)

        def DIV(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.DIV)
            else:
                return self.getToken(CSharpParser.DIV, i)

        def PERCENT(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.PERCENT)
            else:
                return self.getToken(CSharpParser.PERCENT, i)

        def getRuleIndex(self):
            return CSharpParser.RULE_multiplicative_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMultiplicative_expression" ):
                listener.enterMultiplicative_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMultiplicative_expression" ):
                listener.exitMultiplicative_expression(self)




    def multiplicative_expression(self):

        localctx = CSharpParser.Multiplicative_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_multiplicative_expression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 911
            self.switch_expression()
            self.state = 916
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 143)) & ~0x3f) == 0 and ((1 << (_la - 143)) & 7) != 0):
                self.state = 912
                _la = self._input.LA(1)
                if not(((((_la - 143)) & ~0x3f) == 0 and ((1 << (_la - 143)) & 7) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 913
                self.switch_expression()
                self.state = 918
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Switch_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def range_expression(self):
            return self.getTypedRuleContext(CSharpParser.Range_expressionContext,0)


        def SWITCH(self):
            return self.getToken(CSharpParser.SWITCH, 0)

        def OPEN_BRACE(self):
            return self.getToken(CSharpParser.OPEN_BRACE, 0)

        def CLOSE_BRACE(self):
            return self.getToken(CSharpParser.CLOSE_BRACE, 0)

        def switch_expression_arms(self):
            return self.getTypedRuleContext(CSharpParser.Switch_expression_armsContext,0)


        def COMMA(self):
            return self.getToken(CSharpParser.COMMA, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_switch_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSwitch_expression" ):
                listener.enterSwitch_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSwitch_expression" ):
                listener.exitSwitch_expression(self)




    def switch_expression(self):

        localctx = CSharpParser.Switch_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_switch_expression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 919
            self.range_expression()
            self.state = 929
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==98:
                self.state = 920
                self.match(CSharpParser.SWITCH)
                self.state = 921
                self.match(CSharpParser.OPEN_BRACE)
                self.state = 926
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -6762637956563880960) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -46531701498637331) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & 563157788844207) != 0):
                    self.state = 922
                    self.switch_expression_arms()
                    self.state = 924
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==138:
                        self.state = 923
                        self.match(CSharpParser.COMMA)




                self.state = 928
                self.match(CSharpParser.CLOSE_BRACE)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Switch_expression_armsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def switch_expression_arm(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Switch_expression_armContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Switch_expression_armContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.COMMA)
            else:
                return self.getToken(CSharpParser.COMMA, i)

        def getRuleIndex(self):
            return CSharpParser.RULE_switch_expression_arms

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSwitch_expression_arms" ):
                listener.enterSwitch_expression_arms(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSwitch_expression_arms" ):
                listener.exitSwitch_expression_arms(self)




    def switch_expression_arms(self):

        localctx = CSharpParser.Switch_expression_armsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_switch_expression_arms)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 931
            self.switch_expression_arm()
            self.state = 936
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,55,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 932
                    self.match(CSharpParser.COMMA)
                    self.state = 933
                    self.switch_expression_arm() 
                self.state = 938
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,55,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Switch_expression_armContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pattern(self):
            return self.getTypedRuleContext(CSharpParser.PatternContext,0)


        def right_arrow(self):
            return self.getTypedRuleContext(CSharpParser.Right_arrowContext,0)


        def throwable_expression(self):
            return self.getTypedRuleContext(CSharpParser.Throwable_expressionContext,0)


        def case_guard(self):
            return self.getTypedRuleContext(CSharpParser.Case_guardContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_switch_expression_arm

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSwitch_expression_arm" ):
                listener.enterSwitch_expression_arm(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSwitch_expression_arm" ):
                listener.exitSwitch_expression_arm(self)




    def switch_expression_arm(self):

        localctx = CSharpParser.Switch_expression_armContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_switch_expression_arm)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 939
            self.pattern()
            self.state = 941
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==115:
                self.state = 940
                self.case_guard()


            self.state = 943
            self.right_arrow()
            self.state = 944
            self.throwable_expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Range_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def unary_expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Unary_expressionContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Unary_expressionContext,i)


        def OP_RANGE(self):
            return self.getToken(CSharpParser.OP_RANGE, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_range_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRange_expression" ):
                listener.enterRange_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRange_expression" ):
                listener.exitRange_expression(self)




    def range_expression(self):

        localctx = CSharpParser.Range_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_range_expression)
        self._la = 0 # Token type
        try:
            self.state = 954
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,59,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 946
                self.unary_expression()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 948
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -6762637956563880960) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -47094653601639507) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & 1618272391) != 0):
                    self.state = 947
                    self.unary_expression()


                self.state = 950
                self.match(CSharpParser.OP_RANGE)
                self.state = 952
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,58,self._ctx)
                if la_ == 1:
                    self.state = 951
                    self.unary_expression()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Unary_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def cast_expression(self):
            return self.getTypedRuleContext(CSharpParser.Cast_expressionContext,0)


        def primary_expression(self):
            return self.getTypedRuleContext(CSharpParser.Primary_expressionContext,0)


        def PLUS(self):
            return self.getToken(CSharpParser.PLUS, 0)

        def unary_expression(self):
            return self.getTypedRuleContext(CSharpParser.Unary_expressionContext,0)


        def MINUS(self):
            return self.getToken(CSharpParser.MINUS, 0)

        def BANG(self):
            return self.getToken(CSharpParser.BANG, 0)

        def TILDE(self):
            return self.getToken(CSharpParser.TILDE, 0)

        def OP_INC(self):
            return self.getToken(CSharpParser.OP_INC, 0)

        def OP_DEC(self):
            return self.getToken(CSharpParser.OP_DEC, 0)

        def AWAIT(self):
            return self.getToken(CSharpParser.AWAIT, 0)

        def AMP(self):
            return self.getToken(CSharpParser.AMP, 0)

        def STAR(self):
            return self.getToken(CSharpParser.STAR, 0)

        def CARET(self):
            return self.getToken(CSharpParser.CARET, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_unary_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnary_expression" ):
                listener.enterUnary_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnary_expression" ):
                listener.exitUnary_expression(self)




    def unary_expression(self):

        localctx = CSharpParser.Unary_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_unary_expression)
        try:
            self.state = 978
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,60,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 956
                self.cast_expression()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 957
                self.primary_expression()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 958
                self.match(CSharpParser.PLUS)
                self.state = 959
                self.unary_expression()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 960
                self.match(CSharpParser.MINUS)
                self.state = 961
                self.unary_expression()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 962
                self.match(CSharpParser.BANG)
                self.state = 963
                self.unary_expression()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 964
                self.match(CSharpParser.TILDE)
                self.state = 965
                self.unary_expression()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 966
                self.match(CSharpParser.OP_INC)
                self.state = 967
                self.unary_expression()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 968
                self.match(CSharpParser.OP_DEC)
                self.state = 969
                self.unary_expression()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 970
                self.match(CSharpParser.AWAIT)
                self.state = 971
                self.unary_expression()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 972
                self.match(CSharpParser.AMP)
                self.state = 973
                self.unary_expression()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 974
                self.match(CSharpParser.STAR)
                self.state = 975
                self.unary_expression()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 976
                self.match(CSharpParser.CARET)
                self.state = 977
                self.unary_expression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Cast_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PARENS(self):
            return self.getToken(CSharpParser.OPEN_PARENS, 0)

        def type_(self):
            return self.getTypedRuleContext(CSharpParser.Type_Context,0)


        def CLOSE_PARENS(self):
            return self.getToken(CSharpParser.CLOSE_PARENS, 0)

        def unary_expression(self):
            return self.getTypedRuleContext(CSharpParser.Unary_expressionContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_cast_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCast_expression" ):
                listener.enterCast_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCast_expression" ):
                listener.exitCast_expression(self)




    def cast_expression(self):

        localctx = CSharpParser.Cast_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_cast_expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 980
            self.match(CSharpParser.OPEN_PARENS)
            self.state = 981
            self.type_()
            self.state = 982
            self.match(CSharpParser.CLOSE_PARENS)
            self.state = 983
            self.unary_expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Primary_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.pe = None # Primary_expression_startContext

        def primary_expression_start(self):
            return self.getTypedRuleContext(CSharpParser.Primary_expression_startContext,0)


        def BANG(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.BANG)
            else:
                return self.getToken(CSharpParser.BANG, i)

        def bracket_expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Bracket_expressionContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Bracket_expressionContext,i)


        def member_access(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Member_accessContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Member_accessContext,i)


        def method_invocation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Method_invocationContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Method_invocationContext,i)


        def OP_INC(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.OP_INC)
            else:
                return self.getToken(CSharpParser.OP_INC, i)

        def OP_DEC(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.OP_DEC)
            else:
                return self.getToken(CSharpParser.OP_DEC, i)

        def OP_PTR(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.OP_PTR)
            else:
                return self.getToken(CSharpParser.OP_PTR, i)

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(CSharpParser.IdentifierContext,i)


        def tuple_type(self):
            return self.getTypedRuleContext(CSharpParser.Tuple_typeContext,0)


        def default_value_expression(self):
            return self.getTypedRuleContext(CSharpParser.Default_value_expressionContext,0)


        def stackalloc_expression(self):
            return self.getTypedRuleContext(CSharpParser.Stackalloc_expressionContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_primary_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrimary_expression" ):
                listener.enterPrimary_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrimary_expression" ):
                listener.exitPrimary_expression(self)




    def primary_expression(self):

        localctx = CSharpParser.Primary_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_primary_expression)
        self._la = 0 # Token type
        try:
            self.state = 1026
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,69,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 985
                localctx.pe = self.primary_expression_start()
                self.state = 987
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,61,self._ctx)
                if la_ == 1:
                    self.state = 986
                    self.match(CSharpParser.BANG)


                self.state = 992
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,62,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 989
                        self.bracket_expression() 
                    self.state = 994
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,62,self._ctx)

                self.state = 996
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==149:
                    self.state = 995
                    self.match(CSharpParser.BANG)


                self.state = 1020
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,68,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1004
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [137, 154]:
                            self.state = 998
                            self.member_access()
                            pass
                        elif token in [135]:
                            self.state = 999
                            self.method_invocation()
                            pass
                        elif token in [157]:
                            self.state = 1000
                            self.match(CSharpParser.OP_INC)
                            pass
                        elif token in [158]:
                            self.state = 1001
                            self.match(CSharpParser.OP_DEC)
                            pass
                        elif token in [161]:
                            self.state = 1002
                            self.match(CSharpParser.OP_PTR)
                            self.state = 1003
                            self.identifier()
                            pass
                        else:
                            raise NoViableAltException(self)

                        self.state = 1007
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,65,self._ctx)
                        if la_ == 1:
                            self.state = 1006
                            self.match(CSharpParser.BANG)


                        self.state = 1012
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,66,self._ctx)
                        while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                            if _alt==1:
                                self.state = 1009
                                self.bracket_expression() 
                            self.state = 1014
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input,66,self._ctx)

                        self.state = 1016
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==149:
                            self.state = 1015
                            self.match(CSharpParser.BANG)

                 
                    self.state = 1022
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,68,self._ctx)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1023
                self.tuple_type()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1024
                self.default_value_expression()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1025
                self.stackalloc_expression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Primary_expression_startContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CSharpParser.RULE_primary_expression_start

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class LiteralAccessExpressionContext(Primary_expression_startContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CSharpParser.Primary_expression_startContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LITERAL_ACCESS(self):
            return self.getToken(CSharpParser.LITERAL_ACCESS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLiteralAccessExpression" ):
                listener.enterLiteralAccessExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLiteralAccessExpression" ):
                listener.exitLiteralAccessExpression(self)


    class DefaultValueExpressionContext(Primary_expression_startContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CSharpParser.Primary_expression_startContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DEFAULT(self):
            return self.getToken(CSharpParser.DEFAULT, 0)
        def OPEN_PARENS(self):
            return self.getToken(CSharpParser.OPEN_PARENS, 0)
        def type_(self):
            return self.getTypedRuleContext(CSharpParser.Type_Context,0)

        def CLOSE_PARENS(self):
            return self.getToken(CSharpParser.CLOSE_PARENS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDefaultValueExpression" ):
                listener.enterDefaultValueExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDefaultValueExpression" ):
                listener.exitDefaultValueExpression(self)


    class BaseAccessExpressionContext(Primary_expression_startContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CSharpParser.Primary_expression_startContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def BASE(self):
            return self.getToken(CSharpParser.BASE, 0)
        def DOT(self):
            return self.getToken(CSharpParser.DOT, 0)
        def identifier(self):
            return self.getTypedRuleContext(CSharpParser.IdentifierContext,0)

        def OPEN_BRACKET(self):
            return self.getToken(CSharpParser.OPEN_BRACKET, 0)
        def expression_list(self):
            return self.getTypedRuleContext(CSharpParser.Expression_listContext,0)

        def CLOSE_BRACKET(self):
            return self.getToken(CSharpParser.CLOSE_BRACKET, 0)
        def type_argument_list(self):
            return self.getTypedRuleContext(CSharpParser.Type_argument_listContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBaseAccessExpression" ):
                listener.enterBaseAccessExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBaseAccessExpression" ):
                listener.exitBaseAccessExpression(self)


    class SizeofExpressionContext(Primary_expression_startContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CSharpParser.Primary_expression_startContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SIZEOF(self):
            return self.getToken(CSharpParser.SIZEOF, 0)
        def OPEN_PARENS(self):
            return self.getToken(CSharpParser.OPEN_PARENS, 0)
        def type_(self):
            return self.getTypedRuleContext(CSharpParser.Type_Context,0)

        def CLOSE_PARENS(self):
            return self.getToken(CSharpParser.CLOSE_PARENS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSizeofExpression" ):
                listener.enterSizeofExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSizeofExpression" ):
                listener.exitSizeofExpression(self)


    class ParenthesisExpressionsContext(Primary_expression_startContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CSharpParser.Primary_expression_startContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def OPEN_PARENS(self):
            return self.getToken(CSharpParser.OPEN_PARENS, 0)
        def expression(self):
            return self.getTypedRuleContext(CSharpParser.ExpressionContext,0)

        def CLOSE_PARENS(self):
            return self.getToken(CSharpParser.CLOSE_PARENS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParenthesisExpressions" ):
                listener.enterParenthesisExpressions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParenthesisExpressions" ):
                listener.exitParenthesisExpressions(self)


    class TargetTypedNewExpressionContext(Primary_expression_startContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CSharpParser.Primary_expression_startContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def NEW(self):
            return self.getToken(CSharpParser.NEW, 0)
        def target_typed_new(self):
            return self.getTypedRuleContext(CSharpParser.Target_typed_newContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTargetTypedNewExpression" ):
                listener.enterTargetTypedNewExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTargetTypedNewExpression" ):
                listener.exitTargetTypedNewExpression(self)


    class ThisReferenceExpressionContext(Primary_expression_startContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CSharpParser.Primary_expression_startContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def THIS(self):
            return self.getToken(CSharpParser.THIS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterThisReferenceExpression" ):
                listener.enterThisReferenceExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitThisReferenceExpression" ):
                listener.exitThisReferenceExpression(self)


    class ObjectCreationExpressionContext(Primary_expression_startContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CSharpParser.Primary_expression_startContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def NEW(self):
            return self.getToken(CSharpParser.NEW, 0)
        def type_(self):
            return self.getTypedRuleContext(CSharpParser.Type_Context,0)

        def anonymous_object_initializer(self):
            return self.getTypedRuleContext(CSharpParser.Anonymous_object_initializerContext,0)

        def rank_specifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Rank_specifierContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Rank_specifierContext,i)

        def array_initializer(self):
            return self.getTypedRuleContext(CSharpParser.Array_initializerContext,0)

        def object_creation_expression(self):
            return self.getTypedRuleContext(CSharpParser.Object_creation_expressionContext,0)

        def object_or_collection_initializer(self):
            return self.getTypedRuleContext(CSharpParser.Object_or_collection_initializerContext,0)

        def OPEN_BRACKET(self):
            return self.getToken(CSharpParser.OPEN_BRACKET, 0)
        def expression_list(self):
            return self.getTypedRuleContext(CSharpParser.Expression_listContext,0)

        def CLOSE_BRACKET(self):
            return self.getToken(CSharpParser.CLOSE_BRACKET, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterObjectCreationExpression" ):
                listener.enterObjectCreationExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitObjectCreationExpression" ):
                listener.exitObjectCreationExpression(self)


    class AnonymousMethodExpressionContext(Primary_expression_startContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CSharpParser.Primary_expression_startContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DELEGATE(self):
            return self.getToken(CSharpParser.DELEGATE, 0)
        def block(self):
            return self.getTypedRuleContext(CSharpParser.BlockContext,0)

        def ASYNC(self):
            return self.getToken(CSharpParser.ASYNC, 0)
        def OPEN_PARENS(self):
            return self.getToken(CSharpParser.OPEN_PARENS, 0)
        def CLOSE_PARENS(self):
            return self.getToken(CSharpParser.CLOSE_PARENS, 0)
        def explicit_anonymous_function_parameter_list(self):
            return self.getTypedRuleContext(CSharpParser.Explicit_anonymous_function_parameter_listContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnonymousMethodExpression" ):
                listener.enterAnonymousMethodExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnonymousMethodExpression" ):
                listener.exitAnonymousMethodExpression(self)


    class TypeofExpressionContext(Primary_expression_startContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CSharpParser.Primary_expression_startContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def TYPEOF(self):
            return self.getToken(CSharpParser.TYPEOF, 0)
        def OPEN_PARENS(self):
            return self.getToken(CSharpParser.OPEN_PARENS, 0)
        def CLOSE_PARENS(self):
            return self.getToken(CSharpParser.CLOSE_PARENS, 0)
        def unbound_type_name(self):
            return self.getTypedRuleContext(CSharpParser.Unbound_type_nameContext,0)

        def type_(self):
            return self.getTypedRuleContext(CSharpParser.Type_Context,0)

        def VOID(self):
            return self.getToken(CSharpParser.VOID, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeofExpression" ):
                listener.enterTypeofExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeofExpression" ):
                listener.exitTypeofExpression(self)


    class TupleExpressionContext(Primary_expression_startContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CSharpParser.Primary_expression_startContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def OPEN_PARENS(self):
            return self.getToken(CSharpParser.OPEN_PARENS, 0)
        def argument(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.ArgumentContext)
            else:
                return self.getTypedRuleContext(CSharpParser.ArgumentContext,i)

        def CLOSE_PARENS(self):
            return self.getToken(CSharpParser.CLOSE_PARENS, 0)
        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.COMMA)
            else:
                return self.getToken(CSharpParser.COMMA, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTupleExpression" ):
                listener.enterTupleExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTupleExpression" ):
                listener.exitTupleExpression(self)


    class UncheckedExpressionContext(Primary_expression_startContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CSharpParser.Primary_expression_startContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def UNCHECKED(self):
            return self.getToken(CSharpParser.UNCHECKED, 0)
        def OPEN_PARENS(self):
            return self.getToken(CSharpParser.OPEN_PARENS, 0)
        def expression(self):
            return self.getTypedRuleContext(CSharpParser.ExpressionContext,0)

        def CLOSE_PARENS(self):
            return self.getToken(CSharpParser.CLOSE_PARENS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUncheckedExpression" ):
                listener.enterUncheckedExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUncheckedExpression" ):
                listener.exitUncheckedExpression(self)


    class SimpleNameExpressionContext(Primary_expression_startContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CSharpParser.Primary_expression_startContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def identifier(self):
            return self.getTypedRuleContext(CSharpParser.IdentifierContext,0)

        def type_argument_list(self):
            return self.getTypedRuleContext(CSharpParser.Type_argument_listContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleNameExpression" ):
                listener.enterSimpleNameExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleNameExpression" ):
                listener.exitSimpleNameExpression(self)


    class MemberAccessExpressionContext(Primary_expression_startContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CSharpParser.Primary_expression_startContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def predefined_type(self):
            return self.getTypedRuleContext(CSharpParser.Predefined_typeContext,0)

        def qualified_alias_member(self):
            return self.getTypedRuleContext(CSharpParser.Qualified_alias_memberContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMemberAccessExpression" ):
                listener.enterMemberAccessExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMemberAccessExpression" ):
                listener.exitMemberAccessExpression(self)


    class CheckedExpressionContext(Primary_expression_startContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CSharpParser.Primary_expression_startContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CHECKED(self):
            return self.getToken(CSharpParser.CHECKED, 0)
        def OPEN_PARENS(self):
            return self.getToken(CSharpParser.OPEN_PARENS, 0)
        def expression(self):
            return self.getTypedRuleContext(CSharpParser.ExpressionContext,0)

        def CLOSE_PARENS(self):
            return self.getToken(CSharpParser.CLOSE_PARENS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCheckedExpression" ):
                listener.enterCheckedExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCheckedExpression" ):
                listener.exitCheckedExpression(self)


    class LiteralExpressionContext(Primary_expression_startContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CSharpParser.Primary_expression_startContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def literal(self):
            return self.getTypedRuleContext(CSharpParser.LiteralContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLiteralExpression" ):
                listener.enterLiteralExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLiteralExpression" ):
                listener.exitLiteralExpression(self)


    class NameofExpressionContext(Primary_expression_startContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CSharpParser.Primary_expression_startContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def NAMEOF(self):
            return self.getToken(CSharpParser.NAMEOF, 0)
        def OPEN_PARENS(self):
            return self.getToken(CSharpParser.OPEN_PARENS, 0)
        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(CSharpParser.IdentifierContext,i)

        def CLOSE_PARENS(self):
            return self.getToken(CSharpParser.CLOSE_PARENS, 0)
        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.DOT)
            else:
                return self.getToken(CSharpParser.DOT, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNameofExpression" ):
                listener.enterNameofExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNameofExpression" ):
                listener.exitNameofExpression(self)



    def primary_expression_start(self):

        localctx = CSharpParser.Primary_expression_startContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_primary_expression_start)
        self._la = 0 # Token type
        try:
            self.state = 1151
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,85,self._ctx)
            if la_ == 1:
                localctx = CSharpParser.LiteralExpressionContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1028
                self.literal()
                pass

            elif la_ == 2:
                localctx = CSharpParser.SimpleNameExpressionContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1029
                self.identifier()
                self.state = 1031
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,70,self._ctx)
                if la_ == 1:
                    self.state = 1030
                    self.type_argument_list()


                pass

            elif la_ == 3:
                localctx = CSharpParser.ParenthesisExpressionsContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 1033
                self.match(CSharpParser.OPEN_PARENS)
                self.state = 1034
                self.expression()
                self.state = 1035
                self.match(CSharpParser.CLOSE_PARENS)
                pass

            elif la_ == 4:
                localctx = CSharpParser.MemberAccessExpressionContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 1037
                self.predefined_type()
                pass

            elif la_ == 5:
                localctx = CSharpParser.MemberAccessExpressionContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 1038
                self.qualified_alias_member()
                pass

            elif la_ == 6:
                localctx = CSharpParser.LiteralAccessExpressionContext(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 1039
                self.match(CSharpParser.LITERAL_ACCESS)
                pass

            elif la_ == 7:
                localctx = CSharpParser.ThisReferenceExpressionContext(self, localctx)
                self.enterOuterAlt(localctx, 7)
                self.state = 1040
                self.match(CSharpParser.THIS)
                pass

            elif la_ == 8:
                localctx = CSharpParser.BaseAccessExpressionContext(self, localctx)
                self.enterOuterAlt(localctx, 8)
                self.state = 1041
                self.match(CSharpParser.BASE)
                self.state = 1051
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [137]:
                    self.state = 1042
                    self.match(CSharpParser.DOT)
                    self.state = 1043
                    self.identifier()
                    self.state = 1045
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,71,self._ctx)
                    if la_ == 1:
                        self.state = 1044
                        self.type_argument_list()


                    pass
                elif token in [133]:
                    self.state = 1047
                    self.match(CSharpParser.OPEN_BRACKET)
                    self.state = 1048
                    self.expression_list()
                    self.state = 1049
                    self.match(CSharpParser.CLOSE_BRACKET)
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 9:
                localctx = CSharpParser.ObjectCreationExpressionContext(self, localctx)
                self.enterOuterAlt(localctx, 9)
                self.state = 1053
                self.match(CSharpParser.NEW)
                self.state = 1082
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,77,self._ctx)
                if la_ == 1:
                    self.state = 1054
                    self.type_()
                    self.state = 1076
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,76,self._ctx)
                    if la_ == 1:
                        self.state = 1055
                        self.object_creation_expression()
                        pass

                    elif la_ == 2:
                        self.state = 1056
                        self.object_or_collection_initializer()
                        pass

                    elif la_ == 3:
                        self.state = 1057
                        self.match(CSharpParser.OPEN_BRACKET)
                        self.state = 1058
                        self.expression_list()
                        self.state = 1059
                        self.match(CSharpParser.CLOSE_BRACKET)
                        self.state = 1063
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,73,self._ctx)
                        while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                            if _alt==1:
                                self.state = 1060
                                self.rank_specifier() 
                            self.state = 1065
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input,73,self._ctx)

                        self.state = 1067
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==131:
                            self.state = 1066
                            self.array_initializer()


                        pass

                    elif la_ == 4:
                        self.state = 1070 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while True:
                            self.state = 1069
                            self.rank_specifier()
                            self.state = 1072 
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if not (_la==133):
                                break

                        self.state = 1074
                        self.array_initializer()
                        pass



                elif la_ == 2:
                    self.state = 1078
                    self.anonymous_object_initializer()

                elif la_ == 3:
                    self.state = 1079
                    self.rank_specifier()
                    self.state = 1080
                    self.array_initializer()


                pass

            elif la_ == 10:
                localctx = CSharpParser.TargetTypedNewExpressionContext(self, localctx)
                self.enterOuterAlt(localctx, 10)
                self.state = 1084
                self.match(CSharpParser.NEW)
                self.state = 1085
                self.target_typed_new()
                pass

            elif la_ == 11:
                localctx = CSharpParser.TupleExpressionContext(self, localctx)
                self.enterOuterAlt(localctx, 11)
                self.state = 1086
                self.match(CSharpParser.OPEN_PARENS)
                self.state = 1087
                self.argument()
                self.state = 1090 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 1088
                    self.match(CSharpParser.COMMA)
                    self.state = 1089
                    self.argument()
                    self.state = 1092 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==138):
                        break

                self.state = 1094
                self.match(CSharpParser.CLOSE_PARENS)
                pass

            elif la_ == 12:
                localctx = CSharpParser.TypeofExpressionContext(self, localctx)
                self.enterOuterAlt(localctx, 12)
                self.state = 1096
                self.match(CSharpParser.TYPEOF)
                self.state = 1097
                self.match(CSharpParser.OPEN_PARENS)
                self.state = 1101
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,79,self._ctx)
                if la_ == 1:
                    self.state = 1098
                    self.unbound_type_name()
                    pass

                elif la_ == 2:
                    self.state = 1099
                    self.type_()
                    pass

                elif la_ == 3:
                    self.state = 1100
                    self.match(CSharpParser.VOID)
                    pass


                self.state = 1103
                self.match(CSharpParser.CLOSE_PARENS)
                pass

            elif la_ == 13:
                localctx = CSharpParser.CheckedExpressionContext(self, localctx)
                self.enterOuterAlt(localctx, 13)
                self.state = 1104
                self.match(CSharpParser.CHECKED)
                self.state = 1105
                self.match(CSharpParser.OPEN_PARENS)
                self.state = 1106
                self.expression()
                self.state = 1107
                self.match(CSharpParser.CLOSE_PARENS)
                pass

            elif la_ == 14:
                localctx = CSharpParser.UncheckedExpressionContext(self, localctx)
                self.enterOuterAlt(localctx, 14)
                self.state = 1109
                self.match(CSharpParser.UNCHECKED)
                self.state = 1110
                self.match(CSharpParser.OPEN_PARENS)
                self.state = 1111
                self.expression()
                self.state = 1112
                self.match(CSharpParser.CLOSE_PARENS)
                pass

            elif la_ == 15:
                localctx = CSharpParser.DefaultValueExpressionContext(self, localctx)
                self.enterOuterAlt(localctx, 15)
                self.state = 1114
                self.match(CSharpParser.DEFAULT)
                self.state = 1119
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,80,self._ctx)
                if la_ == 1:
                    self.state = 1115
                    self.match(CSharpParser.OPEN_PARENS)
                    self.state = 1116
                    self.type_()
                    self.state = 1117
                    self.match(CSharpParser.CLOSE_PARENS)


                pass

            elif la_ == 16:
                localctx = CSharpParser.AnonymousMethodExpressionContext(self, localctx)
                self.enterOuterAlt(localctx, 16)
                self.state = 1122
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==16:
                    self.state = 1121
                    self.match(CSharpParser.ASYNC)


                self.state = 1124
                self.match(CSharpParser.DELEGATE)
                self.state = 1130
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1125
                    self.match(CSharpParser.OPEN_PARENS)
                    self.state = 1127
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if ((((_la - 10)) & ~0x3f) == 0 and ((1 << (_la - 10)) & -4366018217772016915) != 0) or ((((_la - 76)) & ~0x3f) == 0 and ((1 << (_la - 76)) & 576484575146006035) != 0):
                        self.state = 1126
                        self.explicit_anonymous_function_parameter_list()


                    self.state = 1129
                    self.match(CSharpParser.CLOSE_PARENS)


                self.state = 1132
                self.block()
                pass

            elif la_ == 17:
                localctx = CSharpParser.SizeofExpressionContext(self, localctx)
                self.enterOuterAlt(localctx, 17)
                self.state = 1133
                self.match(CSharpParser.SIZEOF)
                self.state = 1134
                self.match(CSharpParser.OPEN_PARENS)
                self.state = 1135
                self.type_()
                self.state = 1136
                self.match(CSharpParser.CLOSE_PARENS)
                pass

            elif la_ == 18:
                localctx = CSharpParser.NameofExpressionContext(self, localctx)
                self.enterOuterAlt(localctx, 18)
                self.state = 1138
                self.match(CSharpParser.NAMEOF)
                self.state = 1139
                self.match(CSharpParser.OPEN_PARENS)
                self.state = 1145
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,84,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1140
                        self.identifier()
                        self.state = 1141
                        self.match(CSharpParser.DOT) 
                    self.state = 1147
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,84,self._ctx)

                self.state = 1148
                self.identifier()
                self.state = 1149
                self.match(CSharpParser.CLOSE_PARENS)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Throwable_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(CSharpParser.ExpressionContext,0)


        def throw_expression(self):
            return self.getTypedRuleContext(CSharpParser.Throw_expressionContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_throwable_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterThrowable_expression" ):
                listener.enterThrowable_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitThrowable_expression" ):
                listener.exitThrowable_expression(self)




    def throwable_expression(self):

        localctx = CSharpParser.Throwable_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_throwable_expression)
        try:
            self.state = 1155
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [10, 12, 13, 15, 16, 17, 18, 19, 21, 22, 25, 26, 30, 31, 32, 33, 35, 36, 39, 43, 46, 49, 50, 53, 57, 61, 63, 64, 66, 67, 69, 71, 72, 73, 76, 80, 85, 86, 88, 90, 91, 92, 93, 94, 95, 96, 99, 101, 103, 104, 105, 106, 107, 109, 111, 115, 116, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 133, 135, 141, 142, 143, 146, 148, 149, 150, 157, 158, 177]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1153
                self.expression()
                pass
            elif token in [100]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1154
                self.throw_expression()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Throw_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def THROW(self):
            return self.getToken(CSharpParser.THROW, 0)

        def expression(self):
            return self.getTypedRuleContext(CSharpParser.ExpressionContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_throw_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterThrow_expression" ):
                listener.enterThrow_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitThrow_expression" ):
                listener.exitThrow_expression(self)




    def throw_expression(self):

        localctx = CSharpParser.Throw_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_throw_expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1157
            self.match(CSharpParser.THROW)
            self.state = 1158
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Member_accessContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DOT(self):
            return self.getToken(CSharpParser.DOT, 0)

        def identifier(self):
            return self.getTypedRuleContext(CSharpParser.IdentifierContext,0)


        def INTERR(self):
            return self.getToken(CSharpParser.INTERR, 0)

        def type_argument_list(self):
            return self.getTypedRuleContext(CSharpParser.Type_argument_listContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_member_access

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMember_access" ):
                listener.enterMember_access(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMember_access" ):
                listener.exitMember_access(self)




    def member_access(self):

        localctx = CSharpParser.Member_accessContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_member_access)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1161
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==154:
                self.state = 1160
                self.match(CSharpParser.INTERR)


            self.state = 1163
            self.match(CSharpParser.DOT)
            self.state = 1164
            self.identifier()
            self.state = 1166
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,88,self._ctx)
            if la_ == 1:
                self.state = 1165
                self.type_argument_list()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Bracket_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_BRACKET(self):
            return self.getToken(CSharpParser.OPEN_BRACKET, 0)

        def indexer_argument(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Indexer_argumentContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Indexer_argumentContext,i)


        def CLOSE_BRACKET(self):
            return self.getToken(CSharpParser.CLOSE_BRACKET, 0)

        def INTERR(self):
            return self.getToken(CSharpParser.INTERR, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.COMMA)
            else:
                return self.getToken(CSharpParser.COMMA, i)

        def getRuleIndex(self):
            return CSharpParser.RULE_bracket_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBracket_expression" ):
                listener.enterBracket_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBracket_expression" ):
                listener.exitBracket_expression(self)




    def bracket_expression(self):

        localctx = CSharpParser.Bracket_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_bracket_expression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1169
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==154:
                self.state = 1168
                self.match(CSharpParser.INTERR)


            self.state = 1171
            self.match(CSharpParser.OPEN_BRACKET)
            self.state = 1172
            self.indexer_argument()
            self.state = 1177
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==138:
                self.state = 1173
                self.match(CSharpParser.COMMA)
                self.state = 1174
                self.indexer_argument()
                self.state = 1179
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1180
            self.match(CSharpParser.CLOSE_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Indexer_argumentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(CSharpParser.ExpressionContext,0)


        def identifier(self):
            return self.getTypedRuleContext(CSharpParser.IdentifierContext,0)


        def COLON(self):
            return self.getToken(CSharpParser.COLON, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_indexer_argument

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndexer_argument" ):
                listener.enterIndexer_argument(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndexer_argument" ):
                listener.exitIndexer_argument(self)




    def indexer_argument(self):

        localctx = CSharpParser.Indexer_argumentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_indexer_argument)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1185
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,91,self._ctx)
            if la_ == 1:
                self.state = 1182
                self.identifier()
                self.state = 1183
                self.match(CSharpParser.COLON)


            self.state = 1187
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Predefined_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BOOL(self):
            return self.getToken(CSharpParser.BOOL, 0)

        def BYTE(self):
            return self.getToken(CSharpParser.BYTE, 0)

        def CHAR(self):
            return self.getToken(CSharpParser.CHAR, 0)

        def DECIMAL(self):
            return self.getToken(CSharpParser.DECIMAL, 0)

        def DOUBLE(self):
            return self.getToken(CSharpParser.DOUBLE, 0)

        def FLOAT(self):
            return self.getToken(CSharpParser.FLOAT, 0)

        def INT(self):
            return self.getToken(CSharpParser.INT, 0)

        def LONG(self):
            return self.getToken(CSharpParser.LONG, 0)

        def OBJECT(self):
            return self.getToken(CSharpParser.OBJECT, 0)

        def SBYTE(self):
            return self.getToken(CSharpParser.SBYTE, 0)

        def SHORT(self):
            return self.getToken(CSharpParser.SHORT, 0)

        def STRING(self):
            return self.getToken(CSharpParser.STRING, 0)

        def UINT(self):
            return self.getToken(CSharpParser.UINT, 0)

        def ULONG(self):
            return self.getToken(CSharpParser.ULONG, 0)

        def USHORT(self):
            return self.getToken(CSharpParser.USHORT, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_predefined_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPredefined_type" ):
                listener.enterPredefined_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPredefined_type" ):
                listener.exitPredefined_type(self)




    def predefined_type(self):

        localctx = CSharpParser.Predefined_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_predefined_type)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1189
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 144185592291786752) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & 9621871788097) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Expression_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(CSharpParser.ExpressionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.COMMA)
            else:
                return self.getToken(CSharpParser.COMMA, i)

        def getRuleIndex(self):
            return CSharpParser.RULE_expression_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpression_list" ):
                listener.enterExpression_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpression_list" ):
                listener.exitExpression_list(self)




    def expression_list(self):

        localctx = CSharpParser.Expression_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_expression_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1191
            self.expression()
            self.state = 1196
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==138:
                self.state = 1192
                self.match(CSharpParser.COMMA)
                self.state = 1193
                self.expression()
                self.state = 1198
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Object_or_collection_initializerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def object_initializer(self):
            return self.getTypedRuleContext(CSharpParser.Object_initializerContext,0)


        def collection_initializer(self):
            return self.getTypedRuleContext(CSharpParser.Collection_initializerContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_object_or_collection_initializer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterObject_or_collection_initializer" ):
                listener.enterObject_or_collection_initializer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitObject_or_collection_initializer" ):
                listener.exitObject_or_collection_initializer(self)




    def object_or_collection_initializer(self):

        localctx = CSharpParser.Object_or_collection_initializerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_object_or_collection_initializer)
        try:
            self.state = 1201
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,93,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1199
                self.object_initializer()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1200
                self.collection_initializer()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Object_initializerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_BRACE(self):
            return self.getToken(CSharpParser.OPEN_BRACE, 0)

        def CLOSE_BRACE(self):
            return self.getToken(CSharpParser.CLOSE_BRACE, 0)

        def member_initializer_list(self):
            return self.getTypedRuleContext(CSharpParser.Member_initializer_listContext,0)


        def COMMA(self):
            return self.getToken(CSharpParser.COMMA, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_object_initializer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterObject_initializer" ):
                listener.enterObject_initializer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitObject_initializer" ):
                listener.exitObject_initializer(self)




    def object_initializer(self):

        localctx = CSharpParser.Object_initializerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_object_initializer)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1203
            self.match(CSharpParser.OPEN_BRACE)
            self.state = 1208
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 10)) & ~0x3f) == 0 and ((1 << (_la - 10)) & -9049973005228177171) != 0) or ((((_la - 76)) & ~0x3f) == 0 and ((1 << (_la - 76)) & 144138864083125265) != 0):
                self.state = 1204
                self.member_initializer_list()
                self.state = 1206
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==138:
                    self.state = 1205
                    self.match(CSharpParser.COMMA)




            self.state = 1210
            self.match(CSharpParser.CLOSE_BRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Member_initializer_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def member_initializer(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Member_initializerContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Member_initializerContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.COMMA)
            else:
                return self.getToken(CSharpParser.COMMA, i)

        def getRuleIndex(self):
            return CSharpParser.RULE_member_initializer_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMember_initializer_list" ):
                listener.enterMember_initializer_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMember_initializer_list" ):
                listener.exitMember_initializer_list(self)




    def member_initializer_list(self):

        localctx = CSharpParser.Member_initializer_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_member_initializer_list)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1212
            self.member_initializer()
            self.state = 1217
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,96,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1213
                    self.match(CSharpParser.COMMA)
                    self.state = 1214
                    self.member_initializer() 
                self.state = 1219
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,96,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Member_initializerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ASSIGNMENT(self):
            return self.getToken(CSharpParser.ASSIGNMENT, 0)

        def initializer_value(self):
            return self.getTypedRuleContext(CSharpParser.Initializer_valueContext,0)


        def identifier(self):
            return self.getTypedRuleContext(CSharpParser.IdentifierContext,0)


        def OPEN_BRACKET(self):
            return self.getToken(CSharpParser.OPEN_BRACKET, 0)

        def expression(self):
            return self.getTypedRuleContext(CSharpParser.ExpressionContext,0)


        def CLOSE_BRACKET(self):
            return self.getToken(CSharpParser.CLOSE_BRACKET, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_member_initializer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMember_initializer" ):
                listener.enterMember_initializer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMember_initializer" ):
                listener.exitMember_initializer(self)




    def member_initializer(self):

        localctx = CSharpParser.Member_initializerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_member_initializer)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1225
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [10, 12, 13, 15, 16, 17, 21, 33, 36, 39, 49, 50, 53, 61, 63, 64, 67, 73, 76, 80, 86, 90, 91, 107, 111, 115, 116, 118, 120]:
                self.state = 1220
                self.identifier()
                pass
            elif token in [133]:
                self.state = 1221
                self.match(CSharpParser.OPEN_BRACKET)
                self.state = 1222
                self.expression()
                self.state = 1223
                self.match(CSharpParser.CLOSE_BRACKET)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 1227
            self.match(CSharpParser.ASSIGNMENT)
            self.state = 1228
            self.initializer_value()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Initializer_valueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(CSharpParser.ExpressionContext,0)


        def object_or_collection_initializer(self):
            return self.getTypedRuleContext(CSharpParser.Object_or_collection_initializerContext,0)


        def tuple_type(self):
            return self.getTypedRuleContext(CSharpParser.Tuple_typeContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_initializer_value

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInitializer_value" ):
                listener.enterInitializer_value(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInitializer_value" ):
                listener.exitInitializer_value(self)




    def initializer_value(self):

        localctx = CSharpParser.Initializer_valueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_initializer_value)
        try:
            self.state = 1233
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,98,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1230
                self.expression()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1231
                self.object_or_collection_initializer()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1232
                self.tuple_type()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Collection_initializerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_BRACE(self):
            return self.getToken(CSharpParser.OPEN_BRACE, 0)

        def element_initializer(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Element_initializerContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Element_initializerContext,i)


        def CLOSE_BRACE(self):
            return self.getToken(CSharpParser.CLOSE_BRACE, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.COMMA)
            else:
                return self.getToken(CSharpParser.COMMA, i)

        def getRuleIndex(self):
            return CSharpParser.RULE_collection_initializer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCollection_initializer" ):
                listener.enterCollection_initializer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCollection_initializer" ):
                listener.exitCollection_initializer(self)




    def collection_initializer(self):

        localctx = CSharpParser.Collection_initializerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_collection_initializer)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1235
            self.match(CSharpParser.OPEN_BRACE)
            self.state = 1236
            self.element_initializer()
            self.state = 1241
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,99,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1237
                    self.match(CSharpParser.COMMA)
                    self.state = 1238
                    self.element_initializer() 
                self.state = 1243
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,99,self._ctx)

            self.state = 1245
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==138:
                self.state = 1244
                self.match(CSharpParser.COMMA)


            self.state = 1247
            self.match(CSharpParser.CLOSE_BRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Element_initializerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def non_assignment_expression(self):
            return self.getTypedRuleContext(CSharpParser.Non_assignment_expressionContext,0)


        def OPEN_BRACE(self):
            return self.getToken(CSharpParser.OPEN_BRACE, 0)

        def expression_list(self):
            return self.getTypedRuleContext(CSharpParser.Expression_listContext,0)


        def CLOSE_BRACE(self):
            return self.getToken(CSharpParser.CLOSE_BRACE, 0)

        def expression(self):
            return self.getTypedRuleContext(CSharpParser.ExpressionContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_element_initializer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElement_initializer" ):
                listener.enterElement_initializer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElement_initializer" ):
                listener.exitElement_initializer(self)




    def element_initializer(self):

        localctx = CSharpParser.Element_initializerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_element_initializer)
        try:
            self.state = 1255
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,101,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1249
                self.non_assignment_expression()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1250
                self.match(CSharpParser.OPEN_BRACE)
                self.state = 1251
                self.expression_list()
                self.state = 1252
                self.match(CSharpParser.CLOSE_BRACE)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1254
                self.expression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Anonymous_object_initializerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_BRACE(self):
            return self.getToken(CSharpParser.OPEN_BRACE, 0)

        def CLOSE_BRACE(self):
            return self.getToken(CSharpParser.CLOSE_BRACE, 0)

        def member_declarator_list(self):
            return self.getTypedRuleContext(CSharpParser.Member_declarator_listContext,0)


        def COMMA(self):
            return self.getToken(CSharpParser.COMMA, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_anonymous_object_initializer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnonymous_object_initializer" ):
                listener.enterAnonymous_object_initializer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnonymous_object_initializer" ):
                listener.exitAnonymous_object_initializer(self)




    def anonymous_object_initializer(self):

        localctx = CSharpParser.Anonymous_object_initializerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_anonymous_object_initializer)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1257
            self.match(CSharpParser.OPEN_BRACE)
            self.state = 1262
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 10)) & ~0x3f) == 0 and ((1 << (_la - 10)) & -1483784816406979603) != 0) or ((((_la - 76)) & ~0x3f) == 0 and ((1 << (_la - 76)) & 612478051604222993) != 0):
                self.state = 1258
                self.member_declarator_list()
                self.state = 1260
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==138:
                    self.state = 1259
                    self.match(CSharpParser.COMMA)




            self.state = 1264
            self.match(CSharpParser.CLOSE_BRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Member_declarator_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def member_declarator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Member_declaratorContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Member_declaratorContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.COMMA)
            else:
                return self.getToken(CSharpParser.COMMA, i)

        def getRuleIndex(self):
            return CSharpParser.RULE_member_declarator_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMember_declarator_list" ):
                listener.enterMember_declarator_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMember_declarator_list" ):
                listener.exitMember_declarator_list(self)




    def member_declarator_list(self):

        localctx = CSharpParser.Member_declarator_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_member_declarator_list)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1266
            self.member_declarator()
            self.state = 1271
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,104,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1267
                    self.match(CSharpParser.COMMA)
                    self.state = 1268
                    self.member_declarator() 
                self.state = 1273
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,104,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Member_declaratorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def primary_expression(self):
            return self.getTypedRuleContext(CSharpParser.Primary_expressionContext,0)


        def identifier(self):
            return self.getTypedRuleContext(CSharpParser.IdentifierContext,0)


        def ASSIGNMENT(self):
            return self.getToken(CSharpParser.ASSIGNMENT, 0)

        def expression(self):
            return self.getTypedRuleContext(CSharpParser.ExpressionContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_member_declarator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMember_declarator" ):
                listener.enterMember_declarator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMember_declarator" ):
                listener.exitMember_declarator(self)




    def member_declarator(self):

        localctx = CSharpParser.Member_declaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_member_declarator)
        try:
            self.state = 1279
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,105,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1274
                self.primary_expression()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1275
                self.identifier()
                self.state = 1276
                self.match(CSharpParser.ASSIGNMENT)
                self.state = 1277
                self.expression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Unbound_type_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(CSharpParser.IdentifierContext,i)


        def DOUBLE_COLON(self):
            return self.getToken(CSharpParser.DOUBLE_COLON, 0)

        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.DOT)
            else:
                return self.getToken(CSharpParser.DOT, i)

        def generic_dimension_specifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Generic_dimension_specifierContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Generic_dimension_specifierContext,i)


        def getRuleIndex(self):
            return CSharpParser.RULE_unbound_type_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnbound_type_name" ):
                listener.enterUnbound_type_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnbound_type_name" ):
                listener.exitUnbound_type_name(self)




    def unbound_type_name(self):

        localctx = CSharpParser.Unbound_type_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_unbound_type_name)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1281
            self.identifier()
            self.state = 1290
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [136, 137, 152]:
                self.state = 1283
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==152:
                    self.state = 1282
                    self.generic_dimension_specifier()


                pass
            elif token in [155]:
                self.state = 1285
                self.match(CSharpParser.DOUBLE_COLON)
                self.state = 1286
                self.identifier()
                self.state = 1288
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==152:
                    self.state = 1287
                    self.generic_dimension_specifier()


                pass
            else:
                raise NoViableAltException(self)

            self.state = 1299
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==137:
                self.state = 1292
                self.match(CSharpParser.DOT)
                self.state = 1293
                self.identifier()
                self.state = 1295
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==152:
                    self.state = 1294
                    self.generic_dimension_specifier()


                self.state = 1301
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Generic_dimension_specifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LT(self):
            return self.getToken(CSharpParser.LT, 0)

        def GT(self):
            return self.getToken(CSharpParser.GT, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.COMMA)
            else:
                return self.getToken(CSharpParser.COMMA, i)

        def getRuleIndex(self):
            return CSharpParser.RULE_generic_dimension_specifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGeneric_dimension_specifier" ):
                listener.enterGeneric_dimension_specifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGeneric_dimension_specifier" ):
                listener.exitGeneric_dimension_specifier(self)




    def generic_dimension_specifier(self):

        localctx = CSharpParser.Generic_dimension_specifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_generic_dimension_specifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1302
            self.match(CSharpParser.LT)
            self.state = 1306
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==138:
                self.state = 1303
                self.match(CSharpParser.COMMA)
                self.state = 1308
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1309
            self.match(CSharpParser.GT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IsTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def base_type(self):
            return self.getTypedRuleContext(CSharpParser.Base_typeContext,0)


        def rank_specifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Rank_specifierContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Rank_specifierContext,i)


        def STAR(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.STAR)
            else:
                return self.getToken(CSharpParser.STAR, i)

        def INTERR(self):
            return self.getToken(CSharpParser.INTERR, 0)

        def isTypePatternArms(self):
            return self.getTypedRuleContext(CSharpParser.IsTypePatternArmsContext,0)


        def identifier(self):
            return self.getTypedRuleContext(CSharpParser.IdentifierContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_isType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIsType" ):
                listener.enterIsType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIsType" ):
                listener.exitIsType(self)




    def isType(self):

        localctx = CSharpParser.IsTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_isType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1311
            self.base_type()
            self.state = 1316
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==133 or _la==143:
                self.state = 1314
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [133]:
                    self.state = 1312
                    self.rank_specifier()
                    pass
                elif token in [143]:
                    self.state = 1313
                    self.match(CSharpParser.STAR)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1318
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1320
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,114,self._ctx)
            if la_ == 1:
                self.state = 1319
                self.match(CSharpParser.INTERR)


            self.state = 1323
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==131:
                self.state = 1322
                self.isTypePatternArms()


            self.state = 1326
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,116,self._ctx)
            if la_ == 1:
                self.state = 1325
                self.identifier()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IsTypePatternArmsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_BRACE(self):
            return self.getToken(CSharpParser.OPEN_BRACE, 0)

        def isTypePatternArm(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.IsTypePatternArmContext)
            else:
                return self.getTypedRuleContext(CSharpParser.IsTypePatternArmContext,i)


        def CLOSE_BRACE(self):
            return self.getToken(CSharpParser.CLOSE_BRACE, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.COMMA)
            else:
                return self.getToken(CSharpParser.COMMA, i)

        def getRuleIndex(self):
            return CSharpParser.RULE_isTypePatternArms

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIsTypePatternArms" ):
                listener.enterIsTypePatternArms(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIsTypePatternArms" ):
                listener.exitIsTypePatternArms(self)




    def isTypePatternArms(self):

        localctx = CSharpParser.IsTypePatternArmsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_isTypePatternArms)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1328
            self.match(CSharpParser.OPEN_BRACE)
            self.state = 1329
            self.isTypePatternArm()
            self.state = 1334
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==138:
                self.state = 1330
                self.match(CSharpParser.COMMA)
                self.state = 1331
                self.isTypePatternArm()
                self.state = 1336
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1337
            self.match(CSharpParser.CLOSE_BRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IsTypePatternArmContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(CSharpParser.IdentifierContext,0)


        def COLON(self):
            return self.getToken(CSharpParser.COLON, 0)

        def expression(self):
            return self.getTypedRuleContext(CSharpParser.ExpressionContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_isTypePatternArm

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIsTypePatternArm" ):
                listener.enterIsTypePatternArm(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIsTypePatternArm" ):
                listener.exitIsTypePatternArm(self)




    def isTypePatternArm(self):

        localctx = CSharpParser.IsTypePatternArmContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_isTypePatternArm)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1339
            self.identifier()
            self.state = 1340
            self.match(CSharpParser.COLON)
            self.state = 1341
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Lambda_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def anonymous_function_signature(self):
            return self.getTypedRuleContext(CSharpParser.Anonymous_function_signatureContext,0)


        def right_arrow(self):
            return self.getTypedRuleContext(CSharpParser.Right_arrowContext,0)


        def anonymous_function_body(self):
            return self.getTypedRuleContext(CSharpParser.Anonymous_function_bodyContext,0)


        def attributes(self):
            return self.getTypedRuleContext(CSharpParser.AttributesContext,0)


        def ASYNC(self):
            return self.getToken(CSharpParser.ASYNC, 0)

        def STATIC(self):
            return self.getToken(CSharpParser.STATIC, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_lambda_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLambda_expression" ):
                listener.enterLambda_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLambda_expression" ):
                listener.exitLambda_expression(self)




    def lambda_expression(self):

        localctx = CSharpParser.Lambda_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_lambda_expression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1344
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==133:
                self.state = 1343
                self.attributes()


            self.state = 1347
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,119,self._ctx)
            if la_ == 1:
                self.state = 1346
                self.match(CSharpParser.ASYNC)


            self.state = 1350
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==95:
                self.state = 1349
                self.match(CSharpParser.STATIC)


            self.state = 1352
            self.anonymous_function_signature()
            self.state = 1353
            self.right_arrow()
            self.state = 1354
            self.anonymous_function_body()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Anonymous_function_signatureContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PARENS(self):
            return self.getToken(CSharpParser.OPEN_PARENS, 0)

        def CLOSE_PARENS(self):
            return self.getToken(CSharpParser.CLOSE_PARENS, 0)

        def explicit_anonymous_function_parameter_list(self):
            return self.getTypedRuleContext(CSharpParser.Explicit_anonymous_function_parameter_listContext,0)


        def implicit_anonymous_function_parameter_list(self):
            return self.getTypedRuleContext(CSharpParser.Implicit_anonymous_function_parameter_listContext,0)


        def identifier(self):
            return self.getTypedRuleContext(CSharpParser.IdentifierContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_anonymous_function_signature

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnonymous_function_signature" ):
                listener.enterAnonymous_function_signature(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnonymous_function_signature" ):
                listener.exitAnonymous_function_signature(self)




    def anonymous_function_signature(self):

        localctx = CSharpParser.Anonymous_function_signatureContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_anonymous_function_signature)
        try:
            self.state = 1367
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,121,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1356
                self.match(CSharpParser.OPEN_PARENS)
                self.state = 1357
                self.match(CSharpParser.CLOSE_PARENS)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1358
                self.match(CSharpParser.OPEN_PARENS)
                self.state = 1359
                self.explicit_anonymous_function_parameter_list()
                self.state = 1360
                self.match(CSharpParser.CLOSE_PARENS)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1362
                self.match(CSharpParser.OPEN_PARENS)
                self.state = 1363
                self.implicit_anonymous_function_parameter_list()
                self.state = 1364
                self.match(CSharpParser.CLOSE_PARENS)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1366
                self.identifier()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Explicit_anonymous_function_parameter_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def explicit_anonymous_function_parameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Explicit_anonymous_function_parameterContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Explicit_anonymous_function_parameterContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.COMMA)
            else:
                return self.getToken(CSharpParser.COMMA, i)

        def getRuleIndex(self):
            return CSharpParser.RULE_explicit_anonymous_function_parameter_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExplicit_anonymous_function_parameter_list" ):
                listener.enterExplicit_anonymous_function_parameter_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExplicit_anonymous_function_parameter_list" ):
                listener.exitExplicit_anonymous_function_parameter_list(self)




    def explicit_anonymous_function_parameter_list(self):

        localctx = CSharpParser.Explicit_anonymous_function_parameter_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_explicit_anonymous_function_parameter_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1369
            self.explicit_anonymous_function_parameter()
            self.state = 1374
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==138:
                self.state = 1370
                self.match(CSharpParser.COMMA)
                self.state = 1371
                self.explicit_anonymous_function_parameter()
                self.state = 1376
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Explicit_anonymous_function_parameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.refout = None # Token

        def type_(self):
            return self.getTypedRuleContext(CSharpParser.Type_Context,0)


        def identifier(self):
            return self.getTypedRuleContext(CSharpParser.IdentifierContext,0)


        def REF(self):
            return self.getToken(CSharpParser.REF, 0)

        def OUT(self):
            return self.getToken(CSharpParser.OUT, 0)

        def IN(self):
            return self.getToken(CSharpParser.IN, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_explicit_anonymous_function_parameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExplicit_anonymous_function_parameter" ):
                listener.enterExplicit_anonymous_function_parameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExplicit_anonymous_function_parameter" ):
                listener.exitExplicit_anonymous_function_parameter(self)




    def explicit_anonymous_function_parameter(self):

        localctx = CSharpParser.Explicit_anonymous_function_parameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_explicit_anonymous_function_parameter)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1378
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 56)) & ~0x3f) == 0 and ((1 << (_la - 56)) & 538968065) != 0):
                self.state = 1377
                localctx.refout = self._input.LT(1)
                _la = self._input.LA(1)
                if not(((((_la - 56)) & ~0x3f) == 0 and ((1 << (_la - 56)) & 538968065) != 0)):
                    localctx.refout = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 1380
            self.type_()
            self.state = 1381
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Implicit_anonymous_function_parameter_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(CSharpParser.IdentifierContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.COMMA)
            else:
                return self.getToken(CSharpParser.COMMA, i)

        def getRuleIndex(self):
            return CSharpParser.RULE_implicit_anonymous_function_parameter_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImplicit_anonymous_function_parameter_list" ):
                listener.enterImplicit_anonymous_function_parameter_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImplicit_anonymous_function_parameter_list" ):
                listener.exitImplicit_anonymous_function_parameter_list(self)




    def implicit_anonymous_function_parameter_list(self):

        localctx = CSharpParser.Implicit_anonymous_function_parameter_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_implicit_anonymous_function_parameter_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1383
            self.identifier()
            self.state = 1388
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==138:
                self.state = 1384
                self.match(CSharpParser.COMMA)
                self.state = 1385
                self.identifier()
                self.state = 1390
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Anonymous_function_bodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def throwable_expression(self):
            return self.getTypedRuleContext(CSharpParser.Throwable_expressionContext,0)


        def block(self):
            return self.getTypedRuleContext(CSharpParser.BlockContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_anonymous_function_body

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnonymous_function_body" ):
                listener.enterAnonymous_function_body(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnonymous_function_body" ):
                listener.exitAnonymous_function_body(self)




    def anonymous_function_body(self):

        localctx = CSharpParser.Anonymous_function_bodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_anonymous_function_body)
        try:
            self.state = 1393
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [10, 12, 13, 15, 16, 17, 18, 19, 21, 22, 25, 26, 30, 31, 32, 33, 35, 36, 39, 43, 46, 49, 50, 53, 57, 61, 63, 64, 66, 67, 69, 71, 72, 73, 76, 80, 85, 86, 88, 90, 91, 92, 93, 94, 95, 96, 99, 100, 101, 103, 104, 105, 106, 107, 109, 111, 115, 116, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 133, 135, 141, 142, 143, 146, 148, 149, 150, 157, 158, 177]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1391
                self.throwable_expression()
                pass
            elif token in [131]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1392
                self.block()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Query_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def from_clause(self):
            return self.getTypedRuleContext(CSharpParser.From_clauseContext,0)


        def query_body(self):
            return self.getTypedRuleContext(CSharpParser.Query_bodyContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_query_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuery_expression" ):
                listener.enterQuery_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuery_expression" ):
                listener.exitQuery_expression(self)




    def query_expression(self):

        localctx = CSharpParser.Query_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_query_expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1395
            self.from_clause()
            self.state = 1396
            self.query_body()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class From_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FROM(self):
            return self.getToken(CSharpParser.FROM, 0)

        def identifier(self):
            return self.getTypedRuleContext(CSharpParser.IdentifierContext,0)


        def IN(self):
            return self.getToken(CSharpParser.IN, 0)

        def expression(self):
            return self.getTypedRuleContext(CSharpParser.ExpressionContext,0)


        def type_(self):
            return self.getTypedRuleContext(CSharpParser.Type_Context,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_from_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFrom_clause" ):
                listener.enterFrom_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFrom_clause" ):
                listener.exitFrom_clause(self)




    def from_clause(self):

        localctx = CSharpParser.From_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_from_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1398
            self.match(CSharpParser.FROM)
            self.state = 1400
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,126,self._ctx)
            if la_ == 1:
                self.state = 1399
                self.type_()


            self.state = 1402
            self.identifier()
            self.state = 1403
            self.match(CSharpParser.IN)
            self.state = 1404
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Query_bodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def select_or_group_clause(self):
            return self.getTypedRuleContext(CSharpParser.Select_or_group_clauseContext,0)


        def query_body_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Query_body_clauseContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Query_body_clauseContext,i)


        def query_continuation(self):
            return self.getTypedRuleContext(CSharpParser.Query_continuationContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_query_body

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuery_body" ):
                listener.enterQuery_body(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuery_body" ):
                listener.exitQuery_body(self)




    def query_body(self):

        localctx = CSharpParser.Query_bodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_query_body)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1409
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==49 or _la==63 or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 4503599627374593) != 0):
                self.state = 1406
                self.query_body_clause()
                self.state = 1411
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1412
            self.select_or_group_clause()
            self.state = 1414
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,128,self._ctx)
            if la_ == 1:
                self.state = 1413
                self.query_continuation()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Query_body_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def from_clause(self):
            return self.getTypedRuleContext(CSharpParser.From_clauseContext,0)


        def let_clause(self):
            return self.getTypedRuleContext(CSharpParser.Let_clauseContext,0)


        def where_clause(self):
            return self.getTypedRuleContext(CSharpParser.Where_clauseContext,0)


        def combined_join_clause(self):
            return self.getTypedRuleContext(CSharpParser.Combined_join_clauseContext,0)


        def orderby_clause(self):
            return self.getTypedRuleContext(CSharpParser.Orderby_clauseContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_query_body_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuery_body_clause" ):
                listener.enterQuery_body_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuery_body_clause" ):
                listener.exitQuery_body_clause(self)




    def query_body_clause(self):

        localctx = CSharpParser.Query_body_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_query_body_clause)
        try:
            self.state = 1421
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [49]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1416
                self.from_clause()
                pass
            elif token in [64]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1417
                self.let_clause()
                pass
            elif token in [116]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1418
                self.where_clause()
                pass
            elif token in [63]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1419
                self.combined_join_clause()
                pass
            elif token in [76]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1420
                self.orderby_clause()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Let_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LET(self):
            return self.getToken(CSharpParser.LET, 0)

        def identifier(self):
            return self.getTypedRuleContext(CSharpParser.IdentifierContext,0)


        def ASSIGNMENT(self):
            return self.getToken(CSharpParser.ASSIGNMENT, 0)

        def expression(self):
            return self.getTypedRuleContext(CSharpParser.ExpressionContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_let_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLet_clause" ):
                listener.enterLet_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLet_clause" ):
                listener.exitLet_clause(self)




    def let_clause(self):

        localctx = CSharpParser.Let_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_let_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1423
            self.match(CSharpParser.LET)
            self.state = 1424
            self.identifier()
            self.state = 1425
            self.match(CSharpParser.ASSIGNMENT)
            self.state = 1426
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Where_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHERE(self):
            return self.getToken(CSharpParser.WHERE, 0)

        def expression(self):
            return self.getTypedRuleContext(CSharpParser.ExpressionContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_where_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhere_clause" ):
                listener.enterWhere_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhere_clause" ):
                listener.exitWhere_clause(self)




    def where_clause(self):

        localctx = CSharpParser.Where_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_where_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1428
            self.match(CSharpParser.WHERE)
            self.state = 1429
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Combined_join_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def JOIN(self):
            return self.getToken(CSharpParser.JOIN, 0)

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(CSharpParser.IdentifierContext,i)


        def IN(self):
            return self.getToken(CSharpParser.IN, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(CSharpParser.ExpressionContext,i)


        def ON(self):
            return self.getToken(CSharpParser.ON, 0)

        def EQUALS(self):
            return self.getToken(CSharpParser.EQUALS, 0)

        def type_(self):
            return self.getTypedRuleContext(CSharpParser.Type_Context,0)


        def INTO(self):
            return self.getToken(CSharpParser.INTO, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_combined_join_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCombined_join_clause" ):
                listener.enterCombined_join_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCombined_join_clause" ):
                listener.exitCombined_join_clause(self)




    def combined_join_clause(self):

        localctx = CSharpParser.Combined_join_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_combined_join_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1431
            self.match(CSharpParser.JOIN)
            self.state = 1433
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,130,self._ctx)
            if la_ == 1:
                self.state = 1432
                self.type_()


            self.state = 1435
            self.identifier()
            self.state = 1436
            self.match(CSharpParser.IN)
            self.state = 1437
            self.expression()
            self.state = 1438
            self.match(CSharpParser.ON)
            self.state = 1439
            self.expression()
            self.state = 1440
            self.match(CSharpParser.EQUALS)
            self.state = 1441
            self.expression()
            self.state = 1444
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==61:
                self.state = 1442
                self.match(CSharpParser.INTO)
                self.state = 1443
                self.identifier()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Orderby_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ORDERBY(self):
            return self.getToken(CSharpParser.ORDERBY, 0)

        def ordering(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.OrderingContext)
            else:
                return self.getTypedRuleContext(CSharpParser.OrderingContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.COMMA)
            else:
                return self.getToken(CSharpParser.COMMA, i)

        def getRuleIndex(self):
            return CSharpParser.RULE_orderby_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOrderby_clause" ):
                listener.enterOrderby_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOrderby_clause" ):
                listener.exitOrderby_clause(self)




    def orderby_clause(self):

        localctx = CSharpParser.Orderby_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_orderby_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1446
            self.match(CSharpParser.ORDERBY)
            self.state = 1447
            self.ordering()
            self.state = 1452
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==138:
                self.state = 1448
                self.match(CSharpParser.COMMA)
                self.state = 1449
                self.ordering()
                self.state = 1454
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OrderingContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.dir_ = None # Token

        def expression(self):
            return self.getTypedRuleContext(CSharpParser.ExpressionContext,0)


        def ASCENDING(self):
            return self.getToken(CSharpParser.ASCENDING, 0)

        def DESCENDING(self):
            return self.getToken(CSharpParser.DESCENDING, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_ordering

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOrdering" ):
                listener.enterOrdering(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOrdering" ):
                listener.exitOrdering(self)




    def ordering(self):

        localctx = CSharpParser.OrderingContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_ordering)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1455
            self.expression()
            self.state = 1457
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==15 or _la==33:
                self.state = 1456
                localctx.dir_ = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==15 or _la==33):
                    localctx.dir_ = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Select_or_group_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SELECT(self):
            return self.getToken(CSharpParser.SELECT, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(CSharpParser.ExpressionContext,i)


        def GROUP(self):
            return self.getToken(CSharpParser.GROUP, 0)

        def BY(self):
            return self.getToken(CSharpParser.BY, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_select_or_group_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelect_or_group_clause" ):
                listener.enterSelect_or_group_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelect_or_group_clause" ):
                listener.exitSelect_or_group_clause(self)




    def select_or_group_clause(self):

        localctx = CSharpParser.Select_or_group_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_select_or_group_clause)
        try:
            self.state = 1466
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [90]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1459
                self.match(CSharpParser.SELECT)
                self.state = 1460
                self.expression()
                pass
            elif token in [53]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1461
                self.match(CSharpParser.GROUP)
                self.state = 1462
                self.expression()
                self.state = 1463
                self.match(CSharpParser.BY)
                self.state = 1464
                self.expression()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Query_continuationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INTO(self):
            return self.getToken(CSharpParser.INTO, 0)

        def identifier(self):
            return self.getTypedRuleContext(CSharpParser.IdentifierContext,0)


        def query_body(self):
            return self.getTypedRuleContext(CSharpParser.Query_bodyContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_query_continuation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuery_continuation" ):
                listener.enterQuery_continuation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuery_continuation" ):
                listener.exitQuery_continuation(self)




    def query_continuation(self):

        localctx = CSharpParser.Query_continuationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_query_continuation)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1468
            self.match(CSharpParser.INTO)
            self.state = 1469
            self.identifier()
            self.state = 1470
            self.query_body()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def labeled_Statement(self):
            return self.getTypedRuleContext(CSharpParser.Labeled_StatementContext,0)


        def declarationStatement(self):
            return self.getTypedRuleContext(CSharpParser.DeclarationStatementContext,0)


        def embedded_statement(self):
            return self.getTypedRuleContext(CSharpParser.Embedded_statementContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatement" ):
                listener.enterStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatement" ):
                listener.exitStatement(self)




    def statement(self):

        localctx = CSharpParser.StatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 182, self.RULE_statement)
        try:
            self.state = 1475
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,135,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1472
                self.labeled_Statement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1473
                self.declarationStatement()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1474
                self.embedded_statement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeclarationStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def local_variable_declaration(self):
            return self.getTypedRuleContext(CSharpParser.Local_variable_declarationContext,0)


        def SEMICOLON(self):
            return self.getToken(CSharpParser.SEMICOLON, 0)

        def local_constant_declaration(self):
            return self.getTypedRuleContext(CSharpParser.Local_constant_declarationContext,0)


        def local_function_declaration(self):
            return self.getTypedRuleContext(CSharpParser.Local_function_declarationContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_declarationStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclarationStatement" ):
                listener.enterDeclarationStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclarationStatement" ):
                listener.exitDeclarationStatement(self)




    def declarationStatement(self):

        localctx = CSharpParser.DeclarationStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 184, self.RULE_declarationStatement)
        try:
            self.state = 1484
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,136,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1477
                self.local_variable_declaration()
                self.state = 1478
                self.match(CSharpParser.SEMICOLON)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1480
                self.local_constant_declaration()
                self.state = 1481
                self.match(CSharpParser.SEMICOLON)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1483
                self.local_function_declaration()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Local_function_declarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def local_function_header(self):
            return self.getTypedRuleContext(CSharpParser.Local_function_headerContext,0)


        def local_function_body(self):
            return self.getTypedRuleContext(CSharpParser.Local_function_bodyContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_local_function_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLocal_function_declaration" ):
                listener.enterLocal_function_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLocal_function_declaration" ):
                listener.exitLocal_function_declaration(self)




    def local_function_declaration(self):

        localctx = CSharpParser.Local_function_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 186, self.RULE_local_function_declaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1486
            self.local_function_header()
            self.state = 1487
            self.local_function_body()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Local_function_headerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def return_type(self):
            return self.getTypedRuleContext(CSharpParser.Return_typeContext,0)


        def identifier(self):
            return self.getTypedRuleContext(CSharpParser.IdentifierContext,0)


        def OPEN_PARENS(self):
            return self.getToken(CSharpParser.OPEN_PARENS, 0)

        def CLOSE_PARENS(self):
            return self.getToken(CSharpParser.CLOSE_PARENS, 0)

        def local_function_modifiers(self):
            return self.getTypedRuleContext(CSharpParser.Local_function_modifiersContext,0)


        def type_parameter_list(self):
            return self.getTypedRuleContext(CSharpParser.Type_parameter_listContext,0)


        def formal_parameter_list(self):
            return self.getTypedRuleContext(CSharpParser.Formal_parameter_listContext,0)


        def type_parameter_constraints_clauses(self):
            return self.getTypedRuleContext(CSharpParser.Type_parameter_constraints_clausesContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_local_function_header

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLocal_function_header" ):
                listener.enterLocal_function_header(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLocal_function_header" ):
                listener.exitLocal_function_header(self)




    def local_function_header(self):

        localctx = CSharpParser.Local_function_headerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 188, self.RULE_local_function_header)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1490
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,137,self._ctx)
            if la_ == 1:
                self.state = 1489
                self.local_function_modifiers()


            self.state = 1492
            self.return_type()
            self.state = 1493
            self.identifier()
            self.state = 1495
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==152:
                self.state = 1494
                self.type_parameter_list()


            self.state = 1497
            self.match(CSharpParser.OPEN_PARENS)
            self.state = 1499
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 10)) & ~0x3f) == 0 and ((1 << (_la - 10)) & -4366018217772016915) != 0) or ((((_la - 76)) & ~0x3f) == 0 and ((1 << (_la - 76)) & 720599763230250523) != 0):
                self.state = 1498
                self.formal_parameter_list()


            self.state = 1501
            self.match(CSharpParser.CLOSE_PARENS)
            self.state = 1503
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==116:
                self.state = 1502
                self.type_parameter_constraints_clauses()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Local_function_modifiersContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ASYNC(self):
            return self.getToken(CSharpParser.ASYNC, 0)

        def UNSAFE(self):
            return self.getToken(CSharpParser.UNSAFE, 0)

        def STATIC(self):
            return self.getToken(CSharpParser.STATIC, 0)

        def STRUCT(self):
            return self.getToken(CSharpParser.STRUCT, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_local_function_modifiers

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLocal_function_modifiers" ):
                listener.enterLocal_function_modifiers(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLocal_function_modifiers" ):
                listener.exitLocal_function_modifiers(self)




    def local_function_modifiers(self):

        localctx = CSharpParser.Local_function_modifiersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 190, self.RULE_local_function_modifiers)
        self._la = 0 # Token type
        try:
            self.state = 1515
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,143,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1505
                _la = self._input.LA(1)
                if not(_la==16 or _la==108):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1507
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==95:
                    self.state = 1506
                    self.match(CSharpParser.STATIC)


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1509
                self.match(CSharpParser.STATIC)
                self.state = 1511
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,142,self._ctx)
                if la_ == 1:
                    self.state = 1510
                    _la = self._input.LA(1)
                    if not(_la==16 or _la==108):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1513
                self.match(CSharpParser.UNSAFE)
                self.state = 1514
                self.match(CSharpParser.STRUCT)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Local_function_bodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def block(self):
            return self.getTypedRuleContext(CSharpParser.BlockContext,0)


        def right_arrow(self):
            return self.getTypedRuleContext(CSharpParser.Right_arrowContext,0)


        def throwable_expression(self):
            return self.getTypedRuleContext(CSharpParser.Throwable_expressionContext,0)


        def SEMICOLON(self):
            return self.getToken(CSharpParser.SEMICOLON, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_local_function_body

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLocal_function_body" ):
                listener.enterLocal_function_body(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLocal_function_body" ):
                listener.exitLocal_function_body(self)




    def local_function_body(self):

        localctx = CSharpParser.Local_function_bodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 192, self.RULE_local_function_body)
        try:
            self.state = 1522
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [131]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1517
                self.block()
                pass
            elif token in [151]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1518
                self.right_arrow()
                self.state = 1519
                self.throwable_expression()
                self.state = 1520
                self.match(CSharpParser.SEMICOLON)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Labeled_StatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(CSharpParser.IdentifierContext,0)


        def COLON(self):
            return self.getToken(CSharpParser.COLON, 0)

        def statement(self):
            return self.getTypedRuleContext(CSharpParser.StatementContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_labeled_Statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLabeled_Statement" ):
                listener.enterLabeled_Statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLabeled_Statement" ):
                listener.exitLabeled_Statement(self)




    def labeled_Statement(self):

        localctx = CSharpParser.Labeled_StatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 194, self.RULE_labeled_Statement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1524
            self.identifier()
            self.state = 1525
            self.match(CSharpParser.COLON)
            self.state = 1526
            self.statement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Embedded_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def block(self):
            return self.getTypedRuleContext(CSharpParser.BlockContext,0)


        def empty_statement(self):
            return self.getTypedRuleContext(CSharpParser.Empty_statementContext,0)


        def expression(self):
            return self.getTypedRuleContext(CSharpParser.ExpressionContext,0)


        def SEMICOLON(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.SEMICOLON)
            else:
                return self.getToken(CSharpParser.SEMICOLON, i)

        def if_statement(self):
            return self.getTypedRuleContext(CSharpParser.If_statementContext,0)


        def SWITCH(self):
            return self.getToken(CSharpParser.SWITCH, 0)

        def OPEN_PARENS(self):
            return self.getToken(CSharpParser.OPEN_PARENS, 0)

        def CLOSE_PARENS(self):
            return self.getToken(CSharpParser.CLOSE_PARENS, 0)

        def OPEN_BRACE(self):
            return self.getToken(CSharpParser.OPEN_BRACE, 0)

        def CLOSE_BRACE(self):
            return self.getToken(CSharpParser.CLOSE_BRACE, 0)

        def switch_section(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Switch_sectionContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Switch_sectionContext,i)


        def WHILE(self):
            return self.getToken(CSharpParser.WHILE, 0)

        def embedded_statement(self):
            return self.getTypedRuleContext(CSharpParser.Embedded_statementContext,0)


        def DO(self):
            return self.getToken(CSharpParser.DO, 0)

        def FOR(self):
            return self.getToken(CSharpParser.FOR, 0)

        def for_initializer(self):
            return self.getTypedRuleContext(CSharpParser.For_initializerContext,0)


        def for_iterator(self):
            return self.getTypedRuleContext(CSharpParser.For_iteratorContext,0)


        def FOREACH(self):
            return self.getToken(CSharpParser.FOREACH, 0)

        def local_variable_type(self):
            return self.getTypedRuleContext(CSharpParser.Local_variable_typeContext,0)


        def IN(self):
            return self.getToken(CSharpParser.IN, 0)

        def identifier(self):
            return self.getTypedRuleContext(CSharpParser.IdentifierContext,0)


        def deconstruction_element(self):
            return self.getTypedRuleContext(CSharpParser.Deconstruction_elementContext,0)


        def AWAIT(self):
            return self.getToken(CSharpParser.AWAIT, 0)

        def BREAK(self):
            return self.getToken(CSharpParser.BREAK, 0)

        def CONTINUE(self):
            return self.getToken(CSharpParser.CONTINUE, 0)

        def GOTO(self):
            return self.getToken(CSharpParser.GOTO, 0)

        def CASE(self):
            return self.getToken(CSharpParser.CASE, 0)

        def DEFAULT(self):
            return self.getToken(CSharpParser.DEFAULT, 0)

        def RETURN(self):
            return self.getToken(CSharpParser.RETURN, 0)

        def THROW(self):
            return self.getToken(CSharpParser.THROW, 0)

        def try_statement(self):
            return self.getTypedRuleContext(CSharpParser.Try_statementContext,0)


        def checked_statement(self):
            return self.getTypedRuleContext(CSharpParser.Checked_statementContext,0)


        def unchecked_statement(self):
            return self.getTypedRuleContext(CSharpParser.Unchecked_statementContext,0)


        def lock_statement(self):
            return self.getTypedRuleContext(CSharpParser.Lock_statementContext,0)


        def using_statement(self):
            return self.getTypedRuleContext(CSharpParser.Using_statementContext,0)


        def yield_statement(self):
            return self.getTypedRuleContext(CSharpParser.Yield_statementContext,0)


        def unsafe_statement(self):
            return self.getTypedRuleContext(CSharpParser.Unsafe_statementContext,0)


        def fixed_statement(self):
            return self.getTypedRuleContext(CSharpParser.Fixed_statementContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_embedded_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEmbedded_statement" ):
                listener.enterEmbedded_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEmbedded_statement" ):
                listener.exitEmbedded_statement(self)




    def embedded_statement(self):

        localctx = CSharpParser.Embedded_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 196, self.RULE_embedded_statement)
        self._la = 0 # Token type
        try:
            self.state = 1621
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,154,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1528
                self.block()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1529
                self.empty_statement()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1530
                self.expression()
                self.state = 1531
                self.match(CSharpParser.SEMICOLON)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1533
                self.if_statement()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1534
                self.match(CSharpParser.SWITCH)
                self.state = 1535
                self.match(CSharpParser.OPEN_PARENS)
                self.state = 1536
                self.expression()
                self.state = 1537
                self.match(CSharpParser.CLOSE_PARENS)
                self.state = 1538
                self.match(CSharpParser.OPEN_BRACE)
                self.state = 1542
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==23 or _la==31:
                    self.state = 1539
                    self.switch_section()
                    self.state = 1544
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1545
                self.match(CSharpParser.CLOSE_BRACE)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1547
                self.match(CSharpParser.WHILE)
                self.state = 1548
                self.match(CSharpParser.OPEN_PARENS)
                self.state = 1549
                self.expression()
                self.state = 1550
                self.match(CSharpParser.CLOSE_PARENS)
                self.state = 1551
                self.embedded_statement()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1553
                self.match(CSharpParser.DO)
                self.state = 1554
                self.embedded_statement()
                self.state = 1555
                self.match(CSharpParser.WHILE)
                self.state = 1556
                self.match(CSharpParser.OPEN_PARENS)
                self.state = 1557
                self.expression()
                self.state = 1558
                self.match(CSharpParser.CLOSE_PARENS)
                self.state = 1559
                self.match(CSharpParser.SEMICOLON)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 1561
                self.match(CSharpParser.FOR)
                self.state = 1562
                self.match(CSharpParser.OPEN_PARENS)
                self.state = 1564
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -6762602772191792128) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -46443740568415315) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & 562951571693735) != 0):
                    self.state = 1563
                    self.for_initializer()


                self.state = 1566
                self.match(CSharpParser.SEMICOLON)
                self.state = 1568
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -6762637956563880960) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -47094651452058707) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & 562951571693735) != 0):
                    self.state = 1567
                    self.expression()


                self.state = 1570
                self.match(CSharpParser.SEMICOLON)
                self.state = 1572
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -6762637956563880960) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -47094651452058707) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & 562951571693735) != 0):
                    self.state = 1571
                    self.for_iterator()


                self.state = 1574
                self.match(CSharpParser.CLOSE_PARENS)
                self.state = 1575
                self.embedded_statement()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 1577
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==17:
                    self.state = 1576
                    self.match(CSharpParser.AWAIT)


                self.state = 1579
                self.match(CSharpParser.FOREACH)
                self.state = 1580
                self.match(CSharpParser.OPEN_PARENS)
                self.state = 1581
                self.local_variable_type()
                self.state = 1584
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,150,self._ctx)
                if la_ == 1:
                    self.state = 1582
                    self.identifier()
                    pass

                elif la_ == 2:
                    self.state = 1583
                    self.deconstruction_element()
                    pass


                self.state = 1586
                self.match(CSharpParser.IN)
                self.state = 1587
                self.expression()
                self.state = 1588
                self.match(CSharpParser.CLOSE_PARENS)
                self.state = 1589
                self.embedded_statement()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 1591
                self.match(CSharpParser.BREAK)
                self.state = 1592
                self.match(CSharpParser.SEMICOLON)
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 1593
                self.match(CSharpParser.CONTINUE)
                self.state = 1594
                self.match(CSharpParser.SEMICOLON)
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 1595
                self.match(CSharpParser.GOTO)
                self.state = 1600
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [10, 12, 13, 15, 16, 17, 21, 33, 36, 39, 49, 50, 53, 61, 63, 64, 67, 73, 76, 80, 86, 90, 91, 107, 111, 115, 116, 118, 120]:
                    self.state = 1596
                    self.identifier()
                    pass
                elif token in [23]:
                    self.state = 1597
                    self.match(CSharpParser.CASE)
                    self.state = 1598
                    self.expression()
                    pass
                elif token in [31]:
                    self.state = 1599
                    self.match(CSharpParser.DEFAULT)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1602
                self.match(CSharpParser.SEMICOLON)
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 1603
                self.match(CSharpParser.RETURN)
                self.state = 1605
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -6762637956563880960) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -47094651452058707) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & 562951571693735) != 0):
                    self.state = 1604
                    self.expression()


                self.state = 1607
                self.match(CSharpParser.SEMICOLON)
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 1608
                self.match(CSharpParser.THROW)
                self.state = 1610
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -6762637956563880960) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -47094651452058707) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & 562951571693735) != 0):
                    self.state = 1609
                    self.expression()


                self.state = 1612
                self.match(CSharpParser.SEMICOLON)
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 1613
                self.try_statement()
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 1614
                self.checked_statement()
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 1615
                self.unchecked_statement()
                pass

            elif la_ == 18:
                self.enterOuterAlt(localctx, 18)
                self.state = 1616
                self.lock_statement()
                pass

            elif la_ == 19:
                self.enterOuterAlt(localctx, 19)
                self.state = 1617
                self.using_statement()
                pass

            elif la_ == 20:
                self.enterOuterAlt(localctx, 20)
                self.state = 1618
                self.yield_statement()
                pass

            elif la_ == 21:
                self.enterOuterAlt(localctx, 21)
                self.state = 1619
                self.unsafe_statement()
                pass

            elif la_ == 22:
                self.enterOuterAlt(localctx, 22)
                self.state = 1620
                self.fixed_statement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Empty_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SEMICOLON(self):
            return self.getToken(CSharpParser.SEMICOLON, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_empty_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEmpty_statement" ):
                listener.enterEmpty_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEmpty_statement" ):
                listener.exitEmpty_statement(self)




    def empty_statement(self):

        localctx = CSharpParser.Empty_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 198, self.RULE_empty_statement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1623
            self.match(CSharpParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class If_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IF(self):
            return self.getToken(CSharpParser.IF, 0)

        def OPEN_PARENS(self):
            return self.getToken(CSharpParser.OPEN_PARENS, 0)

        def expression(self):
            return self.getTypedRuleContext(CSharpParser.ExpressionContext,0)


        def CLOSE_PARENS(self):
            return self.getToken(CSharpParser.CLOSE_PARENS, 0)

        def embedded_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Embedded_statementContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Embedded_statementContext,i)


        def ELSE(self):
            return self.getToken(CSharpParser.ELSE, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_if_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIf_statement" ):
                listener.enterIf_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIf_statement" ):
                listener.exitIf_statement(self)




    def if_statement(self):

        localctx = CSharpParser.If_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 200, self.RULE_if_statement)
        try:
            self.state = 1639
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,155,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1625
                self.match(CSharpParser.IF)
                self.state = 1626
                self.match(CSharpParser.OPEN_PARENS)
                self.state = 1627
                self.expression()
                self.state = 1628
                self.match(CSharpParser.CLOSE_PARENS)
                self.state = 1629
                self.embedded_statement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1631
                self.match(CSharpParser.IF)
                self.state = 1632
                self.match(CSharpParser.OPEN_PARENS)
                self.state = 1633
                self.expression()
                self.state = 1634
                self.match(CSharpParser.CLOSE_PARENS)
                self.state = 1635
                self.embedded_statement()
                self.state = 1636
                self.match(CSharpParser.ELSE)
                self.state = 1637
                self.embedded_statement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Checked_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CHECKED(self):
            return self.getToken(CSharpParser.CHECKED, 0)

        def block(self):
            return self.getTypedRuleContext(CSharpParser.BlockContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_checked_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterChecked_statement" ):
                listener.enterChecked_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitChecked_statement" ):
                listener.exitChecked_statement(self)




    def checked_statement(self):

        localctx = CSharpParser.Checked_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 202, self.RULE_checked_statement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1641
            self.match(CSharpParser.CHECKED)
            self.state = 1642
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Unchecked_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UNCHECKED(self):
            return self.getToken(CSharpParser.UNCHECKED, 0)

        def block(self):
            return self.getTypedRuleContext(CSharpParser.BlockContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_unchecked_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnchecked_statement" ):
                listener.enterUnchecked_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnchecked_statement" ):
                listener.exitUnchecked_statement(self)




    def unchecked_statement(self):

        localctx = CSharpParser.Unchecked_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 204, self.RULE_unchecked_statement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1644
            self.match(CSharpParser.UNCHECKED)
            self.state = 1645
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Lock_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LOCK(self):
            return self.getToken(CSharpParser.LOCK, 0)

        def OPEN_PARENS(self):
            return self.getToken(CSharpParser.OPEN_PARENS, 0)

        def expression(self):
            return self.getTypedRuleContext(CSharpParser.ExpressionContext,0)


        def CLOSE_PARENS(self):
            return self.getToken(CSharpParser.CLOSE_PARENS, 0)

        def embedded_statement(self):
            return self.getTypedRuleContext(CSharpParser.Embedded_statementContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_lock_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLock_statement" ):
                listener.enterLock_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLock_statement" ):
                listener.exitLock_statement(self)




    def lock_statement(self):

        localctx = CSharpParser.Lock_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 206, self.RULE_lock_statement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1647
            self.match(CSharpParser.LOCK)
            self.state = 1648
            self.match(CSharpParser.OPEN_PARENS)
            self.state = 1649
            self.expression()
            self.state = 1650
            self.match(CSharpParser.CLOSE_PARENS)
            self.state = 1651
            self.embedded_statement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Unmanaged_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def type_(self):
            return self.getTypedRuleContext(CSharpParser.Type_Context,0)


        def pointer_type(self):
            return self.getTypedRuleContext(CSharpParser.Pointer_typeContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_unmanaged_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnmanaged_type" ):
                listener.enterUnmanaged_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnmanaged_type" ):
                listener.exitUnmanaged_type(self)




    def unmanaged_type(self):

        localctx = CSharpParser.Unmanaged_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 208, self.RULE_unmanaged_type)
        try:
            self.state = 1655
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,156,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1653
                self.type_()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1654
                self.pointer_type()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Stackalloc_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STACKALLOC(self):
            return self.getToken(CSharpParser.STACKALLOC, 0)

        def type_(self):
            return self.getTypedRuleContext(CSharpParser.Type_Context,0)


        def OPEN_BRACKET(self):
            return self.getToken(CSharpParser.OPEN_BRACKET, 0)

        def expression(self):
            return self.getTypedRuleContext(CSharpParser.ExpressionContext,0)


        def CLOSE_BRACKET(self):
            return self.getToken(CSharpParser.CLOSE_BRACKET, 0)

        def stackalloc_initializer(self):
            return self.getTypedRuleContext(CSharpParser.Stackalloc_initializerContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_stackalloc_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStackalloc_expression" ):
                listener.enterStackalloc_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStackalloc_expression" ):
                listener.exitStackalloc_expression(self)




    def stackalloc_expression(self):

        localctx = CSharpParser.Stackalloc_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 210, self.RULE_stackalloc_expression)
        self._la = 0 # Token type
        try:
            self.state = 1673
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,159,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1657
                self.match(CSharpParser.STACKALLOC)
                self.state = 1658
                self.type_()
                self.state = 1659
                self.match(CSharpParser.OPEN_BRACKET)
                self.state = 1660
                self.expression()
                self.state = 1661
                self.match(CSharpParser.CLOSE_BRACKET)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1663
                self.match(CSharpParser.STACKALLOC)
                self.state = 1665
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 10)) & ~0x3f) == 0 and ((1 << (_la - 10)) & -4366088586516194579) != 0) or ((((_la - 76)) & ~0x3f) == 0 and ((1 << (_la - 76)) & 576484575146005521) != 0):
                    self.state = 1664
                    self.type_()


                self.state = 1667
                self.match(CSharpParser.OPEN_BRACKET)
                self.state = 1669
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -6762637956563880960) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -47094651452058707) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & 562951571693735) != 0):
                    self.state = 1668
                    self.expression()


                self.state = 1671
                self.match(CSharpParser.CLOSE_BRACKET)
                self.state = 1672
                self.stackalloc_initializer()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Stackalloc_initializerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_BRACE(self):
            return self.getToken(CSharpParser.OPEN_BRACE, 0)

        def stackalloc_initializer_element_list(self):
            return self.getTypedRuleContext(CSharpParser.Stackalloc_initializer_element_listContext,0)


        def CLOSE_BRACE(self):
            return self.getToken(CSharpParser.CLOSE_BRACE, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_stackalloc_initializer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStackalloc_initializer" ):
                listener.enterStackalloc_initializer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStackalloc_initializer" ):
                listener.exitStackalloc_initializer(self)




    def stackalloc_initializer(self):

        localctx = CSharpParser.Stackalloc_initializerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 212, self.RULE_stackalloc_initializer)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1675
            self.match(CSharpParser.OPEN_BRACE)
            self.state = 1676
            self.stackalloc_initializer_element_list()
            self.state = 1677
            self.match(CSharpParser.CLOSE_BRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Stackalloc_initializer_element_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def stackalloc_element_initializer(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Stackalloc_element_initializerContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Stackalloc_element_initializerContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.COMMA)
            else:
                return self.getToken(CSharpParser.COMMA, i)

        def getRuleIndex(self):
            return CSharpParser.RULE_stackalloc_initializer_element_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStackalloc_initializer_element_list" ):
                listener.enterStackalloc_initializer_element_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStackalloc_initializer_element_list" ):
                listener.exitStackalloc_initializer_element_list(self)




    def stackalloc_initializer_element_list(self):

        localctx = CSharpParser.Stackalloc_initializer_element_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 214, self.RULE_stackalloc_initializer_element_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1679
            self.stackalloc_element_initializer()
            self.state = 1684
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,160,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1680
                    self.match(CSharpParser.COMMA)
                    self.state = 1681
                    self.stackalloc_element_initializer() 
                self.state = 1686
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,160,self._ctx)

            self.state = 1688
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==138:
                self.state = 1687
                self.match(CSharpParser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Stackalloc_element_initializerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(CSharpParser.ExpressionContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_stackalloc_element_initializer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStackalloc_element_initializer" ):
                listener.enterStackalloc_element_initializer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStackalloc_element_initializer" ):
                listener.exitStackalloc_element_initializer(self)




    def stackalloc_element_initializer(self):

        localctx = CSharpParser.Stackalloc_element_initializerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 216, self.RULE_stackalloc_element_initializer)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1690
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Using_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def USING(self):
            return self.getToken(CSharpParser.USING, 0)

        def OPEN_PARENS(self):
            return self.getToken(CSharpParser.OPEN_PARENS, 0)

        def resource_acquisition(self):
            return self.getTypedRuleContext(CSharpParser.Resource_acquisitionContext,0)


        def CLOSE_PARENS(self):
            return self.getToken(CSharpParser.CLOSE_PARENS, 0)

        def embedded_statement(self):
            return self.getTypedRuleContext(CSharpParser.Embedded_statementContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_using_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUsing_statement" ):
                listener.enterUsing_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUsing_statement" ):
                listener.exitUsing_statement(self)




    def using_statement(self):

        localctx = CSharpParser.Using_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 218, self.RULE_using_statement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1692
            self.match(CSharpParser.USING)
            self.state = 1693
            self.match(CSharpParser.OPEN_PARENS)
            self.state = 1694
            self.resource_acquisition()
            self.state = 1695
            self.match(CSharpParser.CLOSE_PARENS)
            self.state = 1696
            self.embedded_statement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Yield_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def YIELD(self):
            return self.getToken(CSharpParser.YIELD, 0)

        def RETURN(self):
            return self.getToken(CSharpParser.RETURN, 0)

        def expression(self):
            return self.getTypedRuleContext(CSharpParser.ExpressionContext,0)


        def SEMICOLON(self):
            return self.getToken(CSharpParser.SEMICOLON, 0)

        def BREAK(self):
            return self.getToken(CSharpParser.BREAK, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_yield_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterYield_statement" ):
                listener.enterYield_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitYield_statement" ):
                listener.exitYield_statement(self)




    def yield_statement(self):

        localctx = CSharpParser.Yield_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 220, self.RULE_yield_statement)
        try:
            self.state = 1706
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,162,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1698
                self.match(CSharpParser.YIELD)
                self.state = 1699
                self.match(CSharpParser.RETURN)
                self.state = 1700
                self.expression()
                self.state = 1701
                self.match(CSharpParser.SEMICOLON)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1703
                self.match(CSharpParser.YIELD)
                self.state = 1704
                self.match(CSharpParser.BREAK)
                self.state = 1705
                self.match(CSharpParser.SEMICOLON)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Fixed_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FIXED(self):
            return self.getToken(CSharpParser.FIXED, 0)

        def OPEN_PARENS(self):
            return self.getToken(CSharpParser.OPEN_PARENS, 0)

        def pointer_type(self):
            return self.getTypedRuleContext(CSharpParser.Pointer_typeContext,0)


        def fixed_pointer_declarators(self):
            return self.getTypedRuleContext(CSharpParser.Fixed_pointer_declaratorsContext,0)


        def CLOSE_PARENS(self):
            return self.getToken(CSharpParser.CLOSE_PARENS, 0)

        def embedded_statement(self):
            return self.getTypedRuleContext(CSharpParser.Embedded_statementContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_fixed_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFixed_statement" ):
                listener.enterFixed_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFixed_statement" ):
                listener.exitFixed_statement(self)




    def fixed_statement(self):

        localctx = CSharpParser.Fixed_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 222, self.RULE_fixed_statement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1708
            self.match(CSharpParser.FIXED)
            self.state = 1709
            self.match(CSharpParser.OPEN_PARENS)
            self.state = 1710
            self.pointer_type()
            self.state = 1711
            self.fixed_pointer_declarators()
            self.state = 1712
            self.match(CSharpParser.CLOSE_PARENS)
            self.state = 1713
            self.embedded_statement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Unsafe_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UNSAFE(self):
            return self.getToken(CSharpParser.UNSAFE, 0)

        def block(self):
            return self.getTypedRuleContext(CSharpParser.BlockContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_unsafe_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnsafe_statement" ):
                listener.enterUnsafe_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnsafe_statement" ):
                listener.exitUnsafe_statement(self)




    def unsafe_statement(self):

        localctx = CSharpParser.Unsafe_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 224, self.RULE_unsafe_statement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1715
            self.match(CSharpParser.UNSAFE)
            self.state = 1716
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Try_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TRY(self):
            return self.getToken(CSharpParser.TRY, 0)

        def block(self):
            return self.getTypedRuleContext(CSharpParser.BlockContext,0)


        def catch_clauses(self):
            return self.getTypedRuleContext(CSharpParser.Catch_clausesContext,0)


        def finally_clause(self):
            return self.getTypedRuleContext(CSharpParser.Finally_clauseContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_try_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTry_statement" ):
                listener.enterTry_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTry_statement" ):
                listener.exitTry_statement(self)




    def try_statement(self):

        localctx = CSharpParser.Try_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 226, self.RULE_try_statement)
        self._la = 0 # Token type
        try:
            self.state = 1729
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,164,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1718
                self.match(CSharpParser.TRY)
                self.state = 1719
                self.block()
                self.state = 1720
                self.catch_clauses()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1722
                self.match(CSharpParser.TRY)
                self.state = 1723
                self.block()
                self.state = 1725
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==24:
                    self.state = 1724
                    self.catch_clauses()


                self.state = 1727
                self.finally_clause()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BlockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_BRACE(self):
            return self.getToken(CSharpParser.OPEN_BRACE, 0)

        def CLOSE_BRACE(self):
            return self.getToken(CSharpParser.CLOSE_BRACE, 0)

        def statement_list(self):
            return self.getTypedRuleContext(CSharpParser.Statement_listContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_block

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBlock" ):
                listener.enterBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBlock" ):
                listener.exitBlock(self)




    def block(self):

        localctx = CSharpParser.BlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 228, self.RULE_block)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1731
            self.match(CSharpParser.OPEN_BRACE)
            self.state = 1733
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & -6741914343417334784) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -37436180528032849) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & 562951571697839) != 0):
                self.state = 1732
                self.statement_list()


            self.state = 1735
            self.match(CSharpParser.CLOSE_BRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Local_variable_declarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def local_variable_type(self):
            return self.getTypedRuleContext(CSharpParser.Local_variable_typeContext,0)


        def local_variable_declarator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Local_variable_declaratorContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Local_variable_declaratorContext,i)


        def USING(self):
            return self.getToken(CSharpParser.USING, 0)

        def REF(self):
            return self.getToken(CSharpParser.REF, 0)

        def READONLY(self):
            return self.getToken(CSharpParser.READONLY, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.COMMA)
            else:
                return self.getToken(CSharpParser.COMMA, i)

        def FIXED(self):
            return self.getToken(CSharpParser.FIXED, 0)

        def pointer_type(self):
            return self.getTypedRuleContext(CSharpParser.Pointer_typeContext,0)


        def fixed_pointer_declarators(self):
            return self.getTypedRuleContext(CSharpParser.Fixed_pointer_declaratorsContext,0)


        def VAR(self):
            return self.getToken(CSharpParser.VAR, 0)

        def deconstruction_expression(self):
            return self.getTypedRuleContext(CSharpParser.Deconstruction_expressionContext,0)


        def ASSIGNMENT(self):
            return self.getToken(CSharpParser.ASSIGNMENT, 0)

        def expression(self):
            return self.getTypedRuleContext(CSharpParser.ExpressionContext,0)


        def unsafe_function_pointer(self):
            return self.getTypedRuleContext(CSharpParser.Unsafe_function_pointerContext,0)


        def type_(self):
            return self.getTypedRuleContext(CSharpParser.Type_Context,0)


        def identifier(self):
            return self.getTypedRuleContext(CSharpParser.IdentifierContext,0)


        def lambda_expression(self):
            return self.getTypedRuleContext(CSharpParser.Lambda_expressionContext,0)


        def attributes(self):
            return self.getTypedRuleContext(CSharpParser.AttributesContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_local_variable_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLocal_variable_declaration" ):
                listener.enterLocal_variable_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLocal_variable_declaration" ):
                listener.exitLocal_variable_declaration(self)




    def local_variable_declaration(self):

        localctx = CSharpParser.Local_variable_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 230, self.RULE_local_variable_declaration)
        self._la = 0 # Token type
        try:
            self.state = 1770
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,169,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1741
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,166,self._ctx)
                if la_ == 1:
                    self.state = 1737
                    self.match(CSharpParser.USING)

                elif la_ == 2:
                    self.state = 1738
                    self.match(CSharpParser.REF)

                elif la_ == 3:
                    self.state = 1739
                    self.match(CSharpParser.REF)
                    self.state = 1740
                    self.match(CSharpParser.READONLY)


                self.state = 1743
                self.local_variable_type()
                self.state = 1744
                self.local_variable_declarator()
                self.state = 1749
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==138:
                    self.state = 1745
                    self.match(CSharpParser.COMMA)
                    self.state = 1746
                    self.local_variable_declarator()
                    self.state = 1751
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1752
                self.match(CSharpParser.FIXED)
                self.state = 1753
                self.pointer_type()
                self.state = 1754
                self.fixed_pointer_declarators()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1756
                self.match(CSharpParser.VAR)
                self.state = 1757
                self.deconstruction_expression()
                self.state = 1758
                self.match(CSharpParser.ASSIGNMENT)
                self.state = 1759
                self.expression()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1761
                self.unsafe_function_pointer()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1763
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==133:
                    self.state = 1762
                    self.attributes()


                self.state = 1765
                self.type_()
                self.state = 1766
                self.identifier()
                self.state = 1767
                self.match(CSharpParser.ASSIGNMENT)
                self.state = 1768
                self.lambda_expression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Unsafe_function_pointerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UNSAFE(self):
            return self.getToken(CSharpParser.UNSAFE, 0)

        def OPEN_BRACE(self):
            return self.getToken(CSharpParser.OPEN_BRACE, 0)

        def delegate_function_pointer(self):
            return self.getTypedRuleContext(CSharpParser.Delegate_function_pointerContext,0)


        def CLOSE_BRACE(self):
            return self.getToken(CSharpParser.CLOSE_BRACE, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_unsafe_function_pointer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnsafe_function_pointer" ):
                listener.enterUnsafe_function_pointer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnsafe_function_pointer" ):
                listener.exitUnsafe_function_pointer(self)




    def unsafe_function_pointer(self):

        localctx = CSharpParser.Unsafe_function_pointerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 232, self.RULE_unsafe_function_pointer)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1772
            self.match(CSharpParser.UNSAFE)
            self.state = 1773
            self.match(CSharpParser.OPEN_BRACE)
            self.state = 1774
            self.delegate_function_pointer()
            self.state = 1775
            self.match(CSharpParser.CLOSE_BRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Delegate_function_pointerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DELEGATE(self):
            return self.getToken(CSharpParser.DELEGATE, 0)

        def STAR(self):
            return self.getToken(CSharpParser.STAR, 0)

        def LT(self):
            return self.getToken(CSharpParser.LT, 0)

        def function_pointer_parameter_list(self):
            return self.getTypedRuleContext(CSharpParser.Function_pointer_parameter_listContext,0)


        def GT(self):
            return self.getToken(CSharpParser.GT, 0)

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(CSharpParser.IdentifierContext,i)


        def ASSIGNMENT(self):
            return self.getToken(CSharpParser.ASSIGNMENT, 0)

        def AMP(self):
            return self.getToken(CSharpParser.AMP, 0)

        def SEMICOLON(self):
            return self.getToken(CSharpParser.SEMICOLON, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_delegate_function_pointer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDelegate_function_pointer" ):
                listener.enterDelegate_function_pointer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDelegate_function_pointer" ):
                listener.exitDelegate_function_pointer(self)




    def delegate_function_pointer(self):

        localctx = CSharpParser.Delegate_function_pointerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 234, self.RULE_delegate_function_pointer)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1777
            self.match(CSharpParser.DELEGATE)
            self.state = 1778
            self.match(CSharpParser.STAR)
            self.state = 1779
            self.match(CSharpParser.LT)
            self.state = 1780
            self.function_pointer_parameter_list()
            self.state = 1781
            self.match(CSharpParser.GT)
            self.state = 1782
            self.identifier()
            self.state = 1783
            self.match(CSharpParser.ASSIGNMENT)
            self.state = 1784
            self.match(CSharpParser.AMP)
            self.state = 1785
            self.identifier()
            self.state = 1786
            self.match(CSharpParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Local_variable_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VAR(self):
            return self.getToken(CSharpParser.VAR, 0)

        def type_(self):
            return self.getTypedRuleContext(CSharpParser.Type_Context,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_local_variable_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLocal_variable_type" ):
                listener.enterLocal_variable_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLocal_variable_type" ):
                listener.exitLocal_variable_type(self)




    def local_variable_type(self):

        localctx = CSharpParser.Local_variable_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 236, self.RULE_local_variable_type)
        try:
            self.state = 1790
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,170,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1788
                self.match(CSharpParser.VAR)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1789
                self.type_()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Local_variable_declaratorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(CSharpParser.IdentifierContext,0)


        def ASSIGNMENT(self):
            return self.getToken(CSharpParser.ASSIGNMENT, 0)

        def local_variable_initializer(self):
            return self.getTypedRuleContext(CSharpParser.Local_variable_initializerContext,0)


        def REF(self):
            return self.getToken(CSharpParser.REF, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_local_variable_declarator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLocal_variable_declarator" ):
                listener.enterLocal_variable_declarator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLocal_variable_declarator" ):
                listener.exitLocal_variable_declarator(self)




    def local_variable_declarator(self):

        localctx = CSharpParser.Local_variable_declaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 238, self.RULE_local_variable_declarator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1792
            self.identifier()
            self.state = 1798
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==151:
                self.state = 1793
                self.match(CSharpParser.ASSIGNMENT)
                self.state = 1795
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,171,self._ctx)
                if la_ == 1:
                    self.state = 1794
                    self.match(CSharpParser.REF)


                self.state = 1797
                self.local_variable_initializer()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Local_variable_initializerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(CSharpParser.ExpressionContext,0)


        def array_initializer(self):
            return self.getTypedRuleContext(CSharpParser.Array_initializerContext,0)


        def stackalloc_initializer(self):
            return self.getTypedRuleContext(CSharpParser.Stackalloc_initializerContext,0)


        def deconstruction_element(self):
            return self.getTypedRuleContext(CSharpParser.Deconstruction_elementContext,0)


        def lambda_expression(self):
            return self.getTypedRuleContext(CSharpParser.Lambda_expressionContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_local_variable_initializer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLocal_variable_initializer" ):
                listener.enterLocal_variable_initializer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLocal_variable_initializer" ):
                listener.exitLocal_variable_initializer(self)




    def local_variable_initializer(self):

        localctx = CSharpParser.Local_variable_initializerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 240, self.RULE_local_variable_initializer)
        try:
            self.state = 1805
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,173,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1800
                self.expression()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1801
                self.array_initializer()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1802
                self.stackalloc_initializer()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1803
                self.deconstruction_element()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1804
                self.lambda_expression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Local_constant_declarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CONST(self):
            return self.getToken(CSharpParser.CONST, 0)

        def type_(self):
            return self.getTypedRuleContext(CSharpParser.Type_Context,0)


        def constant_declarators(self):
            return self.getTypedRuleContext(CSharpParser.Constant_declaratorsContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_local_constant_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLocal_constant_declaration" ):
                listener.enterLocal_constant_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLocal_constant_declaration" ):
                listener.exitLocal_constant_declaration(self)




    def local_constant_declaration(self):

        localctx = CSharpParser.Local_constant_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 242, self.RULE_local_constant_declaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1807
            self.match(CSharpParser.CONST)
            self.state = 1808
            self.type_()
            self.state = 1809
            self.constant_declarators()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Switch_sectionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def statement_list(self):
            return self.getTypedRuleContext(CSharpParser.Statement_listContext,0)


        def switch_label(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Switch_labelContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Switch_labelContext,i)


        def getRuleIndex(self):
            return CSharpParser.RULE_switch_section

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSwitch_section" ):
                listener.enterSwitch_section(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSwitch_section" ):
                listener.exitSwitch_section(self)




    def switch_section(self):

        localctx = CSharpParser.Switch_sectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 244, self.RULE_switch_section)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1812 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 1811
                    self.switch_label()

                else:
                    raise NoViableAltException(self)
                self.state = 1814 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,174,self._ctx)

            self.state = 1816
            self.statement_list()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Switch_labelContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CASE(self):
            return self.getToken(CSharpParser.CASE, 0)

        def expression(self):
            return self.getTypedRuleContext(CSharpParser.ExpressionContext,0)


        def COLON(self):
            return self.getToken(CSharpParser.COLON, 0)

        def case_guard(self):
            return self.getTypedRuleContext(CSharpParser.Case_guardContext,0)


        def pattern(self):
            return self.getTypedRuleContext(CSharpParser.PatternContext,0)


        def DEFAULT(self):
            return self.getToken(CSharpParser.DEFAULT, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_switch_label

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSwitch_label" ):
                listener.enterSwitch_label(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSwitch_label" ):
                listener.exitSwitch_label(self)




    def switch_label(self):

        localctx = CSharpParser.Switch_labelContext(self, self._ctx, self.state)
        self.enterRule(localctx, 246, self.RULE_switch_label)
        self._la = 0 # Token type
        try:
            self.state = 1834
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,177,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1818
                self.match(CSharpParser.CASE)
                self.state = 1819
                self.expression()
                self.state = 1821
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==115:
                    self.state = 1820
                    self.case_guard()


                self.state = 1823
                self.match(CSharpParser.COLON)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1825
                self.match(CSharpParser.CASE)
                self.state = 1826
                self.pattern()
                self.state = 1828
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==115:
                    self.state = 1827
                    self.case_guard()


                self.state = 1830
                self.match(CSharpParser.COLON)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1832
                self.match(CSharpParser.DEFAULT)
                self.state = 1833
                self.match(CSharpParser.COLON)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Case_guardContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHEN(self):
            return self.getToken(CSharpParser.WHEN, 0)

        def expression(self):
            return self.getTypedRuleContext(CSharpParser.ExpressionContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_case_guard

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCase_guard" ):
                listener.enterCase_guard(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCase_guard" ):
                listener.exitCase_guard(self)




    def case_guard(self):

        localctx = CSharpParser.Case_guardContext(self, self._ctx, self.state)
        self.enterRule(localctx, 248, self.RULE_case_guard)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1836
            self.match(CSharpParser.WHEN)
            self.state = 1837
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Statement_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.StatementContext)
            else:
                return self.getTypedRuleContext(CSharpParser.StatementContext,i)


        def getRuleIndex(self):
            return CSharpParser.RULE_statement_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatement_list" ):
                listener.enterStatement_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatement_list" ):
                listener.exitStatement_list(self)




    def statement_list(self):

        localctx = CSharpParser.Statement_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 250, self.RULE_statement_list)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1840 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 1839
                    self.statement()

                else:
                    raise NoViableAltException(self)
                self.state = 1842 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,178,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class For_initializerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def local_variable_declaration(self):
            return self.getTypedRuleContext(CSharpParser.Local_variable_declarationContext,0)


        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(CSharpParser.ExpressionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.COMMA)
            else:
                return self.getToken(CSharpParser.COMMA, i)

        def getRuleIndex(self):
            return CSharpParser.RULE_for_initializer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFor_initializer" ):
                listener.enterFor_initializer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFor_initializer" ):
                listener.exitFor_initializer(self)




    def for_initializer(self):

        localctx = CSharpParser.For_initializerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 252, self.RULE_for_initializer)
        self._la = 0 # Token type
        try:
            self.state = 1853
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,180,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1844
                self.local_variable_declaration()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1845
                self.expression()
                self.state = 1850
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==138:
                    self.state = 1846
                    self.match(CSharpParser.COMMA)
                    self.state = 1847
                    self.expression()
                    self.state = 1852
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class For_iteratorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(CSharpParser.ExpressionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.COMMA)
            else:
                return self.getToken(CSharpParser.COMMA, i)

        def getRuleIndex(self):
            return CSharpParser.RULE_for_iterator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFor_iterator" ):
                listener.enterFor_iterator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFor_iterator" ):
                listener.exitFor_iterator(self)




    def for_iterator(self):

        localctx = CSharpParser.For_iteratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 254, self.RULE_for_iterator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1855
            self.expression()
            self.state = 1860
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==138:
                self.state = 1856
                self.match(CSharpParser.COMMA)
                self.state = 1857
                self.expression()
                self.state = 1862
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Catch_clausesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def specific_catch_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Specific_catch_clauseContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Specific_catch_clauseContext,i)


        def general_catch_clause(self):
            return self.getTypedRuleContext(CSharpParser.General_catch_clauseContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_catch_clauses

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCatch_clauses" ):
                listener.enterCatch_clauses(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCatch_clauses" ):
                listener.exitCatch_clauses(self)




    def catch_clauses(self):

        localctx = CSharpParser.Catch_clausesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 256, self.RULE_catch_clauses)
        self._la = 0 # Token type
        try:
            self.state = 1874
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,184,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1863
                self.specific_catch_clause()
                self.state = 1867
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,182,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1864
                        self.specific_catch_clause() 
                    self.state = 1869
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,182,self._ctx)

                self.state = 1871
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==24:
                    self.state = 1870
                    self.general_catch_clause()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1873
                self.general_catch_clause()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Specific_catch_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CATCH(self):
            return self.getToken(CSharpParser.CATCH, 0)

        def OPEN_PARENS(self):
            return self.getToken(CSharpParser.OPEN_PARENS, 0)

        def class_type(self):
            return self.getTypedRuleContext(CSharpParser.Class_typeContext,0)


        def CLOSE_PARENS(self):
            return self.getToken(CSharpParser.CLOSE_PARENS, 0)

        def block(self):
            return self.getTypedRuleContext(CSharpParser.BlockContext,0)


        def identifier(self):
            return self.getTypedRuleContext(CSharpParser.IdentifierContext,0)


        def exception_filter(self):
            return self.getTypedRuleContext(CSharpParser.Exception_filterContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_specific_catch_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSpecific_catch_clause" ):
                listener.enterSpecific_catch_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSpecific_catch_clause" ):
                listener.exitSpecific_catch_clause(self)




    def specific_catch_clause(self):

        localctx = CSharpParser.Specific_catch_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 258, self.RULE_specific_catch_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1876
            self.match(CSharpParser.CATCH)
            self.state = 1877
            self.match(CSharpParser.OPEN_PARENS)
            self.state = 1878
            self.class_type()
            self.state = 1880
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & -6906832351458511872) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 96976925775434249) != 0):
                self.state = 1879
                self.identifier()


            self.state = 1882
            self.match(CSharpParser.CLOSE_PARENS)
            self.state = 1884
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==115:
                self.state = 1883
                self.exception_filter()


            self.state = 1886
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class General_catch_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CATCH(self):
            return self.getToken(CSharpParser.CATCH, 0)

        def block(self):
            return self.getTypedRuleContext(CSharpParser.BlockContext,0)


        def exception_filter(self):
            return self.getTypedRuleContext(CSharpParser.Exception_filterContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_general_catch_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGeneral_catch_clause" ):
                listener.enterGeneral_catch_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGeneral_catch_clause" ):
                listener.exitGeneral_catch_clause(self)




    def general_catch_clause(self):

        localctx = CSharpParser.General_catch_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 260, self.RULE_general_catch_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1888
            self.match(CSharpParser.CATCH)
            self.state = 1890
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==115:
                self.state = 1889
                self.exception_filter()


            self.state = 1892
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Exception_filterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHEN(self):
            return self.getToken(CSharpParser.WHEN, 0)

        def OPEN_PARENS(self):
            return self.getToken(CSharpParser.OPEN_PARENS, 0)

        def expression(self):
            return self.getTypedRuleContext(CSharpParser.ExpressionContext,0)


        def CLOSE_PARENS(self):
            return self.getToken(CSharpParser.CLOSE_PARENS, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_exception_filter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterException_filter" ):
                listener.enterException_filter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitException_filter" ):
                listener.exitException_filter(self)




    def exception_filter(self):

        localctx = CSharpParser.Exception_filterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 262, self.RULE_exception_filter)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1894
            self.match(CSharpParser.WHEN)
            self.state = 1895
            self.match(CSharpParser.OPEN_PARENS)
            self.state = 1896
            self.expression()
            self.state = 1897
            self.match(CSharpParser.CLOSE_PARENS)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Finally_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FINALLY(self):
            return self.getToken(CSharpParser.FINALLY, 0)

        def block(self):
            return self.getTypedRuleContext(CSharpParser.BlockContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_finally_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFinally_clause" ):
                listener.enterFinally_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFinally_clause" ):
                listener.exitFinally_clause(self)




    def finally_clause(self):

        localctx = CSharpParser.Finally_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 264, self.RULE_finally_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1899
            self.match(CSharpParser.FINALLY)
            self.state = 1900
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Resource_acquisitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def local_variable_declaration(self):
            return self.getTypedRuleContext(CSharpParser.Local_variable_declarationContext,0)


        def expression(self):
            return self.getTypedRuleContext(CSharpParser.ExpressionContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_resource_acquisition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterResource_acquisition" ):
                listener.enterResource_acquisition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitResource_acquisition" ):
                listener.exitResource_acquisition(self)




    def resource_acquisition(self):

        localctx = CSharpParser.Resource_acquisitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 266, self.RULE_resource_acquisition)
        try:
            self.state = 1904
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,188,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1902
                self.local_variable_declaration()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1903
                self.expression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Namespace_declarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.qi = None # Qualified_identifierContext

        def NAMESPACE(self):
            return self.getToken(CSharpParser.NAMESPACE, 0)

        def namespace_body(self):
            return self.getTypedRuleContext(CSharpParser.Namespace_bodyContext,0)


        def qualified_identifier(self):
            return self.getTypedRuleContext(CSharpParser.Qualified_identifierContext,0)


        def SEMICOLON(self):
            return self.getToken(CSharpParser.SEMICOLON, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_namespace_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNamespace_declaration" ):
                listener.enterNamespace_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNamespace_declaration" ):
                listener.exitNamespace_declaration(self)




    def namespace_declaration(self):

        localctx = CSharpParser.Namespace_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 268, self.RULE_namespace_declaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1906
            self.match(CSharpParser.NAMESPACE)
            self.state = 1907
            localctx.qi = self.qualified_identifier()
            self.state = 1908
            self.namespace_body()
            self.state = 1910
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,189,self._ctx)
            if la_ == 1:
                self.state = 1909
                self.match(CSharpParser.SEMICOLON)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Qualified_identifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(CSharpParser.IdentifierContext,i)


        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.DOT)
            else:
                return self.getToken(CSharpParser.DOT, i)

        def getRuleIndex(self):
            return CSharpParser.RULE_qualified_identifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQualified_identifier" ):
                listener.enterQualified_identifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQualified_identifier" ):
                listener.exitQualified_identifier(self)




    def qualified_identifier(self):

        localctx = CSharpParser.Qualified_identifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 270, self.RULE_qualified_identifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1912
            self.identifier()
            self.state = 1917
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==137:
                self.state = 1913
                self.match(CSharpParser.DOT)
                self.state = 1914
                self.identifier()
                self.state = 1919
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Namespace_bodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_BRACE(self):
            return self.getToken(CSharpParser.OPEN_BRACE, 0)

        def CLOSE_BRACE(self):
            return self.getToken(CSharpParser.CLOSE_BRACE, 0)

        def extern_alias_directives(self):
            return self.getTypedRuleContext(CSharpParser.Extern_alias_directivesContext,0)


        def using_directives(self):
            return self.getTypedRuleContext(CSharpParser.Using_directivesContext,0)


        def namespace_member_declarations(self):
            return self.getTypedRuleContext(CSharpParser.Namespace_member_declarationsContext,0)


        def SEMICOLON(self):
            return self.getToken(CSharpParser.SEMICOLON, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_namespace_body

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNamespace_body" ):
                listener.enterNamespace_body(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNamespace_body" ):
                listener.exitNamespace_body(self)




    def namespace_body(self):

        localctx = CSharpParser.Namespace_bodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 272, self.RULE_namespace_body)
        self._la = 0 # Token type
        try:
            self.state = 1932
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [131]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1920
                self.match(CSharpParser.OPEN_BRACE)
                self.state = 1922
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,191,self._ctx)
                if la_ == 1:
                    self.state = 1921
                    self.extern_alias_directives()


                self.state = 1925
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==52 or _la==110:
                    self.state = 1924
                    self.using_directives()


                self.state = 1928
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 9)) & ~0x3f) == 0 and ((1 << (_la - 9)) & -7001035681947634213) != 0) or ((((_la - 73)) & ~0x3f) == 0 and ((1 << (_la - 73)) & 5764871257678921641) != 0):
                    self.state = 1927
                    self.namespace_member_declarations()


                self.state = 1930
                self.match(CSharpParser.CLOSE_BRACE)
                pass
            elif token in [140]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1931
                self.match(CSharpParser.SEMICOLON)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Extern_alias_directivesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def extern_alias_directive(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Extern_alias_directiveContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Extern_alias_directiveContext,i)


        def getRuleIndex(self):
            return CSharpParser.RULE_extern_alias_directives

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExtern_alias_directives" ):
                listener.enterExtern_alias_directives(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExtern_alias_directives" ):
                listener.exitExtern_alias_directives(self)




    def extern_alias_directives(self):

        localctx = CSharpParser.Extern_alias_directivesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 274, self.RULE_extern_alias_directives)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1935 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 1934
                    self.extern_alias_directive()

                else:
                    raise NoViableAltException(self)
                self.state = 1937 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,195,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Extern_alias_directiveContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXTERN(self):
            return self.getToken(CSharpParser.EXTERN, 0)

        def ALIAS(self):
            return self.getToken(CSharpParser.ALIAS, 0)

        def identifier(self):
            return self.getTypedRuleContext(CSharpParser.IdentifierContext,0)


        def SEMICOLON(self):
            return self.getToken(CSharpParser.SEMICOLON, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_extern_alias_directive

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExtern_alias_directive" ):
                listener.enterExtern_alias_directive(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExtern_alias_directive" ):
                listener.exitExtern_alias_directive(self)




    def extern_alias_directive(self):

        localctx = CSharpParser.Extern_alias_directiveContext(self, self._ctx, self.state)
        self.enterRule(localctx, 276, self.RULE_extern_alias_directive)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1939
            self.match(CSharpParser.EXTERN)
            self.state = 1940
            self.match(CSharpParser.ALIAS)
            self.state = 1941
            self.identifier()
            self.state = 1942
            self.match(CSharpParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Using_directivesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def using_directive(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Using_directiveContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Using_directiveContext,i)


        def getRuleIndex(self):
            return CSharpParser.RULE_using_directives

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUsing_directives" ):
                listener.enterUsing_directives(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUsing_directives" ):
                listener.exitUsing_directives(self)




    def using_directives(self):

        localctx = CSharpParser.Using_directivesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 278, self.RULE_using_directives)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1945 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 1944
                    self.using_directive()

                else:
                    raise NoViableAltException(self)
                self.state = 1947 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,196,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Using_directiveContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CSharpParser.RULE_using_directive

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class UsingAliasDirectiveContext(Using_directiveContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CSharpParser.Using_directiveContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def USING(self):
            return self.getToken(CSharpParser.USING, 0)
        def identifier(self):
            return self.getTypedRuleContext(CSharpParser.IdentifierContext,0)

        def ASSIGNMENT(self):
            return self.getToken(CSharpParser.ASSIGNMENT, 0)
        def namespace_or_type_name(self):
            return self.getTypedRuleContext(CSharpParser.Namespace_or_type_nameContext,0)

        def SEMICOLON(self):
            return self.getToken(CSharpParser.SEMICOLON, 0)
        def GLOBAL(self):
            return self.getToken(CSharpParser.GLOBAL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUsingAliasDirective" ):
                listener.enterUsingAliasDirective(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUsingAliasDirective" ):
                listener.exitUsingAliasDirective(self)


    class UsingNamespaceDirectiveContext(Using_directiveContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CSharpParser.Using_directiveContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def USING(self):
            return self.getToken(CSharpParser.USING, 0)
        def namespace_or_type_name(self):
            return self.getTypedRuleContext(CSharpParser.Namespace_or_type_nameContext,0)

        def SEMICOLON(self):
            return self.getToken(CSharpParser.SEMICOLON, 0)
        def GLOBAL(self):
            return self.getToken(CSharpParser.GLOBAL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUsingNamespaceDirective" ):
                listener.enterUsingNamespaceDirective(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUsingNamespaceDirective" ):
                listener.exitUsingNamespaceDirective(self)


    class UsingStaticDirectiveContext(Using_directiveContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CSharpParser.Using_directiveContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def USING(self):
            return self.getToken(CSharpParser.USING, 0)
        def STATIC(self):
            return self.getToken(CSharpParser.STATIC, 0)
        def namespace_or_type_name(self):
            return self.getTypedRuleContext(CSharpParser.Namespace_or_type_nameContext,0)

        def SEMICOLON(self):
            return self.getToken(CSharpParser.SEMICOLON, 0)
        def GLOBAL(self):
            return self.getToken(CSharpParser.GLOBAL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUsingStaticDirective" ):
                listener.enterUsingStaticDirective(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUsingStaticDirective" ):
                listener.exitUsingStaticDirective(self)



    def using_directive(self):

        localctx = CSharpParser.Using_directiveContext(self, self._ctx, self.state)
        self.enterRule(localctx, 280, self.RULE_using_directive)
        self._la = 0 # Token type
        try:
            self.state = 1973
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,200,self._ctx)
            if la_ == 1:
                localctx = CSharpParser.UsingAliasDirectiveContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1950
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==52:
                    self.state = 1949
                    self.match(CSharpParser.GLOBAL)


                self.state = 1952
                self.match(CSharpParser.USING)
                self.state = 1953
                self.identifier()
                self.state = 1954
                self.match(CSharpParser.ASSIGNMENT)
                self.state = 1955
                self.namespace_or_type_name()
                self.state = 1956
                self.match(CSharpParser.SEMICOLON)
                pass

            elif la_ == 2:
                localctx = CSharpParser.UsingNamespaceDirectiveContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1959
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==52:
                    self.state = 1958
                    self.match(CSharpParser.GLOBAL)


                self.state = 1961
                self.match(CSharpParser.USING)
                self.state = 1962
                self.namespace_or_type_name()
                self.state = 1963
                self.match(CSharpParser.SEMICOLON)
                pass

            elif la_ == 3:
                localctx = CSharpParser.UsingStaticDirectiveContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 1966
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==52:
                    self.state = 1965
                    self.match(CSharpParser.GLOBAL)


                self.state = 1968
                self.match(CSharpParser.USING)
                self.state = 1969
                self.match(CSharpParser.STATIC)
                self.state = 1970
                self.namespace_or_type_name()
                self.state = 1971
                self.match(CSharpParser.SEMICOLON)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Namespace_member_declarationsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def namespace_member_declaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Namespace_member_declarationContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Namespace_member_declarationContext,i)


        def getRuleIndex(self):
            return CSharpParser.RULE_namespace_member_declarations

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNamespace_member_declarations" ):
                listener.enterNamespace_member_declarations(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNamespace_member_declarations" ):
                listener.exitNamespace_member_declarations(self)




    def namespace_member_declarations(self):

        localctx = CSharpParser.Namespace_member_declarationsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 282, self.RULE_namespace_member_declarations)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1976 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 1975
                    self.namespace_member_declaration()

                else:
                    raise NoViableAltException(self)
                self.state = 1978 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,201,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Namespace_member_declarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def namespace_declaration(self):
            return self.getTypedRuleContext(CSharpParser.Namespace_declarationContext,0)


        def type_declaration(self):
            return self.getTypedRuleContext(CSharpParser.Type_declarationContext,0)


        def module_initializer_declaration(self):
            return self.getTypedRuleContext(CSharpParser.Module_initializer_declarationContext,0)


        def common_member_declaration(self):
            return self.getTypedRuleContext(CSharpParser.Common_member_declarationContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_namespace_member_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNamespace_member_declaration" ):
                listener.enterNamespace_member_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNamespace_member_declaration" ):
                listener.exitNamespace_member_declaration(self)




    def namespace_member_declaration(self):

        localctx = CSharpParser.Namespace_member_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 284, self.RULE_namespace_member_declaration)
        try:
            self.state = 1984
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,202,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1980
                self.namespace_declaration()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1981
                self.type_declaration()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1982
                self.module_initializer_declaration()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1983
                self.common_member_declaration()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Type_declarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def class_definition(self):
            return self.getTypedRuleContext(CSharpParser.Class_definitionContext,0)


        def struct_definition(self):
            return self.getTypedRuleContext(CSharpParser.Struct_definitionContext,0)


        def interface_definition(self):
            return self.getTypedRuleContext(CSharpParser.Interface_definitionContext,0)


        def enum_definition(self):
            return self.getTypedRuleContext(CSharpParser.Enum_definitionContext,0)


        def delegate_definition(self):
            return self.getTypedRuleContext(CSharpParser.Delegate_definitionContext,0)


        def record_definition(self):
            return self.getTypedRuleContext(CSharpParser.Record_definitionContext,0)


        def attributes(self):
            return self.getTypedRuleContext(CSharpParser.AttributesContext,0)


        def all_member_modifiers(self):
            return self.getTypedRuleContext(CSharpParser.All_member_modifiersContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_type_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterType_declaration" ):
                listener.enterType_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitType_declaration" ):
                listener.exitType_declaration(self)




    def type_declaration(self):

        localctx = CSharpParser.Type_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 286, self.RULE_type_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1987
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==133:
                self.state = 1986
                self.attributes()


            self.state = 1990
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,204,self._ctx)
            if la_ == 1:
                self.state = 1989
                self.all_member_modifiers()


            self.state = 1998
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,205,self._ctx)
            if la_ == 1:
                self.state = 1992
                self.class_definition()
                pass

            elif la_ == 2:
                self.state = 1993
                self.struct_definition()
                pass

            elif la_ == 3:
                self.state = 1994
                self.interface_definition()
                pass

            elif la_ == 4:
                self.state = 1995
                self.enum_definition()
                pass

            elif la_ == 5:
                self.state = 1996
                self.delegate_definition()
                pass

            elif la_ == 6:
                self.state = 1997
                self.record_definition()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Record_definitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RECORD(self):
            return self.getToken(CSharpParser.RECORD, 0)

        def identifier(self):
            return self.getTypedRuleContext(CSharpParser.IdentifierContext,0)


        def OPEN_PARENS(self):
            return self.getToken(CSharpParser.OPEN_PARENS, 0)

        def CLOSE_PARENS(self):
            return self.getToken(CSharpParser.CLOSE_PARENS, 0)

        def record_body(self):
            return self.getTypedRuleContext(CSharpParser.Record_bodyContext,0)


        def STRUCT(self):
            return self.getToken(CSharpParser.STRUCT, 0)

        def type_parameter_list(self):
            return self.getTypedRuleContext(CSharpParser.Type_parameter_listContext,0)


        def record_base(self):
            return self.getTypedRuleContext(CSharpParser.Record_baseContext,0)


        def type_parameter_constraints_clauses(self):
            return self.getTypedRuleContext(CSharpParser.Type_parameter_constraints_clausesContext,0)


        def record_parameters(self):
            return self.getTypedRuleContext(CSharpParser.Record_parametersContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_record_definition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRecord_definition" ):
                listener.enterRecord_definition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRecord_definition" ):
                listener.exitRecord_definition(self)




    def record_definition(self):

        localctx = CSharpParser.Record_definitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 288, self.RULE_record_definition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2000
            self.match(CSharpParser.RECORD)
            self.state = 2002
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==97:
                self.state = 2001
                self.match(CSharpParser.STRUCT)


            self.state = 2004
            self.identifier()
            self.state = 2006
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==152:
                self.state = 2005
                self.type_parameter_list()


            self.state = 2009
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==139:
                self.state = 2008
                self.record_base()


            self.state = 2012
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==116:
                self.state = 2011
                self.type_parameter_constraints_clauses()


            self.state = 2014
            self.match(CSharpParser.OPEN_PARENS)
            self.state = 2016
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 10)) & ~0x3f) == 0 and ((1 << (_la - 10)) & -4366088586516194579) != 0) or ((((_la - 76)) & ~0x3f) == 0 and ((1 << (_la - 76)) & 720599763221861393) != 0):
                self.state = 2015
                self.record_parameters()


            self.state = 2018
            self.match(CSharpParser.CLOSE_PARENS)
            self.state = 2019
            self.record_body()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Record_baseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COLON(self):
            return self.getToken(CSharpParser.COLON, 0)

        def class_type(self):
            return self.getTypedRuleContext(CSharpParser.Class_typeContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.COMMA)
            else:
                return self.getToken(CSharpParser.COMMA, i)

        def namespace_or_type_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Namespace_or_type_nameContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Namespace_or_type_nameContext,i)


        def getRuleIndex(self):
            return CSharpParser.RULE_record_base

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRecord_base" ):
                listener.enterRecord_base(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRecord_base" ):
                listener.exitRecord_base(self)




    def record_base(self):

        localctx = CSharpParser.Record_baseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 290, self.RULE_record_base)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2021
            self.match(CSharpParser.COLON)
            self.state = 2022
            self.class_type()
            self.state = 2027
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==138:
                self.state = 2023
                self.match(CSharpParser.COMMA)
                self.state = 2024
                self.namespace_or_type_name()
                self.state = 2029
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Record_bodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_BRACE(self):
            return self.getToken(CSharpParser.OPEN_BRACE, 0)

        def CLOSE_BRACE(self):
            return self.getToken(CSharpParser.CLOSE_BRACE, 0)

        def class_member_declarations(self):
            return self.getTypedRuleContext(CSharpParser.Class_member_declarationsContext,0)


        def SEMICOLON(self):
            return self.getToken(CSharpParser.SEMICOLON, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_record_body

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRecord_body" ):
                listener.enterRecord_body(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRecord_body" ):
                listener.exitRecord_body(self)




    def record_body(self):

        localctx = CSharpParser.Record_bodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 292, self.RULE_record_body)
        self._la = 0 # Token type
        try:
            self.state = 2036
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [131]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2030
                self.match(CSharpParser.OPEN_BRACE)
                self.state = 2032
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -5861918857535703552) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 135032138079621933) != 0) or ((((_la - 133)) & ~0x3f) == 0 and ((1 << (_la - 133)) & 131077) != 0):
                    self.state = 2031
                    self.class_member_declarations()


                self.state = 2034
                self.match(CSharpParser.CLOSE_BRACE)
                pass
            elif token in [140]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2035
                self.match(CSharpParser.SEMICOLON)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Record_parametersContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def record_parameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Record_parameterContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Record_parameterContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.COMMA)
            else:
                return self.getToken(CSharpParser.COMMA, i)

        def getRuleIndex(self):
            return CSharpParser.RULE_record_parameters

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRecord_parameters" ):
                listener.enterRecord_parameters(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRecord_parameters" ):
                listener.exitRecord_parameters(self)




    def record_parameters(self):

        localctx = CSharpParser.Record_parametersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 294, self.RULE_record_parameters)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2038
            self.record_parameter()
            self.state = 2043
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==138:
                self.state = 2039
                self.match(CSharpParser.COMMA)
                self.state = 2040
                self.record_parameter()
                self.state = 2045
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Record_parameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def type_(self):
            return self.getTypedRuleContext(CSharpParser.Type_Context,0)


        def identifier(self):
            return self.getTypedRuleContext(CSharpParser.IdentifierContext,0)


        def attributes(self):
            return self.getTypedRuleContext(CSharpParser.AttributesContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_record_parameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRecord_parameter" ):
                listener.enterRecord_parameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRecord_parameter" ):
                listener.exitRecord_parameter(self)




    def record_parameter(self):

        localctx = CSharpParser.Record_parameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 296, self.RULE_record_parameter)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2047
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==133:
                self.state = 2046
                self.attributes()


            self.state = 2049
            self.type_()
            self.state = 2050
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Qualified_alias_memberContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(CSharpParser.IdentifierContext,i)


        def DOUBLE_COLON(self):
            return self.getToken(CSharpParser.DOUBLE_COLON, 0)

        def type_argument_list(self):
            return self.getTypedRuleContext(CSharpParser.Type_argument_listContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_qualified_alias_member

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQualified_alias_member" ):
                listener.enterQualified_alias_member(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQualified_alias_member" ):
                listener.exitQualified_alias_member(self)




    def qualified_alias_member(self):

        localctx = CSharpParser.Qualified_alias_memberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 298, self.RULE_qualified_alias_member)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2052
            self.identifier()
            self.state = 2053
            self.match(CSharpParser.DOUBLE_COLON)
            self.state = 2054
            self.identifier()
            self.state = 2056
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,216,self._ctx)
            if la_ == 1:
                self.state = 2055
                self.type_argument_list()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Type_parameter_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LT(self):
            return self.getToken(CSharpParser.LT, 0)

        def type_parameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Type_parameterContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Type_parameterContext,i)


        def GT(self):
            return self.getToken(CSharpParser.GT, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.COMMA)
            else:
                return self.getToken(CSharpParser.COMMA, i)

        def getRuleIndex(self):
            return CSharpParser.RULE_type_parameter_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterType_parameter_list" ):
                listener.enterType_parameter_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitType_parameter_list" ):
                listener.exitType_parameter_list(self)




    def type_parameter_list(self):

        localctx = CSharpParser.Type_parameter_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 300, self.RULE_type_parameter_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2058
            self.match(CSharpParser.LT)
            self.state = 2059
            self.type_parameter()
            self.state = 2064
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==138:
                self.state = 2060
                self.match(CSharpParser.COMMA)
                self.state = 2061
                self.type_parameter()
                self.state = 2066
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2067
            self.match(CSharpParser.GT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Type_parameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(CSharpParser.IdentifierContext,0)


        def attributes(self):
            return self.getTypedRuleContext(CSharpParser.AttributesContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_type_parameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterType_parameter" ):
                listener.enterType_parameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitType_parameter" ):
                listener.exitType_parameter(self)




    def type_parameter(self):

        localctx = CSharpParser.Type_parameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 302, self.RULE_type_parameter)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2070
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==133:
                self.state = 2069
                self.attributes()


            self.state = 2072
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Class_baseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COLON(self):
            return self.getToken(CSharpParser.COLON, 0)

        def class_type(self):
            return self.getTypedRuleContext(CSharpParser.Class_typeContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.COMMA)
            else:
                return self.getToken(CSharpParser.COMMA, i)

        def namespace_or_type_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Namespace_or_type_nameContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Namespace_or_type_nameContext,i)


        def getRuleIndex(self):
            return CSharpParser.RULE_class_base

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClass_base" ):
                listener.enterClass_base(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClass_base" ):
                listener.exitClass_base(self)




    def class_base(self):

        localctx = CSharpParser.Class_baseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 304, self.RULE_class_base)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2074
            self.match(CSharpParser.COLON)
            self.state = 2075
            self.class_type()
            self.state = 2080
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==138:
                self.state = 2076
                self.match(CSharpParser.COMMA)
                self.state = 2077
                self.namespace_or_type_name()
                self.state = 2082
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Interface_type_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def namespace_or_type_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Namespace_or_type_nameContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Namespace_or_type_nameContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.COMMA)
            else:
                return self.getToken(CSharpParser.COMMA, i)

        def getRuleIndex(self):
            return CSharpParser.RULE_interface_type_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterface_type_list" ):
                listener.enterInterface_type_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterface_type_list" ):
                listener.exitInterface_type_list(self)




    def interface_type_list(self):

        localctx = CSharpParser.Interface_type_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 306, self.RULE_interface_type_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2083
            self.namespace_or_type_name()
            self.state = 2088
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==138:
                self.state = 2084
                self.match(CSharpParser.COMMA)
                self.state = 2085
                self.namespace_or_type_name()
                self.state = 2090
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Type_parameter_constraints_clausesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def type_parameter_constraints_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Type_parameter_constraints_clauseContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Type_parameter_constraints_clauseContext,i)


        def getRuleIndex(self):
            return CSharpParser.RULE_type_parameter_constraints_clauses

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterType_parameter_constraints_clauses" ):
                listener.enterType_parameter_constraints_clauses(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitType_parameter_constraints_clauses" ):
                listener.exitType_parameter_constraints_clauses(self)




    def type_parameter_constraints_clauses(self):

        localctx = CSharpParser.Type_parameter_constraints_clausesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 308, self.RULE_type_parameter_constraints_clauses)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2092 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 2091
                self.type_parameter_constraints_clause()
                self.state = 2094 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==116):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Type_parameter_constraints_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHERE(self):
            return self.getToken(CSharpParser.WHERE, 0)

        def identifier(self):
            return self.getTypedRuleContext(CSharpParser.IdentifierContext,0)


        def COLON(self):
            return self.getToken(CSharpParser.COLON, 0)

        def type_parameter_constraints(self):
            return self.getTypedRuleContext(CSharpParser.Type_parameter_constraintsContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_type_parameter_constraints_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterType_parameter_constraints_clause" ):
                listener.enterType_parameter_constraints_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitType_parameter_constraints_clause" ):
                listener.exitType_parameter_constraints_clause(self)




    def type_parameter_constraints_clause(self):

        localctx = CSharpParser.Type_parameter_constraints_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 310, self.RULE_type_parameter_constraints_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2096
            self.match(CSharpParser.WHERE)
            self.state = 2097
            self.identifier()
            self.state = 2098
            self.match(CSharpParser.COLON)
            self.state = 2099
            self.type_parameter_constraints()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Type_parameter_constraintsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def constructor_constraint(self):
            return self.getTypedRuleContext(CSharpParser.Constructor_constraintContext,0)


        def primary_constraint(self):
            return self.getTypedRuleContext(CSharpParser.Primary_constraintContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.COMMA)
            else:
                return self.getToken(CSharpParser.COMMA, i)

        def secondary_constraints(self):
            return self.getTypedRuleContext(CSharpParser.Secondary_constraintsContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_type_parameter_constraints

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterType_parameter_constraints" ):
                listener.enterType_parameter_constraints(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitType_parameter_constraints" ):
                listener.exitType_parameter_constraints(self)




    def type_parameter_constraints(self):

        localctx = CSharpParser.Type_parameter_constraintsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 312, self.RULE_type_parameter_constraints)
        self._la = 0 # Token type
        try:
            self.state = 2111
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [69]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2101
                self.constructor_constraint()
                pass
            elif token in [10, 12, 13, 15, 16, 17, 21, 27, 33, 36, 39, 49, 50, 53, 61, 63, 64, 67, 72, 73, 76, 80, 86, 90, 91, 96, 97, 107, 111, 115, 116, 118, 120]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2102
                self.primary_constraint()
                self.state = 2105
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,222,self._ctx)
                if la_ == 1:
                    self.state = 2103
                    self.match(CSharpParser.COMMA)
                    self.state = 2104
                    self.secondary_constraints()


                self.state = 2109
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==138:
                    self.state = 2107
                    self.match(CSharpParser.COMMA)
                    self.state = 2108
                    self.constructor_constraint()


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Primary_constraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def class_type(self):
            return self.getTypedRuleContext(CSharpParser.Class_typeContext,0)


        def CLASS(self):
            return self.getToken(CSharpParser.CLASS, 0)

        def INTERR(self):
            return self.getToken(CSharpParser.INTERR, 0)

        def STRUCT(self):
            return self.getToken(CSharpParser.STRUCT, 0)

        def UNMANAGED(self):
            return self.getToken(CSharpParser.UNMANAGED, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_primary_constraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrimary_constraint" ):
                listener.enterPrimary_constraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrimary_constraint" ):
                listener.exitPrimary_constraint(self)




    def primary_constraint(self):

        localctx = CSharpParser.Primary_constraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 314, self.RULE_primary_constraint)
        self._la = 0 # Token type
        try:
            self.state = 2120
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,226,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2113
                self.class_type()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2114
                self.match(CSharpParser.CLASS)
                self.state = 2116
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==154:
                    self.state = 2115
                    self.match(CSharpParser.INTERR)


                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2118
                self.match(CSharpParser.STRUCT)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2119
                self.match(CSharpParser.UNMANAGED)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PatternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declaration_pattern(self):
            return self.getTypedRuleContext(CSharpParser.Declaration_patternContext,0)


        def constant_pattern(self):
            return self.getTypedRuleContext(CSharpParser.Constant_patternContext,0)


        def var_pattern(self):
            return self.getTypedRuleContext(CSharpParser.Var_patternContext,0)


        def relational_pattern(self):
            return self.getTypedRuleContext(CSharpParser.Relational_patternContext,0)


        def and_pattern(self):
            return self.getTypedRuleContext(CSharpParser.And_patternContext,0)


        def or_pattern(self):
            return self.getTypedRuleContext(CSharpParser.Or_patternContext,0)


        def not_pattern(self):
            return self.getTypedRuleContext(CSharpParser.Not_patternContext,0)


        def expression(self):
            return self.getTypedRuleContext(CSharpParser.ExpressionContext,0)


        def is_pattern(self):
            return self.getTypedRuleContext(CSharpParser.Is_patternContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_pattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPattern" ):
                listener.enterPattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPattern" ):
                listener.exitPattern(self)




    def pattern(self):

        localctx = CSharpParser.PatternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 316, self.RULE_pattern)
        try:
            self.state = 2131
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,227,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2122
                self.declaration_pattern()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2123
                self.constant_pattern()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2124
                self.var_pattern()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2125
                self.relational_pattern()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 2126
                self.and_pattern()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 2127
                self.or_pattern()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 2128
                self.not_pattern()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 2129
                self.expression()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 2130
                self.is_pattern()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Is_patternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def type_(self):
            return self.getTypedRuleContext(CSharpParser.Type_Context,0)


        def simple_designation(self):
            return self.getTypedRuleContext(CSharpParser.Simple_designationContext,0)


        def property_pattern(self):
            return self.getTypedRuleContext(CSharpParser.Property_patternContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_is_pattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIs_pattern" ):
                listener.enterIs_pattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIs_pattern" ):
                listener.exitIs_pattern(self)




    def is_pattern(self):

        localctx = CSharpParser.Is_patternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 318, self.RULE_is_pattern)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2134
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,228,self._ctx)
            if la_ == 1:
                self.state = 2133
                self.type_()


            self.state = 2137
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,229,self._ctx)
            if la_ == 1:
                self.state = 2136
                self.simple_designation()


            self.state = 2140
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==131:
                self.state = 2139
                self.property_pattern()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Property_patternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_BRACE(self):
            return self.getToken(CSharpParser.OPEN_BRACE, 0)

        def property_pattern_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Property_pattern_clauseContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Property_pattern_clauseContext,i)


        def CLOSE_BRACE(self):
            return self.getToken(CSharpParser.CLOSE_BRACE, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.COMMA)
            else:
                return self.getToken(CSharpParser.COMMA, i)

        def getRuleIndex(self):
            return CSharpParser.RULE_property_pattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProperty_pattern" ):
                listener.enterProperty_pattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProperty_pattern" ):
                listener.exitProperty_pattern(self)




    def property_pattern(self):

        localctx = CSharpParser.Property_patternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 320, self.RULE_property_pattern)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2142
            self.match(CSharpParser.OPEN_BRACE)
            self.state = 2143
            self.property_pattern_clause()
            self.state = 2148
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==138:
                self.state = 2144
                self.match(CSharpParser.COMMA)
                self.state = 2145
                self.property_pattern_clause()
                self.state = 2150
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2151
            self.match(CSharpParser.CLOSE_BRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Property_pattern_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(CSharpParser.IdentifierContext,0)


        def COLON(self):
            return self.getToken(CSharpParser.COLON, 0)

        def pattern(self):
            return self.getTypedRuleContext(CSharpParser.PatternContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_property_pattern_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProperty_pattern_clause" ):
                listener.enterProperty_pattern_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProperty_pattern_clause" ):
                listener.exitProperty_pattern_clause(self)




    def property_pattern_clause(self):

        localctx = CSharpParser.Property_pattern_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 322, self.RULE_property_pattern_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2153
            self.identifier()
            self.state = 2154
            self.match(CSharpParser.COLON)
            self.state = 2155
            self.pattern()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Relational_patternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LT(self):
            return self.getToken(CSharpParser.LT, 0)

        def expression(self):
            return self.getTypedRuleContext(CSharpParser.ExpressionContext,0)


        def OP_LE(self):
            return self.getToken(CSharpParser.OP_LE, 0)

        def GT(self):
            return self.getToken(CSharpParser.GT, 0)

        def OP_GE(self):
            return self.getToken(CSharpParser.OP_GE, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_relational_pattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRelational_pattern" ):
                listener.enterRelational_pattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRelational_pattern" ):
                listener.exitRelational_pattern(self)




    def relational_pattern(self):

        localctx = CSharpParser.Relational_patternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 324, self.RULE_relational_pattern)
        try:
            self.state = 2165
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [152]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2157
                self.match(CSharpParser.LT)
                self.state = 2158
                self.expression()
                pass
            elif token in [164]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2159
                self.match(CSharpParser.OP_LE)
                self.state = 2160
                self.expression()
                pass
            elif token in [153]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2161
                self.match(CSharpParser.GT)
                self.state = 2162
                self.expression()
                pass
            elif token in [165]:
                self.enterOuterAlt(localctx, 4)
                self.state = 2163
                self.match(CSharpParser.OP_GE)
                self.state = 2164
                self.expression()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class And_patternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def relational_pattern(self):
            return self.getTypedRuleContext(CSharpParser.Relational_patternContext,0)


        def AND(self):
            return self.getToken(CSharpParser.AND, 0)

        def pattern(self):
            return self.getTypedRuleContext(CSharpParser.PatternContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_and_pattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnd_pattern" ):
                listener.enterAnd_pattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnd_pattern" ):
                listener.exitAnd_pattern(self)




    def and_pattern(self):

        localctx = CSharpParser.And_patternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 326, self.RULE_and_pattern)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2167
            self.relational_pattern()
            self.state = 2168
            self.match(CSharpParser.AND)
            self.state = 2169
            self.pattern()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Or_patternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def relational_pattern(self):
            return self.getTypedRuleContext(CSharpParser.Relational_patternContext,0)


        def OR(self):
            return self.getToken(CSharpParser.OR, 0)

        def pattern(self):
            return self.getTypedRuleContext(CSharpParser.PatternContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_or_pattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOr_pattern" ):
                listener.enterOr_pattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOr_pattern" ):
                listener.exitOr_pattern(self)




    def or_pattern(self):

        localctx = CSharpParser.Or_patternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 328, self.RULE_or_pattern)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2171
            self.relational_pattern()
            self.state = 2172
            self.match(CSharpParser.OR)
            self.state = 2173
            self.pattern()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Not_patternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NOT(self):
            return self.getToken(CSharpParser.NOT, 0)

        def pattern(self):
            return self.getTypedRuleContext(CSharpParser.PatternContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_not_pattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNot_pattern" ):
                listener.enterNot_pattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNot_pattern" ):
                listener.exitNot_pattern(self)




    def not_pattern(self):

        localctx = CSharpParser.Not_patternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 330, self.RULE_not_pattern)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2175
            self.match(CSharpParser.NOT)
            self.state = 2176
            self.pattern()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Declaration_patternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def type_(self):
            return self.getTypedRuleContext(CSharpParser.Type_Context,0)


        def simple_designation(self):
            return self.getTypedRuleContext(CSharpParser.Simple_designationContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_declaration_pattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclaration_pattern" ):
                listener.enterDeclaration_pattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclaration_pattern" ):
                listener.exitDeclaration_pattern(self)




    def declaration_pattern(self):

        localctx = CSharpParser.Declaration_patternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 332, self.RULE_declaration_pattern)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2178
            self.type_()
            self.state = 2179
            self.simple_designation()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Simple_designationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def single_variable_designation(self):
            return self.getTypedRuleContext(CSharpParser.Single_variable_designationContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_simple_designation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimple_designation" ):
                listener.enterSimple_designation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimple_designation" ):
                listener.exitSimple_designation(self)




    def simple_designation(self):

        localctx = CSharpParser.Simple_designationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 334, self.RULE_simple_designation)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2181
            self.single_variable_designation()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Single_variable_designationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(CSharpParser.IdentifierContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_single_variable_designation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSingle_variable_designation" ):
                listener.enterSingle_variable_designation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSingle_variable_designation" ):
                listener.exitSingle_variable_designation(self)




    def single_variable_designation(self):

        localctx = CSharpParser.Single_variable_designationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 336, self.RULE_single_variable_designation)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2183
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Constant_patternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def constant_expression(self):
            return self.getTypedRuleContext(CSharpParser.Constant_expressionContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_constant_pattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstant_pattern" ):
                listener.enterConstant_pattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstant_pattern" ):
                listener.exitConstant_pattern(self)




    def constant_pattern(self):

        localctx = CSharpParser.Constant_patternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 338, self.RULE_constant_pattern)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2185
            self.constant_expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Var_patternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VAR(self):
            return self.getToken(CSharpParser.VAR, 0)

        def designation(self):
            return self.getTypedRuleContext(CSharpParser.DesignationContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_var_pattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVar_pattern" ):
                listener.enterVar_pattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVar_pattern" ):
                listener.exitVar_pattern(self)




    def var_pattern(self):

        localctx = CSharpParser.Var_patternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 340, self.RULE_var_pattern)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2187
            self.match(CSharpParser.VAR)
            self.state = 2188
            self.designation()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DesignationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simple_designation(self):
            return self.getTypedRuleContext(CSharpParser.Simple_designationContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_designation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDesignation" ):
                listener.enterDesignation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDesignation" ):
                listener.exitDesignation(self)




    def designation(self):

        localctx = CSharpParser.DesignationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 342, self.RULE_designation)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2190
            self.simple_designation()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Module_initializer_declarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def attributes(self):
            return self.getTypedRuleContext(CSharpParser.AttributesContext,0)


        def STATIC(self):
            return self.getToken(CSharpParser.STATIC, 0)

        def VOID(self):
            return self.getToken(CSharpParser.VOID, 0)

        def identifier(self):
            return self.getTypedRuleContext(CSharpParser.IdentifierContext,0)


        def OPEN_PARENS(self):
            return self.getToken(CSharpParser.OPEN_PARENS, 0)

        def CLOSE_PARENS(self):
            return self.getToken(CSharpParser.CLOSE_PARENS, 0)

        def method_body(self):
            return self.getTypedRuleContext(CSharpParser.Method_bodyContext,0)


        def INTERNAL(self):
            return self.getToken(CSharpParser.INTERNAL, 0)

        def PUBLIC(self):
            return self.getToken(CSharpParser.PUBLIC, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_module_initializer_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModule_initializer_declaration" ):
                listener.enterModule_initializer_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModule_initializer_declaration" ):
                listener.exitModule_initializer_declaration(self)




    def module_initializer_declaration(self):

        localctx = CSharpParser.Module_initializer_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 344, self.RULE_module_initializer_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2192
            self.attributes()
            self.state = 2194
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==59:
                self.state = 2193
                self.match(CSharpParser.INTERNAL)


            self.state = 2197
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==83:
                self.state = 2196
                self.match(CSharpParser.PUBLIC)


            self.state = 2199
            self.match(CSharpParser.STATIC)
            self.state = 2200
            self.match(CSharpParser.VOID)
            self.state = 2201
            self.identifier()
            self.state = 2202
            self.match(CSharpParser.OPEN_PARENS)
            self.state = 2203
            self.match(CSharpParser.CLOSE_PARENS)
            self.state = 2204
            self.method_body()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Secondary_constraintsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def namespace_or_type_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Namespace_or_type_nameContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Namespace_or_type_nameContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.COMMA)
            else:
                return self.getToken(CSharpParser.COMMA, i)

        def getRuleIndex(self):
            return CSharpParser.RULE_secondary_constraints

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSecondary_constraints" ):
                listener.enterSecondary_constraints(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSecondary_constraints" ):
                listener.exitSecondary_constraints(self)




    def secondary_constraints(self):

        localctx = CSharpParser.Secondary_constraintsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 346, self.RULE_secondary_constraints)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2206
            self.namespace_or_type_name()
            self.state = 2211
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,235,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2207
                    self.match(CSharpParser.COMMA)
                    self.state = 2208
                    self.namespace_or_type_name() 
                self.state = 2213
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,235,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Constructor_constraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NEW(self):
            return self.getToken(CSharpParser.NEW, 0)

        def OPEN_PARENS(self):
            return self.getToken(CSharpParser.OPEN_PARENS, 0)

        def CLOSE_PARENS(self):
            return self.getToken(CSharpParser.CLOSE_PARENS, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_constructor_constraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstructor_constraint" ):
                listener.enterConstructor_constraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstructor_constraint" ):
                listener.exitConstructor_constraint(self)




    def constructor_constraint(self):

        localctx = CSharpParser.Constructor_constraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 348, self.RULE_constructor_constraint)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2214
            self.match(CSharpParser.NEW)
            self.state = 2215
            self.match(CSharpParser.OPEN_PARENS)
            self.state = 2216
            self.match(CSharpParser.CLOSE_PARENS)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Class_bodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_BRACE(self):
            return self.getToken(CSharpParser.OPEN_BRACE, 0)

        def CLOSE_BRACE(self):
            return self.getToken(CSharpParser.CLOSE_BRACE, 0)

        def class_member_declarations(self):
            return self.getTypedRuleContext(CSharpParser.Class_member_declarationsContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_class_body

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClass_body" ):
                listener.enterClass_body(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClass_body" ):
                listener.exitClass_body(self)




    def class_body(self):

        localctx = CSharpParser.Class_bodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 350, self.RULE_class_body)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2218
            self.match(CSharpParser.OPEN_BRACE)
            self.state = 2220
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & -5861918857535703552) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 135032138079621933) != 0) or ((((_la - 133)) & ~0x3f) == 0 and ((1 << (_la - 133)) & 131077) != 0):
                self.state = 2219
                self.class_member_declarations()


            self.state = 2222
            self.match(CSharpParser.CLOSE_BRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Class_member_declarationsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def class_member_declaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Class_member_declarationContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Class_member_declarationContext,i)


        def getRuleIndex(self):
            return CSharpParser.RULE_class_member_declarations

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClass_member_declarations" ):
                listener.enterClass_member_declarations(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClass_member_declarations" ):
                listener.exitClass_member_declarations(self)




    def class_member_declarations(self):

        localctx = CSharpParser.Class_member_declarationsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 352, self.RULE_class_member_declarations)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2225 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 2224
                self.class_member_declaration()
                self.state = 2227 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & -5861918857535703552) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 135032138079621933) != 0) or ((((_la - 133)) & ~0x3f) == 0 and ((1 << (_la - 133)) & 131077) != 0)):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Class_member_declarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def common_member_declaration(self):
            return self.getTypedRuleContext(CSharpParser.Common_member_declarationContext,0)


        def destructor_definition(self):
            return self.getTypedRuleContext(CSharpParser.Destructor_definitionContext,0)


        def attributes(self):
            return self.getTypedRuleContext(CSharpParser.AttributesContext,0)


        def all_member_modifiers(self):
            return self.getTypedRuleContext(CSharpParser.All_member_modifiersContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_class_member_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClass_member_declaration" ):
                listener.enterClass_member_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClass_member_declaration" ):
                listener.exitClass_member_declaration(self)




    def class_member_declaration(self):

        localctx = CSharpParser.Class_member_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 354, self.RULE_class_member_declaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2230
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,238,self._ctx)
            if la_ == 1:
                self.state = 2229
                self.attributes()


            self.state = 2233
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,239,self._ctx)
            if la_ == 1:
                self.state = 2232
                self.all_member_modifiers()


            self.state = 2237
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [9, 10, 12, 13, 15, 16, 17, 19, 21, 22, 25, 27, 28, 30, 32, 33, 35, 36, 38, 39, 40, 41, 42, 46, 49, 50, 53, 55, 57, 58, 59, 61, 63, 64, 66, 67, 69, 72, 73, 76, 78, 80, 81, 82, 83, 84, 85, 86, 88, 89, 90, 91, 92, 95, 96, 97, 104, 105, 107, 108, 109, 111, 112, 113, 115, 116, 118, 119, 120, 133, 135]:
                self.state = 2235
                self.common_member_declaration()
                pass
            elif token in [150]:
                self.state = 2236
                self.destructor_definition()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class All_member_modifiersContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def all_member_modifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.All_member_modifierContext)
            else:
                return self.getTypedRuleContext(CSharpParser.All_member_modifierContext,i)


        def getRuleIndex(self):
            return CSharpParser.RULE_all_member_modifiers

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAll_member_modifiers" ):
                listener.enterAll_member_modifiers(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAll_member_modifiers" ):
                listener.exitAll_member_modifiers(self)




    def all_member_modifiers(self):

        localctx = CSharpParser.All_member_modifiersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 356, self.RULE_all_member_modifiers)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2240 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 2239
                    self.all_member_modifier()

                else:
                    raise NoViableAltException(self)
                self.state = 2242 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,241,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class All_member_modifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NEW(self):
            return self.getToken(CSharpParser.NEW, 0)

        def PUBLIC(self):
            return self.getToken(CSharpParser.PUBLIC, 0)

        def PROTECTED(self):
            return self.getToken(CSharpParser.PROTECTED, 0)

        def INTERNAL(self):
            return self.getToken(CSharpParser.INTERNAL, 0)

        def PRIVATE(self):
            return self.getToken(CSharpParser.PRIVATE, 0)

        def READONLY(self):
            return self.getToken(CSharpParser.READONLY, 0)

        def VOLATILE(self):
            return self.getToken(CSharpParser.VOLATILE, 0)

        def VIRTUAL(self):
            return self.getToken(CSharpParser.VIRTUAL, 0)

        def SEALED(self):
            return self.getToken(CSharpParser.SEALED, 0)

        def OVERRIDE(self):
            return self.getToken(CSharpParser.OVERRIDE, 0)

        def ABSTRACT(self):
            return self.getToken(CSharpParser.ABSTRACT, 0)

        def STATIC(self):
            return self.getToken(CSharpParser.STATIC, 0)

        def UNSAFE(self):
            return self.getToken(CSharpParser.UNSAFE, 0)

        def EXTERN(self):
            return self.getToken(CSharpParser.EXTERN, 0)

        def PARTIAL(self):
            return self.getToken(CSharpParser.PARTIAL, 0)

        def ASYNC(self):
            return self.getToken(CSharpParser.ASYNC, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_all_member_modifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAll_member_modifier" ):
                listener.enterAll_member_modifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAll_member_modifier" ):
                listener.exitAll_member_modifier(self)




    def all_member_modifier(self):

        localctx = CSharpParser.All_member_modifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 358, self.RULE_all_member_modifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2244
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 576465150350000640) != 0) or ((((_la - 69)) & ~0x3f) == 0 and ((1 << (_la - 69)) & 44530289146369) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Common_member_declarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def constant_declaration(self):
            return self.getTypedRuleContext(CSharpParser.Constant_declarationContext,0)


        def typed_member_declaration(self):
            return self.getTypedRuleContext(CSharpParser.Typed_member_declarationContext,0)


        def event_declaration(self):
            return self.getTypedRuleContext(CSharpParser.Event_declarationContext,0)


        def conversion_operator_declarator(self):
            return self.getTypedRuleContext(CSharpParser.Conversion_operator_declaratorContext,0)


        def body(self):
            return self.getTypedRuleContext(CSharpParser.BodyContext,0)


        def right_arrow(self):
            return self.getTypedRuleContext(CSharpParser.Right_arrowContext,0)


        def throwable_expression(self):
            return self.getTypedRuleContext(CSharpParser.Throwable_expressionContext,0)


        def SEMICOLON(self):
            return self.getToken(CSharpParser.SEMICOLON, 0)

        def constructor_declaration(self):
            return self.getTypedRuleContext(CSharpParser.Constructor_declarationContext,0)


        def method_declaration(self):
            return self.getTypedRuleContext(CSharpParser.Method_declarationContext,0)


        def class_definition(self):
            return self.getTypedRuleContext(CSharpParser.Class_definitionContext,0)


        def struct_definition(self):
            return self.getTypedRuleContext(CSharpParser.Struct_definitionContext,0)


        def interface_definition(self):
            return self.getTypedRuleContext(CSharpParser.Interface_definitionContext,0)


        def enum_definition(self):
            return self.getTypedRuleContext(CSharpParser.Enum_definitionContext,0)


        def delegate_definition(self):
            return self.getTypedRuleContext(CSharpParser.Delegate_definitionContext,0)


        def record_definition(self):
            return self.getTypedRuleContext(CSharpParser.Record_definitionContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_common_member_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCommon_member_declaration" ):
                listener.enterCommon_member_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCommon_member_declaration" ):
                listener.exitCommon_member_declaration(self)




    def common_member_declaration(self):

        localctx = CSharpParser.Common_member_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 360, self.RULE_common_member_declaration)
        try:
            self.state = 2265
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,243,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2246
                self.constant_declaration()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2247
                self.typed_member_declaration()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2248
                self.event_declaration()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2249
                self.conversion_operator_declarator()
                self.state = 2255
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,242,self._ctx)
                if la_ == 1:
                    self.state = 2250
                    self.body()
                    pass

                elif la_ == 2:
                    self.state = 2251
                    self.right_arrow()
                    self.state = 2252
                    self.throwable_expression()
                    self.state = 2253
                    self.match(CSharpParser.SEMICOLON)
                    pass


                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 2257
                self.constructor_declaration()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 2258
                self.method_declaration()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 2259
                self.class_definition()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 2260
                self.struct_definition()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 2261
                self.interface_definition()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 2262
                self.enum_definition()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 2263
                self.delegate_definition()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 2264
                self.record_definition()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Typed_member_declarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def type_(self):
            return self.getTypedRuleContext(CSharpParser.Type_Context,0)


        def namespace_or_type_name(self):
            return self.getTypedRuleContext(CSharpParser.Namespace_or_type_nameContext,0)


        def DOT(self):
            return self.getToken(CSharpParser.DOT, 0)

        def indexer_declaration(self):
            return self.getTypedRuleContext(CSharpParser.Indexer_declarationContext,0)


        def method_declaration(self):
            return self.getTypedRuleContext(CSharpParser.Method_declarationContext,0)


        def property_declaration(self):
            return self.getTypedRuleContext(CSharpParser.Property_declarationContext,0)


        def operator_declaration(self):
            return self.getTypedRuleContext(CSharpParser.Operator_declarationContext,0)


        def field_declaration(self):
            return self.getTypedRuleContext(CSharpParser.Field_declarationContext,0)


        def REF(self):
            return self.getToken(CSharpParser.REF, 0)

        def READONLY(self):
            return self.getToken(CSharpParser.READONLY, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_typed_member_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTyped_member_declaration" ):
                listener.enterTyped_member_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTyped_member_declaration" ):
                listener.exitTyped_member_declaration(self)




    def typed_member_declaration(self):

        localctx = CSharpParser.Typed_member_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 362, self.RULE_typed_member_declaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2272
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,244,self._ctx)
            if la_ == 1:
                self.state = 2267
                self.match(CSharpParser.REF)

            elif la_ == 2:
                self.state = 2268
                self.match(CSharpParser.READONLY)
                self.state = 2269
                self.match(CSharpParser.REF)

            elif la_ == 3:
                self.state = 2270
                self.match(CSharpParser.REF)
                self.state = 2271
                self.match(CSharpParser.READONLY)


            self.state = 2274
            self.type_()
            self.state = 2284
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,245,self._ctx)
            if la_ == 1:
                self.state = 2275
                self.namespace_or_type_name()
                self.state = 2276
                self.match(CSharpParser.DOT)
                self.state = 2277
                self.indexer_declaration()
                pass

            elif la_ == 2:
                self.state = 2279
                self.method_declaration()
                pass

            elif la_ == 3:
                self.state = 2280
                self.property_declaration()
                pass

            elif la_ == 4:
                self.state = 2281
                self.indexer_declaration()
                pass

            elif la_ == 5:
                self.state = 2282
                self.operator_declaration()
                pass

            elif la_ == 6:
                self.state = 2283
                self.field_declaration()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Constant_declaratorsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def constant_declarator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Constant_declaratorContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Constant_declaratorContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.COMMA)
            else:
                return self.getToken(CSharpParser.COMMA, i)

        def getRuleIndex(self):
            return CSharpParser.RULE_constant_declarators

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstant_declarators" ):
                listener.enterConstant_declarators(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstant_declarators" ):
                listener.exitConstant_declarators(self)




    def constant_declarators(self):

        localctx = CSharpParser.Constant_declaratorsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 364, self.RULE_constant_declarators)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2286
            self.constant_declarator()
            self.state = 2291
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==138:
                self.state = 2287
                self.match(CSharpParser.COMMA)
                self.state = 2288
                self.constant_declarator()
                self.state = 2293
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Constant_declaratorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(CSharpParser.IdentifierContext,0)


        def ASSIGNMENT(self):
            return self.getToken(CSharpParser.ASSIGNMENT, 0)

        def expression(self):
            return self.getTypedRuleContext(CSharpParser.ExpressionContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_constant_declarator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstant_declarator" ):
                listener.enterConstant_declarator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstant_declarator" ):
                listener.exitConstant_declarator(self)




    def constant_declarator(self):

        localctx = CSharpParser.Constant_declaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 366, self.RULE_constant_declarator)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2294
            self.identifier()
            self.state = 2295
            self.match(CSharpParser.ASSIGNMENT)
            self.state = 2296
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Variable_declaratorsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def variable_declarator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Variable_declaratorContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Variable_declaratorContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.COMMA)
            else:
                return self.getToken(CSharpParser.COMMA, i)

        def getRuleIndex(self):
            return CSharpParser.RULE_variable_declarators

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariable_declarators" ):
                listener.enterVariable_declarators(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariable_declarators" ):
                listener.exitVariable_declarators(self)




    def variable_declarators(self):

        localctx = CSharpParser.Variable_declaratorsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 368, self.RULE_variable_declarators)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2298
            self.variable_declarator()
            self.state = 2303
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==138:
                self.state = 2299
                self.match(CSharpParser.COMMA)
                self.state = 2300
                self.variable_declarator()
                self.state = 2305
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Variable_declaratorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(CSharpParser.IdentifierContext,0)


        def ASSIGNMENT(self):
            return self.getToken(CSharpParser.ASSIGNMENT, 0)

        def variable_initializer(self):
            return self.getTypedRuleContext(CSharpParser.Variable_initializerContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_variable_declarator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariable_declarator" ):
                listener.enterVariable_declarator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariable_declarator" ):
                listener.exitVariable_declarator(self)




    def variable_declarator(self):

        localctx = CSharpParser.Variable_declaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 370, self.RULE_variable_declarator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2306
            self.identifier()
            self.state = 2309
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==151:
                self.state = 2307
                self.match(CSharpParser.ASSIGNMENT)
                self.state = 2308
                self.variable_initializer()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Variable_initializerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(CSharpParser.ExpressionContext,0)


        def array_initializer(self):
            return self.getTypedRuleContext(CSharpParser.Array_initializerContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_variable_initializer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariable_initializer" ):
                listener.enterVariable_initializer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariable_initializer" ):
                listener.exitVariable_initializer(self)




    def variable_initializer(self):

        localctx = CSharpParser.Variable_initializerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 372, self.RULE_variable_initializer)
        try:
            self.state = 2313
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [10, 12, 13, 15, 16, 17, 18, 19, 21, 22, 25, 26, 30, 31, 32, 33, 35, 36, 39, 43, 46, 49, 50, 53, 57, 61, 63, 64, 66, 67, 69, 71, 72, 73, 76, 80, 85, 86, 88, 90, 91, 92, 93, 94, 95, 96, 99, 101, 103, 104, 105, 106, 107, 109, 111, 115, 116, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 133, 135, 141, 142, 143, 146, 148, 149, 150, 157, 158, 177]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2311
                self.expression()
                pass
            elif token in [131]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2312
                self.array_initializer()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Return_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def type_(self):
            return self.getTypedRuleContext(CSharpParser.Type_Context,0)


        def VOID(self):
            return self.getToken(CSharpParser.VOID, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_return_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReturn_type" ):
                listener.enterReturn_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReturn_type" ):
                listener.exitReturn_type(self)




    def return_type(self):

        localctx = CSharpParser.Return_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 374, self.RULE_return_type)
        try:
            self.state = 2317
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,250,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2315
                self.type_()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2316
                self.match(CSharpParser.VOID)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Member_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def namespace_or_type_name(self):
            return self.getTypedRuleContext(CSharpParser.Namespace_or_type_nameContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_member_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMember_name" ):
                listener.enterMember_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMember_name" ):
                listener.exitMember_name(self)




    def member_name(self):

        localctx = CSharpParser.Member_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 376, self.RULE_member_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2319
            self.namespace_or_type_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Method_bodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def block(self):
            return self.getTypedRuleContext(CSharpParser.BlockContext,0)


        def SEMICOLON(self):
            return self.getToken(CSharpParser.SEMICOLON, 0)

        def right_arrow(self):
            return self.getTypedRuleContext(CSharpParser.Right_arrowContext,0)


        def expression(self):
            return self.getTypedRuleContext(CSharpParser.ExpressionContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_method_body

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMethod_body" ):
                listener.enterMethod_body(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMethod_body" ):
                listener.exitMethod_body(self)




    def method_body(self):

        localctx = CSharpParser.Method_bodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 378, self.RULE_method_body)
        try:
            self.state = 2327
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [131]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2321
                self.block()
                pass
            elif token in [140]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2322
                self.match(CSharpParser.SEMICOLON)
                pass
            elif token in [151]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2323
                self.right_arrow()
                self.state = 2324
                self.expression()
                self.state = 2325
                self.match(CSharpParser.SEMICOLON)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Formal_parameter_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def parameter_array(self):
            return self.getTypedRuleContext(CSharpParser.Parameter_arrayContext,0)


        def fixed_parameters(self):
            return self.getTypedRuleContext(CSharpParser.Fixed_parametersContext,0)


        def COMMA(self):
            return self.getToken(CSharpParser.COMMA, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_formal_parameter_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFormal_parameter_list" ):
                listener.enterFormal_parameter_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFormal_parameter_list" ):
                listener.exitFormal_parameter_list(self)




    def formal_parameter_list(self):

        localctx = CSharpParser.Formal_parameter_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 380, self.RULE_formal_parameter_list)
        self._la = 0 # Token type
        try:
            self.state = 2335
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,253,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2329
                self.parameter_array()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2330
                self.fixed_parameters()
                self.state = 2333
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==138:
                    self.state = 2331
                    self.match(CSharpParser.COMMA)
                    self.state = 2332
                    self.parameter_array()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Fixed_parametersContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fixed_parameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Fixed_parameterContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Fixed_parameterContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.COMMA)
            else:
                return self.getToken(CSharpParser.COMMA, i)

        def getRuleIndex(self):
            return CSharpParser.RULE_fixed_parameters

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFixed_parameters" ):
                listener.enterFixed_parameters(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFixed_parameters" ):
                listener.exitFixed_parameters(self)




    def fixed_parameters(self):

        localctx = CSharpParser.Fixed_parametersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 382, self.RULE_fixed_parameters)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2337
            self.fixed_parameter()
            self.state = 2342
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,254,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2338
                    self.match(CSharpParser.COMMA)
                    self.state = 2339
                    self.fixed_parameter() 
                self.state = 2344
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,254,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Fixed_parameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def arg_declaration(self):
            return self.getTypedRuleContext(CSharpParser.Arg_declarationContext,0)


        def attributes(self):
            return self.getTypedRuleContext(CSharpParser.AttributesContext,0)


        def parameter_modifier(self):
            return self.getTypedRuleContext(CSharpParser.Parameter_modifierContext,0)


        def ARGLIST(self):
            return self.getToken(CSharpParser.ARGLIST, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_fixed_parameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFixed_parameter" ):
                listener.enterFixed_parameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFixed_parameter" ):
                listener.exitFixed_parameter(self)




    def fixed_parameter(self):

        localctx = CSharpParser.Fixed_parameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 384, self.RULE_fixed_parameter)
        self._la = 0 # Token type
        try:
            self.state = 2353
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,257,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2346
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==133:
                    self.state = 2345
                    self.attributes()


                self.state = 2349
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 56)) & ~0x3f) == 0 and ((1 << (_la - 56)) & 8796631990273) != 0):
                    self.state = 2348
                    self.parameter_modifier()


                self.state = 2351
                self.arg_declaration()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2352
                self.match(CSharpParser.ARGLIST)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Parameter_modifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REF(self):
            return self.getToken(CSharpParser.REF, 0)

        def OUT(self):
            return self.getToken(CSharpParser.OUT, 0)

        def IN(self):
            return self.getToken(CSharpParser.IN, 0)

        def THIS(self):
            return self.getToken(CSharpParser.THIS, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_parameter_modifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParameter_modifier" ):
                listener.enterParameter_modifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParameter_modifier" ):
                listener.exitParameter_modifier(self)




    def parameter_modifier(self):

        localctx = CSharpParser.Parameter_modifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 386, self.RULE_parameter_modifier)
        try:
            self.state = 2363
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,258,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2355
                self.match(CSharpParser.REF)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2356
                self.match(CSharpParser.OUT)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2357
                self.match(CSharpParser.IN)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2358
                self.match(CSharpParser.REF)
                self.state = 2359
                self.match(CSharpParser.THIS)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 2360
                self.match(CSharpParser.IN)
                self.state = 2361
                self.match(CSharpParser.THIS)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 2362
                self.match(CSharpParser.THIS)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Parameter_arrayContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PARAMS(self):
            return self.getToken(CSharpParser.PARAMS, 0)

        def array_type(self):
            return self.getTypedRuleContext(CSharpParser.Array_typeContext,0)


        def identifier(self):
            return self.getTypedRuleContext(CSharpParser.IdentifierContext,0)


        def attributes(self):
            return self.getTypedRuleContext(CSharpParser.AttributesContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_parameter_array

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParameter_array" ):
                listener.enterParameter_array(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParameter_array" ):
                listener.exitParameter_array(self)




    def parameter_array(self):

        localctx = CSharpParser.Parameter_arrayContext(self, self._ctx, self.state)
        self.enterRule(localctx, 388, self.RULE_parameter_array)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2366
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==133:
                self.state = 2365
                self.attributes()


            self.state = 2368
            self.match(CSharpParser.PARAMS)
            self.state = 2369
            self.array_type()
            self.state = 2370
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Accessor_declarationsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.attrs = None # AttributesContext
            self.mods = None # Accessor_modifierContext

        def GET(self):
            return self.getToken(CSharpParser.GET, 0)

        def accessor_body(self):
            return self.getTypedRuleContext(CSharpParser.Accessor_bodyContext,0)


        def SET(self):
            return self.getToken(CSharpParser.SET, 0)

        def INIT(self):
            return self.getToken(CSharpParser.INIT, 0)

        def attributes(self):
            return self.getTypedRuleContext(CSharpParser.AttributesContext,0)


        def accessor_modifier(self):
            return self.getTypedRuleContext(CSharpParser.Accessor_modifierContext,0)


        def set_accessor_declaration(self):
            return self.getTypedRuleContext(CSharpParser.Set_accessor_declarationContext,0)


        def get_accessor_declaration(self):
            return self.getTypedRuleContext(CSharpParser.Get_accessor_declarationContext,0)


        def init_accessor_declaration(self):
            return self.getTypedRuleContext(CSharpParser.Init_accessor_declarationContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_accessor_declarations

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAccessor_declarations" ):
                listener.enterAccessor_declarations(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAccessor_declarations" ):
                listener.exitAccessor_declarations(self)




    def accessor_declarations(self):

        localctx = CSharpParser.Accessor_declarationsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 390, self.RULE_accessor_declarations)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2373
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==133:
                self.state = 2372
                localctx.attrs = self.attributes()


            self.state = 2376
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 59)) & ~0x3f) == 0 and ((1 << (_la - 59)) & 46137345) != 0):
                self.state = 2375
                localctx.mods = self.accessor_modifier()


            self.state = 2398
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,266,self._ctx)
            if la_ == 1:
                self.state = 2378
                self.match(CSharpParser.GET)
                self.state = 2379
                self.accessor_body()
                self.state = 2381
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==59 or ((((_la - 81)) & ~0x3f) == 0 and ((1 << (_la - 81)) & 4503599627371531) != 0):
                    self.state = 2380
                    self.set_accessor_declaration()


                pass

            elif la_ == 2:
                self.state = 2383
                self.match(CSharpParser.SET)
                self.state = 2384
                self.accessor_body()
                self.state = 2386
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==50 or _la==59 or ((((_la - 81)) & ~0x3f) == 0 and ((1 << (_la - 81)) & 4503599627370507) != 0):
                    self.state = 2385
                    self.get_accessor_declaration()


                pass

            elif la_ == 3:
                self.state = 2388
                self.match(CSharpParser.GET)
                self.state = 2389
                self.accessor_body()
                self.state = 2391
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==60 or _la==133:
                    self.state = 2390
                    self.init_accessor_declaration()


                pass

            elif la_ == 4:
                self.state = 2393
                self.match(CSharpParser.INIT)
                self.state = 2394
                self.accessor_body()
                self.state = 2396
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==50 or _la==59 or ((((_la - 81)) & ~0x3f) == 0 and ((1 << (_la - 81)) & 4503599627370507) != 0):
                    self.state = 2395
                    self.get_accessor_declaration()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Init_accessor_declarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INIT(self):
            return self.getToken(CSharpParser.INIT, 0)

        def accessor_body(self):
            return self.getTypedRuleContext(CSharpParser.Accessor_bodyContext,0)


        def attributes(self):
            return self.getTypedRuleContext(CSharpParser.AttributesContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_init_accessor_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInit_accessor_declaration" ):
                listener.enterInit_accessor_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInit_accessor_declaration" ):
                listener.exitInit_accessor_declaration(self)




    def init_accessor_declaration(self):

        localctx = CSharpParser.Init_accessor_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 392, self.RULE_init_accessor_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2401
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==133:
                self.state = 2400
                self.attributes()


            self.state = 2403
            self.match(CSharpParser.INIT)
            self.state = 2404
            self.accessor_body()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Get_accessor_declarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GET(self):
            return self.getToken(CSharpParser.GET, 0)

        def accessor_body(self):
            return self.getTypedRuleContext(CSharpParser.Accessor_bodyContext,0)


        def attributes(self):
            return self.getTypedRuleContext(CSharpParser.AttributesContext,0)


        def accessor_modifier(self):
            return self.getTypedRuleContext(CSharpParser.Accessor_modifierContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_get_accessor_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGet_accessor_declaration" ):
                listener.enterGet_accessor_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGet_accessor_declaration" ):
                listener.exitGet_accessor_declaration(self)




    def get_accessor_declaration(self):

        localctx = CSharpParser.Get_accessor_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 394, self.RULE_get_accessor_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2407
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==133:
                self.state = 2406
                self.attributes()


            self.state = 2410
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 59)) & ~0x3f) == 0 and ((1 << (_la - 59)) & 46137345) != 0):
                self.state = 2409
                self.accessor_modifier()


            self.state = 2412
            self.match(CSharpParser.GET)
            self.state = 2413
            self.accessor_body()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Set_accessor_declarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SET(self):
            return self.getToken(CSharpParser.SET, 0)

        def accessor_body(self):
            return self.getTypedRuleContext(CSharpParser.Accessor_bodyContext,0)


        def attributes(self):
            return self.getTypedRuleContext(CSharpParser.AttributesContext,0)


        def accessor_modifier(self):
            return self.getTypedRuleContext(CSharpParser.Accessor_modifierContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_set_accessor_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSet_accessor_declaration" ):
                listener.enterSet_accessor_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSet_accessor_declaration" ):
                listener.exitSet_accessor_declaration(self)




    def set_accessor_declaration(self):

        localctx = CSharpParser.Set_accessor_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 396, self.RULE_set_accessor_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2416
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==133:
                self.state = 2415
                self.attributes()


            self.state = 2419
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 59)) & ~0x3f) == 0 and ((1 << (_la - 59)) & 46137345) != 0):
                self.state = 2418
                self.accessor_modifier()


            self.state = 2421
            self.match(CSharpParser.SET)
            self.state = 2422
            self.accessor_body()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Accessor_modifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PROTECTED(self):
            return self.getToken(CSharpParser.PROTECTED, 0)

        def INTERNAL(self):
            return self.getToken(CSharpParser.INTERNAL, 0)

        def PRIVATE(self):
            return self.getToken(CSharpParser.PRIVATE, 0)

        def READONLY(self):
            return self.getToken(CSharpParser.READONLY, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_accessor_modifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAccessor_modifier" ):
                listener.enterAccessor_modifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAccessor_modifier" ):
                listener.exitAccessor_modifier(self)




    def accessor_modifier(self):

        localctx = CSharpParser.Accessor_modifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 398, self.RULE_accessor_modifier)
        try:
            self.state = 2436
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,272,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2424
                self.match(CSharpParser.PROTECTED)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2425
                self.match(CSharpParser.INTERNAL)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2426
                self.match(CSharpParser.PRIVATE)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2427
                self.match(CSharpParser.PROTECTED)
                self.state = 2428
                self.match(CSharpParser.INTERNAL)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 2429
                self.match(CSharpParser.INTERNAL)
                self.state = 2430
                self.match(CSharpParser.PROTECTED)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 2431
                self.match(CSharpParser.PROTECTED)
                self.state = 2432
                self.match(CSharpParser.PRIVATE)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 2433
                self.match(CSharpParser.PRIVATE)
                self.state = 2434
                self.match(CSharpParser.PROTECTED)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 2435
                self.match(CSharpParser.READONLY)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Accessor_bodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def block(self):
            return self.getTypedRuleContext(CSharpParser.BlockContext,0)


        def right_arrow(self):
            return self.getTypedRuleContext(CSharpParser.Right_arrowContext,0)


        def expression(self):
            return self.getTypedRuleContext(CSharpParser.ExpressionContext,0)


        def SEMICOLON(self):
            return self.getToken(CSharpParser.SEMICOLON, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_accessor_body

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAccessor_body" ):
                listener.enterAccessor_body(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAccessor_body" ):
                listener.exitAccessor_body(self)




    def accessor_body(self):

        localctx = CSharpParser.Accessor_bodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 400, self.RULE_accessor_body)
        try:
            self.state = 2444
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [131]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2438
                self.block()
                pass
            elif token in [151]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2439
                self.right_arrow()
                self.state = 2440
                self.expression()
                self.state = 2441
                self.match(CSharpParser.SEMICOLON)
                pass
            elif token in [140]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2443
                self.match(CSharpParser.SEMICOLON)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Event_accessor_declarationsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ADD(self):
            return self.getToken(CSharpParser.ADD, 0)

        def block(self):
            return self.getTypedRuleContext(CSharpParser.BlockContext,0)


        def remove_accessor_declaration(self):
            return self.getTypedRuleContext(CSharpParser.Remove_accessor_declarationContext,0)


        def REMOVE(self):
            return self.getToken(CSharpParser.REMOVE, 0)

        def add_accessor_declaration(self):
            return self.getTypedRuleContext(CSharpParser.Add_accessor_declarationContext,0)


        def attributes(self):
            return self.getTypedRuleContext(CSharpParser.AttributesContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_event_accessor_declarations

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEvent_accessor_declarations" ):
                listener.enterEvent_accessor_declarations(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEvent_accessor_declarations" ):
                listener.exitEvent_accessor_declarations(self)




    def event_accessor_declarations(self):

        localctx = CSharpParser.Event_accessor_declarationsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 402, self.RULE_event_accessor_declarations)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2447
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==133:
                self.state = 2446
                self.attributes()


            self.state = 2457
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [10]:
                self.state = 2449
                self.match(CSharpParser.ADD)
                self.state = 2450
                self.block()
                self.state = 2451
                self.remove_accessor_declaration()
                pass
            elif token in [86]:
                self.state = 2453
                self.match(CSharpParser.REMOVE)
                self.state = 2454
                self.block()
                self.state = 2455
                self.add_accessor_declaration()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Add_accessor_declarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ADD(self):
            return self.getToken(CSharpParser.ADD, 0)

        def block(self):
            return self.getTypedRuleContext(CSharpParser.BlockContext,0)


        def attributes(self):
            return self.getTypedRuleContext(CSharpParser.AttributesContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_add_accessor_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAdd_accessor_declaration" ):
                listener.enterAdd_accessor_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAdd_accessor_declaration" ):
                listener.exitAdd_accessor_declaration(self)




    def add_accessor_declaration(self):

        localctx = CSharpParser.Add_accessor_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 404, self.RULE_add_accessor_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2460
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==133:
                self.state = 2459
                self.attributes()


            self.state = 2462
            self.match(CSharpParser.ADD)
            self.state = 2463
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Remove_accessor_declarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REMOVE(self):
            return self.getToken(CSharpParser.REMOVE, 0)

        def block(self):
            return self.getTypedRuleContext(CSharpParser.BlockContext,0)


        def attributes(self):
            return self.getTypedRuleContext(CSharpParser.AttributesContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_remove_accessor_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRemove_accessor_declaration" ):
                listener.enterRemove_accessor_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRemove_accessor_declaration" ):
                listener.exitRemove_accessor_declaration(self)




    def remove_accessor_declaration(self):

        localctx = CSharpParser.Remove_accessor_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 406, self.RULE_remove_accessor_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2466
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==133:
                self.state = 2465
                self.attributes()


            self.state = 2468
            self.match(CSharpParser.REMOVE)
            self.state = 2469
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Overloadable_operatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PLUS(self):
            return self.getToken(CSharpParser.PLUS, 0)

        def MINUS(self):
            return self.getToken(CSharpParser.MINUS, 0)

        def BANG(self):
            return self.getToken(CSharpParser.BANG, 0)

        def TILDE(self):
            return self.getToken(CSharpParser.TILDE, 0)

        def OP_INC(self):
            return self.getToken(CSharpParser.OP_INC, 0)

        def OP_DEC(self):
            return self.getToken(CSharpParser.OP_DEC, 0)

        def TRUE(self):
            return self.getToken(CSharpParser.TRUE, 0)

        def FALSE(self):
            return self.getToken(CSharpParser.FALSE, 0)

        def STAR(self):
            return self.getToken(CSharpParser.STAR, 0)

        def DIV(self):
            return self.getToken(CSharpParser.DIV, 0)

        def PERCENT(self):
            return self.getToken(CSharpParser.PERCENT, 0)

        def AMP(self):
            return self.getToken(CSharpParser.AMP, 0)

        def BITWISE_OR(self):
            return self.getToken(CSharpParser.BITWISE_OR, 0)

        def CARET(self):
            return self.getToken(CSharpParser.CARET, 0)

        def OP_LEFT_SHIFT(self):
            return self.getToken(CSharpParser.OP_LEFT_SHIFT, 0)

        def right_shift(self):
            return self.getTypedRuleContext(CSharpParser.Right_shiftContext,0)


        def OP_EQ(self):
            return self.getToken(CSharpParser.OP_EQ, 0)

        def OP_NE(self):
            return self.getToken(CSharpParser.OP_NE, 0)

        def GT(self):
            return self.getToken(CSharpParser.GT, 0)

        def LT(self):
            return self.getToken(CSharpParser.LT, 0)

        def OP_GE(self):
            return self.getToken(CSharpParser.OP_GE, 0)

        def OP_LE(self):
            return self.getToken(CSharpParser.OP_LE, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_overloadable_operator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOverloadable_operator" ):
                listener.enterOverloadable_operator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOverloadable_operator" ):
                listener.exitOverloadable_operator(self)




    def overloadable_operator(self):

        localctx = CSharpParser.Overloadable_operatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 408, self.RULE_overloadable_operator)
        try:
            self.state = 2493
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,278,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2471
                self.match(CSharpParser.PLUS)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2472
                self.match(CSharpParser.MINUS)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2473
                self.match(CSharpParser.BANG)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2474
                self.match(CSharpParser.TILDE)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 2475
                self.match(CSharpParser.OP_INC)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 2476
                self.match(CSharpParser.OP_DEC)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 2477
                self.match(CSharpParser.TRUE)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 2478
                self.match(CSharpParser.FALSE)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 2479
                self.match(CSharpParser.STAR)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 2480
                self.match(CSharpParser.DIV)
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 2481
                self.match(CSharpParser.PERCENT)
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 2482
                self.match(CSharpParser.AMP)
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 2483
                self.match(CSharpParser.BITWISE_OR)
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 2484
                self.match(CSharpParser.CARET)
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 2485
                self.match(CSharpParser.OP_LEFT_SHIFT)
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 2486
                self.right_shift()
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 2487
                self.match(CSharpParser.OP_EQ)
                pass

            elif la_ == 18:
                self.enterOuterAlt(localctx, 18)
                self.state = 2488
                self.match(CSharpParser.OP_NE)
                pass

            elif la_ == 19:
                self.enterOuterAlt(localctx, 19)
                self.state = 2489
                self.match(CSharpParser.GT)
                pass

            elif la_ == 20:
                self.enterOuterAlt(localctx, 20)
                self.state = 2490
                self.match(CSharpParser.LT)
                pass

            elif la_ == 21:
                self.enterOuterAlt(localctx, 21)
                self.state = 2491
                self.match(CSharpParser.OP_GE)
                pass

            elif la_ == 22:
                self.enterOuterAlt(localctx, 22)
                self.state = 2492
                self.match(CSharpParser.OP_LE)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Conversion_operator_declaratorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPERATOR(self):
            return self.getToken(CSharpParser.OPERATOR, 0)

        def type_(self):
            return self.getTypedRuleContext(CSharpParser.Type_Context,0)


        def OPEN_PARENS(self):
            return self.getToken(CSharpParser.OPEN_PARENS, 0)

        def arg_declaration(self):
            return self.getTypedRuleContext(CSharpParser.Arg_declarationContext,0)


        def CLOSE_PARENS(self):
            return self.getToken(CSharpParser.CLOSE_PARENS, 0)

        def IMPLICIT(self):
            return self.getToken(CSharpParser.IMPLICIT, 0)

        def EXPLICIT(self):
            return self.getToken(CSharpParser.EXPLICIT, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_conversion_operator_declarator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConversion_operator_declarator" ):
                listener.enterConversion_operator_declarator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConversion_operator_declarator" ):
                listener.exitConversion_operator_declarator(self)




    def conversion_operator_declarator(self):

        localctx = CSharpParser.Conversion_operator_declaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 410, self.RULE_conversion_operator_declarator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2495
            _la = self._input.LA(1)
            if not(_la==41 or _la==55):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 2496
            self.match(CSharpParser.OPERATOR)
            self.state = 2497
            self.type_()
            self.state = 2498
            self.match(CSharpParser.OPEN_PARENS)
            self.state = 2499
            self.arg_declaration()
            self.state = 2500
            self.match(CSharpParser.CLOSE_PARENS)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Constructor_initializerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COLON(self):
            return self.getToken(CSharpParser.COLON, 0)

        def OPEN_PARENS(self):
            return self.getToken(CSharpParser.OPEN_PARENS, 0)

        def CLOSE_PARENS(self):
            return self.getToken(CSharpParser.CLOSE_PARENS, 0)

        def BASE(self):
            return self.getToken(CSharpParser.BASE, 0)

        def THIS(self):
            return self.getToken(CSharpParser.THIS, 0)

        def argument_list(self):
            return self.getTypedRuleContext(CSharpParser.Argument_listContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_constructor_initializer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstructor_initializer" ):
                listener.enterConstructor_initializer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstructor_initializer" ):
                listener.exitConstructor_initializer(self)




    def constructor_initializer(self):

        localctx = CSharpParser.Constructor_initializerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 412, self.RULE_constructor_initializer)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2502
            self.match(CSharpParser.COLON)
            self.state = 2503
            _la = self._input.LA(1)
            if not(_la==18 or _la==99):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 2504
            self.match(CSharpParser.OPEN_PARENS)
            self.state = 2506
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & -6690580362525953024) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -46531701498629203) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & 562951571693735) != 0):
                self.state = 2505
                self.argument_list()


            self.state = 2508
            self.match(CSharpParser.CLOSE_PARENS)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def block(self):
            return self.getTypedRuleContext(CSharpParser.BlockContext,0)


        def SEMICOLON(self):
            return self.getToken(CSharpParser.SEMICOLON, 0)

        def right_arrow(self):
            return self.getTypedRuleContext(CSharpParser.Right_arrowContext,0)


        def expression(self):
            return self.getTypedRuleContext(CSharpParser.ExpressionContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_body

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBody" ):
                listener.enterBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBody" ):
                listener.exitBody(self)




    def body(self):

        localctx = CSharpParser.BodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 414, self.RULE_body)
        try:
            self.state = 2516
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [131]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2510
                self.block()
                pass
            elif token in [140]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2511
                self.match(CSharpParser.SEMICOLON)
                pass
            elif token in [151]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2512
                self.right_arrow()
                self.state = 2513
                self.expression()
                self.state = 2514
                self.match(CSharpParser.SEMICOLON)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Struct_interfacesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COLON(self):
            return self.getToken(CSharpParser.COLON, 0)

        def interface_type_list(self):
            return self.getTypedRuleContext(CSharpParser.Interface_type_listContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_struct_interfaces

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStruct_interfaces" ):
                listener.enterStruct_interfaces(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStruct_interfaces" ):
                listener.exitStruct_interfaces(self)




    def struct_interfaces(self):

        localctx = CSharpParser.Struct_interfacesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 416, self.RULE_struct_interfaces)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2518
            self.match(CSharpParser.COLON)
            self.state = 2519
            self.interface_type_list()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Struct_bodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_BRACE(self):
            return self.getToken(CSharpParser.OPEN_BRACE, 0)

        def CLOSE_BRACE(self):
            return self.getToken(CSharpParser.CLOSE_BRACE, 0)

        def struct_member_declaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Struct_member_declarationContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Struct_member_declarationContext,i)


        def SEMICOLON(self):
            return self.getToken(CSharpParser.SEMICOLON, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_struct_body

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStruct_body" ):
                listener.enterStruct_body(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStruct_body" ):
                listener.exitStruct_body(self)




    def struct_body(self):

        localctx = CSharpParser.Struct_bodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 418, self.RULE_struct_body)
        self._la = 0 # Token type
        try:
            self.state = 2530
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [131]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2521
                self.match(CSharpParser.OPEN_BRACE)
                self.state = 2525
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while ((((_la - 9)) & ~0x3f) == 0 and ((1 << (_la - 9)) & -7577496365531580965) != 0) or ((((_la - 73)) & ~0x3f) == 0 and ((1 << (_la - 73)) & 5764871257678921641) != 0):
                    self.state = 2522
                    self.struct_member_declaration()
                    self.state = 2527
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2528
                self.match(CSharpParser.CLOSE_BRACE)
                pass
            elif token in [140]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2529
                self.match(CSharpParser.SEMICOLON)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Struct_member_declarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def common_member_declaration(self):
            return self.getTypedRuleContext(CSharpParser.Common_member_declarationContext,0)


        def FIXED(self):
            return self.getToken(CSharpParser.FIXED, 0)

        def type_(self):
            return self.getTypedRuleContext(CSharpParser.Type_Context,0)


        def SEMICOLON(self):
            return self.getToken(CSharpParser.SEMICOLON, 0)

        def attributes(self):
            return self.getTypedRuleContext(CSharpParser.AttributesContext,0)


        def all_member_modifiers(self):
            return self.getTypedRuleContext(CSharpParser.All_member_modifiersContext,0)


        def fixed_size_buffer_declarator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Fixed_size_buffer_declaratorContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Fixed_size_buffer_declaratorContext,i)


        def getRuleIndex(self):
            return CSharpParser.RULE_struct_member_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStruct_member_declaration" ):
                listener.enterStruct_member_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStruct_member_declaration" ):
                listener.exitStruct_member_declaration(self)




    def struct_member_declaration(self):

        localctx = CSharpParser.Struct_member_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 420, self.RULE_struct_member_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2533
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,283,self._ctx)
            if la_ == 1:
                self.state = 2532
                self.attributes()


            self.state = 2536
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,284,self._ctx)
            if la_ == 1:
                self.state = 2535
                self.all_member_modifiers()


            self.state = 2548
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [9, 10, 12, 13, 15, 16, 17, 19, 21, 22, 25, 27, 28, 30, 32, 33, 35, 36, 38, 39, 40, 41, 42, 46, 49, 50, 53, 55, 57, 58, 59, 61, 63, 64, 66, 67, 69, 72, 73, 76, 78, 80, 81, 82, 83, 84, 85, 86, 88, 89, 90, 91, 92, 95, 96, 97, 104, 105, 107, 108, 109, 111, 112, 113, 115, 116, 118, 119, 120, 133, 135]:
                self.state = 2538
                self.common_member_declaration()
                pass
            elif token in [45]:
                self.state = 2539
                self.match(CSharpParser.FIXED)
                self.state = 2540
                self.type_()
                self.state = 2542 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 2541
                    self.fixed_size_buffer_declarator()
                    self.state = 2544 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & -6906832351458511872) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 96976925775434249) != 0)):
                        break

                self.state = 2546
                self.match(CSharpParser.SEMICOLON)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Array_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def base_type(self):
            return self.getTypedRuleContext(CSharpParser.Base_typeContext,0)


        def rank_specifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Rank_specifierContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Rank_specifierContext,i)


        def STAR(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.STAR)
            else:
                return self.getToken(CSharpParser.STAR, i)

        def INTERR(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.INTERR)
            else:
                return self.getToken(CSharpParser.INTERR, i)

        def getRuleIndex(self):
            return CSharpParser.RULE_array_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArray_type" ):
                listener.enterArray_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArray_type" ):
                listener.exitArray_type(self)




    def array_type(self):

        localctx = CSharpParser.Array_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 422, self.RULE_array_type)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2550
            self.base_type()
            self.state = 2558 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 2554
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==143 or _la==154:
                    self.state = 2551
                    _la = self._input.LA(1)
                    if not(_la==143 or _la==154):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 2556
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2557
                self.rank_specifier()
                self.state = 2560 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (((((_la - 133)) & ~0x3f) == 0 and ((1 << (_la - 133)) & 2098177) != 0)):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Rank_specifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_BRACKET(self):
            return self.getToken(CSharpParser.OPEN_BRACKET, 0)

        def CLOSE_BRACKET(self):
            return self.getToken(CSharpParser.CLOSE_BRACKET, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.COMMA)
            else:
                return self.getToken(CSharpParser.COMMA, i)

        def getRuleIndex(self):
            return CSharpParser.RULE_rank_specifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRank_specifier" ):
                listener.enterRank_specifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRank_specifier" ):
                listener.exitRank_specifier(self)




    def rank_specifier(self):

        localctx = CSharpParser.Rank_specifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 424, self.RULE_rank_specifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2562
            self.match(CSharpParser.OPEN_BRACKET)
            self.state = 2566
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==138:
                self.state = 2563
                self.match(CSharpParser.COMMA)
                self.state = 2568
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2569
            self.match(CSharpParser.CLOSE_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Array_initializerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_BRACE(self):
            return self.getToken(CSharpParser.OPEN_BRACE, 0)

        def CLOSE_BRACE(self):
            return self.getToken(CSharpParser.CLOSE_BRACE, 0)

        def variable_initializer(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Variable_initializerContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Variable_initializerContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.COMMA)
            else:
                return self.getToken(CSharpParser.COMMA, i)

        def getRuleIndex(self):
            return CSharpParser.RULE_array_initializer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArray_initializer" ):
                listener.enterArray_initializer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArray_initializer" ):
                listener.exitArray_initializer(self)




    def array_initializer(self):

        localctx = CSharpParser.Array_initializerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 426, self.RULE_array_initializer)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2571
            self.match(CSharpParser.OPEN_BRACE)
            self.state = 2583
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & -6762637956563880960) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -47094651452058707) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & 562951571693743) != 0):
                self.state = 2572
                self.variable_initializer()
                self.state = 2577
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,290,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2573
                        self.match(CSharpParser.COMMA)
                        self.state = 2574
                        self.variable_initializer() 
                    self.state = 2579
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,290,self._ctx)

                self.state = 2581
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==138:
                    self.state = 2580
                    self.match(CSharpParser.COMMA)




            self.state = 2585
            self.match(CSharpParser.CLOSE_BRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Variant_type_parameter_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LT(self):
            return self.getToken(CSharpParser.LT, 0)

        def variant_type_parameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Variant_type_parameterContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Variant_type_parameterContext,i)


        def GT(self):
            return self.getToken(CSharpParser.GT, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.COMMA)
            else:
                return self.getToken(CSharpParser.COMMA, i)

        def getRuleIndex(self):
            return CSharpParser.RULE_variant_type_parameter_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariant_type_parameter_list" ):
                listener.enterVariant_type_parameter_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariant_type_parameter_list" ):
                listener.exitVariant_type_parameter_list(self)




    def variant_type_parameter_list(self):

        localctx = CSharpParser.Variant_type_parameter_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 428, self.RULE_variant_type_parameter_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2587
            self.match(CSharpParser.LT)
            self.state = 2588
            self.variant_type_parameter()
            self.state = 2593
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==138:
                self.state = 2589
                self.match(CSharpParser.COMMA)
                self.state = 2590
                self.variant_type_parameter()
                self.state = 2595
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2596
            self.match(CSharpParser.GT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Variant_type_parameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(CSharpParser.IdentifierContext,0)


        def attributes(self):
            return self.getTypedRuleContext(CSharpParser.AttributesContext,0)


        def variance_annotation(self):
            return self.getTypedRuleContext(CSharpParser.Variance_annotationContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_variant_type_parameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariant_type_parameter" ):
                listener.enterVariant_type_parameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariant_type_parameter" ):
                listener.exitVariant_type_parameter(self)




    def variant_type_parameter(self):

        localctx = CSharpParser.Variant_type_parameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 430, self.RULE_variant_type_parameter)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2599
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==133:
                self.state = 2598
                self.attributes()


            self.state = 2602
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==56 or _la==77:
                self.state = 2601
                self.variance_annotation()


            self.state = 2604
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Variance_annotationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IN(self):
            return self.getToken(CSharpParser.IN, 0)

        def OUT(self):
            return self.getToken(CSharpParser.OUT, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_variance_annotation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariance_annotation" ):
                listener.enterVariance_annotation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariance_annotation" ):
                listener.exitVariance_annotation(self)




    def variance_annotation(self):

        localctx = CSharpParser.Variance_annotationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 432, self.RULE_variance_annotation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2606
            _la = self._input.LA(1)
            if not(_la==56 or _la==77):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Interface_baseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COLON(self):
            return self.getToken(CSharpParser.COLON, 0)

        def interface_type_list(self):
            return self.getTypedRuleContext(CSharpParser.Interface_type_listContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_interface_base

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterface_base" ):
                listener.enterInterface_base(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterface_base" ):
                listener.exitInterface_base(self)




    def interface_base(self):

        localctx = CSharpParser.Interface_baseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 434, self.RULE_interface_base)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2608
            self.match(CSharpParser.COLON)
            self.state = 2609
            self.interface_type_list()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Interface_bodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_BRACE(self):
            return self.getToken(CSharpParser.OPEN_BRACE, 0)

        def CLOSE_BRACE(self):
            return self.getToken(CSharpParser.CLOSE_BRACE, 0)

        def interface_member_declaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Interface_member_declarationContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Interface_member_declarationContext,i)


        def getRuleIndex(self):
            return CSharpParser.RULE_interface_body

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterface_body" ):
                listener.enterInterface_body(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterface_body" ):
                listener.exitInterface_body(self)




    def interface_body(self):

        localctx = CSharpParser.Interface_bodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 436, self.RULE_interface_body)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2611
            self.match(CSharpParser.OPEN_BRACE)
            self.state = 2615
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 10)) & ~0x3f) == 0 and ((1 << (_la - 10)) & -3789627833139029267) != 0) or ((((_la - 76)) & ~0x3f) == 0 and ((1 << (_la - 76)) & 720599767516829457) != 0):
                self.state = 2612
                self.interface_member_declaration()
                self.state = 2617
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2618
            self.match(CSharpParser.CLOSE_BRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Interface_member_declarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def type_(self):
            return self.getTypedRuleContext(CSharpParser.Type_Context,0)


        def VOID(self):
            return self.getToken(CSharpParser.VOID, 0)

        def identifier(self):
            return self.getTypedRuleContext(CSharpParser.IdentifierContext,0)


        def OPEN_PARENS(self):
            return self.getToken(CSharpParser.OPEN_PARENS, 0)

        def CLOSE_PARENS(self):
            return self.getToken(CSharpParser.CLOSE_PARENS, 0)

        def SEMICOLON(self):
            return self.getToken(CSharpParser.SEMICOLON, 0)

        def EVENT(self):
            return self.getToken(CSharpParser.EVENT, 0)

        def attributes(self):
            return self.getTypedRuleContext(CSharpParser.AttributesContext,0)


        def NEW(self):
            return self.getToken(CSharpParser.NEW, 0)

        def OPEN_BRACE(self):
            return self.getToken(CSharpParser.OPEN_BRACE, 0)

        def interface_accessors(self):
            return self.getTypedRuleContext(CSharpParser.Interface_accessorsContext,0)


        def CLOSE_BRACE(self):
            return self.getToken(CSharpParser.CLOSE_BRACE, 0)

        def THIS(self):
            return self.getToken(CSharpParser.THIS, 0)

        def OPEN_BRACKET(self):
            return self.getToken(CSharpParser.OPEN_BRACKET, 0)

        def formal_parameter_list(self):
            return self.getTypedRuleContext(CSharpParser.Formal_parameter_listContext,0)


        def CLOSE_BRACKET(self):
            return self.getToken(CSharpParser.CLOSE_BRACKET, 0)

        def UNSAFE(self):
            return self.getToken(CSharpParser.UNSAFE, 0)

        def REF(self):
            return self.getToken(CSharpParser.REF, 0)

        def READONLY(self):
            return self.getToken(CSharpParser.READONLY, 0)

        def type_parameter_list(self):
            return self.getTypedRuleContext(CSharpParser.Type_parameter_listContext,0)


        def type_parameter_constraints_clauses(self):
            return self.getTypedRuleContext(CSharpParser.Type_parameter_constraints_clausesContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_interface_member_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterface_member_declaration" ):
                listener.enterInterface_member_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterface_member_declaration" ):
                listener.exitInterface_member_declaration(self)




    def interface_member_declaration(self):

        localctx = CSharpParser.Interface_member_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 438, self.RULE_interface_member_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2621
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==133:
                self.state = 2620
                self.attributes()


            self.state = 2624
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==69:
                self.state = 2623
                self.match(CSharpParser.NEW)


            self.state = 2689
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,309,self._ctx)
            if la_ == 1:
                self.state = 2627
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==108:
                    self.state = 2626
                    self.match(CSharpParser.UNSAFE)


                self.state = 2634
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,300,self._ctx)
                if la_ == 1:
                    self.state = 2629
                    self.match(CSharpParser.REF)

                elif la_ == 2:
                    self.state = 2630
                    self.match(CSharpParser.REF)
                    self.state = 2631
                    self.match(CSharpParser.READONLY)

                elif la_ == 3:
                    self.state = 2632
                    self.match(CSharpParser.READONLY)
                    self.state = 2633
                    self.match(CSharpParser.REF)


                self.state = 2636
                self.type_()
                self.state = 2664
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,304,self._ctx)
                if la_ == 1:
                    self.state = 2637
                    self.identifier()
                    self.state = 2639
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==152:
                        self.state = 2638
                        self.type_parameter_list()


                    self.state = 2641
                    self.match(CSharpParser.OPEN_PARENS)
                    self.state = 2643
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if ((((_la - 10)) & ~0x3f) == 0 and ((1 << (_la - 10)) & -4366018217772016915) != 0) or ((((_la - 76)) & ~0x3f) == 0 and ((1 << (_la - 76)) & 720599763230250523) != 0):
                        self.state = 2642
                        self.formal_parameter_list()


                    self.state = 2645
                    self.match(CSharpParser.CLOSE_PARENS)
                    self.state = 2647
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==116:
                        self.state = 2646
                        self.type_parameter_constraints_clauses()


                    self.state = 2649
                    self.match(CSharpParser.SEMICOLON)
                    pass

                elif la_ == 2:
                    self.state = 2651
                    self.identifier()
                    self.state = 2652
                    self.match(CSharpParser.OPEN_BRACE)
                    self.state = 2653
                    self.interface_accessors()
                    self.state = 2654
                    self.match(CSharpParser.CLOSE_BRACE)
                    pass

                elif la_ == 3:
                    self.state = 2656
                    self.match(CSharpParser.THIS)
                    self.state = 2657
                    self.match(CSharpParser.OPEN_BRACKET)
                    self.state = 2658
                    self.formal_parameter_list()
                    self.state = 2659
                    self.match(CSharpParser.CLOSE_BRACKET)
                    self.state = 2660
                    self.match(CSharpParser.OPEN_BRACE)
                    self.state = 2661
                    self.interface_accessors()
                    self.state = 2662
                    self.match(CSharpParser.CLOSE_BRACE)
                    pass


                pass

            elif la_ == 2:
                self.state = 2667
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==108:
                    self.state = 2666
                    self.match(CSharpParser.UNSAFE)


                self.state = 2669
                self.match(CSharpParser.VOID)
                self.state = 2670
                self.identifier()
                self.state = 2672
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==152:
                    self.state = 2671
                    self.type_parameter_list()


                self.state = 2674
                self.match(CSharpParser.OPEN_PARENS)
                self.state = 2676
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 10)) & ~0x3f) == 0 and ((1 << (_la - 10)) & -4366018217772016915) != 0) or ((((_la - 76)) & ~0x3f) == 0 and ((1 << (_la - 76)) & 720599763230250523) != 0):
                    self.state = 2675
                    self.formal_parameter_list()


                self.state = 2678
                self.match(CSharpParser.CLOSE_PARENS)
                self.state = 2680
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==116:
                    self.state = 2679
                    self.type_parameter_constraints_clauses()


                self.state = 2682
                self.match(CSharpParser.SEMICOLON)
                pass

            elif la_ == 3:
                self.state = 2684
                self.match(CSharpParser.EVENT)
                self.state = 2685
                self.type_()
                self.state = 2686
                self.identifier()
                self.state = 2687
                self.match(CSharpParser.SEMICOLON)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Interface_accessorsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GET(self):
            return self.getToken(CSharpParser.GET, 0)

        def SEMICOLON(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.SEMICOLON)
            else:
                return self.getToken(CSharpParser.SEMICOLON, i)

        def SET(self):
            return self.getToken(CSharpParser.SET, 0)

        def attributes(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.AttributesContext)
            else:
                return self.getTypedRuleContext(CSharpParser.AttributesContext,i)


        def getRuleIndex(self):
            return CSharpParser.RULE_interface_accessors

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterface_accessors" ):
                listener.enterInterface_accessors(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterface_accessors" ):
                listener.exitInterface_accessors(self)




    def interface_accessors(self):

        localctx = CSharpParser.Interface_accessorsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 440, self.RULE_interface_accessors)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2692
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==133:
                self.state = 2691
                self.attributes()


            self.state = 2712
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [50]:
                self.state = 2694
                self.match(CSharpParser.GET)
                self.state = 2695
                self.match(CSharpParser.SEMICOLON)
                self.state = 2701
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==91 or _la==133:
                    self.state = 2697
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==133:
                        self.state = 2696
                        self.attributes()


                    self.state = 2699
                    self.match(CSharpParser.SET)
                    self.state = 2700
                    self.match(CSharpParser.SEMICOLON)


                pass
            elif token in [91]:
                self.state = 2703
                self.match(CSharpParser.SET)
                self.state = 2704
                self.match(CSharpParser.SEMICOLON)
                self.state = 2710
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==50 or _la==133:
                    self.state = 2706
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==133:
                        self.state = 2705
                        self.attributes()


                    self.state = 2708
                    self.match(CSharpParser.GET)
                    self.state = 2709
                    self.match(CSharpParser.SEMICOLON)


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Enum_baseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COLON(self):
            return self.getToken(CSharpParser.COLON, 0)

        def type_(self):
            return self.getTypedRuleContext(CSharpParser.Type_Context,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_enum_base

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnum_base" ):
                listener.enterEnum_base(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnum_base" ):
                listener.exitEnum_base(self)




    def enum_base(self):

        localctx = CSharpParser.Enum_baseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 442, self.RULE_enum_base)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2714
            self.match(CSharpParser.COLON)
            self.state = 2715
            self.type_()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Enum_bodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_BRACE(self):
            return self.getToken(CSharpParser.OPEN_BRACE, 0)

        def CLOSE_BRACE(self):
            return self.getToken(CSharpParser.CLOSE_BRACE, 0)

        def enum_member_declaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Enum_member_declarationContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Enum_member_declarationContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.COMMA)
            else:
                return self.getToken(CSharpParser.COMMA, i)

        def getRuleIndex(self):
            return CSharpParser.RULE_enum_body

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnum_body" ):
                listener.enterEnum_body(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnum_body" ):
                listener.exitEnum_body(self)




    def enum_body(self):

        localctx = CSharpParser.Enum_bodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 444, self.RULE_enum_body)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2717
            self.match(CSharpParser.OPEN_BRACE)
            self.state = 2729
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 10)) & ~0x3f) == 0 and ((1 << (_la - 10)) & -9049973005228177171) != 0) or ((((_la - 76)) & ~0x3f) == 0 and ((1 << (_la - 76)) & 144138864083125265) != 0):
                self.state = 2718
                self.enum_member_declaration()
                self.state = 2723
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,316,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2719
                        self.match(CSharpParser.COMMA)
                        self.state = 2720
                        self.enum_member_declaration() 
                    self.state = 2725
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,316,self._ctx)

                self.state = 2727
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==138:
                    self.state = 2726
                    self.match(CSharpParser.COMMA)




            self.state = 2731
            self.match(CSharpParser.CLOSE_BRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Enum_member_declarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(CSharpParser.IdentifierContext,0)


        def attributes(self):
            return self.getTypedRuleContext(CSharpParser.AttributesContext,0)


        def ASSIGNMENT(self):
            return self.getToken(CSharpParser.ASSIGNMENT, 0)

        def expression(self):
            return self.getTypedRuleContext(CSharpParser.ExpressionContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_enum_member_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnum_member_declaration" ):
                listener.enterEnum_member_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnum_member_declaration" ):
                listener.exitEnum_member_declaration(self)




    def enum_member_declaration(self):

        localctx = CSharpParser.Enum_member_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 446, self.RULE_enum_member_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2734
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==133:
                self.state = 2733
                self.attributes()


            self.state = 2736
            self.identifier()
            self.state = 2739
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==151:
                self.state = 2737
                self.match(CSharpParser.ASSIGNMENT)
                self.state = 2738
                self.expression()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Global_attribute_sectionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_BRACKET(self):
            return self.getToken(CSharpParser.OPEN_BRACKET, 0)

        def global_attribute_target(self):
            return self.getTypedRuleContext(CSharpParser.Global_attribute_targetContext,0)


        def COLON(self):
            return self.getToken(CSharpParser.COLON, 0)

        def attribute_list(self):
            return self.getTypedRuleContext(CSharpParser.Attribute_listContext,0)


        def CLOSE_BRACKET(self):
            return self.getToken(CSharpParser.CLOSE_BRACKET, 0)

        def COMMA(self):
            return self.getToken(CSharpParser.COMMA, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_global_attribute_section

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGlobal_attribute_section" ):
                listener.enterGlobal_attribute_section(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGlobal_attribute_section" ):
                listener.exitGlobal_attribute_section(self)




    def global_attribute_section(self):

        localctx = CSharpParser.Global_attribute_sectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 448, self.RULE_global_attribute_section)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2741
            self.match(CSharpParser.OPEN_BRACKET)
            self.state = 2742
            self.global_attribute_target()
            self.state = 2743
            self.match(CSharpParser.COLON)
            self.state = 2744
            self.attribute_list()
            self.state = 2746
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==138:
                self.state = 2745
                self.match(CSharpParser.COMMA)


            self.state = 2748
            self.match(CSharpParser.CLOSE_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Global_attribute_targetContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def keyword(self):
            return self.getTypedRuleContext(CSharpParser.KeywordContext,0)


        def identifier(self):
            return self.getTypedRuleContext(CSharpParser.IdentifierContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_global_attribute_target

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGlobal_attribute_target" ):
                listener.enterGlobal_attribute_target(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGlobal_attribute_target" ):
                listener.exitGlobal_attribute_target(self)




    def global_attribute_target(self):

        localctx = CSharpParser.Global_attribute_targetContext(self, self._ctx, self.state)
        self.enterRule(localctx, 450, self.RULE_global_attribute_target)
        try:
            self.state = 2752
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,322,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2750
                self.keyword()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2751
                self.identifier()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AttributesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def attribute_section(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Attribute_sectionContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Attribute_sectionContext,i)


        def getRuleIndex(self):
            return CSharpParser.RULE_attributes

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttributes" ):
                listener.enterAttributes(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttributes" ):
                listener.exitAttributes(self)




    def attributes(self):

        localctx = CSharpParser.AttributesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 452, self.RULE_attributes)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2755 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 2754
                    self.attribute_section()

                else:
                    raise NoViableAltException(self)
                self.state = 2757 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,323,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Attribute_sectionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_BRACKET(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.OPEN_BRACKET)
            else:
                return self.getToken(CSharpParser.OPEN_BRACKET, i)

        def attribute_list(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Attribute_listContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Attribute_listContext,i)


        def CLOSE_BRACKET(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.CLOSE_BRACKET)
            else:
                return self.getToken(CSharpParser.CLOSE_BRACKET, i)

        def attribute_target(self):
            return self.getTypedRuleContext(CSharpParser.Attribute_targetContext,0)


        def COLON(self):
            return self.getToken(CSharpParser.COLON, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.COMMA)
            else:
                return self.getToken(CSharpParser.COMMA, i)

        def getRuleIndex(self):
            return CSharpParser.RULE_attribute_section

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttribute_section" ):
                listener.enterAttribute_section(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttribute_section" ):
                listener.exitAttribute_section(self)




    def attribute_section(self):

        localctx = CSharpParser.Attribute_sectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 454, self.RULE_attribute_section)
        self._la = 0 # Token type
        try:
            self.state = 2784
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,327,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2759
                self.match(CSharpParser.OPEN_BRACKET)
                self.state = 2763
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,324,self._ctx)
                if la_ == 1:
                    self.state = 2760
                    self.attribute_target()
                    self.state = 2761
                    self.match(CSharpParser.COLON)


                self.state = 2765
                self.attribute_list()
                self.state = 2767
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==138:
                    self.state = 2766
                    self.match(CSharpParser.COMMA)


                self.state = 2769
                self.match(CSharpParser.CLOSE_BRACKET)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2771
                self.match(CSharpParser.OPEN_BRACKET)
                self.state = 2772
                self.attribute_list()
                self.state = 2773
                self.match(CSharpParser.CLOSE_BRACKET)
                self.state = 2781
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==138:
                    self.state = 2774
                    self.match(CSharpParser.COMMA)
                    self.state = 2775
                    self.match(CSharpParser.OPEN_BRACKET)
                    self.state = 2776
                    self.attribute_list()
                    self.state = 2777
                    self.match(CSharpParser.CLOSE_BRACKET)
                    self.state = 2783
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Attribute_targetContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def keyword(self):
            return self.getTypedRuleContext(CSharpParser.KeywordContext,0)


        def identifier(self):
            return self.getTypedRuleContext(CSharpParser.IdentifierContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_attribute_target

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttribute_target" ):
                listener.enterAttribute_target(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttribute_target" ):
                listener.exitAttribute_target(self)




    def attribute_target(self):

        localctx = CSharpParser.Attribute_targetContext(self, self._ctx, self.state)
        self.enterRule(localctx, 456, self.RULE_attribute_target)
        try:
            self.state = 2788
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,328,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2786
                self.keyword()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2787
                self.identifier()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Attribute_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def attribute(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.AttributeContext)
            else:
                return self.getTypedRuleContext(CSharpParser.AttributeContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.COMMA)
            else:
                return self.getToken(CSharpParser.COMMA, i)

        def getRuleIndex(self):
            return CSharpParser.RULE_attribute_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttribute_list" ):
                listener.enterAttribute_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttribute_list" ):
                listener.exitAttribute_list(self)




    def attribute_list(self):

        localctx = CSharpParser.Attribute_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 458, self.RULE_attribute_list)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2790
            self.attribute()
            self.state = 2795
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,329,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2791
                    self.match(CSharpParser.COMMA)
                    self.state = 2792
                    self.attribute() 
                self.state = 2797
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,329,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AttributeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def namespace_or_type_name(self):
            return self.getTypedRuleContext(CSharpParser.Namespace_or_type_nameContext,0)


        def OPEN_PARENS(self):
            return self.getToken(CSharpParser.OPEN_PARENS, 0)

        def CLOSE_PARENS(self):
            return self.getToken(CSharpParser.CLOSE_PARENS, 0)

        def attribute_argument(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Attribute_argumentContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Attribute_argumentContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.COMMA)
            else:
                return self.getToken(CSharpParser.COMMA, i)

        def getRuleIndex(self):
            return CSharpParser.RULE_attribute

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttribute" ):
                listener.enterAttribute(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttribute" ):
                listener.exitAttribute(self)




    def attribute(self):

        localctx = CSharpParser.AttributeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 460, self.RULE_attribute)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2798
            self.namespace_or_type_name()
            self.state = 2811
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 2799
                self.match(CSharpParser.OPEN_PARENS)
                self.state = 2808
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -6762637956563880960) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -47094651452058707) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & 562951571693735) != 0):
                    self.state = 2800
                    self.attribute_argument()
                    self.state = 2805
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==138:
                        self.state = 2801
                        self.match(CSharpParser.COMMA)
                        self.state = 2802
                        self.attribute_argument()
                        self.state = 2807
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 2810
                self.match(CSharpParser.CLOSE_PARENS)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Attribute_argumentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(CSharpParser.ExpressionContext,0)


        def identifier(self):
            return self.getTypedRuleContext(CSharpParser.IdentifierContext,0)


        def COLON(self):
            return self.getToken(CSharpParser.COLON, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_attribute_argument

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttribute_argument" ):
                listener.enterAttribute_argument(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttribute_argument" ):
                listener.exitAttribute_argument(self)




    def attribute_argument(self):

        localctx = CSharpParser.Attribute_argumentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 462, self.RULE_attribute_argument)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2816
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,333,self._ctx)
            if la_ == 1:
                self.state = 2813
                self.identifier()
                self.state = 2814
                self.match(CSharpParser.COLON)


            self.state = 2818
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pointer_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STAR(self):
            return self.getToken(CSharpParser.STAR, 0)

        def simple_type(self):
            return self.getTypedRuleContext(CSharpParser.Simple_typeContext,0)


        def class_type(self):
            return self.getTypedRuleContext(CSharpParser.Class_typeContext,0)


        def rank_specifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Rank_specifierContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Rank_specifierContext,i)


        def INTERR(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.INTERR)
            else:
                return self.getToken(CSharpParser.INTERR, i)

        def VOID(self):
            return self.getToken(CSharpParser.VOID, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_pointer_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPointer_type" ):
                listener.enterPointer_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPointer_type" ):
                listener.exitPointer_type(self)




    def pointer_type(self):

        localctx = CSharpParser.Pointer_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 464, self.RULE_pointer_type)
        self._la = 0 # Token type
        try:
            self.state = 2835
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [10, 12, 13, 15, 16, 17, 19, 21, 22, 25, 30, 33, 35, 36, 39, 46, 49, 50, 53, 57, 61, 63, 64, 66, 67, 72, 73, 76, 80, 86, 88, 90, 91, 92, 96, 104, 105, 107, 109, 111, 115, 116, 118, 120]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2822
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [19, 22, 25, 30, 35, 46, 57, 66, 88, 92, 104, 105, 109]:
                    self.state = 2820
                    self.simple_type()
                    pass
                elif token in [10, 12, 13, 15, 16, 17, 21, 33, 36, 39, 49, 50, 53, 61, 63, 64, 67, 72, 73, 76, 80, 86, 90, 91, 96, 107, 111, 115, 116, 118, 120]:
                    self.state = 2821
                    self.class_type()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 2828
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==133 or _la==154:
                    self.state = 2826
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [133]:
                        self.state = 2824
                        self.rank_specifier()
                        pass
                    elif token in [154]:
                        self.state = 2825
                        self.match(CSharpParser.INTERR)
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 2830
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2831
                self.match(CSharpParser.STAR)
                pass
            elif token in [113]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2833
                self.match(CSharpParser.VOID)
                self.state = 2834
                self.match(CSharpParser.STAR)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Fixed_pointer_declaratorsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fixed_pointer_declarator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Fixed_pointer_declaratorContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Fixed_pointer_declaratorContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.COMMA)
            else:
                return self.getToken(CSharpParser.COMMA, i)

        def getRuleIndex(self):
            return CSharpParser.RULE_fixed_pointer_declarators

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFixed_pointer_declarators" ):
                listener.enterFixed_pointer_declarators(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFixed_pointer_declarators" ):
                listener.exitFixed_pointer_declarators(self)




    def fixed_pointer_declarators(self):

        localctx = CSharpParser.Fixed_pointer_declaratorsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 466, self.RULE_fixed_pointer_declarators)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2837
            self.fixed_pointer_declarator()
            self.state = 2842
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==138:
                self.state = 2838
                self.match(CSharpParser.COMMA)
                self.state = 2839
                self.fixed_pointer_declarator()
                self.state = 2844
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Fixed_pointer_declaratorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(CSharpParser.IdentifierContext,0)


        def ASSIGNMENT(self):
            return self.getToken(CSharpParser.ASSIGNMENT, 0)

        def fixed_pointer_initializer(self):
            return self.getTypedRuleContext(CSharpParser.Fixed_pointer_initializerContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_fixed_pointer_declarator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFixed_pointer_declarator" ):
                listener.enterFixed_pointer_declarator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFixed_pointer_declarator" ):
                listener.exitFixed_pointer_declarator(self)




    def fixed_pointer_declarator(self):

        localctx = CSharpParser.Fixed_pointer_declaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 468, self.RULE_fixed_pointer_declarator)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2845
            self.identifier()
            self.state = 2846
            self.match(CSharpParser.ASSIGNMENT)
            self.state = 2847
            self.fixed_pointer_initializer()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Fixed_pointer_initializerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(CSharpParser.ExpressionContext,0)


        def AMP(self):
            return self.getToken(CSharpParser.AMP, 0)

        def stackalloc_initializer(self):
            return self.getTypedRuleContext(CSharpParser.Stackalloc_initializerContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_fixed_pointer_initializer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFixed_pointer_initializer" ):
                listener.enterFixed_pointer_initializer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFixed_pointer_initializer" ):
                listener.exitFixed_pointer_initializer(self)




    def fixed_pointer_initializer(self):

        localctx = CSharpParser.Fixed_pointer_initializerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 470, self.RULE_fixed_pointer_initializer)
        try:
            self.state = 2854
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [10, 12, 13, 15, 16, 17, 18, 19, 21, 22, 25, 26, 30, 31, 32, 33, 35, 36, 39, 43, 46, 49, 50, 53, 57, 61, 63, 64, 66, 67, 69, 71, 72, 73, 76, 80, 85, 86, 88, 90, 91, 92, 93, 94, 95, 96, 99, 101, 103, 104, 105, 106, 107, 109, 111, 115, 116, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 133, 135, 141, 142, 143, 146, 148, 149, 150, 157, 158, 177]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2850
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,339,self._ctx)
                if la_ == 1:
                    self.state = 2849
                    self.match(CSharpParser.AMP)


                self.state = 2852
                self.expression()
                pass
            elif token in [131]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2853
                self.stackalloc_initializer()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Fixed_size_buffer_declaratorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(CSharpParser.IdentifierContext,0)


        def OPEN_BRACKET(self):
            return self.getToken(CSharpParser.OPEN_BRACKET, 0)

        def expression(self):
            return self.getTypedRuleContext(CSharpParser.ExpressionContext,0)


        def CLOSE_BRACKET(self):
            return self.getToken(CSharpParser.CLOSE_BRACKET, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_fixed_size_buffer_declarator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFixed_size_buffer_declarator" ):
                listener.enterFixed_size_buffer_declarator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFixed_size_buffer_declarator" ):
                listener.exitFixed_size_buffer_declarator(self)




    def fixed_size_buffer_declarator(self):

        localctx = CSharpParser.Fixed_size_buffer_declaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 472, self.RULE_fixed_size_buffer_declarator)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2856
            self.identifier()
            self.state = 2857
            self.match(CSharpParser.OPEN_BRACKET)
            self.state = 2858
            self.expression()
            self.state = 2859
            self.match(CSharpParser.CLOSE_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Right_arrowContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.first = None # Token
            self.second = None # Token

        def ASSIGNMENT(self):
            return self.getToken(CSharpParser.ASSIGNMENT, 0)

        def GT(self):
            return self.getToken(CSharpParser.GT, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_right_arrow

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRight_arrow" ):
                listener.enterRight_arrow(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRight_arrow" ):
                listener.exitRight_arrow(self)




    def right_arrow(self):

        localctx = CSharpParser.Right_arrowContext(self, self._ctx, self.state)
        self.enterRule(localctx, 474, self.RULE_right_arrow)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2861
            localctx.first = self.match(CSharpParser.ASSIGNMENT)
            self.state = 2862
            localctx.second = self.match(CSharpParser.GT)
            self.state = 2863
            if not (0 if localctx.first is None else localctx.first.tokenIndex) + 1 == (0 if localctx.second is None else localctx.second.tokenIndex):
                from antlr4.error.Errors import FailedPredicateException
                raise FailedPredicateException(self, "$first.index + 1 == $second.index")
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Right_shiftContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.first = None # Token
            self.second = None # Token

        def GT(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.GT)
            else:
                return self.getToken(CSharpParser.GT, i)

        def getRuleIndex(self):
            return CSharpParser.RULE_right_shift

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRight_shift" ):
                listener.enterRight_shift(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRight_shift" ):
                listener.exitRight_shift(self)




    def right_shift(self):

        localctx = CSharpParser.Right_shiftContext(self, self._ctx, self.state)
        self.enterRule(localctx, 476, self.RULE_right_shift)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2865
            localctx.first = self.match(CSharpParser.GT)
            self.state = 2866
            localctx.second = self.match(CSharpParser.GT)
            self.state = 2867
            if not (0 if localctx.first is None else localctx.first.tokenIndex) + 1 == (0 if localctx.second is None else localctx.second.tokenIndex):
                from antlr4.error.Errors import FailedPredicateException
                raise FailedPredicateException(self, "$first.index + 1 == $second.index")
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Right_shift_assignmentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.first = None # Token
            self.second = None # Token

        def GT(self):
            return self.getToken(CSharpParser.GT, 0)

        def OP_GE(self):
            return self.getToken(CSharpParser.OP_GE, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_right_shift_assignment

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRight_shift_assignment" ):
                listener.enterRight_shift_assignment(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRight_shift_assignment" ):
                listener.exitRight_shift_assignment(self)




    def right_shift_assignment(self):

        localctx = CSharpParser.Right_shift_assignmentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 478, self.RULE_right_shift_assignment)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2869
            localctx.first = self.match(CSharpParser.GT)
            self.state = 2870
            localctx.second = self.match(CSharpParser.OP_GE)
            self.state = 2871
            if not (0 if localctx.first is None else localctx.first.tokenIndex) + 1 == (0 if localctx.second is None else localctx.second.tokenIndex):
                from antlr4.error.Errors import FailedPredicateException
                raise FailedPredicateException(self, "$first.index + 1 == $second.index")
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def boolean_literal(self):
            return self.getTypedRuleContext(CSharpParser.Boolean_literalContext,0)


        def string_literal(self):
            return self.getTypedRuleContext(CSharpParser.String_literalContext,0)


        def INTEGER_LITERAL(self):
            return self.getToken(CSharpParser.INTEGER_LITERAL, 0)

        def HEX_INTEGER_LITERAL(self):
            return self.getToken(CSharpParser.HEX_INTEGER_LITERAL, 0)

        def BIN_INTEGER_LITERAL(self):
            return self.getToken(CSharpParser.BIN_INTEGER_LITERAL, 0)

        def REAL_LITERAL(self):
            return self.getToken(CSharpParser.REAL_LITERAL, 0)

        def CHARACTER_LITERAL(self):
            return self.getToken(CSharpParser.CHARACTER_LITERAL, 0)

        def NULL_(self):
            return self.getToken(CSharpParser.NULL_, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLiteral" ):
                listener.enterLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLiteral" ):
                listener.exitLiteral(self)




    def literal(self):

        localctx = CSharpParser.LiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 480, self.RULE_literal)
        try:
            self.state = 2881
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [43, 101]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2873
                self.boolean_literal()
                pass
            elif token in [127, 128, 129, 130]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2874
                self.string_literal()
                pass
            elif token in [122]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2875
                self.match(CSharpParser.INTEGER_LITERAL)
                pass
            elif token in [123]:
                self.enterOuterAlt(localctx, 4)
                self.state = 2876
                self.match(CSharpParser.HEX_INTEGER_LITERAL)
                pass
            elif token in [124]:
                self.enterOuterAlt(localctx, 5)
                self.state = 2877
                self.match(CSharpParser.BIN_INTEGER_LITERAL)
                pass
            elif token in [125]:
                self.enterOuterAlt(localctx, 6)
                self.state = 2878
                self.match(CSharpParser.REAL_LITERAL)
                pass
            elif token in [126]:
                self.enterOuterAlt(localctx, 7)
                self.state = 2879
                self.match(CSharpParser.CHARACTER_LITERAL)
                pass
            elif token in [71]:
                self.enterOuterAlt(localctx, 8)
                self.state = 2880
                self.match(CSharpParser.NULL_)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Boolean_literalContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TRUE(self):
            return self.getToken(CSharpParser.TRUE, 0)

        def FALSE(self):
            return self.getToken(CSharpParser.FALSE, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_boolean_literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBoolean_literal" ):
                listener.enterBoolean_literal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBoolean_literal" ):
                listener.exitBoolean_literal(self)




    def boolean_literal(self):

        localctx = CSharpParser.Boolean_literalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 482, self.RULE_boolean_literal)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2883
            _la = self._input.LA(1)
            if not(_la==43 or _la==101):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class String_literalContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def interpolated_regular_string(self):
            return self.getTypedRuleContext(CSharpParser.Interpolated_regular_stringContext,0)


        def interpolated_verbatium_string(self):
            return self.getTypedRuleContext(CSharpParser.Interpolated_verbatium_stringContext,0)


        def REGULAR_STRING(self):
            return self.getToken(CSharpParser.REGULAR_STRING, 0)

        def VERBATIUM_STRING(self):
            return self.getToken(CSharpParser.VERBATIUM_STRING, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_string_literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterString_literal" ):
                listener.enterString_literal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitString_literal" ):
                listener.exitString_literal(self)




    def string_literal(self):

        localctx = CSharpParser.String_literalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 484, self.RULE_string_literal)
        try:
            self.state = 2889
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [129]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2885
                self.interpolated_regular_string()
                pass
            elif token in [130]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2886
                self.interpolated_verbatium_string()
                pass
            elif token in [127]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2887
                self.match(CSharpParser.REGULAR_STRING)
                pass
            elif token in [128]:
                self.enterOuterAlt(localctx, 4)
                self.state = 2888
                self.match(CSharpParser.VERBATIUM_STRING)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Interpolated_regular_stringContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INTERPOLATED_REGULAR_STRING_START(self):
            return self.getToken(CSharpParser.INTERPOLATED_REGULAR_STRING_START, 0)

        def DOUBLE_QUOTE_INSIDE(self):
            return self.getToken(CSharpParser.DOUBLE_QUOTE_INSIDE, 0)

        def interpolated_regular_string_part(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Interpolated_regular_string_partContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Interpolated_regular_string_partContext,i)


        def getRuleIndex(self):
            return CSharpParser.RULE_interpolated_regular_string

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterpolated_regular_string" ):
                listener.enterInterpolated_regular_string(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterpolated_regular_string" ):
                listener.exitInterpolated_regular_string(self)




    def interpolated_regular_string(self):

        localctx = CSharpParser.Interpolated_regular_stringContext(self, self._ctx, self.state)
        self.enterRule(localctx, 486, self.RULE_interpolated_regular_string)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2891
            self.match(CSharpParser.INTERPOLATED_REGULAR_STRING_START)
            self.state = 2895
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,343,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2892
                    self.interpolated_regular_string_part() 
                self.state = 2897
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,343,self._ctx)

            self.state = 2898
            self.match(CSharpParser.DOUBLE_QUOTE_INSIDE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Interpolated_verbatium_stringContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INTERPOLATED_VERBATIUM_STRING_START(self):
            return self.getToken(CSharpParser.INTERPOLATED_VERBATIUM_STRING_START, 0)

        def DOUBLE_QUOTE_INSIDE(self):
            return self.getToken(CSharpParser.DOUBLE_QUOTE_INSIDE, 0)

        def interpolated_verbatium_string_part(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Interpolated_verbatium_string_partContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Interpolated_verbatium_string_partContext,i)


        def getRuleIndex(self):
            return CSharpParser.RULE_interpolated_verbatium_string

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterpolated_verbatium_string" ):
                listener.enterInterpolated_verbatium_string(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterpolated_verbatium_string" ):
                listener.exitInterpolated_verbatium_string(self)




    def interpolated_verbatium_string(self):

        localctx = CSharpParser.Interpolated_verbatium_stringContext(self, self._ctx, self.state)
        self.enterRule(localctx, 488, self.RULE_interpolated_verbatium_string)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2900
            self.match(CSharpParser.INTERPOLATED_VERBATIUM_STRING_START)
            self.state = 2904
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 131)) & ~0x3f) == 0 and ((1 << (_la - 131)) & 10273836649938945) != 0):
                self.state = 2901
                self.interpolated_verbatium_string_part()
                self.state = 2906
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2907
            self.match(CSharpParser.DOUBLE_QUOTE_INSIDE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Interpolated_regular_string_partContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def interpolated_string_expression(self):
            return self.getTypedRuleContext(CSharpParser.Interpolated_string_expressionContext,0)


        def DOUBLE_CURLY_INSIDE(self):
            return self.getToken(CSharpParser.DOUBLE_CURLY_INSIDE, 0)

        def REGULAR_CHAR_INSIDE(self):
            return self.getToken(CSharpParser.REGULAR_CHAR_INSIDE, 0)

        def REGULAR_STRING_INSIDE(self):
            return self.getToken(CSharpParser.REGULAR_STRING_INSIDE, 0)

        def OPEN_BRACE_INSIDE(self):
            return self.getToken(CSharpParser.OPEN_BRACE_INSIDE, 0)

        def CLOSE_BRACE_INSIDE(self):
            return self.getToken(CSharpParser.CLOSE_BRACE_INSIDE, 0)

        def DOUBLE_QUOTE_INSIDE(self):
            return self.getToken(CSharpParser.DOUBLE_QUOTE_INSIDE, 0)

        def VERBATIUM_INSIDE_STRING(self):
            return self.getToken(CSharpParser.VERBATIUM_INSIDE_STRING, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_interpolated_regular_string_part

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterpolated_regular_string_part" ):
                listener.enterInterpolated_regular_string_part(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterpolated_regular_string_part" ):
                listener.exitInterpolated_regular_string_part(self)




    def interpolated_regular_string_part(self):

        localctx = CSharpParser.Interpolated_regular_string_partContext(self, self._ctx, self.state)
        self.enterRule(localctx, 490, self.RULE_interpolated_regular_string_part)
        try:
            self.state = 2917
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [131]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2909
                self.interpolated_string_expression()
                pass
            elif token in [178]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2910
                self.match(CSharpParser.DOUBLE_CURLY_INSIDE)
                pass
            elif token in [180]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2911
                self.match(CSharpParser.REGULAR_CHAR_INSIDE)
                pass
            elif token in [183]:
                self.enterOuterAlt(localctx, 4)
                self.state = 2912
                self.match(CSharpParser.REGULAR_STRING_INSIDE)
                pass
            elif token in [179]:
                self.enterOuterAlt(localctx, 5)
                self.state = 2913
                self.match(CSharpParser.OPEN_BRACE_INSIDE)
                pass
            elif token in [185]:
                self.enterOuterAlt(localctx, 6)
                self.state = 2914
                self.match(CSharpParser.CLOSE_BRACE_INSIDE)
                pass
            elif token in [182]:
                self.enterOuterAlt(localctx, 7)
                self.state = 2915
                self.match(CSharpParser.DOUBLE_QUOTE_INSIDE)
                pass
            elif token in [184]:
                self.enterOuterAlt(localctx, 8)
                self.state = 2916
                self.match(CSharpParser.VERBATIUM_INSIDE_STRING)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Interpolated_verbatium_string_partContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def interpolated_string_expression(self):
            return self.getTypedRuleContext(CSharpParser.Interpolated_string_expressionContext,0)


        def DOUBLE_CURLY_INSIDE(self):
            return self.getToken(CSharpParser.DOUBLE_CURLY_INSIDE, 0)

        def VERBATIUM_DOUBLE_QUOTE_INSIDE(self):
            return self.getToken(CSharpParser.VERBATIUM_DOUBLE_QUOTE_INSIDE, 0)

        def VERBATIUM_INSIDE_STRING(self):
            return self.getToken(CSharpParser.VERBATIUM_INSIDE_STRING, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_interpolated_verbatium_string_part

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterpolated_verbatium_string_part" ):
                listener.enterInterpolated_verbatium_string_part(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterpolated_verbatium_string_part" ):
                listener.exitInterpolated_verbatium_string_part(self)




    def interpolated_verbatium_string_part(self):

        localctx = CSharpParser.Interpolated_verbatium_string_partContext(self, self._ctx, self.state)
        self.enterRule(localctx, 492, self.RULE_interpolated_verbatium_string_part)
        try:
            self.state = 2923
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [131]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2919
                self.interpolated_string_expression()
                pass
            elif token in [178]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2920
                self.match(CSharpParser.DOUBLE_CURLY_INSIDE)
                pass
            elif token in [181]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2921
                self.match(CSharpParser.VERBATIUM_DOUBLE_QUOTE_INSIDE)
                pass
            elif token in [184]:
                self.enterOuterAlt(localctx, 4)
                self.state = 2922
                self.match(CSharpParser.VERBATIUM_INSIDE_STRING)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Interpolated_string_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_BRACE(self):
            return self.getToken(CSharpParser.OPEN_BRACE, 0)

        def expression(self):
            return self.getTypedRuleContext(CSharpParser.ExpressionContext,0)


        def CLOSE_BRACE(self):
            return self.getToken(CSharpParser.CLOSE_BRACE, 0)

        def COMMA(self):
            return self.getToken(CSharpParser.COMMA, 0)

        def interpolation_minimum_width(self):
            return self.getTypedRuleContext(CSharpParser.Interpolation_minimum_widthContext,0)


        def format_string(self):
            return self.getTypedRuleContext(CSharpParser.Format_stringContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_interpolated_string_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterpolated_string_expression" ):
                listener.enterInterpolated_string_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterpolated_string_expression" ):
                listener.exitInterpolated_string_expression(self)




    def interpolated_string_expression(self):

        localctx = CSharpParser.Interpolated_string_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 494, self.RULE_interpolated_string_expression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2925
            self.match(CSharpParser.OPEN_BRACE)
            self.state = 2926
            self.expression()
            self.state = 2929
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==138:
                self.state = 2927
                self.match(CSharpParser.COMMA)
                self.state = 2928
                self.interpolation_minimum_width()


            self.state = 2932
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==139:
                self.state = 2931
                self.format_string()


            self.state = 2934
            self.match(CSharpParser.CLOSE_BRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Interpolation_minimum_widthContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def constant_expression(self):
            return self.getTypedRuleContext(CSharpParser.Constant_expressionContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_interpolation_minimum_width

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterpolation_minimum_width" ):
                listener.enterInterpolation_minimum_width(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterpolation_minimum_width" ):
                listener.exitInterpolation_minimum_width(self)




    def interpolation_minimum_width(self):

        localctx = CSharpParser.Interpolation_minimum_widthContext(self, self._ctx, self.state)
        self.enterRule(localctx, 496, self.RULE_interpolation_minimum_width)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2936
            self.constant_expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Format_stringContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COLON(self):
            return self.getToken(CSharpParser.COLON, 0)

        def FORMAT_STRING(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.FORMAT_STRING)
            else:
                return self.getToken(CSharpParser.FORMAT_STRING, i)

        def getRuleIndex(self):
            return CSharpParser.RULE_format_string

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFormat_string" ):
                listener.enterFormat_string(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFormat_string" ):
                listener.exitFormat_string(self)




    def format_string(self):

        localctx = CSharpParser.Format_stringContext(self, self._ctx, self.state)
        self.enterRule(localctx, 498, self.RULE_format_string)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2938
            self.match(CSharpParser.COLON)
            self.state = 2940 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 2939
                self.match(CSharpParser.FORMAT_STRING)
                self.state = 2942 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==186):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Constant_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(CSharpParser.ExpressionContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_constant_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstant_expression" ):
                listener.enterConstant_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstant_expression" ):
                listener.exitConstant_expression(self)




    def constant_expression(self):

        localctx = CSharpParser.Constant_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 500, self.RULE_constant_expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2944
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class KeywordContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ABSTRACT(self):
            return self.getToken(CSharpParser.ABSTRACT, 0)

        def AS(self):
            return self.getToken(CSharpParser.AS, 0)

        def BASE(self):
            return self.getToken(CSharpParser.BASE, 0)

        def BOOL(self):
            return self.getToken(CSharpParser.BOOL, 0)

        def BREAK(self):
            return self.getToken(CSharpParser.BREAK, 0)

        def BYTE(self):
            return self.getToken(CSharpParser.BYTE, 0)

        def CASE(self):
            return self.getToken(CSharpParser.CASE, 0)

        def CATCH(self):
            return self.getToken(CSharpParser.CATCH, 0)

        def CHAR(self):
            return self.getToken(CSharpParser.CHAR, 0)

        def CHECKED(self):
            return self.getToken(CSharpParser.CHECKED, 0)

        def CLASS(self):
            return self.getToken(CSharpParser.CLASS, 0)

        def CONST(self):
            return self.getToken(CSharpParser.CONST, 0)

        def CONTINUE(self):
            return self.getToken(CSharpParser.CONTINUE, 0)

        def DECIMAL(self):
            return self.getToken(CSharpParser.DECIMAL, 0)

        def DEFAULT(self):
            return self.getToken(CSharpParser.DEFAULT, 0)

        def DELEGATE(self):
            return self.getToken(CSharpParser.DELEGATE, 0)

        def DO(self):
            return self.getToken(CSharpParser.DO, 0)

        def DOUBLE(self):
            return self.getToken(CSharpParser.DOUBLE, 0)

        def ELSE(self):
            return self.getToken(CSharpParser.ELSE, 0)

        def ENUM(self):
            return self.getToken(CSharpParser.ENUM, 0)

        def EVENT(self):
            return self.getToken(CSharpParser.EVENT, 0)

        def EXPLICIT(self):
            return self.getToken(CSharpParser.EXPLICIT, 0)

        def EXTERN(self):
            return self.getToken(CSharpParser.EXTERN, 0)

        def FALSE(self):
            return self.getToken(CSharpParser.FALSE, 0)

        def FINALLY(self):
            return self.getToken(CSharpParser.FINALLY, 0)

        def FIXED(self):
            return self.getToken(CSharpParser.FIXED, 0)

        def FLOAT(self):
            return self.getToken(CSharpParser.FLOAT, 0)

        def FOR(self):
            return self.getToken(CSharpParser.FOR, 0)

        def FOREACH(self):
            return self.getToken(CSharpParser.FOREACH, 0)

        def GOTO(self):
            return self.getToken(CSharpParser.GOTO, 0)

        def IF(self):
            return self.getToken(CSharpParser.IF, 0)

        def IMPLICIT(self):
            return self.getToken(CSharpParser.IMPLICIT, 0)

        def IN(self):
            return self.getToken(CSharpParser.IN, 0)

        def INT(self):
            return self.getToken(CSharpParser.INT, 0)

        def INTERFACE(self):
            return self.getToken(CSharpParser.INTERFACE, 0)

        def INTERNAL(self):
            return self.getToken(CSharpParser.INTERNAL, 0)

        def IS(self):
            return self.getToken(CSharpParser.IS, 0)

        def LOCK(self):
            return self.getToken(CSharpParser.LOCK, 0)

        def LONG(self):
            return self.getToken(CSharpParser.LONG, 0)

        def NAMESPACE(self):
            return self.getToken(CSharpParser.NAMESPACE, 0)

        def NEW(self):
            return self.getToken(CSharpParser.NEW, 0)

        def NULL_(self):
            return self.getToken(CSharpParser.NULL_, 0)

        def OBJECT(self):
            return self.getToken(CSharpParser.OBJECT, 0)

        def OPERATOR(self):
            return self.getToken(CSharpParser.OPERATOR, 0)

        def OUT(self):
            return self.getToken(CSharpParser.OUT, 0)

        def OVERRIDE(self):
            return self.getToken(CSharpParser.OVERRIDE, 0)

        def PARAMS(self):
            return self.getToken(CSharpParser.PARAMS, 0)

        def PRIVATE(self):
            return self.getToken(CSharpParser.PRIVATE, 0)

        def PROTECTED(self):
            return self.getToken(CSharpParser.PROTECTED, 0)

        def PUBLIC(self):
            return self.getToken(CSharpParser.PUBLIC, 0)

        def READONLY(self):
            return self.getToken(CSharpParser.READONLY, 0)

        def REF(self):
            return self.getToken(CSharpParser.REF, 0)

        def RETURN(self):
            return self.getToken(CSharpParser.RETURN, 0)

        def SBYTE(self):
            return self.getToken(CSharpParser.SBYTE, 0)

        def SEALED(self):
            return self.getToken(CSharpParser.SEALED, 0)

        def SHORT(self):
            return self.getToken(CSharpParser.SHORT, 0)

        def SIZEOF(self):
            return self.getToken(CSharpParser.SIZEOF, 0)

        def STACKALLOC(self):
            return self.getToken(CSharpParser.STACKALLOC, 0)

        def STATIC(self):
            return self.getToken(CSharpParser.STATIC, 0)

        def STRING(self):
            return self.getToken(CSharpParser.STRING, 0)

        def STRUCT(self):
            return self.getToken(CSharpParser.STRUCT, 0)

        def SWITCH(self):
            return self.getToken(CSharpParser.SWITCH, 0)

        def THIS(self):
            return self.getToken(CSharpParser.THIS, 0)

        def THROW(self):
            return self.getToken(CSharpParser.THROW, 0)

        def TRUE(self):
            return self.getToken(CSharpParser.TRUE, 0)

        def TRY(self):
            return self.getToken(CSharpParser.TRY, 0)

        def TYPEOF(self):
            return self.getToken(CSharpParser.TYPEOF, 0)

        def UINT(self):
            return self.getToken(CSharpParser.UINT, 0)

        def ULONG(self):
            return self.getToken(CSharpParser.ULONG, 0)

        def UNCHECKED(self):
            return self.getToken(CSharpParser.UNCHECKED, 0)

        def UNMANAGED(self):
            return self.getToken(CSharpParser.UNMANAGED, 0)

        def UNSAFE(self):
            return self.getToken(CSharpParser.UNSAFE, 0)

        def USHORT(self):
            return self.getToken(CSharpParser.USHORT, 0)

        def USING(self):
            return self.getToken(CSharpParser.USING, 0)

        def VIRTUAL(self):
            return self.getToken(CSharpParser.VIRTUAL, 0)

        def VOID(self):
            return self.getToken(CSharpParser.VOID, 0)

        def VOLATILE(self):
            return self.getToken(CSharpParser.VOLATILE, 0)

        def WHILE(self):
            return self.getToken(CSharpParser.WHILE, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_keyword

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterKeyword" ):
                listener.enterKeyword(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitKeyword" ):
                listener.exitKeyword(self)




    def keyword(self):

        localctx = CSharpParser.KeywordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 502, self.RULE_keyword)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2946
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 5749407247224291840) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & 5559130687239387) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Class_definitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CLASS(self):
            return self.getToken(CSharpParser.CLASS, 0)

        def identifier(self):
            return self.getTypedRuleContext(CSharpParser.IdentifierContext,0)


        def class_body(self):
            return self.getTypedRuleContext(CSharpParser.Class_bodyContext,0)


        def class_modifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Class_modifierContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Class_modifierContext,i)


        def PARTIAL(self):
            return self.getToken(CSharpParser.PARTIAL, 0)

        def type_parameter_list(self):
            return self.getTypedRuleContext(CSharpParser.Type_parameter_listContext,0)


        def class_base(self):
            return self.getTypedRuleContext(CSharpParser.Class_baseContext,0)


        def type_parameter_constraints_clauses(self):
            return self.getTypedRuleContext(CSharpParser.Type_parameter_constraints_clausesContext,0)


        def SEMICOLON(self):
            return self.getToken(CSharpParser.SEMICOLON, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_class_definition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClass_definition" ):
                listener.enterClass_definition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClass_definition" ):
                listener.exitClass_definition(self)




    def class_definition(self):

        localctx = CSharpParser.Class_definitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 504, self.RULE_class_definition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2951
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==9 or _la==59 or ((((_la - 69)) & ~0x3f) == 0 and ((1 << (_la - 69)) & 549824000001) != 0):
                self.state = 2948
                self.class_modifier()
                self.state = 2953
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2955
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==80:
                self.state = 2954
                self.match(CSharpParser.PARTIAL)


            self.state = 2957
            self.match(CSharpParser.CLASS)
            self.state = 2958
            self.identifier()
            self.state = 2960
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==152:
                self.state = 2959
                self.type_parameter_list()


            self.state = 2963
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==139:
                self.state = 2962
                self.class_base()


            self.state = 2966
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==116:
                self.state = 2965
                self.type_parameter_constraints_clauses()


            self.state = 2968
            self.class_body()
            self.state = 2970
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,355,self._ctx)
            if la_ == 1:
                self.state = 2969
                self.match(CSharpParser.SEMICOLON)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Class_modifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NEW(self):
            return self.getToken(CSharpParser.NEW, 0)

        def PUBLIC(self):
            return self.getToken(CSharpParser.PUBLIC, 0)

        def PROTECTED(self):
            return self.getToken(CSharpParser.PROTECTED, 0)

        def INTERNAL(self):
            return self.getToken(CSharpParser.INTERNAL, 0)

        def PRIVATE(self):
            return self.getToken(CSharpParser.PRIVATE, 0)

        def ABSTRACT(self):
            return self.getToken(CSharpParser.ABSTRACT, 0)

        def SEALED(self):
            return self.getToken(CSharpParser.SEALED, 0)

        def STATIC(self):
            return self.getToken(CSharpParser.STATIC, 0)

        def UNSAFE(self):
            return self.getToken(CSharpParser.UNSAFE, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_class_modifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClass_modifier" ):
                listener.enterClass_modifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClass_modifier" ):
                listener.exitClass_modifier(self)




    def class_modifier(self):

        localctx = CSharpParser.Class_modifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 506, self.RULE_class_modifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2972
            _la = self._input.LA(1)
            if not(_la==9 or _la==59 or ((((_la - 69)) & ~0x3f) == 0 and ((1 << (_la - 69)) & 549824000001) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Struct_definitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STRUCT(self):
            return self.getToken(CSharpParser.STRUCT, 0)

        def identifier(self):
            return self.getTypedRuleContext(CSharpParser.IdentifierContext,0)


        def struct_body(self):
            return self.getTypedRuleContext(CSharpParser.Struct_bodyContext,0)


        def struct_modifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Struct_modifierContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Struct_modifierContext,i)


        def REF(self):
            return self.getToken(CSharpParser.REF, 0)

        def PARTIAL(self):
            return self.getToken(CSharpParser.PARTIAL, 0)

        def RECORD(self):
            return self.getToken(CSharpParser.RECORD, 0)

        def READONLY(self):
            return self.getToken(CSharpParser.READONLY, 0)

        def type_parameter_list(self):
            return self.getTypedRuleContext(CSharpParser.Type_parameter_listContext,0)


        def struct_interfaces(self):
            return self.getTypedRuleContext(CSharpParser.Struct_interfacesContext,0)


        def type_parameter_constraints_clauses(self):
            return self.getTypedRuleContext(CSharpParser.Type_parameter_constraints_clausesContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_struct_definition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStruct_definition" ):
                listener.enterStruct_definition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStruct_definition" ):
                listener.exitStruct_definition(self)




    def struct_definition(self):

        localctx = CSharpParser.Struct_definitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 508, self.RULE_struct_definition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2977
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,356,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2974
                    self.struct_modifier() 
                self.state = 2979
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,356,self._ctx)

            self.state = 2981
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==85:
                self.state = 2980
                self.match(CSharpParser.REF)


            self.state = 2984
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==80:
                self.state = 2983
                self.match(CSharpParser.PARTIAL)


            self.state = 2989
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [119]:
                self.state = 2986
                self.match(CSharpParser.RECORD)
                pass
            elif token in [84]:
                self.state = 2987
                self.match(CSharpParser.READONLY)
                self.state = 2988
                self.match(CSharpParser.RECORD)
                pass
            elif token in [97]:
                pass
            else:
                pass
            self.state = 2991
            self.match(CSharpParser.STRUCT)
            self.state = 2992
            self.identifier()
            self.state = 2994
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==152:
                self.state = 2993
                self.type_parameter_list()


            self.state = 2997
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==139:
                self.state = 2996
                self.struct_interfaces()


            self.state = 3000
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==116:
                self.state = 2999
                self.type_parameter_constraints_clauses()


            self.state = 3002
            self.struct_body()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Struct_modifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NEW(self):
            return self.getToken(CSharpParser.NEW, 0)

        def PUBLIC(self):
            return self.getToken(CSharpParser.PUBLIC, 0)

        def PROTECTED(self):
            return self.getToken(CSharpParser.PROTECTED, 0)

        def INTERNAL(self):
            return self.getToken(CSharpParser.INTERNAL, 0)

        def PRIVATE(self):
            return self.getToken(CSharpParser.PRIVATE, 0)

        def READONLY(self):
            return self.getToken(CSharpParser.READONLY, 0)

        def UNSAFE(self):
            return self.getToken(CSharpParser.UNSAFE, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_struct_modifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStruct_modifier" ):
                listener.enterStruct_modifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStruct_modifier" ):
                listener.exitStruct_modifier(self)




    def struct_modifier(self):

        localctx = CSharpParser.Struct_modifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 510, self.RULE_struct_modifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3004
            _la = self._input.LA(1)
            if not(((((_la - 59)) & ~0x3f) == 0 and ((1 << (_la - 59)) & 562950016336897) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Interface_definitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INTERFACE(self):
            return self.getToken(CSharpParser.INTERFACE, 0)

        def identifier(self):
            return self.getTypedRuleContext(CSharpParser.IdentifierContext,0)


        def class_body(self):
            return self.getTypedRuleContext(CSharpParser.Class_bodyContext,0)


        def variant_type_parameter_list(self):
            return self.getTypedRuleContext(CSharpParser.Variant_type_parameter_listContext,0)


        def interface_base(self):
            return self.getTypedRuleContext(CSharpParser.Interface_baseContext,0)


        def type_parameter_constraints_clauses(self):
            return self.getTypedRuleContext(CSharpParser.Type_parameter_constraints_clausesContext,0)


        def SEMICOLON(self):
            return self.getToken(CSharpParser.SEMICOLON, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_interface_definition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterface_definition" ):
                listener.enterInterface_definition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterface_definition" ):
                listener.exitInterface_definition(self)




    def interface_definition(self):

        localctx = CSharpParser.Interface_definitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 512, self.RULE_interface_definition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3006
            self.match(CSharpParser.INTERFACE)
            self.state = 3007
            self.identifier()
            self.state = 3009
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==152:
                self.state = 3008
                self.variant_type_parameter_list()


            self.state = 3012
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==139:
                self.state = 3011
                self.interface_base()


            self.state = 3015
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==116:
                self.state = 3014
                self.type_parameter_constraints_clauses()


            self.state = 3017
            self.class_body()
            self.state = 3019
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,366,self._ctx)
            if la_ == 1:
                self.state = 3018
                self.match(CSharpParser.SEMICOLON)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Enum_definitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ENUM(self):
            return self.getToken(CSharpParser.ENUM, 0)

        def identifier(self):
            return self.getTypedRuleContext(CSharpParser.IdentifierContext,0)


        def enum_body(self):
            return self.getTypedRuleContext(CSharpParser.Enum_bodyContext,0)


        def enum_base(self):
            return self.getTypedRuleContext(CSharpParser.Enum_baseContext,0)


        def SEMICOLON(self):
            return self.getToken(CSharpParser.SEMICOLON, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_enum_definition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnum_definition" ):
                listener.enterEnum_definition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnum_definition" ):
                listener.exitEnum_definition(self)




    def enum_definition(self):

        localctx = CSharpParser.Enum_definitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 514, self.RULE_enum_definition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3021
            self.match(CSharpParser.ENUM)
            self.state = 3022
            self.identifier()
            self.state = 3024
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==139:
                self.state = 3023
                self.enum_base()


            self.state = 3026
            self.enum_body()
            self.state = 3028
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,368,self._ctx)
            if la_ == 1:
                self.state = 3027
                self.match(CSharpParser.SEMICOLON)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Delegate_definitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DELEGATE(self):
            return self.getToken(CSharpParser.DELEGATE, 0)

        def return_type(self):
            return self.getTypedRuleContext(CSharpParser.Return_typeContext,0)


        def identifier(self):
            return self.getTypedRuleContext(CSharpParser.IdentifierContext,0)


        def OPEN_PARENS(self):
            return self.getToken(CSharpParser.OPEN_PARENS, 0)

        def CLOSE_PARENS(self):
            return self.getToken(CSharpParser.CLOSE_PARENS, 0)

        def SEMICOLON(self):
            return self.getToken(CSharpParser.SEMICOLON, 0)

        def variant_type_parameter_list(self):
            return self.getTypedRuleContext(CSharpParser.Variant_type_parameter_listContext,0)


        def formal_parameter_list(self):
            return self.getTypedRuleContext(CSharpParser.Formal_parameter_listContext,0)


        def type_parameter_constraints_clauses(self):
            return self.getTypedRuleContext(CSharpParser.Type_parameter_constraints_clausesContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_delegate_definition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDelegate_definition" ):
                listener.enterDelegate_definition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDelegate_definition" ):
                listener.exitDelegate_definition(self)




    def delegate_definition(self):

        localctx = CSharpParser.Delegate_definitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 516, self.RULE_delegate_definition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3030
            self.match(CSharpParser.DELEGATE)
            self.state = 3031
            self.return_type()
            self.state = 3032
            self.identifier()
            self.state = 3034
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==152:
                self.state = 3033
                self.variant_type_parameter_list()


            self.state = 3036
            self.match(CSharpParser.OPEN_PARENS)
            self.state = 3038
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 10)) & ~0x3f) == 0 and ((1 << (_la - 10)) & -4366018217772016915) != 0) or ((((_la - 76)) & ~0x3f) == 0 and ((1 << (_la - 76)) & 720599763230250523) != 0):
                self.state = 3037
                self.formal_parameter_list()


            self.state = 3040
            self.match(CSharpParser.CLOSE_PARENS)
            self.state = 3042
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==116:
                self.state = 3041
                self.type_parameter_constraints_clauses()


            self.state = 3044
            self.match(CSharpParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Event_declarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EVENT(self):
            return self.getToken(CSharpParser.EVENT, 0)

        def type_(self):
            return self.getTypedRuleContext(CSharpParser.Type_Context,0)


        def variable_declarators(self):
            return self.getTypedRuleContext(CSharpParser.Variable_declaratorsContext,0)


        def SEMICOLON(self):
            return self.getToken(CSharpParser.SEMICOLON, 0)

        def member_name(self):
            return self.getTypedRuleContext(CSharpParser.Member_nameContext,0)


        def OPEN_BRACE(self):
            return self.getToken(CSharpParser.OPEN_BRACE, 0)

        def event_accessor_declarations(self):
            return self.getTypedRuleContext(CSharpParser.Event_accessor_declarationsContext,0)


        def CLOSE_BRACE(self):
            return self.getToken(CSharpParser.CLOSE_BRACE, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_event_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEvent_declaration" ):
                listener.enterEvent_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEvent_declaration" ):
                listener.exitEvent_declaration(self)




    def event_declaration(self):

        localctx = CSharpParser.Event_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 518, self.RULE_event_declaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3046
            self.match(CSharpParser.EVENT)
            self.state = 3047
            self.type_()
            self.state = 3056
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,372,self._ctx)
            if la_ == 1:
                self.state = 3048
                self.variable_declarators()
                self.state = 3049
                self.match(CSharpParser.SEMICOLON)
                pass

            elif la_ == 2:
                self.state = 3051
                self.member_name()
                self.state = 3052
                self.match(CSharpParser.OPEN_BRACE)
                self.state = 3053
                self.event_accessor_declarations()
                self.state = 3054
                self.match(CSharpParser.CLOSE_BRACE)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Field_declarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def variable_declarators(self):
            return self.getTypedRuleContext(CSharpParser.Variable_declaratorsContext,0)


        def SEMICOLON(self):
            return self.getToken(CSharpParser.SEMICOLON, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_field_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterField_declaration" ):
                listener.enterField_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitField_declaration" ):
                listener.exitField_declaration(self)




    def field_declaration(self):

        localctx = CSharpParser.Field_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 520, self.RULE_field_declaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3058
            self.variable_declarators()
            self.state = 3059
            self.match(CSharpParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Property_declarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def member_name(self):
            return self.getTypedRuleContext(CSharpParser.Member_nameContext,0)


        def OPEN_BRACE(self):
            return self.getToken(CSharpParser.OPEN_BRACE, 0)

        def accessor_declarations(self):
            return self.getTypedRuleContext(CSharpParser.Accessor_declarationsContext,0)


        def CLOSE_BRACE(self):
            return self.getToken(CSharpParser.CLOSE_BRACE, 0)

        def right_arrow(self):
            return self.getTypedRuleContext(CSharpParser.Right_arrowContext,0)


        def throwable_expression(self):
            return self.getTypedRuleContext(CSharpParser.Throwable_expressionContext,0)


        def SEMICOLON(self):
            return self.getToken(CSharpParser.SEMICOLON, 0)

        def ASSIGNMENT(self):
            return self.getToken(CSharpParser.ASSIGNMENT, 0)

        def variable_initializer(self):
            return self.getTypedRuleContext(CSharpParser.Variable_initializerContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_property_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProperty_declaration" ):
                listener.enterProperty_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProperty_declaration" ):
                listener.exitProperty_declaration(self)




    def property_declaration(self):

        localctx = CSharpParser.Property_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 522, self.RULE_property_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3061
            self.member_name()
            self.state = 3075
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [131]:
                self.state = 3062
                self.match(CSharpParser.OPEN_BRACE)
                self.state = 3063
                self.accessor_declarations()
                self.state = 3064
                self.match(CSharpParser.CLOSE_BRACE)
                self.state = 3069
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==151:
                    self.state = 3065
                    self.match(CSharpParser.ASSIGNMENT)
                    self.state = 3066
                    self.variable_initializer()
                    self.state = 3067
                    self.match(CSharpParser.SEMICOLON)


                pass
            elif token in [151]:
                self.state = 3071
                self.right_arrow()
                self.state = 3072
                self.throwable_expression()
                self.state = 3073
                self.match(CSharpParser.SEMICOLON)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Constant_declarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CONST(self):
            return self.getToken(CSharpParser.CONST, 0)

        def type_(self):
            return self.getTypedRuleContext(CSharpParser.Type_Context,0)


        def constant_declarators(self):
            return self.getTypedRuleContext(CSharpParser.Constant_declaratorsContext,0)


        def SEMICOLON(self):
            return self.getToken(CSharpParser.SEMICOLON, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_constant_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstant_declaration" ):
                listener.enterConstant_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstant_declaration" ):
                listener.exitConstant_declaration(self)




    def constant_declaration(self):

        localctx = CSharpParser.Constant_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 524, self.RULE_constant_declaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3077
            self.match(CSharpParser.CONST)
            self.state = 3078
            self.type_()
            self.state = 3079
            self.constant_declarators()
            self.state = 3080
            self.match(CSharpParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Indexer_declarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def THIS(self):
            return self.getToken(CSharpParser.THIS, 0)

        def OPEN_BRACKET(self):
            return self.getToken(CSharpParser.OPEN_BRACKET, 0)

        def formal_parameter_list(self):
            return self.getTypedRuleContext(CSharpParser.Formal_parameter_listContext,0)


        def CLOSE_BRACKET(self):
            return self.getToken(CSharpParser.CLOSE_BRACKET, 0)

        def OPEN_BRACE(self):
            return self.getToken(CSharpParser.OPEN_BRACE, 0)

        def accessor_declarations(self):
            return self.getTypedRuleContext(CSharpParser.Accessor_declarationsContext,0)


        def CLOSE_BRACE(self):
            return self.getToken(CSharpParser.CLOSE_BRACE, 0)

        def right_arrow(self):
            return self.getTypedRuleContext(CSharpParser.Right_arrowContext,0)


        def throwable_expression(self):
            return self.getTypedRuleContext(CSharpParser.Throwable_expressionContext,0)


        def SEMICOLON(self):
            return self.getToken(CSharpParser.SEMICOLON, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_indexer_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndexer_declaration" ):
                listener.enterIndexer_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndexer_declaration" ):
                listener.exitIndexer_declaration(self)




    def indexer_declaration(self):

        localctx = CSharpParser.Indexer_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 526, self.RULE_indexer_declaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3082
            self.match(CSharpParser.THIS)
            self.state = 3083
            self.match(CSharpParser.OPEN_BRACKET)
            self.state = 3084
            self.formal_parameter_list()
            self.state = 3085
            self.match(CSharpParser.CLOSE_BRACKET)
            self.state = 3094
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [131]:
                self.state = 3086
                self.match(CSharpParser.OPEN_BRACE)
                self.state = 3087
                self.accessor_declarations()
                self.state = 3088
                self.match(CSharpParser.CLOSE_BRACE)
                pass
            elif token in [151]:
                self.state = 3090
                self.right_arrow()
                self.state = 3091
                self.throwable_expression()
                self.state = 3092
                self.match(CSharpParser.SEMICOLON)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Destructor_definitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TILDE(self):
            return self.getToken(CSharpParser.TILDE, 0)

        def identifier(self):
            return self.getTypedRuleContext(CSharpParser.IdentifierContext,0)


        def OPEN_PARENS(self):
            return self.getToken(CSharpParser.OPEN_PARENS, 0)

        def CLOSE_PARENS(self):
            return self.getToken(CSharpParser.CLOSE_PARENS, 0)

        def body(self):
            return self.getTypedRuleContext(CSharpParser.BodyContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_destructor_definition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDestructor_definition" ):
                listener.enterDestructor_definition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDestructor_definition" ):
                listener.exitDestructor_definition(self)




    def destructor_definition(self):

        localctx = CSharpParser.Destructor_definitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 528, self.RULE_destructor_definition)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3096
            self.match(CSharpParser.TILDE)
            self.state = 3097
            self.identifier()
            self.state = 3098
            self.match(CSharpParser.OPEN_PARENS)
            self.state = 3099
            self.match(CSharpParser.CLOSE_PARENS)
            self.state = 3100
            self.body()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Constructor_declarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(CSharpParser.IdentifierContext,0)


        def OPEN_PARENS(self):
            return self.getToken(CSharpParser.OPEN_PARENS, 0)

        def CLOSE_PARENS(self):
            return self.getToken(CSharpParser.CLOSE_PARENS, 0)

        def body(self):
            return self.getTypedRuleContext(CSharpParser.BodyContext,0)


        def formal_parameter_list(self):
            return self.getTypedRuleContext(CSharpParser.Formal_parameter_listContext,0)


        def constructor_initializer(self):
            return self.getTypedRuleContext(CSharpParser.Constructor_initializerContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_constructor_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstructor_declaration" ):
                listener.enterConstructor_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstructor_declaration" ):
                listener.exitConstructor_declaration(self)




    def constructor_declaration(self):

        localctx = CSharpParser.Constructor_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 530, self.RULE_constructor_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3102
            self.identifier()
            self.state = 3103
            self.match(CSharpParser.OPEN_PARENS)
            self.state = 3105
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 10)) & ~0x3f) == 0 and ((1 << (_la - 10)) & -4366018217772016915) != 0) or ((((_la - 76)) & ~0x3f) == 0 and ((1 << (_la - 76)) & 720599763230250523) != 0):
                self.state = 3104
                self.formal_parameter_list()


            self.state = 3107
            self.match(CSharpParser.CLOSE_PARENS)
            self.state = 3109
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==139:
                self.state = 3108
                self.constructor_initializer()


            self.state = 3111
            self.body()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Method_declarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def method_modifiers(self):
            return self.getTypedRuleContext(CSharpParser.Method_modifiersContext,0)


        def return_type(self):
            return self.getTypedRuleContext(CSharpParser.Return_typeContext,0)


        def method_header(self):
            return self.getTypedRuleContext(CSharpParser.Method_headerContext,0)


        def method_body(self):
            return self.getTypedRuleContext(CSharpParser.Method_bodyContext,0)


        def attributes(self):
            return self.getTypedRuleContext(CSharpParser.AttributesContext,0)


        def PUBLIC(self):
            return self.getToken(CSharpParser.PUBLIC, 0)

        def ref_method_modifiers(self):
            return self.getTypedRuleContext(CSharpParser.Ref_method_modifiersContext,0)


        def ref_kind(self):
            return self.getTypedRuleContext(CSharpParser.Ref_kindContext,0)


        def ref_return_type(self):
            return self.getTypedRuleContext(CSharpParser.Ref_return_typeContext,0)


        def ref_method_body(self):
            return self.getTypedRuleContext(CSharpParser.Ref_method_bodyContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_method_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMethod_declaration" ):
                listener.enterMethod_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMethod_declaration" ):
                listener.exitMethod_declaration(self)




    def method_declaration(self):

        localctx = CSharpParser.Method_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 532, self.RULE_method_declaration)
        self._la = 0 # Token type
        try:
            self.state = 3133
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,381,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3114
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==133:
                    self.state = 3113
                    self.attributes()


                self.state = 3116
                self.method_modifiers()
                self.state = 3118
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==83:
                    self.state = 3117
                    self.match(CSharpParser.PUBLIC)


                self.state = 3120
                self.return_type()
                self.state = 3121
                self.method_header()
                self.state = 3122
                self.method_body()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3125
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==133:
                    self.state = 3124
                    self.attributes()


                self.state = 3127
                self.ref_method_modifiers()
                self.state = 3128
                self.ref_kind()
                self.state = 3129
                self.ref_return_type()
                self.state = 3130
                self.method_header()
                self.state = 3131
                self.ref_method_body()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Method_headerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def method_member_name(self):
            return self.getTypedRuleContext(CSharpParser.Method_member_nameContext,0)


        def OPEN_PARENS(self):
            return self.getToken(CSharpParser.OPEN_PARENS, 0)

        def CLOSE_PARENS(self):
            return self.getToken(CSharpParser.CLOSE_PARENS, 0)

        def formal_parameter_list(self):
            return self.getTypedRuleContext(CSharpParser.Formal_parameter_listContext,0)


        def type_parameter_list(self):
            return self.getTypedRuleContext(CSharpParser.Type_parameter_listContext,0)


        def type_parameter_constraints_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Type_parameter_constraints_clauseContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Type_parameter_constraints_clauseContext,i)


        def getRuleIndex(self):
            return CSharpParser.RULE_method_header

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMethod_header" ):
                listener.enterMethod_header(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMethod_header" ):
                listener.exitMethod_header(self)




    def method_header(self):

        localctx = CSharpParser.Method_headerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 534, self.RULE_method_header)
        self._la = 0 # Token type
        try:
            self.state = 3155
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,385,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3135
                self.method_member_name()
                self.state = 3136
                self.match(CSharpParser.OPEN_PARENS)
                self.state = 3138
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 10)) & ~0x3f) == 0 and ((1 << (_la - 10)) & -4366018217772016915) != 0) or ((((_la - 76)) & ~0x3f) == 0 and ((1 << (_la - 76)) & 720599763230250523) != 0):
                    self.state = 3137
                    self.formal_parameter_list()


                self.state = 3140
                self.match(CSharpParser.CLOSE_PARENS)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3142
                self.method_member_name()
                self.state = 3143
                self.type_parameter_list()
                self.state = 3144
                self.match(CSharpParser.OPEN_PARENS)
                self.state = 3146
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 10)) & ~0x3f) == 0 and ((1 << (_la - 10)) & -4366018217772016915) != 0) or ((((_la - 76)) & ~0x3f) == 0 and ((1 << (_la - 76)) & 720599763230250523) != 0):
                    self.state = 3145
                    self.formal_parameter_list()


                self.state = 3148
                self.match(CSharpParser.CLOSE_PARENS)
                self.state = 3152
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==116:
                    self.state = 3149
                    self.type_parameter_constraints_clause()
                    self.state = 3154
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Ref_kindContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REF(self):
            return self.getToken(CSharpParser.REF, 0)

        def READONLY(self):
            return self.getToken(CSharpParser.READONLY, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_ref_kind

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRef_kind" ):
                listener.enterRef_kind(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRef_kind" ):
                listener.exitRef_kind(self)




    def ref_kind(self):

        localctx = CSharpParser.Ref_kindContext(self, self._ctx, self.state)
        self.enterRule(localctx, 536, self.RULE_ref_kind)
        try:
            self.state = 3160
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,386,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3157
                self.match(CSharpParser.REF)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3158
                self.match(CSharpParser.REF)
                self.state = 3159
                self.match(CSharpParser.READONLY)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Ref_method_modifiersContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ref_method_modifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Ref_method_modifierContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Ref_method_modifierContext,i)


        def getRuleIndex(self):
            return CSharpParser.RULE_ref_method_modifiers

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRef_method_modifiers" ):
                listener.enterRef_method_modifiers(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRef_method_modifiers" ):
                listener.exitRef_method_modifiers(self)




    def ref_method_modifiers(self):

        localctx = CSharpParser.Ref_method_modifiersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 538, self.RULE_ref_method_modifiers)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3165
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & 576465150349935104) != 0) or ((((_la - 69)) & ~0x3f) == 0 and ((1 << (_la - 69)) & 9345917022721) != 0):
                self.state = 3162
                self.ref_method_modifier()
                self.state = 3167
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Ref_return_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def type_(self):
            return self.getTypedRuleContext(CSharpParser.Type_Context,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_ref_return_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRef_return_type" ):
                listener.enterRef_return_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRef_return_type" ):
                listener.exitRef_return_type(self)




    def ref_return_type(self):

        localctx = CSharpParser.Ref_return_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 540, self.RULE_ref_return_type)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3168
            self.type_()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Method_modifiersContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def method_modifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Method_modifierContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Method_modifierContext,i)


        def PARTIAL(self):
            return self.getToken(CSharpParser.PARTIAL, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_method_modifiers

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMethod_modifiers" ):
                listener.enterMethod_modifiers(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMethod_modifiers" ):
                listener.exitMethod_modifiers(self)




    def method_modifiers(self):

        localctx = CSharpParser.Method_modifiersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 542, self.RULE_method_modifiers)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3173
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,388,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 3170
                    self.method_modifier() 
                self.state = 3175
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,388,self._ctx)

            self.state = 3177
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,389,self._ctx)
            if la_ == 1:
                self.state = 3176
                self.match(CSharpParser.PARTIAL)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Method_modifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ref_method_modifier(self):
            return self.getTypedRuleContext(CSharpParser.Ref_method_modifierContext,0)


        def ASYNC(self):
            return self.getToken(CSharpParser.ASYNC, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_method_modifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMethod_modifier" ):
                listener.enterMethod_modifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMethod_modifier" ):
                listener.exitMethod_modifier(self)




    def method_modifier(self):

        localctx = CSharpParser.Method_modifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 544, self.RULE_method_modifier)
        try:
            self.state = 3181
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [9, 42, 59, 69, 78, 81, 82, 83, 89, 95, 108, 112]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3179
                self.ref_method_modifier()
                pass
            elif token in [16]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3180
                self.match(CSharpParser.ASYNC)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Ref_method_bodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def block(self):
            return self.getTypedRuleContext(CSharpParser.BlockContext,0)


        def right_arrow(self):
            return self.getTypedRuleContext(CSharpParser.Right_arrowContext,0)


        def REF(self):
            return self.getToken(CSharpParser.REF, 0)

        def variable_reference(self):
            return self.getTypedRuleContext(CSharpParser.Variable_referenceContext,0)


        def SEMICOLON(self):
            return self.getToken(CSharpParser.SEMICOLON, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_ref_method_body

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRef_method_body" ):
                listener.enterRef_method_body(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRef_method_body" ):
                listener.exitRef_method_body(self)




    def ref_method_body(self):

        localctx = CSharpParser.Ref_method_bodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 546, self.RULE_ref_method_body)
        try:
            self.state = 3190
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [131]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3183
                self.block()
                pass
            elif token in [151]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3184
                self.right_arrow()
                self.state = 3185
                self.match(CSharpParser.REF)
                self.state = 3186
                self.variable_reference()
                self.state = 3187
                self.match(CSharpParser.SEMICOLON)
                pass
            elif token in [140]:
                self.enterOuterAlt(localctx, 3)
                self.state = 3189
                self.match(CSharpParser.SEMICOLON)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Ref_method_modifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NEW(self):
            return self.getToken(CSharpParser.NEW, 0)

        def PUBLIC(self):
            return self.getToken(CSharpParser.PUBLIC, 0)

        def PROTECTED(self):
            return self.getToken(CSharpParser.PROTECTED, 0)

        def INTERNAL(self):
            return self.getToken(CSharpParser.INTERNAL, 0)

        def PRIVATE(self):
            return self.getToken(CSharpParser.PRIVATE, 0)

        def STATIC(self):
            return self.getToken(CSharpParser.STATIC, 0)

        def VIRTUAL(self):
            return self.getToken(CSharpParser.VIRTUAL, 0)

        def SEALED(self):
            return self.getToken(CSharpParser.SEALED, 0)

        def OVERRIDE(self):
            return self.getToken(CSharpParser.OVERRIDE, 0)

        def ABSTRACT(self):
            return self.getToken(CSharpParser.ABSTRACT, 0)

        def EXTERN(self):
            return self.getToken(CSharpParser.EXTERN, 0)

        def UNSAFE(self):
            return self.getToken(CSharpParser.UNSAFE, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_ref_method_modifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRef_method_modifier" ):
                listener.enterRef_method_modifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRef_method_modifier" ):
                listener.exitRef_method_modifier(self)




    def ref_method_modifier(self):

        localctx = CSharpParser.Ref_method_modifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 548, self.RULE_ref_method_modifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3192
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 576465150349935104) != 0) or ((((_la - 69)) & ~0x3f) == 0 and ((1 << (_la - 69)) & 9345917022721) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Method_member_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(CSharpParser.IdentifierContext,i)


        def DOUBLE_COLON(self):
            return self.getToken(CSharpParser.DOUBLE_COLON, 0)

        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.DOT)
            else:
                return self.getToken(CSharpParser.DOT, i)

        def type_argument_list(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Type_argument_listContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Type_argument_listContext,i)


        def getRuleIndex(self):
            return CSharpParser.RULE_method_member_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMethod_member_name" ):
                listener.enterMethod_member_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMethod_member_name" ):
                listener.exitMethod_member_name(self)




    def method_member_name(self):

        localctx = CSharpParser.Method_member_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 550, self.RULE_method_member_name)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3199
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,392,self._ctx)
            if la_ == 1:
                self.state = 3194
                self.identifier()
                pass

            elif la_ == 2:
                self.state = 3195
                self.identifier()
                self.state = 3196
                self.match(CSharpParser.DOUBLE_COLON)
                self.state = 3197
                self.identifier()
                pass


            self.state = 3208
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,394,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 3202
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==152:
                        self.state = 3201
                        self.type_argument_list()


                    self.state = 3204
                    self.match(CSharpParser.DOT)
                    self.state = 3205
                    self.identifier() 
                self.state = 3210
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,394,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Operator_declarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPERATOR(self):
            return self.getToken(CSharpParser.OPERATOR, 0)

        def overloadable_operator(self):
            return self.getTypedRuleContext(CSharpParser.Overloadable_operatorContext,0)


        def OPEN_PARENS(self):
            return self.getToken(CSharpParser.OPEN_PARENS, 0)

        def arg_declaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Arg_declarationContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Arg_declarationContext,i)


        def CLOSE_PARENS(self):
            return self.getToken(CSharpParser.CLOSE_PARENS, 0)

        def body(self):
            return self.getTypedRuleContext(CSharpParser.BodyContext,0)


        def right_arrow(self):
            return self.getTypedRuleContext(CSharpParser.Right_arrowContext,0)


        def throwable_expression(self):
            return self.getTypedRuleContext(CSharpParser.Throwable_expressionContext,0)


        def SEMICOLON(self):
            return self.getToken(CSharpParser.SEMICOLON, 0)

        def IN(self, i:int=None):
            if i is None:
                return self.getTokens(CSharpParser.IN)
            else:
                return self.getToken(CSharpParser.IN, i)

        def COMMA(self):
            return self.getToken(CSharpParser.COMMA, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_operator_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOperator_declaration" ):
                listener.enterOperator_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOperator_declaration" ):
                listener.exitOperator_declaration(self)




    def operator_declaration(self):

        localctx = CSharpParser.Operator_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 552, self.RULE_operator_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3211
            self.match(CSharpParser.OPERATOR)
            self.state = 3212
            self.overloadable_operator()
            self.state = 3213
            self.match(CSharpParser.OPEN_PARENS)
            self.state = 3215
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==56:
                self.state = 3214
                self.match(CSharpParser.IN)


            self.state = 3217
            self.arg_declaration()
            self.state = 3223
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==138:
                self.state = 3218
                self.match(CSharpParser.COMMA)
                self.state = 3220
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==56:
                    self.state = 3219
                    self.match(CSharpParser.IN)


                self.state = 3222
                self.arg_declaration()


            self.state = 3225
            self.match(CSharpParser.CLOSE_PARENS)
            self.state = 3231
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,398,self._ctx)
            if la_ == 1:
                self.state = 3226
                self.body()
                pass

            elif la_ == 2:
                self.state = 3227
                self.right_arrow()
                self.state = 3228
                self.throwable_expression()
                self.state = 3229
                self.match(CSharpParser.SEMICOLON)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Arg_declarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def type_(self):
            return self.getTypedRuleContext(CSharpParser.Type_Context,0)


        def identifier(self):
            return self.getTypedRuleContext(CSharpParser.IdentifierContext,0)


        def ASSIGNMENT(self):
            return self.getToken(CSharpParser.ASSIGNMENT, 0)

        def expression(self):
            return self.getTypedRuleContext(CSharpParser.ExpressionContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_arg_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArg_declaration" ):
                listener.enterArg_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArg_declaration" ):
                listener.exitArg_declaration(self)




    def arg_declaration(self):

        localctx = CSharpParser.Arg_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 554, self.RULE_arg_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3233
            self.type_()
            self.state = 3234
            self.identifier()
            self.state = 3237
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==151:
                self.state = 3235
                self.match(CSharpParser.ASSIGNMENT)
                self.state = 3236
                self.expression()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Method_invocationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PARENS(self):
            return self.getToken(CSharpParser.OPEN_PARENS, 0)

        def CLOSE_PARENS(self):
            return self.getToken(CSharpParser.CLOSE_PARENS, 0)

        def argument_list(self):
            return self.getTypedRuleContext(CSharpParser.Argument_listContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_method_invocation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMethod_invocation" ):
                listener.enterMethod_invocation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMethod_invocation" ):
                listener.exitMethod_invocation(self)




    def method_invocation(self):

        localctx = CSharpParser.Method_invocationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 556, self.RULE_method_invocation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3239
            self.match(CSharpParser.OPEN_PARENS)
            self.state = 3241
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & -6690580362525953024) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -46531701498629203) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & 562951571693735) != 0):
                self.state = 3240
                self.argument_list()


            self.state = 3243
            self.match(CSharpParser.CLOSE_PARENS)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Object_creation_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PARENS(self):
            return self.getToken(CSharpParser.OPEN_PARENS, 0)

        def CLOSE_PARENS(self):
            return self.getToken(CSharpParser.CLOSE_PARENS, 0)

        def argument_list(self):
            return self.getTypedRuleContext(CSharpParser.Argument_listContext,0)


        def object_or_collection_initializer(self):
            return self.getTypedRuleContext(CSharpParser.Object_or_collection_initializerContext,0)


        def target_typed_new(self):
            return self.getTypedRuleContext(CSharpParser.Target_typed_newContext,0)


        def OPEN_BRACKET(self):
            return self.getToken(CSharpParser.OPEN_BRACKET, 0)

        def expression_list(self):
            return self.getTypedRuleContext(CSharpParser.Expression_listContext,0)


        def CLOSE_BRACKET(self):
            return self.getToken(CSharpParser.CLOSE_BRACKET, 0)

        def rank_specifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharpParser.Rank_specifierContext)
            else:
                return self.getTypedRuleContext(CSharpParser.Rank_specifierContext,i)


        def array_initializer(self):
            return self.getTypedRuleContext(CSharpParser.Array_initializerContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_object_creation_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterObject_creation_expression" ):
                listener.enterObject_creation_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitObject_creation_expression" ):
                listener.exitObject_creation_expression(self)




    def object_creation_expression(self):

        localctx = CSharpParser.Object_creation_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 558, self.RULE_object_creation_expression)
        self._la = 0 # Token type
        try:
            self.state = 3267
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,405,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3245
                self.match(CSharpParser.OPEN_PARENS)
                self.state = 3247
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -6690580362525953024) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -46531701498629203) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & 562951571693735) != 0):
                    self.state = 3246
                    self.argument_list()


                self.state = 3249
                self.match(CSharpParser.CLOSE_PARENS)
                self.state = 3251
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==131:
                    self.state = 3250
                    self.object_or_collection_initializer()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3253
                self.object_or_collection_initializer()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 3254
                self.target_typed_new()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 3255
                self.match(CSharpParser.OPEN_BRACKET)
                self.state = 3256
                self.expression_list()
                self.state = 3257
                self.match(CSharpParser.CLOSE_BRACKET)
                self.state = 3261
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,403,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 3258
                        self.rank_specifier() 
                    self.state = 3263
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,403,self._ctx)

                self.state = 3265
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==131:
                    self.state = 3264
                    self.array_initializer()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Target_typed_newContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PARENS(self):
            return self.getToken(CSharpParser.OPEN_PARENS, 0)

        def CLOSE_PARENS(self):
            return self.getToken(CSharpParser.CLOSE_PARENS, 0)

        def argument_list(self):
            return self.getTypedRuleContext(CSharpParser.Argument_listContext,0)


        def object_or_collection_initializer(self):
            return self.getTypedRuleContext(CSharpParser.Object_or_collection_initializerContext,0)


        def getRuleIndex(self):
            return CSharpParser.RULE_target_typed_new

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTarget_typed_new" ):
                listener.enterTarget_typed_new(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTarget_typed_new" ):
                listener.exitTarget_typed_new(self)




    def target_typed_new(self):

        localctx = CSharpParser.Target_typed_newContext(self, self._ctx, self.state)
        self.enterRule(localctx, 560, self.RULE_target_typed_new)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3269
            self.match(CSharpParser.OPEN_PARENS)
            self.state = 3271
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & -6690580362525953024) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -46531701498629203) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & 562951571693735) != 0):
                self.state = 3270
                self.argument_list()


            self.state = 3273
            self.match(CSharpParser.CLOSE_PARENS)
            self.state = 3275
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==131:
                self.state = 3274
                self.object_or_collection_initializer()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self):
            return self.getToken(CSharpParser.IDENTIFIER, 0)

        def ADD(self):
            return self.getToken(CSharpParser.ADD, 0)

        def ALIAS(self):
            return self.getToken(CSharpParser.ALIAS, 0)

        def ARGLIST(self):
            return self.getToken(CSharpParser.ARGLIST, 0)

        def ASCENDING(self):
            return self.getToken(CSharpParser.ASCENDING, 0)

        def ASYNC(self):
            return self.getToken(CSharpParser.ASYNC, 0)

        def AWAIT(self):
            return self.getToken(CSharpParser.AWAIT, 0)

        def BY(self):
            return self.getToken(CSharpParser.BY, 0)

        def DESCENDING(self):
            return self.getToken(CSharpParser.DESCENDING, 0)

        def DYNAMIC(self):
            return self.getToken(CSharpParser.DYNAMIC, 0)

        def EQUALS(self):
            return self.getToken(CSharpParser.EQUALS, 0)

        def FROM(self):
            return self.getToken(CSharpParser.FROM, 0)

        def GET(self):
            return self.getToken(CSharpParser.GET, 0)

        def GROUP(self):
            return self.getToken(CSharpParser.GROUP, 0)

        def INTO(self):
            return self.getToken(CSharpParser.INTO, 0)

        def JOIN(self):
            return self.getToken(CSharpParser.JOIN, 0)

        def LET(self):
            return self.getToken(CSharpParser.LET, 0)

        def NAMEOF(self):
            return self.getToken(CSharpParser.NAMEOF, 0)

        def ON(self):
            return self.getToken(CSharpParser.ON, 0)

        def ORDERBY(self):
            return self.getToken(CSharpParser.ORDERBY, 0)

        def PARTIAL(self):
            return self.getToken(CSharpParser.PARTIAL, 0)

        def REMOVE(self):
            return self.getToken(CSharpParser.REMOVE, 0)

        def SELECT(self):
            return self.getToken(CSharpParser.SELECT, 0)

        def SET(self):
            return self.getToken(CSharpParser.SET, 0)

        def UNMANAGED(self):
            return self.getToken(CSharpParser.UNMANAGED, 0)

        def VAR(self):
            return self.getToken(CSharpParser.VAR, 0)

        def WHEN(self):
            return self.getToken(CSharpParser.WHEN, 0)

        def WHERE(self):
            return self.getToken(CSharpParser.WHERE, 0)

        def YIELD(self):
            return self.getToken(CSharpParser.YIELD, 0)

        def getRuleIndex(self):
            return CSharpParser.RULE_identifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentifier" ):
                listener.enterIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentifier" ):
                listener.exitIdentifier(self)




    def identifier(self):

        localctx = CSharpParser.IdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 562, self.RULE_identifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3277
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & -6906832351458511872) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 96976925775434249) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[237] = self.right_arrow_sempred
        self._predicates[238] = self.right_shift_sempred
        self._predicates[239] = self.right_shift_assignment_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def right_arrow_sempred(self, localctx:Right_arrowContext, predIndex:int):
            if predIndex == 0:
                return (0 if localctx.first is None else localctx.first.tokenIndex) + 1 == (0 if localctx.second is None else localctx.second.tokenIndex)
         

    def right_shift_sempred(self, localctx:Right_shiftContext, predIndex:int):
            if predIndex == 1:
                return (0 if localctx.first is None else localctx.first.tokenIndex) + 1 == (0 if localctx.second is None else localctx.second.tokenIndex)
         

    def right_shift_assignment_sempred(self, localctx:Right_shift_assignmentContext, predIndex:int):
            if predIndex == 2:
                return (0 if localctx.first is None else localctx.first.tokenIndex) + 1 == (0 if localctx.second is None else localctx.second.tokenIndex)
         




